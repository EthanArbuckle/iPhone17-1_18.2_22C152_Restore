BOOL CMMsl::WorkoutRecorderAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL result;

  v2 = *(void *)(a1 + 8);
  v3 = *(void *)(a2 + 8);
  result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderBodyMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BodyMetrics::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderElevation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::ElevationChange::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderHeartRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderRotationRate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::RotationRate::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderOdometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::OdometerWithAltitude::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderWorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::WorkoutEvent::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::VO2MaxInput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 88);
  __int16 v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::WorkoutRecorderHealthKitInfo::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PearlAttitude::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 124);
  __int16 v3 = *(_WORD *)(a2 + 124);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 124) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  BOOL v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 124) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 124) & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  v8 = *(float **)(a1 + 32);
  v7 = *(float **)(a1 + 40);
  v9 = *(float **)(a2 + 32);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 40) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  v12 = *(float **)(a2 + 56);
  if (v10 - v11 != *(void *)(a2 + 64) - (void)v12) {
    return 0;
  }
  if (v11 == v10) {
    return 1;
  }
  uint64_t v13 = v11 + 4;
  do
  {
    float v14 = *v12++;
    BOOL result = *(float *)(v13 - 4) == v14;
    BOOL v16 = *(float *)(v13 - 4) != v14 || v13 == v10;
    v13 += 4;
  }
  while (!v16);
  return result;
}

BOOL CMMsl::RotationRate::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::WatchOrientationSettings::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1002645A0((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderWifiScanResults::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return *(void *)(a2 + 8) == 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return 0;
  }
  if (sub_1002645A0((uint64_t *)(v3 + 8), v4 + 8)) {
    return 1;
  }
  return !*(void *)(a1 + 8) && *(void *)(a2 + 8) == 0;
}

BOOL CMMsl::WorkoutRecorderPressure::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::VisionCompassBias::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 76);
  __int16 v3 = *(_WORD *)(a2 + 76);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  v5 = *(float **)(a1 + 8);
  uint64_t v4 = *(float **)(a1 + 16);
  v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v7 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  }
  return v7;
}

BOOL CMMsl::VIOEstimation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 340) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 340) & 0x40) == 0 || *(_DWORD *)(a1 + 336) != *(_DWORD *)(a2 + 336)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 340) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 340) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 340) & 4) == 0 || *(double *)(a1 + 312) != *(double *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 340) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 340))
  {
    if ((*(unsigned char *)(a2 + 340) & 1) == 0 || *(double *)(a1 + 296) != *(double *)(a2 + 296)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 340))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 340) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 340) & 8) == 0 || *(double *)(a1 + 320) != *(double *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 340) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 340) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 340) & 2) == 0 || *(double *)(a1 + 304) != *(double *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 340) & 2) != 0)
  {
    return 0;
  }
  __int16 v3 = *(double **)(a1 + 176);
  __int16 v2 = *(double **)(a1 + 184);
  uint64_t v4 = *(double **)(a2 + 176);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 184) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  v6 = *(double **)(a1 + 104);
  v5 = *(double **)(a1 + 112);
  BOOL v7 = *(double **)(a2 + 104);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 112) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  v9 = *(double **)(a1 + 272);
  v8 = *(double **)(a1 + 280);
  uint64_t v10 = *(double **)(a2 + 272);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 280) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  v12 = *(double **)(a1 + 8);
  uint64_t v11 = *(double **)(a1 + 16);
  uint64_t v13 = *(double **)(a2 + 8);
  if ((char *)v11 - (char *)v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  while (v12 != v11)
  {
    if (*v12 != *v13) {
      return 0;
    }
    ++v12;
    ++v13;
  }
  v15 = *(double **)(a1 + 224);
  float v14 = *(double **)(a1 + 232);
  BOOL v16 = *(double **)(a2 + 224);
  if ((char *)v14 - (char *)v15 != *(void *)(a2 + 232) - (void)v16) {
    return 0;
  }
  while (v15 != v14)
  {
    if (*v15 != *v16) {
      return 0;
    }
    ++v15;
    ++v16;
  }
  v18 = *(double **)(a1 + 152);
  v17 = *(double **)(a1 + 160);
  v19 = *(double **)(a2 + 152);
  if ((char *)v17 - (char *)v18 != *(void *)(a2 + 160) - (void)v19) {
    return 0;
  }
  while (v18 != v17)
  {
    if (*v18 != *v19) {
      return 0;
    }
    ++v18;
    ++v19;
  }
  v21 = *(double **)(a1 + 128);
  v20 = *(double **)(a1 + 136);
  v22 = *(double **)(a2 + 128);
  if ((char *)v20 - (char *)v21 != *(void *)(a2 + 136) - (void)v22) {
    return 0;
  }
  while (v21 != v20)
  {
    if (*v21 != *v22) {
      return 0;
    }
    ++v21;
    ++v22;
  }
  v24 = *(double **)(a1 + 248);
  v23 = *(double **)(a1 + 256);
  v25 = *(double **)(a2 + 248);
  if ((char *)v23 - (char *)v24 != *(void *)(a2 + 256) - (void)v25) {
    return 0;
  }
  while (v24 != v23)
  {
    if (*v24 != *v25) {
      return 0;
    }
    ++v24;
    ++v25;
  }
  v27 = *(double **)(a1 + 32);
  v26 = *(double **)(a1 + 40);
  v28 = *(double **)(a2 + 32);
  if ((char *)v26 - (char *)v27 != *(void *)(a2 + 40) - (void)v28) {
    return 0;
  }
  while (v27 != v26)
  {
    if (*v27 != *v28) {
      return 0;
    }
    ++v27;
    ++v28;
  }
  v30 = *(double **)(a1 + 200);
  v29 = *(double **)(a1 + 208);
  v31 = *(double **)(a2 + 200);
  if ((char *)v29 - (char *)v30 != *(void *)(a2 + 208) - (void)v31) {
    return 0;
  }
  while (v30 != v29)
  {
    if (*v30 != *v31) {
      return 0;
    }
    ++v30;
    ++v31;
  }
  v33 = *(double **)(a1 + 80);
  v32 = *(double **)(a1 + 88);
  v34 = *(double **)(a2 + 80);
  if ((char *)v32 - (char *)v33 != *(void *)(a2 + 88) - (void)v34) {
    return 0;
  }
  while (v33 != v32)
  {
    if (*v33 != *v34) {
      return 0;
    }
    ++v33;
    ++v34;
  }
  v36 = *(double **)(a1 + 56);
  v35 = *(double **)(a1 + 64);
  v37 = *(double **)(a2 + 56);
  if ((char *)v35 - (char *)v36 != *(void *)(a2 + 64) - (void)v37) {
    return 0;
  }
  while (v36 != v35)
  {
    if (*v36 != *v37) {
      return 0;
    }
    ++v36;
    ++v37;
  }
  if ((*(unsigned char *)(a1 + 340) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 340) & 0x20) == 0 || *(float *)(a1 + 332) != *(float *)(a2 + 332)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 340) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v38 = (*(unsigned char *)(a2 + 340) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 340) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 340) & 0x10) != 0 && *(float *)(a1 + 328) == *(float *)(a2 + 328);
  }
  return v38;
}

BOOL CMMsl::LSLHeadingEstimation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 192);
  __int16 v3 = *(_WORD *)(a2 + 192);
  if ((v2 & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x4000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x1000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 32);
  uint64_t v4 = *(double **)(a1 + 40);
  v6 = *(double **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  v8 = *(double **)(a1 + 8);
  BOOL v7 = *(double **)(a1 + 16);
  v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  uint64_t v11 = *(double **)(a1 + 56);
  uint64_t v10 = *(double **)(a1 + 64);
  v12 = *(double **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 64) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x2000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x800) == 0 || *(void *)(a1 + 168) != *(void *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x100) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 192) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 192) & 0x200) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 192) & 0x200) != 0)
  {
    return 0;
  }
  BOOL v13 = (v3 & 0x400) == 0;
  if ((*(_WORD *)(a1 + 192) & 0x400) != 0) {
    return (*(_WORD *)(a2 + 192) & 0x400) != 0 && *(double *)(a1 + 160) == *(double *)(a2 + 160);
  }
  return v13;
}

BOOL CMMsl::MovementStats::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::StepCountEntry::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 152);
  int v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 72);
  v5 = *(unsigned __int8 **)(a2 + 72);
  if (v4)
  {
    if (!v5 || !sub_10005CB00(v4, v5) && *(void *)(a1 + 72) | *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 152);
  int v7 = *(_DWORD *)(a2 + 152);
  if ((v6 & 0x200000) != 0)
  {
    if ((v7 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v7 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x400000) != 0)
  {
    if ((v7 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 149) != *(unsigned __int8 *)(a2 + 149)) {
      return 0;
    }
  }
  else if ((v7 & 0x400000) != 0)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !CMMsl::AccelerometerPace::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  if ((v6 & 0x40000) != 0)
  {
    if ((v7 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v7 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x100000) != 0)
  {
    if ((v7 & 0x100000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v7 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x20000) != 0)
  {
    if ((v7 & 0x20000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v7 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x400) != 0)
  {
    if ((v7 & 0x400) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v7 & 0x400) != 0)
  {
    return 0;
  }
  if ((v6 & 0x800) != 0)
  {
    if ((v7 & 0x800) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v7 & 0x800) != 0)
  {
    return 0;
  }
  if ((v6 & 0x2000) != 0)
  {
    if ((v7 & 0x2000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v7 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v6 & 0x200) != 0)
  {
    if ((v7 & 0x200) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v7 & 0x200) != 0)
  {
    return 0;
  }
  if ((v6 & 0x1000) != 0)
  {
    if ((v7 & 0x1000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v7 & 0x1000) != 0)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a2 + 56);
  if (v10)
  {
    if (!v11) {
      return 0;
    }
    if (*(unsigned char *)(v10 + 12))
    {
      if ((*(unsigned char *)(v11 + 12) & 1) == 0 || *(float *)(v10 + 8) != *(float *)(v11 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v11 + 12))
    {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  BOOL result = (v7 & 0x10000) == 0;
  if ((v6 & 0x10000) == 0) {
    return result;
  }
  return (v7 & 0x10000) != 0 && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128);
}

BOOL CMMsl::MobilityBoutMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 176) != *(unsigned __int8 *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & (unint64_t)&_mh_execute_header) == 0;
  if ((v2 & 0x100000000) != 0) {
    return (v3 & 0x100000000) != 0 && *(float *)(a1 + 148) == *(float *)(a2 + 148);
  }
  return v4;
}

BOOL CMMsl::VIOPose::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 112);
  __int16 v3 = *(_WORD *)(a2 + 112);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x200) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  v5 = *(double **)(a1 + 8);
  BOOL v4 = *(double **)(a1 + 16);
  int v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 112) & 0x100) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 112) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v7 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  }
  return v7;
}

BOOL CMMsl::SignalEnvironment::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::VIOReplayPose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  char v3 = *(double **)(a1 + 8);
  __int16 v2 = *(double **)(a1 + 16);
  BOOL v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v7 = *(double **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    double v9 = *v7++;
    BOOL result = *(double *)(v8 - 8) == v9;
    BOOL v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualStateMeasurement::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if ((*(unsigned char *)(a2 + 96) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 96))
  {
    return 0;
  }
  char v3 = *(double **)(a1 + 8);
  __int16 v2 = *(double **)(a1 + 16);
  BOOL v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(double **)(a1 + 32);
  uint64_t v5 = *(double **)(a1 + 40);
  BOOL v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 56);
  uint64_t v8 = *(double **)(a1 + 64);
  uint64_t v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  if ((*(unsigned char *)(a1 + 96) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 96) & 4) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 96) & 4) != 0)
  {
    return 0;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 96) & 2) == 0;
  if ((*(unsigned char *)(a1 + 96) & 2) != 0) {
    return (*(unsigned char *)(a2 + 96) & 2) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
  }
  return v11;
}

BOOL CMMsl::KappaTriggerDebug::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 120);
  __int16 v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 118) != *(unsigned __int8 *)(a2 + 118)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  uint64_t v5 = *(double **)(a1 + 8);
  BOOL v4 = *(double **)(a1 + 16);
  uint64_t v6 = *(double **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 56);
  BOOL v7 = *(float **)(a1 + 64);
  double v9 = *(float **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 64) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  BOOL v11 = *(float **)(a1 + 32);
  uint64_t v10 = *(float **)(a1 + 40);
  v12 = *(float **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 40) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 116) != *(unsigned __int8 *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 117) != *(unsigned __int8 *)(a2 + 117)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v13 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  }
  return v13;
}

BOOL CMMsl::KappaDirectionOfTravel::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 144);
  int v3 = *(_DWORD *)(a2 + 144);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 80) != *(void *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 32);
  BOOL v4 = *(float **)(a1 + 40);
  uint64_t v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  double v9 = *(float **)(a2 + 8);
  if (v7 - v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  if (v8 == v7) {
    return 1;
  }
  uint64_t v10 = v8 + 4;
  do
  {
    float v11 = *v9++;
    BOOL result = *(float *)(v10 - 4) == v11;
    BOOL v13 = *(float *)(v10 - 4) != v11 || v10 == v7;
    v10 += 4;
  }
  while (!v13);
  return result;
}

BOOL CMMsl::KappaSteps::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::SignificantUserInteraction::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaRoads::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  return v2;
}

uint64_t CMMsl::UserStudyEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL v2 = *(unsigned __int8 **)(a1 + 8);
  int v3 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t result = v3 == 0;
  if (!v2) {
    return result;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v5 = v2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v2[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v3[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    double v9 = *(unsigned __int8 **)(a2 + 8);
  }
  else {
    double v9 = *v3;
  }
  if ((v5 & 0x80) != 0) {
    return !memcmp(*(const void **)v2, v9, *((void *)v2 + 1));
  }
  if (!v2[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v2++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

BOOL CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a2 + 80);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  int v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    __int16 v9 = *(_WORD *)(a1 + 104);
    __int16 v10 = *(_WORD *)(a2 + 104);
    if ((v9 & 0x80) != 0)
    {
      if ((v10 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
        return 0;
      }
    }
    else if ((v10 & 0x80) != 0)
    {
      return 0;
    }
    if ((v9 & 0x40) != 0)
    {
      if ((v10 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
        return 0;
      }
    }
    else if ((v10 & 0x40) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
    {
      return 0;
    }
    if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
    {
      if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
        return 0;
      }
    }
    else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
    {
      return 0;
    }
    if ((v9 & 2) != 0)
    {
      if ((v10 & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((v10 & 2) != 0)
    {
      return 0;
    }
    if ((v9 & 4) != 0)
    {
      if ((v10 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
        return 0;
      }
    }
    else if ((v10 & 4) != 0)
    {
      return 0;
    }
    if ((v9 & 0x10) != 0)
    {
      if ((v10 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
        return 0;
      }
    }
    else if ((v10 & 0x10) != 0)
    {
      return 0;
    }
    if ((v9 & 0x20) != 0)
    {
      if ((v10 & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
        return 0;
      }
    }
    else if ((v10 & 0x20) != 0)
    {
      return 0;
    }
    if (v9)
    {
      if ((v10 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        return 0;
      }
    }
    else if (v10)
    {
      return 0;
    }
    BOOL result = (v10 & 8) == 0;
    if ((v9 & 8) == 0) {
      return result;
    }
    if ((v10 & 8) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56)) {
      return 1;
    }
  }
  return 0;
}

BOOL CMMsl::TempestPoCListenerOrientation::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 96);
  __int16 v3 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x200) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x100) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 8);
  uint64_t v4 = *(float **)(a1 + 16);
  uint64_t v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 96) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v7 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v7;
}

BOOL CMMsl::WorkoutRecorderAccel800::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2)
  {
    if (v3)
    {
      if (*(unsigned char *)(v2 + 12))
      {
        if ((*(unsigned char *)(v3 + 12) & 1) == 0 || *(float *)(v2 + 8) != *(float *)(v3 + 8)) {
          return 0;
        }
      }
      else if (*(unsigned char *)(v3 + 12))
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL CMMsl::VisualLocalization::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 100) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 100) & 0x10) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 100) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 100) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 100) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 100) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 100) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 100) & 8) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 100) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 100))
  {
    if ((*(unsigned char *)(a2 + 100) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 100))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 100) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 100) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 100) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 32);
  uint64_t v2 = *(double **)(a1 + 40);
  uint64_t v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 8);
  uint64_t v5 = *(float **)(a1 + 16);
  BOOL v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 100) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 100) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 100) & 0x20) != 0 && *(float *)(a1 + 96) == *(float *)(a2 + 96);
  }
  return v8;
}

BOOL CMMsl::SoundPressureLevel::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::MotionLocation::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 220);
  int v4 = *(_DWORD *)(a2 + 220);
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v4 & 1) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0) {
      return 0;
    }
    int v5 = *(_DWORD *)(a1 + 204);
    int v6 = *(_DWORD *)(a2 + 204);
    BOOL v2 = __OFSUB__(v5, v6);
    if (v5 != v6) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0) {
      return 0;
    }
    int v7 = *(_DWORD *)(a1 + 212);
    int v8 = *(_DWORD *)(a2 + 212);
    BOOL v2 = __OFSUB__(v7, v8);
    if (v7 != v8) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0) {
      return 0;
    }
    int v9 = *(_DWORD *)(a1 + 192);
    int v10 = *(_DWORD *)(a2 + 192);
    BOOL v2 = __OFSUB__(v9, v10);
    if (v9 != v10) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0) {
      return 0;
    }
    int v11 = *(_DWORD *)(a1 + 200);
    int v12 = *(_DWORD *)(a2 + 200);
    BOOL v2 = __OFSUB__(v11, v12);
    if (v11 != v12) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0) {
      return 0;
    }
    int v13 = *(_DWORD *)(a1 + 188);
    int v14 = *(_DWORD *)(a2 + 188);
    BOOL v2 = __OFSUB__(v13, v14);
    if (v13 != v14) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  BOOL v15 = (v4 & 0x4000000) == 0;
  if ((v3 & 0x4000000) != 0) {
    return (v4 & 0x4000000) != 0 && *(_DWORD *)(a1 + 196) == *(_DWORD *)(a2 + 196);
  }
  return v15;
}

BOOL CMMsl::MotionActivity::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 116);
  int v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 109) != *(unsigned __int8 *)(a2 + 109)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 110) != *(unsigned __int8 *)(a2 + 110)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 111) != *(unsigned __int8 *)(a2 + 111)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 116) & 0x2000) == 0;
  if ((v2 & 0x2000) != 0) {
    return (v3 & 0x2000) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  }
  return v4;
}

BOOL CMMsl::KappaTrigger::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 212);
  int v4 = *(_DWORD *)(a2 + 212);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 96);
    uint64_t v6 = *(void *)(a2 + 96);
    BOOL v2 = __OFSUB__(v5, v6);
    if (v5 != v6) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 211) != *(unsigned __int8 *)(a2 + 211)) {
      return 0;
    }
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  int v8 = *(double **)(a1 + 8);
  int v7 = *(double **)(a1 + 16);
  int v9 = *(double **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  int v11 = *(float **)(a1 + 56);
  int v10 = *(float **)(a1 + 64);
  int v12 = *(float **)(a2 + 56);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 64) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  int v14 = *(float **)(a1 + 32);
  int v13 = *(float **)(a1 + 40);
  BOOL v15 = *(float **)(a2 + 32);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 40) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 208) != *(unsigned __int8 *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 209) != *(unsigned __int8 *)(a2 + 209)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(void *)(a1 + 104) != *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 210) != *(unsigned __int8 *)(a2 + 210)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  BOOL v16 = (v4 & 0x800000) == 0;
  if ((v3 & 0x800000) != 0) {
    return (v4 & 0x800000) != 0 && *(_DWORD *)(a1 + 188) == *(_DWORD *)(a2 + 188);
  }
  return v16;
}

BOOL CMMsl::RelDMInSystemConfig::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      int v7 = (unsigned __int8 *)v4[23];
    }
    else {
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    int v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      int v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

BOOL CMMsl::JointLinkModelPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPose::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::ModelBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::MLBasedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::JointLinkModelPredictedPose::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionPredictedPose::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PressureCompensated::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::VO2MaxOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 72);
  __int16 v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64);
  }
  return v4;
}

BOOL CMMsl::MagneticAccessoryType1::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      int v7 = (unsigned __int8 *)v4[23];
    }
    else {
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    int v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      int v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20);
}

BOOL CMMsl::MagneticAccessoryType2::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::PressureCalibration::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 4) == 0;
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
    return (*(unsigned char *)(a2 + 32) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::WorkoutRecorderMagnetometer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Magnetometer::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WorkoutRecorderCompassCalibration::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::CompassCalibration::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::RawAudio::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(const void **)(a1 + 8);
  size_t v4 = *(void *)(v3 + 8) - (void)v2;
  uint64_t v6 = a2 + 8;
  uint64_t v5 = *(const void **)(a2 + 8);
  return v4 == *(void *)(v6 + 8) - (void)v5 && memcmp(v2, v5, v4) == 0;
}

BOOL CMMsl::ODTPose::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::PencilTipForce::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PencilTouch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 88);
  __int16 v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::Timestamp::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::WalkingSteadinessClassification::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 244);
  int v3 = *(_DWORD *)(a2 + 244);
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 241) != *(unsigned __int8 *)(a2 + 241)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 242) != *(unsigned __int8 *)(a2 + 242)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 238) != *(unsigned __int8 *)(a2 + 238)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a2 + 64);
  if (v4)
  {
    if (!v5 || !CMMsl::SteadinessEvent::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 239) != *(unsigned __int8 *)(a2 + 239)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 237) != *(unsigned __int8 *)(a2 + 237)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a2 + 120);
  if (v6)
  {
    if (!v7 || !CMMsl::SteadinessModelResult::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a2 + 112);
  if (v8)
  {
    if (!v9 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a2 + 104);
  if (v10)
  {
    if (!v11 || !CMMsl::SteadinessModelResult::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a2 + 96);
  if (v12)
  {
    if (!v13 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v15 = *(void *)(a2 + 152);
  if (v14)
  {
    if (!v15 || !CMMsl::SteadinessModelResult::operator==(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 144);
  uint64_t v17 = *(void *)(a2 + 144);
  if (v16)
  {
    if (!v17 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v16, v17)) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 168);
  uint64_t v19 = *(void *)(a2 + 168);
  if (v18)
  {
    if (!v19 || !CMMsl::SteadinessModelResult::operator==(v18, v19)) {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v21 = *(void *)(a2 + 160);
  if (v20)
  {
    if (!v21 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v20, v21)) {
      return 0;
    }
  }
  else if (v21)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 236) != *(unsigned __int8 *)(a2 + 236)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v23 = *(void *)(a2 + 88);
  if (v22)
  {
    if (!v23 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v22, v23)) {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 240) != *(unsigned __int8 *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  uint64_t v24 = *(void *)(a1 + 136);
  uint64_t v25 = *(void *)(a2 + 136);
  if (v24)
  {
    if (!v25 || !CMMsl::SteadinessModelResult::operator==(v24, v25)) {
      return 0;
    }
  }
  else if (v25)
  {
    return 0;
  }
  uint64_t v26 = *(void *)(a2 + 128);
  BOOL result = v26 == 0;
  if (!*(void *)(a1 + 128)) {
    return result;
  }
  return v26 && CMMsl::SteadinessModelHarmonicFeatures::operator==(*(void *)(a1 + 128), v26);
}

BOOL CMMsl::SteadinessModelResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 52);
  int v3 = *(unsigned __int8 *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::SteadinessEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 55) != *(unsigned __int8 *)(a2 + 55)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 53) != *(unsigned __int8 *)(a2 + 53)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 54) != *(unsigned __int8 *)(a2 + 54)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::SteadinessModelGaitBaselineFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 88);
  __int16 v3 = *(_WORD *)(a2 + 88);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return v4;
}

BOOL CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 176);
  int v3 = *(_DWORD *)(a2 + 176);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 176) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0) {
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  }
  return v4;
}

BOOL CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 1) == 0;
  if (*(unsigned char *)(a1 + 40)) {
    return (*(unsigned char *)(a2 + 40) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 216);
  int v3 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(double *)(a1 + 208) != *(double *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 216) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0) {
    return (v3 & 0x1000) != 0 && *(double *)(a1 + 104) == *(double *)(a2 + 104);
  }
  return v4;
}

BOOL CMMsl::SteadinessModelBalanceFeatures::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 8) == 0;
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
    return (*(unsigned char *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return v2;
}

BOOL CMMsl::MagnetometerReset::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 41) == *(unsigned __int8 *)(a2 + 41);
  }
  return v2;
}

BOOL CMMsl::WorkoutRecorderWatchOnWristStatus::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::WatchOnWristState::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::LiftToWakeOnHeadStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::StepCountEntryAddition::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 72);
  __int16 v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0) {
    return (*(_WORD *)(a2 + 72) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  }
  return v4;
}

BOOL CMMsl::StepDistanceFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::StepCountEntry::operator==(v4, v5) && *(void *)(a1 + 16) | *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::StepCountEntryAddition::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  __int16 v8 = *(_WORD *)(a1 + 100);
  __int16 v9 = *(_WORD *)(a2 + 100);
  if (v8)
  {
    if ((v9 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  if ((v8 & 2) != 0)
  {
    if ((v9 & 2) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v9 & 2) != 0)
  {
    return 0;
  }
  if ((v8 & 0x80) != 0)
  {
    if ((v9 & 0x80) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v9 & 0x80) != 0)
  {
    return 0;
  }
  if ((v8 & 0x20) != 0)
  {
    if ((v9 & 0x20) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v9 & 0x20) != 0)
  {
    return 0;
  }
  if ((v8 & 0x40) != 0)
  {
    if ((v9 & 0x40) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v9 & 0x40) != 0)
  {
    return 0;
  }
  if ((v8 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  if ((v8 & 8) != 0)
  {
    if ((v9 & 8) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v9 & 8) != 0)
  {
    return 0;
  }
  if ((v8 & 0x10) != 0)
  {
    if ((v9 & 0x10) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v9 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  BOOL result = (v9 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x100) == 0) {
    return result;
  }
  return (*(_WORD *)(a2 + 100) & 0x100) != 0 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88);
}

BOOL CMMsl::Skeleton3D::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10022CAF8((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::LockScreenStatus::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::PowerManagementUserActivity::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::LiftToWakeState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::ViewObstructedState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 84);
  int v3 = *(_DWORD *)(a2 + 84);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40000) == 0;
  if ((v2 & 0x40000) != 0) {
    return (v3 & 0x40000) != 0 && *(unsigned __int8 *)(a1 + 81) == *(unsigned __int8 *)(a2 + 81);
  }
  return v4;
}

BOOL CMMsl::RunningFormMetrics::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a2 + 224);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 220) != *(unsigned __int8 *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 217)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 221) != *(unsigned __int8 *)(a2 + 221)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 216) != *(unsigned __int8 *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 218) != *(unsigned __int8 *)(a2 + 218)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 219) != *(unsigned __int8 *)(a2 + 219)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 224) & 0x400) == 0;
  if ((v2 & 0x400) != 0) {
    return (v3 & 0x400) != 0 && *(double *)(a1 + 88) == *(double *)(a2 + 88);
  }
  return v4;
}

BOOL CMMsl::WorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  return sub_10026F8C0((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return *(void *)(a2 + 8) == 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return 0;
  }
  if (sub_10026F8C0((uint64_t *)(v3 + 8), v4 + 8)) {
    return 1;
  }
  return !*(void *)(a1 + 8) && *(void *)(a2 + 8) == 0;
}

BOOL CMMsl::PDRImpulse::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::PocketDetectionPacket::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 84);
  __int16 v3 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 84) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 84) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 84) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 84) & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 84) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v4;
}

BOOL CMMsl::LiftToWakeFeaturesNeo::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v2;
}

BOOL CMMsl::LiftToWakeStatusNeo::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0) {
    return (*(_WORD *)(a2 + 64) & 0x200) != 0 && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52);
  }
  return v4;
}

BOOL CMMsl::RunningPower::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 128);
  int v3 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 123) != *(unsigned __int8 *)(a2 + 123)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 125) != *(unsigned __int8 *)(a2 + 125)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 120) != *(unsigned __int8 *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 122) != *(unsigned __int8 *)(a2 + 122)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 128) & 0x4000) == 0;
  if ((v2 & 0x4000) != 0) {
    return (v3 & 0x4000) != 0 && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112);
  }
  return v4;
}

BOOL CMMsl::MotionContextActivity::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (!v2) {
    return result;
  }
  return v3 && CMMsl::PDRImpulse::operator==(v2, v3);
}

BOOL CMMsl::PDRAlgType::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::PdrMLModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  BOOL v4 = *(double **)(a2 + 8);
  if (v2 - v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL CMMsl::WorkoutRecorderAveragedALSData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AveragedALSData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::StrideCalEntry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 92);
  __int16 v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0) {
    return (*(_WORD *)(a2 + 92) & 0x200) != 0 && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80);
  }
  return v4;
}

BOOL CMMsl::RunningSpeedKFResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 188);
  int v3 = *(_DWORD *)(a2 + 188);
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x1000000) == 0;
  if ((v2 & 0x1000000) != 0) {
    return (v3 & 0x1000000) != 0 && *(unsigned __int8 *)(a1 + 181) == *(unsigned __int8 *)(a2 + 181);
  }
  return v4;
}

BOOL CMMsl::ProxPDP::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 45) != *(unsigned __int8 *)(a2 + 45)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x200) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0) {
    return (*(_WORD *)(a2 + 48) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  }
  return v4;
}

BOOL CMMsl::KeyboardMotionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::KeyboardMotionState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KeyboardKeyPress::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::WakeGestureNotification::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 1) == 0;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(unsigned char *)(a2 + 44) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::ProxBaselineEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 88);
  int v3 = *(_DWORD *)(a2 + 88);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 88) & 0x200) == 0;
  if ((v2 & 0x200) != 0) {
    return (v3 & 0x200) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v4;
}

BOOL CMMsl::RhythmicGnssOperatorStatus::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 8) == 0 || *(unsigned __int8 *)(a1 + 20) != *(unsigned __int8 *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 24) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 24) & 0x10) != 0 && *(unsigned __int8 *)(a1 + 21) == *(unsigned __int8 *)(a2 + 21);
  }
  return v2;
}

BOOL CMMsl::KeyboardMotionTrackpad::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KeyboardAttached::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::Skeleton2D::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10022B41C((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 48) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
    if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
      return result;
    }
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::Skeleton3DRetargeted::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10022CAF8((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 48) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
    if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
      return result;
    }
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::Skeleton3DLifted::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10022D6D0((uint64_t *)(a1 + 16), a2 + 16);
  if (result)
  {
    if ((*(unsigned char *)(a1 + 48) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
    if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
      return result;
    }
    return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::WatchHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a2 + 24);
  BOOL result = v3 == 0;
  if (!v2) {
    return result;
  }
  return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
}

BOOL CMMsl::WatchActiveCalories::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 1) == 0;
  if (*(unsigned char *)(a1 + 28)) {
    return (*(unsigned char *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::WatchBasalCalories::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 1) == 0;
  if (*(unsigned char *)(a1 + 28)) {
    return (*(unsigned char *)(a2 + 28) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::TrackRunData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 0x40) == 0;
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0) {
    return (*(unsigned char *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36);
  }
  return v2;
}

BOOL CMMsl::MapsRouteHintData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 20);
  __int16 v3 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(unsigned __int8 *)(a1 + 11) != *(unsigned __int8 *)(a2 + 11)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 20) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 20) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 20) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(unsigned __int8 *)(a1 + 10) != *(unsigned __int8 *)(a2 + 10)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return v4;
}

BOOL CMMsl::WorkoutRecorderFitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::FitnessMachineData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PedestrianFenceExit::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  return v2;
}

BOOL CMMsl::PhysicalEffortInput::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::PhysicalEffortSample::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x20) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

BOOL CMMsl::PedestrianCalorieModelDebugging::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 116);
  int v3 = *(unsigned __int16 *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x1000) == 0;
  if ((v2 & 0x1000) != 0) {
    return (v3 & 0x1000) != 0 && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104);
  }
  return v4;
}

BOOL CMMsl::WorkoutActivity::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (*(unsigned char *)(a1 + 16)) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::PencilDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::AuxiliaryDeviceMotion::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v7 = *(float **)(a1 + 8);
  double v6 = *(float **)(a1 + 16);
  BOOL v8 = *(float **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    if ((*(unsigned char *)(a1 + 48) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
    if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
      return result;
    }
    if ((*(unsigned char *)(a2 + 48) & 1) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40)) {
      return 1;
    }
  }
  return 0;
}

BOOL CMMsl::PencilFusionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 76);
  __int16 v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x100) == 0;
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0) {
    return (*(_WORD *)(a2 + 76) & 0x100) != 0 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72);
  }
  return v4;
}

BOOL CMMsl::SteadinessModelHarmonicFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 248);
  int v3 = *(_DWORD *)(a2 + 248);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(double *)(a1 + 216) != *(double *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(double *)(a1 + 224) != *(double *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(double *)(a1 + 232) != *(double *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0) {
    return (v3 & 0x2000000) != 0 && *(double *)(a1 + 208) == *(double *)(a2 + 208);
  }
  return v4;
}

BOOL CMMsl::PencilFusionReplayResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v4)
  {
    if (!v5 || !CMMsl::PencilFusionResult::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 64) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 4) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  uint64_t v7 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  BOOL v8 = *(double **)(a2 + 8);
  if ((char *)v6 - (char *)v7 == *(void *)(a2 + 16) - (void)v8)
  {
    while (v7 != v6)
    {
      if (*v7 != *v8) {
        return 0;
      }
      ++v7;
      ++v8;
    }
    if (*(unsigned char *)(a1 + 64))
    {
      if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 64))
    {
      return 0;
    }
    BOOL result = (*(unsigned char *)(a2 + 64) & 2) == 0;
    if ((*(unsigned char *)(a1 + 64) & 2) == 0) {
      return result;
    }
    if ((*(unsigned char *)(a2 + 64) & 2) != 0 && *(void *)(a1 + 40) == *(void *)(a2 + 40)) {
      return 1;
    }
  }
  return 0;
}

BOOL CMMsl::MobilitySmoothedGaitMetrics::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 2) == 0;
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
    return (*(unsigned char *)(a2 + 40) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::WatchEnclosureMaterial::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::MotionLoiAltitudeData::operator==(void *a1, void *a2)
{
  int v3 = (double *)a1[1];
  BOOL v2 = (double *)a1[2];
  uint64_t v4 = (double *)a2[1];
  if ((char *)v2 - (char *)v3 != a2[2] - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = (double *)a2[4];
  if (v5 - v6 != a2[5] - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 8;
  do
  {
    double v9 = *v7++;
    BOOL result = *(double *)(v8 - 8) == v9;
    BOOL v11 = *(double *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::PostureJoint::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(double **)(a1 + 8);
  BOOL v2 = *(double **)(a1 + 16);
  uint64_t v4 = *(double **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(double **)(a1 + 32);
  uint64_t v5 = *(double **)(a1 + 40);
  uint64_t v7 = *(double **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 60) & 1) == 0;
  if (*(unsigned char *)(a1 + 60)) {
    return (*(unsigned char *)(a2 + 60) & 1) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  return v8;
}

BOOL CMMsl::PostureSkeleton::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1001FBEE0((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL CMMsl::WorkoutRecorderFaceCovered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::FaceCovered::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::StreamingHighFrequencyHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::UltraFastAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::Accel::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

BOOL CMMsl::PressureOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PressureFiltered::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::Prox::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::TouchOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::MotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v3 = *(void *)(a2 + 192);
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v7 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v4)
  {
    if (!v5 || !CMMsl::VehicularFlagsData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v7 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v7 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v7 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v7 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  BOOL result = (v3 & 0x400000000) == 0;
  if ((v7 & 0x400000000) == 0) {
    return result;
  }
  return (v3 & 0x400000000) != 0 && *(_DWORD *)(a1 + 176) == *(_DWORD *)(a2 + 176);
}

BOOL CMMsl::PressureGps::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Pressure::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::SessionOverride::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::LocationOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 100);
  __int16 v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 100) & 0x800) != 0 && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
  }
  return v4;
}

BOOL CMMsl::MotionHint::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 4) == 0;
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
    return (*(unsigned char *)(a2 + 24) & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v2;
}

BOOL CMMsl::NonlinearBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(float **)(a1 + 128);
  BOOL v2 = *(float **)(a1 + 136);
  BOOL v4 = *(float **)(a2 + 128);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 136) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v8 = *(float **)(a1 + 104);
  uint64_t v7 = *(float **)(a1 + 112);
  double v9 = *(float **)(a2 + 104);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 112) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  BOOL v11 = *(float **)(a1 + 152);
  uint64_t v10 = *(float **)(a1 + 160);
  uint64_t v12 = *(float **)(a2 + 152);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 160) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  if (*(unsigned char *)(a1 + 180))
  {
    if ((*(unsigned char *)(a2 + 180) & 1) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 180))
  {
    return 0;
  }
  uint64_t v13 = *(const void **)(a1 + 80);
  size_t v14 = *(void *)(a1 + 88) - (void)v13;
  uint64_t v15 = *(const void **)(a2 + 80);
  if (v14 != *(void *)(a2 + 88) - (void)v15) {
    return 0;
  }
  if (memcmp(v13, v15, v14)) {
    return 0;
  }
  uint64_t v16 = *(const void **)(a1 + 8);
  size_t v17 = *(void *)(a1 + 16) - (void)v16;
  uint64_t v18 = *(const void **)(a2 + 8);
  if (v17 != *(void *)(a2 + 16) - (void)v18 || memcmp(v16, v18, v17) || !sub_10006EDA4(a1 + 32, a2 + 32)) {
    return 0;
  }

  return sub_10006EDA4(a1 + 56, a2 + 56);
}

BOOL CMMsl::NatalieData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x200) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0) {
    return (*(_WORD *)(a2 + 68) & 0x200) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  }
  return v4;
}

BOOL CMMsl::WorkoutEvent::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
  }
  return v4;
}

BOOL CMMsl::OnsetHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  }
  return v4;
}

BOOL CMMsl::MotionWifiLocation::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::MotionGPSLocation::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::StrideCalBin::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 4) == 0;
  if ((*(unsigned char *)(a1 + 40) & 4) != 0) {
    return (*(unsigned char *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::Odometer::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 100);
  __int16 v3 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x800) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x1000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 100) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 100) & 0x200) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 100) & 0x2000) != 0) {
    return (*(_WORD *)(a2 + 100) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  }
  return v4;
}

BOOL CMMsl::MetsInfo::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  }
  return v2;
}

BOOL CMMsl::VibrationEvent::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::StepCadenceToStrideLengthBin::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 4) == 0;
  if ((*(unsigned char *)(a1 + 40) & 4) != 0) {
    return (*(unsigned char *)(a2 + 40) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::WatchOrientationSettings::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (*(unsigned char *)(a1 + 16)) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::MotionWifiAssociation::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::MotionLoiData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 92);
  __int16 v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x800) == 0;
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0) {
    return (*(_WORD *)(a2 + 92) & 0x800) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  }
  return v4;
}

BOOL CMMsl::PressureFilteredNoTemperature::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::TapDetect::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v4;
}

BOOL CMMsl::TapAccept::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x40) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x40) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x40) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v2;
}

BOOL CMMsl::RelativeDeviceMotionInternal::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 164);
  int v3 = *(_DWORD *)(a2 + 164);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 32);
  BOOL v4 = *(float **)(a1 + 40);
  uint64_t v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  BOOL v8 = *(float **)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 16);
  double v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (1)
  {
    BOOL v10 = __OFSUB__(v8, v7);
    if (v8 == v7) {
      break;
    }
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0) {
      return 0;
    }
    int v11 = *(unsigned __int8 *)(a1 + 157);
    int v12 = *(unsigned __int8 *)(a2 + 157);
    BOOL v10 = __OFSUB__(v11, v12);
    if (v11 != v12) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0) {
      return 0;
    }
    int v13 = *(unsigned __int8 *)(a1 + 152);
    int v14 = *(unsigned __int8 *)(a2 + 152);
    BOOL v10 = __OFSUB__(v13, v14);
    if (v13 != v14) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0) {
      return 0;
    }
    int v15 = *(unsigned __int8 *)(a1 + 154);
    int v16 = *(unsigned __int8 *)(a2 + 154);
    BOOL v10 = __OFSUB__(v15, v16);
    if (v15 != v16) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0) {
      return 0;
    }
    BOOL v10 = 0;
    if (*(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0) {
      return 0;
    }
    BOOL v10 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0) {
      return 0;
    }
    BOOL v10 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0) {
      return 0;
    }
    int v17 = *(unsigned __int8 *)(a1 + 159);
    int v18 = *(unsigned __int8 *)(a2 + 159);
    BOOL v10 = __OFSUB__(v17, v18);
    if (v17 != v18) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & v3) < 0 != v10)
  {
    if (*(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161)) {
      return 0;
    }
  }
  else if ((v2 | v3) < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  BOOL v19 = (v3 & 0x20000) == 0;
  if ((v2 & 0x20000) != 0) {
    return (v3 & 0x20000) != 0 && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132);
  }
  return v19;
}

BOOL CMMsl::RelativeGravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

BOOL CMMsl::RelativeGravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 48);
  __int16 v3 = *(_WORD *)(a2 + 48);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 48) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 48) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v4;
}

BOOL CMMsl::ZeroVelocityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PredictedRelativeDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a2 + 80);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x4000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::MovementStatsSignal::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 40) & 0x10) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  }
  return v2;
}

BOOL CMMsl::MovementStatsGravityProjection::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 76) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 76) & 2) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 76) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 76))
  {
    if ((*(unsigned char *)(a2 + 76) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 76))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 76) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 76) & 4) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 76) & 4) != 0)
  {
    return 0;
  }
  __int16 v3 = *(float **)(a1 + 32);
  BOOL v2 = *(float **)(a1 + 40);
  BOOL v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(float **)(a2 + 8);
  if (v5 - v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotionCorrection::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::VisualLocalizationAttitudeConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 2) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 0x10) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 8) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 8) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 8);
  uint64_t v2 = *(float **)(a1 + 16);
  BOOL v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 60) & 4) == 0;
  if ((*(unsigned char *)(a1 + 60) & 4) != 0) {
    return (*(unsigned char *)(a2 + 60) & 4) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v5;
}

BOOL CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 128);
  int v4 = *(_DWORD *)(a2 + 128);
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0) {
      return 0;
    }
    int v5 = *(unsigned __int8 *)(a1 + 124);
    int v6 = *(unsigned __int8 *)(a2 + 124);
    BOOL v2 = __OFSUB__(v5, v6);
    if (v5 != v6) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0) {
      return 0;
    }
    int v7 = *(unsigned __int8 *)(a1 + 120);
    int v8 = *(unsigned __int8 *)(a2 + 120);
    BOOL v2 = __OFSUB__(v7, v8);
    if (v7 != v8) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0) {
      return 0;
    }
    int v9 = *(unsigned __int8 *)(a1 + 123);
    int v10 = *(unsigned __int8 *)(a2 + 123);
    BOOL v2 = __OFSUB__(v9, v10);
    if (v9 != v10) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0) {
      return 0;
    }
    int v11 = *(unsigned __int8 *)(a1 + 125);
    int v12 = *(unsigned __int8 *)(a2 + 125);
    BOOL v2 = __OFSUB__(v11, v12);
    if (v11 != v12) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126)) {
      return 0;
    }
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 121) != *(unsigned __int8 *)(a2 + 121)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v4 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL v13 = (v4 & 0x8000000) == 0;
  if ((v3 & 0x8000000) != 0) {
    return (v4 & 0x8000000) != 0 && *(unsigned __int8 *)(a1 + 122) == *(unsigned __int8 *)(a2 + 122);
  }
  return v13;
}

BOOL CMMsl::RelativeDeviceMotionComplexTransition::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 188);
  uint64_t v3 = *(void *)(a2 + 188);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000000000) == 0;
  if ((v2 & 0x2000000000000) != 0) {
    return (v3 & 0x2000000000000) != 0 && *(unsigned __int8 *)(a1 + 187) == *(unsigned __int8 *)(a2 + 187);
  }
  return v4;
}

BOOL CMMsl::WalkingDetectionResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x1000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::SitStandDetectorFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  }
  return v4;
}

BOOL CMMsl::SitStandDetectorTransition::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

BOOL CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

BOOL CMMsl::SpatialEvent::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::JitterBufferLevel::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  return v2;
}

BOOL CMMsl::PressureFiltered1HzLowPass::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  BOOL result = v3 == 0;
  if (!v2) {
    return result;
  }
  return v3 && CMMsl::PressureFilteredNoTemperature::operator==(v2, v3);
}

BOOL CMMsl::MotionActivityReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 36);
  __int16 v3 = *(_WORD *)(a2 + 36);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 36) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 36) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 35) != *(unsigned __int8 *)(a2 + 35)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 36) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v4;
}

BOOL CMMsl::LegacyALS5CHInput::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 0x40) == 0;
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0) {
    return (*(unsigned char *)(a2 + 40) & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v2;
}

BOOL CMMsl::Orientation::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 108);
  int v3 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 100) != *(unsigned __int8 *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 103) != *(unsigned __int8 *)(a2 + 103)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 102) != *(unsigned __int8 *)(a2 + 102)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 101) != *(unsigned __int8 *)(a2 + 101)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 108) & 0x200) == 0;
  if ((v2 & 0x200) != 0) {
    return (v3 & 0x200) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
  }
  return v4;
}

BOOL CMMsl::KappaBaroResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 152);
  int v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 152) & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(float *)(a1 + 60) == *(float *)(a2 + 60);
  }
  return v4;
}

BOOL CMMsl::KappaGpsResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 132);
  int v3 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 126) != *(unsigned __int8 *)(a2 + 126)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 127) != *(unsigned __int8 *)(a2 + 127)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 124) != *(unsigned __int8 *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0) {
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 125) == *(unsigned __int8 *)(a2 + 125);
  }
  return v4;
}

BOOL CMMsl::KappaPulseResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 316);
  uint64_t v3 = *(void *)(a2 + 316);
  if ((*(unsigned char *)(a1 + 324) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 324) & 8) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 324) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 324) & 2) == 0 || *(float *)(a1 + 304) != *(float *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 324) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 324) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 324) & 4) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 324) & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 324))
  {
    if ((*(unsigned char *)(a2 + 324) & 1) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 324))
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v3 & 0x200000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296)) {
      return 0;
    }
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 316);
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v4 & 0x2000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v4 & 0x100000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v4 & 0x2000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v4 & 0x40000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v4 & 0x80000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v4 & 0x1000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v4 & 0x400000000000000) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v4 & 0x8000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) == 0)
  {
    if ((v4 & 4) == 0) {
      goto LABEL_336;
    }
    return 0;
  }
  if ((v4 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
LABEL_336:
  BOOL v5 = (v4 & 0x400000000000) == 0;
  if ((v2 & 0x400000000000) != 0) {
    return (v4 & 0x400000000000) != 0 && *(float *)(a1 + 228) == *(float *)(a2 + 228);
  }
  return v5;
}

BOOL CMMsl::KappaZgResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 164);
  uint64_t v3 = *(void *)(a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 164) & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::KappaZgDetected::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 16);
  BOOL result = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return result;
}

BOOL CMMsl::KappaPulseInertialAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::KappaAirbagResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(void *)(a1 + 32) == *(void *)(a2 + 32);
  }
  return v4;
}

BOOL CMMsl::KappaCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 288);
  uint64_t v3 = *(void *)(a1 + 280);
  uint64_t v4 = *(void *)(a2 + 280);
  __int16 v5 = *(_WORD *)(a2 + 288);
  if (v3)
  {
    if ((v4 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if ((v3 & 0x2000000000000) != 0)
  {
    if ((v4 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 276) != *(unsigned __int8 *)(a2 + 276)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 288) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 275) != *(unsigned __int8 *)(a2 + 275)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 273) != *(unsigned __int8 *)(a2 + 273)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 270) != *(unsigned __int8 *)(a2 + 270)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(unsigned __int8 *)(a1 + 269) != *(unsigned __int8 *)(a2 + 269)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v5 & 1) == 0 || *(unsigned __int8 *)(a1 + 268) != *(unsigned __int8 *)(a2 + 268)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 272) != *(unsigned __int8 *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v4 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000) != 0)
  {
    if ((v4 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v4 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000) != 0)
  {
    if ((v4 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v4 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000000) != 0)
  {
    if ((v4 & 0x10000000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000000) != 0)
  {
    if ((v4 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000000) != 0)
  {
    if ((v4 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v4 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000000) != 0)
  {
    if ((v4 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 279) != *(unsigned __int8 *)(a2 + 279)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 288) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 271) != *(unsigned __int8 *)(a2 + 271)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v4 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000000) != 0)
  {
    if ((v4 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000000000) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 280);
  __int16 v7 = *(_WORD *)(a2 + 288);
  if ((v3 & 0x4000000) != 0)
  {
    if ((v6 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v6 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v6 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v6 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000000) != 0)
  {
    if ((v6 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228)) {
      return 0;
    }
  }
  else if ((v6 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 274) != *(unsigned __int8 *)(a2 + 274)) {
      return 0;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    if ((v6 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 277) != *(unsigned __int8 *)(a2 + 277)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 288) & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v6 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v6 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v6 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v6 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v6 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v6 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v6 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v6 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000000) != 0)
  {
    if ((v6 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v6 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000000) != 0)
  {
    if ((v6 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v6 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000000) != 0)
  {
    if ((v6 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v6 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000) != 0)
  {
    if ((v6 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000000) != 0)
  {
    if ((v6 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000000000) != 0)
  {
    if ((v6 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 288) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 288) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 278) != *(unsigned __int8 *)(a2 + 278)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 288) & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000000000) != 0)
  {
    if ((v6 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_376;
    }
    return 0;
  }
  if ((v6 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264)) {
    return 0;
  }
LABEL_376:
  BOOL v8 = (v6 & 0x2000000000000000) == 0;
  if ((v3 & 0x2000000000000000) != 0) {
    return (v6 & 0x2000000000000000) != 0 && *(float *)(a1 + 256) == *(float *)(a2 + 256);
  }
  return v8;
}

BOOL CMMsl::KappaQuiescenceResult::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaRecoveryResult::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaRolloverCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 316);
  uint64_t v3 = *(void *)(a2 + 316);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  int v4 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  int v5 = *(unsigned __int16 *)(a2 + 324) | (*(unsigned __int8 *)(a2 + 326) << 16);
  if ((*(_WORD *)(a1 + 324) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 310) != *(unsigned __int8 *)(a2 + 310)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 311) != *(unsigned __int8 *)(a2 + 311)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 8) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 8) == 0 || *(float *)(a1 + 280) != *(float *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 308) != *(unsigned __int8 *)(a2 + 308)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 305) != *(unsigned __int8 *)(a2 + 305)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 304) != *(unsigned __int8 *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 307) != *(unsigned __int8 *)(a2 + 307)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v3 & 0x2000000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40000) != 0)
  {
    if ((v5 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 313) != *(unsigned __int8 *)(a2 + 313)) {
      return 0;
    }
  }
  else if ((v5 & 0x40000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 306) != *(unsigned __int8 *)(a2 + 306)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 309) != *(unsigned __int8 *)(a2 + 309)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v3 & 0x20000000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(float *)(a1 + 216) != *(float *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v3 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 220) != *(_DWORD *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 312) != *(unsigned __int8 *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(float *)(a1 + 228) != *(float *)(a2 + 228)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(float *)(a1 + 248) != *(float *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x10) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x10) == 0 || *(float *)(a1 + 284) != *(float *)(a2 + 284)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(float *)(a1 + 232) != *(float *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(float *)(a1 + 252) != *(float *)(a2 + 252)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x20) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v3 & 0x100000000000000) == 0 || *(float *)(a1 + 236) != *(float *)(a2 + 236)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0 || *(float *)(a1 + 256) != *(float *)(a2 + 256)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x40) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x40) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 316);
  if ((v2 & 0x1000) != 0)
  {
    if ((v6 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v6 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v6 & 0x200000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v6 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v6 & 0x4000000000000000) == 0 || *(float *)(a1 + 260) != *(float *)(a2 + 260)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v6 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  __int16 v7 = *(_WORD *)(a2 + 324);
  if ((*(_WORD *)(a1 + 324) & 0x80) != 0)
  {
    if ((v7 & 0x80) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296)) {
      return 0;
    }
  }
  else if ((v7 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v6 & 0x8000000000000000) == 0 || *(float *)(a1 + 264) != *(float *)(a2 + 264)) {
      return 0;
    }
  }
  else if (v6 < 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v6 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v6 & 0x800000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 324) & 0x100) == 0 || *(float *)(a1 + 300) != *(float *)(a2 + 300)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 324) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v6 & 0x100000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v6 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v6 & 0x200000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v6 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v6 & 0x8000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v6 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v6 & 0x4000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v6 & 0x80000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v6 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v6 & 0x40000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v6 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v6 & 0x20000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v6 & 0x10000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v6 & 0x10000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v6 & 0x800000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v6 & 0x400000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v6 & 0x8000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v6 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v6 & 0x4000000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v6 & 0x2000000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v6 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v6 & 0x1000000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 324) & 4) == 0)
  {
    if ((v7 & 4) == 0) {
      goto LABEL_411;
    }
    return 0;
  }
  if ((v7 & 4) == 0 || *(float *)(a1 + 276) != *(float *)(a2 + 276)) {
    return 0;
  }
LABEL_411:
  BOOL v8 = (v7 & 1) == 0;
  if (*(_WORD *)(a1 + 324)) {
    return (v7 & 1) != 0 && *(float *)(a1 + 268) == *(float *)(a2 + 268);
  }
  return v8;
}

BOOL CMMsl::KappaMildImpactResult::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 0x10) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 4) == 0;
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
    return (*(unsigned char *)(a2 + 28) & 4) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaLackOfMotionResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 92);
  int v3 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 90) != *(unsigned __int8 *)(a2 + 90)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10000) == 0;
  if ((v2 & 0x10000) != 0) {
    return (v3 & 0x10000) != 0 && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88);
  }
  return v4;
}

BOOL CMMsl::KappaSevereCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 356);
  uint64_t v3 = *(void *)(a1 + 364);
  BOOL v4 = (uint64_t *)(a2 + 356);
  uint64_t v6 = *(void *)(a2 + 356);
  uint64_t v5 = *(void *)(a2 + 364);
  if ((v2 & 0x800000) != 0)
  {
    if ((v6 & 0x800000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v6 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v6 & 0x400000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v6 & 0x1000000) == 0 || *(_DWORD *)(a1 + 136) != *(_DWORD *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v6 & 0x10000000000000) == 0 || *(_DWORD *)(a1 + 248) != *(_DWORD *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v5 & 1) == 0 || *(float *)(a1 + 296) != *(float *)(a2 + 296)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v6 & 0x400000000000000) == 0 || *(float *)(a1 + 272) != *(float *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v6 & 0x400000000000) == 0 || *(float *)(a1 + 224) != *(float *)(a2 + 224)) {
      return 0;
    }
  }
  else if ((v6 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v6 & 0x200000000000) == 0 || *(float *)(a1 + 220) != *(float *)(a2 + 220)) {
      return 0;
    }
  }
  else if ((v6 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v6 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v6 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v6 & 0x80000000000000) == 0 || *(_DWORD *)(a1 + 260) != *(_DWORD *)(a2 + 260)) {
      return 0;
    }
  }
  else if ((v6 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v6 & 0x2000000) == 0 || *(_DWORD *)(a1 + 140) != *(_DWORD *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v6 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(float *)(a1 + 308) != *(float *)(a2 + 308)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(float *)(a1 + 312) != *(float *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v6 & 0x80000000000) == 0 || *(_DWORD *)(a1 + 212) != *(_DWORD *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v6 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v6 & 0x20000000000) == 0 || *(_DWORD *)(a1 + 204) != *(_DWORD *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v6 & 0x4000000000000) == 0 || *(float *)(a1 + 240) != *(float *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v6 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v6 & 0x1000000000000000) == 0 || *(_DWORD *)(a1 + 280) != *(_DWORD *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 300) != *(_DWORD *)(a2 + 300)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v6 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v6 & 0x80) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v6 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 317) != *(unsigned __int8 *)(a2 + 317)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 318) != *(unsigned __int8 *)(a2 + 318)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v5 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 326) != *(unsigned __int8 *)(a2 + 326)) {
      return 0;
    }
  }
  else if ((v5 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v5 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 327) != *(unsigned __int8 *)(a2 + 327)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v5 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 338) != *(unsigned __int8 *)(a2 + 338)) {
      return 0;
    }
  }
  else if ((v5 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v5 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 336) != *(unsigned __int8 *)(a2 + 336)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v5 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 323) != *(unsigned __int8 *)(a2 + 323)) {
      return 0;
    }
  }
  else if ((v5 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v5 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 339) != *(unsigned __int8 *)(a2 + 339)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v5 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 340) != *(unsigned __int8 *)(a2 + 340)) {
      return 0;
    }
  }
  else if ((v5 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 320) != *(unsigned __int8 *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v5 & 0x1000000) == 0 || *(unsigned __int8 *)(a1 + 335) != *(unsigned __int8 *)(a2 + 335)) {
      return 0;
    }
  }
  else if ((v5 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v5 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 324) != *(unsigned __int8 *)(a2 + 324)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v5 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 337) != *(unsigned __int8 *)(a2 + 337)) {
      return 0;
    }
  }
  else if ((v5 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000) != 0)
  {
    if ((v5 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 330) != *(unsigned __int8 *)(a2 + 330)) {
      return 0;
    }
  }
  else if ((v5 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000000) != 0)
  {
    if ((v5 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 348) != *(unsigned __int8 *)(a2 + 348)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000000) != 0)
  {
    if ((v5 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 344) != *(unsigned __int8 *)(a2 + 344)) {
      return 0;
    }
  }
  else if ((v5 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000000) != 0)
  {
    if ((v5 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 349) != *(unsigned __int8 *)(a2 + 349)) {
      return 0;
    }
  }
  else if ((v5 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000000) != 0)
  {
    if ((v5 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 345) != *(unsigned __int8 *)(a2 + 345)) {
      return 0;
    }
  }
  else if ((v5 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v5 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 341) != *(unsigned __int8 *)(a2 + 341)) {
      return 0;
    }
  }
  else if ((v5 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v5 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 322) != *(unsigned __int8 *)(a2 + 322)) {
      return 0;
    }
  }
  else if ((v5 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v5 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 331) != *(unsigned __int8 *)(a2 + 331)) {
      return 0;
    }
  }
  else if ((v5 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000000) != 0)
  {
    if ((v5 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 350) != *(unsigned __int8 *)(a2 + 350)) {
      return 0;
    }
  }
  else if ((v5 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000000) != 0)
  {
    if ((v5 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 346) != *(unsigned __int8 *)(a2 + 346)) {
      return 0;
    }
  }
  else if ((v5 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v6 & 0x20000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v6 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v5 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 333) != *(unsigned __int8 *)(a2 + 333)) {
      return 0;
    }
  }
  else if ((v5 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v5 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 334) != *(unsigned __int8 *)(a2 + 334)) {
      return 0;
    }
  }
  else if ((v5 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 316) != *(unsigned __int8 *)(a2 + 316)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v6 & 0x40000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v6 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000000) != 0)
  {
    if ((v5 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 353) != *(unsigned __int8 *)(a2 + 353)) {
      return 0;
    }
  }
  else if ((v5 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000000) != 0)
  {
    if ((v5 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 351) != *(unsigned __int8 *)(a2 + 351)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000000000) != 0)
  {
    return 0;
  }
  uint64_t v7 = *v4;
  uint64_t v8 = *(void *)(a2 + 364);
  if ((v3 & 0x20000000000) != 0)
  {
    if ((v8 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 352) != *(unsigned __int8 *)(a2 + 352)) {
      return 0;
    }
  }
  else if ((v8 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000000) != 0)
  {
    if ((v8 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 343) != *(unsigned __int8 *)(a2 + 343)) {
      return 0;
    }
  }
  else if ((v8 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80000000) != 0)
  {
    if ((v8 & 0x80000000) == 0 || *(unsigned __int8 *)(a1 + 342) != *(unsigned __int8 *)(a2 + 342)) {
      return 0;
    }
  }
  else if ((v8 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000000) != 0)
  {
    if ((v7 & 0x20000000000000) == 0 || *(_DWORD *)(a1 + 252) != *(_DWORD *)(a2 + 252)) {
      return 0;
    }
  }
  else if ((v7 & 0x20000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v7 & 0x40000000000000) == 0 || *(_DWORD *)(a1 + 256) != *(_DWORD *)(a2 + 256)) {
      return 0;
    }
  }
  else if ((v7 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v7 & 0x4000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v7 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v7 & 0x8000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v7 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v8 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 328) != *(unsigned __int8 *)(a2 + 328)) {
      return 0;
    }
  }
  else if ((v8 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v8 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 325) != *(unsigned __int8 *)(a2 + 325)) {
      return 0;
    }
  }
  else if ((v8 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v7 & 0x2000000000) == 0 || *(_DWORD *)(a1 + 188) != *(_DWORD *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v7 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v7 & 0x80000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v7 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v7 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v7 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v7 & 0x4000000000000000) == 0 || *(float *)(a1 + 288) != *(float *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v7 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v7 & 0x8000000000000000) == 0 || *(float *)(a1 + 292) != *(float *)(a2 + 292)) {
      return 0;
    }
  }
  else if (v7 < 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v7 & 0x200000000000000) == 0 || *(float *)(a1 + 268) != *(float *)(a2 + 268)) {
      return 0;
    }
  }
  else if ((v7 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v7 & 0x800000000000000) == 0 || *(_DWORD *)(a1 + 276) != *(_DWORD *)(a2 + 276)) {
      return 0;
    }
  }
  else if ((v7 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v7 & 0x2000000000000000) == 0 || *(_DWORD *)(a1 + 284) != *(_DWORD *)(a2 + 284)) {
      return 0;
    }
  }
  else if ((v7 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v8 & 0x400) == 0 || *(unsigned __int8 *)(a1 + 321) != *(unsigned __int8 *)(a2 + 321)) {
      return 0;
    }
  }
  else if ((v8 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v7 & 0x4000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v7 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v7 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v7 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v7 & 0x100000000000) == 0 || *(_DWORD *)(a1 + 216) != *(_DWORD *)(a2 + 216)) {
      return 0;
    }
  }
  else if ((v7 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v7 & 0x100000000000000) == 0 || *(_DWORD *)(a1 + 264) != *(_DWORD *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v7 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v7 & 0x800000000000) == 0 || *(_DWORD *)(a1 + 228) != *(_DWORD *)(a2 + 228)) {
      return 0;
    }
  }
  else if ((v7 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v7 & 0x1000000000000) == 0 || *(_DWORD *)(a1 + 232) != *(_DWORD *)(a2 + 232)) {
      return 0;
    }
  }
  else if ((v7 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v7 & 0x100000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v7 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v7 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v7 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v7 & 0x200000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v7 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v7 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v7 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v7 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v7 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v8 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 332) != *(unsigned __int8 *)(a2 + 332)) {
      return 0;
    }
  }
  else if ((v8 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v8 & 4) == 0 || *(_DWORD *)(a1 + 304) != *(_DWORD *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((v8 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v7 & 0x10000000) == 0 || *(_DWORD *)(a1 + 152) != *(_DWORD *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v7 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v7 & 0x40000000) == 0 || *(_DWORD *)(a1 + 160) != *(_DWORD *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v7 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000000) != 0)
  {
    if ((v8 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 347) != *(unsigned __int8 *)(a2 + 347)) {
      return 0;
    }
  }
  else if ((v8 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v7 & 0x80000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v7 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v7 & 0x20000000) == 0 || *(_DWORD *)(a1 + 156) != *(_DWORD *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v7 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v7 & 0x8000000000000) == 0 || *(float *)(a1 + 244) != *(float *)(a2 + 244)) {
      return 0;
    }
  }
  else if ((v7 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v7 & 0x4000000000) == 0 || *(_DWORD *)(a1 + 192) != *(_DWORD *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v7 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v7 & 0x8000000000) == 0 || *(_DWORD *)(a1 + 196) != *(_DWORD *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v7 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v7 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v7 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v7 & 0x40000000000) == 0 || *(_DWORD *)(a1 + 208) != *(_DWORD *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v7 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v7 & 0x10000000000) == 0 || *(_DWORD *)(a1 + 200) != *(_DWORD *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v7 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v7 & 0x800000000) == 0 || *(_DWORD *)(a1 + 180) != *(_DWORD *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v7 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v7 & 0x100000000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v7 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v7 & 0x400000000) == 0 || *(_DWORD *)(a1 + 176) != *(_DWORD *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v7 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v8 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 319) != *(unsigned __int8 *)(a2 + 319)) {
      return 0;
    }
  }
  else if ((v8 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v8 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 329) != *(unsigned __int8 *)(a2 + 329)) {
      return 0;
    }
  }
  else if ((v8 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v7 & 0x200000000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v7 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  uint64_t v9 = *v4;
  if ((v2 & 4) != 0)
  {
    if ((v9 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v9 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v9 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v9 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v9 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v9 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) == 0)
  {
    if ((v9 & 0x2000000000000) == 0) {
      goto LABEL_531;
    }
    return 0;
  }
  if ((v9 & 0x2000000000000) == 0 || *(_DWORD *)(a1 + 236) != *(_DWORD *)(a2 + 236)) {
    return 0;
  }
LABEL_531:
  BOOL v10 = (*v4 & 0x2000) == 0;
  if ((v2 & 0x2000) != 0) {
    return (v9 & 0x2000) != 0 && *(float *)(a1 + 92) == *(float *)(a2 + 92);
  }
  return v10;
}

BOOL CMMsl::KappaLocalAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 172);
  uint64_t v3 = *(void *)(a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 172) & 0x400) == 0;
  if ((v2 & 0x400) != 0) {
    return (v3 & 0x400) != 0 && *(float *)(a1 + 64) == *(float *)(a2 + 64);
  }
  return v4;
}

BOOL CMMsl::KappaRemoteAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 204);
  uint64_t v3 = *(void *)(a2 + 204);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  __int16 v4 = *(_WORD *)(a2 + 212);
  if ((*(_WORD *)(a1 + 212) & 2) != 0)
  {
    if ((v4 & 2) == 0 || *(unsigned __int8 *)(a1 + 188) != *(unsigned __int8 *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(unsigned __int8 *)(a1 + 189) != *(unsigned __int8 *)(a2 + 189)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000000) != 0)
  {
    if ((v3 & 0x400000000000000) == 0 || *(unsigned __int8 *)(a1 + 181) != *(unsigned __int8 *)(a2 + 181)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 157) != *(unsigned __int8 *)(a2 + 157)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 197) != *(unsigned __int8 *)(a2 + 197)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(unsigned __int8 *)(a1 + 165) != *(unsigned __int8 *)(a2 + 165)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000) != 0)
  {
    if ((v3 & 0x4000000000000) == 0 || *(unsigned __int8 *)(a1 + 173) != *(unsigned __int8 *)(a2 + 173)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(unsigned __int8 *)(a1 + 190) != *(unsigned __int8 *)(a2 + 190)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000000000) != 0)
  {
    if ((v3 & 0x4000000000000000) == 0 || *(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a2 + 185)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(unsigned __int8 *)(a1 + 169) != *(unsigned __int8 *)(a2 + 169)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000000) != 0)
  {
    if ((v3 & 0x40000000000000) == 0 || *(unsigned __int8 *)(a1 + 177) != *(unsigned __int8 *)(a2 + 177)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 193) != *(unsigned __int8 *)(a2 + 193)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
    if ((v3 & 0x800000000000000) == 0 || *(unsigned __int8 *)(a1 + 182) != *(unsigned __int8 *)(a2 + 182)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 158) != *(unsigned __int8 *)(a2 + 158)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 198) != *(unsigned __int8 *)(a2 + 198)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(unsigned __int8 *)(a1 + 166) != *(unsigned __int8 *)(a2 + 166)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) == 0 || *(unsigned __int8 *)(a1 + 174) != *(unsigned __int8 *)(a2 + 174)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 191) != *(unsigned __int8 *)(a2 + 191)) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if (v2 < 0)
  {
    if ((v3 & 0x8000000000000000) == 0 || *(unsigned __int8 *)(a1 + 186) != *(unsigned __int8 *)(a2 + 186)) {
      return 0;
    }
  }
  else if (v3 < 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 162) != *(unsigned __int8 *)(a2 + 162)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x8000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 202) != *(unsigned __int8 *)(a2 + 202)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(unsigned __int8 *)(a1 + 170) != *(unsigned __int8 *)(a2 + 170)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000000) != 0)
  {
    if ((v3 & 0x80000000000000) == 0 || *(unsigned __int8 *)(a1 + 178) != *(unsigned __int8 *)(a2 + 178)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 194) != *(unsigned __int8 *)(a2 + 194)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000000) != 0)
  {
    if ((v3 & 0x1000000000000000) == 0 || *(unsigned __int8 *)(a1 + 183) != *(unsigned __int8 *)(a2 + 183)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000000) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 204);
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v5 & 0x1000000000) == 0 || *(unsigned __int8 *)(a1 + 159) != *(unsigned __int8 *)(a2 + 159)) {
      return 0;
    }
  }
  else if ((v5 & 0x1000000000) != 0)
  {
    return 0;
  }
  int v6 = *(unsigned __int16 *)(a2 + 212) | (*(unsigned __int8 *)(a2 + 214) << 16);
  if ((*(_WORD *)(a1 + 212) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 199) != *(unsigned __int8 *)(a2 + 199)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v5 & 0x100000000000) == 0 || *(unsigned __int8 *)(a1 + 167) != *(unsigned __int8 *)(a2 + 167)) {
      return 0;
    }
  }
  else if ((v5 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000000) != 0)
  {
    if ((v5 & 0x10000000000000) == 0 || *(unsigned __int8 *)(a1 + 175) != *(unsigned __int8 *)(a2 + 175)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x20) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 192) != *(unsigned __int8 *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v5 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v5 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v5 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v5 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v5 & 0x100000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v5 & 0x100000000) != 0)
  {
    return 0;
  }
  if (*(_WORD *)(a1 + 212))
  {
    if ((*(_WORD *)(a2 + 212) & 1) == 0 || *(unsigned __int8 *)(a1 + 187) != *(unsigned __int8 *)(a2 + 187)) {
      return 0;
    }
  }
  else if (*(_WORD *)(a2 + 212))
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v5 & 0x10000000000) == 0 || *(unsigned __int8 *)(a1 + 163) != *(unsigned __int8 *)(a2 + 163)) {
      return 0;
    }
  }
  else if ((v5 & 0x10000000000) != 0)
  {
    return 0;
  }
  if (((*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16)) & 0x10000) != 0)
  {
    if ((v6 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 203) != *(unsigned __int8 *)(a2 + 203)) {
      return 0;
    }
  }
  else if ((v6 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v5 & 0x1000000000000) == 0 || *(unsigned __int8 *)(a1 + 171) != *(unsigned __int8 *)(a2 + 171)) {
      return 0;
    }
  }
  else if ((v5 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000000) != 0)
  {
    if ((v5 & 0x100000000000000) == 0 || *(unsigned __int8 *)(a1 + 179) != *(unsigned __int8 *)(a2 + 179)) {
      return 0;
    }
  }
  else if ((v5 & 0x100000000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 195) != *(unsigned __int8 *)(a2 + 195)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v5 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v5 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000000) != 0)
  {
    if ((v5 & 0x200000000000000) == 0 || *(unsigned __int8 *)(a1 + 180) != *(unsigned __int8 *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v5 & 0x200000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v5 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 156) != *(unsigned __int8 *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v5 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 196) != *(unsigned __int8 *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v5 & 0x20000000000) == 0 || *(unsigned __int8 *)(a1 + 164) != *(unsigned __int8 *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v5 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000) != 0)
  {
    if ((v5 & 0x2000000000000) == 0 || *(unsigned __int8 *)(a1 + 172) != *(unsigned __int8 *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v5 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v5 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v5 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v5 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) == 0 || *(unsigned __int8 *)(a1 + 184) != *(unsigned __int8 *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v5 & 0x2000000000) == 0 || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v5 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 212) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 212) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 212) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) == 0)
  {
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_401;
    }
    return 0;
  }
  if ((v5 & 0x200000000000) == 0 || *(unsigned __int8 *)(a1 + 168) != *(unsigned __int8 *)(a2 + 168)) {
    return 0;
  }
LABEL_401:
  BOOL v7 = (v5 & 0x20000000000000) == 0;
  if ((v2 & 0x20000000000000) != 0) {
    return (v5 & 0x20000000000000) != 0 && *(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176);
  }
  return v7;
}

BOOL CMMsl::ViewObstructedMachineLearningDecision::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::ViewObstructedMachineLearningFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 116);
  int v3 = *(_DWORD *)(a2 + 116);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 116) & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::ViewObstructedMachineLearningProbabilities::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x1000) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(float *)(a1 + 40) == *(float *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::RunningArmSwingSignals::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 64) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 64) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 0x40) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 64) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 64) & 8) == 0;
  if ((*(unsigned char *)(a1 + 64) & 8) != 0) {
    return (*(unsigned char *)(a2 + 64) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return v2;
}

BOOL CMMsl::RunningCentripetalAccelSignals::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 120);
  __int16 v3 = *(_WORD *)(a2 + 120);
  if ((v2 & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 120) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 120) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 120) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::RunningRotationAxis::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if ((*(unsigned char *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 48) & 4) == 0;
  if ((*(unsigned char *)(a1 + 48) & 4) != 0) {
    return (*(unsigned char *)(a2 + 48) & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::RunningVerticalOscillationSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 208);
  int v3 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 208) & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::RunningVerticalOscillation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 2) == 0;
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
    return (*(unsigned char *)(a2 + 40) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KappaSpinResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 204);
  __int16 v3 = *(_WORD *)(a2 + 204);
  if ((v2 & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x1000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x800) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x4000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 201) != *(unsigned __int8 *)(a2 + 201)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x4000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x400) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 152) != *(void *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x100) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 128) != *(void *)(a2 + 128)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 136) != *(void *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 204) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 204) & 0x200) == 0 || *(_DWORD *)(a1 + 184) != *(_DWORD *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 204) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL result = sub_10006EDA4(a1 + 80, a2 + 80);
  if (result)
  {
    BOOL result = sub_10006EDA4(a1 + 104, a2 + 104);
    if (result)
    {
      int v6 = *(float **)(a1 + 8);
      uint64_t v5 = *(float **)(a1 + 16);
      BOOL v7 = *(float **)(a2 + 8);
      if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
        return 0;
      }
      while (v6 != v5)
      {
        if (*v6 != *v7) {
          return 0;
        }
        ++v6;
        ++v7;
      }
      uint64_t v9 = *(float **)(a1 + 56);
      uint64_t v8 = *(float **)(a1 + 64);
      BOOL v10 = *(float **)(a2 + 56);
      if ((char *)v8 - (char *)v9 != *(void *)(a2 + 64) - (void)v10) {
        return 0;
      }
      while (v9 != v8)
      {
        if (*v9 != *v10) {
          return 0;
        }
        ++v9;
        ++v10;
      }
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      BOOL v13 = *(float **)(a2 + 32);
      if (v11 - v12 != *(void *)(a2 + 40) - (void)v13) {
        return 0;
      }
      if (v12 == v11)
      {
        return 1;
      }
      else
      {
        uint64_t v14 = v12 + 4;
        do
        {
          float v15 = *v13++;
          BOOL result = *(float *)(v14 - 4) == v15;
          BOOL v16 = *(float *)(v14 - 4) != v15 || v14 == v11;
          v14 += 4;
        }
        while (!v16);
      }
    }
  }
  return result;
}

BOOL CMMsl::KappaPulseDeltaV::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  int v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 108) != *(unsigned __int8 *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 112) & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::RunningStrideLength::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 136);
  int v3 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 132) != *(unsigned __int8 *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 136) & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::KappaHighSpeedCrashResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 68);
  int v3 = *(_DWORD *)(a2 + 68);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 65) != *(unsigned __int8 *)(a2 + 65)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 63) != *(unsigned __int8 *)(a2 + 63)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 59) != *(unsigned __int8 *)(a2 + 59)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 62) != *(unsigned __int8 *)(a2 + 62)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 68) & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  }
  return v4;
}

BOOL CMMsl::KappaPulseInertialHgAccel::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 104);
  __int16 v3 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x800) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 104) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 104) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 104) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 104) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 104) & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 104) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::PedometerPathStraightness::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 56) & 1) == 0;
  if (*(unsigned char *)(a1 + 56)) {
    return (*(unsigned char *)(a2 + 56) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::VO2MaxModelInput::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 8) == 0;
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
    return (*(unsigned char *)(a2 + 40) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return v2;
}

BOOL CMMsl::ProxCalibration::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a2 + 72) & 1) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 4) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 8) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  __int16 v3 = *(float **)(a1 + 8);
  BOOL v2 = *(float **)(a1 + 16);
  BOOL v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  BOOL v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

BOOL CMMsl::KappaStepsResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::WakeGestureSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 84);
  int v3 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 81) != *(unsigned __int8 *)(a2 + 81)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 79) != *(unsigned __int8 *)(a2 + 79)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 78) != *(unsigned __int8 *)(a2 + 78)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 82) != *(unsigned __int8 *)(a2 + 82)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 84) & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  return v4;
}

BOOL CMMsl::KappaGravityAutocorrelationResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 61) != *(unsigned __int8 *)(a2 + 61)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 60) != *(unsigned __int8 *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x400) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x200) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 64) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 64) & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 64) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  }
  return v4;
}

BOOL CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 212);
  int v3 = *(_DWORD *)(a2 + 212);
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(double *)(a1 + 96) != *(double *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(double *)(a1 + 200) != *(double *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(double *)(a1 + 176) != *(double *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(double *)(a1 + 168) != *(double *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(double *)(a1 + 192) != *(double *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(double *)(a1 + 184) != *(double *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000000) == 0;
  if ((v2 & 0x2000000) != 0) {
    return (v3 & 0x2000000) != 0 && *(unsigned __int8 *)(a1 + 208) == *(unsigned __int8 *)(a2 + 208);
  }
  return v4;
}

BOOL CMMsl::SubStats::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 56);
  __int16 v3 = *(_WORD *)(a2 + 56);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 56) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 0x100) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 56) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

BOOL CMMsl::PedOdomFusionExtendedModeSegment::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 52) != *(unsigned __int8 *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x40) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 56) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 56) & 0x20) != 0 && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
  }
  return v2;
}

BOOL CMMsl::MagicMountState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRPedestrianClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  __int16 v3 = *(float **)(a1 + 8);
  BOOL v2 = *(float **)(a1 + 16);
  BOOL v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 52) & 2) == 0;
  if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
    return (*(unsigned char *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v5;
}

BOOL CMMsl::PDRPlacementClassifierState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  __int16 v3 = *(float **)(a1 + 8);
  BOOL v2 = *(float **)(a1 + 16);
  BOOL v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 52) & 2) == 0;
  if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
    return (*(unsigned char *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v5;
}

BOOL CMMsl::PDRSpeedEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(a2 + 48);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::KMVelocityEstimatorState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 52);
  __int16 v3 = *(_WORD *)(a2 + 52);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(unsigned __int8 *)(a1 + 50) != *(unsigned __int8 *)(a2 + 50)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::VelocityEstimatorFusionState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::PDRFenceReference::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRFenceState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::UWBRange::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 56) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 56) & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return v2;
}

BOOL CMMsl::KappaTriggerClustersResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 96);
  int v3 = *(unsigned __int16 *)(a2 + 96);
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x8000) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::SimActivityEvent::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
LABEL_6:
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a2 + 8);
    BOOL result = v3 == 0;
    if (!v2) {
      return result;
    }
    if (!v3) {
      return 0;
    }
    if (*(unsigned char *)(v2 + 12))
    {
      if ((*(unsigned char *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v3 + 12))
    {
      return 0;
    }
    return 1;
  }
  if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
    goto LABEL_6;
  }
  return 0;
}

BOOL CMMsl::PDRFeatures::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 108);
  int v3 = *(_DWORD *)(a2 + 108);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 108) & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::PDRDOTEstimatorStateBody::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateArmSwing::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateHeading::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRSpeedEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PrecisionFindingDOTEstimate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if (*(unsigned char *)(a1 + 24)) {
    return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::PrecisionFindingState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 92);
  __int16 v3 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x400) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x200) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 92) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 92) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 92) & 0x1000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x20) == 0;
  if ((v2 & 0x20) != 0) {
    return (v3 & 0x20) != 0 && *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return v4;
}

BOOL CMMsl::KappaRoadsResult::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 2) == 0;
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
    return (*(unsigned char *)(a2 + 40) & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PrecisionFindingVelocityEstimate::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v4;
}

BOOL CMMsl::PrecisionFindingRangeFilter::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 0x40) == 0;
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0) {
    return (*(unsigned char *)(a2 + 40) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 37) == *(unsigned __int8 *)(a2 + 37);
  }
  return v2;
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  int v3 = *(float **)(a1 + 8);
  BOOL v2 = *(float **)(a1 + 16);
  BOOL v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  BOOL v5 = (*(unsigned char *)(a2 + 52) & 2) == 0;
  if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
    return (*(unsigned char *)(a2 + 52) & 2) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return v5;
}

BOOL CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 40) & 8) == 0;
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
    return (*(unsigned char *)(a2 + 40) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::PeerState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    if ((*(unsigned char *)(a2 + 112) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 112))
  {
    return 0;
  }
  int v3 = *(float **)(a1 + 32);
  BOOL v2 = *(float **)(a1 + 40);
  BOOL v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 8);
  BOOL v5 = *(float **)(a1 + 16);
  BOOL v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 80);
  uint64_t v8 = *(float **)(a1 + 88);
  BOOL v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 88) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  BOOL v13 = *(float **)(a2 + 56);
  if (v11 - v12 != *(void *)(a2 + 64) - (void)v13) {
    return 0;
  }
  if (v12 == v11) {
    return 1;
  }
  uint64_t v14 = v12 + 4;
  do
  {
    float v15 = *v13++;
    BOOL result = *(float *)(v14 - 4) == v15;
    BOOL v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

BOOL CMMsl::KappaActivityPhone::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 140))
  {
    if ((*(unsigned char *)(a2 + 140) & 1) == 0 || *(void *)(a1 + 104) != *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 140))
  {
    return 0;
  }
  BOOL v5 = *(float **)(a1 + 8);
  BOOL v4 = *(float **)(a1 + 16);
  uint64_t v6 = *(float **)(a2 + 8);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 16) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  if ((*(unsigned char *)(a1 + 140) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 140) & 4) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 140) & 4) != 0)
  {
    return 0;
  }
  uint64_t v8 = *(float **)(a1 + 80);
  BOOL v7 = *(float **)(a1 + 88);
  float v9 = *(float **)(a2 + 80);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 88) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((*(unsigned char *)(a1 + 140) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 140) & 2) == 0 || *(void *)(a1 + 112) != *(void *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 140) & 2) != 0)
  {
    return 0;
  }
  BOOL result = sub_10006EDA4(a1 + 32, a2 + 32);
  if (result)
  {
    BOOL result = sub_10006EDA4(a1 + 56, a2 + 56);
    if (result)
    {
      if ((*(unsigned char *)(a1 + 140) & 0x20) != 0)
      {
        if ((*(unsigned char *)(a2 + 140) & 0x20) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
          return 0;
        }
      }
      else if ((*(unsigned char *)(a2 + 140) & 0x20) != 0)
      {
        return 0;
      }
      if ((*(unsigned char *)(a1 + 140) & 8) != 0)
      {
        if ((*(unsigned char *)(a2 + 140) & 8) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
          return 0;
        }
      }
      else if ((*(unsigned char *)(a2 + 140) & 8) != 0)
      {
        return 0;
      }
      if ((*(unsigned char *)(a1 + 140) & 0x10) != 0)
      {
        if ((*(unsigned char *)(a2 + 140) & 0x10) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
          return 0;
        }
      }
      else if ((*(unsigned char *)(a2 + 140) & 0x10) != 0)
      {
        return 0;
      }
      BOOL result = (*(unsigned char *)(a2 + 140) & 0x40) == 0;
      if ((*(unsigned char *)(a1 + 140) & 0x40) == 0) {
        return result;
      }
      return (*(unsigned char *)(a2 + 140) & 0x40) != 0 && *(float *)(a1 + 136) == *(float *)(a2 + 136);
    }
  }
  return result;
}

BOOL CMMsl::KappaActivityWatch::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 104);
  __int16 v5 = *(_WORD *)(a2 + 104);
  if (v4)
  {
    if ((v5 & 1) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(const void **)(a1 + 32);
  size_t v7 = *(void *)(a1 + 40) - (void)v6;
  uint64_t v8 = *(const void **)(a2 + 32);
  if (v7 != *(void *)(a2 + 40) - (void)v8 || memcmp(v6, v8, v7)) {
    return 0;
  }
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  BOOL result = sub_10006EDA4(a1 + 8, a2 + 8);
  if (!result) {
    return result;
  }
  __int16 v10 = *(_WORD *)(a1 + 104);
  __int16 v11 = *(_WORD *)(a2 + 104);
  if ((v10 & 0x10) != 0)
  {
    if ((v11 & 0x10) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
    goto LABEL_46;
  }
  if ((v11 & 0x10) != 0) {
    return 0;
  }
LABEL_46:
  BOOL result = (v11 & 8) == 0;
  if ((v10 & 8) != 0) {
    return (v11 & 8) != 0 && *(float *)(a1 + 80) == *(float *)(a2 + 80);
  }
  return result;
}

BOOL CMMsl::PrecisionFindingSessionStartStop::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateDebug::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a2 + 72) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  int v3 = *(float **)(a1 + 8);
  BOOL v2 = *(float **)(a1 + 16);
  __int16 v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 32);
  __int16 v5 = *(float **)(a1 + 40);
  size_t v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  if ((*(unsigned char *)(a1 + 72) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 2) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 72) & 8) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 72) & 8) != 0)
  {
    return 0;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 72) & 4) == 0;
  if ((*(unsigned char *)(a1 + 72) & 4) != 0) {
    return (*(unsigned char *)(a2 + 72) & 4) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  }
  return v8;
}

BOOL CMMsl::KappaPeakDetectorMapResult::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 152);
  int v3 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 80) != *(void *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 128) != *(_DWORD *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 148) != *(unsigned __int8 *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 104) != *(void *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 132) != *(_DWORD *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  BOOL result = sub_10006EDA4(a1 + 8, a2 + 8);
  if (!result) {
    return result;
  }
  uint64_t v6 = *(float **)(a1 + 32);
  __int16 v5 = *(float **)(a1 + 40);
  size_t v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  int v8 = *(_DWORD *)(a1 + 152);
  int v9 = *(_DWORD *)(a2 + 152);
  if (v8)
  {
    if ((v9 & 1) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  if ((v8 & 2) != 0)
  {
    if ((v9 & 2) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v9 & 2) != 0)
  {
    return 0;
  }
  BOOL result = (v9 & 0x20000) == 0;
  if ((v8 & 0x20000) == 0) {
    return result;
  }
  return (v9 & 0x20000) != 0 && *(unsigned __int8 *)(a1 + 149) == *(unsigned __int8 *)(a2 + 149);
}

BOOL CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 4) == 0;
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
    return (*(unsigned char *)(a2 + 44) & 4) != 0 && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  }
  return v2;
}

BOOL CMMsl::PrecisionFindingVerticalState::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 58) != *(unsigned __int8 *)(a2 + 58)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57);
  }
  return v4;
}

BOOL CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  int v3 = *(unsigned __int8 *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0) {
    return *(_DWORD *)(a1 + 60) == *(_DWORD *)(a2 + 60);
  }
  else {
    return ((v2 | v3) & 0x80u) == 0;
  }
}

BOOL CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if (*(unsigned char *)(a1 + 32)) {
    return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

BOOL CMMsl::SafetyHertzSample::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 2) == 0;
  if ((*(unsigned char *)(a1 + 24) & 2) != 0) {
    return (*(unsigned char *)(a2 + 24) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::SafetyCompanionStatus::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::PTSConsumedGNSS::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::LocationOscarEmu::operator==(v4, v5)) {
      return 0;
    }
LABEL_6:
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    BOOL result = v7 == 0;
    if (!v6) {
      return result;
    }
    if (!v7) {
      return 0;
    }
    if (*(unsigned char *)(v6 + 12))
    {
      if ((*(unsigned char *)(v7 + 12) & 1) == 0 || *(_DWORD *)(v6 + 8) != *(_DWORD *)(v7 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v7 + 12))
    {
      return 0;
    }
    return 1;
  }
  if (!v5) {
    goto LABEL_6;
  }
  return 0;
}

BOOL CMMsl::PTSForwardPropagation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 64) & 0x20) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
LABEL_6:
    if ((*(unsigned char *)(a1 + 64) & 8) != 0)
    {
      if ((*(unsigned char *)(a2 + 64) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 64) & 8) != 0)
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 64) & 0x10) != 0)
    {
      if ((*(unsigned char *)(a2 + 64) & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 64) & 0x10) != 0)
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 64) & 4) != 0)
    {
      if ((*(unsigned char *)(a2 + 64) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 64) & 4) != 0)
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 64))
    {
      if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 64))
    {
      return 0;
    }
    if ((*(unsigned char *)(a1 + 64) & 2) != 0)
    {
      if ((*(unsigned char *)(a2 + 64) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 64) & 2) != 0)
    {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(void *)(a2 + 48);
    BOOL result = v3 == 0;
    if (!v2) {
      return result;
    }
    if (!v3) {
      return 0;
    }
    if (*(unsigned char *)(v2 + 12))
    {
      if ((*(unsigned char *)(v3 + 12) & 1) == 0 || *(_DWORD *)(v2 + 8) != *(_DWORD *)(v3 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v3 + 12))
    {
      return 0;
    }
    return 1;
  }
  if ((*(unsigned char *)(a2 + 64) & 0x20) == 0) {
    goto LABEL_6;
  }
  return 0;
}

BOOL CMMsl::PTSReconstructedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::PTSMapMatchedRoute::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::PTSForwardPropagation::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::KData1::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::KData2::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 100);
  int v3 = *(_DWORD *)(a2 + 100);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80000) == 0;
  if ((v2 & 0x80000) != 0) {
    return (v3 & 0x80000) != 0 && *(unsigned __int8 *)(a1 + 96) == *(unsigned __int8 *)(a2 + 96);
  }
  return v4;
}

BOOL CMMsl::KData3::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 2) == 0;
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
    return (*(unsigned char *)(a2 + 28) & 2) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::SafetyRemoteSample::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 52) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x40) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x40) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 8) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 52))
  {
    if ((*(unsigned char *)(a2 + 52) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 52))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 52) & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 52) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 52) & 2) == 0;
  if ((*(unsigned char *)(a1 + 52) & 2) != 0) {
    return (*(unsigned char *)(a2 + 52) & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v2;
}

BOOL CMMsl::SafetyTrustedAudioResult::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 212);
  uint64_t v3 = *(void *)(a2 + 212);
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(void *)(a1 + 96) != *(void *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 148) != *(float *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 144) != *(float *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(void *)(a1 + 64) != *(void *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(void *)(a1 + 80) != *(void *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(void *)(a1 + 72) != *(void *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 164) != *(float *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(unsigned __int8 *)(a1 + 208) != *(unsigned __int8 *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(unsigned __int8 *)(a1 + 209) != *(unsigned __int8 *)(a2 + 209)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 212) & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  return v4;
}

BOOL CMMsl::SPUPlaybackExampleDeviceMotion::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::DeviceMotion::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::SPUPlaybackExampleMotionStateUpdate::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::MotionStateUpdate::operator==(v2, v3);
  }
  return result;
}

unint64_t CMMsl::Item::hash_value(CMMsl::Item *this)
{
  if (*((unsigned char *)this + 3616))
  {
    double v2 = *((double *)this + 77);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    double v1134 = v2;
  }
  else
  {
    double v1134 = 0.0;
  }
  unint64_t v3 = sub_10015BF08((uint64_t)&v1166, (uint64_t *)this + 146);
  BOOL v4 = (CMMsl::GyroBiasConstraints *)*((void *)this + 145);
  unint64_t v1149 = v3;
  if (v4) {
    uint64_t v718 = CMMsl::GyroBiasConstraints::hash_value(v4);
  }
  else {
    uint64_t v718 = 0;
  }
  unint64_t v5 = sub_10015BF54((uint64_t)&v1165, (uint64_t *)this + 142);
  uint64_t v6 = (CMMsl::GravityConstraints *)*((void *)this + 141);
  unint64_t v1148 = v5;
  if (v6) {
    uint64_t v717 = CMMsl::GravityConstraints::hash_value(v6);
  }
  else {
    uint64_t v717 = 0;
  }
  uint64_t v7 = *((void *)this + 85);
  if (v7 && (int v8 = *(CMMsl::DeviceMotionCorrection **)(v7 + 8)) != 0) {
    uint64_t v725 = CMMsl::DeviceMotionCorrection::hash_value(v8);
  }
  else {
    uint64_t v725 = 0;
  }
  int v9 = (CMMsl::CompassConstraints *)*((void *)this + 84);
  if (v9) {
    uint64_t v716 = CMMsl::CompassConstraints::hash_value(v9);
  }
  else {
    uint64_t v716 = 0;
  }
  uint64_t v10 = *((void *)this + 91);
  if (v10 && (__int16 v11 = *(CMMsl::DeviceMotionCorrection **)(v10 + 8)) != 0) {
    uint64_t v724 = CMMsl::DeviceMotionCorrection::hash_value(v11);
  }
  else {
    uint64_t v724 = 0;
  }
  uint64_t v12 = *((void *)this + 90);
  if (v12)
  {
    char v13 = *(unsigned char *)(v12 + 20);
    BOOL v14 = *(double *)(v12 + 8) == 0.0 || (v13 & 1) == 0;
    uint64_t v15 = *(void *)(v12 + 8);
    if (v14) {
      uint64_t v15 = 0;
    }
    int v16 = v13 & 2;
    float v17 = *(float *)(v12 + 16);
    BOOL v18 = v17 == 0.0 || v16 == 0;
    uint64_t v19 = LODWORD(v17);
    if (v18) {
      uint64_t v19 = 0;
    }
    uint64_t v715 = v19 ^ v15;
  }
  else
  {
    uint64_t v715 = 0;
  }
  uint64_t v20 = (CMMsl::IntersiloNSCodingData *)*((void *)this + 180);
  if (v20) {
    unint64_t v714 = CMMsl::IntersiloNSCodingData::hash_value(v20);
  }
  else {
    unint64_t v714 = 0;
  }
  uint64_t v21 = (CMMsl::DeviceMotionCovariance *)*((void *)this + 95);
  if (v21) {
    uint64_t v713 = CMMsl::DeviceMotionCovariance::hash_value(v21);
  }
  else {
    uint64_t v713 = 0;
  }
  uint64_t v22 = (CMMsl::AccessoryAccel *)*((void *)this + 11);
  if (v22) {
    unint64_t v712 = CMMsl::AccessoryAccel::hash_value(v22);
  }
  else {
    unint64_t v712 = 0;
  }
  uint64_t v23 = (CMMsl::AccessoryGyro *)*((void *)this + 18);
  if (v23) {
    unint64_t v711 = CMMsl::AccessoryGyro::hash_value(v23);
  }
  else {
    unint64_t v711 = 0;
  }
  uint64_t v24 = (CMMsl::AccessoryProx *)*((void *)this + 27);
  if (v24) {
    uint64_t v710 = CMMsl::AccessoryProx::hash_value(v24);
  }
  else {
    uint64_t v710 = 0;
  }
  uint64_t v25 = *((void *)this + 431);
  if (v25 && (uint64_t v26 = *(CMMsl::Accel **)(v25 + 8)) != 0) {
    uint64_t v723 = CMMsl::Accel::hash_value(v26);
  }
  else {
    uint64_t v723 = 0;
  }
  uint64_t v27 = *((void *)this + 434);
  if (v27 && (v28 = *(CMMsl::BodyMetrics **)(v27 + 8)) != 0) {
    uint64_t v722 = CMMsl::BodyMetrics::hash_value(v28);
  }
  else {
    uint64_t v722 = 0;
  }
  uint64_t v29 = *((void *)this + 436);
  if (v29 && (v30 = *(CMMsl::ElevationChange **)(v29 + 8)) != 0) {
    uint64_t v721 = CMMsl::ElevationChange::hash_value(v30);
  }
  else {
    uint64_t v721 = 0;
  }
  uint64_t v31 = *((void *)this + 440);
  if (v31 && (v32 = *(CMMsl::OnsetHeartRateData **)(v31 + 8)) != 0) {
    uint64_t v720 = CMMsl::OnsetHeartRateData::hash_value(v32);
  }
  else {
    uint64_t v720 = 0;
  }
  uint64_t v33 = *((void *)this + 444);
  if (v33 && (v34 = *(CMMsl::RotationRate **)(v33 + 8)) != 0) {
    uint64_t v719 = CMMsl::RotationRate::hash_value(v34);
  }
  else {
    uint64_t v719 = 0;
  }
  uint64_t v35 = *((void *)this + 442);
  if (v35 && (v36 = *(CMMsl::OdometerWithAltitude **)(v35 + 8)) != 0) {
    unint64_t v1133 = CMMsl::OdometerWithAltitude::hash_value(v36);
  }
  else {
    unint64_t v1133 = 0;
  }
  uint64_t v37 = *((void *)this + 448);
  if (v37 && (BOOL v38 = *(CMMsl::WorkoutEvent **)(v37 + 8)) != 0) {
    uint64_t v1132 = CMMsl::WorkoutEvent::hash_value(v38);
  }
  else {
    uint64_t v1132 = 0;
  }
  v39 = (CMMsl::VO2MaxInput *)*((void *)this + 415);
  if (v39) {
    uint64_t v1131 = CMMsl::VO2MaxInput::hash_value(v39);
  }
  else {
    uint64_t v1131 = 0;
  }
  uint64_t v40 = sub_10015BFA4((uint64_t)&v1164, (uint64_t *)this + 68);
  v41 = (CMMsl::BraveHeartNatalieData *)*((void *)this + 69);
  uint64_t v1147 = v40;
  if (v41) {
    uint64_t v1130 = CMMsl::BraveHeartNatalieData::hash_value(v41);
  }
  else {
    uint64_t v1130 = 0;
  }
  uint64_t v42 = sub_10015C000((uint64_t)&v1163, (uint64_t *)this + 70);
  uint64_t v43 = sub_10015C05C((uint64_t)&v1162, (uint64_t *)this + 67);
  v44 = (CMMsl::BraveHeartWorkoutEvent *)*((void *)this + 71);
  uint64_t v1146 = v43;
  if (v44) {
    uint64_t v1129 = CMMsl::BraveHeartWorkoutEvent::hash_value(v44);
  }
  else {
    uint64_t v1129 = 0;
  }
  v45 = (CMMsl::WorkoutRecorderHealthKitInfo *)*((void *)this + 439);
  if (v45) {
    uint64_t v1128 = CMMsl::WorkoutRecorderHealthKitInfo::hash_value(v45);
  }
  else {
    uint64_t v1128 = 0;
  }
  v46 = (CMMsl::PearlAttitude *)*((void *)this + 288);
  if (v46) {
    uint64_t v1127 = CMMsl::PearlAttitude::hash_value(v46);
  }
  else {
    uint64_t v1127 = 0;
  }
  v47 = (CMMsl::RotationRate *)*((void *)this + 340);
  if (v47) {
    uint64_t v1126 = CMMsl::RotationRate::hash_value(v47);
  }
  else {
    uint64_t v1126 = 0;
  }
  uint64_t v48 = *((void *)this + 446);
  if (v48 && (uint64_t v49 = *(void *)(v48 + 8)) != 0)
  {
    char v50 = *(unsigned char *)(v49 + 16);
    uint64_t v53 = v49 + 8;
    uint64_t v51 = *(unsigned int *)(v49 + 8);
    uint64_t v52 = *(unsigned int *)(v53 + 4);
    if ((v50 & 2) == 0) {
      uint64_t v52 = 0;
    }
    if ((v50 & 1) == 0) {
      uint64_t v51 = 0;
    }
    uint64_t v1125 = v51 ^ v52;
  }
  else
  {
    uint64_t v1125 = 0;
  }
  v54 = (CMMsl::WatchOnWristState *)*((void *)this + 425);
  if (v54) {
    uint64_t v1124 = CMMsl::WatchOnWristState::hash_value(v54);
  }
  else {
    uint64_t v1124 = 0;
  }
  v55 = (CMMsl::CatherineHealthKitData *)*((void *)this + 76);
  if (v55) {
    uint64_t v1123 = CMMsl::CatherineHealthKitData::hash_value(v55);
  }
  else {
    uint64_t v1123 = 0;
  }
  uint64_t v56 = sub_10015C0B8((uint64_t)&v1161, (uint64_t *)this + 427);
  v57 = (CMMsl::InEarTransitionEntry *)*((void *)this + 176);
  uint64_t v1145 = v56;
  if (v57) {
    uint64_t v1122 = CMMsl::InEarTransitionEntry::hash_value(v57);
  }
  else {
    uint64_t v1122 = 0;
  }
  v58 = (CMMsl::InEarSession *)*((void *)this + 174);
  if (v58) {
    uint64_t v1121 = CMMsl::InEarSession::hash_value(v58);
  }
  else {
    uint64_t v1121 = 0;
  }
  v59 = (CMMsl::InEarBaseline *)*((void *)this + 169);
  if (v59) {
    uint64_t v1120 = CMMsl::InEarBaseline::hash_value(v59);
  }
  else {
    uint64_t v1120 = 0;
  }
  v60 = (CMMsl::AccessoryProxSensorDrop *)*((void *)this + 28);
  if (v60) {
    uint64_t v1119 = CMMsl::AccessoryProxSensorDrop::hash_value(v60);
  }
  else {
    uint64_t v1119 = 0;
  }
  v61 = (CMMsl::AccessoryProxTempComp *)*((void *)this + 29);
  if (v61) {
    uint64_t v1118 = CMMsl::AccessoryProxTempComp::hash_value(v61);
  }
  else {
    uint64_t v1118 = 0;
  }
  v62 = (CMMsl::AccessoryWake *)*((void *)this + 34);
  if (v62) {
    uint64_t v1117 = CMMsl::AccessoryWake::hash_value(v62);
  }
  else {
    uint64_t v1117 = 0;
  }
  v63 = (CMMsl::FacePose *)*((void *)this + 114);
  if (v63) {
    uint64_t v1116 = CMMsl::FacePose::hash_value(v63);
  }
  else {
    uint64_t v1116 = 0;
  }
  uint64_t v64 = *((void *)this + 447);
  if (v64) {
    uint64_t v1115 = sub_10015C0B8((uint64_t)v1167, (uint64_t *)(v64 + 8));
  }
  else {
    uint64_t v1115 = 0;
  }
  uint64_t v65 = *((void *)this + 443);
  if (v65 && (v66 = *(CMMsl::Pressure **)(v65 + 8)) != 0) {
    uint64_t v1114 = CMMsl::Pressure::hash_value(v66);
  }
  else {
    uint64_t v1114 = 0;
  }
  uint64_t v67 = sub_10015C114((uint64_t)&v1160, (uint64_t *)this + 168);
  v68 = (CMMsl::AccessoryDeviceMotion *)*((void *)this + 16);
  uint64_t v1144 = v67;
  if (v68) {
    unint64_t v1113 = CMMsl::AccessoryDeviceMotion::hash_value(v68);
  }
  else {
    unint64_t v1113 = 0;
  }
  v69 = (CMMsl::VisionCompassBias *)*((void *)this + 410);
  if (v69) {
    uint64_t v1112 = CMMsl::VisionCompassBias::hash_value(v69);
  }
  else {
    uint64_t v1112 = 0;
  }
  uint64_t v70 = *((void *)this + 44);
  if (v70)
  {
    char v71 = *(unsigned char *)(v70 + 12);
    uint64_t v72 = *(int *)(v70 + 8);
    if ((v71 & 1) == 0) {
      uint64_t v72 = 0;
    }
    uint64_t v1111 = v72;
  }
  else
  {
    uint64_t v1111 = 0;
  }
  v73 = (CMMsl::VIOEstimation *)*((void *)this + 407);
  if (v73) {
    uint64_t v1110 = CMMsl::VIOEstimation::hash_value(v73);
  }
  else {
    uint64_t v1110 = 0;
  }
  v74 = (CMMsl::LSLHeadingEstimation *)*((void *)this + 235);
  if (v74) {
    uint64_t v1109 = CMMsl::LSLHeadingEstimation::hash_value(v74);
  }
  else {
    uint64_t v1109 = 0;
  }
  v75 = (CMMsl::FallSnippet *)*((void *)this + 125);
  if (v75) {
    unint64_t v1108 = CMMsl::FallSnippet::hash_value(v75);
  }
  else {
    unint64_t v1108 = 0;
  }
  v76 = (CMMsl::AccelerometerPace *)*((void *)this + 10);
  if (v76) {
    uint64_t v1107 = CMMsl::AccelerometerPace::hash_value(v76);
  }
  else {
    uint64_t v1107 = 0;
  }
  uint64_t v77 = *((void *)this + 259);
  if (v77)
  {
    float v78 = *(float *)(v77 + 8);
    BOOL v79 = v78 == 0.0 || (*(unsigned char *)(v77 + 12) & 1) == 0;
    uint64_t v80 = LODWORD(v78);
    if (v79) {
      uint64_t v80 = 0;
    }
    uint64_t v1106 = v80;
  }
  else
  {
    uint64_t v1106 = 0;
  }
  v81 = (CMMsl::StepCountEntry *)*((void *)this + 379);
  if (v81) {
    unint64_t v1105 = CMMsl::StepCountEntry::hash_value(v81);
  }
  else {
    unint64_t v1105 = 0;
  }
  v82 = (CMMsl::MobilityBoutMetrics *)*((void *)this + 245);
  if (v82) {
    uint64_t v1104 = CMMsl::MobilityBoutMetrics::hash_value(v82);
  }
  else {
    uint64_t v1104 = 0;
  }
  v83 = (CMMsl::CoprocessorReplyGaitMetrics *)*((void *)this + 89);
  if (v83) {
    uint64_t v1103 = CMMsl::CoprocessorReplyGaitMetrics::hash_value(v83);
  }
  else {
    uint64_t v1103 = 0;
  }
  v84 = (CMMsl::VIOPose *)*((void *)this + 408);
  if (v84) {
    uint64_t v1102 = CMMsl::VIOPose::hash_value(v84);
  }
  else {
    uint64_t v1102 = 0;
  }
  uint64_t v85 = *((void *)this + 356);
  if (v85)
  {
    char v86 = *(unsigned char *)(v85 + 12);
    uint64_t v87 = *(int *)(v85 + 8);
    if ((v86 & 1) == 0) {
      uint64_t v87 = 0;
    }
    uint64_t v1101 = v87;
  }
  else
  {
    uint64_t v1101 = 0;
  }
  v88 = (CMMsl::VIOReplayPose *)*((void *)this + 409);
  if (v88) {
    uint64_t v1100 = CMMsl::VIOReplayPose::hash_value(v88);
  }
  else {
    uint64_t v1100 = 0;
  }
  v89 = (CMMsl::VisualStateMeasurement *)*((void *)this + 414);
  if (v89) {
    uint64_t v1099 = CMMsl::VisualStateMeasurement::hash_value(v89);
  }
  else {
    uint64_t v1099 = 0;
  }
  v90 = (CMMsl::KappaTriggerDebug *)*((void *)this + 219);
  if (v90) {
    uint64_t v1098 = CMMsl::KappaTriggerDebug::hash_value(v90);
  }
  else {
    uint64_t v1098 = 0;
  }
  v91 = (CMMsl::KappaDirectionOfTravel *)*((void *)this + 194);
  if (v91) {
    uint64_t v1097 = CMMsl::KappaDirectionOfTravel::hash_value(v91);
  }
  else {
    uint64_t v1097 = 0;
  }
  uint64_t v92 = *((void *)this + 166);
  if (v92 && (v93 = *(CMMsl::Accel **)(v92 + 8)) != 0) {
    uint64_t v1096 = CMMsl::Accel::hash_value(v93);
  }
  else {
    uint64_t v1096 = 0;
  }
  v94 = (CMMsl::KappaSteps *)*((void *)this + 215);
  if (v94) {
    uint64_t v1095 = CMMsl::KappaSteps::hash_value(v94);
  }
  else {
    uint64_t v1095 = 0;
  }
  uint64_t v95 = *((void *)this + 397);
  if (v95)
  {
    char v96 = *(unsigned char *)(v95 + 20);
    uint64_t v97 = *(void *)(v95 + 8);
    if ((v96 & 1) == 0) {
      uint64_t v97 = 0;
    }
    uint64_t v98 = *(int *)(v95 + 16);
    if ((v96 & 2) == 0) {
      uint64_t v98 = 0;
    }
    uint64_t v1094 = v98 ^ v97;
  }
  else
  {
    uint64_t v1094 = 0;
  }
  v99 = (CMMsl::KappaRoads *)*((void *)this + 210);
  if (v99) {
    uint64_t v1093 = CMMsl::KappaRoads::hash_value(v99);
  }
  else {
    uint64_t v1093 = 0;
  }
  v100 = (CMMsl::UserStudyEvent *)*((void *)this + 398);
  if (v100) {
    unint64_t v1092 = CMMsl::UserStudyEvent::hash_value(v100);
  }
  else {
    unint64_t v1092 = 0;
  }
  v101 = (CMMsl::AuxiliaryDeviceMotion *)*((void *)this + 47);
  if (v101) {
    uint64_t v1091 = CMMsl::AuxiliaryDeviceMotion::hash_value(v101);
  }
  else {
    uint64_t v1091 = 0;
  }
  v102 = (CMMsl::TempestPoCAuxiliaryDeviceMotion *)*((void *)this + 391);
  if (v102) {
    uint64_t v1090 = CMMsl::TempestPoCAuxiliaryDeviceMotion::hash_value(v102);
  }
  else {
    uint64_t v1090 = 0;
  }
  v103 = (CMMsl::AudioAccessoryDeviceMotion *)*((void *)this + 46);
  if (v103) {
    uint64_t v1089 = CMMsl::AudioAccessoryDeviceMotion::hash_value(v103);
  }
  else {
    uint64_t v1089 = 0;
  }
  v104 = (CMMsl::TempestPoCListenerOrientation *)*((void *)this + 392);
  if (v104) {
    uint64_t v1088 = CMMsl::TempestPoCListenerOrientation::hash_value(v104);
  }
  else {
    uint64_t v1088 = 0;
  }
  uint64_t v105 = *((void *)this + 432);
  if (v105 && (v106 = *(CMMsl::Accel **)(v105 + 8)) != 0) {
    uint64_t v1087 = CMMsl::Accel::hash_value(v106);
  }
  else {
    uint64_t v1087 = 0;
  }
  uint64_t v107 = *((void *)this + 37);
  if (v107)
  {
    float v108 = *(float *)(v107 + 8);
    BOOL v109 = v108 == 0.0 || (*(unsigned char *)(v107 + 12) & 1) == 0;
    uint64_t v110 = LODWORD(v108);
    if (v109) {
      uint64_t v110 = 0;
    }
    uint64_t v1086 = v110;
  }
  else
  {
    uint64_t v1086 = 0;
  }
  uint64_t v111 = *((void *)this + 430);
  if (v111 && (uint64_t v112 = *(void *)(v111 + 8)) != 0)
  {
    float v113 = *(float *)(v112 + 8);
    BOOL v114 = v113 == 0.0 || (*(unsigned char *)(v112 + 12) & 1) == 0;
    uint64_t v115 = LODWORD(v113);
    if (v114) {
      uint64_t v115 = 0;
    }
    uint64_t v1085 = v115;
  }
  else
  {
    uint64_t v1085 = 0;
  }
  v116 = (CMMsl::VisualLocalization *)*((void *)this + 411);
  if (v116) {
    uint64_t v1084 = CMMsl::VisualLocalization::hash_value(v116);
  }
  else {
    uint64_t v1084 = 0;
  }
  v117 = (CMMsl::GyroFactoryCalibrationData *)*((void *)this + 155);
  if (v117) {
    uint64_t v1083 = CMMsl::GyroFactoryCalibrationData::hash_value(v117);
  }
  else {
    uint64_t v1083 = 0;
  }
  uint64_t v118 = *((void *)this + 367);
  if (v118)
  {
    char v119 = *(unsigned char *)(v118 + 20);
    float v120 = *(float *)(v118 + 16);
    BOOL v121 = v120 == 0.0 || (v119 & 2) == 0;
    uint64_t v122 = LODWORD(v120);
    if (v121) {
      uint64_t v122 = 0;
    }
    uint64_t v123 = *(void *)(v118 + 8);
    if ((v119 & 1) == 0) {
      uint64_t v123 = 0;
    }
    uint64_t v1082 = v122 ^ v123;
  }
  else
  {
    uint64_t v1082 = 0;
  }
  v124 = (CMMsl::FrequencyResponse *)*((void *)this + 131);
  if (v124) {
    uint64_t v1081 = CMMsl::FrequencyResponse::hash_value(v124);
  }
  else {
    uint64_t v1081 = 0;
  }
  uint64_t v125 = *((void *)this + 109);
  if (v125)
  {
    char v126 = *(unsigned char *)(v125 + 12);
    uint64_t v127 = *(unsigned int *)(v125 + 8);
    if ((v126 & 1) == 0) {
      uint64_t v127 = 0;
    }
    uint64_t v1080 = v127;
  }
  else
  {
    uint64_t v1080 = 0;
  }
  uint64_t v128 = *((void *)this + 4);
  if (v128 && (v129 = *(CMMsl::Accel **)(v128 + 8)) != 0) {
    uint64_t v1079 = CMMsl::Accel::hash_value(v129);
  }
  else {
    uint64_t v1079 = 0;
  }
  v130 = (CMMsl::MotionLocation *)*((void *)this + 253);
  if (v130) {
    uint64_t v1078 = CMMsl::MotionLocation::hash_value(v130);
  }
  else {
    uint64_t v1078 = 0;
  }
  v131 = (CMMsl::MotionActivity *)*((void *)this + 248);
  if (v131) {
    uint64_t v1077 = CMMsl::MotionActivity::hash_value(v131);
  }
  else {
    uint64_t v1077 = 0;
  }
  v132 = (CMMsl::BioMotionPose *)*((void *)this + 62);
  if (v132) {
    uint64_t v1076 = CMMsl::BioMotionPose::hash_value(v132);
  }
  else {
    uint64_t v1076 = 0;
  }
  v133 = (CMMsl::KappaTrigger *)*((void *)this + 217);
  if (v133) {
    uint64_t v1075 = CMMsl::KappaTrigger::hash_value(v133);
  }
  else {
    uint64_t v1075 = 0;
  }
  v134 = (CMMsl::RelDMInSystemConfig *)*((void *)this + 333);
  if (v134) {
    unint64_t v1074 = CMMsl::RelDMInSystemConfig::hash_value(v134);
  }
  else {
    unint64_t v1074 = 0;
  }
  uint64_t v135 = *((void *)this + 183);
  if (v135 && (v136 = *(CMMsl::BioMotionPose **)(v135 + 8)) != 0) {
    uint64_t v1073 = CMMsl::BioMotionPose::hash_value(v136);
  }
  else {
    uint64_t v1073 = 0;
  }
  uint64_t v137 = *((void *)this + 88);
  if (v137 && (v138 = *(CMMsl::BioMotionPose **)(v137 + 8)) != 0) {
    uint64_t v1072 = CMMsl::BioMotionPose::hash_value(v138);
  }
  else {
    uint64_t v1072 = 0;
  }
  v139 = (CMMsl::GyroCalibrationSample *)*((void *)this + 151);
  if (v139) {
    uint64_t v1071 = CMMsl::GyroCalibrationSample::hash_value(v139);
  }
  else {
    uint64_t v1071 = 0;
  }
  v140 = (CMMsl::GyroCalibrationSampleNonlinear *)*((void *)this + 152);
  if (v140) {
    unint64_t v1070 = CMMsl::GyroCalibrationSampleNonlinear::hash_value(v140);
  }
  else {
    unint64_t v1070 = 0;
  }
  uint64_t v141 = sub_10015C168((uint64_t)&v1159, (uint64_t *)this + 150);
  uint64_t v142 = sub_10015C1C4((uint64_t)&v1158, (uint64_t *)this + 149);
  v143 = (CMMsl::BioMotionClassification *)*((void *)this + 59);
  uint64_t v1143 = v142;
  if (v143) {
    uint64_t v1069 = CMMsl::BioMotionClassification::hash_value(v143);
  }
  else {
    uint64_t v1069 = 0;
  }
  uint64_t v144 = *((void *)this + 132);
  if (v144 && (v145 = *(CMMsl::BioMotionClassification **)(v144 + 8)) != 0) {
    uint64_t v1068 = CMMsl::BioMotionClassification::hash_value(v145);
  }
  else {
    uint64_t v1068 = 0;
  }
  uint64_t v146 = *((void *)this + 247);
  if (v146 && (v147 = *(CMMsl::BioMotionClassification **)(v146 + 8)) != 0) {
    uint64_t v1067 = CMMsl::BioMotionClassification::hash_value(v147);
  }
  else {
    uint64_t v1067 = 0;
  }
  uint64_t v148 = *((void *)this + 236);
  if (v148 && (v149 = *(CMMsl::BioMotionClassification **)(v148 + 8)) != 0) {
    uint64_t v1066 = CMMsl::BioMotionClassification::hash_value(v149);
  }
  else {
    uint64_t v1066 = 0;
  }
  v150 = (CMMsl::Pose *)*((void *)this + 304);
  if (v150) {
    uint64_t v1065 = CMMsl::Pose::hash_value(v150);
  }
  else {
    uint64_t v1065 = 0;
  }
  v151 = (CMMsl::PoseState *)*((void *)this + 305);
  if (v151) {
    uint64_t v1064 = CMMsl::PoseState::hash_value(v151);
  }
  else {
    uint64_t v1064 = 0;
  }
  v152 = (CMMsl::BioMotionPredictedPose *)*((void *)this + 63);
  if (v152) {
    unint64_t v1063 = CMMsl::BioMotionPredictedPose::hash_value(v152);
  }
  else {
    unint64_t v1063 = 0;
  }
  uint64_t v153 = *((void *)this + 184);
  if (v153 && (v154 = *(CMMsl::BioMotionPredictedPose **)(v153 + 8)) != 0) {
    unint64_t v1062 = CMMsl::BioMotionPredictedPose::hash_value(v154);
  }
  else {
    unint64_t v1062 = 0;
  }
  uint64_t v155 = *((void *)this + 87);
  if (v155 && (v156 = *(CMMsl::BioMotionPredictedPose **)(v155 + 8)) != 0) {
    unint64_t v1061 = CMMsl::BioMotionPredictedPose::hash_value(v156);
  }
  else {
    unint64_t v1061 = 0;
  }
  uint64_t v157 = *((void *)this + 318);
  if (v157 && (v158 = *(CMMsl::Pressure **)(v157 + 8)) != 0) {
    uint64_t v1060 = CMMsl::Pressure::hash_value(v158);
  }
  else {
    uint64_t v1060 = 0;
  }
  v159 = (CMMsl::VO2MaxOutput *)*((void *)this + 416);
  if (v159) {
    uint64_t v1059 = CMMsl::VO2MaxOutput::hash_value(v159);
  }
  else {
    uint64_t v1059 = 0;
  }
  v160 = (CMMsl::MagneticAccessoryType1 *)*((void *)this + 238);
  if (v160) {
    unint64_t v1058 = CMMsl::MagneticAccessoryType1::hash_value(v160);
  }
  else {
    unint64_t v1058 = 0;
  }
  uint64_t v161 = *((void *)this + 239);
  if (v161) {
    uint64_t v1057 = ((*(unsigned __int8 *)(v161 + 12) << 31 >> 31) & *(unsigned char *)(v161 + 8));
  }
  else {
    uint64_t v1057 = 0;
  }
  v162 = (CMMsl::PressureCalibration *)*((void *)this + 317);
  if (v162) {
    uint64_t v1056 = CMMsl::PressureCalibration::hash_value(v162);
  }
  else {
    uint64_t v1056 = 0;
  }
  uint64_t v163 = *((void *)this + 441);
  if (v163 && (v164 = *(CMMsl::Magnetometer **)(v163 + 8)) != 0) {
    uint64_t v1055 = CMMsl::Magnetometer::hash_value(v164);
  }
  else {
    uint64_t v1055 = 0;
  }
  uint64_t v165 = *((void *)this + 435);
  if (v165 && (v166 = *(CMMsl::CompassCalibration **)(v165 + 8)) != 0) {
    uint64_t v1054 = CMMsl::CompassCalibration::hash_value(v166);
  }
  else {
    uint64_t v1054 = 0;
  }
  if (*((void *)this + 332)) {
    uint64_t v1053 = PBHashBytes();
  }
  else {
    uint64_t v1053 = 0;
  }
  v167 = (CMMsl::CV3DPredictedPose *)*((void *)this + 73);
  if (v167) {
    uint64_t v1052 = CMMsl::CV3DPredictedPose::hash_value(v167);
  }
  else {
    uint64_t v1052 = 0;
  }
  v168 = (CMMsl::BioMotionLinkLengthFitParameters *)*((void *)this + 60);
  if (v168) {
    uint64_t v1051 = CMMsl::BioMotionLinkLengthFitParameters::hash_value(v168);
  }
  else {
    uint64_t v1051 = 0;
  }
  v169 = (CMMsl::BioMotionOnlineLinkLengthUpdate *)*((void *)this + 61);
  if (v169) {
    uint64_t v1050 = CMMsl::BioMotionOnlineLinkLengthUpdate::hash_value(v169);
  }
  else {
    uint64_t v1050 = 0;
  }
  v170 = (CMMsl::ODTPose *)*((void *)this + 266);
  if (v170) {
    uint64_t v1049 = CMMsl::ODTPose::hash_value(v170);
  }
  else {
    uint64_t v1049 = 0;
  }
  uint64_t v171 = *((void *)this + 299);
  if (v171)
  {
    char v172 = *(unsigned char *)(v171 + 24);
    double v173 = *(double *)(v171 + 16);
    BOOL v174 = *(double *)(v171 + 8) == 0.0 || (v172 & 1) == 0;
    uint64_t v175 = *(void *)(v171 + 8);
    if (v174) {
      uint64_t v175 = 0;
    }
    int v176 = v172 & 2;
    BOOL v177 = v173 == 0.0 || v176 == 0;
    double v178 = v173;
    if (v177) {
      double v178 = 0.0;
    }
    uint64_t v1048 = *(void *)&v178 ^ v175;
  }
  else
  {
    uint64_t v1048 = 0;
  }
  v179 = (CMMsl::PencilTouch *)*((void *)this + 300);
  if (v179) {
    uint64_t v1047 = CMMsl::PencilTouch::hash_value(v179);
  }
  else {
    uint64_t v1047 = 0;
  }
  uint64_t v180 = *((void *)this + 48);
  if (v180)
  {
    char v181 = *(unsigned char *)(v180 + 20);
    BOOL v182 = *(double *)(v180 + 8) == 0.0 || (v181 & 1) == 0;
    uint64_t v183 = *(void *)(v180 + 8);
    if (v182) {
      uint64_t v183 = 0;
    }
    int v184 = v181 & 2;
    float v185 = *(float *)(v180 + 16);
    BOOL v186 = v185 == 0.0 || v184 == 0;
    uint64_t v187 = LODWORD(v185);
    if (v186) {
      uint64_t v187 = 0;
    }
    uint64_t v1046 = v187 ^ v183;
  }
  else
  {
    uint64_t v1046 = 0;
  }
  uint64_t v188 = *((void *)this + 393);
  if (v188)
  {
    char v189 = *(unsigned char *)(v188 + 20);
    uint64_t v190 = *(int *)(v188 + 16);
    if ((v189 & 2) == 0) {
      uint64_t v190 = 0;
    }
    uint64_t v191 = *(void *)(v188 + 8);
    if ((v189 & 1) == 0) {
      uint64_t v191 = 0;
    }
    uint64_t v1045 = v191 ^ v190;
  }
  else
  {
    uint64_t v1045 = 0;
  }
  uint64_t v192 = *((void *)this + 43);
  if (v192 && (v193 = *(CMMsl::CV3DSLAMState **)(v192 + 8)) != 0) {
    uint64_t v1044 = CMMsl::CV3DSLAMState::hash_value(v193);
  }
  else {
    uint64_t v1044 = 0;
  }
  uint64_t v194 = *((void *)this + 58);
  if (v194 && (v195 = *(CMMsl::BioMotionAnchor **)(v194 + 8)) != 0) {
    uint64_t v1043 = CMMsl::BioMotionAnchor::hash_value(v195);
  }
  else {
    uint64_t v1043 = 0;
  }
  uint64_t v196 = *((void *)this + 64);
  if (v196 && (v197 = *(CMMsl::PropagatedAnchor **)(v196 + 8)) != 0) {
    uint64_t v1042 = CMMsl::PropagatedAnchor::hash_value(v197);
  }
  else {
    uint64_t v1042 = 0;
  }
  v198 = (CMMsl::WalkingSteadinessClassification *)*((void *)this + 420);
  if (v198) {
    unint64_t v1041 = CMMsl::WalkingSteadinessClassification::hash_value(v198);
  }
  else {
    unint64_t v1041 = 0;
  }
  v199 = (CMMsl::SteadinessModelResult *)*((void *)this + 375);
  if (v199) {
    uint64_t v1040 = CMMsl::SteadinessModelResult::hash_value(v199);
  }
  else {
    uint64_t v1040 = 0;
  }
  v200 = (CMMsl::SteadinessEvent *)*((void *)this + 370);
  if (v200) {
    uint64_t v1039 = CMMsl::SteadinessEvent::hash_value(v200);
  }
  else {
    uint64_t v1039 = 0;
  }
  v201 = (CMMsl::SteadinessModelGaitBaselineFeatures *)*((void *)this + 373);
  if (v201) {
    uint64_t v1038 = CMMsl::SteadinessModelGaitBaselineFeatures::hash_value(v201);
  }
  else {
    uint64_t v1038 = 0;
  }
  v202 = (CMMsl::SteadinessModelContinuousWalkingFeatures *)*((void *)this + 372);
  if (v202) {
    uint64_t v1037 = CMMsl::SteadinessModelContinuousWalkingFeatures::hash_value(v202);
  }
  else {
    uint64_t v1037 = 0;
  }
  v203 = (CMMsl::SteadinessModelTemporalDispersionFeatures *)*((void *)this + 376);
  if (v203) {
    uint64_t v1036 = CMMsl::SteadinessModelTemporalDispersionFeatures::hash_value(v203);
  }
  else {
    uint64_t v1036 = 0;
  }
  v204 = (CMMsl::SteadinessModelTemporalEntropyFeatures *)*((void *)this + 377);
  if (v204) {
    uint64_t v1035 = CMMsl::SteadinessModelTemporalEntropyFeatures::hash_value(v204);
  }
  else {
    uint64_t v1035 = 0;
  }
  v205 = (CMMsl::SteadinessModelBalanceFeatures *)*((void *)this + 371);
  if (v205) {
    uint64_t v1034 = CMMsl::SteadinessModelBalanceFeatures::hash_value(v205);
  }
  else {
    uint64_t v1034 = 0;
  }
  v206 = (CMMsl::MagnetometerReset *)*((void *)this + 242);
  if (v206) {
    uint64_t v1033 = CMMsl::MagnetometerReset::hash_value(v206);
  }
  else {
    uint64_t v1033 = 0;
  }
  uint64_t v207 = *((void *)this + 445);
  if (v207 && (v208 = *(CMMsl::WatchOnWristState **)(v207 + 8)) != 0) {
    uint64_t v1032 = CMMsl::WatchOnWristState::hash_value(v208);
  }
  else {
    uint64_t v1032 = 0;
  }
  v209 = (CMMsl::LiftToWakeOnHeadStatus *)*((void *)this + 230);
  if (v209) {
    uint64_t v1031 = CMMsl::LiftToWakeOnHeadStatus::hash_value(v209);
  }
  else {
    uint64_t v1031 = 0;
  }
  v210 = (CMMsl::AccessoryMagnetometer *)*((void *)this + 24);
  if (v210) {
    unint64_t v1030 = CMMsl::AccessoryMagnetometer::hash_value(v210);
  }
  else {
    unint64_t v1030 = 0;
  }
  v211 = (CMMsl::StepCountEntryAddition *)*((void *)this + 380);
  if (v211) {
    uint64_t v1029 = CMMsl::StepCountEntryAddition::hash_value(v211);
  }
  else {
    uint64_t v1029 = 0;
  }
  v212 = (CMMsl::StepDistanceFusionResult *)*((void *)this + 381);
  if (v212) {
    unint64_t v1028 = CMMsl::StepDistanceFusionResult::hash_value(v212);
  }
  else {
    unint64_t v1028 = 0;
  }
  uint64_t v213 = sub_10015C220((uint64_t)&v1157, (uint64_t *)this + 363);
  v214 = (CMMsl::CVWatchCalories *)*((void *)this + 92);
  uint64_t v1142 = v213;
  if (v214) {
    uint64_t v1027 = CMMsl::CVWatchCalories::hash_value(v214);
  }
  else {
    uint64_t v1027 = 0;
  }
  v215 = (uint64_t **)*((void *)this + 111);
  if (v215) {
    uint64_t v1026 = CMMsl::FaceBlendShapeCoefficientsSample::hash_value(v215);
  }
  else {
    uint64_t v1026 = 0;
  }
  v216 = (CMMsl::BatteryStatus *)*((void *)this + 57);
  if (v216) {
    uint64_t v1025 = CMMsl::BatteryStatus::hash_value(v216);
  }
  else {
    uint64_t v1025 = 0;
  }
  uint64_t v217 = *((void *)this + 234);
  if (v217) {
    uint64_t v1024 = ((*(unsigned __int8 *)(v217 + 12) << 31 >> 31) & *(unsigned char *)(v217 + 8));
  }
  else {
    uint64_t v1024 = 0;
  }
  uint64_t v218 = *((void *)this + 56);
  if (v218) {
    uint64_t v1023 = ((*(unsigned __int8 *)(v218 + 12) << 31 >> 31) & *(unsigned char *)(v218 + 8));
  }
  else {
    uint64_t v1023 = 0;
  }
  uint64_t v219 = *((void *)this + 308);
  if (v219)
  {
    char v220 = *(unsigned char *)(v219 + 16);
    uint64_t v221 = *(void *)(v219 + 8);
    if ((v220 & 1) == 0) {
      uint64_t v221 = 0;
    }
    uint64_t v1022 = v221;
  }
  else
  {
    uint64_t v1022 = 0;
  }
  v222 = (CMMsl::FocusModes *)*((void *)this + 130);
  if (v222) {
    unint64_t v1021 = CMMsl::FocusModes::hash_value(v222);
  }
  else {
    unint64_t v1021 = 0;
  }
  uint64_t v223 = *((void *)this + 98);
  if (v223) {
    uint64_t v1020 = ((*(unsigned __int8 *)(v223 + 12) << 31 >> 31) & *(unsigned char *)(v223 + 8));
  }
  else {
    uint64_t v1020 = 0;
  }
  uint64_t v224 = *((void *)this + 2);
  if (v224 && (uint64_t v225 = *(void *)(v224 + 8)) != 0) {
    unint64_t v1019 = sub_100012EE0((uint64_t)v1167, v225);
  }
  else {
    unint64_t v1019 = 0;
  }
  v226 = (CMMsl::AltimeterKF *)*((void *)this + 40);
  if (v226) {
    uint64_t v1018 = CMMsl::AltimeterKF::hash_value(v226);
  }
  else {
    uint64_t v1018 = 0;
  }
  v227 = (CMMsl::LiftToWakeState *)*((void *)this + 231);
  if (v227) {
    uint64_t v1017 = CMMsl::LiftToWakeState::hash_value(v227);
  }
  else {
    uint64_t v1017 = 0;
  }
  v228 = (CMMsl::ViewObstructedState *)*((void *)this + 406);
  if (v228) {
    uint64_t v1016 = CMMsl::ViewObstructedState::hash_value(v228);
  }
  else {
    uint64_t v1016 = 0;
  }
  v229 = (CMMsl::RunningFormMetrics *)*((void *)this + 343);
  if (v229) {
    uint64_t v1015 = CMMsl::RunningFormMetrics::hash_value(v229);
  }
  else {
    uint64_t v1015 = 0;
  }
  uint64_t v230 = sub_10015C27C((uint64_t)&v1156, (uint64_t *)this + 450);
  uint64_t v231 = *((void *)this + 449);
  uint64_t v1141 = v230;
  if (v231) {
    uint64_t v1014 = sub_10015C27C((uint64_t)v1167, (uint64_t *)(v231 + 8));
  }
  else {
    uint64_t v1014 = 0;
  }
  v232 = (CMMsl::ARKitWorldPose *)*((void *)this + 45);
  if (v232) {
    uint64_t v1013 = CMMsl::ARKitWorldPose::hash_value(v232);
  }
  else {
    uint64_t v1013 = 0;
  }
  uint64_t v233 = *((void *)this + 281);
  if (v233)
  {
    uint64_t v234 = *(int *)(v233 + 16);
    if ((*(unsigned char *)(v233 + 20) & 2) == 0) {
      uint64_t v234 = 0;
    }
    BOOL v235 = *(double *)(v233 + 8) == 0.0 || (*(unsigned char *)(v233 + 20) & 1) == 0;
    uint64_t v236 = *(void *)(v233 + 8);
    if (v235) {
      uint64_t v236 = 0;
    }
    uint64_t v1012 = v236 ^ v234;
  }
  else
  {
    uint64_t v1012 = 0;
  }
  v237 = (CMMsl::PocketDetectionPacket *)*((void *)this + 303);
  if (v237) {
    uint64_t v1011 = CMMsl::PocketDetectionPacket::hash_value(v237);
  }
  else {
    uint64_t v1011 = 0;
  }
  v238 = (CMMsl::LiftToWakeFeaturesNeo *)*((void *)this + 229);
  if (v238) {
    uint64_t v1010 = CMMsl::LiftToWakeFeaturesNeo::hash_value(v238);
  }
  else {
    uint64_t v1010 = 0;
  }
  v239 = (CMMsl::LiftToWakeStatusNeo *)*((void *)this + 232);
  if (v239) {
    uint64_t v1009 = CMMsl::LiftToWakeStatusNeo::hash_value(v239);
  }
  else {
    uint64_t v1009 = 0;
  }
  v240 = (CMMsl::RunningPower *)*((void *)this + 344);
  if (v240) {
    uint64_t v1008 = CMMsl::RunningPower::hash_value(v240);
  }
  else {
    uint64_t v1008 = 0;
  }
  v241 = (CMMsl::BasebandCompassCoex *)*((void *)this + 51);
  if (v241) {
    uint64_t v1007 = CMMsl::BasebandCompassCoex::hash_value(v241);
  }
  else {
    uint64_t v1007 = 0;
  }
  v242 = (CMMsl::BasebandCompassCoexConstraints *)*((void *)this + 52);
  if (v242) {
    uint64_t v1006 = CMMsl::BasebandCompassCoexConstraints::hash_value(v242);
  }
  else {
    uint64_t v1006 = 0;
  }
  v243 = (CMMsl::MotionContextActivity *)*((void *)this + 250);
  if (v243) {
    uint64_t v1005 = CMMsl::MotionContextActivity::hash_value(v243);
  }
  else {
    uint64_t v1005 = 0;
  }
  uint64_t v244 = *((void *)this + 269);
  if (v244)
  {
    char v245 = *(unsigned char *)(v244 + 12);
    uint64_t v246 = *(int *)(v244 + 8);
    if ((v245 & 1) == 0) {
      uint64_t v246 = 0;
    }
    uint64_t v1004 = v246;
  }
  else
  {
    uint64_t v1004 = 0;
  }
  v247 = (CMMsl::AccelTNBFrame *)*((void *)this + 9);
  if (v247) {
    uint64_t v1003 = CMMsl::AccelTNBFrame::hash_value(v247);
  }
  else {
    uint64_t v1003 = 0;
  }
  v248 = (CMMsl::DoTEstimatorWithTNB *)*((void *)this + 104);
  if (v248) {
    uint64_t v1002 = CMMsl::DoTEstimatorWithTNB::hash_value(v248);
  }
  else {
    uint64_t v1002 = 0;
  }
  v249 = (CMMsl::PdrMLModelOutput *)*((void *)this + 282);
  if (v249) {
    uint64_t v1001 = CMMsl::PdrMLModelOutput::hash_value(v249);
  }
  else {
    uint64_t v1001 = 0;
  }
  v250 = (CMMsl::GaitEventsModelOutput *)*((void *)this + 136);
  if (v250) {
    uint64_t v1000 = CMMsl::GaitEventsModelOutput::hash_value(v250);
  }
  else {
    uint64_t v1000 = 0;
  }
  v251 = (CMMsl::GaitEventsStrideAggregation *)*((void *)this + 137);
  if (v251) {
    uint64_t v999 = CMMsl::GaitEventsStrideAggregation::hash_value(v251);
  }
  else {
    uint64_t v999 = 0;
  }
  v252 = (CMMsl::GaitEventsHKResult *)*((void *)this + 135);
  if (v252) {
    uint64_t v998 = CMMsl::GaitEventsHKResult::hash_value(v252);
  }
  else {
    uint64_t v998 = 0;
  }
  uint64_t v253 = *((void *)this + 112);
  if (v253)
  {
    int v254 = *(unsigned __int8 *)(v253 + 20);
    BOOL v255 = *(double *)(v253 + 8) == 0.0 || (v254 & 1) == 0;
    uint64_t v256 = *(void *)(v253 + 8);
    if (v255) {
      uint64_t v256 = 0;
    }
    uint64_t v997 = v256 ^ (*(unsigned char *)(v253 + 16) & (v254 << 30 >> 31));
  }
  else
  {
    uint64_t v997 = 0;
  }
  v257 = (CMMsl::WorkoutRecorderAveragedALSData *)*((void *)this + 433);
  if (v257) {
    uint64_t v996 = CMMsl::WorkoutRecorderAveragedALSData::hash_value(v257);
  }
  else {
    uint64_t v996 = 0;
  }
  v258 = (CMMsl::StrideCalEntry *)*((void *)this + 386);
  if (v258) {
    uint64_t v995 = CMMsl::StrideCalEntry::hash_value(v258);
  }
  else {
    uint64_t v995 = 0;
  }
  v259 = (CMMsl::RunningSpeedKFResult *)*((void *)this + 346);
  if (v259) {
    uint64_t v994 = CMMsl::RunningSpeedKFResult::hash_value(v259);
  }
  else {
    uint64_t v994 = 0;
  }
  v260 = (CMMsl::ProxPDP *)*((void *)this + 327);
  if (v260) {
    uint64_t v993 = CMMsl::ProxPDP::hash_value(v260);
  }
  else {
    uint64_t v993 = 0;
  }
  v261 = (CMMsl::KeyboardMotionFeatures *)*((void *)this + 224);
  if (v261) {
    uint64_t v992 = CMMsl::KeyboardMotionFeatures::hash_value(v261);
  }
  else {
    uint64_t v992 = 0;
  }
  uint64_t v262 = *((void *)this + 225);
  if (v262)
  {
    char v263 = *(unsigned char *)(v262 + 20);
    BOOL v264 = *(double *)(v262 + 8) == 0.0 || (v263 & 1) == 0;
    uint64_t v265 = *(void *)(v262 + 8);
    if (v264) {
      uint64_t v265 = 0;
    }
    uint64_t v266 = *(unsigned int *)(v262 + 16);
    if ((v263 & 2) == 0) {
      uint64_t v266 = 0;
    }
    uint64_t v991 = v266 ^ v265;
  }
  else
  {
    uint64_t v991 = 0;
  }
  uint64_t v267 = *((void *)this + 38);
  if (v267)
  {
    uint64_t v268 = *(void *)(v267 + 8);
    if ((*(unsigned char *)(v267 + 20) & 1) == 0) {
      uint64_t v268 = 0;
    }
    float v269 = *(float *)(v267 + 16);
    BOOL v270 = v269 == 0.0 || (*(unsigned char *)(v267 + 20) & 2) == 0;
    uint64_t v271 = LODWORD(v269);
    if (v270) {
      uint64_t v271 = 0;
    }
    uint64_t v990 = v271 ^ v268;
  }
  else
  {
    uint64_t v990 = 0;
  }
  uint64_t v272 = *((void *)this + 223);
  if (v272)
  {
    int v273 = *(unsigned __int8 *)(v272 + 20);
    BOOL v274 = *(double *)(v272 + 8) == 0.0 || (v273 & 1) == 0;
    uint64_t v275 = *(void *)(v272 + 8);
    if (v274) {
      uint64_t v275 = 0;
    }
    uint64_t v989 = v275 ^ (*(unsigned char *)(v272 + 16) & (v273 << 30 >> 31));
  }
  else
  {
    uint64_t v989 = 0;
  }
  v276 = (CMMsl::WakeGestureNotification *)*((void *)this + 417);
  if (v276) {
    uint64_t v988 = CMMsl::WakeGestureNotification::hash_value(v276);
  }
  else {
    uint64_t v988 = 0;
  }
  v277 = (CMMsl::ProxBaselineEstimatorState *)*((void *)this + 325);
  if (v277) {
    uint64_t v987 = CMMsl::ProxBaselineEstimatorState::hash_value(v277);
  }
  else {
    uint64_t v987 = 0;
  }
  v278 = (CMMsl::BaselineResetCheck *)*((void *)this + 54);
  if (v278) {
    uint64_t v986 = CMMsl::BaselineResetCheck::hash_value(v278);
  }
  else {
    uint64_t v986 = 0;
  }
  v279 = (CMMsl::RhythmicGnssOperatorStatus *)*((void *)this + 339);
  if (v279) {
    uint64_t v985 = CMMsl::RhythmicGnssOperatorStatus::hash_value(v279);
  }
  else {
    uint64_t v985 = 0;
  }
  uint64_t v280 = *((void *)this + 226);
  if (v280)
  {
    int v281 = *(unsigned __int8 *)(v280 + 20);
    BOOL v282 = *(double *)(v280 + 8) == 0.0 || (v281 & 1) == 0;
    uint64_t v283 = *(void *)(v280 + 8);
    if (v282) {
      uint64_t v283 = 0;
    }
    uint64_t v984 = v283 ^ (*(unsigned char *)(v280 + 16) & (v281 << 30 >> 31));
  }
  else
  {
    uint64_t v984 = 0;
  }
  uint64_t v284 = *((void *)this + 222);
  if (v284)
  {
    int v285 = *(unsigned __int8 *)(v284 + 20);
    BOOL v286 = *(double *)(v284 + 8) == 0.0 || (v285 & 1) == 0;
    uint64_t v287 = *(void *)(v284 + 8);
    if (v286) {
      uint64_t v287 = 0;
    }
    uint64_t v983 = v287 ^ (*(unsigned char *)(v284 + 16) & (v285 << 30 >> 31));
  }
  else
  {
    uint64_t v983 = 0;
  }
  v288 = (CMMsl::BacklightState *)*((void *)this + 50);
  if (v288) {
    unint64_t v982 = CMMsl::BacklightState::hash_value(v288);
  }
  else {
    unint64_t v982 = 0;
  }
  unint64_t v289 = sub_10015C2D8((uint64_t)&v1155, (uint64_t *)this + 55);
  v290 = (CMMsl::HeartRateReference *)*((void *)this + 165);
  unint64_t v1140 = v289;
  if (v290) {
    uint64_t v981 = CMMsl::HeartRateReference::hash_value(v290);
  }
  else {
    uint64_t v981 = 0;
  }
  v291 = (CMMsl::Skeleton2D *)*((void *)this + 362);
  if (v291) {
    uint64_t v980 = CMMsl::Skeleton2D::hash_value(v291);
  }
  else {
    uint64_t v980 = 0;
  }
  v292 = (CMMsl::Skeleton3DRetargeted *)*((void *)this + 365);
  if (v292) {
    uint64_t v979 = CMMsl::Skeleton3DRetargeted::hash_value(v292);
  }
  else {
    uint64_t v979 = 0;
  }
  v293 = (CMMsl::Skeleton3DLifted *)*((void *)this + 364);
  if (v293) {
    uint64_t v978 = CMMsl::Skeleton3DLifted::hash_value(v293);
  }
  else {
    uint64_t v978 = 0;
  }
  v294 = (CMMsl::FitnessMachineSample *)*((void *)this + 129);
  if (v294) {
    uint64_t v977 = CMMsl::FitnessMachineSample::hash_value(v294);
  }
  else {
    uint64_t v977 = 0;
  }
  v295 = (CMMsl::WatchHeartRateData *)*((void *)this + 424);
  if (v295) {
    unint64_t v976 = CMMsl::WatchHeartRateData::hash_value(v295);
  }
  else {
    unint64_t v976 = 0;
  }
  v296 = (CMMsl::FacePoseSynchronized *)*((void *)this + 115);
  if (v296) {
    unint64_t v975 = CMMsl::FacePoseSynchronized::hash_value(v296);
  }
  else {
    unint64_t v975 = 0;
  }
  v297 = (CMMsl::WatchActiveCalories *)*((void *)this + 421);
  if (v297) {
    uint64_t v974 = CMMsl::WatchActiveCalories::hash_value(v297);
  }
  else {
    uint64_t v974 = 0;
  }
  v298 = (CMMsl::WatchBasalCalories *)*((void *)this + 422);
  if (v298) {
    uint64_t v973 = CMMsl::WatchBasalCalories::hash_value(v298);
  }
  else {
    uint64_t v973 = 0;
  }
  v299 = (CMMsl::TrackRunData *)*((void *)this + 395);
  if (v299) {
    uint64_t v972 = CMMsl::TrackRunData::hash_value(v299);
  }
  else {
    uint64_t v972 = 0;
  }
  v300 = (CMMsl::GnssAvailabilityPredictorData *)*((void *)this + 139);
  if (v300) {
    uint64_t v971 = CMMsl::GnssAvailabilityPredictorData::hash_value(v300);
  }
  else {
    uint64_t v971 = 0;
  }
  v301 = (CMMsl::GnssLeechLocationData *)*((void *)this + 140);
  if (v301) {
    uint64_t v970 = CMMsl::GnssLeechLocationData::hash_value(v301);
  }
  else {
    uint64_t v970 = 0;
  }
  v302 = (CMMsl::MapsRouteHintData *)*((void *)this + 243);
  if (v302) {
    uint64_t v969 = CMMsl::MapsRouteHintData::hash_value(v302);
  }
  else {
    uint64_t v969 = 0;
  }
  v303 = (CMMsl::FitnessMachineData *)*((void *)this + 128);
  if (v303) {
    uint64_t v968 = CMMsl::FitnessMachineData::hash_value(v303);
  }
  else {
    uint64_t v968 = 0;
  }
  uint64_t v304 = *((void *)this + 438);
  if (v304 && (v305 = *(CMMsl::FitnessMachineData **)(v304 + 8)) != 0) {
    uint64_t v967 = CMMsl::FitnessMachineData::hash_value(v305);
  }
  else {
    uint64_t v967 = 0;
  }
  v306 = (CMMsl::AccessoryActivityStateUpdate *)*((void *)this + 14);
  if (v306) {
    uint64_t v966 = CMMsl::AccessoryActivityStateUpdate::hash_value(v306);
  }
  else {
    uint64_t v966 = 0;
  }
  v307 = (CMMsl::PedestrianFenceExit *)*((void *)this + 291);
  if (v307) {
    uint64_t v965 = CMMsl::PedestrianFenceExit::hash_value(v307);
  }
  else {
    uint64_t v965 = 0;
  }
  v308 = (CMMsl::InertialOdometry *)*((void *)this + 177);
  if (v308) {
    uint64_t v964 = CMMsl::InertialOdometry::hash_value(v308);
  }
  else {
    uint64_t v964 = 0;
  }
  v309 = (CMMsl::PhysicalEffortInput *)*((void *)this + 301);
  if (v309) {
    uint64_t v963 = CMMsl::PhysicalEffortInput::hash_value(v309);
  }
  else {
    uint64_t v963 = 0;
  }
  v310 = (CMMsl::PhysicalEffortSample *)*((void *)this + 302);
  if (v310) {
    uint64_t v962 = CMMsl::PhysicalEffortSample::hash_value(v310);
  }
  else {
    uint64_t v962 = 0;
  }
  v311 = (CMMsl::PedestrianCalorieModelDebugging *)*((void *)this + 290);
  if (v311) {
    uint64_t v961 = CMMsl::PedestrianCalorieModelDebugging::hash_value(v311);
  }
  else {
    uint64_t v961 = 0;
  }
  v312 = (CMMsl::ElevationThreshold *)*((void *)this + 108);
  if (v312) {
    unint64_t v960 = CMMsl::ElevationThreshold::hash_value(v312);
  }
  else {
    unint64_t v960 = 0;
  }
  v313 = (CMMsl::InitialHistoricalMeanSeaLevelPressure *)*((void *)this + 178);
  if (v313) {
    uint64_t v959 = CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(v313);
  }
  else {
    uint64_t v959 = 0;
  }
  uint64_t v314 = *((void *)this + 428);
  if (v314)
  {
    char v315 = *(unsigned char *)(v314 + 16);
    uint64_t v318 = v314 + 8;
    uint64_t v316 = *(unsigned int *)(v314 + 8);
    uint64_t v317 = *(unsigned int *)(v318 + 4);
    if ((v315 & 2) == 0) {
      uint64_t v317 = 0;
    }
    if ((v315 & 1) == 0) {
      uint64_t v316 = 0;
    }
    uint64_t v958 = v316 ^ v317;
  }
  else
  {
    uint64_t v958 = 0;
  }
  v319 = (CMMsl::PencilDeviceMotion *)*((void *)this + 294);
  if (v319) {
    uint64_t v957 = CMMsl::PencilDeviceMotion::hash_value(v319);
  }
  else {
    uint64_t v957 = 0;
  }
  v320 = (CMMsl::PencilFusionResult *)*((void *)this + 297);
  if (v320) {
    uint64_t v956 = CMMsl::PencilFusionResult::hash_value(v320);
  }
  else {
    uint64_t v956 = 0;
  }
  uint64_t v321 = *((void *)this + 159);
  if (v321)
  {
    int v322 = *(unsigned __int8 *)(v321 + 20);
    BOOL v323 = *(double *)(v321 + 8) == 0.0 || (v322 & 1) == 0;
    uint64_t v324 = *(void *)(v321 + 8);
    if (v323) {
      uint64_t v324 = 0;
    }
    uint64_t v955 = v324 ^ (*(unsigned char *)(v321 + 16) & (v322 << 30 >> 31));
  }
  else
  {
    uint64_t v955 = 0;
  }
  v325 = (CMMsl::SteadinessModelHarmonicFeatures *)*((void *)this + 374);
  if (v325) {
    uint64_t v954 = CMMsl::SteadinessModelHarmonicFeatures::hash_value(v325);
  }
  else {
    uint64_t v954 = 0;
  }
  v326 = (CMMsl::PencilFusionReplayResult *)*((void *)this + 296);
  if (v326) {
    uint64_t v953 = CMMsl::PencilFusionReplayResult::hash_value(v326);
  }
  else {
    uint64_t v953 = 0;
  }
  v327 = (CMMsl::MobilitySmoothedGaitMetrics *)*((void *)this + 246);
  if (v327) {
    uint64_t v952 = CMMsl::MobilitySmoothedGaitMetrics::hash_value(v327);
  }
  else {
    uint64_t v952 = 0;
  }
  uint64_t v328 = *((void *)this + 423);
  if (v328)
  {
    char v329 = *(unsigned char *)(v328 + 24);
    BOOL v330 = *(double *)(v328 + 16) == 0.0 || (v329 & 2) == 0;
    uint64_t v331 = *(void *)(v328 + 16);
    if (v330) {
      uint64_t v331 = 0;
    }
    uint64_t v332 = *(void *)(v328 + 8);
    if ((v329 & 1) == 0) {
      uint64_t v332 = 0;
    }
    uint64_t v951 = v331 ^ v332;
  }
  else
  {
    uint64_t v951 = 0;
  }
  v333 = (CMMsl::AccessoryHeartRate *)*((void *)this + 22);
  if (v333) {
    uint64_t v950 = CMMsl::AccessoryHeartRate::hash_value(v333);
  }
  else {
    uint64_t v950 = 0;
  }
  v334 = (CMMsl::AccessoryPPG *)*((void *)this + 26);
  if (v334) {
    uint64_t v949 = CMMsl::AccessoryPPG::hash_value(v334);
  }
  else {
    uint64_t v949 = 0;
  }
  v335 = (CMMsl::MotionLoiAltitudeData *)*((void *)this + 254);
  if (v335) {
    uint64_t v948 = CMMsl::MotionLoiAltitudeData::hash_value(v335);
  }
  else {
    uint64_t v948 = 0;
  }
  uint64_t v336 = *((void *)this + 97);
  if (v336)
  {
    char v337 = *(unsigned char *)(v336 + 20);
    BOOL v338 = *(double *)(v336 + 8) == 0.0 || (v337 & 1) == 0;
    uint64_t v339 = *(void *)(v336 + 8);
    if (v338) {
      uint64_t v339 = 0;
    }
    uint64_t v340 = *(unsigned int *)(v336 + 16);
    if ((v337 & 2) == 0) {
      uint64_t v340 = 0;
    }
    uint64_t v947 = v340 ^ v339;
  }
  else
  {
    uint64_t v947 = 0;
  }
  v341 = (CMMsl::PostureJoint *)*((void *)this + 306);
  if (v341) {
    uint64_t v946 = CMMsl::PostureJoint::hash_value(v341);
  }
  else {
    uint64_t v946 = 0;
  }
  uint64_t v342 = sub_10015C324((uint64_t)&v1154, (uint64_t *)this + 307);
  uint64_t v343 = *((void *)this + 167);
  uint64_t v1139 = v342;
  if (v343)
  {
    int v344 = *(unsigned __int8 *)(v343 + 20);
    BOOL v345 = *(double *)(v343 + 8) == 0.0 || (v344 & 1) == 0;
    uint64_t v346 = *(void *)(v343 + 8);
    if (v345) {
      uint64_t v346 = 0;
    }
    uint64_t v945 = v346 ^ (*(unsigned char *)(v343 + 16) & (v344 << 30 >> 31));
  }
  else
  {
    uint64_t v945 = 0;
  }
  uint64_t v347 = sub_10015C380((uint64_t)&v1153, (uint64_t)this + 3496);
  uint64_t v348 = *((void *)this + 384);
  uint64_t v1138 = v347;
  if (v348 && (v349 = *(CMMsl::OnsetHeartRateData **)(v348 + 8)) != 0) {
    uint64_t v944 = CMMsl::OnsetHeartRateData::hash_value(v349);
  }
  else {
    uint64_t v944 = 0;
  }
  unint64_t v350 = sub_10015C3CC((uint64_t)&v1152, (uint64_t *)this + 396);
  v351 = (CMMsl::Accel *)*((void *)this + 3);
  unint64_t v1137 = v350;
  if (v351) {
    uint64_t v943 = CMMsl::Accel::hash_value(v351);
  }
  else {
    uint64_t v943 = 0;
  }
  v352 = (CMMsl::AccelBatch *)*((void *)this + 5);
  if (v352) {
    uint64_t v942 = CMMsl::AccelBatch::hash_value(v352);
  }
  else {
    uint64_t v942 = 0;
  }
  uint64_t v353 = *((void *)this + 8);
  if (v353 && (v354 = *(CMMsl::Accel **)(v353 + 8)) != 0) {
    uint64_t v941 = CMMsl::Accel::hash_value(v354);
  }
  else {
    uint64_t v941 = 0;
  }
  uint64_t v355 = *((void *)this + 6);
  if (v355 && (v356 = *(CMMsl::Accel **)(v355 + 8)) != 0) {
    uint64_t v940 = CMMsl::Accel::hash_value(v356);
  }
  else {
    uint64_t v940 = 0;
  }
  v357 = (CMMsl::Gyro *)*((void *)this + 143);
  if (v357) {
    uint64_t v939 = CMMsl::Gyro::hash_value(v357);
  }
  else {
    uint64_t v939 = 0;
  }
  v358 = (CMMsl::GyroOscarEmu *)*((void *)this + 157);
  if (v358) {
    uint64_t v938 = CMMsl::GyroOscarEmu::hash_value(v358);
  }
  else {
    uint64_t v938 = 0;
  }
  uint64_t v359 = *((void *)this + 158);
  if (v359)
  {
    char v360 = *(unsigned char *)(v359 + 16);
    float v361 = *(float *)(v359 + 12);
    BOOL v362 = v361 == 0.0 || (v360 & 2) == 0;
    uint64_t v363 = LODWORD(v361);
    if (v362) {
      uint64_t v363 = 0;
    }
    uint64_t v364 = *(int *)(v359 + 8);
    if ((v360 & 1) == 0) {
      uint64_t v364 = 0;
    }
    uint64_t v937 = v364 ^ v363;
  }
  else
  {
    uint64_t v937 = 0;
  }
  v365 = (CMMsl::GyroBiasAndVariance *)*((void *)this + 144);
  if (v365) {
    uint64_t v936 = CMMsl::GyroBiasAndVariance::hash_value(v365);
  }
  else {
    uint64_t v936 = 0;
  }
  v366 = (CMMsl::GyroBiasFit *)*((void *)this + 148);
  if (v366) {
    uint64_t v935 = CMMsl::GyroBiasFit::hash_value(v366);
  }
  else {
    uint64_t v935 = 0;
  }
  uint64_t v367 = *((void *)this + 154);
  if (v367)
  {
    float v368 = *(float *)(v367 + 8);
    BOOL v369 = v368 == 0.0 || (*(unsigned char *)(v367 + 12) & 1) == 0;
    uint64_t v370 = LODWORD(v368);
    if (v369) {
      uint64_t v370 = 0;
    }
    uint64_t v934 = v370;
  }
  else
  {
    uint64_t v934 = 0;
  }
  v371 = (CMMsl::Magnetometer *)*((void *)this + 240);
  if (v371) {
    uint64_t v933 = CMMsl::Magnetometer::hash_value(v371);
  }
  else {
    uint64_t v933 = 0;
  }
  v372 = (CMMsl::Compass *)*((void *)this + 80);
  if (v372) {
    uint64_t v932 = CMMsl::Compass::hash_value(v372);
  }
  else {
    uint64_t v932 = 0;
  }
  uint64_t v373 = *((void *)this + 81);
  if (v373)
  {
    char v374 = *(unsigned char *)(v373 + 20);
    BOOL v375 = *(double *)(v373 + 8) == 0.0 || (v374 & 1) == 0;
    uint64_t v376 = *(void *)(v373 + 8);
    if (v375) {
      uint64_t v376 = 0;
    }
    uint64_t v377 = *(int *)(v373 + 16);
    if ((v374 & 2) == 0) {
      uint64_t v377 = 0;
    }
    uint64_t v931 = v377 ^ v376;
  }
  else
  {
    uint64_t v931 = 0;
  }
  v378 = (CMMsl::GyroCompass *)*((void *)this + 153);
  if (v378) {
    uint64_t v930 = CMMsl::GyroCompass::hash_value(v378);
  }
  else {
    uint64_t v930 = 0;
  }
  v379 = (CMMsl::CompassCalibration *)*((void *)this + 82);
  if (v379) {
    uint64_t v929 = CMMsl::CompassCalibration::hash_value(v379);
  }
  else {
    uint64_t v929 = 0;
  }
  v380 = (CMMsl::Pressure *)*((void *)this + 316);
  if (v380) {
    uint64_t v928 = CMMsl::Pressure::hash_value(v380);
  }
  else {
    uint64_t v928 = 0;
  }
  uint64_t v381 = *((void *)this + 323);
  if (v381 && (v382 = *(CMMsl::Pressure **)(v381 + 8)) != 0) {
    uint64_t v927 = CMMsl::Pressure::hash_value(v382);
  }
  else {
    uint64_t v927 = 0;
  }
  uint64_t v383 = *((void *)this + 319);
  if (v383 && (v384 = *(CMMsl::Pressure **)(v383 + 8)) != 0) {
    uint64_t v926 = CMMsl::Pressure::hash_value(v384);
  }
  else {
    uint64_t v926 = 0;
  }
  uint64_t v385 = *((void *)this + 324);
  if (v385)
  {
    char v386 = *(unsigned char *)(v385 + 20);
    BOOL v387 = *(double *)(v385 + 8) == 0.0 || (v386 & 1) == 0;
    uint64_t v388 = *(void *)(v385 + 8);
    if (v387) {
      uint64_t v388 = 0;
    }
    uint64_t v389 = *(unsigned int *)(v385 + 16);
    if ((v386 & 2) == 0) {
      uint64_t v389 = 0;
    }
    uint64_t v925 = v389 ^ v388;
  }
  else
  {
    uint64_t v925 = 0;
  }
  uint64_t v390 = *((void *)this + 394);
  if (v390)
  {
    int v391 = *(unsigned __int8 *)(v390 + 20);
    BOOL v392 = *(double *)(v390 + 8) == 0.0 || (v391 & 1) == 0;
    uint64_t v393 = *(void *)(v390 + 8);
    if (v392) {
      uint64_t v393 = 0;
    }
    uint64_t v924 = v393 ^ (*(unsigned char *)(v390 + 16) & (v391 << 30 >> 31));
  }
  else
  {
    uint64_t v924 = 0;
  }
  v394 = (CMMsl::DeviceMotion *)*((void *)this + 93);
  if (v394) {
    uint64_t v923 = CMMsl::DeviceMotion::hash_value(v394);
  }
  else {
    uint64_t v923 = 0;
  }
  v395 = (CMMsl::MotionStateUpdate *)*((void *)this + 256);
  if (v395) {
    unint64_t v922 = CMMsl::MotionStateUpdate::hash_value(v395);
  }
  else {
    unint64_t v922 = 0;
  }
  v396 = (CMMsl::AccelGps *)*((void *)this + 7);
  if (v396) {
    uint64_t v921 = CMMsl::AccelGps::hash_value(v396);
  }
  else {
    uint64_t v921 = 0;
  }
  v397 = (CMMsl::GyroGps *)*((void *)this + 156);
  if (v397) {
    uint64_t v920 = CMMsl::GyroGps::hash_value(v397);
  }
  else {
    uint64_t v920 = 0;
  }
  uint64_t v398 = *((void *)this + 322);
  if (v398 && (v399 = *(CMMsl::Pressure **)(v398 + 8)) != 0) {
    uint64_t v919 = CMMsl::Pressure::hash_value(v399);
  }
  else {
    uint64_t v919 = 0;
  }
  v400 = (CMMsl::BTConnection *)*((void *)this + 49);
  if (v400) {
    uint64_t v918 = CMMsl::BTConnection::hash_value(v400);
  }
  else {
    uint64_t v918 = 0;
  }
  uint64_t v401 = *((void *)this + 355);
  if (v401)
  {
    char v402 = *(unsigned char *)(v401 + 20);
    BOOL v403 = *(double *)(v401 + 8) == 0.0 || (v402 & 1) == 0;
    uint64_t v404 = *(void *)(v401 + 8);
    if (v403) {
      uint64_t v404 = 0;
    }
    uint64_t v405 = *(unsigned int *)(v401 + 16);
    if ((v402 & 2) == 0) {
      uint64_t v405 = 0;
    }
    uint64_t v917 = v405 ^ v404;
  }
  else
  {
    uint64_t v917 = 0;
  }
  v406 = (CMMsl::LocationOscarEmu *)*((void *)this + 233);
  if (v406) {
    uint64_t v916 = CMMsl::LocationOscarEmu::hash_value(v406);
  }
  else {
    uint64_t v916 = 0;
  }
  v407 = (CMMsl::MotionHint *)*((void *)this + 252);
  if (v407) {
    uint64_t v915 = CMMsl::MotionHint::hash_value(v407);
  }
  else {
    uint64_t v915 = 0;
  }
  v408 = (CMMsl::EnhancedDeviceMotion *)*((void *)this + 110);
  if (v408) {
    uint64_t v914 = CMMsl::EnhancedDeviceMotion::hash_value(v408);
  }
  else {
    uint64_t v914 = 0;
  }
  v409 = (CMMsl::NonlinearBiasFit *)*((void *)this + 263);
  if (v409) {
    uint64_t v913 = CMMsl::NonlinearBiasFit::hash_value(v409);
  }
  else {
    uint64_t v913 = 0;
  }
  v410 = (CMMsl::NatalieData *)*((void *)this + 262);
  if (v410) {
    uint64_t v912 = CMMsl::NatalieData::hash_value(v410);
  }
  else {
    uint64_t v912 = 0;
  }
  v411 = (CMMsl::BodyMetrics *)*((void *)this + 66);
  if (v411) {
    uint64_t v911 = CMMsl::BodyMetrics::hash_value(v411);
  }
  else {
    uint64_t v911 = 0;
  }
  v412 = (CMMsl::WorkoutEvent *)*((void *)this + 429);
  if (v412) {
    uint64_t v910 = CMMsl::WorkoutEvent::hash_value(v412);
  }
  else {
    uint64_t v910 = 0;
  }
  v413 = (CMMsl::OnsetHeartRateData *)*((void *)this + 267);
  if (v413) {
    uint64_t v909 = CMMsl::OnsetHeartRateData::hash_value(v413);
  }
  else {
    uint64_t v909 = 0;
  }
  uint64_t v414 = *((void *)this + 383);
  if (v414 && (v415 = *(CMMsl::OnsetHeartRateData **)(v414 + 8)) != 0) {
    uint64_t v908 = CMMsl::OnsetHeartRateData::hash_value(v415);
  }
  else {
    uint64_t v908 = 0;
  }
  v416 = (CMMsl::ElevationChange *)*((void *)this + 106);
  if (v416) {
    uint64_t v907 = CMMsl::ElevationChange::hash_value(v416);
  }
  else {
    uint64_t v907 = 0;
  }
  uint64_t v417 = *((void *)this + 79);
  if (v417)
  {
    char v418 = *(unsigned char *)(v417 + 20);
    BOOL v419 = *(double *)(v417 + 8) == 0.0 || (v418 & 1) == 0;
    uint64_t v420 = *(void *)(v417 + 8);
    if (v419) {
      uint64_t v420 = 0;
    }
    uint64_t v421 = *(unsigned int *)(v417 + 16);
    if ((v418 & 2) == 0) {
      uint64_t v421 = 0;
    }
    uint64_t v906 = v421 ^ v420;
  }
  else
  {
    uint64_t v906 = 0;
  }
  v422 = (CMMsl::MotionGPSLocation *)*((void *)this + 251);
  if (v422) {
    unint64_t v905 = CMMsl::MotionGPSLocation::hash_value(v422);
  }
  else {
    unint64_t v905 = 0;
  }
  uint64_t v423 = *((void *)this + 258);
  if (v423 && (v424 = *(CMMsl::MotionGPSLocation **)(v423 + 8)) != 0) {
    unint64_t v904 = CMMsl::MotionGPSLocation::hash_value(v424);
  }
  else {
    unint64_t v904 = 0;
  }
  v425 = (CMMsl::StrideCalBin *)*((void *)this + 385);
  if (v425) {
    uint64_t v903 = CMMsl::StrideCalBin::hash_value(v425);
  }
  else {
    uint64_t v903 = 0;
  }
  uint64_t v426 = *((void *)this + 75);
  if (v426) {
    uint64_t v902 = ((*(unsigned __int8 *)(v426 + 12) << 31 >> 31) & *(unsigned char *)(v426 + 8));
  }
  else {
    uint64_t v902 = 0;
  }
  v427 = (CMMsl::Odometer *)*((void *)this + 264);
  if (v427) {
    uint64_t v901 = CMMsl::Odometer::hash_value(v427);
  }
  else {
    uint64_t v901 = 0;
  }
  v428 = (CMMsl::MetsInfo *)*((void *)this + 244);
  if (v428) {
    uint64_t v900 = CMMsl::MetsInfo::hash_value(v428);
  }
  else {
    uint64_t v900 = 0;
  }
  v429 = (CMMsl::FallStats *)*((void *)this + 126);
  if (v429) {
    uint64_t v899 = CMMsl::FallStats::hash_value(v429);
  }
  else {
    uint64_t v899 = 0;
  }
  v430 = (CMMsl::BasebandSpeed *)*((void *)this + 53);
  if (v430) {
    uint64_t v898 = CMMsl::BasebandSpeed::hash_value(v430);
  }
  else {
    uint64_t v898 = 0;
  }
  uint64_t v431 = *((void *)this + 402);
  if (v431) {
    uint64_t v897 = ((*(unsigned __int8 *)(v431 + 12) << 31 >> 31) & *(unsigned char *)(v431 + 8));
  }
  else {
    uint64_t v897 = 0;
  }
  v432 = (CMMsl::StepCadenceToStrideLengthBin *)*((void *)this + 378);
  if (v432) {
    uint64_t v896 = CMMsl::StepCadenceToStrideLengthBin::hash_value(v432);
  }
  else {
    uint64_t v896 = 0;
  }
  uint64_t v433 = *((void *)this + 426);
  if (v433)
  {
    char v434 = *(unsigned char *)(v433 + 16);
    uint64_t v437 = v433 + 8;
    uint64_t v435 = *(unsigned int *)(v433 + 8);
    uint64_t v436 = *(unsigned int *)(v437 + 4);
    if ((v434 & 2) == 0) {
      uint64_t v436 = 0;
    }
    if ((v434 & 1) == 0) {
      uint64_t v435 = 0;
    }
    uint64_t v895 = v435 ^ v436;
  }
  else
  {
    uint64_t v895 = 0;
  }
  uint64_t v438 = *((void *)this + 257);
  if (v438) {
    uint64_t v894 = ((*(unsigned __int8 *)(v438 + 12) << 31 >> 31) & *(unsigned char *)(v438 + 8));
  }
  else {
    uint64_t v894 = 0;
  }
  v439 = (CMMsl::MotionLoiData *)*((void *)this + 255);
  if (v439) {
    uint64_t v893 = CMMsl::MotionLoiData::hash_value(v439);
  }
  else {
    uint64_t v893 = 0;
  }
  v440 = (CMMsl::OdometerWithAltitude *)*((void *)this + 265);
  if (v440) {
    unint64_t v892 = CMMsl::OdometerWithAltitude::hash_value(v440);
  }
  else {
    unint64_t v892 = 0;
  }
  uint64_t v441 = *((void *)this + 321);
  if (v441)
  {
    uint64_t v442 = *(void *)(v441 + 8);
    if ((*(unsigned char *)(v441 + 20) & 1) == 0) {
      uint64_t v442 = 0;
    }
    float v443 = *(float *)(v441 + 16);
    BOOL v444 = v443 == 0.0 || (*(unsigned char *)(v441 + 20) & 2) == 0;
    uint64_t v445 = LODWORD(v443);
    if (v444) {
      uint64_t v445 = 0;
    }
    uint64_t v891 = v445 ^ v442;
  }
  else
  {
    uint64_t v891 = 0;
  }
  v446 = (CMMsl::InEarTransition *)*((void *)this + 175);
  if (v446) {
    uint64_t v890 = CMMsl::InEarTransition::hash_value(v446);
  }
  else {
    uint64_t v890 = 0;
  }
  v447 = (CMMsl::ClefCalibration *)*((void *)this + 78);
  if (v447) {
    uint64_t v889 = CMMsl::ClefCalibration::hash_value(v447);
  }
  else {
    uint64_t v889 = 0;
  }
  v448 = (CMMsl::AirpodEvent *)*((void *)this + 36);
  if (v448) {
    uint64_t v888 = CMMsl::AirpodEvent::hash_value(v448);
  }
  else {
    uint64_t v888 = 0;
  }
  v449 = (CMMsl::InEarOptical *)*((void *)this + 173);
  if (v449) {
    uint64_t v887 = CMMsl::InEarOptical::hash_value(v449);
  }
  else {
    uint64_t v887 = 0;
  }
  v450 = (CMMsl::InEarConstraints *)*((void *)this + 171);
  if (v450) {
    uint64_t v886 = CMMsl::InEarConstraints::hash_value(v450);
  }
  else {
    uint64_t v886 = 0;
  }
  v451 = (CMMsl::InEarOpenLid *)*((void *)this + 172);
  if (v451) {
    uint64_t v885 = CMMsl::InEarOpenLid::hash_value(v451);
  }
  else {
    uint64_t v885 = 0;
  }
  v452 = (CMMsl::InEarBaselining *)*((void *)this + 170);
  if (v452) {
    uint64_t v884 = CMMsl::InEarBaselining::hash_value(v452);
  }
  else {
    uint64_t v884 = 0;
  }
  v453 = (CMMsl::AccessoryConfig *)*((void *)this + 15);
  if (v453) {
    unint64_t v883 = CMMsl::AccessoryConfig::hash_value(v453);
  }
  else {
    unint64_t v883 = 0;
  }
  v454 = (CMMsl::AccessoryAccelConfig *)*((void *)this + 12);
  if (v454) {
    unint64_t v882 = CMMsl::AccessoryAccelConfig::hash_value(v454);
  }
  else {
    unint64_t v882 = 0;
  }
  v455 = (CMMsl::AccessoryProximityConfig *)*((void *)this + 30);
  if (v455) {
    unint64_t v881 = CMMsl::AccessoryProximityConfig::hash_value(v455);
  }
  else {
    unint64_t v881 = 0;
  }
  v456 = (CMMsl::TapDetect *)*((void *)this + 390);
  if (v456) {
    uint64_t v880 = CMMsl::TapDetect::hash_value(v456);
  }
  else {
    uint64_t v880 = 0;
  }
  v457 = (CMMsl::TapAccept *)*((void *)this + 389);
  if (v457) {
    uint64_t v879 = CMMsl::TapAccept::hash_value(v457);
  }
  else {
    uint64_t v879 = 0;
  }
  v458 = (CMMsl::DoubleTap *)*((void *)this + 105);
  if (v458) {
    uint64_t v878 = CMMsl::DoubleTap::hash_value(v458);
  }
  else {
    uint64_t v878 = 0;
  }
  v459 = (CMMsl::AccessoryWakeDebug *)*((void *)this + 35);
  if (v459) {
    uint64_t v877 = CMMsl::AccessoryWakeDebug::hash_value(v459);
  }
  else {
    uint64_t v877 = 0;
  }
  v460 = (CMMsl::GeomagneticData *)*((void *)this + 138);
  if (v460) {
    uint64_t v876 = CMMsl::GeomagneticData::hash_value(v460);
  }
  else {
    uint64_t v876 = 0;
  }
  v461 = (CMMsl::RelativeDeviceMotionInternal *)*((void *)this + 336);
  if (v461) {
    uint64_t v875 = CMMsl::RelativeDeviceMotionInternal::hash_value(v461);
  }
  else {
    uint64_t v875 = 0;
  }
  unint64_t v462 = sub_10015BF54((uint64_t)&v1151, (uint64_t *)this + 338);
  v463 = (CMMsl::RelativeGravityConstraints *)*((void *)this + 337);
  unint64_t v1136 = v462;
  if (v463) {
    uint64_t v874 = CMMsl::RelativeGravityConstraints::hash_value(v463);
  }
  else {
    uint64_t v874 = 0;
  }
  uint64_t v464 = *((void *)this + 451);
  if (v464 && (v465 = *(CMMsl::DeviceMotionCorrection **)(v464 + 8)) != 0) {
    uint64_t v873 = CMMsl::DeviceMotionCorrection::hash_value(v465);
  }
  else {
    uint64_t v873 = 0;
  }
  v466 = (CMMsl::AnchorCorrection *)*((void *)this + 41);
  if (v466) {
    unint64_t v872 = CMMsl::AnchorCorrection::hash_value(v466);
  }
  else {
    unint64_t v872 = 0;
  }
  v467 = (CMMsl::PredictedRelativeDeviceMotion *)*((void *)this + 315);
  if (v467) {
    uint64_t v871 = CMMsl::PredictedRelativeDeviceMotion::hash_value(v467);
  }
  else {
    uint64_t v871 = 0;
  }
  v468 = (CMMsl::MovementStatsSignal *)*((void *)this + 261);
  if (v468) {
    uint64_t v870 = CMMsl::MovementStatsSignal::hash_value(v468);
  }
  else {
    uint64_t v870 = 0;
  }
  v469 = (CMMsl::MovementStatsGravityProjection *)*((void *)this + 260);
  if (v469) {
    uint64_t v869 = CMMsl::MovementStatsGravityProjection::hash_value(v469);
  }
  else {
    uint64_t v869 = 0;
  }
  unint64_t v470 = sub_10015BF54((uint64_t)&v1150, (uint64_t *)this + 65);
  uint64_t v471 = *((void *)this + 20);
  if (v471 && (v472 = *(CMMsl::AccessoryConfig **)(v471 + 8)) != 0) {
    unint64_t v868 = CMMsl::AccessoryConfig::hash_value(v472);
  }
  else {
    unint64_t v868 = 0;
  }
  uint64_t v473 = *((void *)this + 21);
  if (v473 && (uint64_t v474 = *(void *)(v473 + 8)) != 0) {
    unint64_t v867 = sub_100012EE0((uint64_t)v1167, v474);
  }
  else {
    unint64_t v867 = 0;
  }
  uint64_t v475 = *((void *)this + 19);
  if (v475 && (uint64_t v476 = *(void *)(v475 + 8)) != 0) {
    unint64_t v866 = sub_100012EE0((uint64_t)v1167, v476);
  }
  else {
    unint64_t v866 = 0;
  }
  v477 = (CMMsl::GaitCycleSegment *)*((void *)this + 133);
  if (v477) {
    uint64_t v865 = CMMsl::GaitCycleSegment::hash_value(v477);
  }
  else {
    uint64_t v865 = 0;
  }
  v478 = (CMMsl::GaitCycleSegmentationState *)*((void *)this + 134);
  if (v478) {
    uint64_t v864 = CMMsl::GaitCycleSegmentationState::hash_value(v478);
  }
  else {
    uint64_t v864 = 0;
  }
  v479 = (CMMsl::CompassCalibrationAttempt *)*((void *)this + 83);
  if (v479) {
    uint64_t v863 = CMMsl::CompassCalibrationAttempt::hash_value(v479);
  }
  else {
    uint64_t v863 = 0;
  }
  uint64_t v480 = *((void *)this + 413);
  if (v480 && (v481 = *(CMMsl::DeviceMotionCorrection **)(v480 + 8)) != 0) {
    uint64_t v862 = CMMsl::DeviceMotionCorrection::hash_value(v481);
  }
  else {
    uint64_t v862 = 0;
  }
  v482 = (CMMsl::VisualLocalizationAttitudeConstraints *)*((void *)this + 412);
  if (v482) {
    uint64_t v861 = CMMsl::VisualLocalizationAttitudeConstraints::hash_value(v482);
  }
  else {
    uint64_t v861 = 0;
  }
  uint64_t v483 = *((void *)this + 25);
  if (v483 && (v484 = *(CMMsl::AccessoryConfig **)(v483 + 8)) != 0) {
    unint64_t v860 = CMMsl::AccessoryConfig::hash_value(v484);
  }
  else {
    unint64_t v860 = 0;
  }
  v485 = (CMMsl::FallDetectionReferee *)*((void *)this + 119);
  if (v485) {
    uint64_t v859 = CMMsl::FallDetectionReferee::hash_value(v485);
  }
  else {
    uint64_t v859 = 0;
  }
  v486 = (CMMsl::FallDetectionReplay *)*((void *)this + 120);
  if (v486) {
    uint64_t v858 = CMMsl::FallDetectionReplay::hash_value(v486);
  }
  else {
    uint64_t v858 = 0;
  }
  v487 = (CMMsl::FallDetectionStateMachine *)*((void *)this + 121);
  if (v487) {
    uint64_t v857 = CMMsl::FallDetectionStateMachine::hash_value(v487);
  }
  else {
    uint64_t v857 = 0;
  }
  v488 = (CMMsl::FallDetectionDetector *)*((void *)this + 117);
  if (v488) {
    uint64_t v856 = CMMsl::FallDetectionDetector::hash_value(v488);
  }
  else {
    uint64_t v856 = 0;
  }
  v489 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((void *)this + 124);
  if (v489) {
    uint64_t v855 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v489);
  }
  else {
    uint64_t v855 = 0;
  }
  v490 = (CMMsl::AccessoryDeviceMotionConfig *)*((void *)this + 17);
  if (v490) {
    unint64_t v854 = CMMsl::AccessoryDeviceMotionConfig::hash_value(v490);
  }
  else {
    unint64_t v854 = 0;
  }
  v491 = (CMMsl::RelativeDeviceMotionCorrelatedMotion *)*((void *)this + 335);
  if (v491) {
    uint64_t v853 = CMMsl::RelativeDeviceMotionCorrelatedMotion::hash_value(v491);
  }
  else {
    uint64_t v853 = 0;
  }
  v492 = (CMMsl::RelativeDeviceMotionComplexTransition *)*((void *)this + 334);
  if (v492) {
    uint64_t v852 = CMMsl::RelativeDeviceMotionComplexTransition::hash_value(v492);
  }
  else {
    uint64_t v852 = 0;
  }
  v493 = (CMMsl::DeviceMotionAlwaysOn *)*((void *)this + 94);
  if (v493) {
    unint64_t v851 = CMMsl::DeviceMotionAlwaysOn::hash_value(v493);
  }
  else {
    unint64_t v851 = 0;
  }
  uint64_t v494 = *((void *)this + 118);
  if (v494)
  {
    int v495 = *(unsigned __int8 *)(v494 + 20);
    uint64_t v496 = *(void *)(v494 + 8);
    if ((v495 & 1) == 0) {
      uint64_t v496 = 0;
    }
    uint64_t v850 = v496 ^ (*(unsigned char *)(v494 + 16) & (v495 << 30 >> 31));
  }
  else
  {
    uint64_t v850 = 0;
  }
  v497 = (CMMsl::WalkingDetectionResult *)*((void *)this + 419);
  if (v497) {
    uint64_t v849 = CMMsl::WalkingDetectionResult::hash_value(v497);
  }
  else {
    uint64_t v849 = 0;
  }
  uint64_t v498 = *((void *)this + 23);
  if (v498)
  {
    uint64_t v499 = *(int *)(v498 + 8);
    if ((*(unsigned char *)(v498 + 16) & 1) == 0) {
      uint64_t v499 = 0;
    }
    float v500 = *(float *)(v498 + 12);
    BOOL v501 = v500 == 0.0 || (*(unsigned char *)(v498 + 16) & 2) == 0;
    uint64_t v502 = LODWORD(v500);
    if (v501) {
      uint64_t v502 = 0;
    }
    uint64_t v848 = v502 ^ v499;
  }
  else
  {
    uint64_t v848 = 0;
  }
  v503 = (CMMsl::FallDetectionWristStateReplay *)*((void *)this + 122);
  if (v503) {
    uint64_t v847 = CMMsl::FallDetectionWristStateReplay::hash_value(v503);
  }
  else {
    uint64_t v847 = 0;
  }
  v504 = (CMMsl::GyroBiasEstimateError *)*((void *)this + 147);
  if (v504) {
    uint64_t v846 = CMMsl::GyroBiasEstimateError::hash_value(v504);
  }
  else {
    uint64_t v846 = 0;
  }
  v505 = (CMMsl::StepLikelihoodFeatures *)*((void *)this + 382);
  if (v505) {
    uint64_t v845 = CMMsl::StepLikelihoodFeatures::hash_value(v505);
  }
  else {
    uint64_t v845 = 0;
  }
  v506 = (CMMsl::FirstStepFeatures *)*((void *)this + 127);
  if (v506) {
    uint64_t v844 = CMMsl::FirstStepFeatures::hash_value(v506);
  }
  else {
    uint64_t v844 = 0;
  }
  v507 = (CMMsl::AccessoryStepDetectorDebug *)*((void *)this + 33);
  if (v507) {
    unint64_t v843 = CMMsl::AccessoryStepDetectorDebug::hash_value(v507);
  }
  else {
    unint64_t v843 = 0;
  }
  v508 = (CMMsl::SitStandDetectorFeatures *)*((void *)this + 358);
  if (v508) {
    uint64_t v842 = CMMsl::SitStandDetectorFeatures::hash_value(v508);
  }
  else {
    uint64_t v842 = 0;
  }
  uint64_t v509 = *((void *)this + 361);
  if (v509)
  {
    char v510 = *(unsigned char *)(v509 + 20);
    BOOL v511 = *(double *)(v509 + 8) == 0.0 || (v510 & 1) == 0;
    uint64_t v512 = *(void *)(v509 + 8);
    if (v511) {
      uint64_t v512 = 0;
    }
    uint64_t v513 = *(int *)(v509 + 16);
    if ((v510 & 2) == 0) {
      uint64_t v513 = 0;
    }
    uint64_t v841 = v513 ^ v512;
  }
  else
  {
    uint64_t v841 = 0;
  }
  v514 = (CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand *)*((void *)this + 359);
  if (v514) {
    uint64_t v840 = CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::hash_value(v514);
  }
  else {
    uint64_t v840 = 0;
  }
  v515 = (CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit *)*((void *)this + 360);
  if (v515) {
    uint64_t v839 = CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::hash_value(v515);
  }
  else {
    uint64_t v839 = 0;
  }
  uint64_t v516 = *((void *)this + 366);
  if (v516)
  {
    uint64_t v517 = *(int *)(v516 + 16);
    if ((*(unsigned char *)(v516 + 20) & 2) == 0) {
      uint64_t v517 = 0;
    }
    BOOL v518 = *(double *)(v516 + 8) == 0.0 || (*(unsigned char *)(v516 + 20) & 1) == 0;
    uint64_t v519 = *(void *)(v516 + 8);
    if (v518) {
      uint64_t v519 = 0;
    }
    uint64_t v838 = v519 ^ v517;
  }
  else
  {
    uint64_t v838 = 0;
  }
  v520 = (CMMsl::FallDistanceReplay *)*((void *)this + 123);
  if (v520) {
    uint64_t v837 = CMMsl::FallDistanceReplay::hash_value(v520);
  }
  else {
    uint64_t v837 = 0;
  }
  v521 = (CMMsl::JitterBufferLevel *)*((void *)this + 182);
  if (v521) {
    uint64_t v836 = CMMsl::JitterBufferLevel::hash_value(v521);
  }
  else {
    uint64_t v836 = 0;
  }
  v522 = (CMMsl::PressureFiltered1HzLowPass *)*((void *)this + 320);
  if (v522) {
    uint64_t v835 = CMMsl::PressureFiltered1HzLowPass::hash_value(v522);
  }
  else {
    uint64_t v835 = 0;
  }
  v523 = (CMMsl::MotionActivityReplay *)*((void *)this + 249);
  if (v523) {
    uint64_t v834 = CMMsl::MotionActivityReplay::hash_value(v523);
  }
  else {
    uint64_t v834 = 0;
  }
  v524 = (CMMsl::FallDetectionActivityClassifierReplay *)*((void *)this + 116);
  if (v524) {
    uint64_t v833 = CMMsl::FallDetectionActivityClassifierReplay::hash_value(v524);
  }
  else {
    uint64_t v833 = 0;
  }
  v525 = (CMMsl::LegacyALS5CHInput *)*((void *)this + 228);
  if (v525) {
    uint64_t v832 = CMMsl::LegacyALS5CHInput::hash_value(v525);
  }
  else {
    uint64_t v832 = 0;
  }
  uint64_t v526 = *((void *)this + 102);
  if (v526)
  {
    char v527 = *(unsigned char *)(v526 + 20);
    BOOL v528 = *(double *)(v526 + 8) == 0.0 || (v527 & 1) == 0;
    uint64_t v529 = *(void *)(v526 + 8);
    if (v528) {
      uint64_t v529 = 0;
    }
    uint64_t v530 = *(unsigned int *)(v526 + 16);
    if ((v527 & 2) == 0) {
      uint64_t v530 = 0;
    }
    uint64_t v831 = v530 ^ v529;
  }
  else
  {
    uint64_t v831 = 0;
  }
  v531 = (CMMsl::DopplerProximityEvent *)*((void *)this + 100);
  if (v531) {
    uint64_t v830 = CMMsl::DopplerProximityEvent::hash_value(v531);
  }
  else {
    uint64_t v830 = 0;
  }
  v532 = (CMMsl::DopplerRawDataInput *)*((void *)this + 101);
  if (v532) {
    uint64_t v829 = CMMsl::DopplerRawDataInput::hash_value(v532);
  }
  else {
    uint64_t v829 = 0;
  }
  v533 = (CMMsl::DopplerDebugRecord *)*((void *)this + 99);
  if (v533) {
    uint64_t v828 = CMMsl::DopplerDebugRecord::hash_value(v533);
  }
  else {
    uint64_t v828 = 0;
  }
  uint64_t v534 = *((void *)this + 268);
  if (v534)
  {
    char v535 = *(unsigned char *)(v534 + 20);
    BOOL v536 = *(double *)(v534 + 8) == 0.0 || (v535 & 1) == 0;
    uint64_t v537 = *(void *)(v534 + 8);
    if (v536) {
      uint64_t v537 = 0;
    }
    uint64_t v538 = *(unsigned int *)(v534 + 16);
    if ((v535 & 2) == 0) {
      uint64_t v538 = 0;
    }
    uint64_t v827 = v538 ^ v537;
  }
  else
  {
    uint64_t v827 = 0;
  }
  v539 = (CMMsl::KappaAudioResult *)*((void *)this + 191);
  if (v539) {
    uint64_t v826 = CMMsl::KappaAudioResult::hash_value(v539);
  }
  else {
    uint64_t v826 = 0;
  }
  v540 = (CMMsl::KappaBaroResult *)*((void *)this + 192);
  if (v540) {
    uint64_t v825 = CMMsl::KappaBaroResult::hash_value(v540);
  }
  else {
    uint64_t v825 = 0;
  }
  v541 = (CMMsl::KappaGpsResult *)*((void *)this + 195);
  if (v541) {
    uint64_t v824 = CMMsl::KappaGpsResult::hash_value(v541);
  }
  else {
    uint64_t v824 = 0;
  }
  v542 = (CMMsl::KappaPulseResult *)*((void *)this + 206);
  if (v542) {
    uint64_t v823 = CMMsl::KappaPulseResult::hash_value(v542);
  }
  else {
    uint64_t v823 = 0;
  }
  v543 = (CMMsl::KappaZgResult *)*((void *)this + 221);
  if (v543) {
    uint64_t v822 = CMMsl::KappaZgResult::hash_value(v543);
  }
  else {
    uint64_t v822 = 0;
  }
  uint64_t v544 = *((void *)this + 220);
  if (v544)
  {
    char v545 = *(unsigned char *)(v544 + 16);
    uint64_t v546 = *(void *)(v544 + 8);
    if ((v545 & 1) == 0) {
      uint64_t v546 = 0;
    }
    uint64_t v821 = v546;
  }
  else
  {
    uint64_t v821 = 0;
  }
  v547 = (CMMsl::KappaPulseInertialAccel *)*((void *)this + 204);
  if (v547) {
    uint64_t v820 = CMMsl::KappaPulseInertialAccel::hash_value(v547);
  }
  else {
    uint64_t v820 = 0;
  }
  uint64_t v548 = *((void *)this + 164);
  if (v548)
  {
    char v549 = *(unsigned char *)(v548 + 12);
    uint64_t v550 = *(int *)(v548 + 8);
    if ((v549 & 1) == 0) {
      uint64_t v550 = 0;
    }
    uint64_t v819 = v550;
  }
  else
  {
    uint64_t v819 = 0;
  }
  uint64_t v551 = *((void *)this + 163);
  if (v551)
  {
    char v552 = *(unsigned char *)(v551 + 12);
    uint64_t v553 = *(int *)(v551 + 8);
    if ((v552 & 1) == 0) {
      uint64_t v553 = 0;
    }
    uint64_t v818 = v553;
  }
  else
  {
    uint64_t v818 = 0;
  }
  v554 = (CMMsl::KappaAirbagResult *)*((void *)this + 190);
  if (v554) {
    uint64_t v817 = CMMsl::KappaAirbagResult::hash_value(v554);
  }
  else {
    uint64_t v817 = 0;
  }
  v555 = (CMMsl::KappaCrashResult *)*((void *)this + 193);
  if (v555) {
    uint64_t v816 = CMMsl::KappaCrashResult::hash_value(v555);
  }
  else {
    uint64_t v816 = 0;
  }
  v556 = (CMMsl::KappaQuiescenceResult *)*((void *)this + 207);
  if (v556) {
    uint64_t v815 = CMMsl::KappaQuiescenceResult::hash_value(v556);
  }
  else {
    uint64_t v815 = 0;
  }
  v557 = (CMMsl::KappaRecoveryResult *)*((void *)this + 208);
  if (v557) {
    uint64_t v814 = CMMsl::KappaRecoveryResult::hash_value(v557);
  }
  else {
    uint64_t v814 = 0;
  }
  v558 = (CMMsl::KappaRolloverCrashResult *)*((void *)this + 212);
  if (v558) {
    uint64_t v813 = CMMsl::KappaRolloverCrashResult::hash_value(v558);
  }
  else {
    uint64_t v813 = 0;
  }
  v559 = (CMMsl::KappaMildImpactResult *)*((void *)this + 200);
  if (v559) {
    uint64_t v812 = CMMsl::KappaMildImpactResult::hash_value(v559);
  }
  else {
    uint64_t v812 = 0;
  }
  v560 = (CMMsl::KappaLackOfMotionResult *)*((void *)this + 198);
  if (v560) {
    uint64_t v811 = CMMsl::KappaLackOfMotionResult::hash_value(v560);
  }
  else {
    uint64_t v811 = 0;
  }
  v561 = (CMMsl::KappaSevereCrashResult *)*((void *)this + 213);
  if (v561) {
    uint64_t v810 = CMMsl::KappaSevereCrashResult::hash_value(v561);
  }
  else {
    uint64_t v810 = 0;
  }
  v562 = (CMMsl::KappaLocalAudioResult *)*((void *)this + 199);
  if (v562) {
    uint64_t v809 = CMMsl::KappaLocalAudioResult::hash_value(v562);
  }
  else {
    uint64_t v809 = 0;
  }
  v563 = (CMMsl::KappaRemoteAudioResult *)*((void *)this + 209);
  if (v563) {
    uint64_t v808 = CMMsl::KappaRemoteAudioResult::hash_value(v563);
  }
  else {
    uint64_t v808 = 0;
  }
  v564 = (CMMsl::DirectionOfTravelMetrics *)*((void *)this + 96);
  if (v564) {
    uint64_t v807 = CMMsl::DirectionOfTravelMetrics::hash_value(v564);
  }
  else {
    uint64_t v807 = 0;
  }
  uint64_t v565 = *((void *)this + 403);
  if (v565)
  {
    int v566 = *(unsigned __int8 *)(v565 + 20);
    uint64_t v567 = *(void *)(v565 + 8);
    if ((v566 & 1) == 0) {
      uint64_t v567 = 0;
    }
    uint64_t v806 = v567 ^ (*(unsigned char *)(v565 + 16) & (v566 << 30 >> 31));
  }
  else
  {
    uint64_t v806 = 0;
  }
  v568 = (CMMsl::HeadToHeadsetTransformationEstimate *)*((void *)this + 162);
  if (v568) {
    uint64_t v805 = CMMsl::HeadToHeadsetTransformationEstimate::hash_value(v568);
  }
  else {
    uint64_t v805 = 0;
  }
  v569 = (CMMsl::ViewObstructedMachineLearningFeatures *)*((void *)this + 404);
  if (v569) {
    uint64_t v804 = CMMsl::ViewObstructedMachineLearningFeatures::hash_value(v569);
  }
  else {
    uint64_t v804 = 0;
  }
  v570 = (CMMsl::ViewObstructedMachineLearningProbabilities *)*((void *)this + 405);
  if (v570) {
    uint64_t v803 = CMMsl::ViewObstructedMachineLearningProbabilities::hash_value(v570);
  }
  else {
    uint64_t v803 = 0;
  }
  v571 = (CMMsl::RunningArmSwingSignals *)*((void *)this + 341);
  if (v571) {
    uint64_t v802 = CMMsl::RunningArmSwingSignals::hash_value(v571);
  }
  else {
    uint64_t v802 = 0;
  }
  v572 = (CMMsl::RunningCentripetalAccelSignals *)*((void *)this + 342);
  if (v572) {
    uint64_t v801 = CMMsl::RunningCentripetalAccelSignals::hash_value(v572);
  }
  else {
    uint64_t v801 = 0;
  }
  v573 = (CMMsl::RunningRotationAxis *)*((void *)this + 345);
  if (v573) {
    uint64_t v800 = CMMsl::RunningRotationAxis::hash_value(v573);
  }
  else {
    uint64_t v800 = 0;
  }
  v574 = (CMMsl::RunningVerticalOscillationSignals *)*((void *)this + 350);
  if (v574) {
    uint64_t v799 = CMMsl::RunningVerticalOscillationSignals::hash_value(v574);
  }
  else {
    uint64_t v799 = 0;
  }
  v575 = (CMMsl::RunningVerticalOscillation *)*((void *)this + 348);
  if (v575) {
    uint64_t v798 = CMMsl::RunningVerticalOscillation::hash_value(v575);
  }
  else {
    uint64_t v798 = 0;
  }
  v576 = (CMMsl::KappaSpinResult *)*((void *)this + 214);
  if (v576) {
    uint64_t v797 = CMMsl::KappaSpinResult::hash_value(v576);
  }
  else {
    uint64_t v797 = 0;
  }
  v577 = (CMMsl::KappaPulseDeltaV *)*((void *)this + 203);
  if (v577) {
    uint64_t v796 = CMMsl::KappaPulseDeltaV::hash_value(v577);
  }
  else {
    uint64_t v796 = 0;
  }
  v578 = (CMMsl::RunningStrideLength *)*((void *)this + 347);
  if (v578) {
    uint64_t v795 = CMMsl::RunningStrideLength::hash_value(v578);
  }
  else {
    uint64_t v795 = 0;
  }
  v579 = (CMMsl::ISPPacket *)*((void *)this + 181);
  if (v579) {
    uint64_t v794 = CMMsl::ISPPacket::hash_value(v579);
  }
  else {
    uint64_t v794 = 0;
  }
  v580 = (CMMsl::KappaHighSpeedCrashResult *)*((void *)this + 197);
  if (v580) {
    uint64_t v793 = CMMsl::KappaHighSpeedCrashResult::hash_value(v580);
  }
  else {
    uint64_t v793 = 0;
  }
  v581 = (CMMsl::KappaPulseInertialHgAccel *)*((void *)this + 205);
  if (v581) {
    uint64_t v792 = CMMsl::KappaPulseInertialHgAccel::hash_value(v581);
  }
  else {
    uint64_t v792 = 0;
  }
  v582 = (CMMsl::HarmonicMetrics *)*((void *)this + 160);
  if (v582) {
    uint64_t v791 = CMMsl::HarmonicMetrics::hash_value(v582);
  }
  else {
    uint64_t v791 = 0;
  }
  v583 = (CMMsl::CalorieControllerMETsConsumed *)*((void *)this + 74);
  if (v583) {
    uint64_t v790 = CMMsl::CalorieControllerMETsConsumed::hash_value(v583);
  }
  else {
    uint64_t v790 = 0;
  }
  v584 = (CMMsl::PedometerPathStraightness *)*((void *)this + 292);
  if (v584) {
    uint64_t v789 = CMMsl::PedometerPathStraightness::hash_value(v584);
  }
  else {
    uint64_t v789 = 0;
  }
  v585 = (CMMsl::ComplexHandMotion *)*((void *)this + 86);
  if (v585) {
    uint64_t v788 = CMMsl::ComplexHandMotion::hash_value(v585);
  }
  else {
    uint64_t v788 = 0;
  }
  v586 = (CMMsl::ElevationGradeEstimator *)*((void *)this + 107);
  if (v586) {
    uint64_t v787 = CMMsl::ElevationGradeEstimator::hash_value(v586);
  }
  else {
    uint64_t v787 = 0;
  }
  v587 = (CMMsl::VO2MaxModelInput *)*((void *)this + 400);
  if (v587) {
    uint64_t v786 = CMMsl::VO2MaxModelInput::hash_value(v587);
  }
  else {
    uint64_t v786 = 0;
  }
  v588 = (CMMsl::ProxCalibration *)*((void *)this + 326);
  if (v588) {
    uint64_t v785 = CMMsl::ProxCalibration::hash_value(v588);
  }
  else {
    uint64_t v785 = 0;
  }
  v589 = (CMMsl::KappaStepsResult *)*((void *)this + 216);
  if (v589) {
    uint64_t v784 = CMMsl::KappaStepsResult::hash_value(v589);
  }
  else {
    uint64_t v784 = 0;
  }
  v590 = (CMMsl::WakeGestureSample *)*((void *)this + 418);
  if (v590) {
    uint64_t v783 = CMMsl::WakeGestureSample::hash_value(v590);
  }
  else {
    uint64_t v783 = 0;
  }
  v591 = (CMMsl::KappaGravityAutocorrelationResult *)*((void *)this + 196);
  if (v591) {
    uint64_t v782 = CMMsl::KappaGravityAutocorrelationResult::hash_value(v591);
  }
  else {
    uint64_t v782 = 0;
  }
  v592 = (CMMsl::RunningVerticalOscillationGradientBoostedSignals *)*((void *)this + 349);
  if (v592) {
    uint64_t v781 = CMMsl::RunningVerticalOscillationGradientBoostedSignals::hash_value(v592);
  }
  else {
    uint64_t v781 = 0;
  }
  v593 = (CMMsl::SubStats *)*((void *)this + 387);
  if (v593) {
    uint64_t v780 = CMMsl::SubStats::hash_value(v593);
  }
  else {
    uint64_t v780 = 0;
  }
  v594 = (CMMsl::PedOdomFusionExtendedModeSegment *)*((void *)this + 289);
  if (v594) {
    uint64_t v779 = CMMsl::PedOdomFusionExtendedModeSegment::hash_value(v594);
  }
  else {
    uint64_t v779 = 0;
  }
  uint64_t v595 = *((void *)this + 237);
  if (v595)
  {
    char v596 = *(unsigned char *)(v595 + 20);
    uint64_t v597 = *(void *)(v595 + 8);
    if ((v596 & 1) == 0) {
      uint64_t v597 = 0;
    }
    uint64_t v598 = *(unsigned int *)(v595 + 16);
    if ((v596 & 2) == 0) {
      uint64_t v598 = 0;
    }
    uint64_t v778 = v598 ^ v597;
  }
  else
  {
    uint64_t v778 = 0;
  }
  v599 = (CMMsl::PDRPedestrianClassifierState *)*((void *)this + 283);
  if (v599) {
    uint64_t v777 = CMMsl::PDRPedestrianClassifierState::hash_value(v599);
  }
  else {
    uint64_t v777 = 0;
  }
  v600 = (CMMsl::PDRPlacementClassifierState *)*((void *)this + 284);
  if (v600) {
    uint64_t v776 = CMMsl::PDRPlacementClassifierState::hash_value(v600);
  }
  else {
    uint64_t v776 = 0;
  }
  v601 = (CMMsl::PDRSpeedEstimatorState *)*((void *)this + 285);
  if (v601) {
    uint64_t v775 = CMMsl::PDRSpeedEstimatorState::hash_value(v601);
  }
  else {
    uint64_t v775 = 0;
  }
  v602 = (CMMsl::PDRDOTEstimatorState *)*((void *)this + 270);
  if (v602) {
    uint64_t v774 = CMMsl::PDRDOTEstimatorState::hash_value(v602);
  }
  else {
    uint64_t v774 = 0;
  }
  v603 = (CMMsl::PDRVelocityEstimatorState *)*((void *)this + 287);
  if (v603) {
    uint64_t v773 = CMMsl::PDRVelocityEstimatorState::hash_value(v603);
  }
  else {
    uint64_t v773 = 0;
  }
  v604 = (CMMsl::KMVelocityEstimatorState *)*((void *)this + 227);
  if (v604) {
    uint64_t v772 = CMMsl::KMVelocityEstimatorState::hash_value(v604);
  }
  else {
    uint64_t v772 = 0;
  }
  v605 = (CMMsl::VelocityEstimatorFusionState *)*((void *)this + 401);
  if (v605) {
    uint64_t v771 = CMMsl::VelocityEstimatorFusionState::hash_value(v605);
  }
  else {
    uint64_t v771 = 0;
  }
  uint64_t v606 = *((void *)this + 279);
  if (v606)
  {
    char v607 = *(unsigned char *)(v606 + 20);
    BOOL v608 = *(double *)(v606 + 8) == 0.0 || (v607 & 1) == 0;
    uint64_t v609 = *(void *)(v606 + 8);
    if (v608) {
      uint64_t v609 = 0;
    }
    int v610 = v607 & 2;
    float v611 = *(float *)(v606 + 16);
    BOOL v612 = v611 == 0.0 || v610 == 0;
    uint64_t v613 = LODWORD(v611);
    if (v612) {
      uint64_t v613 = 0;
    }
    uint64_t v770 = v613 ^ v609;
  }
  else
  {
    uint64_t v770 = 0;
  }
  v614 = (CMMsl::PDRFenceState *)*((void *)this + 280);
  if (v614) {
    uint64_t v769 = CMMsl::PDRFenceState::hash_value(v614);
  }
  else {
    uint64_t v769 = 0;
  }
  v615 = (CMMsl::UWBRange *)*((void *)this + 399);
  if (v615) {
    uint64_t v768 = CMMsl::UWBRange::hash_value(v615);
  }
  else {
    uint64_t v768 = 0;
  }
  v616 = (CMMsl::SwingDoTCandidate *)*((void *)this + 388);
  if (v616) {
    uint64_t v767 = CMMsl::SwingDoTCandidate::hash_value(v616);
  }
  else {
    uint64_t v767 = 0;
  }
  v617 = (CMMsl::DoTEstimatorHandSwing *)*((void *)this + 103);
  if (v617) {
    unint64_t v766 = CMMsl::DoTEstimatorHandSwing::hash_value(v617);
  }
  else {
    unint64_t v766 = 0;
  }
  v618 = (CMMsl::KappaTriggerClustersResult *)*((void *)this + 218);
  if (v618) {
    uint64_t v765 = CMMsl::KappaTriggerClustersResult::hash_value(v618);
  }
  else {
    uint64_t v765 = 0;
  }
  uint64_t v619 = *((void *)this + 357);
  if (v619)
  {
    char v620 = *(unsigned char *)(v619 + 24);
    uint64_t v623 = v619 + 8;
    uint64_t v622 = *(void *)(v619 + 8);
    uint64_t v621 = *(void *)(v623 + 8);
    if (v622)
    {
      char v624 = *(unsigned char *)(v622 + 12);
      uint64_t v622 = *(unsigned int *)(v622 + 8);
      if ((v624 & 1) == 0) {
        uint64_t v622 = 0;
      }
    }
    if ((v620 & 1) == 0) {
      uint64_t v621 = 0;
    }
    uint64_t v764 = v622 ^ v621;
  }
  else
  {
    uint64_t v764 = 0;
  }
  v625 = (CMMsl::PDRFeatures *)*((void *)this + 278);
  if (v625) {
    uint64_t v763 = CMMsl::PDRFeatures::hash_value(v625);
  }
  else {
    uint64_t v763 = 0;
  }
  v626 = (CMMsl::PDRDOTEstimatorStateBody *)*((void *)this + 272);
  if (v626) {
    uint64_t v762 = CMMsl::PDRDOTEstimatorStateBody::hash_value(v626);
  }
  else {
    uint64_t v762 = 0;
  }
  v627 = (CMMsl::PDRDOTEstimatorStateArmSwing *)*((void *)this + 271);
  if (v627) {
    uint64_t v761 = CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(v627);
  }
  else {
    uint64_t v761 = 0;
  }
  v628 = (CMMsl::PDRDOTEstimatorStateHeading *)*((void *)this + 275);
  if (v628) {
    uint64_t v760 = CMMsl::PDRDOTEstimatorStateHeading::hash_value(v628);
  }
  else {
    uint64_t v760 = 0;
  }
  v629 = (CMMsl::AccessoryActivityAlseepConfidenceEpoch *)*((void *)this + 13);
  if (v629) {
    uint64_t v759 = CMMsl::AccessoryActivityAlseepConfidenceEpoch::hash_value(v629);
  }
  else {
    uint64_t v759 = 0;
  }
  v630 = (CMMsl::PDRSpeedEstimatorStateDebug *)*((void *)this + 286);
  if (v630) {
    uint64_t v758 = CMMsl::PDRSpeedEstimatorStateDebug::hash_value(v630);
  }
  else {
    uint64_t v758 = 0;
  }
  uint64_t v631 = *((void *)this + 309);
  if (v631)
  {
    char v632 = *(unsigned char *)(v631 + 24);
    double v633 = *(double *)(v631 + 8);
    BOOL v634 = *(double *)(v631 + 16) == 0.0 || (v632 & 2) == 0;
    uint64_t v635 = *(void *)(v631 + 16);
    if (v634) {
      uint64_t v635 = 0;
    }
    int v636 = v632 & 1;
    BOOL v637 = v633 == 0.0 || v636 == 0;
    double v638 = v633;
    if (v637) {
      double v638 = 0.0;
    }
    uint64_t v757 = *(void *)&v638 ^ v635;
  }
  else
  {
    uint64_t v757 = 0;
  }
  v639 = (CMMsl::PrecisionFindingState *)*((void *)this + 312);
  if (v639) {
    uint64_t v756 = CMMsl::PrecisionFindingState::hash_value(v639);
  }
  else {
    uint64_t v756 = 0;
  }
  v640 = (CMMsl::KappaRoadsResult *)*((void *)this + 211);
  if (v640) {
    uint64_t v755 = CMMsl::KappaRoadsResult::hash_value(v640);
  }
  else {
    uint64_t v755 = 0;
  }
  v641 = (CMMsl::PrecisionFindingVelocityEstimate *)*((void *)this + 313);
  if (v641) {
    uint64_t v754 = CMMsl::PrecisionFindingVelocityEstimate::hash_value(v641);
  }
  else {
    uint64_t v754 = 0;
  }
  v642 = (CMMsl::PrecisionFindingRangeFilter *)*((void *)this + 310);
  if (v642) {
    uint64_t v753 = CMMsl::PrecisionFindingRangeFilter::hash_value(v642);
  }
  else {
    uint64_t v753 = 0;
  }
  v643 = (CMMsl::PDRDOTMeasurementSelectorState *)*((void *)this + 277);
  if (v643) {
    uint64_t v752 = CMMsl::PDRDOTMeasurementSelectorState::hash_value(v643);
  }
  else {
    uint64_t v752 = 0;
  }
  uint64_t v644 = *((void *)this + 72);
  if (v644)
  {
    char v645 = *(unsigned char *)(v644 + 20);
    uint64_t v646 = *(void *)(v644 + 8);
    if ((v645 & 1) == 0) {
      uint64_t v646 = 0;
    }
    uint64_t v647 = *(unsigned int *)(v644 + 16);
    if ((v645 & 2) == 0) {
      uint64_t v647 = 0;
    }
    uint64_t v751 = v647 ^ v646;
  }
  else
  {
    uint64_t v751 = 0;
  }
  v648 = (CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)*((void *)this + 276);
  if (v648) {
    uint64_t v750 = CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(v648);
  }
  else {
    uint64_t v750 = 0;
  }
  uint64_t v649 = *((void *)this + 293);
  if (v649)
  {
    char v650 = *(unsigned char *)(v649 + 20);
    BOOL v651 = *(double *)(v649 + 8) == 0.0 || (v650 & 1) == 0;
    uint64_t v652 = *(void *)(v649 + 8);
    if (v651) {
      uint64_t v652 = 0;
    }
    uint64_t v653 = *(unsigned int *)(v649 + 16);
    if ((v650 & 2) == 0) {
      uint64_t v653 = 0;
    }
    uint64_t v749 = v653 ^ v652;
  }
  else
  {
    uint64_t v749 = 0;
  }
  v654 = (CMMsl::MagnetometerCalibratorFilterParameters *)*((void *)this + 241);
  if (v654) {
    uint64_t v748 = CMMsl::MagnetometerCalibratorFilterParameters::hash_value(v654);
  }
  else {
    uint64_t v748 = 0;
  }
  v655 = (CMMsl::KappaActivityPhone *)*((void *)this + 188);
  if (v655) {
    uint64_t v747 = CMMsl::KappaActivityPhone::hash_value(v655);
  }
  else {
    uint64_t v747 = 0;
  }
  v656 = (CMMsl::KappaActivityWatch *)*((void *)this + 189);
  if (v656) {
    uint64_t v746 = CMMsl::KappaActivityWatch::hash_value(v656);
  }
  else {
    uint64_t v746 = 0;
  }
  uint64_t v657 = *((void *)this + 311);
  if (v657)
  {
    int v658 = *(unsigned __int8 *)(v657 + 20);
    BOOL v659 = *(double *)(v657 + 8) == 0.0 || (v658 & 1) == 0;
    uint64_t v660 = *(void *)(v657 + 8);
    if (v659) {
      uint64_t v660 = 0;
    }
    uint64_t v745 = v660 ^ (*(unsigned char *)(v657 + 16) & (v658 << 30 >> 31));
  }
  else
  {
    uint64_t v745 = 0;
  }
  v661 = (CMMsl::PDRDOTEstimatorStateDebug *)*((void *)this + 274);
  if (v661) {
    uint64_t v744 = CMMsl::PDRDOTEstimatorStateDebug::hash_value(v661);
  }
  else {
    uint64_t v744 = 0;
  }
  v662 = (CMMsl::PDRDOTEstimatorStateBodyDebug *)*((void *)this + 273);
  if (v662) {
    uint64_t v743 = CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(v662);
  }
  else {
    uint64_t v743 = 0;
  }
  v663 = (CMMsl::KappaPeakDetectorMapResult *)*((void *)this + 202);
  if (v663) {
    uint64_t v742 = CMMsl::KappaPeakDetectorMapResult::hash_value(v663);
  }
  else {
    uint64_t v742 = 0;
  }
  v664 = (CMMsl::KappaPeakDetectorMapMagTimestamps *)*((void *)this + 201);
  if (v664) {
    uint64_t v741 = CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(v664);
  }
  else {
    uint64_t v741 = 0;
  }
  v665 = (CMMsl::PrecisionFindingVerticalState *)*((void *)this + 314);
  if (v665) {
    uint64_t v740 = CMMsl::PrecisionFindingVerticalState::hash_value(v665);
  }
  else {
    uint64_t v740 = 0;
  }
  v666 = (CMMsl::Altimeter *)*((void *)this + 39);
  if (v666) {
    uint64_t v739 = CMMsl::Altimeter::hash_value(v666);
  }
  else {
    uint64_t v739 = 0;
  }
  v667 = (CMMsl::FaceDownDetection *)*((void *)this + 113);
  if (v667) {
    uint64_t v738 = CMMsl::FaceDownDetection::hash_value(v667);
  }
  else {
    uint64_t v738 = 0;
  }
  v668 = (CMMsl::PencilFusionDMYawAlignmentUpdate *)*((void *)this + 295);
  if (v668) {
    uint64_t v737 = CMMsl::PencilFusionDMYawAlignmentUpdate::hash_value(v668);
  }
  else {
    uint64_t v737 = 0;
  }
  v669 = (CMMsl::PencilFusionRingSensorTrustModelUpdate *)*((void *)this + 298);
  if (v669) {
    uint64_t v736 = CMMsl::PencilFusionRingSensorTrustModelUpdate::hash_value(v669);
  }
  else {
    uint64_t v736 = 0;
  }
  v670 = (CMMsl::AccessorySleepStateUpdate *)*((void *)this + 32);
  if (v670) {
    uint64_t v735 = CMMsl::AccessorySleepStateUpdate::hash_value(v670);
  }
  else {
    uint64_t v735 = 0;
  }
  v671 = (CMMsl::AccessorySleepStateConfidenceEpoch *)*((void *)this + 31);
  if (v671) {
    uint64_t v734 = CMMsl::AccessorySleepStateConfidenceEpoch::hash_value(v671);
  }
  else {
    uint64_t v734 = 0;
  }
  uint64_t v672 = sub_10015C418((uint64_t)v1167, (uint64_t *)this + 352);
  uint64_t v673 = *((void *)this + 351);
  uint64_t v1135 = v672;
  if (v673)
  {
    char v674 = *(unsigned char *)(v673 + 20);
    uint64_t v675 = *(void *)(v673 + 8);
    if ((v674 & 1) == 0) {
      uint64_t v675 = 0;
    }
    uint64_t v676 = *(int *)(v673 + 16);
    if ((v674 & 2) == 0) {
      uint64_t v676 = 0;
    }
    uint64_t v733 = v676 ^ v675;
  }
  else
  {
    uint64_t v733 = 0;
  }
  v677 = (CMMsl::PTSConsumedGNSS *)*((void *)this + 328);
  if (v677) {
    unint64_t v732 = CMMsl::PTSConsumedGNSS::hash_value(v677);
  }
  else {
    unint64_t v732 = 0;
  }
  v678 = (CMMsl::PTSForwardPropagation *)*((void *)this + 329);
  if (v678) {
    uint64_t v731 = CMMsl::PTSForwardPropagation::hash_value(v678);
  }
  else {
    uint64_t v731 = 0;
  }
  uint64_t v679 = *((void *)this + 331);
  if (v679 && (v680 = *(CMMsl::PTSForwardPropagation **)(v679 + 8)) != 0) {
    uint64_t v730 = CMMsl::PTSForwardPropagation::hash_value(v680);
  }
  else {
    uint64_t v730 = 0;
  }
  v681 = (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)*((void *)this + 161);
  if (v681) {
    uint64_t v729 = CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(v681);
  }
  else {
    uint64_t v729 = 0;
  }
  uint64_t v682 = *((void *)this + 330);
  if (v682 && (v683 = *(CMMsl::PTSForwardPropagation **)(v682 + 8)) != 0) {
    uint64_t v728 = CMMsl::PTSForwardPropagation::hash_value(v683);
  }
  else {
    uint64_t v728 = 0;
  }
  v684 = (CMMsl::AnchorMotionCorrespondence *)*((void *)this + 42);
  if (v684) {
    uint64_t v727 = CMMsl::AnchorMotionCorrespondence::hash_value(v684);
  }
  else {
    uint64_t v727 = 0;
  }
  uint64_t v685 = *((void *)this + 185);
  if (v685)
  {
    char v686 = *(unsigned char *)(v685 + 20);
    uint64_t v687 = *(void *)(v685 + 8);
    if ((v686 & 1) == 0) {
      uint64_t v687 = 0;
    }
    uint64_t v688 = *(unsigned int *)(v685 + 16);
    if ((v686 & 2) == 0) {
      uint64_t v688 = 0;
    }
    uint64_t v726 = v688 ^ v687;
  }
  else
  {
    uint64_t v726 = 0;
  }
  v689 = (CMMsl::KData2 *)*((void *)this + 186);
  if (v689) {
    uint64_t v690 = CMMsl::KData2::hash_value(v689);
  }
  else {
    uint64_t v690 = 0;
  }
  v691 = (CMMsl::KData3 *)*((void *)this + 187);
  if (v691) {
    uint64_t v692 = CMMsl::KData3::hash_value(v691);
  }
  else {
    uint64_t v692 = 0;
  }
  v693 = (CMMsl::SafetyRemoteSample *)*((void *)this + 353);
  if (v693) {
    uint64_t v694 = CMMsl::SafetyRemoteSample::hash_value(v693);
  }
  else {
    uint64_t v694 = 0;
  }
  v695 = (CMMsl::SafetyTrustedAudioResult *)*((void *)this + 354);
  if (v695) {
    uint64_t v696 = CMMsl::SafetyTrustedAudioResult::hash_value(v695);
  }
  else {
    uint64_t v696 = 0;
  }
  uint64_t v697 = *((void *)this + 368);
  if (v697 && (v698 = *(CMMsl::DeviceMotion **)(v697 + 8)) != 0) {
    uint64_t v699 = CMMsl::DeviceMotion::hash_value(v698);
  }
  else {
    uint64_t v699 = 0;
  }
  uint64_t v700 = *((void *)this + 369);
  if (v700 && (v701 = *(CMMsl::MotionStateUpdate **)(v700 + 8)) != 0) {
    unint64_t v702 = CMMsl::MotionStateUpdate::hash_value(v701);
  }
  else {
    unint64_t v702 = 0;
  }
  uint64_t v703 = *((void *)this + 179);
  if (v703)
  {
    unint64_t v704 = *(void *)(v703 + 8);
    if (v704) {
      unint64_t v704 = CMMsl::AccessoryAccel::hash_value((CMMsl::AccessoryAccel *)v704);
    }
  }
  else
  {
    unint64_t v704 = 0;
  }
  unint64_t v705 = v1149 ^ *(void *)&v1134 ^ v718 ^ v1148 ^ v717 ^ v725 ^ v716 ^ v724 ^ v715 ^ v714 ^ v713 ^ v712 ^ v711 ^ v710 ^ v723 ^ v722 ^ v721 ^ v720 ^ v719 ^ v1133 ^ v1132 ^ v1131 ^ v1147 ^ v1130 ^ v42 ^ v1146 ^ v1129 ^ v1128 ^ v1127 ^ v1126 ^ v1125 ^ v1124 ^ v1123 ^ v1145 ^ v1122 ^ v1121 ^ v1120 ^ v1119 ^ v1118 ^ v1117 ^ v1116 ^ v1115 ^ v1114 ^ v1144 ^ v1113 ^ v1112 ^ v1111 ^ v1110 ^ v1109 ^ v1108 ^ v1107 ^ v1106 ^ v1105 ^ v1104 ^ v1103 ^ v1102 ^ v1101 ^ v1100 ^ v1099 ^ v1098 ^ v1097 ^ v1096 ^ v1095 ^ v1094 ^ v1093 ^ v1092 ^ v1091 ^ v1090 ^ v1089 ^ v1088 ^ v1087 ^ v1086 ^ v1085 ^ v1084 ^ v1083 ^ v1082 ^ v1081 ^ v1080 ^ v1079 ^ v1078 ^ v1077 ^ v1076 ^ v1075 ^ v1074 ^ v1073 ^ v1072 ^ v1071 ^ v1070 ^ v141 ^ v1143 ^ v1069 ^ v1068 ^ v1067 ^ v1066 ^ v1065 ^ v1064 ^ v1063;
  unint64_t v706 = v705 ^ v1062 ^ v1061 ^ v1060 ^ v1059 ^ v1058 ^ v1057 ^ v1056 ^ v1055 ^ v1054 ^ v1053 ^ v1052 ^ v1051 ^ v1050 ^ v1049 ^ v1048 ^ v1047 ^ v1046 ^ v1045 ^ v1044 ^ v1043 ^ v1042 ^ v1041 ^ v1040 ^ v1039 ^ v1038 ^ v1037 ^ v1036 ^ v1035 ^ v1034 ^ v1033 ^ v1032 ^ v1031 ^ v1030 ^ v1029 ^ v1028 ^ v1142 ^ v1027 ^ v1026 ^ v1025 ^ v1024 ^ v1023 ^ v1022 ^ v1021 ^ v1020 ^ v1019 ^ v1018 ^ v1017 ^ v1016 ^ v1015 ^ v1141 ^ v1014 ^ v1013 ^ v1012 ^ v1011 ^ v1010 ^ v1009 ^ v1008 ^ v1007 ^ v1006 ^ v1005 ^ v1004 ^ v1003 ^ v1002 ^ v1001 ^ v1000 ^ v999 ^ v998 ^ v997 ^ v996 ^ v995 ^ v994 ^ v993 ^ v992 ^ v991 ^ v990 ^ v989 ^ v988 ^ v987 ^ v986 ^ v985 ^ v984 ^ v983 ^ v982 ^ v1140 ^ v981 ^ v980 ^ v979 ^ v978 ^ v977 ^ v976 ^ v975 ^ v974 ^ v973 ^ v972 ^ v971 ^ v970 ^ v969 ^ v968 ^ v967 ^ v966 ^ v965;
  unint64_t v707 = v706 ^ v964 ^ v963 ^ v962 ^ v961 ^ v960 ^ v959 ^ v958 ^ v957 ^ v956 ^ v955 ^ v954 ^ v953 ^ v952 ^ v951 ^ v950 ^ v949 ^ v948 ^ v947 ^ v946 ^ v1139 ^ v945 ^ v1138 ^ v944 ^ v1137 ^ v943 ^ v942 ^ v941 ^ v940 ^ v939 ^ v938 ^ v937 ^ v936 ^ v935 ^ v934 ^ v933 ^ v932 ^ v931 ^ v930 ^ v929 ^ v928 ^ v927 ^ v926 ^ v925 ^ v924 ^ v923 ^ v922 ^ v921 ^ v920 ^ v919 ^ v918 ^ v917 ^ v916 ^ v915 ^ v914 ^ v913 ^ v912 ^ v911 ^ v910 ^ v909 ^ v908 ^ v907 ^ v906 ^ v905 ^ v904 ^ v903 ^ v902 ^ v901 ^ v900 ^ v899 ^ v898 ^ v897 ^ v896 ^ v895 ^ v894 ^ v893 ^ v892 ^ v891 ^ v890 ^ v889 ^ v888 ^ v887 ^ v886 ^ v885 ^ v884 ^ v883 ^ v882 ^ v881 ^ v880 ^ v879 ^ v878 ^ v877 ^ v876 ^ v875 ^ v1136 ^ v874 ^ v873 ^ v872 ^ v871 ^ v870 ^ v869 ^ v470 ^ v868 ^ v867 ^ v866 ^ v865 ^ v864 ^ v863 ^ v862 ^ v861 ^ v860 ^ v859 ^ v858 ^ v857;
  unint64_t v708 = v707 ^ v856 ^ v855 ^ v854 ^ v853 ^ v852 ^ v851 ^ v850 ^ v849 ^ v848 ^ v847 ^ v846 ^ v845 ^ v844 ^ v843 ^ v842 ^ v841 ^ v840 ^ v839 ^ v838 ^ v837 ^ v836 ^ v835 ^ v834 ^ v833 ^ v832 ^ v831 ^ v830 ^ v829 ^ v828 ^ v827 ^ v826 ^ v825 ^ v824 ^ v823 ^ v822 ^ v821 ^ v820 ^ v819 ^ v818 ^ v817 ^ v816 ^ v815 ^ v814 ^ v813 ^ v812 ^ v811 ^ v810 ^ v809 ^ v808 ^ v807 ^ v806 ^ v805 ^ v804 ^ v803 ^ v802 ^ v801 ^ v800 ^ v799 ^ v798 ^ v797 ^ v796 ^ v795 ^ v794 ^ v793 ^ v792 ^ v791 ^ v790 ^ v789 ^ v788 ^ v787 ^ v786 ^ v785 ^ v784 ^ v783 ^ v782 ^ v781 ^ v780 ^ v779 ^ v778 ^ v777 ^ v776 ^ v775 ^ v774 ^ v773 ^ v772 ^ v771 ^ v770 ^ v769 ^ v768 ^ v767 ^ v766 ^ v765 ^ v764 ^ v763 ^ v762 ^ v761 ^ v760 ^ v759 ^ v758 ^ v757 ^ v756 ^ v755 ^ v754 ^ v753 ^ v752 ^ v751 ^ v750 ^ v749 ^ v748 ^ v747;
  return v708 ^ v746 ^ v745 ^ v744 ^ v743 ^ v742 ^ v741 ^ v740 ^ v739 ^ v738 ^ v737 ^ v736 ^ v735 ^ v734 ^ v1135 ^ v733 ^ v732 ^ v731 ^ v730 ^ v729 ^ v728 ^ v727 ^ v726 ^ v690 ^ v692 ^ v694 ^ v696 ^ v699 ^ v702 ^ v704;
}

unint64_t sub_10015BF08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3) {
    unint64_t v3 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v3);
  }
  if (*(unsigned char *)(v2 + 20)) {
    uint64_t v4 = *(int *)(v2 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

unint64_t sub_10015BF54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3) {
    unint64_t v3 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v3);
  }
  return v3 ^ ((*(unsigned __int8 *)(v2 + 20) << 31 >> 31) & *(unsigned char *)(v2 + 16));
}

uint64_t sub_10015BFA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(CMMsl::DeviceMotion ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::DeviceMotion ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v3++;
    v5 ^= CMMsl::DeviceMotion::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C000(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(CMMsl::VO2MaxInput ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::VO2MaxInput ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v3++;
    v5 ^= CMMsl::VO2MaxInput::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C05C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(CMMsl::Accel ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::Accel ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v3++;
    v5 ^= CMMsl::Accel::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C0B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(CMMsl::WifiScanEntry ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::WifiScanEntry ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v3++;
    v5 ^= CMMsl::WifiScanEntry::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C114(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = sub_1000719FC((uint64_t)&v6, (uint64_t **)(v2 + 8));
  if (*(unsigned char *)(v2 + 36)) {
    uint64_t v4 = *(unsigned int *)(v2 + 32);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

uint64_t sub_10015C168(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::GyroCalibrationSampleNonlinear ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    char v6 = *v3++;
    v5 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C1C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = *(CMMsl::GyroCalibrationSample ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::GyroCalibrationSample ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    char v6 = *v3++;
    v5 ^= CMMsl::GyroCalibrationSample::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C220(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = *(CMMsl::SkeletonJoint ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::SkeletonJoint ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    char v6 = *v3++;
    v5 ^= CMMsl::SkeletonJoint::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C27C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = *(CMMsl::WorkoutPriorInformation ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::WorkoutPriorInformation ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    char v6 = *v3++;
    v5 ^= CMMsl::WorkoutPriorInformation::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

unint64_t sub_10015C2D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3) {
    unint64_t v3 = CMMsl::MotionGPSLocation::hash_value((CMMsl::MotionGPSLocation *)v3);
  }
  if (*(unsigned char *)(v2 + 20)) {
    uint64_t v4 = *(unsigned int *)(v2 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

uint64_t sub_10015C324(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(CMMsl::PostureJoint ***)(v2 + 8);
  uint64_t v4 = *(CMMsl::PostureJoint ***)(v2 + 16);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    char v6 = *v3++;
    v5 ^= CMMsl::PostureJoint::hash_value(v6);
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_10015C380(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a2) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v2 + 20);
  BOOL v4 = *(double *)(v2 + 8) == 0.0 || (v3 & 1) == 0;
  uint64_t v5 = *(void *)(v2 + 8);
  if (v4) {
    uint64_t v5 = 0;
  }
  return v5 ^ (*(unsigned char *)(v2 + 16) & (v3 << 30 >> 31));
}

unint64_t sub_10015C3CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3) {
    unint64_t v3 = CMMsl::Accel::hash_value((CMMsl::Accel *)v3);
  }
  if (*(unsigned char *)(v2 + 24)) {
    uint64_t v4 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  return v4 ^ v3;
}

uint64_t sub_10015C418(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  char v3 = *(unsigned char *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 1) == 0) {
    uint64_t v4 = 0;
  }
  uint64_t v7 = v2 + 16;
  uint64_t v5 = *(unsigned int *)(v2 + 16);
  uint64_t v6 = *(unsigned int *)(v7 + 4);
  if ((v3 & 4) == 0) {
    uint64_t v6 = 0;
  }
  if ((v3 & 2) == 0) {
    uint64_t v5 = 0;
  }
  return v6 ^ v4 ^ v5;
}

uint64_t CMMsl::Item::makeGyroBiasCorrection(uint64_t this)
{
  if (!*(void *)(this + 1168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasConstraints(uint64_t this)
{
  if (!*(void *)(this + 1160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGravityCorrection(uint64_t this)
{
  if (!*(void *)(this + 1136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGravityConstraints(uint64_t this)
{
  if (!*(void *)(this + 1128)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompassCorrection(uint64_t this)
{
  if (!*(void *)(this + 680)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompassConstraints(uint64_t this)
{
  if (!*(void *)(this + 672)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCourseCorrection(uint64_t this)
{
  if (!*(void *)(this + 728)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCourseConstraints(uint64_t this)
{
  if (!*(void *)(this + 720)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeIntersiloNSCodingData(uint64_t this)
{
  if (!*(void *)(this + 1440)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotionCovariance(uint64_t this)
{
  if (!*(void *)(this + 760)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryAccel(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyro(uint64_t this)
{
  if (!*(void *)(this + 144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProx(uint64_t this)
{
  if (!*(void *)(this + 216)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAccel(uint64_t this)
{
  if (!*(void *)(this + 3448)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderBodyMetrics(uint64_t this)
{
  if (!*(void *)(this + 3472)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderElevation(uint64_t this)
{
  if (!*(void *)(this + 3488)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderHeartRate(uint64_t this)
{
  if (!*(void *)(this + 3520)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderRotationRate(uint64_t this)
{
  if (!*(void *)(this + 3552)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderOdometer(uint64_t this)
{
  if (!*(void *)(this + 3536)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWorkoutEvent(uint64_t this)
{
  if (!*(void *)(this + 3584)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVo2MaxInput(uint64_t this)
{
  if (!*(void *)(this + 3320)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 544)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartNatalieData(uint64_t this)
{
  if (!*(void *)(this + 552)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartVO2MaxInput(uint64_t this)
{
  if (!*(void *)(this + 560)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartAccel(uint64_t this)
{
  if (!*(void *)(this + 536)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBraveHeartWorkoutEvent(uint64_t this)
{
  if (!*(void *)(this + 568)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderHealthKitInfo(uint64_t this)
{
  if (!*(void *)(this + 3512)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePearlAttitude(uint64_t this)
{
  if (!*(void *)(this + 2304)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRotationRate(uint64_t this)
{
  if (!*(void *)(this + 2720)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWatchOrientationSettings(uint64_t this)
{
  if (!*(void *)(this + 3568)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchOnWristState(uint64_t this)
{
  if (!*(void *)(this + 3400)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCatherineHealthKitData(uint64_t this)
{
  if (!*(void *)(this + 608)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWifiScanResults(uint64_t this)
{
  if (!*(void *)(this + 3416)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarTransitionEntry(uint64_t this)
{
  if (!*(void *)(this + 1408)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarSession(uint64_t this)
{
  if (!*(void *)(this + 1392)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarBaseline(uint64_t this)
{
  if (!*(void *)(this + 1352)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProxSensorDrop(uint64_t this)
{
  if (!*(void *)(this + 224)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProxTempComp(uint64_t this)
{
  if (!*(void *)(this + 232)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryWake(uint64_t this)
{
  if (!*(void *)(this + 272)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFacePose(uint64_t this)
{
  if (!*(void *)(this + 912)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWifiScanResults(uint64_t this)
{
  if (!*(void *)(this + 3576)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderPressure(uint64_t this)
{
  if (!*(void *)(this + 3544)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarAdditionalState(uint64_t this)
{
  if (!*(void *)(this + 1344)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 128)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVisionCompassBias(uint64_t this)
{
  if (!*(void *)(this + 3280)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeArSessionState(uint64_t this)
{
  if (!*(void *)(this + 352)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVioEstimation(uint64_t this)
{
  if (!*(void *)(this + 3256)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLslHeadingEstimation(uint64_t this)
{
  if (!*(void *)(this + 1880)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallSnippet(uint64_t this)
{
  if (!*(void *)(this + 1000)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelerometerPace(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMovementStats(uint64_t this)
{
  if (!*(void *)(this + 2072)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStepCountEntry(uint64_t this)
{
  if (!*(void *)(this + 3032)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMobilityBoutMetrics(uint64_t this)
{
  if (!*(void *)(this + 1960)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCoprocessorReplyGaitMetrics(uint64_t this)
{
  if (!*(void *)(this + 712)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVioPose(uint64_t this)
{
  if (!*(void *)(this + 3264)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSignalEnvironment(uint64_t this)
{
  if (!*(void *)(this + 2848)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVioReplayPose(uint64_t this)
{
  if (!*(void *)(this + 3272)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVisualStateMeasurement(uint64_t this)
{
  if (!*(void *)(this + 3312)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaTriggerDebug(uint64_t this)
{
  if (!*(void *)(this + 1752)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaDirectionOfTravel(uint64_t this)
{
  if (!*(void *)(this + 1552)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHgAccel(uint64_t this)
{
  if (!*(void *)(this + 1328)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaSteps(uint64_t this)
{
  if (!*(void *)(this + 1720)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeUserInteraction(uint64_t this)
{
  if (!*(void *)(this + 3176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaRoads(uint64_t this)
{
  if (!*(void *)(this + 1680)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeUserStudyEvent(uint64_t this)
{
  if (!*(void *)(this + 3184)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAuxiliaryDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 376)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTempestPoCAuxiliaryDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 3128)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAudioAccessoryDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 368)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTempestPoCListenerOrientation(uint64_t this)
{
  if (!*(void *)(this + 3136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAccel800(uint64_t this)
{
  if (!*(void *)(this + 3456)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAlsData(uint64_t this)
{
  if (!*(void *)(this + 296)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderALSData(uint64_t this)
{
  if (!*(void *)(this + 3440)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalization(uint64_t this)
{
  if (!*(void *)(this + 3288)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroFactoryCalibrationData(uint64_t this)
{
  if (!*(void *)(this + 1240)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSpl(uint64_t this)
{
  if (!*(void *)(this + 2936)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFrequencyResponse(uint64_t this)
{
  if (!*(void *)(this + 1048)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeEmergencyState(uint64_t this)
{
  if (!*(void *)(this + 872)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccel800(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionLocation(uint64_t this)
{
  if (!*(void *)(this + 2024)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionActivity(uint64_t this)
{
  if (!*(void *)(this + 1984)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPose(uint64_t this)
{
  if (!*(void *)(this + 496)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaTrigger(uint64_t this)
{
  if (!*(void *)(this + 1736)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelDMInSystemConfig(uint64_t this)
{
  if (!*(void *)(this + 2664)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeJointLinkModelPose(uint64_t this)
{
  if (!*(void *)(this + 1464)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeConstrainedIntegratorPose(uint64_t this)
{
  if (!*(void *)(this + 704)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationSample(uint64_t this)
{
  if (!*(void *)(this + 1208)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationSampleNonlinear(uint64_t this)
{
  if (!*(void *)(this + 1216)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationDataNonlinearNonFactory(uint64_t this)
{
  if (!*(void *)(this + 1200)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroCalibrationDataFactory(uint64_t this)
{
  if (!*(void *)(this + 1192)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionClassification(uint64_t this)
{
  if (!*(void *)(this + 472)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFusedBioMotionClassification(uint64_t this)
{
  if (!*(void *)(this + 1056)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeModelBasedBioMotionClassification(uint64_t this)
{
  if (!*(void *)(this + 1976)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMLBasedBioMotionClassification(uint64_t this)
{
  if (!*(void *)(this + 1888)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePose(uint64_t this)
{
  if (!*(void *)(this + 2432)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePoseState(uint64_t this)
{
  if (!*(void *)(this + 2440)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPredictedPose(uint64_t this)
{
  if (!*(void *)(this + 504)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeJointLinkModelPredictedPose(uint64_t this)
{
  if (!*(void *)(this + 1472)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeConstrainedIntegratorModelPredictedPose(uint64_t this)
{
  if (!*(void *)(this + 696)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureCompensated(uint64_t this)
{
  if (!*(void *)(this + 2544)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVo2MaxOutput(uint64_t this)
{
  if (!*(void *)(this + 3328)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagneticAccessoryType1(uint64_t this)
{
  if (!*(void *)(this + 1904)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagneticAccessoryType2(uint64_t this)
{
  if (!*(void *)(this + 1912)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureCalibration(uint64_t this)
{
  if (!*(void *)(this + 2536)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderMagnetometer(uint64_t this)
{
  if (!*(void *)(this + 3528)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderCompassCalibration(uint64_t this)
{
  if (!*(void *)(this + 3480)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRawAudio(uint64_t this)
{
  if (!*(void *)(this + 2656)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCV3DPredictedPose(uint64_t this)
{
  if (!*(void *)(this + 584)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionLinkLengthFitParameters(uint64_t this)
{
  if (!*(void *)(this + 480)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionOnlineLinkLengthUpdate(uint64_t this)
{
  if (!*(void *)(this + 488)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeOdtPose(uint64_t this)
{
  if (!*(void *)(this + 2128)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilTipForce(uint64_t this)
{
  if (!*(void *)(this + 2392)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilTouch(uint64_t this)
{
  if (!*(void *)(this + 2400)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAveragedALSData(uint64_t this)
{
  if (!*(void *)(this + 384)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTimestamp(uint64_t this)
{
  if (!*(void *)(this + 3144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAppleCV3DSLAMState(uint64_t this)
{
  if (!*(void *)(this + 344)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionAnchorPose(uint64_t this)
{
  if (!*(void *)(this + 464)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBioMotionPropagatedAnchor(uint64_t this)
{
  if (!*(void *)(this + 512)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWalkingSteadinessClassification(uint64_t this)
{
  if (!*(void *)(this + 3360)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelResult(uint64_t this)
{
  if (!*(void *)(this + 3000)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessEvent(uint64_t this)
{
  if (!*(void *)(this + 2960)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelGaitBaselineFeatures(uint64_t this)
{
  if (!*(void *)(this + 2984)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelContinuousWalkingFeatures(uint64_t this)
{
  if (!*(void *)(this + 2976)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelTemporalDispersionFeatures(uint64_t this)
{
  if (!*(void *)(this + 3008)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelTemporalEntropyFeatures(uint64_t this)
{
  if (!*(void *)(this + 3016)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelBalanceFeatures(uint64_t this)
{
  if (!*(void *)(this + 2968)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagnetometerReset(uint64_t this)
{
  if (!*(void *)(this + 1936)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWatchOnWristStatus(uint64_t this)
{
  if (!*(void *)(this + 3560)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeOnHeadStatus(uint64_t this)
{
  if (!*(void *)(this + 1840)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryMagnetometer(uint64_t this)
{
  if (!*(void *)(this + 192)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStepCountEntryAddition(uint64_t this)
{
  if (!*(void *)(this + 3040)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStepDistanceFusionResult(uint64_t this)
{
  if (!*(void *)(this + 3048)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3D(uint64_t this)
{
  if (!*(void *)(this + 2904)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCvWatchCalories(uint64_t this)
{
  if (!*(void *)(this + 736)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFaceBlendShapeCoefficientsSample(uint64_t this)
{
  if (!*(void *)(this + 888)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBatteryStatus(uint64_t this)
{
  if (!*(void *)(this + 456)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLockScreenStatus(uint64_t this)
{
  if (!*(void *)(this + 1872)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBatterySaverModeStatus(uint64_t this)
{
  if (!*(void *)(this + 448)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePowerManagementUserActivity(uint64_t this)
{
  if (!*(void *)(this + 2464)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFocusModes(uint64_t this)
{
  if (!*(void *)(this + 1040)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDisplayStatus(uint64_t this)
{
  if (!*(void *)(this + 784)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAPSleep(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAPWake(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAltimeterKF(uint64_t this)
{
  if (!*(void *)(this + 320)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeState(uint64_t this)
{
  if (!*(void *)(this + 1848)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedState(uint64_t this)
{
  if (!*(void *)(this + 3248)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningFormMetrics(uint64_t this)
{
  if (!*(void *)(this + 2744)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutSessionPriors(uint64_t this)
{
  if (!*(void *)(this + 3600)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderWorkoutSessionPriors(uint64_t this)
{
  if (!*(void *)(this + 3592)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeArkitWorldPose(uint64_t this)
{
  if (!*(void *)(this + 360)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrImpulse(uint64_t this)
{
  if (!*(void *)(this + 2248)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePocketDetectionPacket(uint64_t this)
{
  if (!*(void *)(this + 2424)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeFeaturesNeo(uint64_t this)
{
  if (!*(void *)(this + 1832)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLiftToWakeStatusNeo(uint64_t this)
{
  if (!*(void *)(this + 1856)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningPower(uint64_t this)
{
  if (!*(void *)(this + 2752)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBasebandCompassCoex(uint64_t this)
{
  if (!*(void *)(this + 408)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBasebandCompassCoexConstraints(uint64_t this)
{
  if (!*(void *)(this + 416)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionContextActivity(uint64_t this)
{
  if (!*(void *)(this + 2000)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrAlgType(uint64_t this)
{
  if (!*(void *)(this + 2152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelTNBFrame(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDotEstimatorWithTNB(uint64_t this)
{
  if (!*(void *)(this + 832)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrMLModelOutput(uint64_t this)
{
  if (!*(void *)(this + 2256)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsModelOutput(uint64_t this)
{
  if (!*(void *)(this + 1088)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsStrideAggregation(uint64_t this)
{
  if (!*(void *)(this + 1096)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGaitEventsHKResult(uint64_t this)
{
  if (!*(void *)(this + 1080)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFaceCovered(uint64_t this)
{
  if (!*(void *)(this + 896)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderAveragedALSData(uint64_t this)
{
  if (!*(void *)(this + 3464)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStrideCalEntry(uint64_t this)
{
  if (!*(void *)(this + 3088)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningSpeedKFResult(uint64_t this)
{
  if (!*(void *)(this + 2768)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeProxPDP(uint64_t this)
{
  if (!*(void *)(this + 2616)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionFeatures(uint64_t this)
{
  if (!*(void *)(this + 1792)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionState(uint64_t this)
{
  if (!*(void *)(this + 1800)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAlsPhone(uint64_t this)
{
  if (!*(void *)(this + 304)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKeyboardKeyPress(uint64_t this)
{
  if (!*(void *)(this + 1784)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWakeGestureNotification(uint64_t this)
{
  if (!*(void *)(this + 3336)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeProxBaselineEstimatorState(uint64_t this)
{
  if (!*(void *)(this + 2600)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBaselineResetCheck(uint64_t this)
{
  if (!*(void *)(this + 432)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRhythmicGnssOperatorStatus(uint64_t this)
{
  if (!*(void *)(this + 2712)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKeyboardMotionTrackpad(uint64_t this)
{
  if (!*(void *)(this + 1808)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKeyboardAttached(uint64_t this)
{
  if (!*(void *)(this + 1776)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBacklightState(uint64_t this)
{
  if (!*(void *)(this + 400)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBatchedLocationFromOdometer(uint64_t this)
{
  if (!*(void *)(this + 440)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHeartRateReference(uint64_t this)
{
  if (!*(void *)(this + 1320)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSkeleton2D(uint64_t this)
{
  if (!*(void *)(this + 2896)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3DRetargeted(uint64_t this)
{
  if (!*(void *)(this + 2920)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSkeleton3DLifted(uint64_t this)
{
  if (!*(void *)(this + 2912)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFitnessMachineSample(uint64_t this)
{
  if (!*(void *)(this + 1032)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchHeartRateData(uint64_t this)
{
  if (!*(void *)(this + 3392)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFacePoseSynchronized(uint64_t this)
{
  if (!*(void *)(this + 920)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchActiveCalories(uint64_t this)
{
  if (!*(void *)(this + 3368)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchBasalCalories(uint64_t this)
{
  if (!*(void *)(this + 3376)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTrackRunData(uint64_t this)
{
  if (!*(void *)(this + 3160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGnssAvailabilityPredictorData(uint64_t this)
{
  if (!*(void *)(this + 1112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGnssLeechLocationData(uint64_t this)
{
  if (!*(void *)(this + 1120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMapsRouteHintData(uint64_t this)
{
  if (!*(void *)(this + 1944)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFitnessMachineData(uint64_t this)
{
  if (!*(void *)(this + 1024)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderFitnessMachineData(uint64_t this)
{
  if (!*(void *)(this + 3504)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryActivityStateUpdate(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePedestrianFenceExit(uint64_t this)
{
  if (!*(void *)(this + 2328)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInertialOdometry(uint64_t this)
{
  if (!*(void *)(this + 1416)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePhysicalEffortInput(uint64_t this)
{
  if (!*(void *)(this + 2408)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePhysicalEffortSample(uint64_t this)
{
  if (!*(void *)(this + 2416)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePedestrianCalorieModelDebugging(uint64_t this)
{
  if (!*(void *)(this + 2320)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeElevationThreshold(uint64_t this)
{
  if (!*(void *)(this + 864)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInitialHistoricalMeanSeaLevelPressure(uint64_t this)
{
  if (!*(void *)(this + 1424)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutActivity(uint64_t this)
{
  if (!*(void *)(this + 3424)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 2352)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilFusionResult(uint64_t this)
{
  if (!*(void *)(this + 2376)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHapticModuleState(uint64_t this)
{
  if (!*(void *)(this + 1272)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSteadinessModelHarmonicFeatures(uint64_t this)
{
  if (!*(void *)(this + 2992)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilFusionReplayResult(uint64_t this)
{
  if (!*(void *)(this + 2368)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMobilitySmoothedGaitMetrics(uint64_t this)
{
  if (!*(void *)(this + 1968)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchEnclosureMaterial(uint64_t this)
{
  if (!*(void *)(this + 3384)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryHeartRate(uint64_t this)
{
  if (!*(void *)(this + 176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryPPG(uint64_t this)
{
  if (!*(void *)(this + 208)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionLoiAltitudeData(uint64_t this)
{
  if (!*(void *)(this + 2032)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDisplacingState(uint64_t this)
{
  if (!*(void *)(this + 776)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePostureJoint(uint64_t this)
{
  if (!*(void *)(this + 2448)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePostureSkeleton(uint64_t this)
{
  if (!*(void *)(this + 2456)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHidShower(uint64_t this)
{
  if (!*(void *)(this + 1336)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutRecorderFaceCovered(uint64_t this)
{
  if (!*(void *)(this + 3496)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStreamingHighFrequencyHeartRateData(uint64_t this)
{
  if (!*(void *)(this + 3072)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeUltraFastAccel(uint64_t this)
{
  if (!*(void *)(this + 3168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccel(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelBatch(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelOscarEmu(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelGesture(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyro(uint64_t this)
{
  if (!*(void *)(this + 1144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroOscarEmu(uint64_t this)
{
  if (!*(void *)(this + 1256)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroTemperature(uint64_t this)
{
  if (!*(void *)(this + 1264)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasAndVariance(uint64_t this)
{
  if (!*(void *)(this + 1152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasFit(uint64_t this)
{
  if (!*(void *)(this + 1184)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroDt(uint64_t this)
{
  if (!*(void *)(this + 1232)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagnetometer(uint64_t this)
{
  if (!*(void *)(this + 1920)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompass(uint64_t this)
{
  if (!*(void *)(this + 640)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompassAlignment(uint64_t this)
{
  if (!*(void *)(this + 648)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroCompass(uint64_t this)
{
  if (!*(void *)(this + 1224)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompassCalibration(uint64_t this)
{
  if (!*(void *)(this + 656)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressure(uint64_t this)
{
  if (!*(void *)(this + 2528)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureOscarEmu(uint64_t this)
{
  if (!*(void *)(this + 2584)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureFiltered(uint64_t this)
{
  if (!*(void *)(this + 2552)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeProx(uint64_t this)
{
  if (!*(void *)(this + 2592)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTouchOscarEmu(uint64_t this)
{
  if (!*(void *)(this + 3152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 744)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionStateUpdate(uint64_t this)
{
  if (!*(void *)(this + 2048)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccelGps(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroGps(uint64_t this)
{
  if (!*(void *)(this + 1248)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureGps(uint64_t this)
{
  if (!*(void *)(this + 2576)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBTConnection(uint64_t this)
{
  if (!*(void *)(this + 392)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSessionOverride(uint64_t this)
{
  if (!*(void *)(this + 2840)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLocationOscarEmu(uint64_t this)
{
  if (!*(void *)(this + 1864)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionHint(uint64_t this)
{
  if (!*(void *)(this + 2016)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeEnhancedDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 880)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeNonlinearBiasFit(uint64_t this)
{
  if (!*(void *)(this + 2104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeNatalieData(uint64_t this)
{
  if (!*(void *)(this + 2096)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBodyMetrics(uint64_t this)
{
  if (!*(void *)(this + 528)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWorkoutEvent(uint64_t this)
{
  if (!*(void *)(this + 3432)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeOnsetHeartRateData(uint64_t this)
{
  if (!*(void *)(this + 2136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStreamingHeartRateData(uint64_t this)
{
  if (!*(void *)(this + 3064)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeElevationChange(uint64_t this)
{
  if (!*(void *)(this + 848)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCoarseElevationChange(uint64_t this)
{
  if (!*(void *)(this + 632)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionGPSLocation(uint64_t this)
{
  if (!*(void *)(this + 2008)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionWifiLocation(uint64_t this)
{
  if (!*(void *)(this + 2064)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStrideCalBin(uint64_t this)
{
  if (!*(void *)(this + 3080)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCalorimetryPauseEvent(uint64_t this)
{
  if (!*(void *)(this + 600)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeOdometer(uint64_t this)
{
  if (!*(void *)(this + 2112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMetsInfo(uint64_t this)
{
  if (!*(void *)(this + 1952)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallStats(uint64_t this)
{
  if (!*(void *)(this + 1008)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBasebandSpeed(uint64_t this)
{
  if (!*(void *)(this + 424)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVibrationEvent(uint64_t this)
{
  if (!*(void *)(this + 3216)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStepCadenceToStrideLengthBin(uint64_t this)
{
  if (!*(void *)(this + 3024)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWatchOrientationSettings(uint64_t this)
{
  if (!*(void *)(this + 3408)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionWifiAssociation(uint64_t this)
{
  if (!*(void *)(this + 2056)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionLoiData(uint64_t this)
{
  if (!*(void *)(this + 2040)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeOdometerWithAltitude(uint64_t this)
{
  if (!*(void *)(this + 2120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureFilteredNoTemperature(uint64_t this)
{
  if (!*(void *)(this + 2568)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarTransition(uint64_t this)
{
  if (!*(void *)(this + 1400)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeClefCalibration(uint64_t this)
{
  if (!*(void *)(this + 624)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAirpodEvent(uint64_t this)
{
  if (!*(void *)(this + 288)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarOptical(uint64_t this)
{
  if (!*(void *)(this + 1384)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarConstraints(uint64_t this)
{
  if (!*(void *)(this + 1368)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarOpenLid(uint64_t this)
{
  if (!*(void *)(this + 1376)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInEarBaselining(uint64_t this)
{
  if (!*(void *)(this + 1360)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryConfig(uint64_t this)
{
  if (!*(void *)(this + 120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryAccelConfig(uint64_t this)
{
  if (!*(void *)(this + 96)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryProximityConfig(uint64_t this)
{
  if (!*(void *)(this + 240)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTapDetect(uint64_t this)
{
  if (!*(void *)(this + 3120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeTapAccept(uint64_t this)
{
  if (!*(void *)(this + 3112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDoubleTap(uint64_t this)
{
  if (!*(void *)(this + 840)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryWakeDebug(uint64_t this)
{
  if (!*(void *)(this + 280)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGeomagneticData(uint64_t this)
{
  if (!*(void *)(this + 1104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionInternal(uint64_t this)
{
  if (!*(void *)(this + 2688)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelativeGravityCorrection(uint64_t this)
{
  if (!*(void *)(this + 2704)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelativeGravityConstraints(uint64_t this)
{
  if (!*(void *)(this + 2696)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeZeroVelocityCorrection(uint64_t this)
{
  if (!*(void *)(this + 3608)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAnchorCorrection(uint64_t this)
{
  if (!*(void *)(this + 328)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePredictedRelativeDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 2520)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMovementStatsSignal(uint64_t this)
{
  if (!*(void *)(this + 2088)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMovementStatsGravityProjection(uint64_t this)
{
  if (!*(void *)(this + 2080)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBleedToZeroCorrection(uint64_t this)
{
  if (!*(void *)(this + 520)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroConfig(uint64_t this)
{
  if (!*(void *)(this + 160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroGYTT(uint64_t this)
{
  if (!*(void *)(this + 168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryGyroCachedBias(uint64_t this)
{
  if (!*(void *)(this + 152)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGaitCycleSegment(uint64_t this)
{
  if (!*(void *)(this + 1064)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGaitCycleSegmentationState(uint64_t this)
{
  if (!*(void *)(this + 1072)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCompassCalibrationAttempt(uint64_t this)
{
  if (!*(void *)(this + 664)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalizationAttitudeCorrection(uint64_t this)
{
  if (!*(void *)(this + 3304)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVisualLocalizationAttitudeConstraints(uint64_t this)
{
  if (!*(void *)(this + 3296)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryMagnetometerConfig(uint64_t this)
{
  if (!*(void *)(this + 200)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionReferee(uint64_t this)
{
  if (!*(void *)(this + 952)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionReplay(uint64_t this)
{
  if (!*(void *)(this + 960)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionStateMachine(uint64_t this)
{
  if (!*(void *)(this + 968)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionDetector(uint64_t this)
{
  if (!*(void *)(this + 936)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallFalsePositiveSuppressionFeatures(uint64_t this)
{
  if (!*(void *)(this + 992)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryDeviceMotionConfig(uint64_t this)
{
  if (!*(void *)(this + 136)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionCorrelatedMotion(uint64_t this)
{
  if (!*(void *)(this + 2680)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRelativeDeviceMotionComplexTransition(uint64_t this)
{
  if (!*(void *)(this + 2672)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDeviceMotionAlwaysOn(uint64_t this)
{
  if (!*(void *)(this + 752)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionGyroControllerReplay(uint64_t this)
{
  if (!*(void *)(this + 944)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWalkingDetectionResult(uint64_t this)
{
  if (!*(void *)(this + 3352)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryInEarStatus(uint64_t this)
{
  if (!*(void *)(this + 184)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionWristStateReplay(uint64_t this)
{
  if (!*(void *)(this + 976)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeGyroBiasEstimateError(uint64_t this)
{
  if (!*(void *)(this + 1176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeStepLikelihoodFeatures(uint64_t this)
{
  if (!*(void *)(this + 3056)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFirstStepFeatures(uint64_t this)
{
  if (!*(void *)(this + 1016)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryStepDetectorDebug(uint64_t this)
{
  if (!*(void *)(this + 264)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorFeatures(uint64_t this)
{
  if (!*(void *)(this + 2864)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorTransitions(uint64_t this)
{
  if (!*(void *)(this + 2888)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t this)
{
  if (!*(void *)(this + 2872)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t this)
{
  if (!*(void *)(this + 2880)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSpatialEvent(uint64_t this)
{
  if (!*(void *)(this + 2928)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDistanceReplay(uint64_t this)
{
  if (!*(void *)(this + 984)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeJitterBufferLevel(uint64_t this)
{
  if (!*(void *)(this + 1456)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePressureFiltered1HzLowPass(uint64_t this)
{
  if (!*(void *)(this + 2560)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMotionActivityReplay(uint64_t this)
{
  if (!*(void *)(this + 1992)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFallDetectionActivityClassifierReplay(uint64_t this)
{
  if (!*(void *)(this + 928)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeLegacyALS5CHInput(uint64_t this)
{
  if (!*(void *)(this + 1824)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDopplerSample(uint64_t this)
{
  if (!*(void *)(this + 816)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDopplerProximityEvent(uint64_t this)
{
  if (!*(void *)(this + 800)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDopplerRawDataInput(uint64_t this)
{
  if (!*(void *)(this + 808)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDopplerDebugRecord(uint64_t this)
{
  if (!*(void *)(this + 792)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeOrientation(uint64_t this)
{
  if (!*(void *)(this + 2144)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaAudioResult(uint64_t this)
{
  if (!*(void *)(this + 1528)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaBaroResult(uint64_t this)
{
  if (!*(void *)(this + 1536)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaGpsResult(uint64_t this)
{
  if (!*(void *)(this + 1560)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseResult(uint64_t this)
{
  if (!*(void *)(this + 1648)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaZgResult(uint64_t this)
{
  if (!*(void *)(this + 1768)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaZgDetected(uint64_t this)
{
  if (!*(void *)(this + 1760)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseInertialAccel(uint64_t this)
{
  if (!*(void *)(this + 1632)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHeadTrackingClientModeUpdate(uint64_t this)
{
  if (!*(void *)(this + 1312)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHeadTrackingBehaviorUpdate(uint64_t this)
{
  if (!*(void *)(this + 1304)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaAirbagResult(uint64_t this)
{
  if (!*(void *)(this + 1520)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaCrashResult(uint64_t this)
{
  if (!*(void *)(this + 1544)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaQuiescenceResult(uint64_t this)
{
  if (!*(void *)(this + 1656)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaRecoveryResult(uint64_t this)
{
  if (!*(void *)(this + 1664)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaRolloverCrashResult(uint64_t this)
{
  if (!*(void *)(this + 1696)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaMildImpactResult(uint64_t this)
{
  if (!*(void *)(this + 1600)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaLackOfMotionResult(uint64_t this)
{
  if (!*(void *)(this + 1584)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaSevereCrashResult(uint64_t this)
{
  if (!*(void *)(this + 1704)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaLocalAudioResult(uint64_t this)
{
  if (!*(void *)(this + 1592)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaRemoteAudioResult(uint64_t this)
{
  if (!*(void *)(this + 1672)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDirectionOfTravelMetrics(uint64_t this)
{
  if (!*(void *)(this + 768)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningDecision(uint64_t this)
{
  if (!*(void *)(this + 3224)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHeadToHeadsetTransformationEstimate(uint64_t this)
{
  if (!*(void *)(this + 1296)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningFeatures(uint64_t this)
{
  if (!*(void *)(this + 3232)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeViewObstructedMachineLearningProbabilities(uint64_t this)
{
  if (!*(void *)(this + 3240)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningArmSwingSignals(uint64_t this)
{
  if (!*(void *)(this + 2728)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningCentripetalAccelSignals(uint64_t this)
{
  if (!*(void *)(this + 2736)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningRotationAxis(uint64_t this)
{
  if (!*(void *)(this + 2760)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillationSignals(uint64_t this)
{
  if (!*(void *)(this + 2800)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillation(uint64_t this)
{
  if (!*(void *)(this + 2784)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaSpinResult(uint64_t this)
{
  if (!*(void *)(this + 1712)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseDeltaV(uint64_t this)
{
  if (!*(void *)(this + 1624)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningStrideLength(uint64_t this)
{
  if (!*(void *)(this + 2776)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeIspPacket(uint64_t this)
{
  if (!*(void *)(this + 1448)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaHighSpeedCrashResult(uint64_t this)
{
  if (!*(void *)(this + 1576)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPulseInertialHgAccel(uint64_t this)
{
  if (!*(void *)(this + 1640)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHarmonicMetrics(uint64_t this)
{
  if (!*(void *)(this + 1280)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeCalorimetryMETsConsumed(uint64_t this)
{
  if (!*(void *)(this + 592)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePedometerPathStraightness(uint64_t this)
{
  if (!*(void *)(this + 2336)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeComplexHandMotion(uint64_t this)
{
  if (!*(void *)(this + 688)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeElevationGradeEstimator(uint64_t this)
{
  if (!*(void *)(this + 856)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVO2MaxModelInput(uint64_t this)
{
  if (!*(void *)(this + 3200)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeProxCalibration(uint64_t this)
{
  if (!*(void *)(this + 2608)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaStepsResult(uint64_t this)
{
  if (!*(void *)(this + 1728)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeWakeGestureSample(uint64_t this)
{
  if (!*(void *)(this + 3344)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaGravityAutocorrelationResult(uint64_t this)
{
  if (!*(void *)(this + 1568)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeRunningVerticalOscillationGradientBoostedSignals(uint64_t this)
{
  if (!*(void *)(this + 2792)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSubStats(uint64_t this)
{
  if (!*(void *)(this + 3096)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePedOdomFusionExtendedModeSegment(uint64_t this)
{
  if (!*(void *)(this + 2312)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagicMountState(uint64_t this)
{
  if (!*(void *)(this + 1896)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrPedestrianClassifierState(uint64_t this)
{
  if (!*(void *)(this + 2264)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrPlacementClassifierState(uint64_t this)
{
  if (!*(void *)(this + 2272)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrSpeedEstimatorState(uint64_t this)
{
  if (!*(void *)(this + 2280)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorState(uint64_t this)
{
  if (!*(void *)(this + 2160)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrVelocityEstimatorState(uint64_t this)
{
  if (!*(void *)(this + 2296)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKmVelocityEstimatorState(uint64_t this)
{
  if (!*(void *)(this + 1816)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeVelocityEstimatorFusionState(uint64_t this)
{
  if (!*(void *)(this + 3208)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrFenceReference(uint64_t this)
{
  if (!*(void *)(this + 2232)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrFenceState(uint64_t this)
{
  if (!*(void *)(this + 2240)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeUwbRange(uint64_t this)
{
  if (!*(void *)(this + 3192)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSwingDoTCandidate(uint64_t this)
{
  if (!*(void *)(this + 3104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeDotEstimatorHandSwing(uint64_t this)
{
  if (!*(void *)(this + 824)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaTriggerClustersResult(uint64_t this)
{
  if (!*(void *)(this + 1744)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSimActivityEvent(uint64_t this)
{
  if (!*(void *)(this + 2856)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrFeatures(uint64_t this)
{
  if (!*(void *)(this + 2224)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateBody(uint64_t this)
{
  if (!*(void *)(this + 2176)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateArmSwing(uint64_t this)
{
  if (!*(void *)(this + 2168)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateHeading(uint64_t this)
{
  if (!*(void *)(this + 2200)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessoryActivityAsleepConfidenceEpoch(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrSpeedEstimatorStateDebug(uint64_t this)
{
  if (!*(void *)(this + 2288)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingDOTEstimate(uint64_t this)
{
  if (!*(void *)(this + 2472)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingState(uint64_t this)
{
  if (!*(void *)(this + 2496)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaRoadsResult(uint64_t this)
{
  if (!*(void *)(this + 1688)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingVelocityEstimate(uint64_t this)
{
  if (!*(void *)(this + 2504)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingRangeFilter(uint64_t this)
{
  if (!*(void *)(this + 2480)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTMeasurementSelectorState(uint64_t this)
{
  if (!*(void *)(this + 2216)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeBumpToWakeState(uint64_t this)
{
  if (!*(void *)(this + 576)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorUncertaintyModelOnBody(uint64_t this)
{
  if (!*(void *)(this + 2208)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePeerState(uint64_t this)
{
  if (!*(void *)(this + 2344)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeMagnetometerCalibratorFilterParameters(uint64_t this)
{
  if (!*(void *)(this + 1928)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaActivityPhone(uint64_t this)
{
  if (!*(void *)(this + 1504)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaActivityWatch(uint64_t this)
{
  if (!*(void *)(this + 1512)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingSessionStartStop(uint64_t this)
{
  if (!*(void *)(this + 2488)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateDebug(uint64_t this)
{
  if (!*(void *)(this + 2192)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePdrDOTEstimatorStateBodyDebug(uint64_t this)
{
  if (!*(void *)(this + 2184)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPeakDetectorMapResult(uint64_t this)
{
  if (!*(void *)(this + 1616)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKappaPeakDetectorMapMagTimestamps(uint64_t this)
{
  if (!*(void *)(this + 1608)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePrecisionFindingVerticalState(uint64_t this)
{
  if (!*(void *)(this + 2512)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAltimeter(uint64_t this)
{
  if (!*(void *)(this + 312)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeFaceDownDetection(uint64_t this)
{
  if (!*(void *)(this + 904)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilFusionDMYawAlignmentUpdate(uint64_t this)
{
  if (!*(void *)(this + 2360)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePencilFusionRingSensorTrustModelUpdate(uint64_t this)
{
  if (!*(void *)(this + 2384)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessorySleepStateUpdate(uint64_t this)
{
  if (!*(void *)(this + 256)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAccessorySleepStateConfidenceEpoch(uint64_t this)
{
  if (!*(void *)(this + 248)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSafetyHertzSample(uint64_t this)
{
  if (!*(void *)(this + 2816)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSafetyCompanionStatus(uint64_t this)
{
  if (!*(void *)(this + 2808)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePtsConsumedGNSS(uint64_t this)
{
  if (!*(void *)(this + 2624)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePtsForwardPropagation(uint64_t this)
{
  if (!*(void *)(this + 2632)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePtsReconstructedRoute(uint64_t this)
{
  if (!*(void *)(this + 2648)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeHeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t this)
{
  if (!*(void *)(this + 1288)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makePtsMapMatchedRoute(uint64_t this)
{
  if (!*(void *)(this + 2640)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeAnchorMotionCorrespondence(uint64_t this)
{
  if (!*(void *)(this + 336)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKData1(uint64_t this)
{
  if (!*(void *)(this + 1480)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKData2(uint64_t this)
{
  if (!*(void *)(this + 1488)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeKData3(uint64_t this)
{
  if (!*(void *)(this + 1496)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSafetyRemoteSample(uint64_t this)
{
  if (!*(void *)(this + 2824)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSafetyTrustedAudioResult(uint64_t this)
{
  if (!*(void *)(this + 2832)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSpuPlaybackExampleDeviceMotion(uint64_t this)
{
  if (!*(void *)(this + 2944)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeSpuPlaybackExampleMotionStateUpdate(uint64_t this)
{
  if (!*(void *)(this + 2952)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::Item::makeInterpolatedAccessoryAccel(uint64_t this)
{
  if (!*(void *)(this + 1432)) {
    operator new();
  }
  return this;
}

void CMMsl::JitterBufferLevel::~JitterBufferLevel(CMMsl::JitterBufferLevel *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this, const CMMsl::JitterBufferLevel *a2)
{
  *(void *)this = off_1003A6780;
  *(_DWORD *)(this + 20) = 0;
  char v2 = *((unsigned char *)a2 + 20);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 4);
    char v3 = 4;
    *(unsigned char *)(this + 20) = 4;
    *(_DWORD *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 20);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 2);
    v3 |= 1u;
    *(unsigned char *)(this + 20) = v3;
    *(_DWORD *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, const CMMsl::JitterBufferLevel *a2)
{
  if ((const CMMsl::JitterBufferLevel *)a1 != a2)
  {
    CMMsl::JitterBufferLevel::JitterBufferLevel((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v10;
    int v10 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::JitterBufferLevel *a2, CMMsl::JitterBufferLevel *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  int v6 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return result;
}

float CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6780;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6780;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t CMMsl::JitterBufferLevel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A6780;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    int v11 = *(_DWORD *)(a1 + 20);
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v10 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 8) = v7;
    v9[1] = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::JitterBufferLevel::formatText(CMMsl::JitterBufferLevel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "level", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "threshold", *((_DWORD *)this + 3));
  if ((*((unsigned char *)this + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestamp", *((float *)this + 4));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JitterBufferLevel::readFrom(CMMsl::JitterBufferLevel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 3) = v25;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 2) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JitterBufferLevel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(this + 20) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 8), 2u);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(float *)(this + 16), 1u);
  char v4 = *(unsigned char *)(v3 + 20);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 12);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

uint64_t CMMsl::JitterBufferLevel::hash_value(CMMsl::JitterBufferLevel *this)
{
  if ((*((unsigned char *)this + 20) & 4) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  float v4 = *((float *)this + 4);
  uint64_t v1 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 2);
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 3);
  return v2 ^ v1 ^ v3;
}

void CMMsl::JointLinkModelPose::~JointLinkModelPose(CMMsl::JointLinkModelPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A67B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::JointLinkModelPose::~JointLinkModelPose(this);

  operator delete();
}

void *CMMsl::JointLinkModelPose::JointLinkModelPose(void *this, const CMMsl::JointLinkModelPose *a2)
{
  *this = off_1003A67B8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::JointLinkModelPose *CMMsl::JointLinkModelPose::operator=(const CMMsl::JointLinkModelPose *a1, const CMMsl::JointLinkModelPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::JointLinkModelPose::JointLinkModelPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::JointLinkModelPose::~JointLinkModelPose((CMMsl::JointLinkModelPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPose *a2, CMMsl::JointLinkModelPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::JointLinkModelPose::JointLinkModelPose(void *a1, uint64_t a2)
{
  *a1 = off_1003A67B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A67B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A67B8;
    v6[1] = v4;
    CMMsl::JointLinkModelPose::~JointLinkModelPose((CMMsl::JointLinkModelPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPose::formatText(CMMsl::JointLinkModelPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPose::readFrom(CMMsl::JointLinkModelPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::BioMotionPose *CMMsl::JointLinkModelPose::hash_value(CMMsl::JointLinkModelPose *this)
{
  uint64_t result = (CMMsl::BioMotionPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPose *)CMMsl::BioMotionPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::JointLinkModelPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose(CMMsl::JointLinkModelPredictedPose *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A67F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose(this);

  operator delete();
}

void *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(void *this, const CMMsl::JointLinkModelPredictedPose *a2)
{
  *this = off_1003A67F0;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::JointLinkModelPredictedPose *CMMsl::JointLinkModelPredictedPose::operator=(const CMMsl::JointLinkModelPredictedPose *a1, const CMMsl::JointLinkModelPredictedPose *a2)
{
  if (a1 != a2)
  {
    CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose((CMMsl::JointLinkModelPredictedPose *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::JointLinkModelPredictedPose *a2, CMMsl::JointLinkModelPredictedPose *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(void *a1, uint64_t a2)
{
  *a1 = off_1003A67F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A67F0;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A67F0;
    v6[1] = v4;
    CMMsl::JointLinkModelPredictedPose::~JointLinkModelPredictedPose((CMMsl::JointLinkModelPredictedPose *)v6);
  }
  return a1;
}

uint64_t CMMsl::JointLinkModelPredictedPose::formatText(CMMsl::JointLinkModelPredictedPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::JointLinkModelPredictedPose::readFrom(CMMsl::JointLinkModelPredictedPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::JointLinkModelPredictedPose::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::BioMotionPredictedPose *CMMsl::JointLinkModelPredictedPose::hash_value(CMMsl::JointLinkModelPredictedPose *this)
{
  uint64_t result = (CMMsl::BioMotionPredictedPose *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionPredictedPose *)CMMsl::BioMotionPredictedPose::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::JointLinkModelPredictedPose::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::KData1::~KData1(CMMsl::KData1 *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KData1::KData1(uint64_t this, const CMMsl::KData1 *a2)
{
  *(void *)this = off_1003A6828;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::KData1 *CMMsl::KData1::operator=(const CMMsl::KData1 *a1, const CMMsl::KData1 *a2)
{
  if (a1 != a2)
  {
    CMMsl::KData1::KData1((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KData1 *a2, CMMsl::KData1 *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::KData1::KData1(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A6828;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A6828;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KData1::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A6828;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::KData1::formatText(CMMsl::KData1 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData1::readFrom(CMMsl::KData1 *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KData1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::KData1::hash_value(CMMsl::KData1 *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::KData2::~KData2(CMMsl::KData2 *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KData2::KData2(uint64_t this, const CMMsl::KData2 *a2)
{
  *(void *)this = off_1003A6860;
  *(_DWORD *)(this + 100) = 0;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    int v3 = 4;
    *(_DWORD *)(this + 100) = 4;
    *(void *)(this + 24) = v4;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 32) = v5;
    int v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 15);
    v3 |= 0x400u;
    *(_DWORD *)(this + 100) = v3;
    *(_DWORD *)(this + 60) = v6;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 100) = v3;
  *(void *)(this + 16) = v7;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 40) = v8;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v9 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 100) = v3;
  *(void *)(this + 8) = v9;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 68) = v10;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v11 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 64) = v11;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 48) = v12;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 44) = v13;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 72) = v14;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v15 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 52) = v15;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v16 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v16;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v17 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v17;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v18 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 56) = v18;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v19 = *((_DWORD *)a2 + 9);
  v3 |= 0x10u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 36) = v19;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v20 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v20;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v21 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v21;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0) {
      return this;
    }
LABEL_42:
    char v23 = *((unsigned char *)a2 + 96);
    *(_DWORD *)(this + 100) = v3 | 0x80000;
    *(unsigned char *)(this + 96) = v23;
    return this;
  }
LABEL_41:
  int v22 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 100) = v3;
  *(_DWORD *)(this + 76) = v22;
  if ((*((_DWORD *)a2 + 25) & 0x80000) != 0) {
    goto LABEL_42;
  }
  return this;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *a1, const CMMsl::KData2 *a2)
{
  if (a1 != a2)
  {
    CMMsl::KData2::KData2((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KData2 *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData2 *a2, CMMsl::KData2 *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  int v5 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  LODWORD(v8) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v8;
  LODWORD(v8) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  int v9 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  int v10 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v10;
  int v11 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  int v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  int v13 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  int v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  int v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  int v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  float result = *((float *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((float *)a2 + 19) = result;
  LOBYTE(v8) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v8;
  return result;
}

float CMMsl::KData2::KData2(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6860;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 76);
  *(float *)(a1 + 76) = result;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::KData2::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KData2::KData2((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KData2 *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KData2::formatText(CMMsl::KData2 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "dataBufferSize", *((_DWORD *)this + 8));
    int v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gestureLengthSeconds", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "isWristLooselyLevel", *((unsigned char *)this + 96));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "negPeakHeight", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "negPeakLeftHalfWidth", *((_DWORD *)this + 11));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "negPeakRightHalfWidth", *((_DWORD *)this + 12));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "negPeakTimestampUs", *((void *)this + 1));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "negPeakTotalAngleDegrees", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "pauseBtwPeaksSeconds", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "posPeakHeight", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "posPeakLeftHalfWidth", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "posPeakRightHalfWidth", *((_DWORD *)this + 17));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "posPeakTimestampUs", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "posPeakTotalAngleDegrees", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rotZRangeDuringGestureRad", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "screenTiltAtEndDegrees", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "screenTiltAtStartDegrees", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "timestampUs", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "wristAngleDiffBtwPeaksDegrees", *((float *)this + 22));
  if ((*((_DWORD *)this + 25) & 0x40000) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "wristAngleToHorizontalDegrees", *((float *)this + 23));
LABEL_22:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData2::readFrom(CMMsl::KData2 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 25) |= 4u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_179;
                  }
                  unint64_t v73 = v20++;
                  char v74 = *(unsigned char *)(v21 + v73);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_178:
                unint64_t v2 = v73 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_179;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_179:
              *((void *)this + 3) = v24;
              goto LABEL_215;
            case 2u:
              *((_DWORD *)this + 25) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_184;
                  }
                  unint64_t v77 = v27++;
                  char v78 = *(unsigned char *)(v28 + v77);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_183:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_184;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_183;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_184;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_184:
              *((_DWORD *)this + 8) = v31;
              goto LABEL_215;
            case 3u:
              *((_DWORD *)this + 25) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 4u:
              *((_DWORD *)this + 25) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_189;
                  }
                  unint64_t v81 = v33++;
                  char v82 = *(unsigned char *)(v34 + v81);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_188:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_189;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_188;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_189;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_189:
              *((void *)this + 2) = v37;
              goto LABEL_215;
            case 5u:
              *((_DWORD *)this + 25) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 6u:
              *((_DWORD *)this + 25) |= 1u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_194;
                  }
                  unint64_t v85 = v39++;
                  char v86 = *(unsigned char *)(v40 + v85);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_193:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_193;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_194;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_194:
              *((void *)this + 1) = v43;
              goto LABEL_215;
            case 7u:
              *((_DWORD *)this + 25) |= 0x1000u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_199;
                  }
                  unint64_t v89 = v45++;
                  char v90 = *(unsigned char *)(v46 + v89);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_198:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_198;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_199;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_199:
              *((_DWORD *)this + 17) = v49;
              goto LABEL_215;
            case 8u:
              *((_DWORD *)this + 25) |= 0x800u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_204;
                  }
                  unint64_t v93 = v51++;
                  char v94 = *(unsigned char *)(v52 + v93);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_203:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_203;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_204;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_204:
              *((_DWORD *)this + 16) = v55;
              goto LABEL_215;
            case 9u:
              *((_DWORD *)this + 25) |= 0x80u;
              unint64_t v57 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v58 = *(void *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_209;
                  }
                  unint64_t v97 = v57++;
                  char v98 = *(unsigned char *)(v58 + v97);
                  *((void *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_208:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_208;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)a2 + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_209;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_209:
              *((_DWORD *)this + 12) = v61;
              goto LABEL_215;
            case 0xAu:
              *((_DWORD *)this + 25) |= 0x40u;
              unint64_t v63 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v64 = *(void *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_214;
                  }
                  unint64_t v101 = v63++;
                  char v102 = *(unsigned char *)(v64 + v101);
                  *((void *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_213:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v67) = 0;
                }
                goto LABEL_213;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)a2 + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_214;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_214:
              *((_DWORD *)this + 11) = v67;
LABEL_215:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *((_DWORD *)this + 25) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0xCu:
              *((_DWORD *)this + 25) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0xDu:
              *((_DWORD *)this + 25) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0xEu:
              *((_DWORD *)this + 25) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0xFu:
              *((_DWORD *)this + 25) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0x10u:
              *((_DWORD *)this + 25) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0x11u:
              *((_DWORD *)this + 25) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0x12u:
              *((_DWORD *)this + 25) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_112;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_174;
            case 0x13u:
              *((_DWORD *)this + 25) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_174:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_112:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_215;
            case 0x14u:
              *((_DWORD *)this + 25) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v70 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v69 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v70 = v69 != 0;
              }
              *((unsigned char *)this + 96) = v70;
              goto LABEL_215;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_215;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KData2::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 100);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 3u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 4u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 6u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 7u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 8u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 9u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xAu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xDu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xEu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xFu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x10u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x11u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x13u);
    if ((*(_DWORD *)(v3 + 100) & 0x80000) == 0) {
      return this;
    }
    goto LABEL_41;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x12u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((v4 & 0x80000) == 0) {
    return this;
  }
LABEL_41:
  char v5 = *(unsigned char *)(v3 + 96);

  return PB::Writer::write(a2, v5, 0x14u);
}

uint64_t CMMsl::KData2::hash_value(CMMsl::KData2 *this)
{
  int v1 = *((_DWORD *)this + 25);
  if ((v1 & 4) != 0)
  {
    uint64_t v2 = *((void *)this + 3);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 8);
      if ((v1 & 0x400) != 0) {
        goto LABEL_4;
      }
LABEL_46:
      uint64_t v5 = 0;
      if ((v1 & 2) != 0) {
        goto LABEL_7;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_4:
  float v4 = *((float *)this + 15);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_7:
    uint64_t v6 = *((void *)this + 2);
    if ((v1 & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_48:
    uint64_t v8 = 0;
    if (v1) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t v6 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_48;
  }
LABEL_8:
  float v7 = *((float *)this + 10);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if (v1)
  {
LABEL_11:
    uint64_t v9 = *((void *)this + 1);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v9 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned int *)this + 17);
    if ((v1 & 0x800) != 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v10 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned int *)this + 16);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v11 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v12 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v12 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v13 = *((unsigned int *)this + 11);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_16;
    }
LABEL_54:
    uint64_t v15 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_19;
    }
LABEL_55:
    uint64_t v17 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_22;
    }
LABEL_56:
    uint64_t v19 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_25;
    }
LABEL_57:
    uint64_t v21 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_28;
    }
LABEL_58:
    uint64_t v23 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_31;
    }
LABEL_59:
    uint64_t v25 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_34;
    }
LABEL_60:
    uint64_t v27 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_61:
    uint64_t v29 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_62;
  }
LABEL_53:
  uint64_t v13 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_54;
  }
LABEL_16:
  float v14 = *((float *)this + 18);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_55;
  }
LABEL_19:
  float v16 = *((float *)this + 13);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_56;
  }
LABEL_22:
  float v18 = *((float *)this + 23);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_57;
  }
LABEL_25:
  float v20 = *((float *)this + 22);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_58;
  }
LABEL_28:
  float v22 = *((float *)this + 14);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_59;
  }
LABEL_31:
  float v24 = *((float *)this + 9);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_60;
  }
LABEL_34:
  float v26 = *((float *)this + 21);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_61;
  }
LABEL_37:
  float v28 = *((float *)this + 20);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x4000) != 0)
  {
LABEL_40:
    float v30 = *((float *)this + 19);
    uint64_t v31 = LODWORD(v30);
    if (v30 == 0.0) {
      uint64_t v31 = 0;
    }
    if ((v1 & 0x80000) != 0) {
      goto LABEL_43;
    }
LABEL_63:
    uint64_t v32 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
  }
LABEL_62:
  uint64_t v31 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_63;
  }
LABEL_43:
  uint64_t v32 = *((unsigned __int8 *)this + 96);
  return v3 ^ v2 ^ v5 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32;
}

void CMMsl::KData3::~KData3(CMMsl::KData3 *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KData3::KData3(CMMsl::KData3 *this, const CMMsl::KData3 *a2)
{
  *(void *)this = off_1003A6898;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((float *)this + 6) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 4);
    *((unsigned char *)this + 28) = v3 | 2;
    *((float *)this + 4) = result;
    return result;
  }
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 28) = v3;
  *((float *)this + 5) = result;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, const CMMsl::KData3 *a2)
{
  if ((const CMMsl::KData3 *)a1 != a2)
  {
    CMMsl::KData3::KData3((CMMsl::KData3 *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v10;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KData3 *a2, CMMsl::KData3 *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::KData3::KData3(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6898;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6898;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::KData3::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 24);
    int v12 = *(_DWORD *)(a1 + 28);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[0] = off_1003A6898;
    v10[1] = v6;
    int v11 = *(_DWORD *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    *(void *)(a1 + 16) = v8;
    v10[2] = v7;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KData3::formatText(CMMsl::KData3 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "maxSymmetryAllowanceFactor", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "minPeakRotationRateThresholdRps", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "minTwistAngleThresholdDeg", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampUs", *((void *)this + 1));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KData3::readFrom(CMMsl::KData3 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_53;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_52;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_52:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_53;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_53:
              *((void *)this + 1) = v24;
              goto LABEL_54;
            case 2u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 3u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_48;
            case 4u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_48:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_54;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_54:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KData3::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::KData3::hash_value(CMMsl::KData3 *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

void CMMsl::KMVelocityEstimatorState::~KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(CMMsl::KMVelocityEstimatorState *this, const CMMsl::KMVelocityEstimatorState *a2)
{
  *(void *)this = off_1003A68D0;
  *((_DWORD *)this + 13) = 0;
  __int16 v2 = *((_WORD *)a2 + 26);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    __int16 v3 = 1;
    *((_WORD *)this + 26) = 1;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 9);
    v3 |= 0x20u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 9) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 10);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((_DWORD *)this + 10) = LODWORD(result);
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_WORD *)this + 26) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v5 = *((unsigned char *)a2 + 48);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((unsigned char *)this + 48) = v5;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v6 = *((unsigned char *)a2 + 49);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((unsigned char *)this + 49) = v6;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_24:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 26) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_23:
  char v7 = *((unsigned char *)a2 + 50);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((unsigned char *)this + 50) = v7;
  if ((*((_WORD *)a2 + 26) & 2) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *a1, const CMMsl::KMVelocityEstimatorState *a2)
{
  if (a1 != a2)
  {
    CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState((CMMsl::KMVelocityEstimatorState *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KMVelocityEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KMVelocityEstimatorState *a2, CMMsl::KMVelocityEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 49);
  *((unsigned char *)this + 49) = *((unsigned char *)a2 + 49);
  *((unsigned char *)a2 + 49) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 50);
  *((unsigned char *)this + 50) = *((unsigned char *)a2 + 50);
  *((unsigned char *)a2 + 50) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A68D0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 49);
  *(unsigned char *)(a1 + 50) = *(unsigned char *)(a2 + 50);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::KMVelocityEstimatorState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KMVelocityEstimatorState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KMVelocityEstimatorState::formatText(CMMsl::KMVelocityEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 26);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "validX", *((unsigned char *)this + 48));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "validY", *((unsigned char *)this + 49));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "validZ", *((unsigned char *)this + 50));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "velocityUncX", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "velocityUncY", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "velocityUncZ", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "velocityX", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "velocityY", *((float *)this + 10));
  if ((*((_WORD *)this + 26) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "velocityZ", *((float *)this + 11));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KMVelocityEstimatorState::readFrom(CMMsl::KMVelocityEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 26) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_62;
        case 2u:
          *((_WORD *)this + 26) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 3u:
          *((_WORD *)this + 26) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 4u:
          *((_WORD *)this + 26) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 5u:
          *((_WORD *)this + 26) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 6u:
          *((_WORD *)this + 26) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_43;
        case 7u:
          *((_WORD *)this + 26) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_50;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_43:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_63;
        case 8u:
          *((_WORD *)this + 26) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 48) = v21;
          break;
        case 9u:
          *((_WORD *)this + 26) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *((unsigned char *)this + 49) = v26;
          break;
        case 0xAu:
          *((_WORD *)this + 26) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v23 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v22 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v23 = v22 != 0;
          }
          *((unsigned char *)this + 50) = v23;
          break;
        case 0xBu:
          *((_WORD *)this + 26) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_62:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_63:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_50:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KMVelocityEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 3u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 4u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 50), 0xAu);
    if ((*(_WORD *)(v3 + 52) & 2) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 49), 9u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::KMVelocityEstimatorState::hash_value(CMMsl::KMVelocityEstimatorState *this)
{
  __int16 v1 = *((_WORD *)this + 26);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v4 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_31:
    uint64_t v6 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_32:
    uint64_t v8 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_12;
    }
LABEL_33:
    uint64_t v10 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_15;
    }
LABEL_34:
    uint64_t v12 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_35:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_30;
  }
LABEL_3:
  float v3 = *((float *)this + 9);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_6:
  float v5 = *((float *)this + 10);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_32;
  }
LABEL_9:
  float v7 = *((float *)this + 11);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_33;
  }
LABEL_12:
  float v9 = *((float *)this + 6);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_15:
  float v11 = *((float *)this + 7);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_18:
  float v13 = *((float *)this + 8);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x100) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 48);
    if ((*((_WORD *)this + 26) & 0x200) != 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 26) & 0x200) != 0)
  {
LABEL_22:
    uint64_t v16 = *((unsigned __int8 *)this + 49);
    if ((*((_WORD *)this + 26) & 0x400) != 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v16 = 0;
  if ((*((_WORD *)this + 26) & 0x400) != 0)
  {
LABEL_23:
    uint64_t v17 = *((unsigned __int8 *)this + 50);
    if ((v1 & 2) != 0) {
      goto LABEL_24;
    }
LABEL_39:
    double v18 = 0.0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
  }
LABEL_38:
  uint64_t v17 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_24:
  double v18 = *((double *)this + 2);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ *(void *)&v18;
}

void CMMsl::KappaActivityPhone::~KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  *(void *)this = off_1003A6908;
  double v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaActivityPhone::~KappaActivityPhone(this);

  operator delete();
}

CMMsl::KappaActivityPhone *CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this, const CMMsl::KappaActivityPhone *a2)
{
  *(void *)this = off_1003A6908;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 35) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if (*((unsigned char *)a2 + 140))
  {
    uint64_t v5 = *((void *)a2 + 13);
    *((unsigned char *)this + 140) = 1;
    *((void *)this + 13) = v5;
  }
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 140) & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 30);
    *((unsigned char *)this + 140) |= 4u;
    *((_DWORD *)this + 30) = v6;
  }
  if (this != a2) {
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
  }
  if ((*((unsigned char *)a2 + 140) & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 14);
    *((unsigned char *)this + 140) |= 2u;
    *((void *)this + 14) = v7;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  char v8 = *((unsigned char *)a2 + 140);
  if ((v8 & 0x20) != 0)
  {
    int v11 = *((_DWORD *)a2 + 33);
    *((unsigned char *)this + 140) |= 0x20u;
    *((_DWORD *)this + 33) = v11;
    char v8 = *((unsigned char *)a2 + 140);
    if ((v8 & 8) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) == 0) {
        goto LABEL_16;
      }
LABEL_21:
      int v13 = *((_DWORD *)a2 + 32);
      *((unsigned char *)this + 140) |= 0x10u;
      *((_DWORD *)this + 32) = v13;
      if ((*((unsigned char *)a2 + 140) & 0x40) == 0) {
        return this;
      }
      goto LABEL_17;
    }
  }
  else if ((*((unsigned char *)a2 + 140) & 8) == 0)
  {
    goto LABEL_15;
  }
  int v12 = *((_DWORD *)a2 + 31);
  *((unsigned char *)this + 140) |= 8u;
  *((_DWORD *)this + 31) = v12;
  char v8 = *((unsigned char *)a2 + 140);
  if ((v8 & 0x10) != 0) {
    goto LABEL_21;
  }
LABEL_16:
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    int v9 = *((_DWORD *)a2 + 34);
    *((unsigned char *)this + 140) |= 0x40u;
    *((_DWORD *)this + 34) = v9;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, const CMMsl::KappaActivityPhone *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((CMMsl::KappaActivityPhone *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityPhone *a2, CMMsl::KappaActivityPhone *a3)
{
  int v3 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v10 = *((void *)this + 12);
  uint64_t v9 = *((void *)this + 13);
  uint64_t v11 = *((void *)a2 + 13);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)this + 13) = v11;
  *((void *)a2 + 12) = v10;
  *((void *)a2 + 13) = v9;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v13;
  uint64_t v14 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v14;
  uint64_t v15 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v15;
  uint64_t v16 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  uint64_t v17 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v17;
  uint64_t v18 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v18;
  int v19 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v19;
  int v20 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v20;
  int v21 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v21;
  float result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  return result;
}

uint64_t CMMsl::KappaActivityPhone::KappaActivityPhone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6908;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v6 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v6, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

CMMsl *CMMsl::KappaActivityPhone::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityPhone::KappaActivityPhone((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityPhone *)v5, v3);
    CMMsl::KappaActivityPhone::~KappaActivityPhone((CMMsl::KappaActivityPhone *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityPhone::formatText(CMMsl::KappaActivityPhone *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 140) & 4) != 0) {
    PB::TextFormatter::format(a2, "armTimeActivityHints", *((_DWORD *)this + 30));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "armTimeImuConfidences", v7);
  }
  char v8 = *((unsigned char *)this + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionBtHintPercentage", *((float *)this + 31));
    char v8 = *((unsigned char *)this + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((*((unsigned char *)this + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(a2, "sessionGpsHintPercentage", *((float *)this + 32));
  if ((*((unsigned char *)this + 140) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "sessionImuHintPercentage", *((float *)this + 33));
LABEL_9:
  uint64_t v9 = (unsigned int *)*((void *)this + 4);
  uint64_t v10 = (unsigned int *)*((void *)this + 5);
  while (v9 != v10)
  {
    unsigned int v11 = *v9++;
    PB::TextFormatter::format(a2, "sessionSwivelAngleDegHistogram", v11);
  }
  uint64_t v12 = (unsigned int *)*((void *)this + 7);
  uint64_t v13 = (unsigned int *)*((void *)this + 8);
  while (v12 != v13)
  {
    unsigned int v14 = *v12++;
    PB::TextFormatter::format(a2, "sessionTiltAngleDegHistogram", v14);
  }
  char v15 = *((unsigned char *)this + 140);
  if ((v15 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "sessionWifiHintPercentage", *((float *)this + 34));
    char v15 = *((unsigned char *)this + 140);
    if ((v15 & 1) == 0)
    {
LABEL_15:
      if ((v15 & 2) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)this + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 13));
  if ((*((unsigned char *)this + 140) & 2) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *((void *)this + 14));
LABEL_17:
  uint64_t v16 = (float *)*((void *)this + 10);
  uint64_t v17 = (float *)*((void *)this + 11);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(a2, "windowAfterArmImuConfidences", v18);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityPhone::readFrom(CMMsl::KappaActivityPhone *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void *)((char *)this + 72);
    uint64_t v207 = (void **)((char *)this + 32);
    v208 = (void **)((char *)this + 56);
    uint64_t v9 = (void *)((char *)this + 48);
    uint64_t v10 = (void **)((char *)this + 80);
    unsigned int v11 = (char *)this + 96;
    uint64_t v12 = (void **)((char *)this + 8);
    uint64_t v13 = (char *)this + 24;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v91 = v16++ > 8;
        if (v91) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v17 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 140) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          uint64_t v28 = *(void *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)a2 + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_265;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v91 = v30++ > 8;
            }
            while (!v91);
LABEL_202:
            uint64_t v31 = 0;
            goto LABEL_265;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v131 = v26 + 1;
              char v132 = *(unsigned char *)(v28 + v26);
              *((void *)a2 + 1) = v131;
              v31 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v26 = v131;
                BOOL v91 = v130++ > 8;
                if (v91) {
                  goto LABEL_202;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v31 = 0;
              }
            }
            break;
          }
LABEL_265:
          *((void *)this + 13) = v31;
          goto LABEL_339;
        case 2u:
          if (v25 != 2)
          {
            v134 = (char *)*((void *)this + 2);
            unint64_t v133 = *((void *)this + 3);
            if ((unint64_t)v134 >= v133)
            {
              v151 = (char *)*v12;
              uint64_t v152 = (v134 - (unsigned char *)*v12) >> 2;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
LABEL_349:
              }
                sub_10000EE98();
              uint64_t v154 = v133 - (void)v151;
              if (v154 >> 1 > v153) {
                unint64_t v153 = v154 >> 1;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              if (v155)
              {
                v156 = (char *)sub_100024458((uint64_t)v13, v155);
                v151 = (char *)*((void *)this + 1);
                v134 = (char *)*((void *)this + 2);
              }
              else
              {
                v156 = 0;
              }
              uint64_t v175 = &v156[4 * v152];
              *(_DWORD *)uint64_t v175 = 0;
              uint64_t v135 = v175 + 4;
              while (v134 != v151)
              {
                int v176 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *((void *)this + 1) = v175;
              *((void *)this + 2) = v135;
              *((void *)this + 3) = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
            }
            else
            {
              *(_DWORD *)v134 = 0;
              uint64_t v135 = v134 + 4;
            }
            *((void *)this + 2) = v135;
            goto LABEL_286;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v34 = *((void *)a2 + 1);
          unint64_t v35 = *((void *)a2 + 2);
          while (v34 < v35 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v37 = (char *)*((void *)this + 2);
            unint64_t v36 = *((void *)this + 3);
            if ((unint64_t)v37 >= v36)
            {
              unint64_t v39 = (char *)*v12;
              uint64_t v40 = (v37 - (unsigned char *)*v12) >> 2;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62) {
                goto LABEL_349;
              }
              uint64_t v42 = v36 - (void)v39;
              if (v42 >> 1 > v41) {
                unint64_t v41 = v42 >> 1;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                char v44 = (char *)sub_100024458((uint64_t)v13, v43);
                unint64_t v39 = (char *)*((void *)this + 1);
                uint64_t v37 = (char *)*((void *)this + 2);
              }
              else
              {
                char v44 = 0;
              }
              unint64_t v45 = &v44[4 * v40];
              *(_DWORD *)unint64_t v45 = 0;
              char v38 = v45 + 4;
              while (v37 != v39)
              {
                int v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *((void *)this + 1) = v45;
              *((void *)this + 2) = v38;
              *((void *)this + 3) = &v44[4 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v37 = 0;
              char v38 = v37 + 4;
            }
            *((void *)this + 2) = v38;
            unint64_t v47 = *((void *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
              goto LABEL_226;
            }
            *(v38 - 1) = *(_DWORD *)(*(void *)a2 + v47);
            unint64_t v35 = *((void *)a2 + 2);
            unint64_t v34 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v34;
          }
          goto LABEL_227;
        case 3u:
          *((unsigned char *)this + 140) |= 4u;
          unint64_t v48 = *((void *)a2 + 1);
          unint64_t v49 = *((void *)a2 + 2);
          uint64_t v50 = *(void *)a2;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            char v51 = 0;
            unsigned int v52 = 0;
            uint64_t v53 = 0;
            do
            {
              unint64_t v54 = v48 + 1;
              *((void *)a2 + 1) = v48 + 1;
              char v55 = *(unsigned char *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0) {
                goto LABEL_268;
              }
              v51 += 7;
              unint64_t v48 = v54;
              BOOL v91 = v52++ > 8;
            }
            while (!v91);
LABEL_211:
            LODWORD(v53) = 0;
            goto LABEL_268;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v53 = 0;
          if (v49 <= v48) {
            unint64_t v49 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v138 = v48 + 1;
              char v139 = *(unsigned char *)(v50 + v48);
              *((void *)a2 + 1) = v138;
              v53 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v48 = v138;
                BOOL v91 = v137++ > 8;
                if (v91) {
                  goto LABEL_211;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v53) = 0;
              }
            }
            break;
          }
LABEL_268:
          *((_DWORD *)this + 30) = v53;
          goto LABEL_339;
        case 4u:
          if (v25 != 2)
          {
            uint64_t v141 = (char *)*((void *)this + 11);
            unint64_t v140 = *((void *)this + 12);
            if ((unint64_t)v141 >= v140)
            {
              uint64_t v157 = (char *)*v10;
              uint64_t v158 = (v141 - (unsigned char *)*v10) >> 2;
              unint64_t v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62) {
LABEL_350:
              }
                sub_10000EE98();
              uint64_t v160 = v140 - (void)v157;
              if (v160 >> 1 > v159) {
                unint64_t v159 = v160 >> 1;
              }
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v161 = v159;
              }
              if (v161)
              {
                v162 = (char *)sub_100024458((uint64_t)v11, v161);
                uint64_t v157 = (char *)*((void *)this + 10);
                uint64_t v141 = (char *)*((void *)this + 11);
              }
              else
              {
                v162 = 0;
              }
              BOOL v177 = &v162[4 * v158];
              *(_DWORD *)BOOL v177 = 0;
              uint64_t v135 = v177 + 4;
              while (v141 != v157)
              {
                int v178 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *((void *)this + 10) = v177;
              *((void *)this + 11) = v135;
              *((void *)this + 12) = &v162[4 * v161];
              if (v157) {
                operator delete(v157);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v135 = v141 + 4;
            }
            *((void *)this + 11) = v135;
LABEL_286:
            unint64_t v179 = *((void *)a2 + 1);
            if (v179 <= 0xFFFFFFFFFFFFFFFBLL && v179 + 4 <= *((void *)a2 + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(void *)a2 + v179);
LABEL_290:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_288:
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_339;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          while (v56 < v57 && !*((unsigned char *)a2 + 24))
          {
            char v59 = (char *)*((void *)this + 11);
            unint64_t v58 = *((void *)this + 12);
            if ((unint64_t)v59 >= v58)
            {
              uint64_t v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_350;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unsigned int v66 = (char *)sub_100024458((uint64_t)v11, v65);
                uint64_t v61 = (char *)*((void *)this + 10);
                char v59 = (char *)*((void *)this + 11);
              }
              else
              {
                unsigned int v66 = 0;
              }
              uint64_t v67 = &v66[4 * v62];
              *(_DWORD *)uint64_t v67 = 0;
              unsigned int v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((void *)this + 10) = v67;
              *((void *)this + 11) = v60;
              *((void *)this + 12) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)char v59 = 0;
              unsigned int v60 = v59 + 4;
            }
            *((void *)this + 11) = v60;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2))
            {
LABEL_226:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_227;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
            unint64_t v57 = *((void *)a2 + 2);
            unint64_t v56 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v56;
          }
          goto LABEL_227;
        case 5u:
          *((unsigned char *)this + 140) |= 2u;
          unint64_t v70 = *((void *)a2 + 1);
          unint64_t v71 = *((void *)a2 + 2);
          uint64_t v72 = *(void *)a2;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)a2 + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_271;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v91 = v74++ > 8;
            }
            while (!v91);
LABEL_220:
            uint64_t v75 = 0;
            goto LABEL_271;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v144 = v70 + 1;
              char v145 = *(unsigned char *)(v72 + v70);
              *((void *)a2 + 1) = v144;
              v75 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v70 = v144;
                BOOL v91 = v143++ > 8;
                if (v91) {
                  goto LABEL_220;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v75 = 0;
              }
            }
            break;
          }
LABEL_271:
          *((void *)this + 14) = v75;
          goto LABEL_339;
        case 6u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v78 = (char *)*((void *)this + 5);
              do
              {
                if ((unint64_t)v78 >= *v9)
                {
                  char v79 = (char *)*v207;
                  uint64_t v80 = (v78 - (unsigned char *)*v207) >> 2;
                  unint64_t v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62) {
                    goto LABEL_351;
                  }
                  uint64_t v82 = *v9 - (void)v79;
                  if (v82 >> 1 > v81) {
                    unint64_t v81 = v82 >> 1;
                  }
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v81;
                  }
                  if (v83)
                  {
                    unsigned int v84 = (char *)sub_100024458((uint64_t)v9, v83);
                    char v79 = (char *)*((void *)this + 4);
                    char v78 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    unsigned int v84 = 0;
                  }
                  unint64_t v85 = &v84[4 * v80];
                  *(_DWORD *)unint64_t v85 = 0;
                  char v86 = v85 + 4;
                  while (v78 != v79)
                  {
                    int v87 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v85 - 1) = v87;
                    v85 -= 4;
                  }
                  *((void *)this + 4) = v85;
                  *((void *)this + 5) = v86;
                  *((void *)this + 6) = &v84[4 * v83];
                  if (v79) {
                    operator delete(v79);
                  }
                  char v78 = v86;
                }
                else
                {
                  *(_DWORD *)char v78 = 0;
                  v78 += 4;
                }
                *((void *)this + 5) = v78;
                unint64_t v89 = *((void *)a2 + 1);
                unint64_t v88 = *((void *)a2 + 2);
                uint64_t v90 = *(void *)a2;
                BOOL v91 = v89 > 0xFFFFFFFFFFFFFFF5 || v89 + 10 > v88;
                if (v91)
                {
                  char v92 = 0;
                  unsigned int v93 = 0;
                  uint64_t v99 = 0;
                  if (v88 <= v89) {
                    uint64_t v94 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v94 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v94 == v89) {
                      goto LABEL_225;
                    }
                    unint64_t v95 = v89++;
                    char v96 = *(unsigned char *)(v90 + v95);
                    *((void *)a2 + 1) = v89;
                    v99 |= (unint64_t)(v96 & 0x7F) << v92;
                    if ((v96 & 0x80) == 0) {
                      break;
                    }
                    v92 += 7;
                    BOOL v91 = v93++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v99) = 0;
                  }
LABEL_135:
                  unint64_t v100 = v95 + 1;
                }
                else
                {
                  char v97 = 0;
                  unsigned int v98 = 0;
                  uint64_t v99 = 0;
                  while (1)
                  {
                    unint64_t v100 = v89 + 1;
                    *((void *)a2 + 1) = v89 + 1;
                    char v101 = *(unsigned char *)(v90 + v89);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0) {
                      break;
                    }
                    v97 += 7;
                    unint64_t v89 = v100;
                    BOOL v91 = v98++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v78 - 1) = v99;
              }
              while (v100 < v88 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_227;
          }
          v147 = (char *)*((void *)this + 5);
          unint64_t v146 = *((void *)this + 6);
          if ((unint64_t)v147 >= v146)
          {
            uint64_t v163 = (char *)*v207;
            uint64_t v164 = (v147 - (unsigned char *)*v207) >> 2;
            unint64_t v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62) {
LABEL_351:
            }
              sub_10000EE98();
            uint64_t v166 = v146 - (void)v163;
            if (v166 >> 1 > v165) {
              unint64_t v165 = v166 >> 1;
            }
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v167 = v165;
            }
            if (v167)
            {
              v168 = (char *)sub_100024458((uint64_t)v9, v167);
              uint64_t v163 = (char *)*((void *)this + 4);
              v147 = (char *)*((void *)this + 5);
            }
            else
            {
              v168 = 0;
            }
            uint64_t v180 = &v168[4 * v164];
            *(_DWORD *)uint64_t v180 = 0;
            uint64_t v148 = v180 + 4;
            while (v147 != v163)
            {
              int v181 = *((_DWORD *)v147 - 1);
              v147 -= 4;
              *((_DWORD *)v180 - 1) = v181;
              v180 -= 4;
            }
            *((void *)this + 4) = v180;
            *((void *)this + 5) = v148;
            *((void *)this + 6) = &v168[4 * v167];
            if (v163) {
              operator delete(v163);
            }
          }
          else
          {
            *(_DWORD *)v147 = 0;
            uint64_t v148 = v147 + 4;
          }
          *((void *)this + 5) = v148;
          unint64_t v182 = *((void *)a2 + 1);
          unint64_t v183 = *((void *)a2 + 2);
          uint64_t v184 = *(void *)a2;
          char v185 = 0;
          unsigned int v186 = 0;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            uint64_t v190 = 0;
            while (1)
            {
              unint64_t v191 = v182 + 1;
              *((void *)a2 + 1) = v182 + 1;
              char v192 = *(unsigned char *)(v184 + v182);
              v190 |= (unint64_t)(v192 & 0x7F) << v185;
              if ((v192 & 0x80) == 0) {
                goto LABEL_338;
              }
              v185 += 7;
              unint64_t v182 = v191;
              BOOL v91 = v186++ > 8;
              if (v91) {
                goto LABEL_334;
              }
            }
          }
          uint64_t v190 = 0;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)a2 + 1);
          }
          while (v183 != v182)
          {
            unint64_t v188 = v182 + 1;
            char v189 = *(unsigned char *)(v184 + v182);
            *((void *)a2 + 1) = v188;
            v190 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0) {
              goto LABEL_336;
            }
            v185 += 7;
            unint64_t v182 = v188;
            BOOL v91 = v186++ > 8;
            if (v91) {
              goto LABEL_334;
            }
          }
          goto LABEL_335;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              char v78 = (char *)*((void *)this + 8);
              do
              {
                if ((unint64_t)v78 >= *v8)
                {
                  char v102 = (char *)*v208;
                  uint64_t v103 = (v78 - (unsigned char *)*v208) >> 2;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62) {
                    goto LABEL_352;
                  }
                  uint64_t v105 = *v8 - (void)v102;
                  if (v105 >> 1 > v104) {
                    unint64_t v104 = v105 >> 1;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    uint64_t v107 = (char *)sub_100024458((uint64_t)v8, v106);
                    char v102 = (char *)*((void *)this + 7);
                    char v78 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v107 = 0;
                  }
                  float v108 = &v107[4 * v103];
                  *(_DWORD *)float v108 = 0;
                  BOOL v109 = v108 + 4;
                  while (v78 != v102)
                  {
                    int v110 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v108 - 1) = v110;
                    v108 -= 4;
                  }
                  *((void *)this + 7) = v108;
                  *((void *)this + 8) = v109;
                  *((void *)this + 9) = &v107[4 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                  char v78 = v109;
                }
                else
                {
                  *(_DWORD *)char v78 = 0;
                  v78 += 4;
                }
                *((void *)this + 8) = v78;
                unint64_t v112 = *((void *)a2 + 1);
                unint64_t v111 = *((void *)a2 + 2);
                uint64_t v113 = *(void *)a2;
                if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v111)
                {
                  char v120 = 0;
                  unsigned int v121 = 0;
                  uint64_t v122 = 0;
                  while (1)
                  {
                    unint64_t v123 = v112 + 1;
                    *((void *)a2 + 1) = v112 + 1;
                    char v124 = *(unsigned char *)(v113 + v112);
                    v122 |= (unint64_t)(v124 & 0x7F) << v120;
                    if ((v124 & 0x80) == 0) {
                      goto LABEL_181;
                    }
                    v120 += 7;
                    unint64_t v112 = v123;
                    BOOL v91 = v121++ > 8;
                    if (v91)
                    {
                      LODWORD(v122) = 0;
                      goto LABEL_181;
                    }
                  }
                }
                char v115 = 0;
                unsigned int v116 = 0;
                uint64_t v122 = 0;
                if (v111 <= v112) {
                  uint64_t v117 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v117 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v117 == v112)
                  {
LABEL_225:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v78 - 1) = 0;
                    goto LABEL_227;
                  }
                  unint64_t v118 = v112++;
                  char v119 = *(unsigned char *)(v113 + v118);
                  *((void *)a2 + 1) = v112;
                  v122 |= (unint64_t)(v119 & 0x7F) << v115;
                  if ((v119 & 0x80) == 0) {
                    break;
                  }
                  v115 += 7;
                  BOOL v91 = v116++ > 8;
                  if (v91)
                  {
                    LODWORD(v122) = 0;
                    goto LABEL_180;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v122) = 0;
                }
LABEL_180:
                unint64_t v123 = v118 + 1;
LABEL_181:
                *((_DWORD *)v78 - 1) = v122;
              }
              while (v123 < v111 && !*((unsigned char *)a2 + 24));
            }
LABEL_227:
            PB::Reader::recallMark();
          }
          else
          {
            v150 = (char *)*((void *)this + 8);
            unint64_t v149 = *((void *)this + 9);
            if ((unint64_t)v150 >= v149)
            {
              v169 = (char *)*v208;
              uint64_t v170 = (v150 - (unsigned char *)*v208) >> 2;
              unint64_t v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62) {
LABEL_352:
              }
                sub_10000EE98();
              uint64_t v172 = v149 - (void)v169;
              if (v172 >> 1 > v171) {
                unint64_t v171 = v172 >> 1;
              }
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v173 = v171;
              }
              if (v173)
              {
                BOOL v174 = (char *)sub_100024458((uint64_t)v8, v173);
                v169 = (char *)*((void *)this + 7);
                v150 = (char *)*((void *)this + 8);
              }
              else
              {
                BOOL v174 = 0;
              }
              v193 = &v174[4 * v170];
              *(_DWORD *)v193 = 0;
              uint64_t v148 = v193 + 4;
              while (v150 != v169)
              {
                int v194 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v193 - 1) = v194;
                v193 -= 4;
              }
              *((void *)this + 7) = v193;
              *((void *)this + 8) = v148;
              *((void *)this + 9) = &v174[4 * v173];
              if (v169) {
                operator delete(v169);
              }
            }
            else
            {
              *(_DWORD *)v150 = 0;
              uint64_t v148 = v150 + 4;
            }
            *((void *)this + 8) = v148;
            unint64_t v195 = *((void *)a2 + 1);
            unint64_t v196 = *((void *)a2 + 2);
            uint64_t v197 = *(void *)a2;
            char v198 = 0;
            unsigned int v199 = 0;
            if (v195 > 0xFFFFFFFFFFFFFFF5 || v195 + 10 > v196)
            {
              uint64_t v190 = 0;
              if (v196 <= v195) {
                unint64_t v196 = *((void *)a2 + 1);
              }
              while (v196 != v195)
              {
                unint64_t v201 = v195 + 1;
                char v202 = *(unsigned char *)(v197 + v195);
                *((void *)a2 + 1) = v201;
                v190 |= (unint64_t)(v202 & 0x7F) << v198;
                if ((v202 & 0x80) == 0)
                {
LABEL_336:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v190) = 0;
                  }
                  goto LABEL_338;
                }
                v198 += 7;
                unint64_t v195 = v201;
                BOOL v91 = v199++ > 8;
                if (v91)
                {
LABEL_334:
                  LODWORD(v190) = 0;
                  goto LABEL_338;
                }
              }
LABEL_335:
              LODWORD(v190) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v190 = 0;
              while (1)
              {
                unint64_t v203 = v195 + 1;
                *((void *)a2 + 1) = v195 + 1;
                char v204 = *(unsigned char *)(v197 + v195);
                v190 |= (unint64_t)(v204 & 0x7F) << v198;
                if ((v204 & 0x80) == 0) {
                  break;
                }
                v198 += 7;
                unint64_t v195 = v203;
                BOOL v91 = v199++ > 8;
                if (v91) {
                  goto LABEL_334;
                }
              }
            }
LABEL_338:
            *(v148 - 1) = v190;
          }
LABEL_339:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 8u:
          *((unsigned char *)this + 140) |= 0x20u;
          unint64_t v125 = *((void *)a2 + 1);
          if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2)) {
            goto LABEL_288;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v125);
          goto LABEL_290;
        case 9u:
          *((unsigned char *)this + 140) |= 8u;
          unint64_t v126 = *((void *)a2 + 1);
          if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)a2 + 2)) {
            goto LABEL_288;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v126);
          goto LABEL_290;
        case 0xAu:
          *((unsigned char *)this + 140) |= 0x10u;
          unint64_t v127 = *((void *)a2 + 1);
          if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)a2 + 2)) {
            goto LABEL_288;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v127);
          goto LABEL_290;
        case 0xBu:
          *((unsigned char *)this + 140) |= 0x40u;
          unint64_t v128 = *((void *)a2 + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
            goto LABEL_288;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v128);
          goto LABEL_290;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_339;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaActivityPhone::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 140)) {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 104), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  if ((*(unsigned char *)(v3 + 140) & 4) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 3u);
  }
  float v7 = *(float **)(v3 + 80);
  char v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 4u);
  }
  if ((*(unsigned char *)(v3 + 140) & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 112), 5u);
  }
  uint64_t v10 = *(unsigned int **)(v3 + 32);
  unsigned int v11 = *(unsigned int **)(v3 + 40);
  while (v10 != v11)
  {
    unsigned int v12 = *v10++;
    this = PB::Writer::writeVarInt(a2, v12, 6u);
  }
  uint64_t v13 = *(unsigned int **)(v3 + 56);
  uint64_t v14 = *(unsigned int **)(v3 + 64);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    this = PB::Writer::writeVarInt(a2, v15, 7u);
  }
  char v16 = *(unsigned char *)(v3 + 140);
  if ((v16 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 132), 8u);
    char v16 = *(unsigned char *)(v3 + 140);
    if ((v16 & 8) == 0)
    {
LABEL_21:
      if ((v16 & 0x10) == 0) {
        goto LABEL_22;
      }
LABEL_26:
      this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
      if ((*(unsigned char *)(v3 + 140) & 0x40) == 0) {
        return this;
      }
      goto LABEL_27;
    }
  }
  else if ((*(unsigned char *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 9u);
  char v16 = *(unsigned char *)(v3 + 140);
  if ((v16 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_22:
  if ((v16 & 0x40) == 0) {
    return this;
  }
LABEL_27:
  float v17 = *(float *)(v3 + 136);

  return PB::Writer::write(a2, v17, 0xBu);
}

uint64_t CMMsl::KappaActivityPhone::hash_value(CMMsl::KappaActivityPhone *this)
{
  if (*((unsigned char *)this + 140)) {
    uint64_t v2 = *((void *)this + 13);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  if ((*((unsigned char *)this + 140) & 4) != 0) {
    uint64_t v4 = *((unsigned int *)this + 30);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = PBHashBytes();
  if ((*((unsigned char *)this + 140) & 2) != 0) {
    uint64_t v6 = *((void *)this + 14);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  if ((*((unsigned char *)this + 140) & 0x20) == 0)
  {
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 140) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 140) & 0x10) != 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  float v16 = *((float *)this + 33);
  uint64_t v9 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 140) & 8) == 0) {
    goto LABEL_24;
  }
LABEL_12:
  float v10 = *((float *)this + 31);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 140) & 0x10) != 0)
  {
LABEL_15:
    float v12 = *((float *)this + 32);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 140) & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_26:
    uint64_t v15 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_25:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 140) & 0x40) == 0) {
    goto LABEL_26;
  }
LABEL_18:
  float v14 = *((float *)this + 34);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v13 ^ v15;
}

void CMMsl::KappaActivityWatch::~KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  *(void *)this = off_1003A6940;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaActivityWatch::~KappaActivityWatch(this);

  operator delete();
}

CMMsl::KappaActivityWatch *CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this, const CMMsl::KappaActivityWatch *a2)
{
  *(void *)this = off_1003A6940;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((_WORD *)a2 + 52))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((_WORD *)this + 52) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2) {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  __int16 v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x100) != 0)
  {
    int v12 = *((_DWORD *)a2 + 25);
    *((_WORD *)this + 52) |= 0x100u;
    *((_DWORD *)this + 25) = v12;
    __int16 v6 = *((_WORD *)a2 + 52);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  int v13 = *((_DWORD *)a2 + 23);
  *((_WORD *)this + 52) |= 0x40u;
  *((_DWORD *)this + 23) = v13;
  __int16 v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v14 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 52) |= 0x80u;
  *((_DWORD *)this + 24) = v14;
  __int16 v6 = *((_WORD *)a2 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v15 = *((_DWORD *)a2 + 22);
  *((_WORD *)this + 52) |= 0x20u;
  *((_DWORD *)this + 22) = v15;
  __int16 v6 = *((_WORD *)a2 + 52);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  uint64_t v16 = *((void *)a2 + 8);
  *((_WORD *)this + 52) |= 2u;
  *((void *)this + 8) = v16;
  if ((*((_WORD *)a2 + 52) & 4) != 0)
  {
LABEL_11:
    uint64_t v7 = *((void *)a2 + 9);
    *((_WORD *)this + 52) |= 4u;
    *((void *)this + 9) = v7;
  }
LABEL_12:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  __int16 v8 = *((_WORD *)a2 + 52);
  if ((v8 & 0x10) != 0)
  {
    int v9 = *((_DWORD *)a2 + 21);
    *((_WORD *)this + 52) |= 0x10u;
    *((_DWORD *)this + 21) = v9;
    __int16 v8 = *((_WORD *)a2 + 52);
  }
  if ((v8 & 8) != 0)
  {
    int v10 = *((_DWORD *)a2 + 20);
    *((_WORD *)this + 52) |= 8u;
    *((_DWORD *)this + 20) = v10;
  }
  return this;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, const CMMsl::KappaActivityWatch *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((CMMsl::KappaActivityWatch *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaActivityWatch *a2, CMMsl::KappaActivityWatch *a3)
{
  int v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v7 = *((void *)this + 6);
  uint64_t v6 = *((void *)this + 7);
  uint64_t v8 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v8;
  *((void *)a2 + 6) = v7;
  *((void *)a2 + 7) = v6;
  int v9 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v9;
  int v10 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v10;
  int v11 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  int v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  float result = *((float *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((float *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::KappaActivityWatch::KappaActivityWatch(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6940;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

CMMsl *CMMsl::KappaActivityWatch::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaActivityWatch::KappaActivityWatch((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaActivityWatch *)v5, v3);
    CMMsl::KappaActivityWatch::~KappaActivityWatch((CMMsl::KappaActivityWatch *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaActivityWatch::formatText(CMMsl::KappaActivityWatch *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "sessionGreenFieldPercentage", *((float *)this + 20));
    __int16 v5 = *((_WORD *)this + 52);
  }
  if ((v5 & 0x10) != 0) {
    PB::TextFormatter::format(a2, "sessionHighRotationPercentage", *((float *)this + 21));
  }
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  uint64_t v7 = (unsigned int *)*((void *)this + 2);
  while (v6 != v7)
  {
    unsigned int v8 = *v6++;
    PB::TextFormatter::format(a2, "sessionMeanPoseAngleXHistogram", v8);
  }
  __int16 v9 = *((_WORD *)this + 52);
  if (v9)
  {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 7));
    __int16 v9 = *((_WORD *)this + 52);
    if ((v9 & 0x20) == 0)
    {
LABEL_9:
      if ((v9 & 2) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
  }
  else if ((v9 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "triggerTimeInternalDrivingState", *((_DWORD *)this + 22));
  __int16 v9 = *((_WORD *)this + 52);
  if ((v9 & 2) == 0)
  {
LABEL_10:
    if ((v9 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "triggerTimeLastHighElevationGainTimestamp", *((void *)this + 8));
  __int16 v9 = *((_WORD *)this + 52);
  if ((v9 & 4) == 0)
  {
LABEL_11:
    if ((v9 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "triggerTimeLastHighImuDrivingConfidenceTimestamp", *((void *)this + 9));
  __int16 v9 = *((_WORD *)this + 52);
  if ((v9 & 0x40) == 0)
  {
LABEL_12:
    if ((v9 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "windowAfterArmGreenFieldPercentage", *((float *)this + 23));
  __int16 v9 = *((_WORD *)this + 52);
  if ((v9 & 0x80) == 0)
  {
LABEL_13:
    if ((v9 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "windowAfterArmHighImuDrivingConfidencePercentage", *((float *)this + 24));
  if ((*((_WORD *)this + 52) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "windowAfterArmHighRotationPercentage", *((float *)this + 25));
LABEL_15:
  int v10 = (unsigned int *)*((void *)this + 4);
  int v11 = (unsigned int *)*((void *)this + 5);
  while (v10 != v11)
  {
    unsigned int v12 = *v10++;
    PB::TextFormatter::format(a2, "windowAfterArmMeanPoseAngleXHistogram", v12);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaActivityWatch::readFrom(CMMsl::KappaActivityWatch *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    unsigned int v8 = (void **)((char *)this + 8);
    __int16 v9 = (void *)((char *)this + 24);
    int v10 = (void **)((char *)this + 32);
    int v11 = (void *)((char *)this + 48);
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v45 = v14++ > 8;
        if (v45) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v23 = v15 & 7;
      if (v23 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 52) |= 1u;
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          uint64_t v26 = *(void *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)a2 + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_216;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v45 = v28++ > 8;
            }
            while (!v45);
LABEL_164:
            uint64_t v29 = 0;
            goto LABEL_216;
          }
          char v108 = 0;
          unsigned int v109 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              uint64_t v29 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v110 = v24 + 1;
              char v111 = *(unsigned char *)(v26 + v24);
              *((void *)a2 + 1) = v110;
              v29 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                unint64_t v24 = v110;
                BOOL v45 = v109++ > 8;
                if (v45) {
                  goto LABEL_164;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v29 = 0;
              }
            }
            break;
          }
LABEL_216:
          *((void *)this + 7) = v29;
          goto LABEL_274;
        case 2u:
          if (v23 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v32 = (char *)*((void *)this + 5);
              do
              {
                if ((unint64_t)v32 >= *v11)
                {
                  char v33 = (char *)*v10;
                  uint64_t v34 = (v32 - (unsigned char *)*v10) >> 2;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62) {
                    goto LABEL_284;
                  }
                  uint64_t v36 = *v11 - (void)v33;
                  if (v36 >> 1 > v35) {
                    unint64_t v35 = v36 >> 1;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    char v38 = (char *)sub_100024458((uint64_t)v11, v37);
                    char v33 = (char *)*((void *)this + 4);
                    unint64_t v32 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    char v38 = 0;
                  }
                  unint64_t v39 = &v38[4 * v34];
                  *(_DWORD *)unint64_t v39 = 0;
                  uint64_t v40 = v39 + 4;
                  while (v32 != v33)
                  {
                    int v41 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 -= 4;
                  }
                  *((void *)this + 4) = v39;
                  *((void *)this + 5) = v40;
                  *((void *)this + 6) = &v38[4 * v37];
                  if (v33) {
                    operator delete(v33);
                  }
                  unint64_t v32 = v40;
                }
                else
                {
                  *(_DWORD *)unint64_t v32 = 0;
                  v32 += 4;
                }
                *((void *)this + 5) = v32;
                unint64_t v43 = *((void *)a2 + 1);
                unint64_t v42 = *((void *)a2 + 2);
                uint64_t v44 = *(void *)a2;
                BOOL v45 = v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v42;
                if (v45)
                {
                  char v46 = 0;
                  unsigned int v47 = 0;
                  uint64_t v53 = 0;
                  if (v42 <= v43) {
                    uint64_t v48 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v48 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v48 == v43) {
                      goto LABEL_190;
                    }
                    unint64_t v49 = v43++;
                    char v50 = *(unsigned char *)(v44 + v49);
                    *((void *)a2 + 1) = v43;
                    v53 |= (unint64_t)(v50 & 0x7F) << v46;
                    if ((v50 & 0x80) == 0) {
                      break;
                    }
                    v46 += 7;
                    BOOL v45 = v47++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v53) = 0;
                  }
LABEL_71:
                  unint64_t v54 = v49 + 1;
                }
                else
                {
                  char v51 = 0;
                  unsigned int v52 = 0;
                  uint64_t v53 = 0;
                  while (1)
                  {
                    unint64_t v54 = v43 + 1;
                    *((void *)a2 + 1) = v43 + 1;
                    char v55 = *(unsigned char *)(v44 + v43);
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0) {
                      break;
                    }
                    v51 += 7;
                    unint64_t v43 = v54;
                    BOOL v45 = v52++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v32 - 1) = v53;
              }
              while (v54 < v42 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_191;
          }
          uint64_t v113 = (char *)*((void *)this + 5);
          unint64_t v112 = *((void *)this + 6);
          if ((unint64_t)v113 >= v112)
          {
            char v129 = (char *)*v10;
            uint64_t v130 = (v113 - (unsigned char *)*v10) >> 2;
            unint64_t v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 62) {
LABEL_284:
            }
              sub_10000EE98();
            uint64_t v132 = v112 - (void)v129;
            if (v132 >> 1 > v131) {
              unint64_t v131 = v132 >> 1;
            }
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v133 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v133 = v131;
            }
            if (v133)
            {
              v134 = (char *)sub_100024458((uint64_t)v11, v133);
              char v129 = (char *)*((void *)this + 4);
              uint64_t v113 = (char *)*((void *)this + 5);
            }
            else
            {
              v134 = 0;
            }
            uint64_t v141 = &v134[4 * v130];
            *(_DWORD *)uint64_t v141 = 0;
            BOOL v114 = v141 + 4;
            while (v113 != v129)
            {
              int v142 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *((_DWORD *)v141 - 1) = v142;
              v141 -= 4;
            }
            *((void *)this + 4) = v141;
            *((void *)this + 5) = v114;
            *((void *)this + 6) = &v134[4 * v133];
            if (v129) {
              operator delete(v129);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v113 = 0;
            BOOL v114 = v113 + 4;
          }
          *((void *)this + 5) = v114;
          unint64_t v143 = *((void *)a2 + 1);
          unint64_t v144 = *((void *)a2 + 2);
          uint64_t v145 = *(void *)a2;
          char v146 = 0;
          unsigned int v147 = 0;
          if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
          {
            uint64_t v151 = 0;
            while (1)
            {
              unint64_t v152 = v143 + 1;
              *((void *)a2 + 1) = v143 + 1;
              char v153 = *(unsigned char *)(v145 + v143);
              v151 |= (unint64_t)(v153 & 0x7F) << v146;
              if ((v153 & 0x80) == 0) {
                goto LABEL_273;
              }
              v146 += 7;
              unint64_t v143 = v152;
              BOOL v45 = v147++ > 8;
              if (v45) {
                goto LABEL_269;
              }
            }
          }
          uint64_t v151 = 0;
          if (v144 <= v143) {
            unint64_t v144 = *((void *)a2 + 1);
          }
          while (v144 != v143)
          {
            unint64_t v149 = v143 + 1;
            char v150 = *(unsigned char *)(v145 + v143);
            *((void *)a2 + 1) = v149;
            v151 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0) {
              goto LABEL_271;
            }
            v146 += 7;
            unint64_t v143 = v149;
            BOOL v45 = v147++ > 8;
            if (v45) {
              goto LABEL_269;
            }
          }
          goto LABEL_270;
        case 3u:
          *((_WORD *)this + 52) |= 0x100u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_157;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_193;
        case 4u:
          *((_WORD *)this + 52) |= 0x40u;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
            goto LABEL_157;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v57);
          goto LABEL_193;
        case 5u:
          *((_WORD *)this + 52) |= 0x80u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2)) {
            goto LABEL_157;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v58);
          goto LABEL_193;
        case 6u:
          *((_WORD *)this + 52) |= 0x20u;
          unint64_t v59 = *((void *)a2 + 1);
          unint64_t v60 = *((void *)a2 + 2);
          uint64_t v61 = *(void *)a2;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)a2 + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_219;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v45 = v63++ > 8;
            }
            while (!v45);
LABEL_173:
            LODWORD(v64) = 0;
            goto LABEL_219;
          }
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v117 = v59 + 1;
              char v118 = *(unsigned char *)(v61 + v59);
              *((void *)a2 + 1) = v117;
              v64 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                unint64_t v59 = v117;
                BOOL v45 = v116++ > 8;
                if (v45) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v64) = 0;
              }
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 22) = v64;
          goto LABEL_274;
        case 7u:
          *((_WORD *)this + 52) |= 2u;
          unint64_t v67 = *((void *)a2 + 1);
          unint64_t v68 = *((void *)a2 + 2);
          uint64_t v69 = *(void *)a2;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            char v70 = 0;
            unsigned int v71 = 0;
            uint64_t v72 = 0;
            do
            {
              unint64_t v73 = v67 + 1;
              *((void *)a2 + 1) = v67 + 1;
              char v74 = *(unsigned char *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0) {
                goto LABEL_222;
              }
              v70 += 7;
              unint64_t v67 = v73;
              BOOL v45 = v71++ > 8;
            }
            while (!v45);
LABEL_180:
            uint64_t v72 = 0;
            goto LABEL_222;
          }
          char v119 = 0;
          unsigned int v120 = 0;
          uint64_t v72 = 0;
          if (v68 <= v67) {
            unint64_t v68 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v68 == v67)
            {
              uint64_t v72 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v121 = v67 + 1;
              char v122 = *(unsigned char *)(v69 + v67);
              *((void *)a2 + 1) = v121;
              v72 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                unint64_t v67 = v121;
                BOOL v45 = v120++ > 8;
                if (v45) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v72 = 0;
              }
            }
            break;
          }
LABEL_222:
          *((void *)this + 8) = v72;
          goto LABEL_274;
        case 8u:
          *((_WORD *)this + 52) |= 4u;
          unint64_t v75 = *((void *)a2 + 1);
          unint64_t v76 = *((void *)a2 + 2);
          uint64_t v77 = *(void *)a2;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            char v78 = 0;
            unsigned int v79 = 0;
            uint64_t v80 = 0;
            do
            {
              unint64_t v81 = v75 + 1;
              *((void *)a2 + 1) = v75 + 1;
              char v82 = *(unsigned char *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0) {
                goto LABEL_225;
              }
              v78 += 7;
              unint64_t v75 = v81;
              BOOL v45 = v79++ > 8;
            }
            while (!v45);
LABEL_187:
            uint64_t v80 = 0;
            goto LABEL_225;
          }
          char v123 = 0;
          unsigned int v124 = 0;
          uint64_t v80 = 0;
          if (v76 <= v75) {
            unint64_t v76 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v76 == v75)
            {
              uint64_t v80 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v125 = v75 + 1;
              char v126 = *(unsigned char *)(v77 + v75);
              *((void *)a2 + 1) = v125;
              v80 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                unint64_t v75 = v125;
                BOOL v45 = v124++ > 8;
                if (v45) {
                  goto LABEL_187;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v80 = 0;
              }
            }
            break;
          }
LABEL_225:
          *((void *)this + 9) = v80;
          goto LABEL_274;
        case 9u:
          if (v23 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v32 = (char *)*((void *)this + 2);
              do
              {
                if ((unint64_t)v32 >= *v9)
                {
                  unsigned int v84 = (char *)*v8;
                  uint64_t v85 = (v32 - (unsigned char *)*v8) >> 2;
                  unint64_t v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 62) {
                    goto LABEL_285;
                  }
                  uint64_t v87 = *v9 - (void)v84;
                  if (v87 >> 1 > v86) {
                    unint64_t v86 = v87 >> 1;
                  }
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v88 = v86;
                  }
                  if (v88)
                  {
                    unint64_t v89 = (char *)sub_100024458((uint64_t)v9, v88);
                    unsigned int v84 = (char *)*((void *)this + 1);
                    unint64_t v32 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    unint64_t v89 = 0;
                  }
                  uint64_t v90 = &v89[4 * v85];
                  *(_DWORD *)uint64_t v90 = 0;
                  BOOL v91 = v90 + 4;
                  while (v32 != v84)
                  {
                    int v92 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v90 - 1) = v92;
                    v90 -= 4;
                  }
                  *((void *)this + 1) = v90;
                  *((void *)this + 2) = v91;
                  *((void *)this + 3) = &v89[4 * v88];
                  if (v84) {
                    operator delete(v84);
                  }
                  unint64_t v32 = v91;
                }
                else
                {
                  *(_DWORD *)unint64_t v32 = 0;
                  v32 += 4;
                }
                *((void *)this + 2) = v32;
                unint64_t v94 = *((void *)a2 + 1);
                unint64_t v93 = *((void *)a2 + 2);
                uint64_t v95 = *(void *)a2;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v93)
                {
                  char v102 = 0;
                  unsigned int v103 = 0;
                  uint64_t v104 = 0;
                  while (1)
                  {
                    unint64_t v105 = v94 + 1;
                    *((void *)a2 + 1) = v94 + 1;
                    char v106 = *(unsigned char *)(v95 + v94);
                    v104 |= (unint64_t)(v106 & 0x7F) << v102;
                    if ((v106 & 0x80) == 0) {
                      goto LABEL_152;
                    }
                    v102 += 7;
                    unint64_t v94 = v105;
                    BOOL v45 = v103++ > 8;
                    if (v45)
                    {
                      LODWORD(v104) = 0;
                      goto LABEL_152;
                    }
                  }
                }
                char v97 = 0;
                unsigned int v98 = 0;
                uint64_t v104 = 0;
                if (v93 <= v94) {
                  uint64_t v99 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v99 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v99 == v94)
                  {
LABEL_190:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v32 - 1) = 0;
                    goto LABEL_191;
                  }
                  unint64_t v100 = v94++;
                  char v101 = *(unsigned char *)(v95 + v100);
                  *((void *)a2 + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0) {
                    break;
                  }
                  v97 += 7;
                  BOOL v45 = v98++ > 8;
                  if (v45)
                  {
                    LODWORD(v104) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v104) = 0;
                }
LABEL_151:
                unint64_t v105 = v100 + 1;
LABEL_152:
                *((_DWORD *)v32 - 1) = v104;
              }
              while (v105 < v93 && !*((unsigned char *)a2 + 24));
            }
LABEL_191:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v128 = (char *)*((void *)this + 2);
            unint64_t v127 = *((void *)this + 3);
            if ((unint64_t)v128 >= v127)
            {
              uint64_t v135 = (char *)*v8;
              uint64_t v136 = (v128 - (unsigned char *)*v8) >> 2;
              unint64_t v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62) {
LABEL_285:
              }
                sub_10000EE98();
              uint64_t v138 = v127 - (void)v135;
              if (v138 >> 1 > v137) {
                unint64_t v137 = v138 >> 1;
              }
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v139 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v139 = v137;
              }
              if (v139)
              {
                unint64_t v140 = (char *)sub_100024458((uint64_t)v9, v139);
                uint64_t v135 = (char *)*((void *)this + 1);
                unint64_t v128 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v140 = 0;
              }
              uint64_t v154 = &v140[4 * v136];
              *(_DWORD *)uint64_t v154 = 0;
              BOOL v114 = v154 + 4;
              while (v128 != v135)
              {
                int v155 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *((void *)this + 1) = v154;
              *((void *)this + 2) = v114;
              *((void *)this + 3) = &v140[4 * v139];
              if (v135) {
                operator delete(v135);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v128 = 0;
              BOOL v114 = v128 + 4;
            }
            *((void *)this + 2) = v114;
            unint64_t v156 = *((void *)a2 + 1);
            unint64_t v157 = *((void *)a2 + 2);
            uint64_t v158 = *(void *)a2;
            char v159 = 0;
            unsigned int v160 = 0;
            if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v157)
            {
              uint64_t v151 = 0;
              if (v157 <= v156) {
                unint64_t v157 = *((void *)a2 + 1);
              }
              while (v157 != v156)
              {
                unint64_t v162 = v156 + 1;
                char v163 = *(unsigned char *)(v158 + v156);
                *((void *)a2 + 1) = v162;
                v151 |= (unint64_t)(v163 & 0x7F) << v159;
                if ((v163 & 0x80) == 0)
                {
LABEL_271:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v151) = 0;
                  }
                  goto LABEL_273;
                }
                v159 += 7;
                unint64_t v156 = v162;
                BOOL v45 = v160++ > 8;
                if (v45)
                {
LABEL_269:
                  LODWORD(v151) = 0;
                  goto LABEL_273;
                }
              }
LABEL_270:
              LODWORD(v151) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v151 = 0;
              while (1)
              {
                unint64_t v164 = v156 + 1;
                *((void *)a2 + 1) = v156 + 1;
                char v165 = *(unsigned char *)(v158 + v156);
                v151 |= (unint64_t)(v165 & 0x7F) << v159;
                if ((v165 & 0x80) == 0) {
                  break;
                }
                v159 += 7;
                unint64_t v156 = v164;
                BOOL v45 = v160++ > 8;
                if (v45) {
                  goto LABEL_269;
                }
              }
            }
LABEL_273:
            *(v114 - 1) = v151;
          }
LABEL_274:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0xAu:
          *((_WORD *)this + 52) |= 0x10u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_157;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_193;
        case 0xBu:
          *((_WORD *)this + 52) |= 8u;
          unint64_t v107 = *((void *)a2 + 1);
          if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v107);
LABEL_193:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_157:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_274;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v23, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_274;
      }
    }
    char v18 = 0;
    unsigned int v19 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v20 = v2 + 1;
      char v21 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_21;
      }
      v18 += 7;
      unint64_t v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaActivityWatch::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(_WORD *)(this + 104)) {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 56), 1u);
  }
  int v4 = *(unsigned int **)(v3 + 32);
  __int16 v5 = *(unsigned int **)(v3 + 40);
  while (v4 != v5)
  {
    unsigned int v6 = *v4++;
    this = PB::Writer::writeVarInt(a2, v6, 2u);
  }
  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 3u);
    __int16 v7 = *(_WORD *)(v3 + 104);
    if ((v7 & 0x40) == 0)
    {
LABEL_8:
      if ((v7 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_22;
    }
  }
  else if ((v7 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x80) == 0)
  {
LABEL_9:
    if ((v7 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 5u);
  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 7u);
    if ((*(_WORD *)(v3 + 104) & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 6u);
  __int16 v7 = *(_WORD *)(v3 + 104);
  if ((v7 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_11:
  if ((v7 & 4) != 0) {
LABEL_12:
  }
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 8u);
LABEL_13:
  unsigned int v8 = *(unsigned int **)(v3 + 8);
  __int16 v9 = *(unsigned int **)(v3 + 16);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 9u);
  }
  __int16 v11 = *(_WORD *)(v3 + 104);
  if ((v11 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xAu);
    __int16 v11 = *(_WORD *)(v3 + 104);
  }
  if ((v11 & 8) != 0)
  {
    float v12 = *(float *)(v3 + 80);
    return PB::Writer::write(a2, v12, 0xBu);
  }
  return this;
}

uint64_t CMMsl::KappaActivityWatch::hash_value(CMMsl::KappaActivityWatch *this)
{
  if (*((_WORD *)this + 52)) {
    uint64_t v2 = *((void *)this + 7);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  __int16 v4 = *((_WORD *)this + 52);
  if ((v4 & 0x100) == 0)
  {
    uint64_t v5 = 0;
    if ((v4 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v7 = 0;
    if ((v4 & 0x80) != 0) {
      goto LABEL_10;
    }
LABEL_22:
    uint64_t v9 = 0;
    if ((v4 & 0x20) != 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  float v13 = *((float *)this + 25);
  if (v13 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v13);
  }
  if ((v4 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  float v6 = *((float *)this + 23);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v4 & 0x80) == 0) {
    goto LABEL_22;
  }
LABEL_10:
  float v8 = *((float *)this + 24);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = LODWORD(v8);
  }
  if ((v4 & 0x20) != 0)
  {
LABEL_14:
    uint64_t v10 = *((unsigned int *)this + 22);
    if ((v4 & 2) != 0) {
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v11 = 0;
    if ((v4 & 4) != 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v10 = 0;
  if ((v4 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_15:
  uint64_t v11 = *((void *)this + 8);
  if ((v4 & 4) != 0)
  {
LABEL_16:
    uint64_t v12 = *((void *)this + 9);
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v12 = 0;
LABEL_26:
  uint64_t v14 = PBHashBytes();
  __int16 v15 = *((_WORD *)this + 52);
  if ((v15 & 0x10) != 0)
  {
    float v19 = *((float *)this + 21);
    uint64_t v16 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v16 = 0;
    }
    if ((v15 & 8) != 0) {
      goto LABEL_28;
    }
LABEL_34:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
  }
  uint64_t v16 = 0;
  if ((v15 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_28:
  float v17 = *((float *)this + 20);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18;
}

void CMMsl::KappaAirbagResult::~KappaAirbagResult(CMMsl::KappaAirbagResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this, const CMMsl::KappaAirbagResult *a2)
{
  *(void *)this = off_1003A6978;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) != 0)
  {
    char v4 = *((unsigned char *)a2 + 64);
    __int16 v3 = 1024;
    *(_WORD *)(this + 68) = 1024;
    *(unsigned char *)(this + 64) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x40u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 24) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 8) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_24:
    uint64_t v14 = *((void *)a2 + 4);
    *(_WORD *)(this + 68) = v3 | 8;
    *(void *)(this + 32) = v14;
    return this;
  }
LABEL_23:
  int v13 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v13;
  if ((*((_WORD *)a2 + 34) & 8) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *a1, const CMMsl::KappaAirbagResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaAirbagResult::KappaAirbagResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAirbagResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAirbagResult *a2, CMMsl::KappaAirbagResult *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v3;
  int v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  int v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  int v7 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  return result;
}

float CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6978;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return result;
}

CMMsl *CMMsl::KappaAirbagResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaAirbagResult::KappaAirbagResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAirbagResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaAirbagResult::formatText(CMMsl::KappaAirbagResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "diffPeakTimestampTrigger", *((_DWORD *)this + 10));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pass", *((unsigned char *)this + 64));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "peakTimestamp", *((void *)this + 3));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "pressureODR", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 4));
  if ((*((_WORD *)this + 34) & 0x200) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "width", *((float *)this + 15));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAirbagResult::readFrom(CMMsl::KappaAirbagResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 64) = v21;
              goto LABEL_156;
            case 2u:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v61 = v23++;
                  char v62 = *(unsigned char *)(v24 + v61);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_129;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *((_DWORD *)this + 13) = v27;
              goto LABEL_156;
            case 3u:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_72;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_125;
            case 4u:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_72;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_125;
            case 5u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_72;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_125;
            case 6u:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v65 = v29++;
                  char v66 = *(unsigned char *)(v30 + v65);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0;
LABEL_134:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v33 = 0;
                }
                goto LABEL_134;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              uint64_t v33 = 0;
LABEL_135:
              *((void *)this + 3) = v33;
              goto LABEL_156;
            case 7u:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v69 = v35++;
                  char v70 = *(unsigned char *)(v36 + v69);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_139;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *((_DWORD *)this + 10) = v39;
              goto LABEL_156;
            case 8u:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_144:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_144;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_145:
              *((void *)this + 1) = v45;
              goto LABEL_156;
            case 9u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v77 = v47++;
                  char v78 = *(unsigned char *)(v48 + v77);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_149:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_149;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_150:
              *((void *)this + 2) = v51;
              goto LABEL_156;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_125:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_72:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_156;
            case 0xBu:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v81 = v53++;
                  char v82 = *(unsigned char *)(v54 + v81);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_154:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_154;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_155:
              *((void *)this + 4) = v57;
LABEL_156:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_156;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaAirbagResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xAu);
    if ((*(_WORD *)(v3 + 68) & 8) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_23:
  unint64_t v5 = *(void *)(v3 + 32);

  return PB::Writer::writeVarInt(a2, v5, 0xBu);
}

uint64_t CMMsl::KappaAirbagResult::hash_value(CMMsl::KappaAirbagResult *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 0x400) != 0)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 13);
      if ((v1 & 0x40) != 0) {
        goto LABEL_4;
      }
LABEL_23:
      uint64_t v5 = 0;
      if ((*((_WORD *)this + 34) & 0x200) != 0) {
        goto LABEL_7;
      }
LABEL_24:
      uint64_t v7 = 0;
      if ((*((_WORD *)this + 34) & 0x100) != 0) {
        goto LABEL_10;
      }
LABEL_25:
      uint64_t v9 = 0;
      if ((v1 & 4) != 0) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_23;
  }
LABEL_4:
  float v4 = *((float *)this + 12);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_24;
  }
LABEL_7:
  float v6 = *((float *)this + 15);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_25;
  }
LABEL_10:
  float v8 = *((float *)this + 14);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_13:
    uint64_t v10 = *((void *)this + 3);
    if ((v1 & 0x10) != 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v10 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_14:
    uint64_t v11 = *((int *)this + 10);
    if (v1) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v11 = 0;
  if (v1)
  {
LABEL_15:
    uint64_t v12 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v12 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_16:
    uint64_t v13 = *((void *)this + 2);
    if ((v1 & 0x20) != 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v13 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_17:
    float v14 = *((float *)this + 11);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_20;
    }
LABEL_31:
    uint64_t v16 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  uint64_t v15 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_20:
  uint64_t v16 = *((void *)this + 4);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaAudioResult::~KappaAudioResult(CMMsl::KappaAudioResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaAudioResult::KappaAudioResult(CMMsl::KappaAudioResult *this, const CMMsl::KappaAudioResult *a2)
{
  *(void *)this = off_1003A69B0;
  *((_DWORD *)this + 27) = 0;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800000) != 0)
  {
    char v4 = *((unsigned char *)a2 + 100);
    int v3 = 0x800000;
    *((_DWORD *)this + 27) = 0x800000;
    *((unsigned char *)this + 100) = v4;
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x80000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 21) = v5;
    int v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x20000) != 0)
  {
    float result = *((float *)a2 + 19);
    v3 |= 0x20000u;
    *((_DWORD *)this + 27) = v3;
    *((float *)this + 19) = result;
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 18);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 17);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 23);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 23) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 20);
  v3 |= 0x40000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 24);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 14);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  float result = *((float *)a2 + 22);
  v3 |= 0x100000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 16);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  float result = *((float *)a2 + 15);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v7 = *((unsigned char *)a2 + 103);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 27) = v3;
  *((unsigned char *)this + 103) = v7;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v8 = *((unsigned char *)a2 + 102);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 27) = v3;
  *((unsigned char *)this + 102) = v8;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v9 = *((unsigned char *)a2 + 101);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 27) = v3;
  *((unsigned char *)this + 101) = v9;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v10 = *((unsigned char *)a2 + 104);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 27) = v3;
  *((unsigned char *)this + 104) = v10;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 2) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v11 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 3) = v11;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  float result = *((float *)a2 + 13);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v12 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = v12;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v13 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = v13;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_51:
  float result = *((float *)a2 + 8);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
LABEL_52:
  float result = *((float *)a2 + 7);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_54;
  }
LABEL_53:
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 5) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_55;
  }
LABEL_54:
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 4) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_56;
  }
LABEL_55:
  float result = *((float *)a2 + 2);
  v3 |= 1u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 2) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 6) = result;
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x200) == 0) {
      return result;
    }
LABEL_58:
    float result = *((float *)a2 + 11);
    *((_DWORD *)this + 27) = v3 | 0x200;
    *((float *)this + 11) = result;
    return result;
  }
LABEL_57:
  float result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((float *)this + 12) = result;
  if ((*((_DWORD *)a2 + 27) & 0x200) != 0) {
    goto LABEL_58;
  }
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, const CMMsl::KappaAudioResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((CMMsl::KappaAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaAudioResult *a2, CMMsl::KappaAudioResult *a3)
{
  int v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 100);
  *((unsigned char *)this + 100) = *((unsigned char *)a2 + 100);
  *((unsigned char *)a2 + 100) = v3;
  int v4 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  int v5 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v5;
  int v6 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  int v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  int v9 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v9;
  int v10 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  int v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  int v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  int v13 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v13;
  int v14 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v14;
  LOBYTE(v4) = *((unsigned char *)this + 103);
  *((unsigned char *)this + 103) = *((unsigned char *)a2 + 103);
  *((unsigned char *)a2 + 103) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 102);
  *((unsigned char *)this + 102) = *((unsigned char *)a2 + 102);
  *((unsigned char *)a2 + 102) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 101);
  *((unsigned char *)this + 101) = *((unsigned char *)a2 + 101);
  *((unsigned char *)a2 + 101) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 104);
  *((unsigned char *)this + 104) = *((unsigned char *)a2 + 104);
  *((unsigned char *)a2 + 104) = v4;
  int v15 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v15;
  int v16 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v16;
  int v17 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  int v18 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v18;
  int v19 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v19;
  int v20 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v20;
  int v21 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v21;
  int v22 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v22;
  int v23 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v23;
  int v24 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v24;
  int v25 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v25;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

float CMMsl::KappaAudioResult::KappaAudioResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A69B0;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 103) = *(unsigned char *)(a2 + 103);
  *(unsigned char *)(a1 + 102) = *(unsigned char *)(a2 + 102);
  *(unsigned char *)(a1 + 101) = *(unsigned char *)(a2 + 101);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

CMMsl *CMMsl::KappaAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaAudioResult::KappaAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaAudioResult::formatText(CMMsl::KappaAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 27);
  if (v5)
  {
    PB::TextFormatter::format(a2, "configDelaySpreadFpThreshold", *((float *)this + 2));
    int v5 = *((_DWORD *)this + 27);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configFeatureSamples", *((_DWORD *)this + 3));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "configNonPlanarDelaySpreadThreshold", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configNonPlanarPaprThreshold", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configPeakEnergyFpThreshold", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configPlanarDelaySpreadThreshold", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configPlanarPaprThreshold", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configPostTriggerLimitTime", *((_DWORD *)this + 9));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configPreTriggerLimitTime", *((_DWORD *)this + 10));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configRawRmsMaxFpThreshold", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "configRawRmsMeanFpThreshold", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "configRmsClipMinAmp", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "delaySpread", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "isAudioTPQ", *((unsigned char *)this + 100));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "isFpThresholdsMet", *((unsigned char *)this + 101));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isNonPlanarTp", *((unsigned char *)this + 102));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "isPlanarTp", *((unsigned char *)this + 103));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "isTauBarWithinRange", *((unsigned char *)this + 104));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "papr", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "peakEnergy", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "rawRmsMax", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "rawRmsMean", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawRmsSum", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rmsClipSum", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "sampleCount", *((_DWORD *)this + 21));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "t2TimesRmsClipSum", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "tTimesRmsClipSum", *((float *)this + 23));
  if ((*((_DWORD *)this + 27) & 0x400000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(a2, "tauBar", *((float *)this + 24));
LABEL_30:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaAudioResult::readFrom(CMMsl::KappaAudioResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 27) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 100) = v21;
              goto LABEL_159;
            case 2u:
              *((_DWORD *)this + 27) |= 0x80000u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v57 = v23++;
                  char v58 = *(unsigned char *)(v24 + v57);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_167;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *((_DWORD *)this + 21) = v27;
              goto LABEL_159;
            case 3u:
              *((_DWORD *)this + 27) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 4u:
              *((_DWORD *)this + 27) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 5u:
              *((_DWORD *)this + 27) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 6u:
              *((_DWORD *)this + 27) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 7u:
              *((_DWORD *)this + 27) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 8u:
              *((_DWORD *)this + 27) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 9u:
              *((_DWORD *)this + 27) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0xAu:
              *((_DWORD *)this + 27) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0xBu:
              *((_DWORD *)this + 27) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0xCu:
              *((_DWORD *)this + 27) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0xDu:
              *((_DWORD *)this + 27) |= 0x4000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *((_DWORD *)this + 27) |= 0x2000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *((_DWORD *)this + 27) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *((_DWORD *)this + 27) |= 0x8000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *((_DWORD *)this + 27) |= 2u;
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v38 = *(void *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_173;
                  }
                  unint64_t v61 = v37++;
                  char v62 = *(unsigned char *)(v38 + v61);
                  *((void *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_172;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *((_DWORD *)this + 3) = v41;
              goto LABEL_159;
            case 0x12u:
              *((_DWORD *)this + 27) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x13u:
              *((_DWORD *)this + 27) |= 0x100u;
              unint64_t v43 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v44 = *(void *)a2;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v47 = 0;
                if (v2 <= v43) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v65 = v43++;
                  char v66 = *(unsigned char *)(v44 + v65);
                  *((void *)a2 + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_177;
              }
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v2 = v43 + 1;
                *((void *)a2 + 1) = v43 + 1;
                char v48 = *(unsigned char *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v45 += 7;
                unint64_t v43 = v2;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *((_DWORD *)this + 10) = v47;
              goto LABEL_159;
            case 0x14u:
              *((_DWORD *)this + 27) |= 0x80u;
              unint64_t v49 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v50 = *(void *)a2;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v53 = 0;
                if (v2 <= v49) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v69 = v49++;
                  char v70 = *(unsigned char *)(v50 + v69);
                  *((void *)a2 + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_182;
              }
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = 0;
              do
              {
                unint64_t v2 = v49 + 1;
                *((void *)a2 + 1) = v49 + 1;
                char v54 = *(unsigned char *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v51 += 7;
                unint64_t v49 = v2;
                BOOL v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *((_DWORD *)this + 9) = v53;
LABEL_159:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *((_DWORD *)this + 27) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x16u:
              *((_DWORD *)this + 27) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x17u:
              *((_DWORD *)this + 27) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x18u:
              *((_DWORD *)this + 27) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x19u:
              *((_DWORD *)this + 27) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x1Au:
              *((_DWORD *)this + 27) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x1Bu:
              *((_DWORD *)this + 27) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_118;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_158;
            case 0x1Cu:
              *((_DWORD *)this + 27) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_158:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_118:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_159;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_159;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 108);
  if ((v4 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 100), 1u);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 2u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 3u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 4u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 5u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 8u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xAu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xBu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xCu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 103), 0xDu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 102), 0xEu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 101), 0xFu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 104), 0x10u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 0x11u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x12u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x13u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x14u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x15u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x16u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x17u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x18u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 0x19u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x1Bu);
    if ((*(_DWORD *)(v3 + 108) & 0x200) == 0) {
      return this;
    }
    goto LABEL_57;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_57:
  float v5 = *(float *)(v3 + 44);

  return PB::Writer::write(a2, v5, 0x1Cu);
}

uint64_t CMMsl::KappaAudioResult::hash_value(CMMsl::KappaAudioResult *this)
{
  int v1 = *((_DWORD *)this + 27);
  if ((v1 & 0x800000) != 0)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 100);
    if ((v1 & 0x80000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 21);
      if ((v1 & 0x20000) != 0) {
        goto LABEL_4;
      }
LABEL_70:
      uint64_t v5 = 0;
      if ((v1 & 0x10000) != 0) {
        goto LABEL_7;
      }
LABEL_71:
      uint64_t v7 = 0;
      if ((v1 & 0x8000) != 0) {
        goto LABEL_10;
      }
LABEL_72:
      uint64_t v9 = 0;
      if ((v1 & 0x200000) != 0) {
        goto LABEL_13;
      }
LABEL_73:
      uint64_t v11 = 0;
      if ((v1 & 0x40000) != 0) {
        goto LABEL_16;
      }
LABEL_74:
      uint64_t v13 = 0;
      if ((v1 & 0x400000) != 0) {
        goto LABEL_19;
      }
LABEL_75:
      uint64_t v15 = 0;
      if ((v1 & 0x1000) != 0) {
        goto LABEL_22;
      }
LABEL_76:
      uint64_t v17 = 0;
      if ((v1 & 0x100000) != 0) {
        goto LABEL_25;
      }
LABEL_77:
      uint64_t v19 = 0;
      if ((v1 & 0x4000) != 0) {
        goto LABEL_28;
      }
LABEL_78:
      uint64_t v21 = 0;
      if ((v1 & 0x2000) != 0) {
        goto LABEL_31;
      }
LABEL_79:
      uint64_t v23 = 0;
      if ((v1 & 0x4000000) != 0) {
        goto LABEL_34;
      }
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_70;
  }
LABEL_4:
  float v4 = *((float *)this + 19);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_71;
  }
LABEL_7:
  float v6 = *((float *)this + 18);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_72;
  }
LABEL_10:
  float v8 = *((float *)this + 17);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_73;
  }
LABEL_13:
  float v10 = *((float *)this + 23);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_74;
  }
LABEL_16:
  float v12 = *((float *)this + 20);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_75;
  }
LABEL_19:
  float v14 = *((float *)this + 24);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_76;
  }
LABEL_22:
  float v16 = *((float *)this + 14);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_77;
  }
LABEL_25:
  float v18 = *((float *)this + 22);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_78;
  }
LABEL_28:
  float v20 = *((float *)this + 16);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_79;
  }
LABEL_31:
  float v22 = *((float *)this + 15);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x4000000) != 0)
  {
LABEL_34:
    uint64_t v24 = *((unsigned __int8 *)this + 103);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v24 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_35:
    uint64_t v25 = *((unsigned __int8 *)this + 102);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v25 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_36:
    uint64_t v26 = *((unsigned __int8 *)this + 101);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v26 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_37:
    uint64_t v27 = *((unsigned __int8 *)this + 104);
    if ((v1 & 2) != 0) {
      goto LABEL_38;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v27 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_38:
    uint64_t v28 = *((int *)this + 3);
    if ((v1 & 0x800) != 0) {
      goto LABEL_39;
    }
LABEL_85:
    uint64_t v30 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_42;
    }
    goto LABEL_86;
  }
LABEL_84:
  uint64_t v28 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_85;
  }
LABEL_39:
  float v29 = *((float *)this + 13);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_42:
    uint64_t v31 = *((int *)this + 10);
    if ((v1 & 0x80) != 0) {
      goto LABEL_43;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v31 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_43:
    uint64_t v32 = *((int *)this + 9);
    if ((v1 & 0x40) != 0) {
      goto LABEL_44;
    }
LABEL_88:
    uint64_t v34 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_47;
    }
LABEL_89:
    uint64_t v36 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_50;
    }
LABEL_90:
    uint64_t v38 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_53;
    }
LABEL_91:
    uint64_t v40 = 0;
    if (v1) {
      goto LABEL_56;
    }
LABEL_92:
    uint64_t v42 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_59;
    }
LABEL_93:
    uint64_t v44 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_62;
    }
    goto LABEL_94;
  }
LABEL_87:
  uint64_t v32 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_88;
  }
LABEL_44:
  float v33 = *((float *)this + 8);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_89;
  }
LABEL_47:
  float v35 = *((float *)this + 7);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_90;
  }
LABEL_50:
  float v37 = *((float *)this + 5);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_91;
  }
LABEL_53:
  float v39 = *((float *)this + 4);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_92;
  }
LABEL_56:
  float v41 = *((float *)this + 2);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_93;
  }
LABEL_59:
  float v43 = *((float *)this + 6);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_62:
    float v45 = *((float *)this + 12);
    uint64_t v46 = LODWORD(v45);
    if (v45 == 0.0) {
      uint64_t v46 = 0;
    }
    if ((v1 & 0x200) != 0) {
      goto LABEL_65;
    }
LABEL_95:
    uint64_t v48 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_94:
  uint64_t v46 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_95;
  }
LABEL_65:
  float v47 = *((float *)this + 11);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ v46 ^ v48;
}

void CMMsl::KappaBaroResult::~KappaBaroResult(CMMsl::KappaBaroResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaBaroResult::KappaBaroResult(CMMsl::KappaBaroResult *this, const CMMsl::KappaBaroResult *a2)
{
  *(void *)this = off_1003A69E8;
  *((_DWORD *)this + 38) = 0;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000000) != 0)
  {
    char v4 = *((unsigned char *)a2 + 148);
    int v3 = 0x20000000;
    *((_DWORD *)this + 38) = 0x20000000;
    *((unsigned char *)this + 148) = v4;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 29);
    v3 |= 0x200000u;
    *((_DWORD *)this + 38) = v3;
    *((float *)this + 29) = result;
    int v2 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 38) = v3;
    *((void *)this + 3) = v6;
    int v2 = *((_DWORD *)a2 + 38);
    if ((v2 & 0x10000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10000000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 36);
  v3 |= 0x10000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 36) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 34);
  v3 |= 0x4000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 34) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v7 = *((_DWORD *)a2 + 28);
  v3 |= 0x100000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 28) = v7;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v8 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 26) = v8;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *((_DWORD *)this + 38) = v3;
  *((void *)this + 5) = v9;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 35);
  v3 |= 0x8000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 35) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 23) = v10;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v11 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 22) = v11;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  float result = *((float *)a2 + 31);
  v3 |= 0x800000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 31) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  float result = *((float *)a2 + 30);
  v3 |= 0x400000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 30) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *((float *)a2 + 32);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 32) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  float result = *((float *)a2 + 21);
  v3 |= 0x2000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  float result = *((float *)a2 + 20);
  v3 |= 0x1000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x800) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  float result = *((float *)a2 + 19);
  v3 |= 0x800u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  float result = *((float *)a2 + 18);
  v3 |= 0x400u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 18) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  float result = *((float *)a2 + 17);
  v3 |= 0x200u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_24:
    if ((v2 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v12 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 38) = v3;
  *((void *)this + 1) = v12;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 2) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v13 = *((void *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 38) = v3;
  *((void *)this + 2) = v13;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  float result = *((float *)a2 + 24);
  v3 |= 0x10000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 24) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *((_DWORD *)this + 38) = v3;
  *((void *)this + 6) = v14;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *((float *)a2 + 33);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 33) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x100) == 0) {
      goto LABEL_30;
    }
    goto LABEL_58;
  }
LABEL_57:
  float result = *((float *)a2 + 25);
  v3 |= 0x20000u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 25) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_30:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }
LABEL_58:
  float result = *((float *)a2 + 16);
  v3 |= 0x100u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x80000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v15 = *((_DWORD *)a2 + 27);
  v3 |= 0x80000u;
  *((_DWORD *)this + 38) = v3;
  *((_DWORD *)this + 27) = v15;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 8) == 0) {
      goto LABEL_33;
    }
    goto LABEL_61;
  }
LABEL_60:
  float result = *((float *)a2 + 14);
  v3 |= 0x40u;
  *((_DWORD *)this + 38) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 38);
  if ((v2 & 8) == 0)
  {
LABEL_33:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_62:
    float result = *((float *)a2 + 15);
    *((_DWORD *)this + 38) = v3 | 0x80;
    *((float *)this + 15) = result;
    return result;
  }
LABEL_61:
  uint64_t v16 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 38) = v3;
  *((void *)this + 4) = v16;
  if ((*((_DWORD *)a2 + 38) & 0x80) != 0) {
    goto LABEL_62;
  }
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, const CMMsl::KappaBaroResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((CMMsl::KappaBaroResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaBaroResult *a2, CMMsl::KappaBaroResult *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 148);
  *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
  *((unsigned char *)a2 + 148) = v3;
  int v4 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  int v7 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v7;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v5) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v5;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  int v9 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v9;
  LODWORD(v8) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  LODWORD(v8) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  int v10 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  int v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  int v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  int v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  int v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  int v15 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v15;
  int v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  int v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  uint64_t v18 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v18;
  uint64_t v19 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v19;
  int v20 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v20;
  uint64_t v21 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v21;
  int v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  int v23 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v23;
  int v24 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v24;
  LODWORD(v21) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v21;
  int v25 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v25;
  uint64_t v26 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v26;
  float result = *((float *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((float *)a2 + 15) = result;
  return result;
}

float CMMsl::KappaBaroResult::KappaBaroResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A69E8;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  float result = *(float *)(a2 + 60);
  *(float *)(a1 + 60) = result;
  return result;
}

CMMsl *CMMsl::KappaBaroResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaBaroResult::KappaBaroResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaBaroResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaBaroResult::formatText(CMMsl::KappaBaroResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(a2, "airbagDetected", *((unsigned char *)this + 148));
    int v5 = *((_DWORD *)this + 38);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configMaximumAccelBaroTimeDifferenceThreshold", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "configMinimumAccelNormInWindowThreshold", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "configMinimumAccelNormOverEpochThreshold", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "configMinimumAccelNormThreshold", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configMinimumWidthThreshold", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configPeakPressureThreshold", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configRiseTimeThreshold", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "configWidthThreshold", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "diffPeakTimeTrigger", *((_DWORD *)this + 22));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "diffTimeTrigger", *((_DWORD *)this + 23));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "eventStartTime", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "maxAccelNormInWindow", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpoch", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "maxAccelNormOverEpochTimestamp", *((void *)this + 4));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "numAirbags", *((_DWORD *)this + 26));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "numBarosInEpoch", *((_DWORD *)this + 27));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "odr", *((_DWORD *)this + 28));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "peakTimestamp", *((void *)this + 5));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "postEventPressureMedian", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "preEventPressureMedian", *((float *)this + 31));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "prePostEventPressureMedian", *((float *)this + 32));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "pressureMedian", *((float *)this + 33));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "riseTime", *((float *)this + 34));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "riseTimeTo80", *((float *)this + 35));
  int v5 = *((_DWORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_30:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 6));
  if ((*((_DWORD *)this + 38) & 0x10000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(a2, "width", *((float *)this + 36));
LABEL_32:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaBaroResult::readFrom(CMMsl::KappaBaroResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 38) |= 0x20000000u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 >= *((void *)a2 + 2))
          {
            BOOL v23 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v21 = v20 + 1;
            int v22 = *(unsigned __int8 *)(*(void *)a2 + v20);
            *((void *)a2 + 1) = v21;
            BOOL v23 = v22 != 0;
          }
          *((unsigned char *)this + 148) = v23;
          goto LABEL_238;
        case 2u:
          *((_DWORD *)this + 38) |= 0x200000u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v25);
          goto LABEL_237;
        case 3u:
          *((_DWORD *)this + 38) |= 4u;
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          uint64_t v28 = *(void *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)a2 + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_246;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v14 = v30++ > 8;
            }
            while (!v14);
LABEL_165:
            uint64_t v31 = 0;
            goto LABEL_246;
          }
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              uint64_t v31 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v133 = v26 + 1;
              char v134 = *(unsigned char *)(v28 + v26);
              *((void *)a2 + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                unint64_t v26 = v133;
                BOOL v14 = v132++ > 8;
                if (v14) {
                  goto LABEL_165;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v31 = 0;
              }
            }
            break;
          }
LABEL_246:
          *((void *)this + 3) = v31;
          goto LABEL_238;
        case 4u:
          *((_DWORD *)this + 38) |= 0x10000000u;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v34);
          goto LABEL_237;
        case 5u:
          *((_DWORD *)this + 38) |= 0x4000000u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_237;
        case 6u:
          *((_DWORD *)this + 38) |= 0x100000u;
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          uint64_t v38 = *(void *)a2;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v42 = v36 + 1;
              *((void *)a2 + 1) = v36 + 1;
              char v43 = *(unsigned char *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0) {
                goto LABEL_250;
              }
              v39 += 7;
              unint64_t v36 = v42;
              BOOL v14 = v40++ > 8;
            }
            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v41 = 0;
          if (v37 <= v36) {
            unint64_t v37 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v137 = v36 + 1;
              char v138 = *(unsigned char *)(v38 + v36);
              *((void *)a2 + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                unint64_t v36 = v137;
                BOOL v14 = v136++ > 8;
                if (v14) {
                  goto LABEL_172;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v41) = 0;
              }
            }
            break;
          }
LABEL_250:
          *((_DWORD *)this + 28) = v41;
          goto LABEL_238;
        case 7u:
          *((_DWORD *)this + 38) |= 0x40000u;
          unint64_t v44 = *((void *)a2 + 1);
          unint64_t v45 = *((void *)a2 + 2);
          uint64_t v46 = *(void *)a2;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)a2 + 1) = v44 + 1;
              char v51 = *(unsigned char *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_254;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v14 = v48++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }
          char v139 = 0;
          unsigned int v140 = 0;
          uint64_t v49 = 0;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v141 = v44 + 1;
              char v142 = *(unsigned char *)(v46 + v44);
              *((void *)a2 + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                unint64_t v44 = v141;
                BOOL v14 = v140++ > 8;
                if (v14) {
                  goto LABEL_179;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v49) = 0;
              }
            }
            break;
          }
LABEL_254:
          *((_DWORD *)this + 26) = v49;
          goto LABEL_238;
        case 8u:
          *((_DWORD *)this + 38) |= 0x10u;
          unint64_t v52 = *((void *)a2 + 1);
          unint64_t v53 = *((void *)a2 + 2);
          uint64_t v54 = *(void *)a2;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)a2 + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_258;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }
            while (!v14);
LABEL_186:
            uint64_t v57 = 0;
            goto LABEL_258;
          }
          char v143 = 0;
          unsigned int v144 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v145 = v52 + 1;
              char v146 = *(unsigned char *)(v54 + v52);
              *((void *)a2 + 1) = v145;
              v57 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                unint64_t v52 = v145;
                BOOL v14 = v144++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v57 = 0;
              }
            }
            break;
          }
LABEL_258:
          *((void *)this + 5) = v57;
          goto LABEL_238;
        case 9u:
          *((_DWORD *)this + 38) |= 0x8000000u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v60);
          goto LABEL_237;
        case 0xAu:
          *((_DWORD *)this + 38) |= 0x8000u;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_262;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }
          char v147 = 0;
          unsigned int v148 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v149 = v61 + 1;
              char v150 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                unint64_t v61 = v149;
                BOOL v14 = v148++ > 8;
                if (v14) {
                  goto LABEL_193;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_262:
          *((_DWORD *)this + 23) = v66;
          goto LABEL_238;
        case 0xBu:
          *((_DWORD *)this + 38) |= 0x4000u;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_266;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v74) = 0;
            goto LABEL_266;
          }
          char v151 = 0;
          unsigned int v152 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v153 = v69 + 1;
              char v154 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v153;
              v74 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                unint64_t v69 = v153;
                BOOL v14 = v152++ > 8;
                if (v14) {
                  goto LABEL_200;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_266:
          *((_DWORD *)this + 22) = v74;
          goto LABEL_238;
        case 0xCu:
          *((_DWORD *)this + 38) |= 0x800000u;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v77);
          goto LABEL_237;
        case 0xDu:
          *((_DWORD *)this + 38) |= 0x400000u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_237;
        case 0xEu:
          *((_DWORD *)this + 38) |= 0x1000000u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v79);
          goto LABEL_237;
        case 0xFu:
          *((_DWORD *)this + 38) |= 0x2000u;
          unint64_t v80 = *((void *)a2 + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v80);
          goto LABEL_237;
        case 0x10u:
          *((_DWORD *)this + 38) |= 0x1000u;
          unint64_t v81 = *((void *)a2 + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v81);
          goto LABEL_237;
        case 0x11u:
          *((_DWORD *)this + 38) |= 0x800u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v82);
          goto LABEL_237;
        case 0x12u:
          *((_DWORD *)this + 38) |= 0x400u;
          unint64_t v83 = *((void *)a2 + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v83);
          goto LABEL_237;
        case 0x13u:
          *((_DWORD *)this + 38) |= 0x200u;
          unint64_t v84 = *((void *)a2 + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v84);
          goto LABEL_237;
        case 0x14u:
          *((_DWORD *)this + 38) |= 1u;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_270;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            uint64_t v90 = 0;
            goto LABEL_270;
          }
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v157 = v85 + 1;
              char v158 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v85 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v90 = 0;
              }
            }
            break;
          }
LABEL_270:
          *((void *)this + 1) = v90;
          goto LABEL_238;
        case 0x15u:
          *((_DWORD *)this + 38) |= 2u;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_274;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_214:
            uint64_t v98 = 0;
            goto LABEL_274;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              uint64_t v98 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v161 = v93 + 1;
              char v162 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v93 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_214;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v98 = 0;
              }
            }
            break;
          }
LABEL_274:
          *((void *)this + 2) = v98;
          goto LABEL_238;
        case 0x16u:
          *((_DWORD *)this + 38) |= 0x10000u;
          unint64_t v101 = *((void *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v101);
          goto LABEL_237;
        case 0x17u:
          *((_DWORD *)this + 38) |= 0x20u;
          unint64_t v102 = *((void *)a2 + 1);
          unint64_t v103 = *((void *)a2 + 2);
          uint64_t v104 = *(void *)a2;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)a2 + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_278;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v14 = v106++ > 8;
            }
            while (!v14);
LABEL_221:
            uint64_t v107 = 0;
            goto LABEL_278;
          }
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              uint64_t v107 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v165 = v102 + 1;
              char v166 = *(unsigned char *)(v104 + v102);
              *((void *)a2 + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v102 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v107 = 0;
              }
            }
            break;
          }
LABEL_278:
          *((void *)this + 6) = v107;
          goto LABEL_238;
        case 0x18u:
          *((_DWORD *)this + 38) |= 0x2000000u;
          unint64_t v110 = *((void *)a2 + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v110);
          goto LABEL_237;
        case 0x19u:
          *((_DWORD *)this + 38) |= 0x20000u;
          unint64_t v111 = *((void *)a2 + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v111);
          goto LABEL_237;
        case 0x1Au:
          *((_DWORD *)this + 38) |= 0x100u;
          unint64_t v112 = *((void *)a2 + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v112);
          goto LABEL_237;
        case 0x1Bu:
          *((_DWORD *)this + 38) |= 0x80000u;
          unint64_t v113 = *((void *)a2 + 1);
          unint64_t v114 = *((void *)a2 + 2);
          uint64_t v115 = *(void *)a2;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            char v116 = 0;
            unsigned int v117 = 0;
            uint64_t v118 = 0;
            do
            {
              unint64_t v119 = v113 + 1;
              *((void *)a2 + 1) = v113 + 1;
              char v120 = *(unsigned char *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0) {
                goto LABEL_282;
              }
              v116 += 7;
              unint64_t v113 = v119;
              BOOL v14 = v117++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v118) = 0;
            goto LABEL_282;
          }
          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v118 = 0;
          if (v114 <= v113) {
            unint64_t v114 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v169 = v113 + 1;
              char v170 = *(unsigned char *)(v115 + v113);
              *((void *)a2 + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v113 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v118) = 0;
              }
            }
            break;
          }
LABEL_282:
          *((_DWORD *)this + 27) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *((_DWORD *)this + 38) |= 0x40u;
          unint64_t v121 = *((void *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
            goto LABEL_156;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v121);
          goto LABEL_237;
        case 0x1Du:
          *((_DWORD *)this + 38) |= 8u;
          unint64_t v122 = *((void *)a2 + 1);
          unint64_t v123 = *((void *)a2 + 2);
          uint64_t v124 = *(void *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)a2 + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_286;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_235:
            uint64_t v127 = 0;
            goto LABEL_286;
          }
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)a2 + 1);
          }
          break;
        case 0x1Eu:
          *((_DWORD *)this + 38) |= 0x80u;
          unint64_t v130 = *((void *)a2 + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v130);
LABEL_237:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_156:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_238;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_238;
      }
      while (1)
      {
        if (v123 == v122)
        {
          uint64_t v127 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_286;
        }
        unint64_t v173 = v122 + 1;
        char v174 = *(unsigned char *)(v124 + v122);
        *((void *)a2 + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0) {
          break;
        }
        v171 += 7;
        unint64_t v122 = v173;
        BOOL v14 = v172++ > 8;
        if (v14) {
          goto LABEL_235;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v127 = 0;
      }
LABEL_286:
      *((void *)this + 4) = v127;
LABEL_238:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaBaroResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 148), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 4u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 5u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 6u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 7u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 8u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 9u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xAu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xBu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xCu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xDu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xEu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xFu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x10u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x11u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x12u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x13u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x14u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x15u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x16u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x17u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x18u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x19u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x1Du);
    if ((*(_DWORD *)(v3 + 152) & 0x80) == 0) {
      return this;
    }
    goto LABEL_61;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_61:
  float v5 = *(float *)(v3 + 60);

  return PB::Writer::write(a2, v5, 0x1Eu);
}

uint64_t CMMsl::KappaBaroResult::hash_value(CMMsl::KappaBaroResult *this)
{
  int v1 = *((_DWORD *)this + 38);
  if ((v1 & 0x20000000) == 0)
  {
    uint64_t v51 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_3;
    }
LABEL_84:
    uint64_t v50 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_85;
  }
  uint64_t v51 = *((unsigned __int8 *)this + 148);
  if ((v1 & 0x200000) == 0) {
    goto LABEL_84;
  }
LABEL_3:
  float v2 = *((float *)this + 29);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  uint64_t v50 = v3;
  if ((v1 & 4) != 0)
  {
LABEL_6:
    uint64_t v49 = *((void *)this + 3);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_7;
    }
LABEL_86:
    uint64_t v5 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_11;
    }
LABEL_87:
    uint64_t v7 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_88;
  }
LABEL_85:
  uint64_t v49 = 0;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_86;
  }
LABEL_7:
  float v4 = *((float *)this + 36);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = LODWORD(v4);
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_87;
  }
LABEL_11:
  float v6 = *((float *)this + 34);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = LODWORD(v6);
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_15:
    uint64_t v8 = *((int *)this + 28);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v8 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    uint64_t v9 = *((unsigned int *)this + 26);
    if ((v1 & 0x10) != 0) {
      goto LABEL_17;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v9 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_17:
    uint64_t v10 = *((void *)this + 5);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_18;
    }
LABEL_91:
    uint64_t v12 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_92;
  }
LABEL_90:
  uint64_t v10 = 0;
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_91;
  }
LABEL_18:
  float v11 = *((float *)this + 35);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = LODWORD(v11);
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_22:
    uint64_t v13 = *((int *)this + 23);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_23:
    uint64_t v14 = *((int *)this + 22);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_24;
    }
LABEL_94:
    uint64_t v16 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_28;
    }
LABEL_95:
    uint64_t v18 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_32;
    }
LABEL_96:
    uint64_t v20 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_36;
    }
LABEL_97:
    uint64_t v22 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_40;
    }
LABEL_98:
    uint64_t v24 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_44;
    }
LABEL_99:
    uint64_t v26 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_48;
    }
LABEL_100:
    uint64_t v28 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_52;
    }
LABEL_101:
    uint64_t v30 = 0;
    if (v1) {
      goto LABEL_56;
    }
    goto LABEL_102;
  }
LABEL_93:
  uint64_t v14 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_94;
  }
LABEL_24:
  float v15 = *((float *)this + 31);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = LODWORD(v15);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_95;
  }
LABEL_28:
  float v17 = *((float *)this + 30);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = LODWORD(v17);
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_96;
  }
LABEL_32:
  float v19 = *((float *)this + 32);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_97;
  }
LABEL_36:
  float v21 = *((float *)this + 21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_98;
  }
LABEL_40:
  float v23 = *((float *)this + 20);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = LODWORD(v23);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_99;
  }
LABEL_44:
  float v25 = *((float *)this + 19);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = LODWORD(v25);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_100;
  }
LABEL_48:
  float v27 = *((float *)this + 18);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = LODWORD(v27);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_101;
  }
LABEL_52:
  float v29 = *((float *)this + 17);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = LODWORD(v29);
  }
  if (v1)
  {
LABEL_56:
    uint64_t v31 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_57;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v31 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_57:
    uint64_t v32 = *((void *)this + 2);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_58;
    }
LABEL_104:
    uint64_t v34 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_62;
    }
    goto LABEL_105;
  }
LABEL_103:
  uint64_t v32 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_104;
  }
LABEL_58:
  float v33 = *((float *)this + 24);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_62:
    uint64_t v35 = *((void *)this + 6);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_63;
    }
LABEL_106:
    uint64_t v37 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_67;
    }
LABEL_107:
    uint64_t v39 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_71;
    }
LABEL_108:
    uint64_t v41 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_109;
  }
LABEL_105:
  uint64_t v35 = 0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_106;
  }
LABEL_63:
  float v36 = *((float *)this + 33);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_107;
  }
LABEL_67:
  float v38 = *((float *)this + 25);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_108;
  }
LABEL_71:
  float v40 = *((float *)this + 16);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_75:
    uint64_t v42 = *((unsigned int *)this + 27);
    if ((v1 & 0x40) != 0) {
      goto LABEL_76;
    }
LABEL_110:
    uint64_t v44 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_79;
    }
    goto LABEL_111;
  }
LABEL_109:
  uint64_t v42 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_110;
  }
LABEL_76:
  float v43 = *((float *)this + 14);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_79:
    uint64_t v45 = *((void *)this + 4);
    if ((v1 & 0x80) != 0) {
      goto LABEL_80;
    }
LABEL_112:
    uint64_t v47 = 0;
    return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
  }
LABEL_111:
  uint64_t v45 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_112;
  }
LABEL_80:
  float v46 = *((float *)this + 15);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  return v50 ^ v51 ^ v49 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v31 ^ v32 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v44 ^ v45 ^ v47;
}

void CMMsl::KappaCrashResult::~KappaCrashResult(CMMsl::KappaCrashResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaCrashResult::KappaCrashResult(CMMsl::KappaCrashResult *this, const CMMsl::KappaCrashResult *a2)
{
  *(void *)this = off_1003A6A20;
  float v2 = (uint64_t *)((char *)this + 280);
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0;
  uint64_t v3 = (uint64_t *)((char *)a2 + 280);
  uint64_t v4 = *((void *)a2 + 35);
  if (v4)
  {
    __int16 v6 = 0;
    uint64_t v8 = *((void *)a2 + 1);
    *((_WORD *)this + 144) = 0;
    uint64_t v5 = 1;
    *float v2 = 1;
    *((void *)this + 1) = v8;
    uint64_t v4 = *v3;
    __int16 v7 = *((_WORD *)a2 + 144);
    if ((*v3 & 0x2000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  __int16 v6 = 0;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v4 & 0x2000000000000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 52);
    v5 |= 0x2000000000000uLL;
    *float v2 = v5;
    *((_WORD *)this + 144) = 0;
    *((float *)this + 52) = result;
    uint64_t v4 = *v3;
    __int16 v7 = *((_WORD *)a2 + 144);
  }
LABEL_6:
  if ((v7 & 0x100) != 0)
  {
    char v10 = *((unsigned char *)a2 + 276);
    __int16 v6 = 256;
    *float v2 = v5;
    *((_WORD *)this + 144) = 256;
    *((unsigned char *)this + 276) = v10;
    uint64_t v4 = *v3;
    __int16 v7 = *((_WORD *)a2 + 144);
    if ((v7 & 0x80) == 0)
    {
LABEL_8:
      if ((v7 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_83;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  char v11 = *((unsigned char *)a2 + 275);
  v6 |= 0x80u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 275) = v11;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_9:
    if ((v7 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_84;
  }
LABEL_83:
  char v12 = *((unsigned char *)a2 + 273);
  v6 |= 0x20u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 273) = v12;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 4) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_85;
  }
LABEL_84:
  char v13 = *((unsigned char *)a2 + 270);
  v6 |= 4u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 270) = v13;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_86;
  }
LABEL_85:
  char v14 = *((unsigned char *)a2 + 269);
  v6 |= 2u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 269) = v14;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_12:
    if ((v7 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_87;
  }
LABEL_86:
  int v15 = *((_DWORD *)a2 + 21);
  v5 |= 0x40000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 21) = v15;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 1) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_88;
  }
LABEL_87:
  char v16 = *((unsigned char *)a2 + 268);
  v6 |= 1u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 268) = v16;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_89;
  }
LABEL_88:
  char v17 = *((unsigned char *)a2 + 272);
  v6 |= 0x10u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 272) = v17;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_90;
  }
LABEL_89:
  float result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 20) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_91;
  }
LABEL_90:
  float result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 19) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 25) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 30) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_94;
  }
LABEL_93:
  float result = *((float *)a2 + 35);
  v5 |= (unint64_t)&_mh_execute_header;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 35) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_95;
  }
LABEL_94:
  float result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 53) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_96;
  }
LABEL_95:
  float result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 26) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }
LABEL_96:
  float result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 31) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 36) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 54) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_100;
  }
LABEL_99:
  float result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 27) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_101;
  }
LABEL_100:
  float result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 32) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_102;
  }
LABEL_101:
  float result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 37) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_103;
  }
LABEL_102:
  float result = *((float *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 55) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_104;
  }
LABEL_103:
  float result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 22) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_105;
  }
LABEL_104:
  float result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 23) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_106;
  }
LABEL_105:
  float result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 24) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_107;
  }
LABEL_106:
  float result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 59) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_108;
  }
LABEL_107:
  float result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 58) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x40) == 0) {
      goto LABEL_35;
    }
    goto LABEL_109;
  }
LABEL_108:
  float result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 60) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40) == 0)
  {
LABEL_35:
    if ((v4 & 2) == 0) {
      goto LABEL_36;
    }
    goto LABEL_110;
  }
LABEL_109:
  float result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 9) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 2) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_111;
  }
LABEL_110:
  float result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 4) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v7 & 0x800) == 0) {
      goto LABEL_38;
    }
    goto LABEL_112;
  }
LABEL_111:
  float result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 18) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x800) == 0)
  {
LABEL_38:
    if ((v7 & 8) == 0) {
      goto LABEL_39;
    }
    goto LABEL_113;
  }
LABEL_112:
  char v18 = *((unsigned char *)a2 + 279);
  v6 |= 0x800u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 279) = v18;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v4 & 0x80) == 0) {
      goto LABEL_40;
    }
    goto LABEL_114;
  }
LABEL_113:
  char v19 = *((unsigned char *)a2 + 271);
  v6 |= 8u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 271) = v19;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80) == 0)
  {
LABEL_40:
    if ((v4 & 0x400) == 0) {
      goto LABEL_41;
    }
    goto LABEL_115;
  }
LABEL_114:
  float result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 10) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400) == 0)
  {
LABEL_41:
    if ((v4 & 0x200) == 0) {
      goto LABEL_42;
    }
    goto LABEL_116;
  }
LABEL_115:
  float result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 13) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200) == 0)
  {
LABEL_42:
    if ((v4 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_117;
  }
LABEL_116:
  float result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 12) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100) == 0)
  {
LABEL_43:
    if ((v4 & 4) == 0) {
      goto LABEL_44;
    }
    goto LABEL_118;
  }
LABEL_117:
  float result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 11) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 4) == 0)
  {
LABEL_44:
    if ((v4 & 0x20) == 0) {
      goto LABEL_45;
    }
    goto LABEL_119;
  }
LABEL_118:
  float result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 5) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20) == 0)
  {
LABEL_45:
    if ((v4 & 0x10) == 0) {
      goto LABEL_46;
    }
    goto LABEL_120;
  }
LABEL_119:
  float result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 8) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10) == 0)
  {
LABEL_46:
    if ((v4 & 8) == 0) {
      goto LABEL_47;
    }
    goto LABEL_121;
  }
LABEL_120:
  float result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 7) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 8) == 0)
  {
LABEL_47:
    if ((v4 & 0x800) == 0) {
      goto LABEL_48;
    }
    goto LABEL_122;
  }
LABEL_121:
  float result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 6) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800) == 0)
  {
LABEL_48:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_123;
  }
LABEL_122:
  float result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 14) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_49:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_124;
  }
LABEL_123:
  float result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 17) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_50:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_125;
  }
LABEL_124:
  float result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 16) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_51:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_126;
  }
LABEL_125:
  float result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 15) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_127;
  }
LABEL_126:
  float result = *((float *)a2 + 28);
  v5 |= 0x2000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 28) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_53:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_128;
  }
LABEL_127:
  float result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 33) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x20000000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_129;
  }
LABEL_128:
  float result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 38) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_130;
  }
LABEL_129:
  float result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 56) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_131;
  }
LABEL_130:
  float result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 29) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_132;
  }
LABEL_131:
  float result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 34) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x40000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_133;
  }
LABEL_132:
  float result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 39) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x40) == 0) {
      goto LABEL_60;
    }
    goto LABEL_134;
  }
LABEL_133:
  float result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 57) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_60:
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_135;
  }
LABEL_134:
  char v20 = *((unsigned char *)a2 + 274);
  v6 |= 0x40u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 274) = v20;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_136;
  }
LABEL_135:
  float result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 63) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x200) == 0) {
      goto LABEL_63;
    }
    goto LABEL_137;
  }
LABEL_136:
  float result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 61) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_63:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_138;
  }
LABEL_137:
  char v21 = *((unsigned char *)a2 + 277);
  v6 |= 0x200u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 277) = v21;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_139;
  }
LABEL_138:
  float result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 40) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_140;
  }
LABEL_139:
  float result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 41) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_66:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_141;
  }
LABEL_140:
  float result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 42) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_142;
  }
LABEL_141:
  float result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 44) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_143;
  }
LABEL_142:
  float result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 43) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_144;
  }
LABEL_143:
  float result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 45) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_145;
  }
LABEL_144:
  float result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 46) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_146;
  }
LABEL_145:
  float result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 47) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_147;
  }
LABEL_146:
  float result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 48) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_148;
  }
LABEL_147:
  float result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 50) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_149;
  }
LABEL_148:
  float result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 49) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x800000000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_150;
  }
LABEL_149:
  float result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 51) = result;
  uint64_t v4 = *v3;
  __int16 v7 = *((_WORD *)a2 + 144);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v7 & 0x400) == 0) {
      goto LABEL_77;
    }
    goto LABEL_151;
  }
LABEL_150:
  int v22 = *((_DWORD *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((_DWORD *)this + 62) = v22;
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 144) & 0x400) == 0)
  {
LABEL_77:
    if ((v4 & 0x4000000000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_152;
  }
LABEL_151:
  char v23 = *((unsigned char *)a2 + 278);
  v6 |= 0x400u;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((unsigned char *)this + 278) = v23;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_153;
  }
LABEL_152:
  float result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 65) = result;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x2000000000000000) == 0) {
      return result;
    }
LABEL_154:
    float result = *((float *)a2 + 64);
    *float v2 = v5 | 0x2000000000000000;
    *((_WORD *)this + 144) = v6;
    *((float *)this + 64) = result;
    return result;
  }
LABEL_153:
  float result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *float v2 = v5;
  *((_WORD *)this + 144) = v6;
  *((float *)this + 66) = result;
  if ((*v3 & 0x2000000000000000) != 0) {
    goto LABEL_154;
  }
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, const CMMsl::KappaCrashResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((CMMsl::KappaCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaCrashResult *a2, CMMsl::KappaCrashResult *a3)
{
  int v3 = *((_DWORD *)this + 72);
  uint64_t v4 = *((void *)this + 35);
  int v5 = *((_DWORD *)a2 + 72);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((_DWORD *)this + 72) = v5;
  *((void *)a2 + 35) = v4;
  *((_DWORD *)a2 + 72) = v3;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  int v7 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v7;
  LOBYTE(v6) = *((unsigned char *)this + 276);
  *((unsigned char *)this + 276) = *((unsigned char *)a2 + 276);
  *((unsigned char *)a2 + 276) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 275);
  *((unsigned char *)this + 275) = *((unsigned char *)a2 + 275);
  *((unsigned char *)a2 + 275) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 273);
  *((unsigned char *)this + 273) = *((unsigned char *)a2 + 273);
  *((unsigned char *)a2 + 273) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 270);
  *((unsigned char *)this + 270) = *((unsigned char *)a2 + 270);
  *((unsigned char *)a2 + 270) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 269);
  *((unsigned char *)this + 269) = *((unsigned char *)a2 + 269);
  *((unsigned char *)a2 + 269) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 268);
  *((unsigned char *)this + 268) = *((unsigned char *)a2 + 268);
  *((unsigned char *)a2 + 268) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 272);
  *((unsigned char *)this + 272) = *((unsigned char *)a2 + 272);
  *((unsigned char *)a2 + 272) = v6;
  int v8 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v8;
  int v9 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  int v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  int v11 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v11;
  int v12 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v12;
  int v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  int v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  int v15 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  int v16 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v16;
  int v17 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v17;
  int v18 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v18;
  int v19 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v19;
  int v20 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  int v21 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v21;
  int v22 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v22;
  int v23 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v23;
  int v24 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v24;
  int v25 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v25;
  int v26 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v26;
  int v27 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v27;
  int v28 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v28;
  int v29 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v29;
  int v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  LOBYTE(v6) = *((unsigned char *)this + 279);
  *((unsigned char *)this + 279) = *((unsigned char *)a2 + 279);
  *((unsigned char *)a2 + 279) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 271);
  *((unsigned char *)this + 271) = *((unsigned char *)a2 + 271);
  *((unsigned char *)a2 + 271) = v6;
  int v31 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v31;
  int v32 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v32;
  int v33 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v33;
  int v34 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v34;
  int v35 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v35;
  int v36 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v36;
  int v37 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v37;
  int v38 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v38;
  int v39 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v39;
  int v40 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v40;
  int v41 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v41;
  int v42 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v42;
  int v43 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v43;
  int v44 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v44;
  int v45 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v45;
  int v46 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v46;
  int v47 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v47;
  int v48 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v48;
  int v49 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v49;
  int v50 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v50;
  LOBYTE(v6) = *((unsigned char *)this + 274);
  *((unsigned char *)this + 274) = *((unsigned char *)a2 + 274);
  *((unsigned char *)a2 + 274) = v6;
  int v51 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v51;
  int v52 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v52;
  LOBYTE(v6) = *((unsigned char *)this + 277);
  *((unsigned char *)this + 277) = *((unsigned char *)a2 + 277);
  *((unsigned char *)a2 + 277) = v6;
  int v53 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v53;
  int v54 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v54;
  int v55 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v55;
  int v56 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v56;
  int v57 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v57;
  int v58 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v58;
  int v59 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v59;
  int v60 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v60;
  int v61 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v61;
  int v62 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v62;
  int v63 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v63;
  int v64 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v64;
  LODWORD(v6) = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 278);
  *((unsigned char *)this + 278) = *((unsigned char *)a2 + 278);
  *((unsigned char *)a2 + 278) = v6;
  int v65 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v65;
  int v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  float result = *((float *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((float *)a2 + 64) = result;
  return result;
}

float CMMsl::KappaCrashResult::KappaCrashResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6A20;
  uint64_t v2 = *(void *)(a2 + 280);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(void *)(a1 + 280) = v2;
  *(_DWORD *)(a2 + 288) = 0;
  *(void *)(a2 + 280) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(unsigned char *)(a1 + 275) = *(unsigned char *)(a2 + 275);
  *(unsigned char *)(a1 + 273) = *(unsigned char *)(a2 + 273);
  *(unsigned char *)(a1 + 270) = *(unsigned char *)(a2 + 270);
  *(unsigned char *)(a1 + 269) = *(unsigned char *)(a2 + 269);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 279) = *(unsigned char *)(a2 + 279);
  *(unsigned char *)(a1 + 271) = *(unsigned char *)(a2 + 271);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(unsigned char *)(a1 + 274) = *(unsigned char *)(a2 + 274);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  float result = *(float *)(a2 + 256);
  *(float *)(a1 + 256) = result;
  return result;
}

CMMsl *CMMsl::KappaCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaCrashResult::KappaCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaCrashResult::formatText(CMMsl::KappaCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)((char *)this + 280);
  uint64_t v6 = *((void *)this + 35);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThreshold", *((float *)this + 4));
    uint64_t v6 = *v5;
    __int16 v7 = *((_WORD *)this + 144);
    if ((*v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v7 = *((_WORD *)this + 144);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioDvChaosThresholdCenter", *((float *)this + 5));
    uint64_t v6 = *v5;
    __int16 v7 = *((_WORD *)this + 144);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioDvChaosThresholdMax", *((float *)this + 6));
    uint64_t v6 = *v5;
    __int16 v7 = *((_WORD *)this + 144);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_86;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioDvChaosThresholdMin", *((float *)this + 7));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "audioDvChaosThresholdStretch", *((float *)this + 8));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "audioDvEnergyThreshold", *((float *)this + 9));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdCenter", *((float *)this + 10));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMax", *((float *)this + 11));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdMin", *((float *)this + 12));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "audioDvEnergyThresholdStretch", *((float *)this + 13));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdCenter", *((float *)this + 14));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMax", *((float *)this + 15));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdMin", *((float *)this + 16));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "audioDvMaxRmsThresholdStretch", *((float *)this + 17));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0) {
      goto LABEL_20;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "audioDvRmsThreshold", *((float *)this + 18));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "crashDetectorDecision", *((unsigned char *)this + 268));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 19));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 20));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "detectorRegime", *((_DWORD *)this + 21));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold1", *((float *)this + 22));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold2", *((float *)this + 23));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "detectorRegimeAccelnormThreshold3", *((float *)this + 24));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1", *((float *)this + 25));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 26));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 27));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 28));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 29));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2", *((float *)this + 30));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 31));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 32));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 33));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 34));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3", *((float *)this + 35));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithAudio", *((float *)this + 36));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudio", *((float *)this + 37));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *((float *)this + 38));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0) {
      goto LABEL_42;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *((float *)this + 39));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0) {
      goto LABEL_43;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((unsigned char *)this + 269));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0) {
      goto LABEL_44;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "isAudio", *((unsigned char *)this + 270));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0) {
      goto LABEL_45;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "isAudioDv", *((unsigned char *)this + 271));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0) {
      goto LABEL_46;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "isAudioSupported", *((unsigned char *)this + 272));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0) {
      goto LABEL_47;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "isBaro", *((unsigned char *)this + 273));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0) {
      goto LABEL_48;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isCompanionConnected", *((unsigned char *)this + 274));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0) {
      goto LABEL_49;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "isFreeFall", *((unsigned char *)this + 275));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0) {
      goto LABEL_50;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "isPulse", *((unsigned char *)this + 276));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseCrashDetectorDecision", *((unsigned char *)this + 277));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold1", *((float *)this + 40));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold2", *((float *)this + 41));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithAudioDeltaVThreshold3", *((float *)this + 42));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxPulseThreshold", *((float *)this + 43));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxaccelnormThreshold", *((float *)this + 44));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 45));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold1", *((float *)this + 46));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold2", *((float *)this + 47));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioDeltaVThreshold3", *((float *)this + 48));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxPulseThreshold", *((float *)this + 49));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxaccelnormThreshold", *((float *)this + 50));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 51));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 52));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 53));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 54));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 55));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 56));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 57));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "maxAudioChaos", *((float *)this + 58));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "maxAudioEnergy", *((float *)this + 59));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "maxAudioRms", *((float *)this + 60));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 61));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 62));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 63));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0) {
      goto LABEL_76;
    }
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 64));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "shortAudioMet", *((unsigned char *)this + 278));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 65));
  uint64_t v6 = *v5;
  __int16 v7 = *((_WORD *)this + 144);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0) {
      goto LABEL_79;
    }
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 66));
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 144) & 0x800) == 0)
  {
LABEL_79:
    if ((v6 & 1) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "strongerAudio", *((unsigned char *)this + 279));
  if (*v5) {
LABEL_80:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_81:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaCrashResult::readFrom(CMMsl::KappaCrashResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (char *)this + 280;
    do
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        unint64_t v12 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v18 = v2 + 1;
          char v19 = *(unsigned char *)(v9 + v2);
          *((void *)a2 + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0) {
            goto LABEL_21;
          }
          v16 += 7;
          unint64_t v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            unint64_t v12 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(void *)v8 |= 1uLL;
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            uint64_t v24 = *(void *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v28 = v22 + 1;
                *((void *)a2 + 1) = v22 + 1;
                char v29 = *(unsigned char *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_313;
                }
                v25 += 7;
                unint64_t v22 = v28;
                BOOL v15 = v26++ > 8;
              }
              while (!v15);
LABEL_263:
              uint64_t v27 = 0;
              goto LABEL_313;
            }
            char v156 = 0;
            unsigned int v157 = 0;
            uint64_t v27 = 0;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                uint64_t v27 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v158 = v22 + 1;
                char v159 = *(unsigned char *)(v24 + v22);
                *((void *)a2 + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  unint64_t v22 = v158;
                  BOOL v15 = v157++ > 8;
                  if (v15) {
                    goto LABEL_263;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v27 = 0;
                }
              }
              break;
            }
LABEL_313:
            *((void *)this + 1) = v27;
            goto LABEL_305;
          case 2:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v31 = *((void *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v31);
            goto LABEL_304;
          case 3:
            *((_WORD *)v8 + 4) |= 0x100u;
            unint64_t v32 = *((void *)a2 + 1);
            if (v32 >= *((void *)a2 + 2))
            {
              BOOL v35 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v33 = v32 + 1;
              int v34 = *(unsigned __int8 *)(*(void *)a2 + v32);
              *((void *)a2 + 1) = v33;
              BOOL v35 = v34 != 0;
            }
            *((unsigned char *)this + 276) = v35;
            goto LABEL_305;
          case 4:
            *((_WORD *)v8 + 4) |= 0x80u;
            unint64_t v36 = *((void *)a2 + 1);
            if (v36 >= *((void *)a2 + 2))
            {
              BOOL v39 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v37 = v36 + 1;
              int v38 = *(unsigned __int8 *)(*(void *)a2 + v36);
              *((void *)a2 + 1) = v37;
              BOOL v39 = v38 != 0;
            }
            *((unsigned char *)this + 275) = v39;
            goto LABEL_305;
          case 5:
            *((_WORD *)v8 + 4) |= 0x20u;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 >= *((void *)a2 + 2))
            {
              BOOL v43 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v41 = v40 + 1;
              int v42 = *(unsigned __int8 *)(*(void *)a2 + v40);
              *((void *)a2 + 1) = v41;
              BOOL v43 = v42 != 0;
            }
            *((unsigned char *)this + 273) = v43;
            goto LABEL_305;
          case 6:
            *((_WORD *)v8 + 4) |= 4u;
            unint64_t v44 = *((void *)a2 + 1);
            if (v44 >= *((void *)a2 + 2))
            {
              BOOL v47 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v45 = v44 + 1;
              int v46 = *(unsigned __int8 *)(*(void *)a2 + v44);
              *((void *)a2 + 1) = v45;
              BOOL v47 = v46 != 0;
            }
            *((unsigned char *)this + 270) = v47;
            goto LABEL_305;
          case 7:
            *((_WORD *)v8 + 4) |= 2u;
            unint64_t v48 = *((void *)a2 + 1);
            if (v48 >= *((void *)a2 + 2))
            {
              BOOL v51 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v49 = v48 + 1;
              int v50 = *(unsigned __int8 *)(*(void *)a2 + v48);
              *((void *)a2 + 1) = v49;
              BOOL v51 = v50 != 0;
            }
            *((unsigned char *)this + 269) = v51;
            goto LABEL_305;
          case 8:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v52 = *((void *)a2 + 1);
            unint64_t v53 = *((void *)a2 + 2);
            uint64_t v54 = *(void *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v58 = v52 + 1;
                *((void *)a2 + 1) = v52 + 1;
                char v59 = *(unsigned char *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_317;
                }
                v55 += 7;
                unint64_t v52 = v58;
                BOOL v15 = v56++ > 8;
              }
              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v57 = 0;
            if (v53 <= v52) {
              unint64_t v53 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v162 = v52 + 1;
                char v163 = *(unsigned char *)(v54 + v52);
                *((void *)a2 + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  unint64_t v52 = v162;
                  BOOL v15 = v161++ > 8;
                  if (v15) {
                    goto LABEL_280;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
              }
              break;
            }
LABEL_317:
            *((_DWORD *)this + 21) = v57;
            goto LABEL_305;
          case 9:
            *((_WORD *)v8 + 4) |= 1u;
            unint64_t v60 = *((void *)a2 + 1);
            if (v60 >= *((void *)a2 + 2))
            {
              BOOL v63 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v61 = v60 + 1;
              int v62 = *(unsigned __int8 *)(*(void *)a2 + v60);
              *((void *)a2 + 1) = v61;
              BOOL v63 = v62 != 0;
            }
            *((unsigned char *)this + 268) = v63;
            goto LABEL_305;
          case 10:
            *((_WORD *)v8 + 4) |= 0x10u;
            unint64_t v64 = *((void *)a2 + 1);
            if (v64 >= *((void *)a2 + 2))
            {
              BOOL v67 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v65 = v64 + 1;
              int v66 = *(unsigned __int8 *)(*(void *)a2 + v64);
              *((void *)a2 + 1) = v65;
              BOOL v67 = v66 != 0;
            }
            *((unsigned char *)this + 272) = v67;
            goto LABEL_305;
          case 11:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v68 = *((void *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v68);
            goto LABEL_304;
          case 12:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v69);
            goto LABEL_304;
          case 13:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v70);
            goto LABEL_304;
          case 14:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v71);
            goto LABEL_304;
          case 15:
            *(void *)v8 |= (unint64_t)&_mh_execute_header;
            unint64_t v72 = *((void *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v72);
            goto LABEL_304;
          case 16:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v73 = *((void *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 53) = *(_DWORD *)(*(void *)a2 + v73);
            goto LABEL_304;
          case 17:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v74 = *((void *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v74);
            goto LABEL_304;
          case 18:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v75 = *((void *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v75);
            goto LABEL_304;
          case 19:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v76 = *((void *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v76);
            goto LABEL_304;
          case 20:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v77 = *((void *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 54) = *(_DWORD *)(*(void *)a2 + v77);
            goto LABEL_304;
          case 21:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v78 = *((void *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v78);
            goto LABEL_304;
          case 22:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v79 = *((void *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v79);
            goto LABEL_304;
          case 23:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v80);
            goto LABEL_304;
          case 24:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v81 = *((void *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 55) = *(_DWORD *)(*(void *)a2 + v81);
            goto LABEL_304;
          case 25:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v82 = *((void *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 59) = *(_DWORD *)(*(void *)a2 + v82);
            goto LABEL_304;
          case 26:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 58) = *(_DWORD *)(*(void *)a2 + v83);
            goto LABEL_304;
          case 27:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 60) = *(_DWORD *)(*(void *)a2 + v84);
            goto LABEL_304;
          case 28:
            *(void *)v8 |= 0x40uLL;
            unint64_t v85 = *((void *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v85);
            goto LABEL_304;
          case 29:
            *(void *)v8 |= 2uLL;
            unint64_t v86 = *((void *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v86);
            goto LABEL_304;
          case 30:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v87 = *((void *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v87);
            goto LABEL_304;
          case 31:
            *((_WORD *)v8 + 4) |= 0x800u;
            unint64_t v88 = *((void *)a2 + 1);
            if (v88 >= *((void *)a2 + 2))
            {
              BOOL v91 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)a2 + v88);
              *((void *)a2 + 1) = v89;
              BOOL v91 = v90 != 0;
            }
            *((unsigned char *)this + 279) = v91;
            goto LABEL_305;
          case 32:
            *((_WORD *)v8 + 4) |= 8u;
            unint64_t v92 = *((void *)a2 + 1);
            if (v92 >= *((void *)a2 + 2))
            {
              BOOL v95 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v93 = v92 + 1;
              int v94 = *(unsigned __int8 *)(*(void *)a2 + v92);
              *((void *)a2 + 1) = v93;
              BOOL v95 = v94 != 0;
            }
            *((unsigned char *)this + 271) = v95;
            goto LABEL_305;
          case 33:
            *(void *)v8 |= 0x80uLL;
            unint64_t v96 = *((void *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v96);
            goto LABEL_304;
          case 34:
            *(void *)v8 |= 0x400uLL;
            unint64_t v97 = *((void *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v97);
            goto LABEL_304;
          case 35:
            *(void *)v8 |= 0x200uLL;
            unint64_t v98 = *((void *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v98);
            goto LABEL_304;
          case 36:
            *(void *)v8 |= 0x100uLL;
            unint64_t v99 = *((void *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v99);
            goto LABEL_304;
          case 37:
            *(void *)v8 |= 4uLL;
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v100);
            goto LABEL_304;
          case 38:
            *(void *)v8 |= 0x20uLL;
            unint64_t v101 = *((void *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v101);
            goto LABEL_304;
          case 39:
            *(void *)v8 |= 0x10uLL;
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v102);
            goto LABEL_304;
          case 40:
            *(void *)v8 |= 8uLL;
            unint64_t v103 = *((void *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v103);
            goto LABEL_304;
          case 41:
            *(void *)v8 |= 0x800uLL;
            unint64_t v104 = *((void *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v104);
            goto LABEL_304;
          case 42:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v105 = *((void *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v105);
            goto LABEL_304;
          case 43:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v106 = *((void *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v106);
            goto LABEL_304;
          case 44:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v107);
            goto LABEL_304;
          case 45:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v108 = *((void *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v108);
            goto LABEL_304;
          case 46:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v109 = *((void *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v109);
            goto LABEL_304;
          case 47:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v110 = *((void *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v110);
            goto LABEL_304;
          case 48:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v111 = *((void *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v111);
            goto LABEL_304;
          case 49:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v112 = *((void *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v112);
            goto LABEL_304;
          case 50:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v113 = *((void *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v113);
            goto LABEL_304;
          case 51:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v114 = *((void *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v114);
            goto LABEL_304;
          case 52:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v115 = *((void *)a2 + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 57) = *(_DWORD *)(*(void *)a2 + v115);
            goto LABEL_304;
          case 53:
            *((_WORD *)v8 + 4) |= 0x40u;
            unint64_t v116 = *((void *)a2 + 1);
            if (v116 >= *((void *)a2 + 2))
            {
              BOOL v119 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v117 = v116 + 1;
              int v118 = *(unsigned __int8 *)(*(void *)a2 + v116);
              *((void *)a2 + 1) = v117;
              BOOL v119 = v118 != 0;
            }
            *((unsigned char *)this + 274) = v119;
            goto LABEL_305;
          case 54:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v120 = *((void *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 63) = *(_DWORD *)(*(void *)a2 + v120);
            goto LABEL_304;
          case 55:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v121 = *((void *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 61) = *(_DWORD *)(*(void *)a2 + v121);
            goto LABEL_304;
          case 56:
            *((_WORD *)v8 + 4) |= 0x200u;
            unint64_t v122 = *((void *)a2 + 1);
            if (v122 >= *((void *)a2 + 2))
            {
              BOOL v125 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v123 = v122 + 1;
              int v124 = *(unsigned __int8 *)(*(void *)a2 + v122);
              *((void *)a2 + 1) = v123;
              BOOL v125 = v124 != 0;
            }
            *((unsigned char *)this + 277) = v125;
            goto LABEL_305;
          case 57:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v126 = *((void *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v126);
            goto LABEL_304;
          case 58:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v127 = *((void *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v127);
            goto LABEL_304;
          case 59:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v128 = *((void *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v128);
            goto LABEL_304;
          case 60:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v129 = *((void *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v129);
            goto LABEL_304;
          case 61:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v130 = *((void *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v130);
            goto LABEL_304;
          case 62:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v131 = *((void *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v131);
            goto LABEL_304;
          case 63:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v132 = *((void *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v132);
            goto LABEL_304;
          case 64:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v133 = *((void *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v133);
            goto LABEL_304;
          case 65:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v134 = *((void *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v134);
            goto LABEL_304;
          case 66:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v135 = *((void *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v135);
            goto LABEL_304;
          case 67:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v136 = *((void *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v136);
            goto LABEL_304;
          case 68:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v137 = *((void *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v137);
            goto LABEL_304;
          case 69:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v138 = *((void *)a2 + 1);
            unint64_t v139 = *((void *)a2 + 2);
            uint64_t v140 = *(void *)a2;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              char v141 = 0;
              unsigned int v142 = 0;
              uint64_t v143 = 0;
              do
              {
                unint64_t v144 = v138 + 1;
                *((void *)a2 + 1) = v138 + 1;
                char v145 = *(unsigned char *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0) {
                  goto LABEL_321;
                }
                v141 += 7;
                unint64_t v138 = v144;
                BOOL v15 = v142++ > 8;
              }
              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }
            char v164 = 0;
            unsigned int v165 = 0;
            uint64_t v143 = 0;
            if (v139 <= v138) {
              unint64_t v139 = *((void *)a2 + 1);
            }
            break;
          case 70:
            *((_WORD *)v8 + 4) |= 0x400u;
            unint64_t v146 = *((void *)a2 + 1);
            if (v146 >= *((void *)a2 + 2))
            {
              BOOL v149 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v147 = v146 + 1;
              int v148 = *(unsigned __int8 *)(*(void *)a2 + v146);
              *((void *)a2 + 1) = v147;
              BOOL v149 = v148 != 0;
            }
            *((unsigned char *)this + 278) = v149;
            goto LABEL_305;
          case 71:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v150 = *((void *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 65) = *(_DWORD *)(*(void *)a2 + v150);
            goto LABEL_304;
          case 72:
            *(void *)v8 |= 0x8000000000000000;
            unint64_t v151 = *((void *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)a2 + 2)) {
              goto LABEL_248;
            }
            *((_DWORD *)this + 66) = *(_DWORD *)(*(void *)a2 + v151);
            goto LABEL_304;
          case 73:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v152 = *((void *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)a2 + 2))
            {
LABEL_248:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_305;
            }
            *((_DWORD *)this + 64) = *(_DWORD *)(*(void *)a2 + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_321;
          }
          unint64_t v166 = v138 + 1;
          char v167 = *(unsigned char *)(v140 + v138);
          *((void *)a2 + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0) {
            break;
          }
          v164 += 7;
          unint64_t v138 = v166;
          BOOL v15 = v165++ > 8;
          if (v15) {
            goto LABEL_299;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v143) = 0;
        }
LABEL_321:
        *((_DWORD *)this + 62) = v143;
        goto LABEL_305;
      }
      switch(v21)
      {
        case 0x186A1:
          *(void *)v8 |= 0x80000uLL;
          unint64_t v153 = *((void *)a2 + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v153);
            goto LABEL_304;
          }
          break;
        case 0x186A2:
          *(void *)v8 |= 0x100000uLL;
          unint64_t v154 = *((void *)a2 + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v154);
            goto LABEL_304;
          }
          break;
        case 0x186A3:
          *(void *)v8 |= 0x200000uLL;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v30);
LABEL_304:
            *((void *)a2 + 1) += 4;
            goto LABEL_305;
          }
          break;
        default:
LABEL_255:
          uint64_t result = PB::Reader::skip(a2, v21, v12 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_305;
      }
      *((unsigned char *)a2 + 24) = 1;
LABEL_305:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 280);
  uint64_t v5 = *(void *)(this + 280);
  if (v5)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = *(_WORD *)(this + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 208), 2u);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 276), 3u);
    uint64_t v5 = *v4;
    __int16 v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 275), 4u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 273), 5u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 270), 6u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 269), 7u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 8u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 268), 9u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 272), 0xAu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xDu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0xEu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x10u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x11u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x12u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x13u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x14u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x15u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x16u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x17u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 0x18u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0x19u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0x1Au);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0) {
      goto LABEL_32;
    }
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x1Bu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0) {
      goto LABEL_33;
    }
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x1Cu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x1Du);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0) {
      goto LABEL_35;
    }
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Eu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 279), 0x1Fu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0) {
      goto LABEL_37;
    }
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 271), 0x20u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0) {
      goto LABEL_38;
    }
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x21u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0) {
      goto LABEL_39;
    }
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x22u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0) {
      goto LABEL_40;
    }
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x23u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0) {
      goto LABEL_41;
    }
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x24u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0) {
      goto LABEL_42;
    }
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x25u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x26u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0) {
      goto LABEL_44;
    }
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0x27u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0x28u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x29u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x2Au);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x2Bu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x2Cu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x2Du);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x2Eu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x2Fu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x30u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x31u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x32u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x33u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0) {
      goto LABEL_57;
    }
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 0x34u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 274), 0x35u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0x36u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0) {
      goto LABEL_60;
    }
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x37u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 277), 0x38u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x39u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x3Au);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x3Bu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x3Cu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x3Du);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x3Eu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x3Fu);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x40u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0x41u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x42u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x43u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x44u);
  uint64_t v5 = *v4;
  __int16 v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0) {
      goto LABEL_74;
    }
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 248), 0x45u);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 278), 0x46u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0x47u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x48u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    this = PB::Writer::write(a2, *(float *)(v3 + 256), 0x49u);
    uint64_t v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) == 0)
  {
    if ((v5 & 0x100000) == 0) {
      goto LABEL_80;
    }
LABEL_154:
    this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x186A2u);
    if ((*v4 & 0x200000) == 0) {
      return this;
    }
    goto LABEL_155;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x186A1u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) != 0) {
    goto LABEL_154;
  }
LABEL_80:
  if ((v5 & 0x200000) == 0) {
    return this;
  }
LABEL_155:
  float v7 = *(float *)(v3 + 96);

  return PB::Writer::write(a2, v7, 0x186A3u);
}

uint64_t CMMsl::KappaCrashResult::hash_value(CMMsl::KappaCrashResult *this)
{
  __int16 v1 = *((_WORD *)this + 144);
  uint64_t v2 = *((void *)this + 35);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x2000000000000) != 0) {
      goto LABEL_3;
    }
LABEL_203:
    uint64_t v179 = 0;
    if ((*((_WORD *)this + 144) & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_204;
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v2 & 0x2000000000000) == 0) {
    goto LABEL_203;
  }
LABEL_3:
  float v4 = *((float *)this + 52);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v179 = v5;
  if ((*((_WORD *)this + 144) & 0x100) != 0)
  {
LABEL_6:
    uint64_t v178 = *((unsigned __int8 *)this + 276);
    if ((v1 & 0x80) != 0) {
      goto LABEL_7;
    }
    goto LABEL_205;
  }
LABEL_204:
  uint64_t v178 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    uint64_t v177 = *((unsigned __int8 *)this + 275);
    if ((v1 & 0x20) != 0) {
      goto LABEL_8;
    }
    goto LABEL_206;
  }
LABEL_205:
  uint64_t v177 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_8:
    uint64_t v176 = *((unsigned __int8 *)this + 273);
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
    goto LABEL_207;
  }
LABEL_206:
  uint64_t v176 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_9:
    uint64_t v175 = *((unsigned __int8 *)this + 270);
    if ((v1 & 2) != 0) {
      goto LABEL_10;
    }
    goto LABEL_208;
  }
LABEL_207:
  uint64_t v175 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_10:
    uint64_t v174 = *((unsigned __int8 *)this + 269);
    if ((v2 & 0x40000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_209;
  }
LABEL_208:
  uint64_t v174 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_11:
    uint64_t v173 = *((int *)this + 21);
    if (v1) {
      goto LABEL_12;
    }
    goto LABEL_210;
  }
LABEL_209:
  uint64_t v173 = 0;
  if (v1)
  {
LABEL_12:
    uint64_t v172 = *((unsigned __int8 *)this + 268);
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
    goto LABEL_211;
  }
LABEL_210:
  uint64_t v172 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    uint64_t v171 = *((unsigned __int8 *)this + 272);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_14;
    }
LABEL_212:
    uint64_t v170 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_17;
    }
LABEL_213:
    uint64_t v169 = 0;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_20;
    }
LABEL_214:
    uint64_t v168 = 0;
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_23;
    }
LABEL_215:
    uint64_t v167 = 0;
    if ((v2 & 0x100000000) != 0) {
      goto LABEL_26;
    }
LABEL_216:
    uint64_t v166 = 0;
    if ((v2 & 0x4000000000000) != 0) {
      goto LABEL_29;
    }
LABEL_217:
    uint64_t v165 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_32;
    }
LABEL_218:
    uint64_t v164 = 0;
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_35;
    }
LABEL_219:
    uint64_t v163 = 0;
    if ((v2 & 0x200000000) != 0) {
      goto LABEL_38;
    }
LABEL_220:
    uint64_t v162 = 0;
    if ((v2 & 0x8000000000000) != 0) {
      goto LABEL_41;
    }
LABEL_221:
    uint64_t v161 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_44;
    }
LABEL_222:
    uint64_t v160 = 0;
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_47;
    }
LABEL_223:
    uint64_t v159 = 0;
    if ((v2 & 0x400000000) != 0) {
      goto LABEL_50;
    }
LABEL_224:
    uint64_t v158 = 0;
    if ((v2 & 0x10000000000000) != 0) {
      goto LABEL_53;
    }
LABEL_225:
    uint64_t v157 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_56;
    }
LABEL_226:
    uint64_t v156 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_59;
    }
LABEL_227:
    uint64_t v155 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_62;
    }
LABEL_228:
    uint64_t v154 = 0;
    if ((v2 & 0x100000000000000) != 0) {
      goto LABEL_65;
    }
LABEL_229:
    uint64_t v153 = 0;
    if ((v2 & 0x80000000000000) != 0) {
      goto LABEL_68;
    }
LABEL_230:
    uint64_t v152 = 0;
    if ((v2 & 0x200000000000000) != 0) {
      goto LABEL_71;
    }
LABEL_231:
    uint64_t v151 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_74;
    }
LABEL_232:
    uint64_t v150 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_77;
    }
LABEL_233:
    uint64_t v149 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_80;
    }
LABEL_234:
    uint64_t v148 = 0;
    if ((*((_WORD *)this + 144) & 0x800) != 0) {
      goto LABEL_83;
    }
    goto LABEL_235;
  }
LABEL_211:
  uint64_t v171 = 0;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_212;
  }
LABEL_14:
  float v6 = *((float *)this + 20);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v170 = v7;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_213;
  }
LABEL_17:
  float v8 = *((float *)this + 19);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v169 = v9;
  if ((v2 & 0x400000) == 0) {
    goto LABEL_214;
  }
LABEL_20:
  float v10 = *((float *)this + 25);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v168 = v11;
  if ((v2 & 0x8000000) == 0) {
    goto LABEL_215;
  }
LABEL_23:
  float v12 = *((float *)this + 30);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  uint64_t v167 = v13;
  if ((v2 & 0x100000000) == 0) {
    goto LABEL_216;
  }
LABEL_26:
  float v14 = *((float *)this + 35);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  uint64_t v166 = v15;
  if ((v2 & 0x4000000000000) == 0) {
    goto LABEL_217;
  }
LABEL_29:
  float v16 = *((float *)this + 53);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  uint64_t v165 = v17;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_218;
  }
LABEL_32:
  float v18 = *((float *)this + 26);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v164 = v19;
  if ((v2 & 0x10000000) == 0) {
    goto LABEL_219;
  }
LABEL_35:
  float v20 = *((float *)this + 31);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  uint64_t v163 = v21;
  if ((v2 & 0x200000000) == 0) {
    goto LABEL_220;
  }
LABEL_38:
  float v22 = *((float *)this + 36);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  uint64_t v162 = v23;
  if ((v2 & 0x8000000000000) == 0) {
    goto LABEL_221;
  }
LABEL_41:
  float v24 = *((float *)this + 54);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  uint64_t v161 = v25;
  if ((v2 & 0x1000000) == 0) {
    goto LABEL_222;
  }
LABEL_44:
  float v26 = *((float *)this + 27);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  uint64_t v160 = v27;
  if ((v2 & 0x20000000) == 0) {
    goto LABEL_223;
  }
LABEL_47:
  float v28 = *((float *)this + 32);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  uint64_t v159 = v29;
  if ((v2 & 0x400000000) == 0) {
    goto LABEL_224;
  }
LABEL_50:
  float v30 = *((float *)this + 37);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v158 = v31;
  if ((v2 & 0x10000000000000) == 0) {
    goto LABEL_225;
  }
LABEL_53:
  float v32 = *((float *)this + 55);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  uint64_t v157 = v33;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_226;
  }
LABEL_56:
  float v34 = *((float *)this + 22);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  uint64_t v156 = v35;
  if ((v2 & 0x100000) == 0) {
    goto LABEL_227;
  }
LABEL_59:
  float v36 = *((float *)this + 23);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  uint64_t v155 = v37;
  if ((v2 & 0x200000) == 0) {
    goto LABEL_228;
  }
LABEL_62:
  float v38 = *((float *)this + 24);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  uint64_t v154 = v39;
  if ((v2 & 0x100000000000000) == 0) {
    goto LABEL_229;
  }
LABEL_65:
  float v40 = *((float *)this + 59);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  uint64_t v153 = v41;
  if ((v2 & 0x80000000000000) == 0) {
    goto LABEL_230;
  }
LABEL_68:
  float v42 = *((float *)this + 58);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  uint64_t v152 = v43;
  if ((v2 & 0x200000000000000) == 0) {
    goto LABEL_231;
  }
LABEL_71:
  float v44 = *((float *)this + 60);
  uint64_t v45 = LODWORD(v44);
  if (v44 == 0.0) {
    uint64_t v45 = 0;
  }
  uint64_t v151 = v45;
  if ((v2 & 0x40) == 0) {
    goto LABEL_232;
  }
LABEL_74:
  float v46 = *((float *)this + 9);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  uint64_t v150 = v47;
  if ((v2 & 2) == 0) {
    goto LABEL_233;
  }
LABEL_77:
  float v48 = *((float *)this + 4);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  uint64_t v149 = v49;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_234;
  }
LABEL_80:
  float v50 = *((float *)this + 18);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  uint64_t v148 = v51;
  if ((*((_WORD *)this + 144) & 0x800) != 0)
  {
LABEL_83:
    uint64_t v147 = *((unsigned __int8 *)this + 279);
    if ((v1 & 8) != 0) {
      goto LABEL_84;
    }
    goto LABEL_236;
  }
LABEL_235:
  uint64_t v147 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_84:
    uint64_t v146 = *((unsigned __int8 *)this + 271);
    if ((v2 & 0x80) != 0) {
      goto LABEL_85;
    }
LABEL_237:
    uint64_t v145 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_88;
    }
LABEL_238:
    uint64_t v144 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_91;
    }
LABEL_239:
    uint64_t v143 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_94;
    }
LABEL_240:
    uint64_t v142 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_97;
    }
LABEL_241:
    uint64_t v141 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_100;
    }
LABEL_242:
    uint64_t v140 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_103;
    }
LABEL_243:
    uint64_t v139 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_106;
    }
LABEL_244:
    uint64_t v138 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_109;
    }
LABEL_245:
    uint64_t v137 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_112;
    }
LABEL_246:
    uint64_t v136 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_115;
    }
LABEL_247:
    uint64_t v135 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_118;
    }
LABEL_248:
    uint64_t v134 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_121;
    }
LABEL_249:
    uint64_t v133 = 0;
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_124;
    }
LABEL_250:
    uint64_t v132 = 0;
    if ((v2 & 0x800000000) != 0) {
      goto LABEL_127;
    }
LABEL_251:
    uint64_t v131 = 0;
    if ((v2 & 0x20000000000000) != 0) {
      goto LABEL_130;
    }
LABEL_252:
    uint64_t v83 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_134;
    }
LABEL_253:
    uint64_t v85 = 0;
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_138;
    }
LABEL_254:
    uint64_t v87 = 0;
    if ((v2 & 0x1000000000) != 0) {
      goto LABEL_141;
    }
LABEL_255:
    uint64_t v89 = 0;
    if ((v2 & 0x40000000000000) != 0) {
      goto LABEL_144;
    }
LABEL_256:
    uint64_t v91 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_147;
    }
    goto LABEL_257;
  }
LABEL_236:
  uint64_t v146 = 0;
  if ((v2 & 0x80) == 0) {
    goto LABEL_237;
  }
LABEL_85:
  float v52 = *((float *)this + 10);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  uint64_t v145 = v53;
  if ((v2 & 0x400) == 0) {
    goto LABEL_238;
  }
LABEL_88:
  float v54 = *((float *)this + 13);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  uint64_t v144 = v55;
  if ((v2 & 0x200) == 0) {
    goto LABEL_239;
  }
LABEL_91:
  float v56 = *((float *)this + 12);
  uint64_t v57 = LODWORD(v56);
  if (v56 == 0.0) {
    uint64_t v57 = 0;
  }
  uint64_t v143 = v57;
  if ((v2 & 0x100) == 0) {
    goto LABEL_240;
  }
LABEL_94:
  float v58 = *((float *)this + 11);
  uint64_t v59 = LODWORD(v58);
  if (v58 == 0.0) {
    uint64_t v59 = 0;
  }
  uint64_t v142 = v59;
  if ((v2 & 4) == 0) {
    goto LABEL_241;
  }
LABEL_97:
  float v60 = *((float *)this + 5);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  uint64_t v141 = v61;
  if ((v2 & 0x20) == 0) {
    goto LABEL_242;
  }
LABEL_100:
  float v62 = *((float *)this + 8);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  uint64_t v140 = v63;
  if ((v2 & 0x10) == 0) {
    goto LABEL_243;
  }
LABEL_103:
  float v64 = *((float *)this + 7);
  uint64_t v65 = LODWORD(v64);
  if (v64 == 0.0) {
    uint64_t v65 = 0;
  }
  uint64_t v139 = v65;
  if ((v2 & 8) == 0) {
    goto LABEL_244;
  }
LABEL_106:
  float v66 = *((float *)this + 6);
  uint64_t v67 = LODWORD(v66);
  if (v66 == 0.0) {
    uint64_t v67 = 0;
  }
  uint64_t v138 = v67;
  if ((v2 & 0x800) == 0) {
    goto LABEL_245;
  }
LABEL_109:
  float v68 = *((float *)this + 14);
  uint64_t v69 = LODWORD(v68);
  if (v68 == 0.0) {
    uint64_t v69 = 0;
  }
  uint64_t v137 = v69;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_246;
  }
LABEL_112:
  float v70 = *((float *)this + 17);
  uint64_t v71 = LODWORD(v70);
  if (v70 == 0.0) {
    uint64_t v71 = 0;
  }
  uint64_t v136 = v71;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_247;
  }
LABEL_115:
  float v72 = *((float *)this + 16);
  uint64_t v73 = LODWORD(v72);
  if (v72 == 0.0) {
    uint64_t v73 = 0;
  }
  uint64_t v135 = v73;
  if ((v2 & 0x1000) == 0) {
    goto LABEL_248;
  }
LABEL_118:
  float v74 = *((float *)this + 15);
  uint64_t v75 = LODWORD(v74);
  if (v74 == 0.0) {
    uint64_t v75 = 0;
  }
  uint64_t v134 = v75;
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_249;
  }
LABEL_121:
  float v76 = *((float *)this + 28);
  uint64_t v77 = LODWORD(v76);
  if (v76 == 0.0) {
    uint64_t v77 = 0;
  }
  uint64_t v133 = v77;
  if ((v2 & 0x40000000) == 0) {
    goto LABEL_250;
  }
LABEL_124:
  float v78 = *((float *)this + 33);
  uint64_t v79 = LODWORD(v78);
  if (v78 == 0.0) {
    uint64_t v79 = 0;
  }
  uint64_t v132 = v79;
  if ((v2 & 0x800000000) == 0) {
    goto LABEL_251;
  }
LABEL_127:
  float v80 = *((float *)this + 38);
  uint64_t v81 = LODWORD(v80);
  if (v80 == 0.0) {
    uint64_t v81 = 0;
  }
  uint64_t v131 = v81;
  if ((v2 & 0x20000000000000) == 0) {
    goto LABEL_252;
  }
LABEL_130:
  float v82 = *((float *)this + 56);
  if (v82 == 0.0) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = LODWORD(v82);
  }
  if ((v2 & 0x4000000) == 0) {
    goto LABEL_253;
  }
LABEL_134:
  float v84 = *((float *)this + 29);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  else {
    uint64_t v85 = LODWORD(v84);
  }
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_254;
  }
LABEL_138:
  float v86 = *((float *)this + 34);
  uint64_t v87 = LODWORD(v86);
  if (v86 == 0.0) {
    uint64_t v87 = 0;
  }
  if ((v2 & 0x1000000000) == 0) {
    goto LABEL_255;
  }
LABEL_141:
  float v88 = *((float *)this + 39);
  uint64_t v89 = LODWORD(v88);
  if (v88 == 0.0) {
    uint64_t v89 = 0;
  }
  if ((v2 & 0x40000000000000) == 0) {
    goto LABEL_256;
  }
LABEL_144:
  float v90 = *((float *)this + 57);
  uint64_t v91 = LODWORD(v90);
  if (v90 == 0.0) {
    uint64_t v91 = 0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_147:
    uint64_t v92 = *((unsigned __int8 *)this + 274);
    if ((v2 & 0x1000000000000000) != 0) {
      goto LABEL_148;
    }
LABEL_258:
    uint64_t v94 = 0;
    if ((v2 & 0x400000000000000) != 0) {
      goto LABEL_151;
    }
LABEL_259:
    uint64_t v96 = 0;
    if ((*((_WORD *)this + 144) & 0x200) != 0) {
      goto LABEL_154;
    }
    goto LABEL_260;
  }
LABEL_257:
  uint64_t v92 = 0;
  if ((v2 & 0x1000000000000000) == 0) {
    goto LABEL_258;
  }
LABEL_148:
  float v93 = *((float *)this + 63);
  uint64_t v94 = LODWORD(v93);
  if (v93 == 0.0) {
    uint64_t v94 = 0;
  }
  if ((v2 & 0x400000000000000) == 0) {
    goto LABEL_259;
  }
LABEL_151:
  float v95 = *((float *)this + 61);
  uint64_t v96 = LODWORD(v95);
  if (v95 == 0.0) {
    uint64_t v96 = 0;
  }
  if ((*((_WORD *)this + 144) & 0x200) != 0)
  {
LABEL_154:
    uint64_t v97 = *((unsigned __int8 *)this + 277);
    if ((v2 & 0x2000000000) != 0) {
      goto LABEL_155;
    }
LABEL_261:
    uint64_t v99 = 0;
    if ((v2 & 0x4000000000) != 0) {
      goto LABEL_158;
    }
LABEL_262:
    uint64_t v101 = 0;
    if ((v2 & 0x8000000000) != 0) {
      goto LABEL_161;
    }
LABEL_263:
    uint64_t v103 = 0;
    if ((v2 & 0x20000000000) != 0) {
      goto LABEL_164;
    }
LABEL_264:
    uint64_t v105 = 0;
    if ((v2 & 0x10000000000) != 0) {
      goto LABEL_167;
    }
LABEL_265:
    uint64_t v107 = 0;
    if ((v2 & 0x40000000000) != 0) {
      goto LABEL_170;
    }
LABEL_266:
    uint64_t v109 = 0;
    if ((v2 & 0x80000000000) != 0) {
      goto LABEL_173;
    }
LABEL_267:
    uint64_t v111 = 0;
    if ((v2 & 0x100000000000) != 0) {
      goto LABEL_176;
    }
LABEL_268:
    uint64_t v113 = 0;
    if ((v2 & 0x200000000000) != 0) {
      goto LABEL_179;
    }
LABEL_269:
    uint64_t v115 = 0;
    if ((v2 & 0x800000000000) != 0) {
      goto LABEL_182;
    }
LABEL_270:
    uint64_t v117 = 0;
    if ((v2 & 0x400000000000) != 0) {
      goto LABEL_185;
    }
LABEL_271:
    uint64_t v119 = 0;
    if ((v2 & 0x1000000000000) != 0) {
      goto LABEL_188;
    }
LABEL_272:
    uint64_t v121 = 0;
    if ((v2 & 0x800000000000000) != 0) {
      goto LABEL_191;
    }
    goto LABEL_273;
  }
LABEL_260:
  uint64_t v97 = 0;
  if ((v2 & 0x2000000000) == 0) {
    goto LABEL_261;
  }
LABEL_155:
  float v98 = *((float *)this + 40);
  uint64_t v99 = LODWORD(v98);
  if (v98 == 0.0) {
    uint64_t v99 = 0;
  }
  if ((v2 & 0x4000000000) == 0) {
    goto LABEL_262;
  }
LABEL_158:
  float v100 = *((float *)this + 41);
  uint64_t v101 = LODWORD(v100);
  if (v100 == 0.0) {
    uint64_t v101 = 0;
  }
  if ((v2 & 0x8000000000) == 0) {
    goto LABEL_263;
  }
LABEL_161:
  float v102 = *((float *)this + 42);
  uint64_t v103 = LODWORD(v102);
  if (v102 == 0.0) {
    uint64_t v103 = 0;
  }
  if ((v2 & 0x20000000000) == 0) {
    goto LABEL_264;
  }
LABEL_164:
  float v104 = *((float *)this + 44);
  uint64_t v105 = LODWORD(v104);
  if (v104 == 0.0) {
    uint64_t v105 = 0;
  }
  if ((v2 & 0x10000000000) == 0) {
    goto LABEL_265;
  }
LABEL_167:
  float v106 = *((float *)this + 43);
  uint64_t v107 = LODWORD(v106);
  if (v106 == 0.0) {
    uint64_t v107 = 0;
  }
  if ((v2 & 0x40000000000) == 0) {
    goto LABEL_266;
  }
LABEL_170:
  float v108 = *((float *)this + 45);
  uint64_t v109 = LODWORD(v108);
  if (v108 == 0.0) {
    uint64_t v109 = 0;
  }
  if ((v2 & 0x80000000000) == 0) {
    goto LABEL_267;
  }
LABEL_173:
  float v110 = *((float *)this + 46);
  uint64_t v111 = LODWORD(v110);
  if (v110 == 0.0) {
    uint64_t v111 = 0;
  }
  if ((v2 & 0x100000000000) == 0) {
    goto LABEL_268;
  }
LABEL_176:
  float v112 = *((float *)this + 47);
  uint64_t v113 = LODWORD(v112);
  if (v112 == 0.0) {
    uint64_t v113 = 0;
  }
  if ((v2 & 0x200000000000) == 0) {
    goto LABEL_269;
  }
LABEL_179:
  float v114 = *((float *)this + 48);
  uint64_t v115 = LODWORD(v114);
  if (v114 == 0.0) {
    uint64_t v115 = 0;
  }
  if ((v2 & 0x800000000000) == 0) {
    goto LABEL_270;
  }
LABEL_182:
  float v116 = *((float *)this + 50);
  uint64_t v117 = LODWORD(v116);
  if (v116 == 0.0) {
    uint64_t v117 = 0;
  }
  if ((v2 & 0x400000000000) == 0) {
    goto LABEL_271;
  }
LABEL_185:
  float v118 = *((float *)this + 49);
  uint64_t v119 = LODWORD(v118);
  if (v118 == 0.0) {
    uint64_t v119 = 0;
  }
  if ((v2 & 0x1000000000000) == 0) {
    goto LABEL_272;
  }
LABEL_188:
  float v120 = *((float *)this + 51);
  uint64_t v121 = LODWORD(v120);
  if (v120 == 0.0) {
    uint64_t v121 = 0;
  }
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_191:
    uint64_t v122 = *((int *)this + 62);
    if ((*((_WORD *)this + 144) & 0x400) != 0) {
      goto LABEL_192;
    }
    goto LABEL_274;
  }
LABEL_273:
  uint64_t v122 = 0;
  if ((*((_WORD *)this + 144) & 0x400) != 0)
  {
LABEL_192:
    uint64_t v123 = *((unsigned __int8 *)this + 278);
    if ((v2 & 0x4000000000000000) != 0) {
      goto LABEL_193;
    }
LABEL_275:
    uint64_t v125 = 0;
    if (v2 < 0) {
      goto LABEL_196;
    }
    goto LABEL_276;
  }
LABEL_274:
  uint64_t v123 = 0;
  if ((v2 & 0x4000000000000000) == 0) {
    goto LABEL_275;
  }
LABEL_193:
  float v124 = *((float *)this + 65);
  uint64_t v125 = LODWORD(v124);
  if (v124 == 0.0) {
    uint64_t v125 = 0;
  }
  if (v2 < 0)
  {
LABEL_196:
    float v126 = *((float *)this + 66);
    uint64_t v127 = LODWORD(v126);
    if (v126 == 0.0) {
      uint64_t v127 = 0;
    }
    if ((v2 & 0x2000000000000000) != 0) {
      goto LABEL_199;
    }
LABEL_277:
    uint64_t v129 = 0;
    return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
  }
LABEL_276:
  uint64_t v127 = 0;
  if ((v2 & 0x2000000000000000) == 0) {
    goto LABEL_277;
  }
LABEL_199:
  float v128 = *((float *)this + 64);
  uint64_t v129 = LODWORD(v128);
  if (v128 == 0.0) {
    uint64_t v129 = 0;
  }
  return v179 ^ v3 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v83 ^ v85 ^ v87 ^ v89 ^ v91 ^ v92 ^ v94 ^ v96 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v122 ^ v123 ^ v125 ^ v127 ^ v129;
}

void CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  *(void *)this = off_1003A6A58;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel(this);

  operator delete();
}

CMMsl::KappaDirectionOfTravel *CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this, const CMMsl::KappaDirectionOfTravel *a2)
{
  *(void *)this = off_1003A6A58;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 8) != 0)
  {
    uint64_t v7 = *((void *)a2 + 10);
    int v6 = 8;
    *((_DWORD *)this + 36) = 8;
    *((void *)this + 10) = v7;
    int v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 0x20) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 23);
    v6 |= 0x20u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 23) = v8;
    int v5 = *((_DWORD *)a2 + 36);
  }
LABEL_6:
  if ((v5 & 0x40) != 0)
  {
    int v11 = *((_DWORD *)a2 + 24);
    v6 |= 0x40u;
    *((_DWORD *)this + 36) = v6;
    *((_DWORD *)this + 24) = v11;
    int v5 = *((_DWORD *)a2 + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 25);
  v6 |= 0x80u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 25) = v12;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v13 = *((_DWORD *)a2 + 22);
  v6 |= 0x10u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 22) = v13;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v14 = *((_DWORD *)a2 + 28);
  v6 |= 0x400u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 28) = v14;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v15 = *((_DWORD *)a2 + 29);
  v6 |= 0x800u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 29) = v15;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v16 = *((_DWORD *)a2 + 30);
  v6 |= 0x1000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 30) = v16;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v17 = *((_DWORD *)a2 + 27);
  v6 |= 0x200u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 27) = v17;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v18 = *((_DWORD *)a2 + 26);
  v6 |= 0x100u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 26) = v18;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v19 = *((_DWORD *)a2 + 32);
  v6 |= 0x4000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 32) = v19;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v20 = *((_DWORD *)a2 + 33);
  v6 |= 0x8000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 33) = v20;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v21 = *((_DWORD *)a2 + 34);
  v6 |= 0x10000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 34) = v21;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v22 = *((_DWORD *)a2 + 31);
  v6 |= 0x2000u;
  *((_DWORD *)this + 36) = v6;
  *((_DWORD *)this + 31) = v22;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  v6 |= 0x20000u;
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 36) = v6;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v23 = *((void *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 36) = v6;
  *((void *)this + 9) = v23;
  int v5 = *((_DWORD *)a2 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_40:
  uint64_t v24 = *((void *)a2 + 7);
  v6 |= 1u;
  *((_DWORD *)this + 36) = v6;
  *((void *)this + 7) = v24;
  if ((*((_DWORD *)a2 + 36) & 2) != 0)
  {
LABEL_22:
    uint64_t v9 = *((void *)a2 + 8);
    *((_DWORD *)this + 36) = v6 | 2;
    *((void *)this + 8) = v9;
  }
LABEL_23:
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, const CMMsl::KappaDirectionOfTravel *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaDirectionOfTravel *a2, CMMsl::KappaDirectionOfTravel *a3)
{
  int v3 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v9 = *((void *)this + 6);
  uint64_t v8 = *((void *)this + 7);
  uint64_t v10 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v10;
  *((void *)a2 + 7) = v8;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  int v12 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v12;
  int v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  int v14 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v14;
  int v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  int v16 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v16;
  int v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  int v18 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v18;
  int v19 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v19;
  int v20 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v20;
  int v21 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v21;
  int v22 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v22;
  float result = *((float *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((float *)a2 + 31) = result;
  *((void *)a2 + 8) = v11;
  *((void *)a2 + 6) = v9;
  uint64_t v24 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v24;
  uint64_t v25 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v25;
  uint64_t v26 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v26;
  return result;
}

uint64_t CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6A58;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::KappaDirectionOfTravel::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaDirectionOfTravel *)v5, v3);
    CMMsl::KappaDirectionOfTravel::~KappaDirectionOfTravel((CMMsl::KappaDirectionOfTravel *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaDirectionOfTravel::formatText(CMMsl::KappaDirectionOfTravel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "combinedUnc", *((float *)this + 22));
    int v5 = *((_DWORD *)this + 36);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "combinedX", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "combinedY", *((float *)this + 24));
  if ((*((_DWORD *)this + 36) & 0x80) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "combinedZ", *((float *)this + 25));
LABEL_6:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "inerAccelApproachMx", v8);
  }
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "inerAccelCount", *((_DWORD *)this + 26));
    int v9 = *((_DWORD *)this + 36);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0) {
        goto LABEL_11;
      }
      goto LABEL_35;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(a2, "inertialApproachUnc", *((float *)this + 27));
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "inertialApproachX", *((float *)this + 28));
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "inertialApproachY", *((float *)this + 29));
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "inertialApproachZ", *((float *)this + 30));
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "previousTimeAccel", *((void *)this + 7));
  int v9 = *((_DWORD *)this + 36);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "previousTimeSag", *((void *)this + 8));
  if ((*((_DWORD *)this + 36) & 4) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(a2, "previousTimestamp", *((void *)this + 9));
LABEL_17:
  uint64_t v10 = (float *)*((void *)this + 4);
  uint64_t v11 = (float *)*((void *)this + 5);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(a2, "sagittalApproachMx", v12);
  }
  int v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(a2, "sagittalApproachUnc", *((float *)this + 31));
    int v13 = *((_DWORD *)this + 36);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_43;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(a2, "sagittalApproachX", *((float *)this + 32));
  int v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "sagittalApproachY", *((float *)this + 33));
  int v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "sagittalApproachZ", *((float *)this + 34));
  int v13 = *((_DWORD *)this + 36);
  if ((v13 & 0x20000) == 0)
  {
LABEL_24:
    if ((v13 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "sagittalCount", *((_DWORD *)this + 35));
  if ((*((_DWORD *)this + 36) & 8) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 10));
LABEL_26:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaDirectionOfTravel::readFrom(CMMsl::KappaDirectionOfTravel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 8);
    int v9 = (char *)this + 24;
    uint64_t v10 = (void **)((char *)this + 32);
    uint64_t v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 36) |= 8u;
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          uint64_t v27 = *(void *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)a2 + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_223;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_157:
            uint64_t v30 = 0;
            goto LABEL_223;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v115 = v25 + 1;
              char v116 = *(unsigned char *)(v27 + v25);
              *((void *)a2 + 1) = v115;
              v30 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                unint64_t v25 = v115;
                BOOL v18 = v114++ > 8;
                if (v18) {
                  goto LABEL_157;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v30 = 0;
              }
            }
            break;
          }
LABEL_223:
          *((void *)this + 10) = v30;
          goto LABEL_258;
        case 2u:
          *((_DWORD *)this + 36) |= 0x20u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v33);
          goto LABEL_257;
        case 3u:
          *((_DWORD *)this + 36) |= 0x40u;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v34);
          goto LABEL_257;
        case 4u:
          *((_DWORD *)this + 36) |= 0x80u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_257;
        case 5u:
          *((_DWORD *)this + 36) |= 0x10u;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v36);
          goto LABEL_257;
        case 6u:
          *((_DWORD *)this + 36) |= 0x400u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v37);
          goto LABEL_257;
        case 7u:
          *((_DWORD *)this + 36) |= 0x800u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v38);
          goto LABEL_257;
        case 8u:
          *((_DWORD *)this + 36) |= 0x1000u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v39);
          goto LABEL_257;
        case 9u:
          *((_DWORD *)this + 36) |= 0x200u;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v40);
          goto LABEL_257;
        case 0xAu:
          *((_DWORD *)this + 36) |= 0x100u;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_226;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v18 = v45++ > 8;
            }
            while (!v18);
LABEL_164:
            LODWORD(v46) = 0;
            goto LABEL_226;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v119 = v41 + 1;
              char v120 = *(unsigned char *)(v43 + v41);
              *((void *)a2 + 1) = v119;
              v46 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v41 = v119;
                BOOL v18 = v118++ > 8;
                if (v18) {
                  goto LABEL_164;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_226:
          *((_DWORD *)this + 26) = v46;
          goto LABEL_258;
        case 0xBu:
          *((_DWORD *)this + 36) |= 0x4000u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_257;
        case 0xCu:
          *((_DWORD *)this + 36) |= 0x8000u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_257;
        case 0xDu:
          *((_DWORD *)this + 36) |= 0x10000u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v51);
          goto LABEL_257;
        case 0xEu:
          *((_DWORD *)this + 36) |= 0x2000u;
          unint64_t v52 = *((void *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
            goto LABEL_255;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v52);
          goto LABEL_257;
        case 0xFu:
          *((_DWORD *)this + 36) |= 0x20000u;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_229;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v18 = v57++ > 8;
            }
            while (!v18);
LABEL_171:
            LODWORD(v58) = 0;
            goto LABEL_229;
          }
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v123 = v53 + 1;
              char v124 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v123;
              v58 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v53 = v123;
                BOOL v18 = v122++ > 8;
                if (v18) {
                  goto LABEL_171;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_229:
          *((_DWORD *)this + 35) = v58;
          goto LABEL_258;
        case 0x10u:
          *((_DWORD *)this + 36) |= 4u;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_232;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v18 = v65++ > 8;
            }
            while (!v18);
LABEL_178:
            uint64_t v66 = 0;
            goto LABEL_232;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              uint64_t v66 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v127 = v61 + 1;
              char v128 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v127;
              v66 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v61 = v127;
                BOOL v18 = v126++ > 8;
                if (v18) {
                  goto LABEL_178;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v66 = 0;
              }
            }
            break;
          }
LABEL_232:
          *((void *)this + 9) = v66;
          goto LABEL_258;
        case 0x11u:
          *((_DWORD *)this + 36) |= 1u;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_235;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v18 = v73++ > 8;
            }
            while (!v18);
LABEL_185:
            uint64_t v74 = 0;
            goto LABEL_235;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              uint64_t v74 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v131 = v69 + 1;
              char v132 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v131;
              v74 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v69 = v131;
                BOOL v18 = v130++ > 8;
                if (v18) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v74 = 0;
              }
            }
            break;
          }
LABEL_235:
          *((void *)this + 7) = v74;
          goto LABEL_258;
        case 0x12u:
          *((_DWORD *)this + 36) |= 2u;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_238;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v18 = v81++ > 8;
            }
            while (!v18);
LABEL_192:
            uint64_t v82 = 0;
            goto LABEL_238;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              uint64_t v82 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v135 = v77 + 1;
              char v136 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v135;
              v82 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                unint64_t v77 = v135;
                BOOL v18 = v134++ > 8;
                if (v18) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v82 = 0;
              }
            }
            break;
          }
LABEL_238:
          *((void *)this + 8) = v82;
          goto LABEL_258;
        case 0x13u:
          if (v24 != 2)
          {
            uint64_t v138 = (char *)*((void *)this + 5);
            unint64_t v137 = *((void *)this + 6);
            if ((unint64_t)v138 >= v137)
            {
              uint64_t v142 = (char *)*v10;
              uint64_t v143 = (v138 - (unsigned char *)*v10) >> 2;
              unint64_t v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62) {
LABEL_268:
              }
                sub_10000EE98();
              uint64_t v145 = v137 - (void)v142;
              if (v145 >> 1 > v144) {
                unint64_t v144 = v145 >> 1;
              }
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v146 = v144;
              }
              if (v146)
              {
                uint64_t v147 = (char *)sub_100024458((uint64_t)v11, v146);
                uint64_t v142 = (char *)*((void *)this + 4);
                uint64_t v138 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v147 = 0;
              }
              uint64_t v154 = &v147[4 * v143];
              *(_DWORD *)uint64_t v154 = 0;
              uint64_t v139 = v154 + 4;
              while (v138 != v142)
              {
                int v155 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *((void *)this + 4) = v154;
              *((void *)this + 5) = v139;
              *((void *)this + 6) = &v147[4 * v146];
              if (v142) {
                operator delete(v142);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v138 = 0;
              uint64_t v139 = v138 + 4;
            }
            *((void *)this + 5) = v139;
            goto LABEL_253;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          while (v85 < v86 && !*((unsigned char *)a2 + 24))
          {
            float v88 = (char *)*((void *)this + 5);
            unint64_t v87 = *((void *)this + 6);
            if ((unint64_t)v88 >= v87)
            {
              float v90 = (char *)*v10;
              uint64_t v91 = (v88 - (unsigned char *)*v10) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
                goto LABEL_268;
              }
              uint64_t v93 = v87 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                float v95 = (char *)sub_100024458((uint64_t)v11, v94);
                float v90 = (char *)*((void *)this + 4);
                float v88 = (char *)*((void *)this + 5);
              }
              else
              {
                float v95 = 0;
              }
              uint64_t v96 = &v95[4 * v91];
              *(_DWORD *)uint64_t v96 = 0;
              uint64_t v89 = v96 + 4;
              while (v88 != v90)
              {
                int v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((void *)this + 4) = v96;
              *((void *)this + 5) = v89;
              *((void *)this + 6) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)float v88 = 0;
              uint64_t v89 = v88 + 4;
            }
            *((void *)this + 5) = v89;
            unint64_t v98 = *((void *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2)) {
              goto LABEL_197;
            }
            *(v89 - 1) = *(_DWORD *)(*(void *)a2 + v98);
            unint64_t v86 = *((void *)a2 + 2);
            unint64_t v85 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v85;
          }
          goto LABEL_198;
        case 0x14u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v99 = *((void *)a2 + 1);
            unint64_t v100 = *((void *)a2 + 2);
            while (v99 < v100 && !*((unsigned char *)a2 + 24))
            {
              float v102 = (char *)*((void *)this + 2);
              unint64_t v101 = *((void *)this + 3);
              if ((unint64_t)v102 >= v101)
              {
                float v104 = (char *)*v8;
                uint64_t v105 = (v102 - (unsigned char *)*v8) >> 2;
                unint64_t v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62) {
                  goto LABEL_269;
                }
                uint64_t v107 = v101 - (void)v104;
                if (v107 >> 1 > v106) {
                  unint64_t v106 = v107 >> 1;
                }
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v108 = v106;
                }
                if (v108)
                {
                  uint64_t v109 = (char *)sub_100024458((uint64_t)v9, v108);
                  float v104 = (char *)*((void *)this + 1);
                  float v102 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v109 = 0;
                }
                float v110 = &v109[4 * v105];
                *(_DWORD *)float v110 = 0;
                uint64_t v103 = v110 + 4;
                while (v102 != v104)
                {
                  int v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *((void *)this + 1) = v110;
                *((void *)this + 2) = v103;
                *((void *)this + 3) = &v109[4 * v108];
                if (v104) {
                  operator delete(v104);
                }
              }
              else
              {
                *(_DWORD *)float v102 = 0;
                uint64_t v103 = v102 + 4;
              }
              *((void *)this + 2) = v103;
              unint64_t v112 = *((void *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2))
              {
LABEL_197:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(void *)a2 + v112);
              unint64_t v100 = *((void *)a2 + 2);
              unint64_t v99 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v99;
            }
LABEL_198:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v141 = (char *)*((void *)this + 2);
            unint64_t v140 = *((void *)this + 3);
            if ((unint64_t)v141 >= v140)
            {
              uint64_t v148 = (char *)*v8;
              uint64_t v149 = (v141 - (unsigned char *)*v8) >> 2;
              unint64_t v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62) {
LABEL_269:
              }
                sub_10000EE98();
              uint64_t v151 = v140 - (void)v148;
              if (v151 >> 1 > v150) {
                unint64_t v150 = v151 >> 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v150;
              }
              if (v152)
              {
                uint64_t v153 = (char *)sub_100024458((uint64_t)v9, v152);
                uint64_t v148 = (char *)*((void *)this + 1);
                uint64_t v141 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v153 = 0;
              }
              uint64_t v156 = &v153[4 * v149];
              *(_DWORD *)uint64_t v156 = 0;
              uint64_t v139 = v156 + 4;
              while (v141 != v148)
              {
                int v157 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }
              *((void *)this + 1) = v156;
              *((void *)this + 2) = v139;
              *((void *)this + 3) = &v153[4 * v152];
              if (v148) {
                operator delete(v148);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v139 = v141 + 4;
            }
            *((void *)this + 2) = v139;
LABEL_253:
            unint64_t v158 = *((void *)a2 + 1);
            if (v158 <= 0xFFFFFFFFFFFFFFFBLL && v158 + 4 <= *((void *)a2 + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(void *)a2 + v158);
LABEL_257:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_255:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_258:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_258;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaDirectionOfTravel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 144);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 80), 1u);
    int v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 2u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 4u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 6u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 7u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 9u);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0xAu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xBu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xCu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xDu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0xEu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xFu);
  int v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_43:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0x11u);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_42:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 0x10u);
  int v4 = *(_DWORD *)(v3 + 144);
  if (v4) {
    goto LABEL_43;
  }
LABEL_18:
  if ((v4 & 2) != 0) {
LABEL_19:
  }
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0x12u);
LABEL_20:
  int v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0x13u);
  }
  int v9 = *(float **)(v3 + 8);
  float v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    this = PB::Writer::write(a2, v10, 0x14u);
  }
  return this;
}

uint64_t CMMsl::KappaDirectionOfTravel::hash_value(CMMsl::KappaDirectionOfTravel *this)
{
  int v2 = *((_DWORD *)this + 36);
  if ((v2 & 8) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_45:
    uint64_t v5 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_46:
    uint64_t v7 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_47:
    uint64_t v9 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_48:
    uint64_t v11 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_49:
    uint64_t v13 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_18;
    }
LABEL_50:
    uint64_t v15 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_21;
    }
LABEL_51:
    uint64_t v17 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_52:
    uint64_t v19 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_27;
    }
    goto LABEL_53;
  }
  uint64_t v3 = *((void *)this + 10);
  if ((v2 & 0x20) == 0) {
    goto LABEL_45;
  }
LABEL_3:
  float v4 = *((float *)this + 23);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_46;
  }
LABEL_6:
  float v6 = *((float *)this + 24);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_47;
  }
LABEL_9:
  float v8 = *((float *)this + 25);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_48;
  }
LABEL_12:
  float v10 = *((float *)this + 22);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_49;
  }
LABEL_15:
  float v12 = *((float *)this + 28);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v2 & 0x800) == 0) {
    goto LABEL_50;
  }
LABEL_18:
  float v14 = *((float *)this + 29);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_51;
  }
LABEL_21:
  float v16 = *((float *)this + 30);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_52;
  }
LABEL_24:
  float v18 = *((float *)this + 27);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v2 & 0x100) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned int *)this + 26);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_28;
    }
LABEL_54:
    uint64_t v22 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_31;
    }
LABEL_55:
    uint64_t v24 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_34;
    }
LABEL_56:
    uint64_t v26 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_37;
    }
LABEL_57:
    uint64_t v28 = 0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_58;
  }
LABEL_53:
  uint64_t v20 = 0;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_54;
  }
LABEL_28:
  float v21 = *((float *)this + 32);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v2 & 0x8000) == 0) {
    goto LABEL_55;
  }
LABEL_31:
  float v23 = *((float *)this + 33);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v2 & 0x10000) == 0) {
    goto LABEL_56;
  }
LABEL_34:
  float v25 = *((float *)this + 34);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v2 & 0x2000) == 0) {
    goto LABEL_57;
  }
LABEL_37:
  float v27 = *((float *)this + 31);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v2 & 0x20000) != 0)
  {
LABEL_40:
    uint64_t v29 = *((unsigned int *)this + 35);
    if ((v2 & 4) != 0) {
      goto LABEL_41;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v29 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_41:
    uint64_t v30 = *((void *)this + 9);
    if (v2) {
      goto LABEL_42;
    }
LABEL_60:
    uint64_t v31 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_43;
    }
LABEL_61:
    uint64_t v32 = 0;
    goto LABEL_62;
  }
LABEL_59:
  uint64_t v30 = 0;
  if ((v2 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_42:
  uint64_t v31 = *((void *)this + 7);
  if ((v2 & 2) == 0) {
    goto LABEL_61;
  }
LABEL_43:
  uint64_t v32 = *((void *)this + 8);
LABEL_62:
  uint64_t v33 = v5 ^ v3 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes();
  return v33 ^ PBHashBytes();
}

void CMMsl::KappaGpsResult::~KappaGpsResult(CMMsl::KappaGpsResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this, const CMMsl::KappaGpsResult *a2)
{
  *(void *)this = off_1003A6A90;
  *(_DWORD *)(this + 132) = 0;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000000) != 0)
  {
    char v4 = *((unsigned char *)a2 + 126);
    int v3 = 0x4000000;
    *(_DWORD *)(this + 132) = 0x4000000;
    *(unsigned char *)(this + 126) = v4;
    int v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 127);
    v3 |= 0x8000000u;
    *(_DWORD *)(this + 132) = v3;
    *(unsigned char *)(this + 127) = v5;
    int v2 = *((_DWORD *)a2 + 33);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 26);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 132) = v3;
    *(_DWORD *)(this + 104) = v6;
    int v2 = *((_DWORD *)a2 + 33);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_36;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 30);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 120) = v7;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v8 = *((_DWORD *)a2 + 27);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 108) = v8;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v9 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 96) = v9;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v10 = *((_DWORD *)a2 + 23);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 92) = v10;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v11 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 60) = v11;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v12 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 56) = v12;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 52) = v13;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v14 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 48) = v14;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v15 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 72) = v15;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 84) = v16;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v17 = *((_DWORD *)a2 + 28);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 112) = v17;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 100) = v18;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v19 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 132) = v3;
  *(void *)(this + 32) = v19;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v20 = *((unsigned char *)a2 + 124);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 132) = v3;
  *(unsigned char *)(this + 124) = v20;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 88) = v21;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v22 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 132) = v3;
  *(void *)(this + 40) = v22;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v23 = *((_DWORD *)a2 + 29);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 116) = v23;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v24 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 132) = v3;
  *(void *)(this + 24) = v24;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x2000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 80) = v25;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v26 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 132) = v3;
  *(void *)(this + 16) = v26;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v27 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 76) = v27;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v28 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 132) = v3;
  *(void *)(this + 8) = v28;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v29 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 64) = v29;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v30 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 132) = v3;
  *(_DWORD *)(this + 68) = v30;
  int v2 = *((_DWORD *)a2 + 33);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x2000000) == 0) {
      return this;
    }
LABEL_60:
    char v32 = *((unsigned char *)a2 + 125);
    *(_DWORD *)(this + 132) = v3 | 0x2000000;
    *(unsigned char *)(this + 125) = v32;
    return this;
  }
LABEL_59:
  char v31 = *((unsigned char *)a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 132) = v3;
  *(unsigned char *)(this + 128) = v31;
  if ((*((_DWORD *)a2 + 33) & 0x2000000) != 0) {
    goto LABEL_60;
  }
  return this;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, const CMMsl::KappaGpsResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGpsResult *a2, CMMsl::KappaGpsResult *a3)
{
  int v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 126);
  *((unsigned char *)this + 126) = *((unsigned char *)a2 + 126);
  *((unsigned char *)a2 + 126) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 127);
  *((unsigned char *)this + 127) = *((unsigned char *)a2 + 127);
  *((unsigned char *)a2 + 127) = v3;
  int v4 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  int v5 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  int v6 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  int v7 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v7;
  int v8 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v8;
  int v9 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v9;
  int v10 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  int v11 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v11;
  int v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  int v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  int v14 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v14;
  int v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  int v16 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v16;
  uint64_t v17 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v17;
  LOBYTE(v17) = *((unsigned char *)this + 124);
  *((unsigned char *)this + 124) = *((unsigned char *)a2 + 124);
  *((unsigned char *)a2 + 124) = v17;
  LODWORD(v17) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v17;
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  int v19 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  int v21 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v21;
  uint64_t v22 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v22;
  int v23 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v23;
  uint64_t v24 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v24;
  int v25 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v25;
  float result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v24) = *((unsigned char *)this + 128);
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  *((unsigned char *)a2 + 128) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 125);
  *((unsigned char *)this + 125) = *((unsigned char *)a2 + 125);
  *((unsigned char *)a2 + 125) = v24;
  return result;
}

float CMMsl::KappaGpsResult::KappaGpsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6A90;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(unsigned char *)(a1 + 126) = *(unsigned char *)(a2 + 126);
  *(unsigned char *)(a1 + 127) = *(unsigned char *)(a2 + 127);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  float result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 125) = *(unsigned char *)(a2 + 125);
  return result;
}

CMMsl *CMMsl::KappaGpsResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaGpsResult::KappaGpsResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGpsResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaGpsResult::formatText(CMMsl::KappaGpsResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "configSuddenTransitionDurationThreshold", *((float *)this + 12));
    int v5 = *((_DWORD *)this + 33);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configTransitionEndSpeedThreshold", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "configTransitionStartSpeedThreshold", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "deltaTriggerTime", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gpsTimestamp", *((void *)this + 1));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "highSpeedMetersPerSecondThreshold", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "isGPSDetected", *((unsigned char *)this + 124));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "isGPSDetectedDebug", *((unsigned char *)this + 125));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "isSuddenTransitionDetected", *((unsigned char *)this + 126));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "isTransitionDetected", *((unsigned char *)this + 127));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedEnd", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "lastDetectedTransitionSpeedStart", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeEnd", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "lastDetectedTransitionTimeStart", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "loggedAtEpoch", *((unsigned char *)this + 128));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "lowSpeedMetersPerSecondThresold", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 22));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "streamEndSpeed", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "streamStartSpeed", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 4));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "transitionBaseDuration", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "transitionDuration", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "transitionEndSpeed", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "transitionEpsilonDuration", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "transitionSpeedStart", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 33);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "transitionStartSpeed", *((float *)this + 30));
  if ((*((_DWORD *)this + 33) & 0x10) != 0) {
LABEL_30:
  }
    PB::TextFormatter::format(a2, "transitionTimeStart", *((void *)this + 5));
LABEL_31:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGpsResult::readFrom(CMMsl::KappaGpsResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *((_DWORD *)this + 33) |= 8u;
            unint64_t v23 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v24 = *(void *)a2;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
            {
              char v74 = 0;
              unsigned int v75 = 0;
              uint64_t v27 = 0;
              if (v2 <= v23) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v23)
                {
                  uint64_t v27 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_208;
                }
                unint64_t v76 = v23++;
                char v77 = *(unsigned char *)(v24 + v76);
                *((void *)a2 + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0) {
                  break;
                }
                v74 += 7;
                BOOL v14 = v75++ > 8;
                if (v14)
                {
                  uint64_t v27 = 0;
LABEL_207:
                  unint64_t v2 = v76 + 1;
                  goto LABEL_208;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v27 = 0;
              }
              goto LABEL_207;
            }
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v2 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v28 = *(unsigned char *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0) {
                goto LABEL_208;
              }
              v25 += 7;
              unint64_t v23 = v2;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
            uint64_t v27 = 0;
LABEL_208:
            *((void *)this + 4) = v27;
            break;
          case 202:
            *((_DWORD *)this + 33) |= 0x1000000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v44 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v44 = v43 != 0;
            }
            *((unsigned char *)this + 124) = v44;
            break;
          case 203:
            *((_DWORD *)this + 33) |= 0x8000u;
            unint64_t v45 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v46 = *(void *)a2;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              char v86 = 0;
              unsigned int v87 = 0;
              uint64_t v49 = 0;
              if (v2 <= v45) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_223;
                }
                unint64_t v88 = v45++;
                char v89 = *(unsigned char *)(v46 + v88);
                *((void *)a2 + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0) {
                  break;
                }
                v86 += 7;
                BOOL v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  unint64_t v2 = v88 + 1;
                  goto LABEL_223;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v49) = 0;
              }
              goto LABEL_222;
            }
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v2 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v50 = *(unsigned char *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0) {
                goto LABEL_223;
              }
              v47 += 7;
              unint64_t v45 = v2;
              BOOL v14 = v48++ > 8;
            }
            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *((_DWORD *)this + 22) = v49;
            break;
          case 204:
            *((_DWORD *)this + 33) |= 0x10u;
            unint64_t v51 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v52 = *(void *)a2;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              char v90 = 0;
              unsigned int v91 = 0;
              uint64_t v55 = 0;
              if (v2 <= v51) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v51)
                {
                  uint64_t v55 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_228;
                }
                unint64_t v92 = v51++;
                char v93 = *(unsigned char *)(v52 + v92);
                *((void *)a2 + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0) {
                  break;
                }
                v90 += 7;
                BOOL v14 = v91++ > 8;
                if (v14)
                {
                  uint64_t v55 = 0;
LABEL_227:
                  unint64_t v2 = v92 + 1;
                  goto LABEL_228;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v55 = 0;
              }
              goto LABEL_227;
            }
            char v53 = 0;
            unsigned int v54 = 0;
            uint64_t v55 = 0;
            do
            {
              unint64_t v2 = v51 + 1;
              *((void *)a2 + 1) = v51 + 1;
              char v56 = *(unsigned char *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0) {
                goto LABEL_228;
              }
              v53 += 7;
              unint64_t v51 = v2;
              BOOL v14 = v54++ > 8;
            }
            while (!v14);
            uint64_t v55 = 0;
LABEL_228:
            *((void *)this + 5) = v55;
            break;
          case 205:
            *((_DWORD *)this + 33) |= 0x400000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 206:
            *((_DWORD *)this + 33) |= 4u;
            unint64_t v57 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v58 = *(void *)a2;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              char v94 = 0;
              unsigned int v95 = 0;
              uint64_t v61 = 0;
              if (v2 <= v57) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v57)
                {
                  uint64_t v61 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_233;
                }
                unint64_t v96 = v57++;
                char v97 = *(unsigned char *)(v58 + v96);
                *((void *)a2 + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0) {
                  break;
                }
                v94 += 7;
                BOOL v14 = v95++ > 8;
                if (v14)
                {
                  uint64_t v61 = 0;
LABEL_232:
                  unint64_t v2 = v96 + 1;
                  goto LABEL_233;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v61 = 0;
              }
              goto LABEL_232;
            }
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v2 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v62 = *(unsigned char *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0) {
                goto LABEL_233;
              }
              v59 += 7;
              unint64_t v57 = v2;
              BOOL v14 = v60++ > 8;
            }
            while (!v14);
            uint64_t v61 = 0;
LABEL_233:
            *((void *)this + 3) = v61;
            break;
          case 207:
            *((_DWORD *)this + 33) |= 0x2000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 208:
            *((_DWORD *)this + 33) |= 2u;
            unint64_t v63 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v64 = *(void *)a2;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              char v98 = 0;
              unsigned int v99 = 0;
              uint64_t v67 = 0;
              if (v2 <= v63) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v63)
                {
                  uint64_t v67 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_238;
                }
                unint64_t v100 = v63++;
                char v101 = *(unsigned char *)(v64 + v100);
                *((void *)a2 + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0) {
                  break;
                }
                v98 += 7;
                BOOL v14 = v99++ > 8;
                if (v14)
                {
                  uint64_t v67 = 0;
LABEL_237:
                  unint64_t v2 = v100 + 1;
                  goto LABEL_238;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v67 = 0;
              }
              goto LABEL_237;
            }
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v2 = v63 + 1;
              *((void *)a2 + 1) = v63 + 1;
              char v68 = *(unsigned char *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0) {
                goto LABEL_238;
              }
              v65 += 7;
              unint64_t v63 = v2;
              BOOL v14 = v66++ > 8;
            }
            while (!v14);
            uint64_t v67 = 0;
LABEL_238:
            *((void *)this + 2) = v67;
            break;
          case 209:
            *((_DWORD *)this + 33) |= 0x1000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
            {
LABEL_137:
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_198:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v2;
            }
            break;
          default:
            switch((int)v20)
            {
              case 301:
                *((_DWORD *)this + 33) |= 1u;
                unint64_t v29 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v30 = *(void *)a2;
                if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
                {
                  char v78 = 0;
                  unsigned int v79 = 0;
                  uint64_t v33 = 0;
                  if (v2 <= v29) {
                    unint64_t v2 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      uint64_t v33 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_213;
                    }
                    unint64_t v80 = v29++;
                    char v81 = *(unsigned char *)(v30 + v80);
                    *((void *)a2 + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0) {
                      break;
                    }
                    v78 += 7;
                    BOOL v14 = v79++ > 8;
                    if (v14)
                    {
                      uint64_t v33 = 0;
LABEL_212:
                      unint64_t v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v33 = 0;
                  }
                  goto LABEL_212;
                }
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v33 = 0;
                do
                {
                  unint64_t v2 = v29 + 1;
                  *((void *)a2 + 1) = v29 + 1;
                  char v34 = *(unsigned char *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    goto LABEL_213;
                  }
                  v31 += 7;
                  unint64_t v29 = v2;
                  BOOL v14 = v32++ > 8;
                }
                while (!v14);
                uint64_t v33 = 0;
LABEL_213:
                *((void *)this + 1) = v33;
                break;
              case 302:
                *((_DWORD *)this + 33) |= 0x200u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_198;
              case 303:
                *((_DWORD *)this + 33) |= 0x400u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_198;
              case 304:
                *((_DWORD *)this + 33) |= 0x10000000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 >= *((void *)a2 + 2))
                {
                  BOOL v70 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  int v69 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                  *((void *)a2 + 1) = v2;
                  BOOL v70 = v69 != 0;
                }
                *((unsigned char *)this + 128) = v70;
                goto LABEL_199;
              case 305:
                *((_DWORD *)this + 33) |= 0x2000000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 >= *((void *)a2 + 2))
                {
                  BOOL v72 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  int v71 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                  *((void *)a2 + 1) = v2;
                  BOOL v72 = v71 != 0;
                }
                *((unsigned char *)this + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!result) {
                  return result;
                }
                unint64_t v2 = *((void *)a2 + 1);
                goto LABEL_199;
            }
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1:
            *((_DWORD *)this + 33) |= 0x4000000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v22 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v22 = v21 != 0;
            }
            *((unsigned char *)this + 126) = v22;
            break;
          case 2:
            *((_DWORD *)this + 33) |= 0x8000000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v36 = v35 != 0;
            }
            *((unsigned char *)this + 127) = v36;
            break;
          case 3:
            *((_DWORD *)this + 33) |= 0x80000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 4:
            *((_DWORD *)this + 33) |= 0x800000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 5:
            *((_DWORD *)this + 33) |= 0x100000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 6:
            *((_DWORD *)this + 33) |= 0x20000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 7:
            *((_DWORD *)this + 33) |= 0x10000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 8:
            *((_DWORD *)this + 33) |= 0x100u;
            unint64_t v37 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v38 = *(void *)a2;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              char v82 = 0;
              unsigned int v83 = 0;
              uint64_t v41 = 0;
              if (v2 <= v37) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_218;
                }
                unint64_t v84 = v37++;
                char v85 = *(unsigned char *)(v38 + v84);
                *((void *)a2 + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0) {
                  break;
                }
                v82 += 7;
                BOOL v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  unint64_t v2 = v84 + 1;
                  goto LABEL_218;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v41) = 0;
              }
              goto LABEL_217;
            }
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v2 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v42 = *(unsigned char *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0) {
                goto LABEL_218;
              }
              v39 += 7;
              unint64_t v37 = v2;
              BOOL v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *((_DWORD *)this + 15) = v41;
            break;
          case 9:
            *((_DWORD *)this + 33) |= 0x80u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 10:
            *((_DWORD *)this + 33) |= 0x40u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          case 11:
            *((_DWORD *)this + 33) |= 0x20u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_137;
            }
            *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *((_DWORD *)this + 33) |= 0x800u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
                break;
              case 'f':
                *((_DWORD *)this + 33) |= 0x4000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
                break;
              case 'g':
                *((_DWORD *)this + 33) |= 0x200000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
                break;
              case 'h':
                *((_DWORD *)this + 33) |= 0x40000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_137;
                }
                *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
                break;
              default:
                goto LABEL_127;
            }
            goto LABEL_198;
        }
      }
LABEL_199:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaGpsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 132);
  if ((v4 & 0x4000000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 126), 1u);
    int v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 127), 2u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 3u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 4u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 5u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 6u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 7u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 8u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 9u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xAu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xBu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x65u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x66u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x67u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x68u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0xC9u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 124), 0xCAu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xCBu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0xCCu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xCDu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xCEu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCFu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xD0u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xD1u);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x12Du);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x12Eu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
LABEL_58:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 128), 0x130u);
    if ((*(_DWORD *)(v3 + 132) & 0x2000000) == 0) {
      return this;
    }
    goto LABEL_59;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x12Fu);
  int v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) != 0) {
    goto LABEL_58;
  }
LABEL_29:
  if ((v4 & 0x2000000) == 0) {
    return this;
  }
LABEL_59:
  char v5 = *(unsigned char *)(v3 + 125);

  return PB::Writer::write(a2, v5, 0x131u);
}

uint64_t CMMsl::KappaGpsResult::hash_value(CMMsl::KappaGpsResult *this)
{
  int v1 = *((_DWORD *)this + 33);
  if ((v1 & 0x4000000) != 0)
  {
    uint64_t v48 = *((unsigned __int8 *)this + 126);
    if ((v1 & 0x8000000) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned __int8 *)this + 127);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
LABEL_84:
      uint64_t v4 = 0;
      if ((v1 & 0x800000) != 0) {
        goto LABEL_8;
      }
LABEL_85:
      uint64_t v6 = 0;
      if ((v1 & 0x100000) != 0) {
        goto LABEL_12;
      }
LABEL_86:
      uint64_t v8 = 0;
      if ((v1 & 0x20000) != 0) {
        goto LABEL_16;
      }
LABEL_87:
      uint64_t v10 = 0;
      if ((v1 & 0x10000) != 0) {
        goto LABEL_20;
      }
LABEL_88:
      uint64_t v12 = 0;
      if ((v1 & 0x100) != 0) {
        goto LABEL_24;
      }
      goto LABEL_89;
    }
  }
  else
  {
    uint64_t v48 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_84;
  }
LABEL_4:
  float v3 = *((float *)this + 26);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = LODWORD(v3);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_85;
  }
LABEL_8:
  float v5 = *((float *)this + 30);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = LODWORD(v5);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_86;
  }
LABEL_12:
  float v7 = *((float *)this + 27);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = LODWORD(v7);
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_87;
  }
LABEL_16:
  float v9 = *((float *)this + 24);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = LODWORD(v9);
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_88;
  }
LABEL_20:
  float v11 = *((float *)this + 23);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = LODWORD(v11);
  }
  if ((v1 & 0x100) != 0)
  {
LABEL_24:
    uint64_t v13 = *((int *)this + 15);
    if ((v1 & 0x80) != 0) {
      goto LABEL_25;
    }
LABEL_90:
    uint64_t v15 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_29;
    }
LABEL_91:
    uint64_t v17 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_33;
    }
LABEL_92:
    uint64_t v19 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_37;
    }
LABEL_93:
    uint64_t v21 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_41;
    }
LABEL_94:
    uint64_t v23 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_45;
    }
LABEL_95:
    uint64_t v25 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_49;
    }
LABEL_96:
    uint64_t v27 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_53;
    }
    goto LABEL_97;
  }
LABEL_89:
  uint64_t v13 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_90;
  }
LABEL_25:
  float v14 = *((float *)this + 14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = LODWORD(v14);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_91;
  }
LABEL_29:
  float v16 = *((float *)this + 13);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_92;
  }
LABEL_33:
  float v18 = *((float *)this + 12);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_93;
  }
LABEL_37:
  float v20 = *((float *)this + 18);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_94;
  }
LABEL_41:
  float v22 = *((float *)this + 21);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_95;
  }
LABEL_45:
  float v24 = *((float *)this + 28);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_96;
  }
LABEL_49:
  float v26 = *((float *)this + 25);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 8) != 0)
  {
LABEL_53:
    uint64_t v28 = *((void *)this + 4);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_98;
  }
LABEL_97:
  uint64_t v28 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_54:
    uint64_t v29 = *((unsigned __int8 *)this + 124);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_99;
  }
LABEL_98:
  uint64_t v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_55:
    uint64_t v30 = *((int *)this + 22);
    if ((v1 & 0x10) != 0) {
      goto LABEL_56;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t v30 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_56:
    uint64_t v31 = *((void *)this + 5);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_57;
    }
LABEL_101:
    uint64_t v33 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_61;
    }
    goto LABEL_102;
  }
LABEL_100:
  uint64_t v31 = 0;
  if ((v1 & 0x400000) == 0) {
    goto LABEL_101;
  }
LABEL_57:
  float v32 = *((float *)this + 29);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = LODWORD(v32);
  }
  if ((v1 & 4) != 0)
  {
LABEL_61:
    uint64_t v34 = *((void *)this + 3);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_62;
    }
LABEL_103:
    uint64_t v36 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_66;
    }
    goto LABEL_104;
  }
LABEL_102:
  uint64_t v34 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_103;
  }
LABEL_62:
  float v35 = *((float *)this + 20);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 2) != 0)
  {
LABEL_66:
    uint64_t v37 = *((void *)this + 2);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_67;
    }
LABEL_105:
    uint64_t v39 = 0;
    if (v1) {
      goto LABEL_71;
    }
    goto LABEL_106;
  }
LABEL_104:
  uint64_t v37 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_105;
  }
LABEL_67:
  float v38 = *((float *)this + 19);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if (v1)
  {
LABEL_71:
    uint64_t v40 = *((void *)this + 1);
    if ((v1 & 0x200) != 0) {
      goto LABEL_72;
    }
LABEL_107:
    uint64_t v42 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_76;
    }
LABEL_108:
    uint64_t v44 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_80;
    }
LABEL_109:
    uint64_t v45 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_81;
    }
LABEL_110:
    uint64_t v46 = 0;
    return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
  }
LABEL_106:
  uint64_t v40 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_107;
  }
LABEL_72:
  float v41 = *((float *)this + 16);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_108;
  }
LABEL_76:
  float v43 = *((float *)this + 17);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_109;
  }
LABEL_80:
  uint64_t v45 = *((unsigned __int8 *)this + 128);
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_110;
  }
LABEL_81:
  uint64_t v46 = *((unsigned __int8 *)this + 125);
  return v2 ^ v48 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v36 ^ v37 ^ v39 ^ v40 ^ v42 ^ v44 ^ v45 ^ v46;
}

void CMMsl::KappaGravityAutocorrelationResult::~KappaGravityAutocorrelationResult(CMMsl::KappaGravityAutocorrelationResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  *(void *)this = off_1003A6AC8;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *((_DWORD *)a2 + 11);
    __int16 v3 = 64;
    *(_WORD *)(this + 64) = 64;
    *(_DWORD *)(this + 44) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 36) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 10);
    v3 |= 0x20u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 40) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 24) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v9 = *((unsigned char *)a2 + 61);
  v3 |= 0x800u;
  *(_WORD *)(this + 64) = v3;
  *(unsigned char *)(this + 61) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v10 = *((unsigned char *)a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(this + 64) = v3;
  *(unsigned char *)(this + 60) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 8) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 56) = v13;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_26:
    int v15 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 64) = v3 | 0x80;
    *(_DWORD *)(this + 48) = v15;
    return this;
  }
LABEL_25:
  int v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 52) = v14;
  if ((*((_WORD *)a2 + 32) & 0x80) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *a1, const CMMsl::KappaGravityAutocorrelationResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGravityAutocorrelationResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaGravityAutocorrelationResult *a2, CMMsl::KappaGravityAutocorrelationResult *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  int v4 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  int v5 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  int v6 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  int v7 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 61);
  *((unsigned char *)this + 61) = *((unsigned char *)a2 + 61);
  *((unsigned char *)a2 + 61) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  LODWORD(v10) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v10;
  float result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v10) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  return result;
}

float CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6AC8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  float result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

CMMsl *CMMsl::KappaGravityAutocorrelationResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaGravityAutocorrelationResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::formatText(CMMsl::KappaGravityAutocorrelationResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationRangeValCriticalThreshold", *((float *)this + 8));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "autocorrelationRangeValThreshold", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationCriticalThreshold", *((_DWORD *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "autocorrelationTimeVariationThreshold", *((_DWORD *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isCriticalFP", *((unsigned char *)this + 60));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "isPeriodic", *((unsigned char *)this + 61));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "numDmSamplesEpoch", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "rangeVal", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timeVariation", *((_DWORD *)this + 14));
  if ((*((_WORD *)this + 32) & 4) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 3));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::readFrom(CMMsl::KappaGravityAutocorrelationResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v20)
        {
          case 301:
            *((_WORD *)this + 32) |= 1u;
            unint64_t v27 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v28 = *(void *)a2;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              char v72 = 0;
              unsigned int v73 = 0;
              uint64_t v31 = 0;
              if (v2 <= v27) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v27)
                {
                  uint64_t v31 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_155;
                }
                unint64_t v74 = v27++;
                char v75 = *(unsigned char *)(v28 + v74);
                *((void *)a2 + 1) = v27;
                v31 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0) {
                  break;
                }
                v72 += 7;
                BOOL v14 = v73++ > 8;
                if (v14)
                {
                  uint64_t v31 = 0;
LABEL_154:
                  unint64_t v2 = v74 + 1;
                  goto LABEL_155;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v31 = 0;
              }
              goto LABEL_154;
            }
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v2 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v32 = *(unsigned char *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0) {
                goto LABEL_155;
              }
              v29 += 7;
              unint64_t v27 = v2;
              BOOL v14 = v30++ > 8;
            }
            while (!v14);
            uint64_t v31 = 0;
LABEL_155:
            *((void *)this + 1) = v31;
            break;
          case 302:
            *((_WORD *)this + 32) |= 2u;
            unint64_t v43 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v44 = *(void *)a2;
            if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
            {
              char v80 = 0;
              unsigned int v81 = 0;
              uint64_t v47 = 0;
              if (v2 <= v43) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v43)
                {
                  uint64_t v47 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_165;
                }
                unint64_t v82 = v43++;
                char v83 = *(unsigned char *)(v44 + v82);
                *((void *)a2 + 1) = v43;
                v47 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0) {
                  break;
                }
                v80 += 7;
                BOOL v14 = v81++ > 8;
                if (v14)
                {
                  uint64_t v47 = 0;
LABEL_164:
                  unint64_t v2 = v82 + 1;
                  goto LABEL_165;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v47 = 0;
              }
              goto LABEL_164;
            }
            char v45 = 0;
            unsigned int v46 = 0;
            uint64_t v47 = 0;
            do
            {
              unint64_t v2 = v43 + 1;
              *((void *)a2 + 1) = v43 + 1;
              char v48 = *(unsigned char *)(v44 + v43);
              v47 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0) {
                goto LABEL_165;
              }
              v45 += 7;
              unint64_t v43 = v2;
              BOOL v14 = v46++ > 8;
            }
            while (!v14);
            uint64_t v47 = 0;
LABEL_165:
            *((void *)this + 2) = v47;
            break;
          case 303:
            *((_WORD *)this + 32) |= 0x200u;
            unint64_t v49 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v50 = *(void *)a2;
            if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
            {
              char v84 = 0;
              unsigned int v85 = 0;
              uint64_t v53 = 0;
              if (v2 <= v49) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v49)
                {
                  LODWORD(v53) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_170;
                }
                unint64_t v86 = v49++;
                char v87 = *(unsigned char *)(v50 + v86);
                *((void *)a2 + 1) = v49;
                v53 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0) {
                  break;
                }
                v84 += 7;
                BOOL v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v53) = 0;
LABEL_169:
                  unint64_t v2 = v86 + 1;
                  goto LABEL_170;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v53) = 0;
              }
              goto LABEL_169;
            }
            char v51 = 0;
            unsigned int v52 = 0;
            uint64_t v53 = 0;
            do
            {
              unint64_t v2 = v49 + 1;
              *((void *)a2 + 1) = v49 + 1;
              char v54 = *(unsigned char *)(v50 + v49);
              v53 |= (unint64_t)(v54 & 0x7F) << v51;
              if ((v54 & 0x80) == 0) {
                goto LABEL_170;
              }
              v51 += 7;
              unint64_t v49 = v2;
              BOOL v14 = v52++ > 8;
            }
            while (!v14);
            LODWORD(v53) = 0;
LABEL_170:
            *((_DWORD *)this + 14) = v53;
            break;
          case 304:
            *((_WORD *)this + 32) |= 0x100u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
            {
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_145:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v2;
            }
            else
            {
LABEL_74:
              *((unsigned char *)a2 + 24) = 1;
            }
            break;
          case 305:
            *((_WORD *)this + 32) |= 0x80u;
            unint64_t v55 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v56 = *(void *)a2;
            if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
            {
              char v88 = 0;
              unsigned int v89 = 0;
              uint64_t v59 = 0;
              if (v2 <= v55) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v55)
                {
                  LODWORD(v59) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_175;
                }
                unint64_t v90 = v55++;
                char v91 = *(unsigned char *)(v56 + v90);
                *((void *)a2 + 1) = v55;
                v59 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0) {
                  break;
                }
                v88 += 7;
                BOOL v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v59) = 0;
LABEL_174:
                  unint64_t v2 = v90 + 1;
                  goto LABEL_175;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v59) = 0;
              }
              goto LABEL_174;
            }
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0;
            do
            {
              unint64_t v2 = v55 + 1;
              *((void *)a2 + 1) = v55 + 1;
              char v60 = *(unsigned char *)(v56 + v55);
              v59 |= (unint64_t)(v60 & 0x7F) << v57;
              if ((v60 & 0x80) == 0) {
                goto LABEL_175;
              }
              v57 += 7;
              unint64_t v55 = v2;
              BOOL v14 = v58++ > 8;
            }
            while (!v14);
            LODWORD(v59) = 0;
LABEL_175:
            *((_DWORD *)this + 12) = v59;
            break;
          default:
            if (v20 != 203) {
              goto LABEL_89;
            }
            *((_WORD *)this + 32) |= 0x400u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v36 = v35 != 0;
            }
            *((unsigned char *)this + 60) = v36;
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 'e':
            *((_WORD *)this + 32) |= 0x40u;
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v22 = *(void *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              char v68 = 0;
              unsigned int v69 = 0;
              uint64_t v25 = 0;
              if (v2 <= v21) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_150;
                }
                unint64_t v70 = v21++;
                char v71 = *(unsigned char *)(v22 + v70);
                *((void *)a2 + 1) = v21;
                v25 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0) {
                  break;
                }
                v68 += 7;
                BOOL v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
LABEL_149:
                  unint64_t v2 = v70 + 1;
                  goto LABEL_150;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
              goto LABEL_149;
            }
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v2 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                goto LABEL_150;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
            LODWORD(v25) = 0;
LABEL_150:
            *((_DWORD *)this + 11) = v25;
            break;
          case 'f':
            *((_WORD *)this + 32) |= 0x10u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_74;
            }
            *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_145;
          case 'g':
            *((_WORD *)this + 32) |= 0x20u;
            unint64_t v37 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v38 = *(void *)a2;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              char v76 = 0;
              unsigned int v77 = 0;
              uint64_t v41 = 0;
              if (v2 <= v37) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_160;
                }
                unint64_t v78 = v37++;
                char v79 = *(unsigned char *)(v38 + v78);
                *((void *)a2 + 1) = v37;
                v41 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0) {
                  break;
                }
                v76 += 7;
                BOOL v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_159:
                  unint64_t v2 = v78 + 1;
                  goto LABEL_160;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v41) = 0;
              }
              goto LABEL_159;
            }
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v41 = 0;
            do
            {
              unint64_t v2 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v42 = *(unsigned char *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0) {
                goto LABEL_160;
              }
              v39 += 7;
              unint64_t v37 = v2;
              BOOL v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_160:
            *((_DWORD *)this + 10) = v41;
            break;
          case 'h':
            *((_WORD *)this + 32) |= 8u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_74;
            }
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_145;
          default:
            if (v20 == 201)
            {
              *((_WORD *)this + 32) |= 4u;
              unint64_t v61 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v62 = *(void *)a2;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                char v92 = 0;
                unsigned int v93 = 0;
                uint64_t v65 = 0;
                if (v2 <= v61) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    uint64_t v65 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_180;
                  }
                  unint64_t v94 = v61++;
                  char v95 = *(unsigned char *)(v62 + v94);
                  *((void *)a2 + 1) = v61;
                  v65 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0) {
                    break;
                  }
                  v92 += 7;
                  BOOL v14 = v93++ > 8;
                  if (v14)
                  {
                    uint64_t v65 = 0;
                    goto LABEL_179;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v65 = 0;
                }
LABEL_179:
                unint64_t v2 = v94 + 1;
              }
              else
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v65 = 0;
                while (1)
                {
                  unint64_t v2 = v61 + 1;
                  *((void *)a2 + 1) = v61 + 1;
                  char v66 = *(unsigned char *)(v62 + v61);
                  v65 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  unint64_t v61 = v2;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v65 = 0;
                    break;
                  }
                }
              }
LABEL_180:
              *((void *)this + 3) = v65;
            }
            else if (v20 == 202)
            {
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 61) = v34;
            }
            else
            {
LABEL_89:
              uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
            }
            break;
        }
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 44), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x67u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x68u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xC9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 61), 0xCAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 60), 0xCBu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x12Du);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x12Eu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x130u);
    if ((*(_WORD *)(v3 + 64) & 0x80) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x12Fu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_25:
  int v5 = *(_DWORD *)(v3 + 48);

  return PB::Writer::writeVarInt(a2, v5, 0x131u);
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::hash_value(CMMsl::KappaGravityAutocorrelationResult *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if ((v1 & 0x40) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_21:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
  uint64_t v2 = *((int *)this + 11);
  if ((v1 & 0x10) == 0) {
    goto LABEL_21;
  }
LABEL_3:
  float v3 = *((float *)this + 9);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((int *)this + 10);
    if ((v1 & 8) != 0) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v7 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v5 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_23;
  }
LABEL_7:
  float v6 = *((float *)this + 8);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_10:
    uint64_t v8 = *((void *)this + 3);
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 32) & 0x800) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 61);
    if ((*((_WORD *)this + 32) & 0x400) != 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 60);
    if (v1) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v10 = 0;
  if (v1)
  {
LABEL_13:
    uint64_t v11 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v11 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_14:
    uint64_t v12 = *((void *)this + 2);
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 32) & 0x200) != 0)
  {
LABEL_15:
    uint64_t v13 = *((int *)this + 14);
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 32) & 0x100) != 0)
  {
LABEL_16:
    float v14 = *((float *)this + 13);
    uint64_t v15 = LODWORD(v14);
    if (v14 == 0.0) {
      uint64_t v15 = 0;
    }
    if ((v1 & 0x80) != 0) {
      goto LABEL_19;
    }
LABEL_31:
    uint64_t v16 = 0;
    return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
  }
LABEL_30:
  uint64_t v15 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_19:
  uint64_t v16 = *((int *)this + 12);
  return v4 ^ v2 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v15 ^ v16;
}

void CMMsl::KappaHighSpeedCrashResult::~KappaHighSpeedCrashResult(CMMsl::KappaHighSpeedCrashResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  *(void *)this = off_1003A6B00;
  *(_DWORD *)(this + 68) = 0;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 5);
    int v3 = 4;
    *(_DWORD *)(this + 68) = 4;
    *(_DWORD *)(this + 20) = v4;
    int v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    int v2 = *((_DWORD *)a2 + 17);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_DWORD *)(this + 68) = v3;
    *(_DWORD *)(this + 24) = v6;
    int v2 = *((_DWORD *)a2 + 17);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 68) = v3;
  *(void *)(this + 8) = v7;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  char v8 = *((unsigned char *)a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 56) = v8;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v9 = *((unsigned char *)a2 + 57);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 57) = v9;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v10 = *((unsigned char *)a2 + 58);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 58) = v10;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  char v11 = *((unsigned char *)a2 + 65);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 65) = v11;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  char v12 = *((unsigned char *)a2 + 63);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 63) = v12;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  char v13 = *((unsigned char *)a2 + 60);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 60) = v13;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v14 = *((unsigned char *)a2 + 59);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 59) = v14;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v15 = *((unsigned char *)a2 + 64);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 64) = v15;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  char v16 = *((unsigned char *)a2 + 61);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 61) = v16;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v17 = *((unsigned char *)a2 + 62);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 68) = v3;
  *(unsigned char *)(this + 62) = v17;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v18 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v18;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v19 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v19;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v20 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v20;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v21 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v21;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v22 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v22;
  int v2 = *((_DWORD *)a2 + 17);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_44:
    int v24 = *((_DWORD *)a2 + 10);
    *(_DWORD *)(this + 68) = v3 | 0x80;
    *(_DWORD *)(this + 40) = v24;
    return this;
  }
LABEL_43:
  int v23 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_DWORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v23;
  if ((*((_DWORD *)a2 + 17) & 0x80) != 0) {
    goto LABEL_44;
  }
  return this;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, const CMMsl::KappaHighSpeedCrashResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaHighSpeedCrashResult *a2, CMMsl::KappaHighSpeedCrashResult *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  int v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 58);
  *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  *((unsigned char *)a2 + 58) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 65);
  *((unsigned char *)this + 65) = *((unsigned char *)a2 + 65);
  *((unsigned char *)a2 + 65) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 63);
  *((unsigned char *)this + 63) = *((unsigned char *)a2 + 63);
  *((unsigned char *)a2 + 63) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 59);
  *((unsigned char *)this + 59) = *((unsigned char *)a2 + 59);
  *((unsigned char *)a2 + 59) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 61);
  *((unsigned char *)this + 61) = *((unsigned char *)a2 + 61);
  *((unsigned char *)a2 + 61) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 62);
  *((unsigned char *)this + 62) = *((unsigned char *)a2 + 62);
  *((unsigned char *)a2 + 62) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v7;
  LODWORD(v7) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
  LODWORD(v7) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v7;
  LODWORD(v7) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v7;
  LODWORD(v7) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  return result;
}

float CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6B00;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(unsigned char *)(a1 + 63) = *(unsigned char *)(a2 + 63);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(unsigned char *)(a1 + 62) = *(unsigned char *)(a2 + 62);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::KappaHighSpeedCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaHighSpeedCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::formatText(CMMsl::KappaHighSpeedCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "crashDetectorDecision", *((unsigned char *)this + 56));
    int v5 = *((_DWORD *)this + 17);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "detectorPostTriggerTimeOffsetWindow", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "detectorPreTriggerTimeOffsetWindow", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x1000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision", *((unsigned char *)this + 57));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "epochLatchingCount", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((unsigned char *)this + 58));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "isAudio", *((unsigned char *)this + 59));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "isBaro", *((unsigned char *)this + 60));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isDescalationDecided", *((unsigned char *)this + 61));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isDescalationRequired", *((unsigned char *)this + 62));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isFreeFall", *((unsigned char *)this + 63));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isGPS", *((unsigned char *)this + 64));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isPulse", *((unsigned char *)this + 65));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "latchedIsAudio", *((_DWORD *)this + 7));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "latchedIsBaro", *((_DWORD *)this + 8));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "latchedIsDescalationDecided", *((_DWORD *)this + 9));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "latchedIsDescalationRequired", *((_DWORD *)this + 10));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "latchedIsFreeFall", *((_DWORD *)this + 11));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "latchedIsGPS", *((_DWORD *)this + 12));
  int v5 = *((_DWORD *)this + 17);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "latchedIsPulse", *((_DWORD *)this + 13));
  if (*((_DWORD *)this + 17)) {
LABEL_22:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_23:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaHighSpeedCrashResult::readFrom(CMMsl::KappaHighSpeedCrashResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      if ((v11 >> 3) <= 0xC8)
      {
        switch((int)v20)
        {
          case 301:
            *((_DWORD *)this + 17) |= 0x100000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v28 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v28 = v27 != 0;
            }
            *((unsigned char *)this + 65) = v28;
            break;
          case 302:
            *((_DWORD *)this + 17) |= 0x40000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v79 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v78 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v79 = v78 != 0;
            }
            *((unsigned char *)this + 63) = v79;
            break;
          case 303:
            *((_DWORD *)this + 17) |= 0x8000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v81 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v80 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v81 = v80 != 0;
            }
            *((unsigned char *)this + 60) = v81;
            break;
          case 304:
            *((_DWORD *)this + 17) |= 0x4000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v83 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v82 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v83 = v82 != 0;
            }
            *((unsigned char *)this + 59) = v83;
            break;
          case 305:
            *((_DWORD *)this + 17) |= 0x80000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v85 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v84 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v85 = v84 != 0;
            }
            *((unsigned char *)this + 64) = v85;
            break;
          case 306:
            *((_DWORD *)this + 17) |= 0x10000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v87 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v86 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v87 = v86 != 0;
            }
            *((unsigned char *)this + 61) = v87;
            break;
          case 307:
            *((_DWORD *)this + 17) |= 0x20000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v89 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v88 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v89 = v88 != 0;
            }
            *((unsigned char *)this + 62) = v89;
            break;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
        switch((int)v20)
        {
          case 401:
            *((_DWORD *)this + 17) |= 0x400u;
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v22 = *(void *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              char v94 = 0;
              unsigned int v95 = 0;
              uint64_t v25 = 0;
              if (v2 <= v21) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_207;
                }
                unint64_t v96 = v21++;
                char v97 = *(unsigned char *)(v22 + v96);
                *((void *)a2 + 1) = v21;
                v25 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0) {
                  break;
                }
                v94 += 7;
                BOOL v14 = v95++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_206;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
LABEL_206:
              unint64_t v2 = v96 + 1;
            }
            else
            {
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              while (1)
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  break;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
                  break;
                }
              }
            }
LABEL_207:
            *((_DWORD *)this + 13) = v25;
            break;
          case 402:
            *((_DWORD *)this + 17) |= 0x100u;
            unint64_t v42 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v43 = *(void *)a2;
            if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
            {
              char v98 = 0;
              unsigned int v99 = 0;
              uint64_t v46 = 0;
              if (v2 <= v42) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v42)
                {
                  LODWORD(v46) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_212;
                }
                unint64_t v100 = v42++;
                char v101 = *(unsigned char *)(v43 + v100);
                *((void *)a2 + 1) = v42;
                v46 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0) {
                  break;
                }
                v98 += 7;
                BOOL v14 = v99++ > 8;
                if (v14)
                {
                  LODWORD(v46) = 0;
                  goto LABEL_211;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v46) = 0;
              }
LABEL_211:
              unint64_t v2 = v100 + 1;
            }
            else
            {
              char v44 = 0;
              unsigned int v45 = 0;
              uint64_t v46 = 0;
              while (1)
              {
                unint64_t v2 = v42 + 1;
                *((void *)a2 + 1) = v42 + 1;
                char v47 = *(unsigned char *)(v43 + v42);
                v46 |= (unint64_t)(v47 & 0x7F) << v44;
                if ((v47 & 0x80) == 0) {
                  break;
                }
                v44 += 7;
                unint64_t v42 = v2;
                BOOL v14 = v45++ > 8;
                if (v14)
                {
                  LODWORD(v46) = 0;
                  break;
                }
              }
            }
LABEL_212:
            *((_DWORD *)this + 11) = v46;
            break;
          case 403:
            *((_DWORD *)this + 17) |= 0x20u;
            unint64_t v48 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v49 = *(void *)a2;
            if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
            {
              char v102 = 0;
              unsigned int v103 = 0;
              uint64_t v52 = 0;
              if (v2 <= v48) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v48)
                {
                  LODWORD(v52) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_217;
                }
                unint64_t v104 = v48++;
                char v105 = *(unsigned char *)(v49 + v104);
                *((void *)a2 + 1) = v48;
                v52 |= (unint64_t)(v105 & 0x7F) << v102;
                if ((v105 & 0x80) == 0) {
                  break;
                }
                v102 += 7;
                BOOL v14 = v103++ > 8;
                if (v14)
                {
                  LODWORD(v52) = 0;
                  goto LABEL_216;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v52) = 0;
              }
LABEL_216:
              unint64_t v2 = v104 + 1;
            }
            else
            {
              char v50 = 0;
              unsigned int v51 = 0;
              uint64_t v52 = 0;
              while (1)
              {
                unint64_t v2 = v48 + 1;
                *((void *)a2 + 1) = v48 + 1;
                char v53 = *(unsigned char *)(v49 + v48);
                v52 |= (unint64_t)(v53 & 0x7F) << v50;
                if ((v53 & 0x80) == 0) {
                  break;
                }
                v50 += 7;
                unint64_t v48 = v2;
                BOOL v14 = v51++ > 8;
                if (v14)
                {
                  LODWORD(v52) = 0;
                  break;
                }
              }
            }
LABEL_217:
            *((_DWORD *)this + 8) = v52;
            break;
          case 404:
            *((_DWORD *)this + 17) |= 0x10u;
            unint64_t v54 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v55 = *(void *)a2;
            if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
            {
              char v106 = 0;
              unsigned int v107 = 0;
              uint64_t v58 = 0;
              if (v2 <= v54) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v54)
                {
                  LODWORD(v58) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_222;
                }
                unint64_t v108 = v54++;
                char v109 = *(unsigned char *)(v55 + v108);
                *((void *)a2 + 1) = v54;
                v58 |= (unint64_t)(v109 & 0x7F) << v106;
                if ((v109 & 0x80) == 0) {
                  break;
                }
                v106 += 7;
                BOOL v14 = v107++ > 8;
                if (v14)
                {
                  LODWORD(v58) = 0;
                  goto LABEL_221;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
LABEL_221:
              unint64_t v2 = v108 + 1;
            }
            else
            {
              char v56 = 0;
              unsigned int v57 = 0;
              uint64_t v58 = 0;
              while (1)
              {
                unint64_t v2 = v54 + 1;
                *((void *)a2 + 1) = v54 + 1;
                char v59 = *(unsigned char *)(v55 + v54);
                v58 |= (unint64_t)(v59 & 0x7F) << v56;
                if ((v59 & 0x80) == 0) {
                  break;
                }
                v56 += 7;
                unint64_t v54 = v2;
                BOOL v14 = v57++ > 8;
                if (v14)
                {
                  LODWORD(v58) = 0;
                  break;
                }
              }
            }
LABEL_222:
            *((_DWORD *)this + 7) = v58;
            break;
          case 405:
            *((_DWORD *)this + 17) |= 0x200u;
            unint64_t v60 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v61 = *(void *)a2;
            if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
            {
              char v110 = 0;
              unsigned int v111 = 0;
              uint64_t v64 = 0;
              if (v2 <= v60) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v60)
                {
                  LODWORD(v64) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_227;
                }
                unint64_t v112 = v60++;
                char v113 = *(unsigned char *)(v61 + v112);
                *((void *)a2 + 1) = v60;
                v64 |= (unint64_t)(v113 & 0x7F) << v110;
                if ((v113 & 0x80) == 0) {
                  break;
                }
                v110 += 7;
                BOOL v14 = v111++ > 8;
                if (v14)
                {
                  LODWORD(v64) = 0;
                  goto LABEL_226;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v64) = 0;
              }
LABEL_226:
              unint64_t v2 = v112 + 1;
            }
            else
            {
              char v62 = 0;
              unsigned int v63 = 0;
              uint64_t v64 = 0;
              while (1)
              {
                unint64_t v2 = v60 + 1;
                *((void *)a2 + 1) = v60 + 1;
                char v65 = *(unsigned char *)(v61 + v60);
                v64 |= (unint64_t)(v65 & 0x7F) << v62;
                if ((v65 & 0x80) == 0) {
                  break;
                }
                v62 += 7;
                unint64_t v60 = v2;
                BOOL v14 = v63++ > 8;
                if (v14)
                {
                  LODWORD(v64) = 0;
                  break;
                }
              }
            }
LABEL_227:
            *((_DWORD *)this + 12) = v64;
            break;
          case 406:
            *((_DWORD *)this + 17) |= 0x40u;
            unint64_t v66 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v67 = *(void *)a2;
            if (v66 > 0xFFFFFFFFFFFFFFF5 || v66 + 10 > v2)
            {
              char v114 = 0;
              unsigned int v115 = 0;
              uint64_t v70 = 0;
              if (v2 <= v66) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v66)
                {
                  LODWORD(v70) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_232;
                }
                unint64_t v116 = v66++;
                char v117 = *(unsigned char *)(v67 + v116);
                *((void *)a2 + 1) = v66;
                v70 |= (unint64_t)(v117 & 0x7F) << v114;
                if ((v117 & 0x80) == 0) {
                  break;
                }
                v114 += 7;
                BOOL v14 = v115++ > 8;
                if (v14)
                {
                  LODWORD(v70) = 0;
                  goto LABEL_231;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v70) = 0;
              }
LABEL_231:
              unint64_t v2 = v116 + 1;
            }
            else
            {
              char v68 = 0;
              unsigned int v69 = 0;
              uint64_t v70 = 0;
              while (1)
              {
                unint64_t v2 = v66 + 1;
                *((void *)a2 + 1) = v66 + 1;
                char v71 = *(unsigned char *)(v67 + v66);
                v70 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0) {
                  break;
                }
                v68 += 7;
                unint64_t v66 = v2;
                BOOL v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v70) = 0;
                  break;
                }
              }
            }
LABEL_232:
            *((_DWORD *)this + 9) = v70;
            break;
          case 407:
            *((_DWORD *)this + 17) |= 0x80u;
            unint64_t v72 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v73 = *(void *)a2;
            if (v72 > 0xFFFFFFFFFFFFFFF5 || v72 + 10 > v2)
            {
              char v118 = 0;
              unsigned int v119 = 0;
              uint64_t v76 = 0;
              if (v2 <= v72) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v72)
                {
                  LODWORD(v76) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_237;
                }
                unint64_t v120 = v72++;
                char v121 = *(unsigned char *)(v73 + v120);
                *((void *)a2 + 1) = v72;
                v76 |= (unint64_t)(v121 & 0x7F) << v118;
                if ((v121 & 0x80) == 0) {
                  break;
                }
                v118 += 7;
                BOOL v14 = v119++ > 8;
                if (v14)
                {
                  LODWORD(v76) = 0;
                  goto LABEL_236;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v76) = 0;
              }
LABEL_236:
              unint64_t v2 = v120 + 1;
            }
            else
            {
              char v74 = 0;
              unsigned int v75 = 0;
              uint64_t v76 = 0;
              while (1)
              {
                unint64_t v2 = v72 + 1;
                *((void *)a2 + 1) = v72 + 1;
                char v77 = *(unsigned char *)(v73 + v72);
                v76 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0) {
                  break;
                }
                v74 += 7;
                unint64_t v72 = v2;
                BOOL v14 = v75++ > 8;
                if (v14)
                {
                  LODWORD(v76) = 0;
                  break;
                }
              }
            }
LABEL_237:
            *((_DWORD *)this + 10) = v76;
            break;
          default:
            if (v20 != 201) {
              goto LABEL_64;
            }
            *((_DWORD *)this + 17) |= 0x2000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v32 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v32 = v31 != 0;
            }
            *((unsigned char *)this + 58) = v32;
            break;
        }
      }
      goto LABEL_238;
    }
    if ((int)v20 > 100)
    {
      switch(v20)
      {
        case 'e':
          *((_DWORD *)this + 17) |= 1u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v34 = *(void *)a2;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            char v90 = 0;
            unsigned int v91 = 0;
            uint64_t v37 = 0;
            if (v2 <= v33) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v33)
              {
                uint64_t v37 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_202;
              }
              unint64_t v92 = v33++;
              char v93 = *(unsigned char *)(v34 + v92);
              *((void *)a2 + 1) = v33;
              v37 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0) {
                break;
              }
              v90 += 7;
              BOOL v14 = v91++ > 8;
              if (v14)
              {
                uint64_t v37 = 0;
                goto LABEL_201;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v37 = 0;
            }
LABEL_201:
            unint64_t v2 = v92 + 1;
          }
          else
          {
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            while (1)
            {
              unint64_t v2 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v38 = *(unsigned char *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0) {
                break;
              }
              v35 += 7;
              unint64_t v33 = v2;
              BOOL v14 = v36++ > 8;
              if (v14)
              {
                uint64_t v37 = 0;
                break;
              }
            }
          }
LABEL_202:
          *((void *)this + 1) = v37;
          break;
        case 'f':
          *((_DWORD *)this + 17) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v40 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v40 = v39 != 0;
          }
          *((unsigned char *)this + 56) = v40;
          break;
        case 'g':
          *((_DWORD *)this + 17) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v30 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v30 = v29 != 0;
          }
          *((unsigned char *)this + 57) = v30;
          break;
        default:
LABEL_64:
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
    }
    else
    {
      switch(v20)
      {
        case 1:
          *((_DWORD *)this + 17) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_197;
          }
          break;
        case 2:
          *((_DWORD *)this + 17) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_197;
          }
          break;
        case 3:
          *((_DWORD *)this + 17) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_197:
            unint64_t v2 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v2;
            goto LABEL_238;
          }
          break;
        default:
          goto LABEL_64;
      }
      *((unsigned char *)a2 + 24) = 1;
    }
LABEL_238:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 68);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 20), 1u);
    int v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x65u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 0x66u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 57), 0x67u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 58), 0xC9u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 65), 0x12Du);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 63), 0x12Eu);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 60), 0x12Fu);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 59), 0x130u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 64), 0x131u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 61), 0x132u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 62), 0x133u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x191u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0x192u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 0x193u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 0x194u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x196u);
    if ((*(_DWORD *)(v3 + 68) & 0x80) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x195u);
  int v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_43:
  unsigned int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 0x197u);
}

uint64_t CMMsl::KappaHighSpeedCrashResult::hash_value(CMMsl::KappaHighSpeedCrashResult *this)
{
  int v1 = *((_DWORD *)this + 17);
  if ((v1 & 4) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v4 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_31:
    uint64_t v6 = 0;
    if (v1) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
  float v25 = *((float *)this + 5);
  uint64_t v2 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_30;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_6:
  float v5 = *((float *)this + 6);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if (v1)
  {
LABEL_9:
    uint64_t v7 = *((void *)this + 1);
    if ((v1 & 0x800) != 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v7 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned __int8 *)this + 56);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v8 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 57);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v9 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_12:
    uint64_t v10 = *((unsigned __int8 *)this + 58);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v10 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_13:
    uint64_t v11 = *((unsigned __int8 *)this + 65);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v11 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_14:
    uint64_t v12 = *((unsigned __int8 *)this + 63);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v12 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_15:
    uint64_t v13 = *((unsigned __int8 *)this + 60);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v13 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_16:
    uint64_t v14 = *((unsigned __int8 *)this + 59);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v14 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_17:
    uint64_t v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v15 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_18:
    uint64_t v16 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v16 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_19:
    uint64_t v17 = *((unsigned __int8 *)this + 62);
    if ((v1 & 0x400) != 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_20:
    uint64_t v18 = *((unsigned int *)this + 13);
    if ((v1 & 0x100) != 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_21:
    uint64_t v19 = *((unsigned int *)this + 11);
    if ((v1 & 0x20) != 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_22:
    uint64_t v20 = *((unsigned int *)this + 8);
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    uint64_t v21 = *((unsigned int *)this + 7);
    if ((v1 & 0x200) != 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_24:
    uint64_t v22 = *((unsigned int *)this + 12);
    if ((v1 & 0x40) != 0) {
      goto LABEL_25;
    }
LABEL_48:
    uint64_t v23 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_26;
    }
LABEL_49:
    uint64_t v24 = 0;
    return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
  }
LABEL_47:
  uint64_t v22 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_48;
  }
LABEL_25:
  uint64_t v23 = *((unsigned int *)this + 9);
  if ((v1 & 0x80) == 0) {
    goto LABEL_49;
  }
LABEL_26:
  uint64_t v24 = *((unsigned int *)this + 10);
  return v4 ^ v2 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24;
}

void CMMsl::KappaLackOfMotionResult::~KappaLackOfMotionResult(CMMsl::KappaLackOfMotionResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this, const CMMsl::KappaLackOfMotionResult *a2)
{
  *(void *)this = off_1003A6B38;
  *(_DWORD *)(this + 92) = 0;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x200) != 0)
  {
    int v4 = *((_DWORD *)a2 + 15);
    int v3 = 512;
    *(_DWORD *)(this + 92) = 512;
    *(_DWORD *)(this + 60) = v4;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 20);
    v3 |= 0x4000u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 80) = v5;
    int v2 = *((_DWORD *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 16);
    v3 |= 0x400u;
    *(_DWORD *)(this + 92) = v3;
    *(_DWORD *)(this + 64) = v6;
    int v2 = *((_DWORD *)a2 + 23);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v7;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 24) = v8;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v9 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 32) = v9;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 76) = v10;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v11 = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 56) = v11;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  char v12 = *((unsigned char *)a2 + 90);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 92) = v3;
  *(unsigned char *)(this + 90) = v12;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  char v13 = *((unsigned char *)a2 + 89);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 92) = v3;
  *(unsigned char *)(this + 89) = v13;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v14 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 72) = v14;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v15 = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 68) = v15;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v16 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 16) = v16;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v17 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 92) = v3;
  *(void *)(this + 8) = v17;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v18 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 40) = v18;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v19 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 48) = v19;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v20 = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 52) = v20;
  int v2 = *((_DWORD *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0) {
      return this;
    }
LABEL_40:
    char v22 = *((unsigned char *)a2 + 88);
    *(_DWORD *)(this + 92) = v3 | 0x10000;
    *(unsigned char *)(this + 88) = v22;
    return this;
  }
LABEL_39:
  int v21 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_DWORD *)(this + 92) = v3;
  *(_DWORD *)(this + 44) = v21;
  if ((*((_DWORD *)a2 + 23) & 0x10000) != 0) {
    goto LABEL_40;
  }
  return this;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *a1, const CMMsl::KappaLackOfMotionResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLackOfMotionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLackOfMotionResult *a2, CMMsl::KappaLackOfMotionResult *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  int v4 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  int v5 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v5;
  int v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  int v7 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  LODWORD(v9) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v9;
  LODWORD(v9) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  LOBYTE(v9) = *((unsigned char *)this + 90);
  *((unsigned char *)this + 90) = *((unsigned char *)a2 + 90);
  *((unsigned char *)a2 + 90) = v9;
  LOBYTE(v9) = *((unsigned char *)this + 89);
  *((unsigned char *)this + 89) = *((unsigned char *)a2 + 89);
  *((unsigned char *)a2 + 89) = v9;
  LODWORD(v9) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v9;
  LODWORD(v9) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  int v12 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v12;
  int v13 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v13;
  int v14 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v14;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  LOBYTE(v11) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v11;
  return result;
}

float CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6B38;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  float result = *(float *)(a2 + 44);
  *(float *)(a1 + 44) = result;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::KappaLackOfMotionResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLackOfMotionResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaLackOfMotionResult::formatText(CMMsl::KappaLackOfMotionResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 23);
  if (v5)
  {
    PB::TextFormatter::format(a2, "gpsDeltaTimestamp", *((void *)this + 1));
    int v5 = *((_DWORD *)this + 23);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsDeltaTimestampSeconds", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "gpsIsRealSample", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "gpsSpeedMetersPerSecond", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "gpsSpeedMilesPerHour", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "gpsTimestamp", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "loggedAtEpoch", *((unsigned char *)this + 88));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "movingGpsCount", *((_DWORD *)this + 14));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "movingGpsCountResetRequired", *((unsigned char *)this + 89));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThreshold", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "movingSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "numLowOrFakeSamplesInHistory", *((_DWORD *)this + 17));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "numSamplesInHistory", *((_DWORD *)this + 18));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "staticGpsCount", *((_DWORD *)this + 19));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "staticGpsCountResetRequired", *((unsigned char *)this + 90));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThreshold", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "staticSpeedMetersPerSecondThresholdFromSydneyB", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 3));
  if ((*((_DWORD *)this + 23) & 8) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "triggerTimestamp", *((void *)this + 4));
LABEL_21:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLackOfMotionResult::readFrom(CMMsl::KappaLackOfMotionResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned int v20 = v11 & 7;
      if (v20 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if (v20 <= 4)
      {
        switch((v11 >> 3))
        {
          case 'e':
            *((_DWORD *)this + 23) |= 4u;
            unint64_t v28 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v29 = *(void *)a2;
            if (v28 > 0xFFFFFFFFFFFFFFF5 || v28 + 10 > v2)
            {
              char v81 = 0;
              unsigned int v82 = 0;
              uint64_t v32 = 0;
              if (v2 <= v28) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v28)
                {
                  uint64_t v32 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_186;
                }
                unint64_t v83 = v28++;
                char v84 = *(unsigned char *)(v29 + v83);
                *((void *)a2 + 1) = v28;
                v32 |= (unint64_t)(v84 & 0x7F) << v81;
                if ((v84 & 0x80) == 0) {
                  break;
                }
                v81 += 7;
                BOOL v14 = v82++ > 8;
                if (v14)
                {
                  uint64_t v32 = 0;
LABEL_185:
                  unint64_t v2 = v83 + 1;
                  goto LABEL_186;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v32 = 0;
              }
              goto LABEL_185;
            }
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v2 = v28 + 1;
              *((void *)a2 + 1) = v28 + 1;
              char v33 = *(unsigned char *)(v29 + v28);
              v32 |= (unint64_t)(v33 & 0x7F) << v30;
              if ((v33 & 0x80) == 0) {
                goto LABEL_186;
              }
              v30 += 7;
              unint64_t v28 = v2;
              BOOL v14 = v31++ > 8;
            }
            while (!v14);
            uint64_t v32 = 0;
LABEL_186:
            *((void *)this + 3) = v32;
            break;
          case 'f':
            *((_DWORD *)this + 23) |= 8u;
            unint64_t v42 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v43 = *(void *)a2;
            if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
            {
              char v89 = 0;
              unsigned int v90 = 0;
              uint64_t v46 = 0;
              if (v2 <= v42) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v42)
                {
                  uint64_t v46 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_196;
                }
                unint64_t v91 = v42++;
                char v92 = *(unsigned char *)(v43 + v91);
                *((void *)a2 + 1) = v42;
                v46 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0) {
                  break;
                }
                v89 += 7;
                BOOL v14 = v90++ > 8;
                if (v14)
                {
                  uint64_t v46 = 0;
LABEL_195:
                  unint64_t v2 = v91 + 1;
                  goto LABEL_196;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v46 = 0;
              }
              goto LABEL_195;
            }
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v2 = v42 + 1;
              *((void *)a2 + 1) = v42 + 1;
              char v47 = *(unsigned char *)(v43 + v42);
              v46 |= (unint64_t)(v47 & 0x7F) << v44;
              if ((v47 & 0x80) == 0) {
                goto LABEL_196;
              }
              v44 += 7;
              unint64_t v42 = v2;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
            uint64_t v46 = 0;
LABEL_196:
            *((void *)this + 4) = v46;
            break;
          case 'g':
            *((_DWORD *)this + 23) |= 0x2000u;
            unint64_t v48 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v49 = *(void *)a2;
            if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
            {
              char v93 = 0;
              unsigned int v94 = 0;
              uint64_t v52 = 0;
              if (v2 <= v48) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v48)
                {
                  LODWORD(v52) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_201;
                }
                unint64_t v95 = v48++;
                char v96 = *(unsigned char *)(v49 + v95);
                *((void *)a2 + 1) = v48;
                v52 |= (unint64_t)(v96 & 0x7F) << v93;
                if ((v96 & 0x80) == 0) {
                  break;
                }
                v93 += 7;
                BOOL v14 = v94++ > 8;
                if (v14)
                {
                  LODWORD(v52) = 0;
LABEL_200:
                  unint64_t v2 = v95 + 1;
                  goto LABEL_201;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v52) = 0;
              }
              goto LABEL_200;
            }
            char v50 = 0;
            unsigned int v51 = 0;
            uint64_t v52 = 0;
            do
            {
              unint64_t v2 = v48 + 1;
              *((void *)a2 + 1) = v48 + 1;
              char v53 = *(unsigned char *)(v49 + v48);
              v52 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0) {
                goto LABEL_201;
              }
              v50 += 7;
              unint64_t v48 = v2;
              BOOL v14 = v51++ > 8;
            }
            while (!v14);
            LODWORD(v52) = 0;
LABEL_201:
            *((_DWORD *)this + 19) = v52;
            break;
          case 'h':
            *((_DWORD *)this + 23) |= 0x100u;
            unint64_t v54 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v55 = *(void *)a2;
            if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
            {
              char v97 = 0;
              unsigned int v98 = 0;
              uint64_t v58 = 0;
              if (v2 <= v54) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v54)
                {
                  LODWORD(v58) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_206;
                }
                unint64_t v99 = v54++;
                char v100 = *(unsigned char *)(v55 + v99);
                *((void *)a2 + 1) = v54;
                v58 |= (unint64_t)(v100 & 0x7F) << v97;
                if ((v100 & 0x80) == 0) {
                  break;
                }
                v97 += 7;
                BOOL v14 = v98++ > 8;
                if (v14)
                {
                  LODWORD(v58) = 0;
LABEL_205:
                  unint64_t v2 = v99 + 1;
                  goto LABEL_206;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
              goto LABEL_205;
            }
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v2 = v54 + 1;
              *((void *)a2 + 1) = v54 + 1;
              char v59 = *(unsigned char *)(v55 + v54);
              v58 |= (unint64_t)(v59 & 0x7F) << v56;
              if ((v59 & 0x80) == 0) {
                goto LABEL_206;
              }
              v56 += 7;
              unint64_t v54 = v2;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
            LODWORD(v58) = 0;
LABEL_206:
            *((_DWORD *)this + 14) = v58;
            break;
          case 'i':
            *((_DWORD *)this + 23) |= 0x40000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v61 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v60 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v61 = v60 != 0;
            }
            *((unsigned char *)this + 90) = v61;
            break;
          case 'j':
            *((_DWORD *)this + 23) |= 0x20000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v63 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v62 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v63 = v62 != 0;
            }
            *((unsigned char *)this + 89) = v63;
            break;
          case 'k':
            *((_DWORD *)this + 23) |= 0x1000u;
            unint64_t v64 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v65 = *(void *)a2;
            if (v64 > 0xFFFFFFFFFFFFFFF5 || v64 + 10 > v2)
            {
              char v101 = 0;
              unsigned int v102 = 0;
              uint64_t v68 = 0;
              if (v2 <= v64) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v64)
                {
                  LODWORD(v68) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_211;
                }
                unint64_t v103 = v64++;
                char v104 = *(unsigned char *)(v65 + v103);
                *((void *)a2 + 1) = v64;
                v68 |= (unint64_t)(v104 & 0x7F) << v101;
                if ((v104 & 0x80) == 0) {
                  break;
                }
                v101 += 7;
                BOOL v14 = v102++ > 8;
                if (v14)
                {
                  LODWORD(v68) = 0;
LABEL_210:
                  unint64_t v2 = v103 + 1;
                  goto LABEL_211;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v68) = 0;
              }
              goto LABEL_210;
            }
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v68 = 0;
            do
            {
              unint64_t v2 = v64 + 1;
              *((void *)a2 + 1) = v64 + 1;
              char v69 = *(unsigned char *)(v65 + v64);
              v68 |= (unint64_t)(v69 & 0x7F) << v66;
              if ((v69 & 0x80) == 0) {
                goto LABEL_211;
              }
              v66 += 7;
              unint64_t v64 = v2;
              BOOL v14 = v67++ > 8;
            }
            while (!v14);
            LODWORD(v68) = 0;
LABEL_211:
            *((_DWORD *)this + 18) = v68;
            break;
          case 'l':
            *((_DWORD *)this + 23) |= 0x800u;
            unint64_t v70 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v71 = *(void *)a2;
            if (v70 > 0xFFFFFFFFFFFFFFF5 || v70 + 10 > v2)
            {
              char v105 = 0;
              unsigned int v106 = 0;
              uint64_t v74 = 0;
              if (v2 <= v70) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v70)
                {
                  LODWORD(v74) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_216;
                }
                unint64_t v107 = v70++;
                char v108 = *(unsigned char *)(v71 + v107);
                *((void *)a2 + 1) = v70;
                v74 |= (unint64_t)(v108 & 0x7F) << v105;
                if ((v108 & 0x80) == 0) {
                  break;
                }
                v105 += 7;
                BOOL v14 = v106++ > 8;
                if (v14)
                {
                  LODWORD(v74) = 0;
LABEL_215:
                  unint64_t v2 = v107 + 1;
                  goto LABEL_216;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
              goto LABEL_215;
            }
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v2 = v70 + 1;
              *((void *)a2 + 1) = v70 + 1;
              char v75 = *(unsigned char *)(v71 + v70);
              v74 |= (unint64_t)(v75 & 0x7F) << v72;
              if ((v75 & 0x80) == 0) {
                goto LABEL_216;
              }
              v72 += 7;
              unint64_t v70 = v2;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
            LODWORD(v74) = 0;
LABEL_216:
            *((_DWORD *)this + 17) = v74;
            break;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
        switch((int)v21)
        {
          case 201:
            *((_DWORD *)this + 23) |= 2u;
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v23 = *(void *)a2;
            if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v2)
            {
              char v77 = 0;
              unsigned int v78 = 0;
              uint64_t v26 = 0;
              if (v2 <= v22) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v22)
                {
                  uint64_t v26 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_181;
                }
                unint64_t v79 = v22++;
                char v80 = *(unsigned char *)(v23 + v79);
                *((void *)a2 + 1) = v22;
                v26 |= (unint64_t)(v80 & 0x7F) << v77;
                if ((v80 & 0x80) == 0) {
                  break;
                }
                v77 += 7;
                BOOL v14 = v78++ > 8;
                if (v14)
                {
                  uint64_t v26 = 0;
LABEL_180:
                  unint64_t v2 = v79 + 1;
                  goto LABEL_181;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v26 = 0;
              }
              goto LABEL_180;
            }
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v2 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v27 = *(unsigned char *)(v23 + v22);
              v26 |= (unint64_t)(v27 & 0x7F) << v24;
              if ((v27 & 0x80) == 0) {
                goto LABEL_181;
              }
              v24 += 7;
              unint64_t v22 = v2;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
            uint64_t v26 = 0;
LABEL_181:
            *((void *)this + 2) = v26;
            break;
          case 202:
            *((_DWORD *)this + 23) |= 1u;
            unint64_t v34 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v35 = *(void *)a2;
            if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v2)
            {
              char v85 = 0;
              unsigned int v86 = 0;
              uint64_t v38 = 0;
              if (v2 <= v34) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v34)
                {
                  uint64_t v38 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_191;
                }
                unint64_t v87 = v34++;
                char v88 = *(unsigned char *)(v35 + v87);
                *((void *)a2 + 1) = v34;
                v38 |= (unint64_t)(v88 & 0x7F) << v85;
                if ((v88 & 0x80) == 0) {
                  break;
                }
                v85 += 7;
                BOOL v14 = v86++ > 8;
                if (v14)
                {
                  uint64_t v38 = 0;
LABEL_190:
                  unint64_t v2 = v87 + 1;
                  goto LABEL_191;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v38 = 0;
              }
              goto LABEL_190;
            }
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v2 = v34 + 1;
              *((void *)a2 + 1) = v34 + 1;
              char v39 = *(unsigned char *)(v35 + v34);
              v38 |= (unint64_t)(v39 & 0x7F) << v36;
              if ((v39 & 0x80) == 0) {
                goto LABEL_191;
              }
              v36 += 7;
              unint64_t v34 = v2;
              BOOL v14 = v37++ > 8;
            }
            while (!v14);
            uint64_t v38 = 0;
LABEL_191:
            *((void *)this + 1) = v38;
            break;
          case 203:
            *((_DWORD *)this + 23) |= 0x10u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_112;
            }
            *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_176;
          case 204:
            *((_DWORD *)this + 23) |= 0x40u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_112;
            }
            *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_176;
          case 205:
            *((_DWORD *)this + 23) |= 0x80u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
              goto LABEL_112;
            }
            *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
            goto LABEL_176;
          case 206:
            *((_DWORD *)this + 23) |= 0x20u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2))
            {
LABEL_112:
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_176:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v2;
            }
            break;
          case 207:
            *((_DWORD *)this + 23) |= 0x10000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v41 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v40 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v41 = v40 != 0;
            }
            *((unsigned char *)this + 88) = v41;
            break;
          default:
            switch((int)v21)
            {
              case 1:
                *((_DWORD *)this + 23) |= 0x200u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_112;
                }
                *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_176;
              case 2:
                *((_DWORD *)this + 23) |= 0x4000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_112;
                }
                *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_176;
              case 3:
                *((_DWORD *)this + 23) |= 0x400u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_112;
                }
                *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_176;
              case 4:
                *((_DWORD *)this + 23) |= 0x8000u;
                unint64_t v2 = *((void *)a2 + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_112;
                }
                *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
                goto LABEL_176;
              default:
                uint64_t result = PB::Reader::skip(a2, v21, v20, 0);
                if (!result) {
                  return result;
                }
                unint64_t v2 = *((void *)a2 + 1);
                break;
            }
            break;
        }
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaLackOfMotionResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 92);
  if ((v4 & 0x200) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 60), 1u);
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 3u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 4u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x65u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x66u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x67u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0x68u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 90), 0x69u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 89), 0x6Au);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0x6Bu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x6Cu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xC9u);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xCAu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xCBu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCCu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xCEu);
    if ((*(_DWORD *)(v3 + 92) & 0x10000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCDu);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x10000) == 0) {
    return this;
  }
LABEL_39:
  char v5 = *(unsigned char *)(v3 + 88);

  return PB::Writer::write(a2, v5, 0xCFu);
}

uint64_t CMMsl::KappaLackOfMotionResult::hash_value(CMMsl::KappaLackOfMotionResult *this)
{
  int v1 = *((_DWORD *)this + 23);
  if ((v1 & 0x200) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_3;
    }
LABEL_38:
    uint64_t v4 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v6 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_40:
    uint64_t v8 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
  float v28 = *((float *)this + 15);
  uint64_t v2 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_38;
  }
LABEL_3:
  float v3 = *((float *)this + 20);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_39;
  }
LABEL_6:
  float v5 = *((float *)this + 16);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_40;
  }
LABEL_9:
  float v7 = *((float *)this + 21);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_12:
    uint64_t v9 = *((void *)this + 3);
    if ((v1 & 8) != 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v9 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_13:
    uint64_t v10 = *((void *)this + 4);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v10 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_14:
    uint64_t v11 = *((int *)this + 19);
    if ((v1 & 0x100) != 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v11 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_15:
    uint64_t v12 = *((int *)this + 14);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_16:
    uint64_t v13 = *((unsigned __int8 *)this + 90);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v13 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_17:
    uint64_t v14 = *((unsigned __int8 *)this + 89);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v14 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_18:
    uint64_t v15 = *((int *)this + 18);
    if ((v1 & 0x800) != 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v15 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_19:
    uint64_t v16 = *((int *)this + 17);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v16 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_20:
    uint64_t v17 = *((void *)this + 2);
    if (v1) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v17 = 0;
  if (v1)
  {
LABEL_21:
    uint64_t v18 = *((void *)this + 1);
    if ((v1 & 0x10) != 0) {
      goto LABEL_22;
    }
LABEL_51:
    uint64_t v20 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_25;
    }
LABEL_52:
    uint64_t v22 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_53:
    uint64_t v24 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
    goto LABEL_54;
  }
LABEL_50:
  uint64_t v18 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_51;
  }
LABEL_22:
  float v19 = *((float *)this + 10);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_52;
  }
LABEL_25:
  float v21 = *((float *)this + 12);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_53;
  }
LABEL_28:
  float v23 = *((float *)this + 13);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    float v25 = *((float *)this + 11);
    uint64_t v26 = LODWORD(v25);
    if (v25 == 0.0) {
      uint64_t v26 = 0;
    }
    if ((v1 & 0x10000) != 0) {
      goto LABEL_34;
    }
LABEL_55:
    uint64_t v27 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
  }
LABEL_54:
  uint64_t v26 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_55;
  }
LABEL_34:
  uint64_t v27 = *((unsigned __int8 *)this + 88);
  return v4 ^ v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27;
}

void CMMsl::KappaLocalAudioResult::~KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(CMMsl::KappaLocalAudioResult *this, const CMMsl::KappaLocalAudioResult *a2)
{
  *(void *)this = off_1003A6B70;
  *(void *)((char *)this + 172) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    float result = *((float *)a2 + 35);
    uint64_t v3 = 0x20000000;
    *(void *)((char *)this + 172) = 0x20000000;
    *((float *)this + 35) = result;
    uint64_t v2 = *(void *)((char *)a2 + 172);
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 33);
    v3 |= 0x8000000uLL;
    *(void *)((char *)this + 172) = v3;
    *((float *)this + 33) = result;
    uint64_t v2 = *(void *)((char *)a2 + 172);
  }
LABEL_6:
  if ((v2 & 0x2000000) != 0)
  {
    float result = *((float *)a2 + 31);
    v3 |= 0x2000000uLL;
    *(void *)((char *)this + 172) = v3;
    *((float *)this + 31) = result;
    uint64_t v2 = *(void *)((char *)a2 + 172);
    if ((v2 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_53;
    }
  }
  else if ((v2 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 37) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v5 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(void *)((char *)this + 172) = v3;
  *((_DWORD *)this + 26) = v5;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(void *)((char *)this + 172) = v3;
  *((_DWORD *)this + 25) = v6;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x800000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  float result = *((float *)a2 + 29);
  v3 |= 0x800000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 29) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *((float *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 36) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }
LABEL_57:
  float result = *((float *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 34) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }
LABEL_58:
  float result = *((float *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 32) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_60;
  }
LABEL_59:
  float result = *((float *)a2 + 38);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 38) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v7 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(void *)((char *)this + 172) = v3;
  *((_DWORD *)this + 27) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v8 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(void *)((char *)this + 172) = v3;
  *((_DWORD *)this + 28) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v9 = *((unsigned char *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 165) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_64;
  }
LABEL_63:
  float result = *((float *)a2 + 22);
  v3 |= 0x10000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 22) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
LABEL_64:
  float result = *((float *)a2 + 20);
  v3 |= 0x4000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 20) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_66;
  }
LABEL_65:
  float result = *((float *)a2 + 18);
  v3 |= 0x1000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 18) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_67;
  }
LABEL_66:
  float result = *((float *)a2 + 23);
  v3 |= 0x20000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 23) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_68;
  }
LABEL_67:
  char v10 = *((unsigned char *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 163) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_69;
  }
LABEL_68:
  char v11 = *((unsigned char *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 156) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_70;
  }
LABEL_69:
  char v12 = *((unsigned char *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 167) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_71;
  }
LABEL_70:
  char v13 = *((unsigned char *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 158) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_72;
  }
LABEL_71:
  char v14 = *((unsigned char *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 161) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_73;
  }
LABEL_72:
  char v15 = *((unsigned char *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 166) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x8000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_74;
  }
LABEL_73:
  float result = *((float *)a2 + 21);
  v3 |= 0x8000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 21) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_75;
  }
LABEL_74:
  float result = *((float *)a2 + 19);
  v3 |= 0x2000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 19) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x40000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_76;
  }
LABEL_75:
  float result = *((float *)a2 + 24);
  v3 |= 0x40000uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 24) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_77;
  }
LABEL_76:
  char v16 = *((unsigned char *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 164) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_78;
  }
LABEL_77:
  char v17 = *((unsigned char *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 157) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_79;
  }
LABEL_78:
  char v18 = *((unsigned char *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 168) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_80;
  }
LABEL_79:
  char v19 = *((unsigned char *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 159) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_81;
  }
LABEL_80:
  char v20 = *((unsigned char *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 162) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_82;
  }
LABEL_81:
  char v21 = *((unsigned char *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((unsigned char *)this + 160) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_38:
    if ((v2 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_83;
  }
LABEL_82:
  int v22 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(void *)((char *)this + 172) = v3;
  *((_DWORD *)this + 30) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 4) == 0)
  {
LABEL_39:
    if ((v2 & 8) == 0) {
      goto LABEL_40;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v23 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)((char *)this + 172) = v3;
  *((void *)this + 3) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 8) == 0)
  {
LABEL_40:
    if ((v2 & 0x10) == 0) {
      goto LABEL_41;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v24 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)((char *)this + 172) = v3;
  *((void *)this + 4) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x10) == 0)
  {
LABEL_41:
    if ((v2 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_86;
  }
LABEL_85:
  float result = *((float *)a2 + 10);
  v3 |= 0x10uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 10) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x80) == 0)
  {
LABEL_42:
    if ((v2 & 0x100) == 0) {
      goto LABEL_43;
    }
    goto LABEL_87;
  }
LABEL_86:
  float result = *((float *)a2 + 13);
  v3 |= 0x80uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 13) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x100) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0) {
      goto LABEL_44;
    }
    goto LABEL_88;
  }
LABEL_87:
  float result = *((float *)a2 + 14);
  v3 |= 0x100uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 14) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_89;
  }
LABEL_88:
  float result = *((float *)a2 + 17);
  v3 |= 0x800uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 17) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 1) == 0)
  {
LABEL_45:
    if ((v2 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v25 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)((char *)this + 172) = v3;
  *((void *)this + 1) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 2) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v26 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)((char *)this + 172) = v3;
  *((void *)this + 2) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x40) == 0) {
      goto LABEL_48;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 11);
  v3 |= 0x20uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 11) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x40) == 0)
  {
LABEL_48:
    if ((v2 & 0x200) == 0) {
      goto LABEL_49;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *((float *)a2 + 12);
  v3 |= 0x40uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 12) = result;
  uint64_t v2 = *(void *)((char *)a2 + 172);
  if ((v2 & 0x200) == 0)
  {
LABEL_49:
    if ((v2 & 0x400) == 0) {
      return result;
    }
LABEL_94:
    float result = *((float *)a2 + 16);
    *(void *)((char *)this + 172) = v3 | 0x400;
    *((float *)this + 16) = result;
    return result;
  }
LABEL_93:
  float result = *((float *)a2 + 15);
  v3 |= 0x200uLL;
  *(void *)((char *)this + 172) = v3;
  *((float *)this + 15) = result;
  if ((*(void *)((unsigned char *)a2 + 172) & 0x400) != 0) {
    goto LABEL_94;
  }
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, const CMMsl::KappaLocalAudioResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((CMMsl::KappaLocalAudioResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaLocalAudioResult *a2, CMMsl::KappaLocalAudioResult *a3)
{
  uint64_t v3 = *(void *)((char *)this + 172);
  *(void *)((char *)this + 172) = *(void *)((char *)a2 + 172);
  *(void *)((char *)a2 + 172) = v3;
  int v4 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v4;
  int v5 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  int v6 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  int v7 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  int v8 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  int v9 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v9;
  int v10 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v10;
  int v11 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v11;
  int v12 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v12;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 165);
  *((unsigned char *)this + 165) = *((unsigned char *)a2 + 165);
  *((unsigned char *)a2 + 165) = v3;
  int v13 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13;
  int v14 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v14;
  int v15 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v15;
  int v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  LOBYTE(v3) = *((unsigned char *)this + 163);
  *((unsigned char *)this + 163) = *((unsigned char *)a2 + 163);
  *((unsigned char *)a2 + 163) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 156);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 167);
  *((unsigned char *)this + 167) = *((unsigned char *)a2 + 167);
  *((unsigned char *)a2 + 167) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 158);
  *((unsigned char *)this + 158) = *((unsigned char *)a2 + 158);
  *((unsigned char *)a2 + 158) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 166);
  *((unsigned char *)this + 166) = *((unsigned char *)a2 + 166);
  *((unsigned char *)a2 + 166) = v3;
  int v17 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v17;
  int v18 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v18;
  int v19 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v19;
  LOBYTE(v3) = *((unsigned char *)this + 164);
  *((unsigned char *)this + 164) = *((unsigned char *)a2 + 164);
  *((unsigned char *)a2 + 164) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 157);
  *((unsigned char *)this + 157) = *((unsigned char *)a2 + 157);
  *((unsigned char *)a2 + 157) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 168);
  *((unsigned char *)this + 168) = *((unsigned char *)a2 + 168);
  *((unsigned char *)a2 + 168) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 159);
  *((unsigned char *)this + 159) = *((unsigned char *)a2 + 159);
  *((unsigned char *)a2 + 159) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 162);
  *((unsigned char *)this + 162) = *((unsigned char *)a2 + 162);
  *((unsigned char *)a2 + 162) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  uint64_t v21 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v21;
  int v22 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v22;
  int v23 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v23;
  int v24 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v24;
  int v25 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v25;
  uint64_t v26 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v26;
  uint64_t v27 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v27;
  int v28 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v28;
  int v29 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v29;
  int v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  float result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  return result;
}

float CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6B70;
  *(void *)(a1 + 172) = *(void *)(a2 + 172);
  *(void *)(a2 + 172) = 0;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 165) = *(unsigned char *)(a2 + 165);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(unsigned char *)(a1 + 167) = *(unsigned char *)(a2 + 167);
  *(unsigned char *)(a1 + 158) = *(unsigned char *)(a2 + 158);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 166) = *(unsigned char *)(a2 + 166);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(unsigned char *)(a1 + 157) = *(unsigned char *)(a2 + 157);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a2 + 159);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  float result = *(float *)(a2 + 64);
  *(float *)(a1 + 64) = result;
  return result;
}

CMMsl *CMMsl::KappaLocalAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaLocalAudioResult::KappaLocalAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaLocalAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaLocalAudioResult::formatText(CMMsl::KappaLocalAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "chaosAtMaxEnergy", *((float *)this + 10));
    uint64_t v5 = *(void *)((char *)this + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRollover", *((float *)this + 11));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyRolloverTimestamp", *((float *)this + 12));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "chaosAtMaxEnergyTimestamp", *((float *)this + 13));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "chaosMet", *((unsigned char *)this + 156));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "chaosMetRollover", *((unsigned char *)this + 157));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet", *((unsigned char *)this + 158));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover", *((unsigned char *)this + 159));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "didProcess", *((unsigned char *)this + 160));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet", *((unsigned char *)this + 161));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover", *((unsigned char *)this + 162));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "energyAtMaxChaos", *((float *)this + 14));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRollover", *((float *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "energyAtMaxChaosRolloverTimestamp", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "energyAtMaxChaosTimestamp", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "energyMet", *((unsigned char *)this + 163));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "energyMetRollover", *((unsigned char *)this + 164));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 1) == 0)
  {
LABEL_19:
    if ((v5 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 2) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "parameterRollingEnergyWindowSize", *((_DWORD *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "parameterRollingPercentileWindowSize", *((_DWORD *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "parameterRolloverRollingEnergyWindowSize", *((_DWORD *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "parameterRolloverRollingPercentileWindowSize", *((_DWORD *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_32:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "parameterSaturationY", *((float *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "passThru", *((unsigned char *)this + 165));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "passThruRollover", *((unsigned char *)this + 166));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "rmsSampleCount", *((_DWORD *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "saturationMet", *((unsigned char *)this + 167));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "saturationMetRollover", *((unsigned char *)this + 168));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "thresholdChaos", *((float *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "thresholdChaosRollover", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "thresholdEnergy", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "thresholdEnergyRollover", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "thresholdMaxRMS", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "thresholdMaxRMSRollover", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "thresholdSaturationTime", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "thresholdSaturationTimeRollover", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 172);
  if ((v5 & 4) == 0)
  {
LABEL_46:
    if ((v5 & 8) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 3));
  if ((*(void *)((unsigned char *)this + 172) & 8) != 0) {
LABEL_47:
  }
    PB::TextFormatter::format(a2, "triggerTimestamp", *((void *)this + 4));
LABEL_48:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaLocalAudioResult::readFrom(CMMsl::KappaLocalAudioResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned int v20 = v11 & 7;
      if (v20 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v11 >> 3;
      if (v20 <= 4)
      {
        switch((v11 >> 3))
        {
          case 'e':
            *(void *)((char *)this + 172) |= 0x40000000000uLL;
            unint64_t v23 = *((void *)a2 + 1);
            if (v23 >= *((void *)a2 + 2))
            {
              BOOL v26 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v24 = v23 + 1;
              int v25 = *(unsigned __int8 *)(*(void *)a2 + v23);
              *((void *)a2 + 1) = v24;
              BOOL v26 = v25 != 0;
            }
            *((unsigned char *)this + 165) = v26;
            break;
          case 'f':
            *(void *)((char *)this + 172) |= 0x10000uLL;
            unint64_t v68 = *((void *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v68);
            goto LABEL_179;
          case 'g':
            *(void *)((char *)this + 172) |= 0x4000uLL;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v69);
            goto LABEL_179;
          case 'h':
            *(void *)((char *)this + 172) |= 0x1000uLL;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v70);
            goto LABEL_179;
          case 'i':
            *(void *)((char *)this + 172) |= 0x20000uLL;
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v71);
            goto LABEL_179;
          case 'j':
            *(void *)((char *)this + 172) |= 0x10000000000uLL;
            unint64_t v72 = *((void *)a2 + 1);
            if (v72 >= *((void *)a2 + 2))
            {
              BOOL v75 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v73 = v72 + 1;
              int v74 = *(unsigned __int8 *)(*(void *)a2 + v72);
              *((void *)a2 + 1) = v73;
              BOOL v75 = v74 != 0;
            }
            *((unsigned char *)this + 163) = v75;
            break;
          case 'k':
            *(void *)((char *)this + 172) |= 0x200000000uLL;
            unint64_t v76 = *((void *)a2 + 1);
            if (v76 >= *((void *)a2 + 2))
            {
              BOOL v79 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v77 = v76 + 1;
              int v78 = *(unsigned __int8 *)(*(void *)a2 + v76);
              *((void *)a2 + 1) = v77;
              BOOL v79 = v78 != 0;
            }
            *((unsigned char *)this + 156) = v79;
            break;
          case 'l':
            *(void *)((char *)this + 172) |= 0x100000000000uLL;
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 >= *((void *)a2 + 2))
            {
              BOOL v83 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v81 = v80 + 1;
              int v82 = *(unsigned __int8 *)(*(void *)a2 + v80);
              *((void *)a2 + 1) = v81;
              BOOL v83 = v82 != 0;
            }
            *((unsigned char *)this + 167) = v83;
            break;
          case 'm':
            *(void *)((char *)this + 172) |= 0x800000000uLL;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 >= *((void *)a2 + 2))
            {
              BOOL v87 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v85 = v84 + 1;
              int v86 = *(unsigned __int8 *)(*(void *)a2 + v84);
              *((void *)a2 + 1) = v85;
              BOOL v87 = v86 != 0;
            }
            *((unsigned char *)this + 158) = v87;
            break;
          case 'n':
            *(void *)((char *)this + 172) |= 0x4000000000uLL;
            unint64_t v88 = *((void *)a2 + 1);
            if (v88 >= *((void *)a2 + 2))
            {
              BOOL v91 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)a2 + v88);
              *((void *)a2 + 1) = v89;
              BOOL v91 = v90 != 0;
            }
            *((unsigned char *)this + 161) = v91;
            break;
          case 'o':
            *(void *)((char *)this + 172) |= 0x80000000000uLL;
            unint64_t v92 = *((void *)a2 + 1);
            if (v92 >= *((void *)a2 + 2))
            {
              BOOL v95 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v93 = v92 + 1;
              int v94 = *(unsigned __int8 *)(*(void *)a2 + v92);
              *((void *)a2 + 1) = v93;
              BOOL v95 = v94 != 0;
            }
            *((unsigned char *)this + 166) = v95;
            break;
          case 'p':
            *(void *)((char *)this + 172) |= 0x8000uLL;
            unint64_t v96 = *((void *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v96);
            goto LABEL_179;
          case 'q':
            *(void *)((char *)this + 172) |= 0x2000uLL;
            unint64_t v97 = *((void *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v97);
            goto LABEL_179;
          case 'r':
            *(void *)((char *)this + 172) |= 0x40000uLL;
            unint64_t v98 = *((void *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2))
            {
LABEL_126:
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v98);
LABEL_179:
              *((void *)a2 + 1) += 4;
            }
            break;
          case 's':
            *(void *)((char *)this + 172) |= 0x20000000000uLL;
            unint64_t v99 = *((void *)a2 + 1);
            if (v99 >= *((void *)a2 + 2))
            {
              BOOL v102 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v100 = v99 + 1;
              int v101 = *(unsigned __int8 *)(*(void *)a2 + v99);
              *((void *)a2 + 1) = v100;
              BOOL v102 = v101 != 0;
            }
            *((unsigned char *)this + 164) = v102;
            break;
          case 't':
            *(void *)((char *)this + 172) |= 0x400000000uLL;
            unint64_t v103 = *((void *)a2 + 1);
            if (v103 >= *((void *)a2 + 2))
            {
              BOOL v106 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v104 = v103 + 1;
              int v105 = *(unsigned __int8 *)(*(void *)a2 + v103);
              *((void *)a2 + 1) = v104;
              BOOL v106 = v105 != 0;
            }
            *((unsigned char *)this + 157) = v106;
            break;
          case 'u':
            *(void *)((char *)this + 172) |= 0x200000000000uLL;
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 >= *((void *)a2 + 2))
            {
              BOOL v110 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v108 = v107 + 1;
              int v109 = *(unsigned __int8 *)(*(void *)a2 + v107);
              *((void *)a2 + 1) = v108;
              BOOL v110 = v109 != 0;
            }
            *((unsigned char *)this + 168) = v110;
            break;
          case 'v':
            *(void *)((char *)this + 172) |= 0x1000000000uLL;
            unint64_t v111 = *((void *)a2 + 1);
            if (v111 >= *((void *)a2 + 2))
            {
              BOOL v114 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v112 = v111 + 1;
              int v113 = *(unsigned __int8 *)(*(void *)a2 + v111);
              *((void *)a2 + 1) = v112;
              BOOL v114 = v113 != 0;
            }
            *((unsigned char *)this + 159) = v114;
            break;
          case 'w':
            *(void *)((char *)this + 172) |= 0x8000000000uLL;
            unint64_t v115 = *((void *)a2 + 1);
            if (v115 >= *((void *)a2 + 2))
            {
              BOOL v118 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v116 = v115 + 1;
              int v117 = *(unsigned __int8 *)(*(void *)a2 + v115);
              *((void *)a2 + 1) = v116;
              BOOL v118 = v117 != 0;
            }
            *((unsigned char *)this + 162) = v118;
            break;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
        switch((int)v21)
        {
          case 1:
            *(void *)((char *)this + 172) |= 0x20000000uLL;
            unint64_t v22 = *((void *)a2 + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v22);
            goto LABEL_179;
          case 2:
            *(void *)((char *)this + 172) |= 0x8000000uLL;
            unint64_t v28 = *((void *)a2 + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v28);
            goto LABEL_179;
          case 3:
            *(void *)((char *)this + 172) |= 0x2000000uLL;
            unint64_t v29 = *((void *)a2 + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v29);
            goto LABEL_179;
          case 4:
            *(void *)((char *)this + 172) |= 0x80000000uLL;
            unint64_t v30 = *((void *)a2 + 1);
            if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v30);
            goto LABEL_179;
          case 5:
            *(void *)((char *)this + 172) |= 0x100000uLL;
            unint64_t v31 = *((void *)a2 + 1);
            unint64_t v32 = *((void *)a2 + 2);
            uint64_t v33 = *(void *)a2;
            if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
            {
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v37 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v38 = *(unsigned char *)(v33 + v31);
                v36 |= (unint64_t)(v38 & 0x7F) << v34;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v34 += 7;
                unint64_t v31 = v37;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
LABEL_135:
              LODWORD(v36) = 0;
              goto LABEL_188;
            }
            char v119 = 0;
            unsigned int v120 = 0;
            uint64_t v36 = 0;
            if (v32 <= v31) {
              unint64_t v32 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v32 == v31)
              {
                LODWORD(v36) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v121 = v31 + 1;
                char v122 = *(unsigned char *)(v33 + v31);
                *((void *)a2 + 1) = v121;
                v36 |= (unint64_t)(v122 & 0x7F) << v119;
                if (v122 < 0)
                {
                  v119 += 7;
                  unint64_t v31 = v121;
                  BOOL v14 = v120++ > 8;
                  if (v14) {
                    goto LABEL_135;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v36) = 0;
                }
              }
              break;
            }
LABEL_188:
            *((_DWORD *)this + 26) = v36;
            goto LABEL_180;
          case 6:
            *(void *)((char *)this + 172) |= 0x80000uLL;
            unint64_t v39 = *((void *)a2 + 1);
            unint64_t v40 = *((void *)a2 + 2);
            uint64_t v41 = *(void *)a2;
            if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
            {
              char v42 = 0;
              unsigned int v43 = 0;
              uint64_t v44 = 0;
              do
              {
                unint64_t v45 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v46 = *(unsigned char *)(v41 + v39);
                v44 |= (unint64_t)(v46 & 0x7F) << v42;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_192;
                }
                v42 += 7;
                unint64_t v39 = v45;
                BOOL v14 = v43++ > 8;
              }
              while (!v14);
LABEL_142:
              LODWORD(v44) = 0;
              goto LABEL_192;
            }
            char v123 = 0;
            unsigned int v124 = 0;
            uint64_t v44 = 0;
            if (v40 <= v39) {
              unint64_t v40 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v40 == v39)
              {
                LODWORD(v44) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v125 = v39 + 1;
                char v126 = *(unsigned char *)(v41 + v39);
                *((void *)a2 + 1) = v125;
                v44 |= (unint64_t)(v126 & 0x7F) << v123;
                if (v126 < 0)
                {
                  v123 += 7;
                  unint64_t v39 = v125;
                  BOOL v14 = v124++ > 8;
                  if (v14) {
                    goto LABEL_142;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v44) = 0;
                }
              }
              break;
            }
LABEL_192:
            *((_DWORD *)this + 25) = v44;
            goto LABEL_180;
          case 7:
            *(void *)((char *)this + 172) |= 0x800000uLL;
            unint64_t v47 = *((void *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v47);
            goto LABEL_179;
          case 8:
            *(void *)((char *)this + 172) |= 0x40000000uLL;
            unint64_t v48 = *((void *)a2 + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v48);
            goto LABEL_179;
          case 9:
            *(void *)((char *)this + 172) |= 0x10000000uLL;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v49);
            goto LABEL_179;
          case 10:
            *(void *)((char *)this + 172) |= 0x4000000uLL;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v50);
            goto LABEL_179;
          case 11:
            *(void *)((char *)this + 172) |= (unint64_t)&_mh_execute_header;
            unint64_t v51 = *((void *)a2 + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
              goto LABEL_126;
            }
            *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v51);
            goto LABEL_179;
          case 12:
            *(void *)((char *)this + 172) |= 0x200000uLL;
            unint64_t v52 = *((void *)a2 + 1);
            unint64_t v53 = *((void *)a2 + 2);
            uint64_t v54 = *(void *)a2;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v58 = v52 + 1;
                *((void *)a2 + 1) = v52 + 1;
                char v59 = *(unsigned char *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0) {
                  goto LABEL_196;
                }
                v55 += 7;
                unint64_t v52 = v58;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
LABEL_149:
              LODWORD(v57) = 0;
              goto LABEL_196;
            }
            char v127 = 0;
            unsigned int v128 = 0;
            uint64_t v57 = 0;
            if (v53 <= v52) {
              unint64_t v53 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v129 = v52 + 1;
                char v130 = *(unsigned char *)(v54 + v52);
                *((void *)a2 + 1) = v129;
                v57 |= (unint64_t)(v130 & 0x7F) << v127;
                if (v130 < 0)
                {
                  v127 += 7;
                  unint64_t v52 = v129;
                  BOOL v14 = v128++ > 8;
                  if (v14) {
                    goto LABEL_149;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
              }
              break;
            }
LABEL_196:
            *((_DWORD *)this + 27) = v57;
            goto LABEL_180;
          case 13:
            *(void *)((char *)this + 172) |= 0x400000uLL;
            unint64_t v60 = *((void *)a2 + 1);
            unint64_t v61 = *((void *)a2 + 2);
            uint64_t v62 = *(void *)a2;
            if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
            {
              char v63 = 0;
              unsigned int v64 = 0;
              uint64_t v65 = 0;
              do
              {
                unint64_t v66 = v60 + 1;
                *((void *)a2 + 1) = v60 + 1;
                char v67 = *(unsigned char *)(v62 + v60);
                v65 |= (unint64_t)(v67 & 0x7F) << v63;
                if ((v67 & 0x80) == 0) {
                  goto LABEL_200;
                }
                v63 += 7;
                unint64_t v60 = v66;
                BOOL v14 = v64++ > 8;
              }
              while (!v14);
LABEL_156:
              LODWORD(v65) = 0;
              goto LABEL_200;
            }
            char v131 = 0;
            unsigned int v132 = 0;
            uint64_t v65 = 0;
            if (v61 <= v60) {
              unint64_t v61 = *((void *)a2 + 1);
            }
            break;
          default:
            uint64_t result = PB::Reader::skip(a2, v21, v20, 0);
            if (!result) {
              return result;
            }
            goto LABEL_180;
        }
        while (1)
        {
          if (v61 == v60)
          {
            LODWORD(v65) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_200;
          }
          unint64_t v133 = v60 + 1;
          char v134 = *(unsigned char *)(v62 + v60);
          *((void *)a2 + 1) = v133;
          v65 |= (unint64_t)(v134 & 0x7F) << v131;
          if ((v134 & 0x80) == 0) {
            break;
          }
          v131 += 7;
          unint64_t v60 = v133;
          BOOL v14 = v132++ > 8;
          if (v14) {
            goto LABEL_156;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v65) = 0;
        }
LABEL_200:
        *((_DWORD *)this + 28) = v65;
      }
LABEL_180:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaLocalAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 172);
  if ((v4 & 0x20000000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 140), 1u);
    uint64_t v4 = *(void *)(v3 + 172);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 2u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 3u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 4u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 5u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 6u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 7u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 8u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 9u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0xAu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0xBu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0xCu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0xDu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 165), 0x65u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x66u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x67u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x68u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x69u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 163), 0x6Au);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 156), 0x6Bu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 167), 0x6Cu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 158), 0x6Du);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 161), 0x6Eu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 166), 0x6Fu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x70u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x71u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x72u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 164), 0x73u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 157), 0x74u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 168), 0x75u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 159), 0x76u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 162), 0x77u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 160), 0xC9u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0) {
      goto LABEL_36;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xCAu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0) {
      goto LABEL_37;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xCBu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0) {
      goto LABEL_38;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0xCCu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x80) == 0) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xCDu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x100) == 0) {
      goto LABEL_40;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xCEu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v4 & 0x800) == 0) {
      goto LABEL_41;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xCFu);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x800) == 0)
  {
LABEL_41:
    if ((v4 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xD0u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0) {
      goto LABEL_43;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xD1u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xD2u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xD3u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 0x200) == 0) {
      goto LABEL_46;
    }
LABEL_92:
    this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xD5u);
    if ((*(void *)(v3 + 172) & 0x400) == 0) {
      return this;
    }
    goto LABEL_93;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xD4u);
  uint64_t v4 = *(void *)(v3 + 172);
  if ((v4 & 0x200) != 0) {
    goto LABEL_92;
  }
LABEL_46:
  if ((v4 & 0x400) == 0) {
    return this;
  }
LABEL_93:
  float v5 = *(float *)(v3 + 64);

  return PB::Writer::write(a2, v5, 0xD6u);
}

uint64_t CMMsl::KappaLocalAudioResult::hash_value(CMMsl::KappaLocalAudioResult *this)
{
  uint64_t v1 = *(void *)((char *)this + 172);
  if ((v1 & 0x20000000) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_3;
    }
LABEL_101:
    uint64_t v84 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_6;
    }
LABEL_102:
    uint64_t v83 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_9;
    }
LABEL_103:
    uint64_t v82 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_104;
  }
  float v64 = *((float *)this + 35);
  if (v64 == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = LODWORD(v64);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_101;
  }
LABEL_3:
  float v3 = *((float *)this + 33);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v84 = v4;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_102;
  }
LABEL_6:
  float v5 = *((float *)this + 31);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v83 = v6;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_103;
  }
LABEL_9:
  float v7 = *((float *)this + 37);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v82 = v8;
  if ((v1 & 0x100000) != 0)
  {
LABEL_12:
    uint64_t v81 = *((int *)this + 26);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v81 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_13:
    uint64_t v80 = *((int *)this + 25);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_14;
    }
LABEL_106:
    uint64_t v79 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_17;
    }
LABEL_107:
    uint64_t v78 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_20;
    }
LABEL_108:
    uint64_t v77 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_23;
    }
LABEL_109:
    uint64_t v76 = 0;
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_26;
    }
LABEL_110:
    uint64_t v75 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_111;
  }
LABEL_105:
  uint64_t v80 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_106;
  }
LABEL_14:
  float v9 = *((float *)this + 29);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v79 = v10;
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_107;
  }
LABEL_17:
  float v11 = *((float *)this + 36);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v78 = v12;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_108;
  }
LABEL_20:
  float v13 = *((float *)this + 34);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v77 = v14;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_109;
  }
LABEL_23:
  float v15 = *((float *)this + 32);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v76 = v16;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_110;
  }
LABEL_26:
  float v17 = *((float *)this + 38);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v75 = v18;
  if ((v1 & 0x200000) != 0)
  {
LABEL_29:
    uint64_t v74 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_112;
  }
LABEL_111:
  uint64_t v74 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_30:
    uint64_t v73 = *((int *)this + 28);
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v73 = 0;
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_31:
    uint64_t v72 = *((unsigned __int8 *)this + 165);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_32;
    }
LABEL_114:
    uint64_t v71 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_35;
    }
LABEL_115:
    uint64_t v70 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_38;
    }
LABEL_116:
    uint64_t v69 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
LABEL_117:
    uint64_t v68 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_118;
  }
LABEL_113:
  uint64_t v72 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_114;
  }
LABEL_32:
  float v19 = *((float *)this + 22);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v71 = v20;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_115;
  }
LABEL_35:
  float v21 = *((float *)this + 20);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v70 = v22;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_116;
  }
LABEL_38:
  float v23 = *((float *)this + 18);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v69 = v24;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_117;
  }
LABEL_41:
  float v25 = *((float *)this + 23);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v68 = v26;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_44:
    uint64_t v67 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_119;
  }
LABEL_118:
  uint64_t v67 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_45:
    uint64_t v66 = *((unsigned __int8 *)this + 156);
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_120;
  }
LABEL_119:
  uint64_t v66 = 0;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_46:
    uint64_t v27 = *((unsigned __int8 *)this + 167);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_121;
  }
LABEL_120:
  uint64_t v27 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_47:
    uint64_t v28 = *((unsigned __int8 *)this + 158);
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_122;
  }
LABEL_121:
  uint64_t v28 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_48:
    uint64_t v29 = *((unsigned __int8 *)this + 161);
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_123;
  }
LABEL_122:
  uint64_t v29 = 0;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_49:
    uint64_t v30 = *((unsigned __int8 *)this + 166);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_50;
    }
LABEL_124:
    uint64_t v32 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_54;
    }
LABEL_125:
    uint64_t v34 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_58;
    }
LABEL_126:
    uint64_t v36 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_127;
  }
LABEL_123:
  uint64_t v30 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_124;
  }
LABEL_50:
  float v31 = *((float *)this + 21);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_125;
  }
LABEL_54:
  float v33 = *((float *)this + 19);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_126;
  }
LABEL_58:
  float v35 = *((float *)this + 24);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_62:
    uint64_t v37 = *((unsigned __int8 *)this + 164);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_128;
  }
LABEL_127:
  uint64_t v37 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_63:
    uint64_t v38 = *((unsigned __int8 *)this + 157);
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_64;
    }
    goto LABEL_129;
  }
LABEL_128:
  uint64_t v38 = 0;
  if ((v1 & 0x200000000000) != 0)
  {
LABEL_64:
    uint64_t v39 = *((unsigned __int8 *)this + 168);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_65;
    }
    goto LABEL_130;
  }
LABEL_129:
  uint64_t v39 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_65:
    uint64_t v40 = *((unsigned __int8 *)this + 159);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_66;
    }
    goto LABEL_131;
  }
LABEL_130:
  uint64_t v40 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_66:
    uint64_t v41 = *((unsigned __int8 *)this + 162);
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_67;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v41 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_67:
    uint64_t v42 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_68;
    }
    goto LABEL_133;
  }
LABEL_132:
  uint64_t v42 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_68:
    uint64_t v43 = *((int *)this + 30);
    if ((v1 & 4) != 0) {
      goto LABEL_69;
    }
    goto LABEL_134;
  }
LABEL_133:
  uint64_t v43 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_69:
    uint64_t v44 = *((void *)this + 3);
    if ((v1 & 8) != 0) {
      goto LABEL_70;
    }
    goto LABEL_135;
  }
LABEL_134:
  uint64_t v44 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_70:
    uint64_t v45 = *((void *)this + 4);
    if ((v1 & 0x10) != 0) {
      goto LABEL_71;
    }
LABEL_136:
    uint64_t v47 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_74;
    }
LABEL_137:
    uint64_t v49 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_77;
    }
LABEL_138:
    uint64_t v51 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_80;
    }
LABEL_139:
    uint64_t v53 = 0;
    if (v1) {
      goto LABEL_83;
    }
    goto LABEL_140;
  }
LABEL_135:
  uint64_t v45 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_136;
  }
LABEL_71:
  float v46 = *((float *)this + 10);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_137;
  }
LABEL_74:
  float v48 = *((float *)this + 13);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_138;
  }
LABEL_77:
  float v50 = *((float *)this + 14);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_139;
  }
LABEL_80:
  float v52 = *((float *)this + 17);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if (v1)
  {
LABEL_83:
    uint64_t v54 = *((void *)this + 1);
    if ((v1 & 2) != 0) {
      goto LABEL_84;
    }
    goto LABEL_141;
  }
LABEL_140:
  uint64_t v54 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_84:
    uint64_t v55 = *((void *)this + 2);
    if ((v1 & 0x20) != 0) {
      goto LABEL_85;
    }
LABEL_142:
    uint64_t v57 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_88;
    }
LABEL_143:
    uint64_t v59 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_91;
    }
    goto LABEL_144;
  }
LABEL_141:
  uint64_t v55 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_142;
  }
LABEL_85:
  float v56 = *((float *)this + 11);
  uint64_t v57 = LODWORD(v56);
  if (v56 == 0.0) {
    uint64_t v57 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_143;
  }
LABEL_88:
  float v58 = *((float *)this + 12);
  uint64_t v59 = LODWORD(v58);
  if (v58 == 0.0) {
    uint64_t v59 = 0;
  }
  if ((v1 & 0x200) != 0)
  {
LABEL_91:
    float v60 = *((float *)this + 15);
    uint64_t v61 = LODWORD(v60);
    if (v60 == 0.0) {
      uint64_t v61 = 0;
    }
    if ((v1 & 0x400) != 0) {
      goto LABEL_94;
    }
LABEL_145:
    uint64_t v63 = 0;
    return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
  }
LABEL_144:
  uint64_t v61 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_145;
  }
LABEL_94:
  float v62 = *((float *)this + 16);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  return v84 ^ v2 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v73 ^ v72 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v34 ^ v36 ^ v37 ^ v38 ^ v39 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53 ^ v54 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63;
}

void CMMsl::KappaMildImpactResult::~KappaMildImpactResult(CMMsl::KappaMildImpactResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this, const CMMsl::KappaMildImpactResult *a2)
{
  *(void *)this = off_1003A6BA8;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((unsigned char *)a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, const CMMsl::KappaMildImpactResult *a2)
{
  if ((const CMMsl::KappaMildImpactResult *)a1 != a2)
  {
    CMMsl::KappaMildImpactResult::KappaMildImpactResult((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    int v11 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaMildImpactResult *a2, CMMsl::KappaMildImpactResult *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6BA8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6BA8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaMildImpactResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A6BA8;
    int v3 = *(_DWORD *)(a2 + 20);
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    int v12 = *(_DWORD *)(a1 + 20);
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 8) = v7;
    v10[1] = v6;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaMildImpactResult::formatText(CMMsl::KappaMildImpactResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaMildImpactResult::readFrom(CMMsl::KappaMildImpactResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaMildImpactResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0x186A4u);
}

uint64_t CMMsl::KappaMildImpactResult::hash_value(CMMsl::KappaMildImpactResult *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 6);
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_7:
    float v5 = *((float *)this + 3);
    uint64_t v6 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaPeakDetectorMapMagTimestamps::~KappaPeakDetectorMapMagTimestamps(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  *(void *)this = off_1003A6BE0;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 8;
    *(unsigned char *)(this + 44) = 8;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 44))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return this;
      }
LABEL_12:
      uint64_t v8 = *((void *)a2 + 3);
      *(unsigned char *)(this + 44) = v3 | 4;
      *(void *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(_DWORD *)(this + 40) = v7;
  if ((*((unsigned char *)a2 + 44) & 4) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, const CMMsl::KappaPeakDetectorMapMagTimestamps *a2)
{
  if ((const CMMsl::KappaPeakDetectorMapMagTimestamps *)a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v12;
    int v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapMagTimestamps *a2, CMMsl::KappaPeakDetectorMapMagTimestamps *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  return result;
}

float CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6BE0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6BE0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = off_1003A6BE0;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    int v4 = *(_DWORD *)(a2 + 40);
    int v14 = *(_DWORD *)(a1 + 44);
    long long v5 = *(_OWORD *)(a2 + 8);
    long long v11 = *(_OWORD *)(a1 + 8);
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v4;
    int v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v8;
    long long v12 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::formatText(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "maxNormTimestamp", *((void *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "maxNormValue", *((float *)this + 10));
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 4));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::readFrom(CMMsl::KappaPeakDetectorMapMagTimestamps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 4) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_93:
              *((void *)this + 1) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_98:
              *((void *)this + 2) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_103:
              *((void *)this + 3) = v43;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 40), 4u);
    if ((*(unsigned char *)(v3 + 44) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  unint64_t v5 = *(void *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::hash_value(CMMsl::KappaPeakDetectorMapMagTimestamps *this)
{
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
    uint64_t v1 = *((void *)this + 4);
    if (*((unsigned char *)this + 44))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 1);
      if ((*((unsigned char *)this + 44) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
LABEL_4:
    uint64_t v3 = *((void *)this + 2);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) != 0)
  {
LABEL_5:
    float v4 = *((float *)this + 10);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  *(void *)this = off_1003A6C18;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult(this);

  operator delete();
}

CMMsl::KappaPeakDetectorMapResult *CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  *(void *)this = off_1003A6C18;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *((_DWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x80) != 0)
  {
    int v7 = *((_DWORD *)a2 + 28);
    int v6 = 128;
    *((_DWORD *)this + 38) = 128;
    *((_DWORD *)this + 28) = v7;
    int v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = 0;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 10);
    v6 |= 8u;
    *((_DWORD *)this + 38) = v6;
    *((void *)this + 10) = v8;
    int v5 = *((_DWORD *)a2 + 38);
  }
LABEL_6:
  if ((v5 & 0x800) != 0)
  {
    int v13 = *((_DWORD *)a2 + 32);
    v6 |= 0x800u;
    *((_DWORD *)this + 38) = v6;
    *((_DWORD *)this + 32) = v13;
    int v5 = *((_DWORD *)a2 + 38);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v14 = *((void *)a2 + 11);
  v6 |= 0x10u;
  *((_DWORD *)this + 38) = v6;
  *((void *)this + 11) = v14;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v15 = *((_DWORD *)a2 + 35);
  v6 |= 0x4000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 35) = v15;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v16 = *((_DWORD *)a2 + 36);
  v6 |= 0x8000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 36) = v16;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v17 = *((_DWORD *)a2 + 30);
  v6 |= 0x200u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 30) = v17;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v18 = *((_DWORD *)a2 + 31);
  v6 |= 0x400u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 31) = v18;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v19 = *((void *)a2 + 12);
  v6 |= 0x20u;
  *((_DWORD *)this + 38) = v6;
  *((void *)this + 12) = v19;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v20 = *((_DWORD *)a2 + 29);
  v6 |= 0x100u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 29) = v20;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x10000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v21 = *((unsigned char *)a2 + 148);
  v6 |= 0x10000u;
  *((_DWORD *)this + 38) = v6;
  *((unsigned char *)this + 148) = v21;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v22 = *((void *)a2 + 13);
  v6 |= 0x40u;
  *((_DWORD *)this + 38) = v6;
  *((void *)this + 13) = v22;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v23 = *((_DWORD *)a2 + 33);
  v6 |= 0x1000u;
  *((_DWORD *)this + 38) = v6;
  *((_DWORD *)this + 33) = v23;
  int v5 = *((_DWORD *)a2 + 38);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_38:
  uint64_t v24 = *((void *)a2 + 9);
  v6 |= 4u;
  *((_DWORD *)this + 38) = v6;
  *((void *)this + 9) = v24;
  if ((*((_DWORD *)a2 + 38) & 0x2000) != 0)
  {
LABEL_19:
    int v9 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 38) = v6 | 0x2000;
    *((_DWORD *)this + 34) = v9;
  }
LABEL_20:
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_24;
    }
LABEL_41:
    uint64_t v26 = *((void *)a2 + 8);
    *((_DWORD *)this + 38) |= 2u;
    *((void *)this + 8) = v26;
    if ((*((_DWORD *)a2 + 38) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_25;
  }
  uint64_t v25 = *((void *)a2 + 7);
  *((_DWORD *)this + 38) |= 1u;
  *((void *)this + 7) = v25;
  int v10 = *((_DWORD *)a2 + 38);
  if ((v10 & 2) != 0) {
    goto LABEL_41;
  }
LABEL_24:
  if ((v10 & 0x20000) != 0)
  {
LABEL_25:
    char v11 = *((unsigned char *)a2 + 149);
    *((_DWORD *)this + 38) |= 0x20000u;
    *((unsigned char *)this + 149) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, const CMMsl::KappaPeakDetectorMapResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPeakDetectorMapResult *a2, CMMsl::KappaPeakDetectorMapResult *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  uint64_t v5 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v5;
  uint64_t v6 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 148);
  *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
  *((unsigned char *)a2 + 148) = v6;
  uint64_t v7 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v7;
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *((void *)this + 6);
  uint64_t v15 = *((void *)this + 7);
  uint64_t v16 = *((void *)a2 + 7);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = v16;
  int v17 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v17;
  int v18 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v18;
  int v19 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v19;
  int v20 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  int v21 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v21;
  int v22 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v22;
  float result = *((float *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((float *)a2 + 34) = result;
  *((void *)a2 + 6) = v14;
  *((void *)a2 + 7) = v15;
  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 149);
  *((unsigned char *)this + 149) = *((unsigned char *)a2 + 149);
  *((unsigned char *)a2 + 149) = v24;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6C18;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  return a1;
}

CMMsl *CMMsl::KappaPeakDetectorMapResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPeakDetectorMapResult *)v5, v3);
    CMMsl::KappaPeakDetectorMapResult::~KappaPeakDetectorMapResult((CMMsl::KappaPeakDetectorMapResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::formatText(CMMsl::KappaPeakDetectorMapResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 152) & 0x80) != 0) {
    PB::TextFormatter::format(a2, "accelPeakThreshold", *((float *)this + 28));
  }
  uint64_t v5 = (unint64_t *)*((void *)this + 1);
  uint64_t v6 = (unint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    PB::TextFormatter::format(a2, "allMaxNormTimestamps", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "allMaxNormValues", v10);
  }
  int v11 = *((_DWORD *)this + 38);
  if (v11)
  {
    PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 7));
    int v11 = *((_DWORD *)this + 38);
    if ((v11 & 2) == 0)
    {
LABEL_9:
      if ((v11 & 0x10000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_30;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 8));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x10000) == 0)
  {
LABEL_10:
    if ((v11 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isMAPDetected", *((unsigned char *)this + 148));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x100) == 0)
  {
LABEL_11:
    if ((v11 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "magnitudePercentileThreshold", *((float *)this + 29));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x200) == 0)
  {
LABEL_12:
    if ((v11 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "magnitudePeriodicityLowerPercentile", *((float *)this + 30));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x400) == 0)
  {
LABEL_13:
    if ((v11 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "magnitudePeriodicityUpperPercentile", *((float *)this + 31));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x800) == 0)
  {
LABEL_14:
    if ((v11 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "minNumPeaks", *((_DWORD *)this + 32));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x1000) == 0)
  {
LABEL_15:
    if ((v11 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "numPeaks", *((_DWORD *)this + 33));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x2000) == 0)
  {
LABEL_16:
    if ((v11 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "peakMagnitudePercentileDiff", *((float *)this + 34));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x20000) == 0)
  {
LABEL_17:
    if ((v11 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "peakSeparation", *((unsigned char *)this + 149));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 4) == 0)
  {
LABEL_18:
    if ((v11 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "peakTimeDeltaPercentileDiff", *((void *)this + 9));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 8) == 0)
  {
LABEL_19:
    if ((v11 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "peakToPeakMinimumSeparation", *((void *)this + 10));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x10) == 0)
  {
LABEL_20:
    if ((v11 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "peakToPeakSeparationThreshold", *((void *)this + 11));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x20) == 0)
  {
LABEL_21:
    if ((v11 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timePercentileDiffThreshold", *((void *)this + 12));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x4000) == 0)
  {
LABEL_22:
    if ((v11 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "timePeriodicityLowerPercentile", *((float *)this + 35));
  int v11 = *((_DWORD *)this + 38);
  if ((v11 & 0x8000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "timePeriodicityUpperPercentile", *((float *)this + 36));
  if ((*((_DWORD *)this + 38) & 0x40) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 13));
LABEL_25:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaPeakDetectorMapResult::readFrom(CMMsl::KappaPeakDetectorMapResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    float v10 = (void **)((char *)this + 8);
    int v11 = (void *)((char *)this + 24);
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v101 = v14++ > 8;
        if (v101) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v23 = v15 & 7;
      if (v23 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v24 = v15 >> 3;
      if ((int)(v15 >> 3) > 100)
      {
        switch((int)v24)
        {
          case 201:
            *((_DWORD *)this + 38) |= 0x1000u;
            unint64_t v26 = *((void *)a2 + 1);
            unint64_t v27 = *((void *)a2 + 2);
            uint64_t v28 = *(void *)a2;
            if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
            {
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v32 = v26 + 1;
                *((void *)a2 + 1) = v26 + 1;
                char v33 = *(unsigned char *)(v28 + v26);
                v31 |= (unint64_t)(v33 & 0x7F) << v29;
                if ((v33 & 0x80) == 0) {
                  goto LABEL_285;
                }
                v29 += 7;
                unint64_t v26 = v32;
                BOOL v101 = v30++ > 8;
              }
              while (!v101);
LABEL_192:
              LODWORD(v31) = 0;
              goto LABEL_285;
            }
            char v150 = 0;
            unsigned int v151 = 0;
            uint64_t v31 = 0;
            if (v27 <= v26) {
              unint64_t v27 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v27 == v26)
              {
                LODWORD(v31) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v152 = v26 + 1;
                char v153 = *(unsigned char *)(v28 + v26);
                *((void *)a2 + 1) = v152;
                v31 |= (unint64_t)(v153 & 0x7F) << v150;
                if (v153 < 0)
                {
                  v150 += 7;
                  unint64_t v26 = v152;
                  BOOL v101 = v151++ > 8;
                  if (v101) {
                    goto LABEL_192;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
              }
              break;
            }
LABEL_285:
            *((_DWORD *)this + 33) = v31;
            break;
          case 202:
            *((_DWORD *)this + 38) |= 4u;
            unint64_t v79 = *((void *)a2 + 1);
            unint64_t v80 = *((void *)a2 + 2);
            uint64_t v81 = *(void *)a2;
            if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
            {
              char v82 = 0;
              unsigned int v83 = 0;
              uint64_t v84 = 0;
              do
              {
                unint64_t v85 = v79 + 1;
                *((void *)a2 + 1) = v79 + 1;
                char v86 = *(unsigned char *)(v81 + v79);
                v84 |= (unint64_t)(v86 & 0x7F) << v82;
                if ((v86 & 0x80) == 0) {
                  goto LABEL_303;
                }
                v82 += 7;
                unint64_t v79 = v85;
                BOOL v101 = v83++ > 8;
              }
              while (!v101);
LABEL_234:
              uint64_t v84 = 0;
              goto LABEL_303;
            }
            char v174 = 0;
            unsigned int v175 = 0;
            uint64_t v84 = 0;
            if (v80 <= v79) {
              unint64_t v80 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v80 == v79)
              {
                uint64_t v84 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v176 = v79 + 1;
                char v177 = *(unsigned char *)(v81 + v79);
                *((void *)a2 + 1) = v176;
                v84 |= (unint64_t)(v177 & 0x7F) << v174;
                if (v177 < 0)
                {
                  v174 += 7;
                  unint64_t v79 = v176;
                  BOOL v101 = v175++ > 8;
                  if (v101) {
                    goto LABEL_234;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v84 = 0;
                }
              }
              break;
            }
LABEL_303:
            *((void *)this + 9) = v84;
            break;
          case 203:
            *((_DWORD *)this + 38) |= 0x2000u;
            unint64_t v87 = *((void *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v87);
            goto LABEL_344;
          case 204:
            if (v23 != 2)
            {
              uint64_t v179 = (char *)*((void *)this + 2);
              unint64_t v178 = *((void *)this + 3);
              if ((unint64_t)v179 >= v178)
              {
                char v192 = (char *)*v10;
                uint64_t v193 = (v179 - (unsigned char *)*v10) >> 3;
                unint64_t v194 = v193 + 1;
                if ((unint64_t)(v193 + 1) >> 61) {
LABEL_360:
                }
                  sub_10000EE98();
                uint64_t v195 = v178 - (void)v192;
                if (v195 >> 2 > v194) {
                  unint64_t v194 = v195 >> 2;
                }
                if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v196 = v194;
                }
                if (v196)
                {
                  uint64_t v197 = (char *)sub_10000EEB0((uint64_t)v11, v196);
                  char v192 = (char *)*((void *)this + 1);
                  uint64_t v179 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v197 = 0;
                }
                char v204 = &v197[8 * v193];
                *(void *)char v204 = 0;
                uint64_t v180 = v204 + 8;
                while (v179 != v192)
                {
                  uint64_t v205 = *((void *)v179 - 1);
                  v179 -= 8;
                  *((void *)v204 - 1) = v205;
                  v204 -= 8;
                }
                *((void *)this + 1) = v204;
                *((void *)this + 2) = v180;
                *((void *)this + 3) = &v197[8 * v196];
                if (v192) {
                  operator delete(v192);
                }
              }
              else
              {
                *(void *)uint64_t v179 = 0;
                uint64_t v180 = v179 + 8;
              }
              *((void *)this + 2) = v180;
              unint64_t v206 = *((void *)a2 + 1);
              unint64_t v207 = *((void *)a2 + 2);
              uint64_t v208 = *(void *)a2;
              char v209 = 0;
              unsigned int v210 = 0;
              if (v206 > 0xFFFFFFFFFFFFFFF5 || v206 + 10 > v207)
              {
                uint64_t v214 = 0;
                if (v207 <= v206) {
                  unint64_t v207 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v207 == v206)
                  {
                    uint64_t v214 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_348;
                  }
                  unint64_t v212 = v206 + 1;
                  char v213 = *(unsigned char *)(v208 + v206);
                  *((void *)a2 + 1) = v212;
                  v214 |= (unint64_t)(v213 & 0x7F) << v209;
                  if ((v213 & 0x80) == 0) {
                    break;
                  }
                  v209 += 7;
                  unint64_t v206 = v212;
                  BOOL v101 = v210++ > 8;
                  if (v101)
                  {
LABEL_333:
                    uint64_t v214 = 0;
                    goto LABEL_348;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v214 = 0;
                }
              }
              else
              {
                uint64_t v214 = 0;
                while (1)
                {
                  unint64_t v215 = v206 + 1;
                  *((void *)a2 + 1) = v206 + 1;
                  char v216 = *(unsigned char *)(v208 + v206);
                  v214 |= (unint64_t)(v216 & 0x7F) << v209;
                  if ((v216 & 0x80) == 0) {
                    break;
                  }
                  v209 += 7;
                  unint64_t v206 = v215;
                  BOOL v101 = v210++ > 8;
                  if (v101) {
                    goto LABEL_333;
                  }
                }
              }
LABEL_348:
              *(v180 - 1) = v214;
              break;
            }
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v88 = (char *)*((void *)this + 2);
              do
              {
                if ((unint64_t)v88 >= *v11)
                {
                  unint64_t v89 = (char *)*v10;
                  uint64_t v90 = (v88 - (unsigned char *)*v10) >> 3;
                  unint64_t v91 = v90 + 1;
                  if ((unint64_t)(v90 + 1) >> 61) {
                    goto LABEL_360;
                  }
                  uint64_t v92 = *v11 - (void)v89;
                  if (v92 >> 2 > v91) {
                    unint64_t v91 = v92 >> 2;
                  }
                  if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v93 = v91;
                  }
                  if (v93)
                  {
                    int v94 = (char *)sub_10000EEB0((uint64_t)v11, v93);
                    unint64_t v89 = (char *)*((void *)this + 1);
                    unint64_t v88 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    int v94 = 0;
                  }
                  BOOL v95 = &v94[8 * v90];
                  *(void *)BOOL v95 = 0;
                  unint64_t v96 = v95 + 8;
                  while (v88 != v89)
                  {
                    uint64_t v97 = *((void *)v88 - 1);
                    v88 -= 8;
                    *((void *)v95 - 1) = v97;
                    v95 -= 8;
                  }
                  *((void *)this + 1) = v95;
                  *((void *)this + 2) = v96;
                  *((void *)this + 3) = &v94[8 * v93];
                  if (v89) {
                    operator delete(v89);
                  }
                  unint64_t v88 = v96;
                }
                else
                {
                  *(void *)unint64_t v88 = 0;
                  v88 += 8;
                }
                *((void *)this + 2) = v88;
                unint64_t v99 = *((void *)a2 + 1);
                unint64_t v98 = *((void *)a2 + 2);
                uint64_t v100 = *(void *)a2;
                BOOL v101 = v99 > 0xFFFFFFFFFFFFFFF5 || v99 + 10 > v98;
                if (!v101)
                {
                  char v107 = 0;
                  unsigned int v108 = 0;
                  uint64_t v109 = 0;
                  while (1)
                  {
                    unint64_t v110 = v99 + 1;
                    *((void *)a2 + 1) = v99 + 1;
                    char v111 = *(unsigned char *)(v100 + v99);
                    v109 |= (unint64_t)(v111 & 0x7F) << v107;
                    if ((v111 & 0x80) == 0) {
                      goto LABEL_139;
                    }
                    v107 += 7;
                    unint64_t v99 = v110;
                    BOOL v101 = v108++ > 8;
                    if (v101)
                    {
                      uint64_t v109 = 0;
                      goto LABEL_139;
                    }
                  }
                }
                char v102 = 0;
                unsigned int v103 = 0;
                uint64_t v109 = 0;
                if (v98 <= v99) {
                  uint64_t v104 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v104 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v104 == v99)
                  {
                    *((unsigned char *)a2 + 24) = 1;
                    *((void *)v88 - 1) = 0;
                    goto LABEL_311;
                  }
                  unint64_t v105 = v99++;
                  char v106 = *(unsigned char *)(v100 + v105);
                  *((void *)a2 + 1) = v99;
                  v109 |= (unint64_t)(v106 & 0x7F) << v102;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v102 += 7;
                  BOOL v101 = v103++ > 8;
                  if (v101)
                  {
                    uint64_t v109 = 0;
                    goto LABEL_138;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v109 = 0;
                }
LABEL_138:
                unint64_t v110 = v105 + 1;
LABEL_139:
                *((void *)v88 - 1) = v109;
              }
              while (v110 < v98 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_311;
          case 205:
            if (v23 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v112 = *((void *)a2 + 1);
              unint64_t v113 = *((void *)a2 + 2);
              while (v112 < v113 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v115 = (char *)*((void *)this + 5);
                unint64_t v114 = *((void *)this + 6);
                if ((unint64_t)v115 >= v114)
                {
                  int v117 = (char *)*v8;
                  uint64_t v118 = (v115 - (unsigned char *)*v8) >> 2;
                  unint64_t v119 = v118 + 1;
                  if ((unint64_t)(v118 + 1) >> 62) {
                    goto LABEL_359;
                  }
                  uint64_t v120 = v114 - (void)v117;
                  if (v120 >> 1 > v119) {
                    unint64_t v119 = v120 >> 1;
                  }
                  if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v121 = v119;
                  }
                  if (v121)
                  {
                    char v122 = (char *)sub_100024458((uint64_t)v9, v121);
                    int v117 = (char *)*((void *)this + 4);
                    unint64_t v115 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    char v122 = 0;
                  }
                  char v123 = &v122[4 * v118];
                  *(_DWORD *)char v123 = 0;
                  unint64_t v116 = v123 + 4;
                  while (v115 != v117)
                  {
                    int v124 = *((_DWORD *)v115 - 1);
                    v115 -= 4;
                    *((_DWORD *)v123 - 1) = v124;
                    v123 -= 4;
                  }
                  *((void *)this + 4) = v123;
                  *((void *)this + 5) = v116;
                  *((void *)this + 6) = &v122[4 * v121];
                  if (v117) {
                    operator delete(v117);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v115 = 0;
                  unint64_t v116 = v115 + 4;
                }
                *((void *)this + 5) = v116;
                unint64_t v125 = *((void *)a2 + 1);
                if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2))
                {
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v116 - 1) = *(_DWORD *)(*(void *)a2 + v125);
                unint64_t v113 = *((void *)a2 + 2);
                unint64_t v112 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v112;
              }
LABEL_311:
              PB::Reader::recallMark();
            }
            else
            {
              unint64_t v182 = (char *)*((void *)this + 5);
              unint64_t v181 = *((void *)this + 6);
              if ((unint64_t)v182 >= v181)
              {
                char v198 = (char *)*v8;
                uint64_t v199 = (v182 - (unsigned char *)*v8) >> 2;
                unint64_t v200 = v199 + 1;
                if ((unint64_t)(v199 + 1) >> 62) {
LABEL_359:
                }
                  sub_10000EE98();
                uint64_t v201 = v181 - (void)v198;
                if (v201 >> 1 > v200) {
                  unint64_t v200 = v201 >> 1;
                }
                if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v202 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v202 = v200;
                }
                if (v202)
                {
                  unint64_t v203 = (char *)sub_100024458((uint64_t)v9, v202);
                  char v198 = (char *)*((void *)this + 4);
                  unint64_t v182 = (char *)*((void *)this + 5);
                }
                else
                {
                  unint64_t v203 = 0;
                }
                uint64_t v217 = &v203[4 * v199];
                *(_DWORD *)uint64_t v217 = 0;
                unint64_t v183 = v217 + 4;
                while (v182 != v198)
                {
                  int v218 = *((_DWORD *)v182 - 1);
                  v182 -= 4;
                  *((_DWORD *)v217 - 1) = v218;
                  v217 -= 4;
                }
                *((void *)this + 4) = v217;
                *((void *)this + 5) = v183;
                *((void *)this + 6) = &v203[4 * v202];
                if (v198) {
                  operator delete(v198);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v182 = 0;
                unint64_t v183 = v182 + 4;
              }
              *((void *)this + 5) = v183;
              unint64_t v219 = *((void *)a2 + 1);
              if (v219 <= 0xFFFFFFFFFFFFFFFBLL && v219 + 4 <= *((void *)a2 + 2))
              {
                *(v183 - 1) = *(_DWORD *)(*(void *)a2 + v219);
LABEL_344:
                *((void *)a2 + 1) += 4;
              }
              else
              {
LABEL_342:
                *((unsigned char *)a2 + 24) = 1;
              }
            }
            break;
          case 206:
            *((_DWORD *)this + 38) |= 1u;
            unint64_t v126 = *((void *)a2 + 1);
            unint64_t v127 = *((void *)a2 + 2);
            uint64_t v128 = *(void *)a2;
            if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
            {
              char v129 = 0;
              unsigned int v130 = 0;
              uint64_t v131 = 0;
              do
              {
                unint64_t v132 = v126 + 1;
                *((void *)a2 + 1) = v126 + 1;
                char v133 = *(unsigned char *)(v128 + v126);
                v131 |= (unint64_t)(v133 & 0x7F) << v129;
                if ((v133 & 0x80) == 0) {
                  goto LABEL_306;
                }
                v129 += 7;
                unint64_t v126 = v132;
                BOOL v101 = v130++ > 8;
              }
              while (!v101);
LABEL_245:
              uint64_t v131 = 0;
              goto LABEL_306;
            }
            char v184 = 0;
            unsigned int v185 = 0;
            uint64_t v131 = 0;
            if (v127 <= v126) {
              unint64_t v127 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v127 == v126)
              {
                uint64_t v131 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v186 = v126 + 1;
                char v187 = *(unsigned char *)(v128 + v126);
                *((void *)a2 + 1) = v186;
                v131 |= (unint64_t)(v187 & 0x7F) << v184;
                if (v187 < 0)
                {
                  v184 += 7;
                  unint64_t v126 = v186;
                  BOOL v101 = v185++ > 8;
                  if (v101) {
                    goto LABEL_245;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v131 = 0;
                }
              }
              break;
            }
LABEL_306:
            *((void *)this + 7) = v131;
            break;
          case 207:
            *((_DWORD *)this + 38) |= 2u;
            unint64_t v134 = *((void *)a2 + 1);
            unint64_t v135 = *((void *)a2 + 2);
            uint64_t v136 = *(void *)a2;
            if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
            {
              char v137 = 0;
              unsigned int v138 = 0;
              uint64_t v139 = 0;
              do
              {
                unint64_t v140 = v134 + 1;
                *((void *)a2 + 1) = v134 + 1;
                char v141 = *(unsigned char *)(v136 + v134);
                v139 |= (unint64_t)(v141 & 0x7F) << v137;
                if ((v141 & 0x80) == 0) {
                  goto LABEL_309;
                }
                v137 += 7;
                unint64_t v134 = v140;
                BOOL v101 = v138++ > 8;
              }
              while (!v101);
LABEL_252:
              uint64_t v139 = 0;
              goto LABEL_309;
            }
            char v188 = 0;
            unsigned int v189 = 0;
            uint64_t v139 = 0;
            if (v135 <= v134) {
              unint64_t v135 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v135 == v134)
              {
                uint64_t v139 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v190 = v134 + 1;
                char v191 = *(unsigned char *)(v136 + v134);
                *((void *)a2 + 1) = v190;
                v139 |= (unint64_t)(v191 & 0x7F) << v188;
                if (v191 < 0)
                {
                  v188 += 7;
                  unint64_t v134 = v190;
                  BOOL v101 = v189++ > 8;
                  if (v101) {
                    goto LABEL_252;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v139 = 0;
                }
              }
              break;
            }
LABEL_309:
            *((void *)this + 8) = v139;
            break;
          case 208:
            *((_DWORD *)this + 38) |= 0x20000u;
            unint64_t v142 = *((void *)a2 + 1);
            if (v142 >= *((void *)a2 + 2))
            {
              BOOL v145 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v143 = v142 + 1;
              int v144 = *(unsigned __int8 *)(*(void *)a2 + v142);
              *((void *)a2 + 1) = v143;
              BOOL v145 = v144 != 0;
            }
            *((unsigned char *)this + 149) = v145;
            break;
          default:
            if (v24 == 101)
            {
              *((_DWORD *)this + 38) |= 0x10000u;
              unint64_t v146 = *((void *)a2 + 1);
              if (v146 >= *((void *)a2 + 2))
              {
                BOOL v149 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v147 = v146 + 1;
                int v148 = *(unsigned __int8 *)(*(void *)a2 + v146);
                *((void *)a2 + 1) = v147;
                BOOL v149 = v148 != 0;
              }
              *((unsigned char *)this + 148) = v149;
            }
            else if (v24 == 102)
            {
              *((_DWORD *)this + 38) |= 0x40u;
              unint64_t v34 = *((void *)a2 + 1);
              unint64_t v35 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v34 > 0xFFFFFFFFFFFFFFF5 || v34 + 10 > v35)
              {
                char v154 = 0;
                unsigned int v155 = 0;
                uint64_t v39 = 0;
                if (v35 <= v34) {
                  unint64_t v35 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v35 == v34)
                  {
                    uint64_t v39 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_288;
                  }
                  unint64_t v156 = v34 + 1;
                  char v157 = *(unsigned char *)(v36 + v34);
                  *((void *)a2 + 1) = v156;
                  v39 |= (unint64_t)(v157 & 0x7F) << v154;
                  if ((v157 & 0x80) == 0) {
                    break;
                  }
                  v154 += 7;
                  unint64_t v34 = v156;
                  BOOL v101 = v155++ > 8;
                  if (v101)
                  {
LABEL_199:
                    uint64_t v39 = 0;
                    goto LABEL_288;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v39 = 0;
                }
              }
              else
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v39 = 0;
                while (1)
                {
                  unint64_t v40 = v34 + 1;
                  *((void *)a2 + 1) = v34 + 1;
                  char v41 = *(unsigned char *)(v36 + v34);
                  v39 |= (unint64_t)(v41 & 0x7F) << v37;
                  if ((v41 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  unint64_t v34 = v40;
                  BOOL v101 = v38++ > 8;
                  if (v101) {
                    goto LABEL_199;
                  }
                }
              }
LABEL_288:
              *((void *)this + 13) = v39;
            }
            else
            {
LABEL_184:
              if ((PB::Reader::skip(a2, v24, v23, 0) & 1) == 0) {
                return 0;
              }
            }
            break;
        }
      }
      else
      {
        switch((int)v24)
        {
          case 1:
            *((_DWORD *)this + 38) |= 0x80u;
            unint64_t v25 = *((void *)a2 + 1);
            if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v25);
            goto LABEL_344;
          case 2:
            *((_DWORD *)this + 38) |= 8u;
            unint64_t v42 = *((void *)a2 + 1);
            unint64_t v43 = *((void *)a2 + 2);
            uint64_t v44 = *(void *)a2;
            if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
            {
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v48 = v42 + 1;
                *((void *)a2 + 1) = v42 + 1;
                char v49 = *(unsigned char *)(v44 + v42);
                v47 |= (unint64_t)(v49 & 0x7F) << v45;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_291;
                }
                v45 += 7;
                unint64_t v42 = v48;
                BOOL v101 = v46++ > 8;
              }
              while (!v101);
LABEL_206:
              uint64_t v47 = 0;
              goto LABEL_291;
            }
            char v158 = 0;
            unsigned int v159 = 0;
            uint64_t v47 = 0;
            if (v43 <= v42) {
              unint64_t v43 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v43 == v42)
              {
                uint64_t v47 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v160 = v42 + 1;
                char v161 = *(unsigned char *)(v44 + v42);
                *((void *)a2 + 1) = v160;
                v47 |= (unint64_t)(v161 & 0x7F) << v158;
                if (v161 < 0)
                {
                  v158 += 7;
                  unint64_t v42 = v160;
                  BOOL v101 = v159++ > 8;
                  if (v101) {
                    goto LABEL_206;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v47 = 0;
                }
              }
              break;
            }
LABEL_291:
            *((void *)this + 10) = v47;
            goto LABEL_349;
          case 3:
            *((_DWORD *)this + 38) |= 0x800u;
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            uint64_t v52 = *(void *)a2;
            if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
            {
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v56 = v50 + 1;
                *((void *)a2 + 1) = v50 + 1;
                char v57 = *(unsigned char *)(v52 + v50);
                v55 |= (unint64_t)(v57 & 0x7F) << v53;
                if ((v57 & 0x80) == 0) {
                  goto LABEL_294;
                }
                v53 += 7;
                unint64_t v50 = v56;
                BOOL v101 = v54++ > 8;
              }
              while (!v101);
LABEL_213:
              LODWORD(v55) = 0;
              goto LABEL_294;
            }
            char v162 = 0;
            unsigned int v163 = 0;
            uint64_t v55 = 0;
            if (v51 <= v50) {
              unint64_t v51 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v51 == v50)
              {
                LODWORD(v55) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v164 = v50 + 1;
                char v165 = *(unsigned char *)(v52 + v50);
                *((void *)a2 + 1) = v164;
                v55 |= (unint64_t)(v165 & 0x7F) << v162;
                if (v165 < 0)
                {
                  v162 += 7;
                  unint64_t v50 = v164;
                  BOOL v101 = v163++ > 8;
                  if (v101) {
                    goto LABEL_213;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
              }
              break;
            }
LABEL_294:
            *((_DWORD *)this + 32) = v55;
            goto LABEL_349;
          case 4:
            *((_DWORD *)this + 38) |= 0x10u;
            unint64_t v58 = *((void *)a2 + 1);
            unint64_t v59 = *((void *)a2 + 2);
            uint64_t v60 = *(void *)a2;
            if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
            {
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v64 = v58 + 1;
                *((void *)a2 + 1) = v58 + 1;
                char v65 = *(unsigned char *)(v60 + v58);
                v63 |= (unint64_t)(v65 & 0x7F) << v61;
                if ((v65 & 0x80) == 0) {
                  goto LABEL_297;
                }
                v61 += 7;
                unint64_t v58 = v64;
                BOOL v101 = v62++ > 8;
              }
              while (!v101);
LABEL_220:
              uint64_t v63 = 0;
              goto LABEL_297;
            }
            char v166 = 0;
            unsigned int v167 = 0;
            uint64_t v63 = 0;
            if (v59 <= v58) {
              unint64_t v59 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v59 == v58)
              {
                uint64_t v63 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v168 = v58 + 1;
                char v169 = *(unsigned char *)(v60 + v58);
                *((void *)a2 + 1) = v168;
                v63 |= (unint64_t)(v169 & 0x7F) << v166;
                if (v169 < 0)
                {
                  v166 += 7;
                  unint64_t v58 = v168;
                  BOOL v101 = v167++ > 8;
                  if (v101) {
                    goto LABEL_220;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v63 = 0;
                }
              }
              break;
            }
LABEL_297:
            *((void *)this + 11) = v63;
            goto LABEL_349;
          case 5:
            *((_DWORD *)this + 38) |= 0x4000u;
            unint64_t v66 = *((void *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v66);
            goto LABEL_344;
          case 6:
            *((_DWORD *)this + 38) |= 0x8000u;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v67);
            goto LABEL_344;
          case 7:
            *((_DWORD *)this + 38) |= 0x200u;
            unint64_t v68 = *((void *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v68);
            goto LABEL_344;
          case 8:
            *((_DWORD *)this + 38) |= 0x400u;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v69);
            goto LABEL_344;
          case 9:
            *((_DWORD *)this + 38) |= 0x20u;
            unint64_t v70 = *((void *)a2 + 1);
            unint64_t v71 = *((void *)a2 + 2);
            uint64_t v72 = *(void *)a2;
            if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
            {
              char v73 = 0;
              unsigned int v74 = 0;
              uint64_t v75 = 0;
              do
              {
                unint64_t v76 = v70 + 1;
                *((void *)a2 + 1) = v70 + 1;
                char v77 = *(unsigned char *)(v72 + v70);
                v75 |= (unint64_t)(v77 & 0x7F) << v73;
                if ((v77 & 0x80) == 0) {
                  goto LABEL_300;
                }
                v73 += 7;
                unint64_t v70 = v76;
                BOOL v101 = v74++ > 8;
              }
              while (!v101);
LABEL_227:
              uint64_t v75 = 0;
              goto LABEL_300;
            }
            char v170 = 0;
            unsigned int v171 = 0;
            uint64_t v75 = 0;
            if (v71 <= v70) {
              unint64_t v71 = *((void *)a2 + 1);
            }
            break;
          case 10:
            *((_DWORD *)this + 38) |= 0x100u;
            unint64_t v78 = *((void *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
              goto LABEL_342;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v78);
            goto LABEL_344;
          default:
            goto LABEL_184;
        }
        while (1)
        {
          if (v71 == v70)
          {
            uint64_t v75 = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_300;
          }
          unint64_t v172 = v70 + 1;
          char v173 = *(unsigned char *)(v72 + v70);
          *((void *)a2 + 1) = v172;
          v75 |= (unint64_t)(v173 & 0x7F) << v170;
          if ((v173 & 0x80) == 0) {
            break;
          }
          v170 += 7;
          unint64_t v70 = v172;
          BOOL v101 = v171++ > 8;
          if (v101) {
            goto LABEL_227;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          uint64_t v75 = 0;
        }
LABEL_300:
        *((void *)this + 12) = v75;
      }
LABEL_349:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v18 = 0;
    unsigned int v19 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v20 = v2 + 1;
      char v21 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_21;
      }
      v18 += 7;
      unint64_t v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPeakDetectorMapResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 152);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 112), 1u);
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 80), 2u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 128), 3u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 88), 4u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 5u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 6u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 7u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 8u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 96), 9u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0xAu);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 148), 0x65u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 104), 0x66u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_40:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 0xCAu);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0xC9u);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0) {
    goto LABEL_40;
  }
LABEL_15:
  if ((v4 & 0x2000) != 0) {
LABEL_16:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xCBu);
LABEL_17:
  uint64_t v5 = *(unint64_t **)(v3 + 8);
  uint64_t v6 = *(unint64_t **)(v3 + 16);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 0xCCu);
  }
  uint64_t v8 = *(float **)(v3 + 32);
  uint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0xCDu);
  }
  int v11 = *(_DWORD *)(v3 + 152);
  if ((v11 & 1) == 0)
  {
    if ((v11 & 2) == 0) {
      goto LABEL_25;
    }
LABEL_43:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0xCFu);
    if ((*(_DWORD *)(v3 + 152) & 0x20000) == 0) {
      return this;
    }
    goto LABEL_44;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0xCEu);
  int v11 = *(_DWORD *)(v3 + 152);
  if ((v11 & 2) != 0) {
    goto LABEL_43;
  }
LABEL_25:
  if ((v11 & 0x20000) == 0) {
    return this;
  }
LABEL_44:
  char v12 = *(unsigned char *)(v3 + 149);

  return PB::Writer::write(a2, v12, 0xD0u);
}

uint64_t CMMsl::KappaPeakDetectorMapResult::hash_value(CMMsl::KappaPeakDetectorMapResult *this)
{
  int v2 = *((_DWORD *)this + 38);
  if ((v2 & 0x80) != 0)
  {
    float v20 = *((float *)this + 28);
    uint64_t v21 = LODWORD(v20);
    if (v20 == 0.0) {
      uint64_t v21 = 0;
    }
    uint64_t v35 = v21;
    if ((v2 & 8) != 0)
    {
LABEL_3:
      uint64_t v34 = *((void *)this + 10);
      if ((v2 & 0x800) != 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v35 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v34 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_4:
    uint64_t v33 = *((unsigned int *)this + 32);
    if ((v2 & 0x10) != 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v33 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    uint64_t v32 = *((void *)this + 11);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_6;
    }
LABEL_37:
    uint64_t v31 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    uint64_t v30 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    uint64_t v29 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t v10 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_36:
  uint64_t v32 = 0;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  float v3 = *((float *)this + 35);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v31 = v4;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  float v5 = *((float *)this + 36);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v30 = v6;
  if ((v2 & 0x200) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  float v7 = *((float *)this + 30);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v29 = v8;
  if ((v2 & 0x400) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  float v9 = *((float *)this + 31);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = LODWORD(v9);
  }
  if ((v2 & 0x20) != 0)
  {
LABEL_19:
    uint64_t v11 = *((void *)this + 12);
    if ((v2 & 0x100) != 0) {
      goto LABEL_20;
    }
LABEL_42:
    uint64_t v13 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((v2 & 0x100) == 0) {
    goto LABEL_42;
  }
LABEL_20:
  float v12 = *((float *)this + 29);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = LODWORD(v12);
  }
  if ((v2 & 0x10000) != 0)
  {
LABEL_24:
    uint64_t v14 = *((unsigned __int8 *)this + 148);
    if ((v2 & 0x40) != 0) {
      goto LABEL_25;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v14 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_25:
    uint64_t v15 = *((void *)this + 13);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v15 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_26:
    uint64_t v16 = *((int *)this + 33);
    if ((v2 & 4) != 0) {
      goto LABEL_27;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v16 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_27:
    uint64_t v17 = *((void *)this + 9);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_28;
    }
LABEL_47:
    uint64_t v19 = 0;
    goto LABEL_48;
  }
LABEL_46:
  uint64_t v17 = 0;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_47;
  }
LABEL_28:
  float v18 = *((float *)this + 34);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
LABEL_48:
  uint64_t v22 = PBHashBytes();
  uint64_t v23 = PBHashBytes();
  int v24 = *((_DWORD *)this + 38);
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = 0;
    if ((v24 & 2) != 0) {
      goto LABEL_50;
    }
LABEL_53:
    uint64_t v26 = 0;
    if ((v24 & 0x20000) != 0) {
      goto LABEL_51;
    }
LABEL_54:
    uint64_t v27 = 0;
    return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
  }
  uint64_t v25 = *((void *)this + 7);
  if ((v24 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_50:
  uint64_t v26 = *((void *)this + 8);
  if ((v24 & 0x20000) == 0) {
    goto LABEL_54;
  }
LABEL_51:
  uint64_t v27 = *((unsigned __int8 *)this + 149);
  return v34 ^ v35 ^ v33 ^ v32 ^ v31 ^ v30 ^ v29 ^ v10 ^ v11 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v19 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27;
}

void CMMsl::KappaPulseDeltaV::~KappaPulseDeltaV(CMMsl::KappaPulseDeltaV *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this, const CMMsl::KappaPulseDeltaV *a2)
{
  *(void *)this = off_1003A6C50;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    int v3 = 64;
    *(_DWORD *)(this + 112) = 64;
    *(void *)(this + 56) = v4;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *(_DWORD *)(this + 112) = v3;
    *(void *)(this + 32) = v5;
    int v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_DWORD *)(this + 112) = v3;
    *(void *)(this + 8) = v6;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x80u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 64) = v7;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v8 = *((_DWORD *)a2 + 21);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 84) = v8;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v9 = *((_DWORD *)a2 + 23);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 92) = v9;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v10 = *((_DWORD *)a2 + 25);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 100) = v10;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v11 = *((_DWORD *)a2 + 19);
  v3 |= 0x400u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 76) = v11;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v12 = *((_DWORD *)a2 + 22);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 88) = v12;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v13 = *((_DWORD *)a2 + 24);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 96) = v13;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v14 = *((_DWORD *)a2 + 26);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 104) = v14;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v15 = *((_DWORD *)a2 + 20);
  v3 |= 0x800u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 80) = v15;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v16 = *((_DWORD *)a2 + 17);
  v3 |= 0x100u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 68) = v16;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_35:
  char v17 = *((unsigned char *)a2 + 108);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 112) = v3;
  *(unsigned char *)(this + 108) = v17;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v18 = *((_DWORD *)a2 + 18);
  v3 |= 0x200u;
  *(_DWORD *)(this + 112) = v3;
  *(_DWORD *)(this + 72) = v18;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v19 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 112) = v3;
  *(void *)(this + 16) = v19;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t v20 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 112) = v3;
  *(void *)(this + 48) = v20;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_40:
    uint64_t v22 = *((void *)a2 + 3);
    *(_DWORD *)(this + 112) = v3 | 4;
    *(void *)(this + 24) = v22;
    return this;
  }
LABEL_39:
  uint64_t v21 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 112) = v3;
  *(void *)(this + 40) = v21;
  if ((*((_DWORD *)a2 + 28) & 4) != 0) {
    goto LABEL_40;
  }
  return this;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *a1, const CMMsl::KappaPulseDeltaV *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaPulseDeltaV::KappaPulseDeltaV((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseDeltaV *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseDeltaV *a2, CMMsl::KappaPulseDeltaV *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  int v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  int v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  int v9 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v9;
  int v10 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v10;
  int v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  int v12 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12;
  int v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  int v14 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  int v15 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v15;
  float result = *((float *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v6) = *((unsigned char *)this + 108);
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  *((unsigned char *)a2 + 108) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  uint64_t v17 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v17;
  uint64_t v18 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  return result;
}

float CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6C50;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 68);
  *(float *)(a1 + 68) = result;
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaPulseDeltaV::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPulseDeltaV::KappaPulseDeltaV((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseDeltaV *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseDeltaV::formatText(CMMsl::KappaPulseDeltaV *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "accelMagnitude", *((float *)this + 16));
    int v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaVThisImpact", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "dimensions", *((void *)this + 1));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "epochCounter", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "jHG", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "jImpactStart", *((void *)this + 4));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "jLG", *((void *)this + 5));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "nextTimestamp", *((void *)this + 6));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "partOfHgPath", *((unsigned char *)this + 108));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "pointType", *((_DWORD *)this + 18));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "runningArclengthOverEpoch", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "runningArclengthThisImpact", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "runningDeltaVXOverEpoch", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "runningDeltaVXThisImpact", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "runningDeltaVYOverEpoch", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "runningDeltaVYThisImpact", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "runningDeltaVZOverEpoch", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "runningDeltaVZThisImpact", *((float *)this + 26));
  if ((*((_DWORD *)this + 28) & 0x40) != 0) {
LABEL_20:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 7));
LABEL_21:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseDeltaV::readFrom(CMMsl::KappaPulseDeltaV *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 28) |= 0x40u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v73 = v20++;
                  char v74 = *(unsigned char *)(v21 + v73);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_175;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_175:
                unint64_t v2 = v73 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_176;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_176:
              *((void *)this + 7) = v24;
              goto LABEL_212;
            case 2u:
              *((_DWORD *)this + 28) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_181;
                  }
                  unint64_t v77 = v27++;
                  char v78 = *(unsigned char *)(v28 + v77);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_180:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_180;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_181;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_181:
              *((void *)this + 4) = -(v31 & 1) ^ (v31 >> 1);
              goto LABEL_212;
            case 3u:
              *((_DWORD *)this + 28) |= 1u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_186;
                  }
                  unint64_t v81 = v33++;
                  char v82 = *(unsigned char *)(v34 + v81);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_185:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_185;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_186:
              *((void *)this + 1) = v37;
              goto LABEL_212;
            case 4u:
              *((_DWORD *)this + 28) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 5u:
              *((_DWORD *)this + 28) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 6u:
              *((_DWORD *)this + 28) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 7u:
              *((_DWORD *)this + 28) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 8u:
              *((_DWORD *)this + 28) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 9u:
              *((_DWORD *)this + 28) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 0xAu:
              *((_DWORD *)this + 28) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 0xBu:
              *((_DWORD *)this + 28) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 0xCu:
              *((_DWORD *)this + 28) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_171;
            case 0xDu:
              *((_DWORD *)this + 28) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_171:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_212;
            case 0xEu:
              *((_DWORD *)this + 28) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 108) = v40;
              goto LABEL_212;
            case 0xFu:
              *((_DWORD *)this + 28) |= 0x200u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_191;
                  }
                  unint64_t v85 = v41++;
                  char v86 = *(unsigned char *)(v42 + v85);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_190:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_190;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_191;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_191:
              *((_DWORD *)this + 18) = v45;
              goto LABEL_212;
            case 0x10u:
              *((_DWORD *)this + 28) |= 2u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_196;
                  }
                  unint64_t v89 = v47++;
                  char v90 = *(unsigned char *)(v48 + v89);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_195:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_195;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_196;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_196:
              *((void *)this + 2) = v51;
              goto LABEL_212;
            case 0x11u:
              *((_DWORD *)this + 28) |= 0x20u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_201;
                  }
                  unint64_t v93 = v53++;
                  char v94 = *(unsigned char *)(v54 + v93);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_200:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_200;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_201;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_201:
              *((void *)this + 6) = v57;
              goto LABEL_212;
            case 0x12u:
              *((_DWORD *)this + 28) |= 0x10u;
              unint64_t v59 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v60 = *(void *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    uint64_t v63 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_206;
                  }
                  unint64_t v97 = v59++;
                  char v98 = *(unsigned char *)(v60 + v97);
                  *((void *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    uint64_t v63 = 0;
LABEL_205:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v63 = 0;
                }
                goto LABEL_205;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)a2 + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              uint64_t v63 = 0;
LABEL_206:
              *((void *)this + 5) = v63;
              goto LABEL_212;
            case 0x13u:
              *((_DWORD *)this + 28) |= 4u;
              unint64_t v65 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v66 = *(void *)a2;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v69 = 0;
                if (v2 <= v65) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_211;
                  }
                  unint64_t v101 = v65++;
                  char v102 = *(unsigned char *)(v66 + v101);
                  *((void *)a2 + 1) = v65;
                  v69 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0;
LABEL_210:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v69 = 0;
                }
                goto LABEL_210;
              }
              char v67 = 0;
              unsigned int v68 = 0;
              uint64_t v69 = 0;
              do
              {
                unint64_t v2 = v65 + 1;
                *((void *)a2 + 1) = v65 + 1;
                char v70 = *(unsigned char *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v67 += 7;
                unint64_t v65 = v2;
                BOOL v14 = v68++ > 8;
              }
              while (!v14);
              uint64_t v69 = 0;
LABEL_211:
              *((void *)this + 3) = v69;
LABEL_212:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_212;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseDeltaV::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 112);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 56), 1u);
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeSInt(a2, *(void *)(v3 + 32), 2u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 3u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 5u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 6u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 7u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 8u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 9u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xAu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xBu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xCu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xDu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 108), 0xEu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xFu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x10u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x12u);
    if ((*(_DWORD *)(v3 + 112) & 4) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x11u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_39:
  unint64_t v5 = *(void *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 0x13u);
}

uint64_t CMMsl::KappaPulseDeltaV::hash_value(CMMsl::KappaPulseDeltaV *this)
{
  int v1 = *((_DWORD *)this + 28);
  if ((v1 & 0x40) != 0)
  {
    uint64_t v2 = *((void *)this + 7);
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 4);
      if (v1) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if (v1)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    if ((v1 & 0x80) != 0) {
      goto LABEL_5;
    }
LABEL_44:
    uint64_t v6 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_8;
    }
LABEL_45:
    uint64_t v8 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_11;
    }
LABEL_46:
    uint64_t v10 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_14;
    }
LABEL_47:
    uint64_t v12 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_17;
    }
LABEL_48:
    uint64_t v14 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_20;
    }
LABEL_49:
    uint64_t v16 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_23;
    }
LABEL_50:
    uint64_t v18 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_26;
    }
LABEL_51:
    uint64_t v20 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_52:
    uint64_t v22 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_32;
    }
LABEL_53:
    uint64_t v24 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_54;
  }
LABEL_43:
  uint64_t v4 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_44;
  }
LABEL_5:
  float v5 = *((float *)this + 16);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_45;
  }
LABEL_8:
  float v7 = *((float *)this + 21);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_46;
  }
LABEL_11:
  float v9 = *((float *)this + 23);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_47;
  }
LABEL_14:
  float v11 = *((float *)this + 25);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_48;
  }
LABEL_17:
  float v13 = *((float *)this + 19);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_49;
  }
LABEL_20:
  float v15 = *((float *)this + 22);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_50;
  }
LABEL_23:
  float v17 = *((float *)this + 24);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_51;
  }
LABEL_26:
  float v19 = *((float *)this + 26);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_52;
  }
LABEL_29:
  float v21 = *((float *)this + 20);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_53;
  }
LABEL_32:
  float v23 = *((float *)this + 17);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x40000) != 0)
  {
LABEL_35:
    uint64_t v25 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x200) != 0) {
      goto LABEL_36;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v25 = 0;
  if ((v1 & 0x200) != 0)
  {
LABEL_36:
    uint64_t v26 = *((int *)this + 18);
    if ((v1 & 2) != 0) {
      goto LABEL_37;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v26 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_37:
    uint64_t v27 = *((void *)this + 2);
    if ((v1 & 0x20) != 0) {
      goto LABEL_38;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v27 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_38:
    uint64_t v28 = *((void *)this + 6);
    if ((v1 & 0x10) != 0) {
      goto LABEL_39;
    }
LABEL_58:
    uint64_t v29 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_40;
    }
LABEL_59:
    uint64_t v30 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_57:
  uint64_t v28 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_58;
  }
LABEL_39:
  uint64_t v29 = *((void *)this + 5);
  if ((v1 & 4) == 0) {
    goto LABEL_59;
  }
LABEL_40:
  uint64_t v30 = *((void *)this + 3);
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

void CMMsl::KappaPulseInertialAccel::~KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(CMMsl::KappaPulseInertialAccel *this, const CMMsl::KappaPulseInertialAccel *a2)
{
  *(void *)this = off_1003A6C88;
  *((_DWORD *)this + 20) = 0;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    __int16 v3 = 256;
    *((_WORD *)this + 40) = 256;
    *((void *)this + 9) = v4;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((_WORD *)this + 40) = v3;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v6 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 40) = v3;
  *((void *)this + 1) = v6;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_20:
    double result = *((double *)a2 + 5);
    *((_WORD *)this + 40) = v3 | 0x10;
    *((double *)this + 5) = result;
    return result;
  }
LABEL_19:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 40) = v3;
  *((double *)this + 8) = result;
  if ((*((_WORD *)a2 + 40) & 0x10) != 0) {
    goto LABEL_20;
  }
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, const CMMsl::KappaPulseInertialAccel *a2)
{
  if ((const CMMsl::KappaPulseInertialAccel *)a1 != a2)
  {
    CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel((CMMsl::KappaPulseInertialAccel *)v12, a2);
    long long v3 = v16;
    long long v4 = *(_OWORD *)(a1 + 32);
    long long v16 = *(_OWORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v17;
    uint64_t v17 = v5;
    long long v6 = v15;
    long long v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v3;
    int v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v19;
    int v19 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v18;
    uint64_t v18 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v13;
    uint64_t v13 = v10;
    long long v14 = v7;
    long long v15 = v4;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialAccel *a2, CMMsl::KappaPulseInertialAccel *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

double CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6C88;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 40);
  *(double *)(a1 + 40) = result;
  return result;
}

uint64_t CMMsl::KappaPulseInertialAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel((uint64_t)v12, a2);
    long long v3 = v16;
    long long v4 = *(_OWORD *)(a1 + 32);
    long long v16 = *(_OWORD *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v17;
    uint64_t v17 = v5;
    long long v6 = v15;
    long long v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v14;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v3;
    int v8 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v19;
    int v19 = v8;
    uint64_t v9 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v18;
    uint64_t v18 = v9;
    uint64_t v10 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v13;
    uint64_t v13 = v10;
    long long v14 = v7;
    long long v15 = v4;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseInertialAccel::formatText(CMMsl::KappaPulseInertialAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "epochCounter", *((void *)this + 1));
    __int16 v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 8));
  if ((*((_WORD *)this + 40) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 9));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialAccel::readFrom(CMMsl::KappaPulseInertialAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 40) |= 0x100u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_78;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_78:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_79;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_79:
              *((void *)this + 9) = v24;
              goto LABEL_85;
            case 2u:
              *((_WORD *)this + 40) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 3u:
              *((_WORD *)this + 40) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 4u:
              *((_WORD *)this + 40) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 5u:
              *((_WORD *)this + 40) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_83:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_83;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_84:
              *((void *)this + 1) = v31;
LABEL_85:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((_WORD *)this + 40) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 7u:
              *((_WORD *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 8u:
              *((_WORD *)this + 40) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_58;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_74;
            case 9u:
              *((_WORD *)this + 40) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
LABEL_74:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_58:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_85;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_85;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 80);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
    if ((*(_WORD *)(v3 + 80) & 0x10) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_19:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v5, 9u);
}

uint64_t CMMsl::KappaPulseInertialAccel::hash_value(CMMsl::KappaPulseInertialAccel *this)
{
  __int16 v1 = *((_WORD *)this + 40);
  if ((v1 & 0x100) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_26:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    double v4 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
  uint64_t v2 = *((void *)this + 9);
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  double v5 = *((double *)this + 4);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if (v1)
  {
LABEL_12:
    uint64_t v6 = *((void *)this + 1);
    if ((v1 & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_30:
    double v7 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    double v8 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v6 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_30;
  }
LABEL_13:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_19:
    double v9 = *((double *)this + 8);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_22;
    }
LABEL_33:
    double v10 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
  }
LABEL_32:
  double v9 = 0.0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_33;
  }
LABEL_22:
  double v10 = *((double *)this + 5);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
}

void CMMsl::KappaPulseInertialHgAccel::~KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(CMMsl::KappaPulseInertialHgAccel *this, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  *(void *)this = off_1003A6CC0;
  *((_DWORD *)this + 26) = 0;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *((void *)a2 + 12);
    __int16 v3 = 2048;
    *((_WORD *)this + 52) = 2048;
    *((void *)this + 12) = v4;
    __int16 v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_WORD *)this + 52) = v3;
    *((double *)this + 6) = result;
    __int16 v2 = *((_WORD *)a2 + 52);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v6 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 52) = v3;
  *((void *)this + 4) = v6;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 52);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_26:
    double result = *((double *)a2 + 3);
    *((_WORD *)this + 52) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_25:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_WORD *)this + 52) = v3;
  *((double *)this + 2) = result;
  if ((*((_WORD *)a2 + 52) & 4) != 0) {
    goto LABEL_26;
  }
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *a1, const CMMsl::KappaPulseInertialHgAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel((CMMsl::KappaPulseInertialHgAccel *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseInertialHgAccel *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KappaPulseInertialHgAccel *a2, CMMsl::KappaPulseInertialHgAccel *a3)
{
  int v3 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v10;
  uint64_t v11 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v14;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6CC0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseInertialHgAccel::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseInertialHgAccel *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::formatText(CMMsl::KappaPulseInertialHgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 52);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bodyAccelX", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "bodyAccelY", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "bodyAccelZ", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "epochCounter", *((void *)this + 4));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "inertialAccelX", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "inertialAccelY", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "inertialAccelZ", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionW", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "quaternionX", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionY", *((double *)this + 10));
  __int16 v5 = *((_WORD *)this + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionZ", *((double *)this + 11));
  if ((*((_WORD *)this + 52) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 12));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseInertialHgAccel::readFrom(CMMsl::KappaPulseInertialHgAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 52) |= 0x800u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 12) = v24;
              goto LABEL_94;
            case 2u:
              *((_WORD *)this + 52) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 3u:
              *((_WORD *)this + 52) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 4u:
              *((_WORD *)this + 52) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 5u:
              *((_WORD *)this + 52) |= 8u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_92:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_93:
              *((void *)this + 4) = v31;
LABEL_94:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((_WORD *)this + 52) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 7u:
              *((_WORD *)this + 52) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 8u:
              *((_WORD *)this + 52) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 9u:
              *((_WORD *)this + 52) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0xAu:
              *((_WORD *)this + 52) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0xBu:
              *((_WORD *)this + 52) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_67;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0xCu:
              *((_WORD *)this + 52) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_83:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_67:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_94;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_94;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 104);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 96), 1u);
    __int16 v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 6u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 7u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 8u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 9u);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
    if ((*(_WORD *)(v3 + 104) & 4) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_25:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 0xCu);
}

uint64_t CMMsl::KappaPulseInertialHgAccel::hash_value(CMMsl::KappaPulseInertialHgAccel *this)
{
  __int16 v1 = *((_WORD *)this + 52);
  if ((v1 & 0x800) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_35:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_36:
    double v4 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_37:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
  uint64_t v2 = *((void *)this + 12);
  if ((v1 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_3:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_36;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_37;
  }
LABEL_9:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_12:
    uint64_t v6 = *((void *)this + 4);
    if ((*((_WORD *)this + 52) & 0x100) != 0) {
      goto LABEL_13;
    }
LABEL_39:
    double v7 = 0.0;
    if ((*((_WORD *)this + 52) & 0x200) != 0) {
      goto LABEL_16;
    }
LABEL_40:
    double v8 = 0.0;
    if ((*((_WORD *)this + 52) & 0x400) != 0) {
      goto LABEL_19;
    }
LABEL_41:
    double v9 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_42:
    double v10 = 0.0;
    if (v1) {
      goto LABEL_25;
    }
LABEL_43:
    double v11 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
LABEL_38:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 52) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_13:
  double v7 = *((double *)this + 9);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((_WORD *)this + 52) & 0x200) == 0) {
    goto LABEL_40;
  }
LABEL_16:
  double v8 = *((double *)this + 10);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 52) & 0x400) == 0) {
    goto LABEL_41;
  }
LABEL_19:
  double v9 = *((double *)this + 11);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_22:
  double v10 = *((double *)this + 8);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_25:
  double v11 = *((double *)this + 1);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 2) != 0)
  {
LABEL_28:
    double v12 = *((double *)this + 2);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_31;
    }
LABEL_45:
    double v13 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13;
  }
LABEL_44:
  double v12 = 0.0;
  if ((v1 & 4) == 0) {
    goto LABEL_45;
  }
LABEL_31:
  double v13 = *((double *)this + 3);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ *(void *)&v13;
}

void CMMsl::KappaPulseResult::~KappaPulseResult(CMMsl::KappaPulseResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaPulseResult::KappaPulseResult(CMMsl::KappaPulseResult *this, const CMMsl::KappaPulseResult *a2)
{
  *(void *)this = off_1003A6CF8;
  uint64_t v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(void *)((char *)this + 316) = 0;
  double v3 = (uint64_t *)((char *)a2 + 316);
  char v4 = *((unsigned char *)a2 + 324);
  if ((v4 & 8) != 0)
  {
    uint64_t v5 = 0;
    char v8 = *((unsigned char *)a2 + 312);
    *uint64_t v2 = 0;
    char v6 = 8;
    *((unsigned char *)this + 324) = 8;
    *((unsigned char *)this + 312) = v8;
    uint64_t v7 = *v3;
    char v4 = *((unsigned char *)a2 + 324);
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = *v3;
  if ((*((unsigned char *)a2 + 324) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 76);
    v6 |= 2u;
    *uint64_t v2 = 0;
    *((unsigned char *)this + 324) = v6;
    *((float *)this + 76) = result;
    uint64_t v7 = *v3;
    char v4 = *((unsigned char *)a2 + 324);
  }
LABEL_6:
  if ((v4 & 4) != 0)
  {
    float result = *((float *)a2 + 77);
    v6 |= 4u;
    *uint64_t v2 = 0;
    *((unsigned char *)this + 324) = v6;
    *((float *)this + 77) = result;
    uint64_t v7 = *v3;
    char v4 = *((unsigned char *)a2 + 324);
    if ((*v3 & 0x20) == 0)
    {
LABEL_8:
      if ((v7 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_75;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v10 = *((void *)a2 + 6);
  uint64_t v5 = 32;
  *uint64_t v2 = 32;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 6) = v10;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x40) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v11 = *((void *)a2 + 7);
  v5 |= 0x40uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 7) = v11;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v12 = *((void *)a2 + 1);
  v5 |= 1uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 1) = v12;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_11:
    if ((v7 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }
LABEL_77:
  float result = *((float *)a2 + 26);
  v5 |= 0x8000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 26) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x80) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v13 = *((void *)a2 + 8);
  v5 |= 0x80uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 8) = v13;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v14 = *((void *)a2 + 9);
  v5 |= 0x100uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 9) = v14;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_14:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }
LABEL_80:
  float result = *((float *)a2 + 28);
  v5 |= 0x20000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 28) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_15:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }
LABEL_81:
  float result = *((float *)a2 + 27);
  v5 |= 0x10000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 27) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v7 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }
LABEL_82:
  float result = *((float *)a2 + 36);
  v5 |= 0x2000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 36) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
LABEL_83:
  float result = *((float *)a2 + 20);
  v5 |= 0x200uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 20) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x400) == 0)
  {
LABEL_18:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_84:
  float result = *((float *)a2 + 21);
  v5 |= 0x400uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 21) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_19:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_86;
  }
LABEL_85:
  float result = *((float *)a2 + 34);
  v5 |= 0x800000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 34) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_20:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_86:
  float result = *((float *)a2 + 25);
  v5 |= 0x4000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 25) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_21:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  float result = *((float *)a2 + 33);
  v5 |= 0x400000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 33) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_22:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  float result = *((float *)a2 + 24);
  v5 |= 0x2000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 24) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  float result = *((float *)a2 + 38);
  v5 |= 0x8000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 38) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_24:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  float result = *((float *)a2 + 31);
  v5 |= 0x100000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 31) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_25:
    if ((v7 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 23);
  v5 |= 0x1000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 23) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *((float *)a2 + 30);
  v5 |= 0x80000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 30) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_94;
  }
LABEL_93:
  float result = *((float *)a2 + 22);
  v5 |= 0x800uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 22) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x40000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }
LABEL_94:
  float result = *((float *)a2 + 37);
  v5 |= 0x4000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 37) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x20000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }
LABEL_95:
  float result = *((float *)a2 + 65);
  v5 |= 0x40000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 65) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }
LABEL_96:
  float result = *((float *)a2 + 64);
  v5 |= 0x20000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 64) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x800000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *((float *)a2 + 73);
  v5 |= 0x4000000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 73) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *((float *)a2 + 58);
  v5 |= 0x800000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 58) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }
LABEL_99:
  float result = *((float *)a2 + 59);
  v5 |= 0x1000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 59) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x10000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }
LABEL_100:
  float result = *((float *)a2 + 71);
  v5 |= 0x1000000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 71) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v7 & 0x800000000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }
LABEL_101:
  float result = *((float *)a2 + 63);
  v5 |= 0x10000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 63) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x8000000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }
LABEL_102:
  float result = *((float *)a2 + 70);
  v5 |= 0x800000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 70) = result;
  uint64_t v7 = *v3;
  char v4 = *((unsigned char *)a2 + 324);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v4 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_104;
  }
LABEL_103:
  float result = *((float *)a2 + 62);
  v5 |= 0x8000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 62) = result;
  uint64_t v7 = *v3;
  if ((*((unsigned char *)a2 + 324) & 1) == 0)
  {
LABEL_38:
    if ((v7 & 0x200000000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }
LABEL_104:
  float result = *((float *)a2 + 75);
  v6 |= 1u;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 75) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x4000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
LABEL_105:
  float result = *((float *)a2 + 68);
  v5 |= 0x200000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 68) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x100000000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }
LABEL_106:
  float result = *((float *)a2 + 61);
  v5 |= 0x4000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 61) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }
LABEL_107:
  float result = *((float *)a2 + 67);
  v5 |= 0x100000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 67) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }
LABEL_108:
  float result = *((float *)a2 + 60);
  v5 |= 0x2000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 60) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_110;
  }
LABEL_109:
  float result = *((float *)a2 + 74);
  v5 |= 0x8000000000000000;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 74) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }
LABEL_110:
  float result = *((float *)a2 + 46);
  v5 |= 0x800000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 46) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v7 & 0x80000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }
LABEL_111:
  float result = *((float *)a2 + 45);
  v5 |= 0x400000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 45) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_113;
  }
LABEL_112:
  float result = *((float *)a2 + 54);
  v5 |= 0x80000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 54) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }
LABEL_113:
  float result = *((float *)a2 + 39);
  v5 |= 0x10000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 39) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v7 & 0x20000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_114:
  float result = *((float *)a2 + 40);
  v5 |= 0x20000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 40) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v7 & 0x200000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_116;
  }
LABEL_115:
  float result = *((float *)a2 + 52);
  v5 |= 0x20000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 52) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x10000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }
LABEL_116:
  float result = *((float *)a2 + 44);
  v5 |= 0x200000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 44) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_118;
  }
LABEL_117:
  float result = *((float *)a2 + 51);
  v5 |= 0x10000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 51) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x200000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_119;
  }
LABEL_118:
  float result = *((float *)a2 + 43);
  v5 |= (unint64_t)&_mh_execute_header;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 43) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x4000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }
LABEL_119:
  float result = *((float *)a2 + 56);
  v5 |= 0x200000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 56) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }
LABEL_120:
  float result = *((float *)a2 + 49);
  v5 |= 0x4000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 49) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_122;
  }
LABEL_121:
  float result = *((float *)a2 + 42);
  v5 |= 0x80000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 42) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }
LABEL_122:
  float result = *((float *)a2 + 48);
  v5 |= 0x2000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 48) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_124;
  }
LABEL_123:
  float result = *((float *)a2 + 41);
  v5 |= 0x40000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 41) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v7 & 8) == 0) {
      goto LABEL_59;
    }
    goto LABEL_125;
  }
LABEL_124:
  float result = *((float *)a2 + 55);
  v5 |= 0x100000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 55) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_59:
    if ((v7 & 0x10) == 0) {
      goto LABEL_60;
    }
    goto LABEL_126;
  }
LABEL_125:
  uint64_t v15 = *((void *)a2 + 4);
  v5 |= 8uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 4) = v15;
  uint64_t v7 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_60:
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_127;
  }
LABEL_126:
  uint64_t v16 = *((void *)a2 + 5);
  v5 |= 0x10uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 5) = v16;
  uint64_t v7 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x2000000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_128;
  }
LABEL_127:
  float result = *((float *)a2 + 35);
  v5 |= 0x1000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 35) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x40000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_129;
  }
LABEL_128:
  float result = *((float *)a2 + 72);
  v5 |= 0x2000000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 72) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_130;
  }
LABEL_129:
  float result = *((float *)a2 + 53);
  v5 |= 0x40000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 53) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_64:
    if ((v7 & 0x80000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_131;
  }
LABEL_130:
  float result = *((float *)a2 + 29);
  v5 |= 0x40000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 29) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x1000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_132;
  }
LABEL_131:
  float result = *((float *)a2 + 66);
  v5 |= 0x80000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 66) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_133;
  }
LABEL_132:
  float result = *((float *)a2 + 47);
  v5 |= 0x1000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 47) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_67:
    if ((v7 & 0x400000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_134;
  }
LABEL_133:
  float result = *((float *)a2 + 32);
  v5 |= 0x200000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 32) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x8000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_135;
  }
LABEL_134:
  float result = *((float *)a2 + 69);
  v5 |= 0x400000000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 69) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v7 & 2) == 0) {
      goto LABEL_70;
    }
    goto LABEL_136;
  }
LABEL_135:
  float result = *((float *)a2 + 50);
  v5 |= 0x8000000000uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((float *)this + 50) = result;
  uint64_t v7 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_70:
    if ((v7 & 4) == 0) {
      goto LABEL_71;
    }
    goto LABEL_137;
  }
LABEL_136:
  uint64_t v17 = *((void *)a2 + 2);
  v5 |= 2uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 2) = v17;
  uint64_t v7 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0) {
      return result;
    }
LABEL_138:
    float result = *((float *)a2 + 57);
    *uint64_t v2 = v5 | 0x400000000000;
    *((unsigned char *)this + 324) = v6;
    *((float *)this + 57) = result;
    return result;
  }
LABEL_137:
  uint64_t v18 = *((void *)a2 + 3);
  v5 |= 4uLL;
  *uint64_t v2 = v5;
  *((unsigned char *)this + 324) = v6;
  *((void *)this + 3) = v18;
  if ((*v3 & 0x400000000000) != 0) {
    goto LABEL_138;
  }
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, const CMMsl::KappaPulseResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((CMMsl::KappaPulseResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaPulseResult *a2, CMMsl::KappaPulseResult *a3)
{
  int v3 = *((_DWORD *)this + 81);
  uint64_t v4 = *(void *)((char *)this + 316);
  int v5 = *((_DWORD *)a2 + 81);
  *(void *)((char *)this + 316) = *(void *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(void *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  char v6 = *((unsigned char *)this + 312);
  *((unsigned char *)this + 312) = *((unsigned char *)a2 + 312);
  *((unsigned char *)a2 + 312) = v6;
  int v7 = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v7;
  int v8 = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  int v12 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  int v15 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v15;
  int v16 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v16;
  int v17 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v17;
  int v18 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  int v19 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v19;
  int v20 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v20;
  int v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  int v22 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v22;
  int v23 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v23;
  int v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  int v25 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v25;
  int v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  int v27 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v27;
  int v28 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v28;
  int v29 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v29;
  int v30 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v30;
  int v31 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v31;
  int v32 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v32;
  int v33 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v33;
  int v34 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v34;
  int v35 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v35;
  int v36 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v36;
  int v37 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v37;
  int v38 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v38;
  int v39 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v39;
  int v40 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v40;
  int v41 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v41;
  int v42 = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v42;
  int v43 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v43;
  int v44 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v44;
  int v45 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v45;
  int v46 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v46;
  int v47 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v47;
  int v48 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v48;
  int v49 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v49;
  int v50 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v50;
  int v51 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v51;
  int v52 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v52;
  int v53 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v53;
  int v54 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v54;
  int v55 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v55;
  int v56 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v56;
  int v57 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v57;
  int v58 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v58;
  int v59 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v59;
  uint64_t v60 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v60;
  uint64_t v61 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v61;
  int v62 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v62;
  int v63 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v63;
  int v64 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v64;
  int v65 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v65;
  int v66 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v66;
  int v67 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v67;
  int v68 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v68;
  int v69 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v69;
  int v70 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v70;
  uint64_t v71 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v71;
  uint64_t v72 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v72;
  float result = *((float *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((float *)a2 + 57) = result;
  return result;
}

float CMMsl::KappaPulseResult::KappaPulseResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6CF8;
  uint64_t v2 = *(void *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(void *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(void *)(a2 + 316) = 0;
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 228);
  *(float *)(a1 + 228) = result;
  return result;
}

CMMsl *CMMsl::KappaPulseResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaPulseResult::KappaPulseResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaPulseResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaPulseResult::formatText(CMMsl::KappaPulseResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)((char *)this + 316);
  uint64_t v6 = *(void *)((char *)this + 316);
  if ((v6 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYBiggestImpact", *((float *)this + 20));
    uint64_t v6 = *v5;
    char v7 = *((unsigned char *)this + 324);
    if ((*v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v7 = *((unsigned char *)this + 324);
  if ((v6 & 0x400) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "arclengthXYOverEpoch", *((float *)this + 21));
    uint64_t v6 = *v5;
    char v7 = *((unsigned char *)this + 324);
  }
LABEL_6:
  if ((v6 & 0x800) != 0)
  {
    PB::TextFormatter::format(a2, "arclengthXYZBiggestImpact", *((float *)this + 22));
    uint64_t v6 = *v5;
    char v7 = *((unsigned char *)this + 324);
    if ((*v5 & 0x1000) == 0)
    {
LABEL_8:
      if ((v6 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_78;
    }
  }
  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "arclengthXYZOverEpoch", *((float *)this + 23));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "arclengthZBiggestImpact", *((float *)this + 24));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "arclengthZOverEpoch", *((float *)this + 25));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "configDecelPulseThreshold", *((float *)this + 26));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "deltaTriggerTime", *((void *)this + 1));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "deltaVXYBiggestImpact", *((float *)this + 27));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 28));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_15:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "deltaVXYUnconditional", *((float *)this + 29));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "deltaVXYZBiggestImpact", *((float *)this + 30));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "deltaVXYZOverEpoch", *((float *)this + 31));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "deltaVXYZUnconditional", *((float *)this + 32));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "deltaVZBiggestImpact", *((float *)this + 33));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_20:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "deltaVZOverEpoch", *((float *)this + 34));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "deltaVZUnconditional", *((float *)this + 35));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "durationXYBiggestImpact", *((float *)this + 36));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "durationXYZBiggestImpact", *((float *)this + 37));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v6 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "durationZBiggestImpact", *((float *)this + 38));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 2) == 0)
  {
LABEL_25:
    if ((v6 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 2));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 4) == 0)
  {
LABEL_26:
    if ((v6 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 3));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "faultCounter", *((void *)this + 4));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "hgAccelBufferSize", *((void *)this + 5));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "hgArclengthXYBiggestImpact", *((float *)this + 39));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "hgArclengthXYOverEpoch", *((float *)this + 40));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "hgArclengthXYZBiggestImpact", *((float *)this + 41));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "hgArclengthXYZOverEpoch", *((float *)this + 42));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "hgArclengthZBiggestImpact", *((float *)this + 43));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "hgArclengthZOverEpoch", *((float *)this + 44));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "hgDeltaVXYBiggestImpact", *((float *)this + 45));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "hgDeltaVXYOverEpoch", *((float *)this + 46));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "hgDeltaVXYUnconditional", *((float *)this + 47));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "hgDeltaVXYZBiggestImpact", *((float *)this + 48));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "hgDeltaVXYZOverEpoch", *((float *)this + 49));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "hgDeltaVXYZUnconditional", *((float *)this + 50));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "hgDeltaVZBiggestImpact", *((float *)this + 51));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "hgDeltaVZOverEpoch", *((float *)this + 52));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "hgDeltaVZUnconditional", *((float *)this + 53));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "hgDurationXYBiggestImpact", *((float *)this + 54));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x200000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "hgDurationXYZBiggestImpact", *((float *)this + 55));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x400000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "hgDurationZBiggestImpact", *((float *)this + 56));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_47:
    if ((v7 & 8) == 0) {
      goto LABEL_48;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "hgWeightCoeff", *((float *)this + 57));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((v7 & 8) == 0)
  {
LABEL_48:
    if ((v6 & 0x800000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "isPulseDetected", *((unsigned char *)this + 312));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x1000000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "lgArclengthXYBiggestImpact", *((float *)this + 58));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "lgArclengthXYOverEpoch", *((float *)this + 59));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lgArclengthXYZBiggestImpact", *((float *)this + 60));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lgArclengthXYZOverEpoch", *((float *)this + 61));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lgArclengthZBiggestImpact", *((float *)this + 62));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lgArclengthZOverEpoch", *((float *)this + 63));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lgDeltaVXYBiggestImpact", *((float *)this + 64));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lgDeltaVXYOverEpoch", *((float *)this + 65));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lgDeltaVXYUnconditional", *((float *)this + 66));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lgDeltaVXYZBiggestImpact", *((float *)this + 67));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lgDeltaVXYZOverEpoch", *((float *)this + 68));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lgDeltaVXYZUnconditional", *((float *)this + 69));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lgDeltaVZBiggestImpact", *((float *)this + 70));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lgDeltaVZOverEpoch", *((float *)this + 71));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lgDeltaVZUnconditional", *((float *)this + 72));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lgDurationXYBiggestImpact", *((float *)this + 73));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 1) == 0) {
      goto LABEL_66;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "lgDurationXYZBiggestImpact", *((float *)this + 74));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((v7 & 1) == 0)
  {
LABEL_66:
    if ((v7 & 2) == 0) {
      goto LABEL_67;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "lgDurationZBiggestImpact", *((float *)this + 75));
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)this + 324);
  if ((v7 & 2) == 0)
  {
LABEL_67:
    if ((v7 & 4) == 0) {
      goto LABEL_68;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 76));
  uint64_t v6 = *v5;
  if ((*((unsigned char *)this + 324) & 4) == 0)
  {
LABEL_68:
    if ((v6 & 0x20) == 0) {
      goto LABEL_69;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxPulseHeight", *((float *)this + 77));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_69:
    if ((v6 & 0x40) == 0) {
      goto LABEL_70;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxPulseStartTime", *((void *)this + 6));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_70:
    if ((v6 & 0x80) == 0) {
      goto LABEL_71;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxPulseTime", *((void *)this + 7));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_71:
    if ((v6 & 0x100) == 0) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 8));
  if ((*v5 & 0x100) != 0) {
LABEL_72:
  }
    PB::TextFormatter::format(a2, "triggerTimestamp", *((void *)this + 9));
LABEL_73:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaPulseResult::readFrom(CMMsl::KappaPulseResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (char *)this + 316;
    while (1)
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 200)
      {
        switch(v21)
        {
          case 0xC9:
            *(void *)v8 |= 2uLL;
            unint64_t v140 = *((void *)a2 + 1);
            unint64_t v141 = *((void *)a2 + 2);
            uint64_t v142 = *(void *)a2;
            if (v140 > 0xFFFFFFFFFFFFFFF5 || v140 + 10 > v141)
            {
              char v185 = 0;
              unsigned int v186 = 0;
              uint64_t v145 = 0;
              if (v141 <= v140) {
                unint64_t v141 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v141 == v140)
                {
                  uint64_t v145 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_372;
                }
                unint64_t v187 = v140 + 1;
                char v188 = *(unsigned char *)(v142 + v140);
                *((void *)a2 + 1) = v187;
                v145 |= (unint64_t)(v188 & 0x7F) << v185;
                if ((v188 & 0x80) == 0) {
                  break;
                }
                v185 += 7;
                unint64_t v140 = v187;
                BOOL v15 = v186++ > 8;
                if (v15)
                {
LABEL_325:
                  uint64_t v145 = 0;
                  goto LABEL_372;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v145 = 0;
              }
            }
            else
            {
              char v143 = 0;
              unsigned int v144 = 0;
              uint64_t v145 = 0;
              while (1)
              {
                unint64_t v146 = v140 + 1;
                *((void *)a2 + 1) = v140 + 1;
                char v147 = *(unsigned char *)(v142 + v140);
                v145 |= (unint64_t)(v147 & 0x7F) << v143;
                if ((v147 & 0x80) == 0) {
                  break;
                }
                v143 += 7;
                unint64_t v140 = v146;
                BOOL v15 = v144++ > 8;
                if (v15) {
                  goto LABEL_325;
                }
              }
            }
LABEL_372:
            *((void *)this + 2) = v145;
            break;
          case 0xCA:
            *(void *)v8 |= 4uLL;
            unint64_t v148 = *((void *)a2 + 1);
            unint64_t v149 = *((void *)a2 + 2);
            uint64_t v150 = *(void *)a2;
            if (v148 > 0xFFFFFFFFFFFFFFF5 || v148 + 10 > v149)
            {
              char v189 = 0;
              unsigned int v190 = 0;
              uint64_t v153 = 0;
              if (v149 <= v148) {
                unint64_t v149 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v149 == v148)
                {
                  uint64_t v153 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_376;
                }
                unint64_t v191 = v148 + 1;
                char v192 = *(unsigned char *)(v150 + v148);
                *((void *)a2 + 1) = v191;
                v153 |= (unint64_t)(v192 & 0x7F) << v189;
                if ((v192 & 0x80) == 0) {
                  break;
                }
                v189 += 7;
                unint64_t v148 = v191;
                BOOL v15 = v190++ > 8;
                if (v15)
                {
LABEL_332:
                  uint64_t v153 = 0;
                  goto LABEL_376;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v153 = 0;
              }
            }
            else
            {
              char v151 = 0;
              unsigned int v152 = 0;
              uint64_t v153 = 0;
              while (1)
              {
                unint64_t v154 = v148 + 1;
                *((void *)a2 + 1) = v148 + 1;
                char v155 = *(unsigned char *)(v150 + v148);
                v153 |= (unint64_t)(v155 & 0x7F) << v151;
                if ((v155 & 0x80) == 0) {
                  break;
                }
                v151 += 7;
                unint64_t v148 = v154;
                BOOL v15 = v152++ > 8;
                if (v15) {
                  goto LABEL_332;
                }
              }
            }
LABEL_376:
            *((void *)this + 3) = v153;
            break;
          case 0x12D:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v26 = *((void *)a2 + 1);
            if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *((void *)a2 + 2))
            {
              *((_DWORD *)this + 57) = *(_DWORD *)(*(void *)a2 + v26);
LABEL_335:
              *((void *)a2 + 1) += 4;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_266:
            uint64_t result = PB::Reader::skip(a2, v21, v12 & 7, 0);
            if (!result) {
              return result;
            }
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 1:
            v8[8] |= 8u;
            unint64_t v22 = *((void *)a2 + 1);
            if (v22 >= *((void *)a2 + 2))
            {
              BOOL v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v23 = v22 + 1;
              int v24 = *(unsigned __int8 *)(*(void *)a2 + v22);
              *((void *)a2 + 1) = v23;
              BOOL v25 = v24 != 0;
            }
            *((unsigned char *)this + 312) = v25;
            goto LABEL_336;
          case 2:
            v8[8] |= 2u;
            unint64_t v27 = *((void *)a2 + 1);
            if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 76) = *(_DWORD *)(*(void *)a2 + v27);
            goto LABEL_335;
          case 3:
            v8[8] |= 4u;
            unint64_t v28 = *((void *)a2 + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 77) = *(_DWORD *)(*(void *)a2 + v28);
            goto LABEL_335;
          case 4:
            *(void *)v8 |= 0x20uLL;
            unint64_t v29 = *((void *)a2 + 1);
            unint64_t v30 = *((void *)a2 + 2);
            uint64_t v31 = *(void *)a2;
            if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
            {
              char v32 = 0;
              unsigned int v33 = 0;
              uint64_t v34 = 0;
              do
              {
                unint64_t v35 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v36 = *(unsigned char *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_344;
                }
                v32 += 7;
                unint64_t v29 = v35;
                BOOL v15 = v33++ > 8;
              }
              while (!v15);
LABEL_276:
              uint64_t v34 = 0;
              goto LABEL_344;
            }
            char v157 = 0;
            unsigned int v158 = 0;
            uint64_t v34 = 0;
            if (v30 <= v29) {
              unint64_t v30 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v30 == v29)
              {
                uint64_t v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v159 = v29 + 1;
                char v160 = *(unsigned char *)(v31 + v29);
                *((void *)a2 + 1) = v159;
                v34 |= (unint64_t)(v160 & 0x7F) << v157;
                if (v160 < 0)
                {
                  v157 += 7;
                  unint64_t v29 = v159;
                  BOOL v15 = v158++ > 8;
                  if (v15) {
                    goto LABEL_276;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v34 = 0;
                }
              }
              break;
            }
LABEL_344:
            *((void *)this + 6) = v34;
            goto LABEL_336;
          case 5:
            *(void *)v8 |= 0x40uLL;
            unint64_t v37 = *((void *)a2 + 1);
            unint64_t v38 = *((void *)a2 + 2);
            uint64_t v39 = *(void *)a2;
            if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
            {
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              do
              {
                unint64_t v43 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v44 = *(unsigned char *)(v39 + v37);
                v42 |= (unint64_t)(v44 & 0x7F) << v40;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_348;
                }
                v40 += 7;
                unint64_t v37 = v43;
                BOOL v15 = v41++ > 8;
              }
              while (!v15);
LABEL_283:
              uint64_t v42 = 0;
              goto LABEL_348;
            }
            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v42 = 0;
            if (v38 <= v37) {
              unint64_t v38 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v38 == v37)
              {
                uint64_t v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v163 = v37 + 1;
                char v164 = *(unsigned char *)(v39 + v37);
                *((void *)a2 + 1) = v163;
                v42 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  unint64_t v37 = v163;
                  BOOL v15 = v162++ > 8;
                  if (v15) {
                    goto LABEL_283;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v42 = 0;
                }
              }
              break;
            }
LABEL_348:
            *((void *)this + 7) = v42;
            goto LABEL_336;
          case 6:
            *(void *)v8 |= 1uLL;
            unint64_t v45 = *((void *)a2 + 1);
            unint64_t v46 = *((void *)a2 + 2);
            uint64_t v47 = *(void *)a2;
            if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
            {
              char v48 = 0;
              unsigned int v49 = 0;
              uint64_t v50 = 0;
              do
              {
                unint64_t v51 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v52 = *(unsigned char *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_352;
                }
                v48 += 7;
                unint64_t v45 = v51;
                BOOL v15 = v49++ > 8;
              }
              while (!v15);
LABEL_290:
              uint64_t v50 = 0;
              goto LABEL_352;
            }
            char v165 = 0;
            unsigned int v166 = 0;
            uint64_t v50 = 0;
            if (v46 <= v45) {
              unint64_t v46 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v46 == v45)
              {
                uint64_t v50 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v167 = v45 + 1;
                char v168 = *(unsigned char *)(v47 + v45);
                *((void *)a2 + 1) = v167;
                v50 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  unint64_t v45 = v167;
                  BOOL v15 = v166++ > 8;
                  if (v15) {
                    goto LABEL_290;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v50 = 0;
                }
              }
              break;
            }
LABEL_352:
            *((void *)this + 1) = v50;
            goto LABEL_336;
          case 7:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v53 = *((void *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v53);
            goto LABEL_335;
          case 8:
            *(void *)v8 |= 0x80uLL;
            unint64_t v54 = *((void *)a2 + 1);
            unint64_t v55 = *((void *)a2 + 2);
            uint64_t v56 = *(void *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0;
              do
              {
                unint64_t v60 = v54 + 1;
                *((void *)a2 + 1) = v54 + 1;
                char v61 = *(unsigned char *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0) {
                  goto LABEL_356;
                }
                v57 += 7;
                unint64_t v54 = v60;
                BOOL v15 = v58++ > 8;
              }
              while (!v15);
LABEL_297:
              uint64_t v59 = 0;
              goto LABEL_356;
            }
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v59 = 0;
            if (v55 <= v54) {
              unint64_t v55 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v55 == v54)
              {
                uint64_t v59 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v171 = v54 + 1;
                char v172 = *(unsigned char *)(v56 + v54);
                *((void *)a2 + 1) = v171;
                v59 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  unint64_t v54 = v171;
                  BOOL v15 = v170++ > 8;
                  if (v15) {
                    goto LABEL_297;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v59 = 0;
                }
              }
              break;
            }
LABEL_356:
            *((void *)this + 8) = v59;
            goto LABEL_336;
          case 9:
            *(void *)v8 |= 0x100uLL;
            unint64_t v62 = *((void *)a2 + 1);
            unint64_t v63 = *((void *)a2 + 2);
            uint64_t v64 = *(void *)a2;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v68 = v62 + 1;
                *((void *)a2 + 1) = v62 + 1;
                char v69 = *(unsigned char *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0) {
                  goto LABEL_360;
                }
                v65 += 7;
                unint64_t v62 = v68;
                BOOL v15 = v66++ > 8;
              }
              while (!v15);
LABEL_304:
              uint64_t v67 = 0;
              goto LABEL_360;
            }
            char v173 = 0;
            unsigned int v174 = 0;
            uint64_t v67 = 0;
            if (v63 <= v62) {
              unint64_t v63 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v63 == v62)
              {
                uint64_t v67 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v175 = v62 + 1;
                char v176 = *(unsigned char *)(v64 + v62);
                *((void *)a2 + 1) = v175;
                v67 |= (unint64_t)(v176 & 0x7F) << v173;
                if (v176 < 0)
                {
                  v173 += 7;
                  unint64_t v62 = v175;
                  BOOL v15 = v174++ > 8;
                  if (v15) {
                    goto LABEL_304;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v67 = 0;
                }
              }
              break;
            }
LABEL_360:
            *((void *)this + 9) = v67;
            goto LABEL_336;
          case 10:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v70);
            goto LABEL_335;
          case 11:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v71);
            goto LABEL_335;
          case 12:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v72 = *((void *)a2 + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v72);
            goto LABEL_335;
          case 13:
            *(void *)v8 |= 0x200uLL;
            unint64_t v73 = *((void *)a2 + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v73);
            goto LABEL_335;
          case 14:
            *(void *)v8 |= 0x400uLL;
            unint64_t v74 = *((void *)a2 + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v74);
            goto LABEL_335;
          case 15:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v75 = *((void *)a2 + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v75);
            goto LABEL_335;
          case 16:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v76 = *((void *)a2 + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v76);
            goto LABEL_335;
          case 17:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v77 = *((void *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v77);
            goto LABEL_335;
          case 18:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v78 = *((void *)a2 + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v78);
            goto LABEL_335;
          case 19:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v79 = *((void *)a2 + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v79);
            goto LABEL_335;
          case 20:
            *(void *)v8 |= 0x100000uLL;
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v80);
            goto LABEL_335;
          case 21:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v81 = *((void *)a2 + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v81);
            goto LABEL_335;
          case 22:
            *(void *)v8 |= 0x80000uLL;
            unint64_t v82 = *((void *)a2 + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v82);
            goto LABEL_335;
          case 23:
            *(void *)v8 |= 0x800uLL;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v83);
            goto LABEL_335;
          case 24:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v84);
            goto LABEL_335;
          case 25:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v85 = *((void *)a2 + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 65) = *(_DWORD *)(*(void *)a2 + v85);
            goto LABEL_335;
          case 26:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v86 = *((void *)a2 + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 64) = *(_DWORD *)(*(void *)a2 + v86);
            goto LABEL_335;
          case 27:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v87 = *((void *)a2 + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 73) = *(_DWORD *)(*(void *)a2 + v87);
            goto LABEL_335;
          case 28:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v88 = *((void *)a2 + 1);
            if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 58) = *(_DWORD *)(*(void *)a2 + v88);
            goto LABEL_335;
          case 29:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v89 = *((void *)a2 + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 59) = *(_DWORD *)(*(void *)a2 + v89);
            goto LABEL_335;
          case 30:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v90 = *((void *)a2 + 1);
            if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 71) = *(_DWORD *)(*(void *)a2 + v90);
            goto LABEL_335;
          case 31:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v91 = *((void *)a2 + 1);
            if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 63) = *(_DWORD *)(*(void *)a2 + v91);
            goto LABEL_335;
          case 32:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v92 = *((void *)a2 + 1);
            if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 70) = *(_DWORD *)(*(void *)a2 + v92);
            goto LABEL_335;
          case 33:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v93 = *((void *)a2 + 1);
            if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 62) = *(_DWORD *)(*(void *)a2 + v93);
            goto LABEL_335;
          case 34:
            v8[8] |= 1u;
            unint64_t v94 = *((void *)a2 + 1);
            if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 75) = *(_DWORD *)(*(void *)a2 + v94);
            goto LABEL_335;
          case 35:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v95 = *((void *)a2 + 1);
            if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 68) = *(_DWORD *)(*(void *)a2 + v95);
            goto LABEL_335;
          case 36:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v96 = *((void *)a2 + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 61) = *(_DWORD *)(*(void *)a2 + v96);
            goto LABEL_335;
          case 37:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v97 = *((void *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 67) = *(_DWORD *)(*(void *)a2 + v97);
            goto LABEL_335;
          case 38:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v98 = *((void *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 60) = *(_DWORD *)(*(void *)a2 + v98);
            goto LABEL_335;
          case 39:
            *(void *)v8 |= 0x8000000000000000;
            unint64_t v99 = *((void *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 74) = *(_DWORD *)(*(void *)a2 + v99);
            goto LABEL_335;
          case 40:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v100);
            goto LABEL_335;
          case 41:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v101 = *((void *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v101);
            goto LABEL_335;
          case 42:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 54) = *(_DWORD *)(*(void *)a2 + v102);
            goto LABEL_335;
          case 43:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v103 = *((void *)a2 + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v103);
            goto LABEL_335;
          case 44:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v104 = *((void *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v104);
            goto LABEL_335;
          case 45:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v105 = *((void *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v105);
            goto LABEL_335;
          case 46:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v106 = *((void *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v106);
            goto LABEL_335;
          case 47:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v107);
            goto LABEL_335;
          case 48:
            *(void *)v8 |= (unint64_t)&_mh_execute_header;
            unint64_t v108 = *((void *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v108);
            goto LABEL_335;
          case 49:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v109 = *((void *)a2 + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v109);
            goto LABEL_335;
          case 50:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v110 = *((void *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v110);
            goto LABEL_335;
          case 51:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v111 = *((void *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v111);
            goto LABEL_335;
          case 52:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v112 = *((void *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v112);
            goto LABEL_335;
          case 53:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v113 = *((void *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v113);
            goto LABEL_335;
          case 54:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v114 = *((void *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 55) = *(_DWORD *)(*(void *)a2 + v114);
            goto LABEL_335;
          case 55:
            *(void *)v8 |= 8uLL;
            unint64_t v115 = *((void *)a2 + 1);
            unint64_t v116 = *((void *)a2 + 2);
            uint64_t v117 = *(void *)a2;
            if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
            {
              char v118 = 0;
              unsigned int v119 = 0;
              uint64_t v120 = 0;
              do
              {
                unint64_t v121 = v115 + 1;
                *((void *)a2 + 1) = v115 + 1;
                char v122 = *(unsigned char *)(v117 + v115);
                v120 |= (unint64_t)(v122 & 0x7F) << v118;
                if ((v122 & 0x80) == 0) {
                  goto LABEL_364;
                }
                v118 += 7;
                unint64_t v115 = v121;
                BOOL v15 = v119++ > 8;
              }
              while (!v15);
LABEL_311:
              uint64_t v120 = 0;
              goto LABEL_364;
            }
            char v177 = 0;
            unsigned int v178 = 0;
            uint64_t v120 = 0;
            if (v116 <= v115) {
              unint64_t v116 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v116 == v115)
              {
                uint64_t v120 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v179 = v115 + 1;
                char v180 = *(unsigned char *)(v117 + v115);
                *((void *)a2 + 1) = v179;
                v120 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  unint64_t v115 = v179;
                  BOOL v15 = v178++ > 8;
                  if (v15) {
                    goto LABEL_311;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v120 = 0;
                }
              }
              break;
            }
LABEL_364:
            *((void *)this + 4) = v120;
            goto LABEL_336;
          case 56:
            *(void *)v8 |= 0x10uLL;
            unint64_t v123 = *((void *)a2 + 1);
            unint64_t v124 = *((void *)a2 + 2);
            uint64_t v125 = *(void *)a2;
            if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
            {
              char v126 = 0;
              unsigned int v127 = 0;
              uint64_t v128 = 0;
              do
              {
                unint64_t v129 = v123 + 1;
                *((void *)a2 + 1) = v123 + 1;
                char v130 = *(unsigned char *)(v125 + v123);
                v128 |= (unint64_t)(v130 & 0x7F) << v126;
                if ((v130 & 0x80) == 0) {
                  goto LABEL_368;
                }
                v126 += 7;
                unint64_t v123 = v129;
                BOOL v15 = v127++ > 8;
              }
              while (!v15);
LABEL_318:
              uint64_t v128 = 0;
              goto LABEL_368;
            }
            char v181 = 0;
            unsigned int v182 = 0;
            uint64_t v128 = 0;
            if (v124 <= v123) {
              unint64_t v124 = *((void *)a2 + 1);
            }
            break;
          case 57:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v131 = *((void *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v131);
            goto LABEL_335;
          case 58:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v132 = *((void *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 72) = *(_DWORD *)(*(void *)a2 + v132);
            goto LABEL_335;
          case 59:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v133 = *((void *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 53) = *(_DWORD *)(*(void *)a2 + v133);
            goto LABEL_335;
          case 60:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v134 = *((void *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v134);
            goto LABEL_335;
          case 61:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v135 = *((void *)a2 + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 66) = *(_DWORD *)(*(void *)a2 + v135);
            goto LABEL_335;
          case 62:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v136 = *((void *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v136);
            goto LABEL_335;
          case 63:
            *(void *)v8 |= 0x200000uLL;
            unint64_t v137 = *((void *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v137);
            goto LABEL_335;
          case 64:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v138 = *((void *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((void *)a2 + 2)) {
              goto LABEL_251;
            }
            *((_DWORD *)this + 69) = *(_DWORD *)(*(void *)a2 + v138);
            goto LABEL_335;
          case 65:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v139 = *((void *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)a2 + 2))
            {
LABEL_251:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_336;
            }
            *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v139);
            goto LABEL_335;
          default:
            goto LABEL_266;
        }
        while (1)
        {
          if (v124 == v123)
          {
            uint64_t v128 = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_368;
          }
          unint64_t v183 = v123 + 1;
          char v184 = *(unsigned char *)(v125 + v123);
          *((void *)a2 + 1) = v183;
          v128 |= (unint64_t)(v184 & 0x7F) << v181;
          if ((v184 & 0x80) == 0) {
            break;
          }
          v181 += 7;
          unint64_t v123 = v183;
          BOOL v15 = v182++ > 8;
          if (v15) {
            goto LABEL_318;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          uint64_t v128 = 0;
        }
LABEL_368:
        *((void *)this + 5) = v128;
      }
LABEL_336:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaPulseResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 316);
  char v5 = *(unsigned char *)(this + 324);
  if ((v5 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 312), 1u);
    uint64_t v6 = *v4;
    char v5 = *((unsigned char *)v4 + 8);
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *v4;
  if ((*(unsigned char *)(this + 324) & 2) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 304), 2u);
    uint64_t v6 = *v4;
    char v5 = *((unsigned char *)v4 + 8);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 308), 3u);
    uint64_t v6 = *v4;
    char v5 = *((unsigned char *)v4 + 8);
    if ((*v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v6 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_75;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 4u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 5u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 1) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 6u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 7u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v6 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 8u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 72), 9u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0xBu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0xCu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xDu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xFu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x10u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x11u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x12u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x13u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x14u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x15u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x16u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x17u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x18u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0x19u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 256), 0x1Au);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x800000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0x1Bu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x1000000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0x1Cu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0x1Du);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x10000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 284), 0x1Eu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0x1Fu);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 280), 0x20u);
  uint64_t v6 = *v4;
  char v5 = *((unsigned char *)v4 + 8);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v5 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 248), 0x21u);
  uint64_t v6 = *v4;
  if ((v4[1] & 1) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(float *)(v3 + 300), 0x22u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x4000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 0x23u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x100000000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x24u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x2000000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 268), 0x25u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x26u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 0x27u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x28u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x29u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x2Au);
  uint64_t v6 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x2Bu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x2Cu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0x2Du);
  uint64_t v6 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x2Eu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x2Fu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x200000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x30u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x31u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x32u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x33u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0x34u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x35u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 8) == 0) {
      goto LABEL_59;
    }
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 0x36u);
  uint64_t v6 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_59:
    if ((v6 & 0x10) == 0) {
      goto LABEL_60;
    }
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x37u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_60:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x38u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x39u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0x3Au);
  uint64_t v6 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x3Bu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_64:
    if ((v6 & 0x80000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x3Cu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x3Du);
  uint64_t v6 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x3Eu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_67:
    if ((v6 & 0x400000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x3Fu);
  uint64_t v6 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 276), 0x40u);
  uint64_t v6 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v6 & 2) == 0) {
      goto LABEL_70;
    }
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x41u);
  uint64_t v6 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_70:
    if ((v6 & 4) == 0) {
      goto LABEL_71;
    }
LABEL_137:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xCAu);
    if ((*v4 & 0x400000000000) == 0) {
      return this;
    }
    goto LABEL_138;
  }
LABEL_136:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xC9u);
  uint64_t v6 = *v4;
  if ((*v4 & 4) != 0) {
    goto LABEL_137;
  }
LABEL_71:
  if ((v6 & 0x400000000000) == 0) {
    return this;
  }
LABEL_138:
  float v7 = *(float *)(v3 + 228);

  return PB::Writer::write(a2, v7, 0x12Du);
}

uint64_t CMMsl::KappaPulseResult::hash_value(CMMsl::KappaPulseResult *this)
{
  if ((*((unsigned char *)this + 324) & 8) != 0) {
    uint64_t v1 = *((unsigned __int8 *)this + 312);
  }
  else {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 324) & 2) != 0)
  {
    float v2 = *((float *)this + 76);
    uint64_t v3 = LODWORD(v2);
    if (v2 == 0.0) {
      uint64_t v3 = 0;
    }
    uint64_t v164 = v3;
  }
  else
  {
    uint64_t v164 = 0;
  }
  uint64_t v4 = *(void *)((char *)this + 316);
  if ((*((unsigned char *)this + 324) & 4) != 0)
  {
    float v121 = *((float *)this + 77);
    uint64_t v122 = LODWORD(v121);
    if (v121 == 0.0) {
      uint64_t v122 = 0;
    }
    uint64_t v163 = v122;
    if ((v4 & 0x20) != 0)
    {
LABEL_11:
      uint64_t v162 = *((void *)this + 6);
      if ((v4 & 0x40) != 0) {
        goto LABEL_12;
      }
      goto LABEL_204;
    }
  }
  else
  {
    uint64_t v163 = 0;
    if ((v4 & 0x20) != 0) {
      goto LABEL_11;
    }
  }
  uint64_t v162 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_12:
    uint64_t v161 = *((void *)this + 7);
    if (v4) {
      goto LABEL_13;
    }
    goto LABEL_205;
  }
LABEL_204:
  uint64_t v161 = 0;
  if (v4)
  {
LABEL_13:
    uint64_t v160 = *((void *)this + 1);
    if ((v4 & 0x8000) != 0) {
      goto LABEL_14;
    }
LABEL_206:
    uint64_t v159 = 0;
    if ((v4 & 0x80) != 0) {
      goto LABEL_17;
    }
    goto LABEL_207;
  }
LABEL_205:
  uint64_t v160 = 0;
  if ((v4 & 0x8000) == 0) {
    goto LABEL_206;
  }
LABEL_14:
  float v5 = *((float *)this + 26);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v159 = v6;
  if ((v4 & 0x80) != 0)
  {
LABEL_17:
    uint64_t v158 = *((void *)this + 8);
    if ((v4 & 0x100) != 0) {
      goto LABEL_18;
    }
    goto LABEL_208;
  }
LABEL_207:
  uint64_t v158 = 0;
  if ((v4 & 0x100) != 0)
  {
LABEL_18:
    uint64_t v157 = *((void *)this + 9);
    if ((v4 & 0x20000) != 0) {
      goto LABEL_19;
    }
LABEL_209:
    uint64_t v156 = 0;
    if ((v4 & 0x10000) != 0) {
      goto LABEL_22;
    }
LABEL_210:
    uint64_t v155 = 0;
    if ((v4 & 0x2000000) != 0) {
      goto LABEL_25;
    }
LABEL_211:
    uint64_t v154 = 0;
    if ((v4 & 0x200) != 0) {
      goto LABEL_28;
    }
LABEL_212:
    uint64_t v153 = 0;
    if ((v4 & 0x400) != 0) {
      goto LABEL_31;
    }
LABEL_213:
    uint64_t v152 = 0;
    if ((v4 & 0x800000) != 0) {
      goto LABEL_34;
    }
LABEL_214:
    uint64_t v151 = 0;
    if ((v4 & 0x4000) != 0) {
      goto LABEL_37;
    }
LABEL_215:
    uint64_t v150 = 0;
    if ((v4 & 0x400000) != 0) {
      goto LABEL_40;
    }
LABEL_216:
    uint64_t v149 = 0;
    if ((v4 & 0x2000) != 0) {
      goto LABEL_43;
    }
LABEL_217:
    uint64_t v148 = 0;
    if ((v4 & 0x8000000) != 0) {
      goto LABEL_46;
    }
LABEL_218:
    uint64_t v147 = 0;
    if ((v4 & 0x100000) != 0) {
      goto LABEL_49;
    }
LABEL_219:
    uint64_t v146 = 0;
    if ((v4 & 0x1000) != 0) {
      goto LABEL_52;
    }
LABEL_220:
    uint64_t v145 = 0;
    if ((v4 & 0x80000) != 0) {
      goto LABEL_55;
    }
LABEL_221:
    uint64_t v144 = 0;
    if ((v4 & 0x800) != 0) {
      goto LABEL_58;
    }
LABEL_222:
    uint64_t v143 = 0;
    if ((v4 & 0x4000000) != 0) {
      goto LABEL_61;
    }
LABEL_223:
    uint64_t v142 = 0;
    if ((v4 & 0x40000000000000) != 0) {
      goto LABEL_64;
    }
LABEL_224:
    uint64_t v141 = 0;
    if ((v4 & 0x20000000000000) != 0) {
      goto LABEL_67;
    }
LABEL_225:
    uint64_t v140 = 0;
    if ((v4 & 0x4000000000000000) != 0) {
      goto LABEL_70;
    }
LABEL_226:
    uint64_t v139 = 0;
    if ((v4 & 0x800000000000) != 0) {
      goto LABEL_73;
    }
LABEL_227:
    uint64_t v138 = 0;
    if ((v4 & 0x1000000000000) != 0) {
      goto LABEL_76;
    }
LABEL_228:
    uint64_t v137 = 0;
    if ((v4 & 0x1000000000000000) != 0) {
      goto LABEL_79;
    }
LABEL_229:
    uint64_t v136 = 0;
    if ((v4 & 0x10000000000000) != 0) {
      goto LABEL_82;
    }
LABEL_230:
    uint64_t v135 = 0;
    if ((v4 & 0x800000000000000) != 0) {
      goto LABEL_85;
    }
LABEL_231:
    uint64_t v134 = 0;
    if ((v4 & 0x8000000000000) != 0) {
      goto LABEL_88;
    }
LABEL_232:
    uint64_t v133 = 0;
    if (*((unsigned char *)this + 324)) {
      goto LABEL_91;
    }
LABEL_233:
    uint64_t v132 = 0;
    if ((v4 & 0x200000000000000) != 0) {
      goto LABEL_94;
    }
LABEL_234:
    uint64_t v131 = 0;
    if ((v4 & 0x4000000000000) != 0) {
      goto LABEL_97;
    }
LABEL_235:
    uint64_t v130 = 0;
    if ((v4 & 0x100000000000000) != 0) {
      goto LABEL_100;
    }
LABEL_236:
    uint64_t v129 = 0;
    if ((v4 & 0x2000000000000) != 0) {
      goto LABEL_103;
    }
LABEL_237:
    uint64_t v128 = 0;
    if (v4 < 0) {
      goto LABEL_106;
    }
LABEL_238:
    uint64_t v127 = 0;
    if ((v4 & 0x800000000) != 0) {
      goto LABEL_109;
    }
LABEL_239:
    uint64_t v126 = 0;
    if ((v4 & 0x400000000) != 0) {
      goto LABEL_112;
    }
LABEL_240:
    uint64_t v125 = 0;
    if ((v4 & 0x80000000000) != 0) {
      goto LABEL_115;
    }
LABEL_241:
    uint64_t v124 = 0;
    if ((v4 & 0x10000000) != 0) {
      goto LABEL_118;
    }
LABEL_242:
    uint64_t v74 = 0;
    if ((v4 & 0x20000000) != 0) {
      goto LABEL_122;
    }
LABEL_243:
    uint64_t v76 = 0;
    if ((v4 & 0x20000000000) != 0) {
      goto LABEL_126;
    }
LABEL_244:
    uint64_t v78 = 0;
    if ((v4 & 0x200000000) != 0) {
      goto LABEL_130;
    }
LABEL_245:
    uint64_t v80 = 0;
    if ((v4 & 0x10000000000) != 0) {
      goto LABEL_134;
    }
LABEL_246:
    uint64_t v82 = 0;
    if ((v4 & 0x100000000) != 0) {
      goto LABEL_138;
    }
LABEL_247:
    uint64_t v84 = 0;
    if ((v4 & 0x200000000000) != 0) {
      goto LABEL_142;
    }
LABEL_248:
    uint64_t v86 = 0;
    if ((v4 & 0x4000000000) != 0) {
      goto LABEL_146;
    }
LABEL_249:
    uint64_t v88 = 0;
    if ((v4 & 0x80000000) != 0) {
      goto LABEL_150;
    }
LABEL_250:
    uint64_t v90 = 0;
    if ((v4 & 0x2000000000) != 0) {
      goto LABEL_154;
    }
LABEL_251:
    uint64_t v92 = 0;
    if ((v4 & 0x40000000) != 0) {
      goto LABEL_158;
    }
LABEL_252:
    uint64_t v94 = 0;
    if ((v4 & 0x100000000000) != 0) {
      goto LABEL_162;
    }
LABEL_253:
    uint64_t v96 = 0;
    if ((v4 & 8) != 0) {
      goto LABEL_166;
    }
    goto LABEL_254;
  }
LABEL_208:
  uint64_t v157 = 0;
  if ((v4 & 0x20000) == 0) {
    goto LABEL_209;
  }
LABEL_19:
  float v7 = *((float *)this + 28);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v156 = v8;
  if ((v4 & 0x10000) == 0) {
    goto LABEL_210;
  }
LABEL_22:
  float v9 = *((float *)this + 27);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v155 = v10;
  if ((v4 & 0x2000000) == 0) {
    goto LABEL_211;
  }
LABEL_25:
  float v11 = *((float *)this + 36);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v154 = v12;
  if ((v4 & 0x200) == 0) {
    goto LABEL_212;
  }
LABEL_28:
  float v13 = *((float *)this + 20);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v153 = v14;
  if ((v4 & 0x400) == 0) {
    goto LABEL_213;
  }
LABEL_31:
  float v15 = *((float *)this + 21);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v152 = v16;
  if ((v4 & 0x800000) == 0) {
    goto LABEL_214;
  }
LABEL_34:
  float v17 = *((float *)this + 34);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v151 = v18;
  if ((v4 & 0x4000) == 0) {
    goto LABEL_215;
  }
LABEL_37:
  float v19 = *((float *)this + 25);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v150 = v20;
  if ((v4 & 0x400000) == 0) {
    goto LABEL_216;
  }
LABEL_40:
  float v21 = *((float *)this + 33);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v149 = v22;
  if ((v4 & 0x2000) == 0) {
    goto LABEL_217;
  }
LABEL_43:
  float v23 = *((float *)this + 24);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v148 = v24;
  if ((v4 & 0x8000000) == 0) {
    goto LABEL_218;
  }
LABEL_46:
  float v25 = *((float *)this + 38);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v147 = v26;
  if ((v4 & 0x100000) == 0) {
    goto LABEL_219;
  }
LABEL_49:
  float v27 = *((float *)this + 31);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  uint64_t v146 = v28;
  if ((v4 & 0x1000) == 0) {
    goto LABEL_220;
  }
LABEL_52:
  float v29 = *((float *)this + 23);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  uint64_t v145 = v30;
  if ((v4 & 0x80000) == 0) {
    goto LABEL_221;
  }
LABEL_55:
  float v31 = *((float *)this + 30);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  uint64_t v144 = v32;
  if ((v4 & 0x800) == 0) {
    goto LABEL_222;
  }
LABEL_58:
  float v33 = *((float *)this + 22);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  uint64_t v143 = v34;
  if ((v4 & 0x4000000) == 0) {
    goto LABEL_223;
  }
LABEL_61:
  float v35 = *((float *)this + 37);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  uint64_t v142 = v36;
  if ((v4 & 0x40000000000000) == 0) {
    goto LABEL_224;
  }
LABEL_64:
  float v37 = *((float *)this + 65);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  uint64_t v141 = v38;
  if ((v4 & 0x20000000000000) == 0) {
    goto LABEL_225;
  }
LABEL_67:
  float v39 = *((float *)this + 64);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  uint64_t v140 = v40;
  if ((v4 & 0x4000000000000000) == 0) {
    goto LABEL_226;
  }
LABEL_70:
  float v41 = *((float *)this + 73);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  uint64_t v139 = v42;
  if ((v4 & 0x800000000000) == 0) {
    goto LABEL_227;
  }
LABEL_73:
  float v43 = *((float *)this + 58);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  uint64_t v138 = v44;
  if ((v4 & 0x1000000000000) == 0) {
    goto LABEL_228;
  }
LABEL_76:
  float v45 = *((float *)this + 59);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  uint64_t v137 = v46;
  if ((v4 & 0x1000000000000000) == 0) {
    goto LABEL_229;
  }
LABEL_79:
  float v47 = *((float *)this + 71);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  uint64_t v136 = v48;
  if ((v4 & 0x10000000000000) == 0) {
    goto LABEL_230;
  }
LABEL_82:
  float v49 = *((float *)this + 63);
  uint64_t v50 = LODWORD(v49);
  if (v49 == 0.0) {
    uint64_t v50 = 0;
  }
  uint64_t v135 = v50;
  if ((v4 & 0x800000000000000) == 0) {
    goto LABEL_231;
  }
LABEL_85:
  float v51 = *((float *)this + 70);
  uint64_t v52 = LODWORD(v51);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  uint64_t v134 = v52;
  if ((v4 & 0x8000000000000) == 0) {
    goto LABEL_232;
  }
LABEL_88:
  float v53 = *((float *)this + 62);
  uint64_t v54 = LODWORD(v53);
  if (v53 == 0.0) {
    uint64_t v54 = 0;
  }
  uint64_t v133 = v54;
  if ((*((unsigned char *)this + 324) & 1) == 0) {
    goto LABEL_233;
  }
LABEL_91:
  float v55 = *((float *)this + 75);
  uint64_t v56 = LODWORD(v55);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  uint64_t v132 = v56;
  if ((v4 & 0x200000000000000) == 0) {
    goto LABEL_234;
  }
LABEL_94:
  float v57 = *((float *)this + 68);
  uint64_t v58 = LODWORD(v57);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  uint64_t v131 = v58;
  if ((v4 & 0x4000000000000) == 0) {
    goto LABEL_235;
  }
LABEL_97:
  float v59 = *((float *)this + 61);
  uint64_t v60 = LODWORD(v59);
  if (v59 == 0.0) {
    uint64_t v60 = 0;
  }
  uint64_t v130 = v60;
  if ((v4 & 0x100000000000000) == 0) {
    goto LABEL_236;
  }
LABEL_100:
  float v61 = *((float *)this + 67);
  uint64_t v62 = LODWORD(v61);
  if (v61 == 0.0) {
    uint64_t v62 = 0;
  }
  uint64_t v129 = v62;
  if ((v4 & 0x2000000000000) == 0) {
    goto LABEL_237;
  }
LABEL_103:
  float v63 = *((float *)this + 60);
  uint64_t v64 = LODWORD(v63);
  if (v63 == 0.0) {
    uint64_t v64 = 0;
  }
  uint64_t v128 = v64;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_238;
  }
LABEL_106:
  float v65 = *((float *)this + 74);
  uint64_t v66 = LODWORD(v65);
  if (v65 == 0.0) {
    uint64_t v66 = 0;
  }
  uint64_t v127 = v66;
  if ((v4 & 0x800000000) == 0) {
    goto LABEL_239;
  }
LABEL_109:
  float v67 = *((float *)this + 46);
  uint64_t v68 = LODWORD(v67);
  if (v67 == 0.0) {
    uint64_t v68 = 0;
  }
  uint64_t v126 = v68;
  if ((v4 & 0x400000000) == 0) {
    goto LABEL_240;
  }
LABEL_112:
  float v69 = *((float *)this + 45);
  uint64_t v70 = LODWORD(v69);
  if (v69 == 0.0) {
    uint64_t v70 = 0;
  }
  uint64_t v125 = v70;
  if ((v4 & 0x80000000000) == 0) {
    goto LABEL_241;
  }
LABEL_115:
  float v71 = *((float *)this + 54);
  uint64_t v72 = LODWORD(v71);
  if (v71 == 0.0) {
    uint64_t v72 = 0;
  }
  uint64_t v124 = v72;
  if ((v4 & 0x10000000) == 0) {
    goto LABEL_242;
  }
LABEL_118:
  float v73 = *((float *)this + 39);
  if (v73 == 0.0) {
    uint64_t v74 = 0;
  }
  else {
    uint64_t v74 = LODWORD(v73);
  }
  if ((v4 & 0x20000000) == 0) {
    goto LABEL_243;
  }
LABEL_122:
  float v75 = *((float *)this + 40);
  if (v75 == 0.0) {
    uint64_t v76 = 0;
  }
  else {
    uint64_t v76 = LODWORD(v75);
  }
  if ((v4 & 0x20000000000) == 0) {
    goto LABEL_244;
  }
LABEL_126:
  float v77 = *((float *)this + 52);
  if (v77 == 0.0) {
    uint64_t v78 = 0;
  }
  else {
    uint64_t v78 = LODWORD(v77);
  }
  if ((v4 & 0x200000000) == 0) {
    goto LABEL_245;
  }
LABEL_130:
  float v79 = *((float *)this + 44);
  if (v79 == 0.0) {
    uint64_t v80 = 0;
  }
  else {
    uint64_t v80 = LODWORD(v79);
  }
  if ((v4 & 0x10000000000) == 0) {
    goto LABEL_246;
  }
LABEL_134:
  float v81 = *((float *)this + 51);
  if (v81 == 0.0) {
    uint64_t v82 = 0;
  }
  else {
    uint64_t v82 = LODWORD(v81);
  }
  if ((v4 & 0x100000000) == 0) {
    goto LABEL_247;
  }
LABEL_138:
  float v83 = *((float *)this + 43);
  if (v83 == 0.0) {
    uint64_t v84 = 0;
  }
  else {
    uint64_t v84 = LODWORD(v83);
  }
  if ((v4 & 0x200000000000) == 0) {
    goto LABEL_248;
  }
LABEL_142:
  float v85 = *((float *)this + 56);
  if (v85 == 0.0) {
    uint64_t v86 = 0;
  }
  else {
    uint64_t v86 = LODWORD(v85);
  }
  if ((v4 & 0x4000000000) == 0) {
    goto LABEL_249;
  }
LABEL_146:
  float v87 = *((float *)this + 49);
  if (v87 == 0.0) {
    uint64_t v88 = 0;
  }
  else {
    uint64_t v88 = LODWORD(v87);
  }
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_250;
  }
LABEL_150:
  float v89 = *((float *)this + 42);
  if (v89 == 0.0) {
    uint64_t v90 = 0;
  }
  else {
    uint64_t v90 = LODWORD(v89);
  }
  if ((v4 & 0x2000000000) == 0) {
    goto LABEL_251;
  }
LABEL_154:
  float v91 = *((float *)this + 48);
  if (v91 == 0.0) {
    uint64_t v92 = 0;
  }
  else {
    uint64_t v92 = LODWORD(v91);
  }
  if ((v4 & 0x40000000) == 0) {
    goto LABEL_252;
  }
LABEL_158:
  float v93 = *((float *)this + 41);
  if (v93 == 0.0) {
    uint64_t v94 = 0;
  }
  else {
    uint64_t v94 = LODWORD(v93);
  }
  if ((v4 & 0x100000000000) == 0) {
    goto LABEL_253;
  }
LABEL_162:
  float v95 = *((float *)this + 55);
  if (v95 == 0.0) {
    uint64_t v96 = 0;
  }
  else {
    uint64_t v96 = LODWORD(v95);
  }
  if ((v4 & 8) != 0)
  {
LABEL_166:
    uint64_t v97 = *((void *)this + 4);
    if ((v4 & 0x10) != 0) {
      goto LABEL_167;
    }
    goto LABEL_255;
  }
LABEL_254:
  uint64_t v97 = 0;
  if ((v4 & 0x10) != 0)
  {
LABEL_167:
    uint64_t v98 = *((void *)this + 5);
    if ((v4 & 0x1000000) != 0) {
      goto LABEL_168;
    }
LABEL_256:
    uint64_t v100 = 0;
    if ((v4 & 0x2000000000000000) != 0) {
      goto LABEL_171;
    }
LABEL_257:
    uint64_t v102 = 0;
    if ((v4 & 0x40000000000) != 0) {
      goto LABEL_174;
    }
LABEL_258:
    uint64_t v104 = 0;
    if ((v4 & 0x40000) != 0) {
      goto LABEL_177;
    }
LABEL_259:
    uint64_t v106 = 0;
    if ((v4 & 0x80000000000000) != 0) {
      goto LABEL_180;
    }
LABEL_260:
    uint64_t v108 = 0;
    if ((v4 & 0x1000000000) != 0) {
      goto LABEL_183;
    }
LABEL_261:
    uint64_t v110 = 0;
    if ((v4 & 0x200000) != 0) {
      goto LABEL_186;
    }
LABEL_262:
    uint64_t v112 = 0;
    if ((v4 & 0x400000000000000) != 0) {
      goto LABEL_189;
    }
LABEL_263:
    uint64_t v114 = 0;
    if ((v4 & 0x8000000000) != 0) {
      goto LABEL_192;
    }
LABEL_264:
    uint64_t v116 = 0;
    if ((v4 & 2) != 0) {
      goto LABEL_195;
    }
    goto LABEL_265;
  }
LABEL_255:
  uint64_t v98 = 0;
  if ((v4 & 0x1000000) == 0) {
    goto LABEL_256;
  }
LABEL_168:
  float v99 = *((float *)this + 35);
  uint64_t v100 = LODWORD(v99);
  if (v99 == 0.0) {
    uint64_t v100 = 0;
  }
  if ((v4 & 0x2000000000000000) == 0) {
    goto LABEL_257;
  }
LABEL_171:
  float v101 = *((float *)this + 72);
  uint64_t v102 = LODWORD(v101);
  if (v101 == 0.0) {
    uint64_t v102 = 0;
  }
  if ((v4 & 0x40000000000) == 0) {
    goto LABEL_258;
  }
LABEL_174:
  float v103 = *((float *)this + 53);
  uint64_t v104 = LODWORD(v103);
  if (v103 == 0.0) {
    uint64_t v104 = 0;
  }
  if ((v4 & 0x40000) == 0) {
    goto LABEL_259;
  }
LABEL_177:
  float v105 = *((float *)this + 29);
  uint64_t v106 = LODWORD(v105);
  if (v105 == 0.0) {
    uint64_t v106 = 0;
  }
  if ((v4 & 0x80000000000000) == 0) {
    goto LABEL_260;
  }
LABEL_180:
  float v107 = *((float *)this + 66);
  uint64_t v108 = LODWORD(v107);
  if (v107 == 0.0) {
    uint64_t v108 = 0;
  }
  if ((v4 & 0x1000000000) == 0) {
    goto LABEL_261;
  }
LABEL_183:
  float v109 = *((float *)this + 47);
  uint64_t v110 = LODWORD(v109);
  if (v109 == 0.0) {
    uint64_t v110 = 0;
  }
  if ((v4 & 0x200000) == 0) {
    goto LABEL_262;
  }
LABEL_186:
  float v111 = *((float *)this + 32);
  uint64_t v112 = LODWORD(v111);
  if (v111 == 0.0) {
    uint64_t v112 = 0;
  }
  if ((v4 & 0x400000000000000) == 0) {
    goto LABEL_263;
  }
LABEL_189:
  float v113 = *((float *)this + 69);
  uint64_t v114 = LODWORD(v113);
  if (v113 == 0.0) {
    uint64_t v114 = 0;
  }
  if ((v4 & 0x8000000000) == 0) {
    goto LABEL_264;
  }
LABEL_192:
  float v115 = *((float *)this + 50);
  uint64_t v116 = LODWORD(v115);
  if (v115 == 0.0) {
    uint64_t v116 = 0;
  }
  if ((v4 & 2) != 0)
  {
LABEL_195:
    uint64_t v117 = *((void *)this + 2);
    if ((v4 & 4) != 0) {
      goto LABEL_196;
    }
    goto LABEL_266;
  }
LABEL_265:
  uint64_t v117 = 0;
  if ((v4 & 4) != 0)
  {
LABEL_196:
    uint64_t v118 = *((void *)this + 3);
    if ((v4 & 0x400000000000) != 0) {
      goto LABEL_197;
    }
LABEL_267:
    uint64_t v120 = 0;
    return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
  }
LABEL_266:
  uint64_t v118 = 0;
  if ((v4 & 0x400000000000) == 0) {
    goto LABEL_267;
  }
LABEL_197:
  float v119 = *((float *)this + 57);
  uint64_t v120 = LODWORD(v119);
  if (v119 == 0.0) {
    uint64_t v120 = 0;
  }
  return v164 ^ v1 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v74 ^ v76 ^ v78 ^ v80 ^ v82 ^ v84 ^ v86 ^ v88 ^ v90 ^ v92 ^ v94 ^ v96 ^ v97 ^ v98 ^ v100 ^ v102 ^ v104 ^ v106 ^ v108 ^ v110 ^ v112 ^ v114 ^ v116 ^ v117 ^ v118 ^ v120;
}

void CMMsl::KappaQuiescenceResult::~KappaQuiescenceResult(CMMsl::KappaQuiescenceResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this, const CMMsl::KappaQuiescenceResult *a2)
{
  *(void *)this = off_1003A6D30;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((unsigned char *)a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, const CMMsl::KappaQuiescenceResult *a2)
{
  if ((const CMMsl::KappaQuiescenceResult *)a1 != a2)
  {
    CMMsl::KappaQuiescenceResult::KappaQuiescenceResult((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    int v11 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaQuiescenceResult *a2, CMMsl::KappaQuiescenceResult *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6D30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6D30;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaQuiescenceResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A6D30;
    int v3 = *(_DWORD *)(a2 + 20);
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    int v12 = *(_DWORD *)(a1 + 20);
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 8) = v7;
    v10[1] = v6;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaQuiescenceResult::formatText(CMMsl::KappaQuiescenceResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaQuiescenceResult::readFrom(CMMsl::KappaQuiescenceResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaQuiescenceResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0x186A4u);
}

uint64_t CMMsl::KappaQuiescenceResult::hash_value(CMMsl::KappaQuiescenceResult *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 6);
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_7:
    float v5 = *((float *)this + 3);
    uint64_t v6 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRecoveryResult::~KappaRecoveryResult(CMMsl::KappaRecoveryResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this, const CMMsl::KappaRecoveryResult *a2)
{
  *(void *)this = off_1003A6D68;
  *(_DWORD *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 28) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 8u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 0x10u;
    *(unsigned char *)(this + 28) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 4);
      *(unsigned char *)(this + 28) = v3 | 4;
      *(_DWORD *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 3);
  v3 |= 2u;
  *(unsigned char *)(this + 28) = v3;
  *(_DWORD *)(this + 12) = v7;
  if ((*((unsigned char *)a2 + 28) & 4) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, const CMMsl::KappaRecoveryResult *a2)
{
  if ((const CMMsl::KappaRecoveryResult *)a1 != a2)
  {
    CMMsl::KappaRecoveryResult::KappaRecoveryResult((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11;
    int v11 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v12;
    uint64_t v12 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRecoveryResult *a2, CMMsl::KappaRecoveryResult *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6D68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6D68;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRecoveryResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A6D68;
    int v3 = *(_DWORD *)(a2 + 20);
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    int v12 = *(_DWORD *)(a1 + 20);
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 8) = v7;
    v10[1] = v6;
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRecoveryResult::formatText(CMMsl::KappaRecoveryResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "configThreshold1", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "debugX", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "debugY", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "outputA", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "outputB", *((_DWORD *)this + 6));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRecoveryResult::readFrom(CMMsl::KappaRecoveryResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A1u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_39;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_62;
            case 0x186A2u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_66;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_67;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_62:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_39:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *((_DWORD *)this + 4) = v31;
LABEL_73:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRecoveryResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 0x186A0u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0x186A1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 12), 0x186A3u);
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0x186A2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0x186A4u);
}

uint64_t CMMsl::KappaRecoveryResult::hash_value(CMMsl::KappaRecoveryResult *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_14;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((int *)this + 6);
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 28) & 2) != 0)
  {
LABEL_7:
    float v5 = *((float *)this + 3);
    uint64_t v6 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v6 = 0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_10;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v4 ^ v6 ^ v7;
  }
LABEL_16:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_10:
  uint64_t v7 = *((int *)this + 4);
  return v3 ^ v1 ^ v4 ^ v6 ^ v7;
}

void CMMsl::KappaRemoteAudioResult::~KappaRemoteAudioResult(CMMsl::KappaRemoteAudioResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this, const CMMsl::KappaRemoteAudioResult *a2)
{
  *(void *)this = off_1003A6DA0;
  *(void *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v6 = *((void *)a2 + 1);
    *(unsigned char *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 0;
    uint64_t v3 = 1;
    *(void *)(this + 204) = 1;
    *(void *)(this + 8) = v6;
    int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    uint64_t v2 = *(void *)((char *)a2 + 204);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 10);
    v3 |= 0x10uLL;
    *(void *)(this + 204) = v3;
    *(_WORD *)(this + 212) = 0;
    *(unsigned char *)(this + 214) = 0;
    *(_DWORD *)(this + 40) = v7;
    int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    uint64_t v2 = *(void *)((char *)a2 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    char v8 = *((unsigned char *)a2 + 188);
    unint64_t v4 = 2;
    *(void *)(this + 204) = v3;
    *(unsigned char *)(this + 214) = 0;
    *(_WORD *)(this + 212) = 2;
    *(unsigned char *)(this + 188) = v8;
    int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
    uint64_t v2 = *(void *)((char *)a2 + 204);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v5 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_88;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  int v9 = *((_DWORD *)a2 + 27);
  v3 |= 0x200000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 108) = v9;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_89;
  }
LABEL_88:
  char v10 = *((unsigned char *)a2 + 189);
  unint64_t v11 = v4 >> 16;
  v4 |= 4uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v11;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 189) = v10;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(void *)(this + 16) = v12;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x400000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_91;
  }
LABEL_90:
  int v13 = *((_DWORD *)a2 + 28);
  v3 |= 0x400000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 112) = v13;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_92;
  }
LABEL_91:
  int v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x4000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 80) = v14;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_93;
  }
LABEL_92:
  int v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x40uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 48) = v15;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x400000000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_94;
  }
LABEL_93:
  int v16 = *((_DWORD *)a2 + 32);
  v3 |= 0x4000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 128) = v16;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x400000000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v17 = *((unsigned char *)a2 + 181);
  v3 |= 0x400000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 181) = v17;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_96;
  }
LABEL_95:
  char v18 = *((unsigned char *)a2 + 157);
  v3 |= 0x400000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 157) = v18;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_97;
  }
LABEL_96:
  char v19 = *((unsigned char *)a2 + 197);
  unint64_t v20 = v4 >> 16;
  v4 |= 0x400uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v20;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 197) = v19;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_98;
  }
LABEL_97:
  char v21 = *((unsigned char *)a2 + 165);
  v3 |= 0x40000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 165) = v21;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_99;
  }
LABEL_98:
  char v22 = *((unsigned char *)a2 + 173);
  v3 |= 0x4000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 173) = v22;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_100;
  }
LABEL_99:
  char v23 = *((unsigned char *)a2 + 190);
  unint64_t v24 = v4 >> 16;
  v4 |= 8uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v24;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 190) = v23;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_101;
  }
LABEL_100:
  int v25 = *((_DWORD *)a2 + 24);
  v3 |= 0x40000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 96) = v25;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_102;
  }
LABEL_101:
  int v26 = *((_DWORD *)a2 + 16);
  v3 |= 0x400uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 64) = v26;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_103;
  }
LABEL_102:
  int v27 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 144) = v27;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x4000000000000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_104;
  }
LABEL_103:
  char v28 = *((unsigned char *)a2 + 185);
  v3 |= 0x4000000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 185) = v28;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_105;
  }
LABEL_104:
  char v29 = *((unsigned char *)a2 + 161);
  v3 |= 0x4000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 161) = v29;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_106;
  }
LABEL_105:
  char v30 = *((unsigned char *)a2 + 201);
  unint64_t v31 = v4 >> 16;
  v4 |= 0x4000uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v31;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 201) = v30;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x40000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_107;
  }
LABEL_106:
  char v32 = *((unsigned char *)a2 + 169);
  v3 |= 0x400000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 169) = v32;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x40000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_108;
  }
LABEL_107:
  char v33 = *((unsigned char *)a2 + 177);
  v3 |= 0x40000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 177) = v33;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_109;
  }
LABEL_108:
  char v34 = *((unsigned char *)a2 + 193);
  unint64_t v35 = v4 >> 16;
  v4 |= 0x40uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v35;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 193) = v34;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v36 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(void *)(this + 24) = v36;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x800000) == 0)
  {
LABEL_31:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_111;
  }
LABEL_110:
  int v37 = *((_DWORD *)a2 + 29);
  v3 |= 0x800000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 116) = v37;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x8000) == 0)
  {
LABEL_32:
    if ((v2 & 0x80) == 0) {
      goto LABEL_33;
    }
    goto LABEL_112;
  }
LABEL_111:
  int v38 = *((_DWORD *)a2 + 21);
  v3 |= 0x8000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 84) = v38;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x80) == 0)
  {
LABEL_33:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_113;
  }
LABEL_112:
  int v39 = *((_DWORD *)a2 + 13);
  v3 |= 0x80uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 52) = v39;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x800000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_114;
  }
LABEL_113:
  int v40 = *((_DWORD *)a2 + 33);
  v3 |= 0x8000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 132) = v40;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x800000000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_115;
  }
LABEL_114:
  char v41 = *((unsigned char *)a2 + 182);
  v3 |= 0x800000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 182) = v41;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800) == 0) {
      goto LABEL_37;
    }
    goto LABEL_116;
  }
LABEL_115:
  char v42 = *((unsigned char *)a2 + 158);
  v3 |= 0x800000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 158) = v42;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x800) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_117;
  }
LABEL_116:
  char v43 = *((unsigned char *)a2 + 198);
  unint64_t v44 = v4 >> 16;
  v4 |= 0x800uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v44;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 198) = v43;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_118;
  }
LABEL_117:
  char v45 = *((unsigned char *)a2 + 166);
  v3 |= 0x80000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 166) = v45;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x10) == 0) {
      goto LABEL_40;
    }
    goto LABEL_119;
  }
LABEL_118:
  char v46 = *((unsigned char *)a2 + 174);
  v3 |= 0x8000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 174) = v46;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x10) == 0)
  {
LABEL_40:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_120;
  }
LABEL_119:
  char v47 = *((unsigned char *)a2 + 191);
  unint64_t v48 = v4 >> 16;
  v4 |= 0x10uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v48;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 191) = v47;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x80000) == 0)
  {
LABEL_41:
    if ((v2 & 0x800) == 0) {
      goto LABEL_42;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v49 = *((_DWORD *)a2 + 25);
  v3 |= 0x80000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 100) = v49;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x800) == 0)
  {
LABEL_42:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_122;
  }
LABEL_121:
  int v50 = *((_DWORD *)a2 + 17);
  v3 |= 0x800uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 68) = v50;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_123;
  }
LABEL_122:
  int v51 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 148) = v51;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x8000000000000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_124;
  }
LABEL_123:
  char v52 = *((unsigned char *)a2 + 186);
  v3 |= 0x8000000000000000;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 186) = v52;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_125;
  }
LABEL_124:
  char v53 = *((unsigned char *)a2 + 162);
  v3 |= 0x8000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 162) = v53;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x8000) == 0)
  {
LABEL_46:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_126;
  }
LABEL_125:
  char v54 = *((unsigned char *)a2 + 202);
  unint64_t v55 = v4 >> 16;
  v4 |= 0x8000uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v55;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 202) = v54;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_127;
  }
LABEL_126:
  char v56 = *((unsigned char *)a2 + 170);
  v3 |= 0x800000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 170) = v56;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x80000000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_128;
  }
LABEL_127:
  char v57 = *((unsigned char *)a2 + 178);
  v3 |= 0x80000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 178) = v57;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x80) == 0)
  {
LABEL_49:
    if ((v2 & 8) == 0) {
      goto LABEL_50;
    }
    goto LABEL_129;
  }
LABEL_128:
  char v58 = *((unsigned char *)a2 + 194);
  unint64_t v59 = v4 >> 16;
  v4 |= 0x80uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v59;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 194) = v58;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 8) == 0)
  {
LABEL_50:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_130;
  }
LABEL_129:
  uint64_t v60 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(void *)(this + 32) = v60;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_131;
  }
LABEL_130:
  int v61 = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 120) = v61;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x10000) == 0)
  {
LABEL_52:
    if ((v2 & 0x100) == 0) {
      goto LABEL_53;
    }
    goto LABEL_132;
  }
LABEL_131:
  int v62 = *((_DWORD *)a2 + 22);
  v3 |= 0x10000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 88) = v62;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x100) == 0)
  {
LABEL_53:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_133;
  }
LABEL_132:
  int v63 = *((_DWORD *)a2 + 14);
  v3 |= 0x100uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 56) = v63;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_134;
  }
LABEL_133:
  int v64 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 136) = v64;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_55:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_135;
  }
LABEL_134:
  char v65 = *((unsigned char *)a2 + 183);
  v3 |= 0x1000000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 183) = v65;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_136;
  }
LABEL_135:
  char v66 = *((unsigned char *)a2 + 159);
  v3 |= 0x1000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 159) = v66;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x1000) == 0)
  {
LABEL_57:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_137;
  }
LABEL_136:
  char v67 = *((unsigned char *)a2 + 199);
  unint64_t v68 = v4 >> 16;
  v4 |= 0x1000uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v68;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 199) = v67;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v2 & 0x10000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_138;
  }
LABEL_137:
  char v69 = *((unsigned char *)a2 + 167);
  v3 |= 0x100000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 167) = v69;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x10000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x20) == 0) {
      goto LABEL_60;
    }
    goto LABEL_139;
  }
LABEL_138:
  char v70 = *((unsigned char *)a2 + 175);
  v3 |= 0x10000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 175) = v70;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x20) == 0)
  {
LABEL_60:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_140;
  }
LABEL_139:
  char v71 = *((unsigned char *)a2 + 192);
  unint64_t v72 = v4 >> 16;
  v4 |= 0x20uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v72;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 192) = v71;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x100000) == 0)
  {
LABEL_61:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_141;
  }
LABEL_140:
  int v73 = *((_DWORD *)a2 + 26);
  v3 |= 0x100000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 104) = v73;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x1000) == 0)
  {
LABEL_62:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_142;
  }
LABEL_141:
  int v74 = *((_DWORD *)a2 + 18);
  v3 |= 0x1000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 72) = v74;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_63:
    if ((v5 & 1) == 0) {
      goto LABEL_64;
    }
    goto LABEL_143;
  }
LABEL_142:
  int v75 = *((_DWORD *)a2 + 38);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 152) = v75;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 1) == 0)
  {
LABEL_64:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_144;
  }
LABEL_143:
  char v76 = *((unsigned char *)a2 + 187);
  unint64_t v77 = v4 >> 16;
  v4 |= 1uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v77;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 187) = v76;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_145;
  }
LABEL_144:
  char v78 = *((unsigned char *)a2 + 163);
  v3 |= 0x10000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 163) = v78;
  int v5 = *((unsigned __int16 *)a2 + 106) | (*((unsigned __int8 *)a2 + 214) << 16);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_146;
  }
LABEL_145:
  char v79 = *((unsigned char *)a2 + 203);
  *(_WORD *)(this + 212) = v4;
  v4 |= 0x10000uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 203) = v79;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_67:
    if ((v2 & 0x100000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_147;
  }
LABEL_146:
  char v80 = *((unsigned char *)a2 + 171);
  v3 |= 0x1000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 171) = v80;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x100) == 0) {
      goto LABEL_69;
    }
    goto LABEL_148;
  }
LABEL_147:
  char v81 = *((unsigned char *)a2 + 179);
  v3 |= 0x100000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 179) = v81;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_69:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_149;
  }
LABEL_148:
  char v82 = *((unsigned char *)a2 + 195);
  unint64_t v83 = v4 >> 16;
  v4 |= 0x100uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v83;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 195) = v82;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x2000) == 0)
  {
LABEL_70:
    if ((v2 & 0x20) == 0) {
      goto LABEL_71;
    }
    goto LABEL_150;
  }
LABEL_149:
  int v84 = *((_DWORD *)a2 + 19);
  v3 |= 0x2000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 76) = v84;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x20) == 0)
  {
LABEL_71:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_151;
  }
LABEL_150:
  int v85 = *((_DWORD *)a2 + 11);
  v3 |= 0x20uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 44) = v85;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_72:
    if ((v2 & 0x200000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_152;
  }
LABEL_151:
  int v86 = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 124) = v86;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x200000000000000) == 0)
  {
LABEL_73:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_153;
  }
LABEL_152:
  char v87 = *((unsigned char *)a2 + 180);
  v3 |= 0x200000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 180) = v87;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x200) == 0) {
      goto LABEL_75;
    }
    goto LABEL_154;
  }
LABEL_153:
  char v88 = *((unsigned char *)a2 + 156);
  v3 |= 0x200000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 156) = v88;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_75:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_155;
  }
LABEL_154:
  char v89 = *((unsigned char *)a2 + 196);
  unint64_t v90 = v4 >> 16;
  v4 |= 0x200uLL;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v90;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 196) = v89;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_76:
    if ((v2 & 0x2000000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_156;
  }
LABEL_155:
  char v91 = *((unsigned char *)a2 + 164);
  v3 |= 0x20000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 164) = v91;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000) == 0)
  {
LABEL_77:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_157;
  }
LABEL_156:
  char v92 = *((unsigned char *)a2 + 172);
  v3 |= 0x2000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 172) = v92;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x20000) == 0)
  {
LABEL_78:
    if ((v2 & 0x200) == 0) {
      goto LABEL_79;
    }
    goto LABEL_158;
  }
LABEL_157:
  int v93 = *((_DWORD *)a2 + 23);
  v3 |= 0x20000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 92) = v93;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x200) == 0)
  {
LABEL_79:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_159;
  }
LABEL_158:
  int v94 = *((_DWORD *)a2 + 15);
  v3 |= 0x200uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 60) = v94;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_80:
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_160;
  }
LABEL_159:
  int v95 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(_DWORD *)(this + 140) = v95;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x2000000000000000) == 0)
  {
LABEL_81:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_161;
  }
LABEL_160:
  char v96 = *((unsigned char *)a2 + 184);
  v3 |= 0x2000000000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 184) = v96;
  LOWORD(v5) = *((_WORD *)a2 + 106);
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_162;
  }
LABEL_161:
  char v97 = *((unsigned char *)a2 + 160);
  v3 |= 0x2000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 160) = v97;
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((*((_WORD *)a2 + 106) & 0x2000) == 0)
  {
LABEL_83:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_163;
  }
LABEL_162:
  char v98 = *((unsigned char *)a2 + 200);
  unint64_t v99 = v4 >> 16;
  LODWORD(v4) = v4 | 0x2000;
  *(void *)(this + 204) = v3;
  *(unsigned char *)(this + 214) = v99;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 200) = v98;
  uint64_t v2 = *(void *)((char *)a2 + 204);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_84:
    if ((v2 & 0x20000000000000) == 0) {
      return this;
    }
LABEL_164:
    char v101 = *((unsigned char *)a2 + 176);
    *(void *)(this + 204) = v3 | 0x20000000000000;
    *(_WORD *)(this + 212) = v4;
    *(unsigned char *)(this + 214) = BYTE2(v4);
    *(unsigned char *)(this + 176) = v101;
    return this;
  }
LABEL_163:
  char v100 = *((unsigned char *)a2 + 168);
  v3 |= 0x200000000000uLL;
  *(void *)(this + 204) = v3;
  *(_WORD *)(this + 212) = v4;
  *(unsigned char *)(this + 214) = BYTE2(v4);
  *(unsigned char *)(this + 168) = v100;
  if ((*(void *)((unsigned char *)a2 + 204) & 0x20000000000000) != 0) {
    goto LABEL_164;
  }
  return this;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, const CMMsl::KappaRemoteAudioResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRemoteAudioResult *a2, CMMsl::KappaRemoteAudioResult *a3)
{
  int v3 = *((_DWORD *)this + 53);
  uint64_t v4 = *(void *)((char *)this + 204);
  int v5 = *((_DWORD *)a2 + 53);
  *(void *)((char *)this + 204) = *(void *)((char *)a2 + 204);
  *((_DWORD *)this + 53) = v5;
  *(void *)((char *)a2 + 204) = v4;
  *((_DWORD *)a2 + 53) = v3;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 188);
  *((unsigned char *)this + 188) = *((unsigned char *)a2 + 188);
  *((unsigned char *)a2 + 188) = v6;
  int v7 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v7;
  LOBYTE(v6) = *((unsigned char *)this + 189);
  *((unsigned char *)this + 189) = *((unsigned char *)a2 + 189);
  *((unsigned char *)a2 + 189) = v6;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  int v9 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v9;
  int v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  int v11 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v11;
  int v12 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v12;
  LOBYTE(v8) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 157);
  *((unsigned char *)this + 157) = *((unsigned char *)a2 + 157);
  *((unsigned char *)a2 + 157) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 197);
  *((unsigned char *)this + 197) = *((unsigned char *)a2 + 197);
  *((unsigned char *)a2 + 197) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 165);
  *((unsigned char *)this + 165) = *((unsigned char *)a2 + 165);
  *((unsigned char *)a2 + 165) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 173);
  *((unsigned char *)this + 173) = *((unsigned char *)a2 + 173);
  *((unsigned char *)a2 + 173) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 190);
  *((unsigned char *)this + 190) = *((unsigned char *)a2 + 190);
  *((unsigned char *)a2 + 190) = v8;
  int v13 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  int v14 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v14;
  int v15 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  LOBYTE(v8) = *((unsigned char *)this + 185);
  *((unsigned char *)this + 185) = *((unsigned char *)a2 + 185);
  *((unsigned char *)a2 + 185) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 161);
  *((unsigned char *)this + 161) = *((unsigned char *)a2 + 161);
  *((unsigned char *)a2 + 161) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 201);
  *((unsigned char *)this + 201) = *((unsigned char *)a2 + 201);
  *((unsigned char *)a2 + 201) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 169);
  *((unsigned char *)this + 169) = *((unsigned char *)a2 + 169);
  *((unsigned char *)a2 + 169) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 177);
  *((unsigned char *)this + 177) = *((unsigned char *)a2 + 177);
  *((unsigned char *)a2 + 177) = v8;
  LOBYTE(v8) = *((unsigned char *)this + 193);
  *((unsigned char *)this + 193) = *((unsigned char *)a2 + 193);
  *((unsigned char *)a2 + 193) = v8;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  int v17 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v17;
  int v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  int v19 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v19;
  int v20 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v20;
  LOBYTE(v16) = *((unsigned char *)this + 182);
  *((unsigned char *)this + 182) = *((unsigned char *)a2 + 182);
  *((unsigned char *)a2 + 182) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 158);
  *((unsigned char *)this + 158) = *((unsigned char *)a2 + 158);
  *((unsigned char *)a2 + 158) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 198);
  *((unsigned char *)this + 198) = *((unsigned char *)a2 + 198);
  *((unsigned char *)a2 + 198) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 166);
  *((unsigned char *)this + 166) = *((unsigned char *)a2 + 166);
  *((unsigned char *)a2 + 166) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 174);
  *((unsigned char *)this + 174) = *((unsigned char *)a2 + 174);
  *((unsigned char *)a2 + 174) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 191);
  *((unsigned char *)this + 191) = *((unsigned char *)a2 + 191);
  *((unsigned char *)a2 + 191) = v16;
  int v21 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v21;
  int v22 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v22;
  int v23 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v23;
  LOBYTE(v16) = *((unsigned char *)this + 186);
  *((unsigned char *)this + 186) = *((unsigned char *)a2 + 186);
  *((unsigned char *)a2 + 186) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 162);
  *((unsigned char *)this + 162) = *((unsigned char *)a2 + 162);
  *((unsigned char *)a2 + 162) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 202);
  *((unsigned char *)this + 202) = *((unsigned char *)a2 + 202);
  *((unsigned char *)a2 + 202) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 170);
  *((unsigned char *)this + 170) = *((unsigned char *)a2 + 170);
  *((unsigned char *)a2 + 170) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 178);
  *((unsigned char *)this + 178) = *((unsigned char *)a2 + 178);
  *((unsigned char *)a2 + 178) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 194);
  *((unsigned char *)this + 194) = *((unsigned char *)a2 + 194);
  *((unsigned char *)a2 + 194) = v16;
  uint64_t v24 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v24;
  int v25 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v25;
  int v26 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v26;
  int v27 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v27;
  int v28 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v28;
  LOBYTE(v24) = *((unsigned char *)this + 183);
  *((unsigned char *)this + 183) = *((unsigned char *)a2 + 183);
  *((unsigned char *)a2 + 183) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 159);
  *((unsigned char *)this + 159) = *((unsigned char *)a2 + 159);
  *((unsigned char *)a2 + 159) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 199);
  *((unsigned char *)this + 199) = *((unsigned char *)a2 + 199);
  *((unsigned char *)a2 + 199) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 167);
  *((unsigned char *)this + 167) = *((unsigned char *)a2 + 167);
  *((unsigned char *)a2 + 167) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 175);
  *((unsigned char *)this + 175) = *((unsigned char *)a2 + 175);
  *((unsigned char *)a2 + 175) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 192);
  *((unsigned char *)this + 192) = *((unsigned char *)a2 + 192);
  *((unsigned char *)a2 + 192) = v24;
  int v29 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v29;
  int v30 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v30;
  int v31 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v31;
  LOBYTE(v24) = *((unsigned char *)this + 187);
  *((unsigned char *)this + 187) = *((unsigned char *)a2 + 187);
  *((unsigned char *)a2 + 187) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 163);
  *((unsigned char *)this + 163) = *((unsigned char *)a2 + 163);
  *((unsigned char *)a2 + 163) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 203);
  *((unsigned char *)this + 203) = *((unsigned char *)a2 + 203);
  *((unsigned char *)a2 + 203) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 171);
  *((unsigned char *)this + 171) = *((unsigned char *)a2 + 171);
  *((unsigned char *)a2 + 171) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 179);
  *((unsigned char *)this + 179) = *((unsigned char *)a2 + 179);
  *((unsigned char *)a2 + 179) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 195);
  *((unsigned char *)this + 195) = *((unsigned char *)a2 + 195);
  *((unsigned char *)a2 + 195) = v24;
  int v32 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v32;
  int v33 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v33;
  int v34 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v34;
  LOBYTE(v24) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 156);
  *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
  *((unsigned char *)a2 + 156) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 196);
  *((unsigned char *)this + 196) = *((unsigned char *)a2 + 196);
  *((unsigned char *)a2 + 196) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 164);
  *((unsigned char *)this + 164) = *((unsigned char *)a2 + 164);
  *((unsigned char *)a2 + 164) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 172);
  *((unsigned char *)this + 172) = *((unsigned char *)a2 + 172);
  *((unsigned char *)a2 + 172) = v24;
  int v35 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v35;
  int v36 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v36;
  float result = *((float *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((float *)a2 + 35) = result;
  LOBYTE(v24) = *((unsigned char *)this + 184);
  *((unsigned char *)this + 184) = *((unsigned char *)a2 + 184);
  *((unsigned char *)a2 + 184) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 200);
  *((unsigned char *)this + 200) = *((unsigned char *)a2 + 200);
  *((unsigned char *)a2 + 200) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 168);
  *((unsigned char *)this + 168) = *((unsigned char *)a2 + 168);
  *((unsigned char *)a2 + 168) = v24;
  LOBYTE(v24) = *((unsigned char *)this + 176);
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
  *((unsigned char *)a2 + 176) = v24;
  return result;
}

float CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6DA0;
  uint64_t v2 = *(void *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(void *)(a1 + 204) = v2;
  *(_DWORD *)(a2 + 212) = 0;
  *(void *)(a2 + 204) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 188);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 189) = *(unsigned char *)(a2 + 189);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  *(unsigned char *)(a1 + 157) = *(unsigned char *)(a2 + 157);
  *(unsigned char *)(a1 + 197) = *(unsigned char *)(a2 + 197);
  *(unsigned char *)(a1 + 165) = *(unsigned char *)(a2 + 165);
  *(unsigned char *)(a1 + 173) = *(unsigned char *)(a2 + 173);
  *(unsigned char *)(a1 + 190) = *(unsigned char *)(a2 + 190);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 185) = *(unsigned char *)(a2 + 185);
  *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 182) = *(unsigned char *)(a2 + 182);
  *(unsigned char *)(a1 + 158) = *(unsigned char *)(a2 + 158);
  *(unsigned char *)(a1 + 198) = *(unsigned char *)(a2 + 198);
  *(unsigned char *)(a1 + 166) = *(unsigned char *)(a2 + 166);
  *(unsigned char *)(a1 + 174) = *(unsigned char *)(a2 + 174);
  *(unsigned char *)(a1 + 191) = *(unsigned char *)(a2 + 191);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 186) = *(unsigned char *)(a2 + 186);
  *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
  *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
  *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 183) = *(unsigned char *)(a2 + 183);
  *(unsigned char *)(a1 + 159) = *(unsigned char *)(a2 + 159);
  *(unsigned char *)(a1 + 199) = *(unsigned char *)(a2 + 199);
  *(unsigned char *)(a1 + 167) = *(unsigned char *)(a2 + 167);
  *(unsigned char *)(a1 + 175) = *(unsigned char *)(a2 + 175);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 187) = *(unsigned char *)(a2 + 187);
  *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(unsigned char *)(a1 + 171) = *(unsigned char *)(a2 + 171);
  *(unsigned char *)(a1 + 179) = *(unsigned char *)(a2 + 179);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(unsigned char *)(a1 + 196) = *(unsigned char *)(a2 + 196);
  *(unsigned char *)(a1 + 164) = *(unsigned char *)(a2 + 164);
  *(unsigned char *)(a1 + 172) = *(unsigned char *)(a2 + 172);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  float result = *(float *)(a2 + 140);
  *(float *)(a1 + 140) = result;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return result;
}

CMMsl *CMMsl::KappaRemoteAudioResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRemoteAudioResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRemoteAudioResult::formatText(CMMsl::KappaRemoteAudioResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x200000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet", *((unsigned char *)this + 156));
    int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    uint64_t v5 = *(void *)((char *)this + 204);
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  if ((v5 & 0x400000000) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "chaosMet0", *((unsigned char *)this + 157));
    int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    uint64_t v5 = *(void *)((char *)this + 204);
  }
LABEL_6:
  if ((v5 & 0x800000000) != 0)
  {
    PB::TextFormatter::format(a2, "chaosMet1", *((unsigned char *)this + 158));
    int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
    uint64_t v5 = *(void *)((char *)this + 204);
    if ((v5 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_91;
    }
  }
  else if ((v5 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "chaosMet2", *((unsigned char *)this + 159));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "chaosMetRollover", *((unsigned char *)this + 160));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "chaosMetRollover0", *((unsigned char *)this + 161));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "chaosMetRollover1", *((unsigned char *)this + 162));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "chaosMetRollover2", *((unsigned char *)this + 163));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet", *((unsigned char *)this + 164));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet0", *((unsigned char *)this + 165));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet1", *((unsigned char *)this + 166));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "chaosOrSaturationMet2", *((unsigned char *)this + 167));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover", *((unsigned char *)this + 168));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover0", *((unsigned char *)this + 169));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover1", *((unsigned char *)this + 170));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "chaosOrSaturationMetRollover2", *((unsigned char *)this + 171));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet", *((unsigned char *)this + 172));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet0", *((unsigned char *)this + 173));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x8000000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x10000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet1", *((unsigned char *)this + 174));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x20000000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMet2", *((unsigned char *)this + 175));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover", *((unsigned char *)this + 176));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x40000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover0", *((unsigned char *)this + 177));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x80000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x100000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover1", *((unsigned char *)this + 178));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "energyAndChaosOrSaturationMetRollover2", *((unsigned char *)this + 179));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "energyMet", *((unsigned char *)this + 180));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x400000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "energyMet0", *((unsigned char *)this + 181));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "energyMet1", *((unsigned char *)this + 182));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "energyMet2", *((unsigned char *)this + 183));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "energyMetRollover", *((unsigned char *)this + 184));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x4000000000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "energyMetRollover0", *((unsigned char *)this + 185));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "energyMetRollover1", *((unsigned char *)this + 186));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 1) == 0)
  {
LABEL_36:
    if ((v5 & 0x10) == 0) {
      goto LABEL_37;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "energyMetRollover2", *((unsigned char *)this + 187));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_37:
    if ((v5 & 0x20) == 0) {
      goto LABEL_38;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "epochNumber", *((_DWORD *)this + 10));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x20) == 0)
  {
LABEL_38:
    if ((v5 & 0x40) == 0) {
      goto LABEL_39;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "maxChaos", *((float *)this + 11));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0) {
      goto LABEL_40;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "maxChaos0", *((float *)this + 12));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0) {
      goto LABEL_41;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "maxChaos1", *((float *)this + 13));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_41:
    if ((v5 & 0x200) == 0) {
      goto LABEL_42;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "maxChaos2", *((float *)this + 14));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0) {
      goto LABEL_43;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "maxChaosRollover", *((float *)this + 15));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x400) == 0)
  {
LABEL_43:
    if ((v5 & 0x800) == 0) {
      goto LABEL_44;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "maxChaosRollover0", *((float *)this + 16));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "maxChaosRollover1", *((float *)this + 17));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "maxChaosRollover2", *((float *)this + 18));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "maxEnergy", *((float *)this + 19));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "maxEnergy0", *((float *)this + 20));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "maxEnergy1", *((float *)this + 21));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "maxEnergy2", *((float *)this + 22));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x20000) == 0)
  {
LABEL_50:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "maxEnergyRollover", *((float *)this + 23));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_51:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "maxEnergyRollover0", *((float *)this + 24));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_52:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "maxEnergyRollover1", *((float *)this + 25));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x100000) == 0)
  {
LABEL_53:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "maxEnergyRollover2", *((float *)this + 26));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_54:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxRMS", *((float *)this + 27));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x400000) == 0)
  {
LABEL_55:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxRMS0", *((float *)this + 28));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxRMS1", *((float *)this + 29));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_57:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxRMS2", *((float *)this + 30));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxSaturation", *((float *)this + 31));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxSaturation0", *((float *)this + 32));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxSaturation1", *((float *)this + 33));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxSaturation2", *((float *)this + 34));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxSaturationRollover", *((float *)this + 35));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxSaturationRollover0", *((float *)this + 36));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "maxSaturationRollover1", *((float *)this + 37));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_65:
    if ((v6 & 2) == 0) {
      goto LABEL_66;
    }
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "maxSaturationRollover2", *((float *)this + 38));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 2) == 0)
  {
LABEL_66:
    if ((v6 & 4) == 0) {
      goto LABEL_67;
    }
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "passThru", *((unsigned char *)this + 188));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 4) == 0)
  {
LABEL_67:
    if ((v6 & 8) == 0) {
      goto LABEL_68;
    }
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "passThruRollover", *((unsigned char *)this + 189));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 8) == 0)
  {
LABEL_68:
    if ((v6 & 0x10) == 0) {
      goto LABEL_69;
    }
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "passthru0", *((unsigned char *)this + 190));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x10) == 0)
  {
LABEL_69:
    if ((v6 & 0x20) == 0) {
      goto LABEL_70;
    }
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "passthru1", *((unsigned char *)this + 191));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x20) == 0)
  {
LABEL_70:
    if ((v6 & 0x40) == 0) {
      goto LABEL_71;
    }
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "passthru2", *((unsigned char *)this + 192));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x40) == 0)
  {
LABEL_71:
    if ((v6 & 0x80) == 0) {
      goto LABEL_72;
    }
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "passthruRollover0", *((unsigned char *)this + 193));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x80) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0) {
      goto LABEL_73;
    }
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "passthruRollover1", *((unsigned char *)this + 194));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x100) == 0)
  {
LABEL_73:
    if ((v6 & 0x200) == 0) {
      goto LABEL_74;
    }
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "passthruRollover2", *((unsigned char *)this + 195));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0) {
      goto LABEL_75;
    }
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "saturationMet", *((unsigned char *)this + 196));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x400) == 0)
  {
LABEL_75:
    if ((v6 & 0x800) == 0) {
      goto LABEL_76;
    }
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "saturationMet0", *((unsigned char *)this + 197));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "saturationMet1", *((unsigned char *)this + 198));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "saturationMet2", *((unsigned char *)this + 199));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "saturationMetRollover", *((unsigned char *)this + 200));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x4000) == 0)
  {
LABEL_79:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "saturationMetRollover0", *((unsigned char *)this + 201));
  int v6 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((*((_WORD *)this + 106) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "saturationMetRollover1", *((unsigned char *)this + 202));
  uint64_t v5 = *(void *)((char *)this + 204);
  if (((*((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16)) & 0x10000) == 0)
  {
LABEL_81:
    if ((v5 & 1) == 0) {
      goto LABEL_82;
    }
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "saturationMetRollover2", *((unsigned char *)this + 203));
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 1) == 0)
  {
LABEL_82:
    if ((v5 & 2) == 0) {
      goto LABEL_83;
    }
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 2) == 0)
  {
LABEL_83:
    if ((v5 & 4) == 0) {
      goto LABEL_84;
    }
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "timestamp0", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 204);
  if ((v5 & 4) == 0)
  {
LABEL_84:
    if ((v5 & 8) == 0) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "timestamp1", *((void *)this + 3));
  if ((*(void *)((unsigned char *)this + 204) & 8) != 0) {
LABEL_85:
  }
    PB::TextFormatter::format(a2, "timestamp2", *((void *)this + 4));
LABEL_86:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRemoteAudioResult::readFrom(CMMsl::KappaRemoteAudioResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (char *)this + 204;
    while (1)
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 1102)
      {
        if ((v12 >> 3) <= 0x44E)
        {
          switch((int)v21)
          {
            case 1103:
              *(void *)v8 |= 4uLL;
              unint64_t v46 = *((void *)a2 + 1);
              unint64_t v47 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v51 = 0;
                do
                {
                  unint64_t v52 = v46 + 1;
                  *((void *)a2 + 1) = v46 + 1;
                  char v53 = *(unsigned char *)(v48 + v46);
                  v51 |= (unint64_t)(v53 & 0x7F) << v49;
                  if ((v53 & 0x80) == 0) {
                    goto LABEL_398;
                  }
                  v49 += 7;
                  unint64_t v46 = v52;
                  BOOL v15 = v50++ > 8;
                }
                while (!v15);
LABEL_272:
                uint64_t v51 = 0;
                goto LABEL_398;
              }
              char v313 = 0;
              unsigned int v314 = 0;
              uint64_t v51 = 0;
              if (v47 <= v46) {
                unint64_t v47 = *((void *)a2 + 1);
              }
              break;
            case 1104:
              *(void *)v8 |= 0x800000uLL;
              unint64_t v242 = *((void *)a2 + 1);
              if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v242);
              goto LABEL_377;
            case 1105:
              *(void *)v8 |= 0x8000uLL;
              unint64_t v243 = *((void *)a2 + 1);
              if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v243);
              goto LABEL_377;
            case 1106:
              *(void *)v8 |= 0x80uLL;
              unint64_t v244 = *((void *)a2 + 1);
              if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v244);
              goto LABEL_377;
            case 1107:
              *(void *)v8 |= 0x8000000uLL;
              unint64_t v245 = *((void *)a2 + 1);
              if (v245 > 0xFFFFFFFFFFFFFFFBLL || v245 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v245);
              goto LABEL_377;
            case 1108:
              *(void *)v8 |= 0x800000000000000uLL;
              unint64_t v246 = *((void *)a2 + 1);
              if (v246 >= *((void *)a2 + 2))
              {
                BOOL v249 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v247 = v246 + 1;
                int v248 = *(unsigned __int8 *)(*(void *)a2 + v246);
                *((void *)a2 + 1) = v247;
                BOOL v249 = v248 != 0;
              }
              *((unsigned char *)this + 182) = v249;
              goto LABEL_378;
            case 1109:
              *(void *)v8 |= 0x800000000uLL;
              unint64_t v250 = *((void *)a2 + 1);
              if (v250 >= *((void *)a2 + 2))
              {
                BOOL v253 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v251 = v250 + 1;
                int v252 = *(unsigned __int8 *)(*(void *)a2 + v250);
                *((void *)a2 + 1) = v251;
                BOOL v253 = v252 != 0;
              }
              *((unsigned char *)this + 158) = v253;
              goto LABEL_378;
            case 1110:
              char v254 = v8[10];
              *((_WORD *)v8 + 4) |= 0x800u;
              v8[10] = v254;
              unint64_t v255 = *((void *)a2 + 1);
              if (v255 >= *((void *)a2 + 2))
              {
                BOOL v258 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v256 = v255 + 1;
                int v257 = *(unsigned __int8 *)(*(void *)a2 + v255);
                *((void *)a2 + 1) = v256;
                BOOL v258 = v257 != 0;
              }
              *((unsigned char *)this + 198) = v258;
              goto LABEL_378;
            case 1111:
              *(void *)v8 |= 0x80000000000uLL;
              unint64_t v259 = *((void *)a2 + 1);
              if (v259 >= *((void *)a2 + 2))
              {
                BOOL v262 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v260 = v259 + 1;
                int v261 = *(unsigned __int8 *)(*(void *)a2 + v259);
                *((void *)a2 + 1) = v260;
                BOOL v262 = v261 != 0;
              }
              *((unsigned char *)this + 166) = v262;
              goto LABEL_378;
            case 1112:
              *(void *)v8 |= 0x8000000000000uLL;
              unint64_t v263 = *((void *)a2 + 1);
              if (v263 >= *((void *)a2 + 2))
              {
                BOOL v266 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v264 = v263 + 1;
                int v265 = *(unsigned __int8 *)(*(void *)a2 + v263);
                *((void *)a2 + 1) = v264;
                BOOL v266 = v265 != 0;
              }
              *((unsigned char *)this + 174) = v266;
              goto LABEL_378;
            case 1113:
              char v267 = v8[10];
              *((_WORD *)v8 + 4) |= 0x10u;
              v8[10] = v267;
              unint64_t v268 = *((void *)a2 + 1);
              if (v268 >= *((void *)a2 + 2))
              {
                BOOL v271 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v269 = v268 + 1;
                int v270 = *(unsigned __int8 *)(*(void *)a2 + v268);
                *((void *)a2 + 1) = v269;
                BOOL v271 = v270 != 0;
              }
              *((unsigned char *)this + 191) = v271;
              goto LABEL_378;
            case 1114:
              *(void *)v8 |= 0x80000uLL;
              unint64_t v272 = *((void *)a2 + 1);
              if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v272);
              goto LABEL_377;
            case 1115:
              *(void *)v8 |= 0x800uLL;
              unint64_t v273 = *((void *)a2 + 1);
              if (v273 > 0xFFFFFFFFFFFFFFFBLL || v273 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v273);
              goto LABEL_377;
            case 1116:
              *(void *)v8 |= 0x80000000uLL;
              unint64_t v274 = *((void *)a2 + 1);
              if (v274 <= 0xFFFFFFFFFFFFFFFBLL && v274 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v274);
LABEL_377:
                *((void *)a2 + 1) += 4;
              }
              else
              {
LABEL_232:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_378;
            case 1117:
              *(void *)v8 |= 0x8000000000000000;
              unint64_t v275 = *((void *)a2 + 1);
              if (v275 >= *((void *)a2 + 2))
              {
                BOOL v278 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v276 = v275 + 1;
                int v277 = *(unsigned __int8 *)(*(void *)a2 + v275);
                *((void *)a2 + 1) = v276;
                BOOL v278 = v277 != 0;
              }
              *((unsigned char *)this + 186) = v278;
              goto LABEL_378;
            case 1118:
              *(void *)v8 |= 0x8000000000uLL;
              unint64_t v279 = *((void *)a2 + 1);
              if (v279 >= *((void *)a2 + 2))
              {
                BOOL v282 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v280 = v279 + 1;
                int v281 = *(unsigned __int8 *)(*(void *)a2 + v279);
                *((void *)a2 + 1) = v280;
                BOOL v282 = v281 != 0;
              }
              *((unsigned char *)this + 162) = v282;
              goto LABEL_378;
            case 1119:
              char v283 = v8[10];
              *((_WORD *)v8 + 4) |= 0x8000u;
              v8[10] = v283;
              unint64_t v284 = *((void *)a2 + 1);
              if (v284 >= *((void *)a2 + 2))
              {
                BOOL v287 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v285 = v284 + 1;
                int v286 = *(unsigned __int8 *)(*(void *)a2 + v284);
                *((void *)a2 + 1) = v285;
                BOOL v287 = v286 != 0;
              }
              *((unsigned char *)this + 202) = v287;
              goto LABEL_378;
            case 1120:
              *(void *)v8 |= 0x800000000000uLL;
              unint64_t v288 = *((void *)a2 + 1);
              if (v288 >= *((void *)a2 + 2))
              {
                BOOL v291 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v289 = v288 + 1;
                int v290 = *(unsigned __int8 *)(*(void *)a2 + v288);
                *((void *)a2 + 1) = v289;
                BOOL v291 = v290 != 0;
              }
              *((unsigned char *)this + 170) = v291;
              goto LABEL_378;
            case 1121:
              *(void *)v8 |= 0x80000000000000uLL;
              unint64_t v292 = *((void *)a2 + 1);
              if (v292 >= *((void *)a2 + 2))
              {
                BOOL v295 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v293 = v292 + 1;
                int v294 = *(unsigned __int8 *)(*(void *)a2 + v292);
                *((void *)a2 + 1) = v293;
                BOOL v295 = v294 != 0;
              }
              *((unsigned char *)this + 178) = v295;
              goto LABEL_378;
            case 1122:
              char v296 = v8[10];
              *((_WORD *)v8 + 4) |= 0x80u;
              v8[10] = v296;
              unint64_t v297 = *((void *)a2 + 1);
              if (v297 >= *((void *)a2 + 2))
              {
                BOOL v300 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v298 = v297 + 1;
                int v299 = *(unsigned __int8 *)(*(void *)a2 + v297);
                *((void *)a2 + 1) = v298;
                BOOL v300 = v299 != 0;
              }
              *((unsigned char *)this + 194) = v300;
              goto LABEL_378;
            default:
              JUMPOUT(0);
          }
          while (1)
          {
            if (v47 == v46)
            {
              uint64_t v51 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_398;
            }
            unint64_t v315 = v46 + 1;
            char v316 = *(unsigned char *)(v48 + v46);
            *((void *)a2 + 1) = v315;
            v51 |= (unint64_t)(v316 & 0x7F) << v313;
            if ((v316 & 0x80) == 0) {
              break;
            }
            v313 += 7;
            unint64_t v46 = v315;
            BOOL v15 = v314++ > 8;
            if (v15) {
              goto LABEL_272;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v51 = 0;
          }
LABEL_398:
          *((void *)this + 3) = v51;
        }
        else
        {
          switch((int)v21)
          {
            case 1203:
              *(void *)v8 |= 8uLL;
              unint64_t v30 = *((void *)a2 + 1);
              unint64_t v31 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v35 = 0;
                do
                {
                  unint64_t v36 = v30 + 1;
                  *((void *)a2 + 1) = v30 + 1;
                  char v37 = *(unsigned char *)(v32 + v30);
                  v35 |= (unint64_t)(v37 & 0x7F) << v33;
                  if ((v37 & 0x80) == 0) {
                    goto LABEL_390;
                  }
                  v33 += 7;
                  unint64_t v30 = v36;
                  BOOL v15 = v34++ > 8;
                }
                while (!v15);
LABEL_258:
                uint64_t v35 = 0;
                goto LABEL_390;
              }
              char v305 = 0;
              unsigned int v306 = 0;
              uint64_t v35 = 0;
              if (v31 <= v30) {
                unint64_t v31 = *((void *)a2 + 1);
              }
              break;
            case 1204:
              *(void *)v8 |= 0x1000000uLL;
              unint64_t v121 = *((void *)a2 + 1);
              if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v121);
              goto LABEL_377;
            case 1205:
              *(void *)v8 |= 0x10000uLL;
              unint64_t v122 = *((void *)a2 + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v122);
              goto LABEL_377;
            case 1206:
              *(void *)v8 |= 0x100uLL;
              unint64_t v123 = *((void *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v123);
              goto LABEL_377;
            case 1207:
              *(void *)v8 |= 0x10000000uLL;
              unint64_t v124 = *((void *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v124);
              goto LABEL_377;
            case 1208:
              *(void *)v8 |= 0x1000000000000000uLL;
              unint64_t v125 = *((void *)a2 + 1);
              if (v125 >= *((void *)a2 + 2))
              {
                BOOL v128 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v126 = v125 + 1;
                int v127 = *(unsigned __int8 *)(*(void *)a2 + v125);
                *((void *)a2 + 1) = v126;
                BOOL v128 = v127 != 0;
              }
              *((unsigned char *)this + 183) = v128;
              goto LABEL_378;
            case 1209:
              *(void *)v8 |= 0x1000000000uLL;
              unint64_t v129 = *((void *)a2 + 1);
              if (v129 >= *((void *)a2 + 2))
              {
                BOOL v132 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v130 = v129 + 1;
                int v131 = *(unsigned __int8 *)(*(void *)a2 + v129);
                *((void *)a2 + 1) = v130;
                BOOL v132 = v131 != 0;
              }
              *((unsigned char *)this + 159) = v132;
              goto LABEL_378;
            case 1210:
              char v133 = v8[10];
              *((_WORD *)v8 + 4) |= 0x1000u;
              v8[10] = v133;
              unint64_t v134 = *((void *)a2 + 1);
              if (v134 >= *((void *)a2 + 2))
              {
                BOOL v137 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v135 = v134 + 1;
                int v136 = *(unsigned __int8 *)(*(void *)a2 + v134);
                *((void *)a2 + 1) = v135;
                BOOL v137 = v136 != 0;
              }
              *((unsigned char *)this + 199) = v137;
              goto LABEL_378;
            case 1211:
              *(void *)v8 |= 0x100000000000uLL;
              unint64_t v138 = *((void *)a2 + 1);
              if (v138 >= *((void *)a2 + 2))
              {
                BOOL v141 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v139 = v138 + 1;
                int v140 = *(unsigned __int8 *)(*(void *)a2 + v138);
                *((void *)a2 + 1) = v139;
                BOOL v141 = v140 != 0;
              }
              *((unsigned char *)this + 167) = v141;
              goto LABEL_378;
            case 1212:
              *(void *)v8 |= 0x10000000000000uLL;
              unint64_t v142 = *((void *)a2 + 1);
              if (v142 >= *((void *)a2 + 2))
              {
                BOOL v145 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v143 = v142 + 1;
                int v144 = *(unsigned __int8 *)(*(void *)a2 + v142);
                *((void *)a2 + 1) = v143;
                BOOL v145 = v144 != 0;
              }
              *((unsigned char *)this + 175) = v145;
              goto LABEL_378;
            case 1213:
              char v146 = v8[10];
              *((_WORD *)v8 + 4) |= 0x20u;
              v8[10] = v146;
              unint64_t v147 = *((void *)a2 + 1);
              if (v147 >= *((void *)a2 + 2))
              {
                BOOL v150 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v148 = v147 + 1;
                int v149 = *(unsigned __int8 *)(*(void *)a2 + v147);
                *((void *)a2 + 1) = v148;
                BOOL v150 = v149 != 0;
              }
              *((unsigned char *)this + 192) = v150;
              goto LABEL_378;
            case 1214:
              *(void *)v8 |= 0x100000uLL;
              unint64_t v151 = *((void *)a2 + 1);
              if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v151);
              goto LABEL_377;
            case 1215:
              *(void *)v8 |= 0x1000uLL;
              unint64_t v152 = *((void *)a2 + 1);
              if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v152);
              goto LABEL_377;
            case 1216:
              *(void *)v8 |= (unint64_t)&_mh_execute_header;
              unint64_t v153 = *((void *)a2 + 1);
              if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((void *)a2 + 2)) {
                goto LABEL_232;
              }
              *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v153);
              goto LABEL_377;
            case 1217:
              char v154 = v8[10];
              *((_WORD *)v8 + 4) |= 1u;
              v8[10] = v154;
              unint64_t v155 = *((void *)a2 + 1);
              if (v155 >= *((void *)a2 + 2))
              {
                BOOL v158 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v156 = v155 + 1;
                int v157 = *(unsigned __int8 *)(*(void *)a2 + v155);
                *((void *)a2 + 1) = v156;
                BOOL v158 = v157 != 0;
              }
              *((unsigned char *)this + 187) = v158;
              goto LABEL_378;
            case 1218:
              *(void *)v8 |= 0x10000000000uLL;
              unint64_t v159 = *((void *)a2 + 1);
              if (v159 >= *((void *)a2 + 2))
              {
                BOOL v162 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v160 = v159 + 1;
                int v161 = *(unsigned __int8 *)(*(void *)a2 + v159);
                *((void *)a2 + 1) = v160;
                BOOL v162 = v161 != 0;
              }
              *((unsigned char *)this + 163) = v162;
              goto LABEL_378;
            case 1219:
              int v163 = *((unsigned __int16 *)v8 + 4);
              unsigned int v164 = (v163 | (v8[10] << 16) | 0x10000u) >> 16;
              *((_WORD *)v8 + 4) = v163;
              v8[10] = v164;
              unint64_t v165 = *((void *)a2 + 1);
              if (v165 >= *((void *)a2 + 2))
              {
                BOOL v168 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v166 = v165 + 1;
                int v167 = *(unsigned __int8 *)(*(void *)a2 + v165);
                *((void *)a2 + 1) = v166;
                BOOL v168 = v167 != 0;
              }
              *((unsigned char *)this + 203) = v168;
              goto LABEL_378;
            case 1220:
              *(void *)v8 |= 0x1000000000000uLL;
              unint64_t v169 = *((void *)a2 + 1);
              if (v169 >= *((void *)a2 + 2))
              {
                BOOL v172 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v170 = v169 + 1;
                int v171 = *(unsigned __int8 *)(*(void *)a2 + v169);
                *((void *)a2 + 1) = v170;
                BOOL v172 = v171 != 0;
              }
              *((unsigned char *)this + 171) = v172;
              goto LABEL_378;
            case 1221:
              *(void *)v8 |= 0x100000000000000uLL;
              unint64_t v173 = *((void *)a2 + 1);
              if (v173 >= *((void *)a2 + 2))
              {
                BOOL v176 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v174 = v173 + 1;
                int v175 = *(unsigned __int8 *)(*(void *)a2 + v173);
                *((void *)a2 + 1) = v174;
                BOOL v176 = v175 != 0;
              }
              *((unsigned char *)this + 179) = v176;
              goto LABEL_378;
            case 1222:
              char v177 = v8[10];
              *((_WORD *)v8 + 4) |= 0x100u;
              v8[10] = v177;
              unint64_t v178 = *((void *)a2 + 1);
              if (v178 >= *((void *)a2 + 2))
              {
                BOOL v181 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v179 = v178 + 1;
                int v180 = *(unsigned __int8 *)(*(void *)a2 + v178);
                *((void *)a2 + 1) = v179;
                BOOL v181 = v180 != 0;
              }
              *((unsigned char *)this + 195) = v181;
              goto LABEL_378;
            default:
LABEL_153:
              uint64_t result = PB::Reader::skip(a2, v21, v12 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_378;
          }
          while (1)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_390;
            }
            unint64_t v307 = v30 + 1;
            char v308 = *(unsigned char *)(v32 + v30);
            *((void *)a2 + 1) = v307;
            v35 |= (unint64_t)(v308 & 0x7F) << v305;
            if ((v308 & 0x80) == 0) {
              break;
            }
            v305 += 7;
            unint64_t v30 = v307;
            BOOL v15 = v306++ > 8;
            if (v15) {
              goto LABEL_258;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v35 = 0;
          }
LABEL_390:
          *((void *)this + 4) = v35;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 'e':
            *(void *)v8 |= 1uLL;
            unint64_t v22 = *((void *)a2 + 1);
            unint64_t v23 = *((void *)a2 + 2);
            uint64_t v24 = *(void *)a2;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v28 = v22 + 1;
                *((void *)a2 + 1) = v22 + 1;
                char v29 = *(unsigned char *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0) {
                  goto LABEL_386;
                }
                v25 += 7;
                unint64_t v22 = v28;
                BOOL v15 = v26++ > 8;
              }
              while (!v15);
LABEL_251:
              uint64_t v27 = 0;
              goto LABEL_386;
            }
            char v301 = 0;
            unsigned int v302 = 0;
            uint64_t v27 = 0;
            if (v23 <= v22) {
              unint64_t v23 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v23 == v22)
              {
                uint64_t v27 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v303 = v22 + 1;
                char v304 = *(unsigned char *)(v24 + v22);
                *((void *)a2 + 1) = v303;
                v27 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  unint64_t v22 = v303;
                  BOOL v15 = v302++ > 8;
                  if (v15) {
                    goto LABEL_251;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v27 = 0;
                }
              }
              break;
            }
LABEL_386:
            *((void *)this + 1) = v27;
            goto LABEL_378;
          case 'f':
            *(void *)v8 |= 0x10uLL;
            unint64_t v54 = *((void *)a2 + 1);
            unint64_t v55 = *((void *)a2 + 2);
            uint64_t v56 = *(void *)a2;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0;
              do
              {
                unint64_t v60 = v54 + 1;
                *((void *)a2 + 1) = v54 + 1;
                char v61 = *(unsigned char *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0) {
                  goto LABEL_402;
                }
                v57 += 7;
                unint64_t v54 = v60;
                BOOL v15 = v58++ > 8;
              }
              while (!v15);
LABEL_279:
              LODWORD(v59) = 0;
              goto LABEL_402;
            }
            char v317 = 0;
            unsigned int v318 = 0;
            uint64_t v59 = 0;
            if (v55 <= v54) {
              unint64_t v55 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v55 == v54)
              {
                LODWORD(v59) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v319 = v54 + 1;
                char v320 = *(unsigned char *)(v56 + v54);
                *((void *)a2 + 1) = v319;
                v59 |= (unint64_t)(v320 & 0x7F) << v317;
                if (v320 < 0)
                {
                  v317 += 7;
                  unint64_t v54 = v319;
                  BOOL v15 = v318++ > 8;
                  if (v15) {
                    goto LABEL_279;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v59) = 0;
                }
              }
              break;
            }
LABEL_402:
            *((_DWORD *)this + 10) = v59;
            goto LABEL_378;
          case 'g':
            char v62 = v8[10];
            *((_WORD *)v8 + 4) |= 2u;
            v8[10] = v62;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 >= *((void *)a2 + 2))
            {
              BOOL v66 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v64 = v63 + 1;
              int v65 = *(unsigned __int8 *)(*(void *)a2 + v63);
              *((void *)a2 + 1) = v64;
              BOOL v66 = v65 != 0;
            }
            *((unsigned char *)this + 188) = v66;
            goto LABEL_378;
          case 'h':
            *(void *)v8 |= 0x200000uLL;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v67);
            goto LABEL_377;
          case 'i':
            *(void *)v8 |= 0x2000uLL;
            unint64_t v68 = *((void *)a2 + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v68);
            goto LABEL_377;
          case 'j':
            *(void *)v8 |= 0x20uLL;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v69);
            goto LABEL_377;
          case 'k':
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v70);
            goto LABEL_377;
          case 'l':
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 >= *((void *)a2 + 2))
            {
              BOOL v74 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v72 = v71 + 1;
              int v73 = *(unsigned __int8 *)(*(void *)a2 + v71);
              *((void *)a2 + 1) = v72;
              BOOL v74 = v73 != 0;
            }
            *((unsigned char *)this + 180) = v74;
            goto LABEL_378;
          case 'm':
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v75 = *((void *)a2 + 1);
            if (v75 >= *((void *)a2 + 2))
            {
              BOOL v78 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v76 = v75 + 1;
              int v77 = *(unsigned __int8 *)(*(void *)a2 + v75);
              *((void *)a2 + 1) = v76;
              BOOL v78 = v77 != 0;
            }
            *((unsigned char *)this + 156) = v78;
            goto LABEL_378;
          case 'n':
            char v79 = v8[10];
            *((_WORD *)v8 + 4) |= 0x200u;
            v8[10] = v79;
            unint64_t v80 = *((void *)a2 + 1);
            if (v80 >= *((void *)a2 + 2))
            {
              BOOL v83 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v81 = v80 + 1;
              int v82 = *(unsigned __int8 *)(*(void *)a2 + v80);
              *((void *)a2 + 1) = v81;
              BOOL v83 = v82 != 0;
            }
            *((unsigned char *)this + 196) = v83;
            goto LABEL_378;
          case 'o':
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 >= *((void *)a2 + 2))
            {
              BOOL v87 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v85 = v84 + 1;
              int v86 = *(unsigned __int8 *)(*(void *)a2 + v84);
              *((void *)a2 + 1) = v85;
              BOOL v87 = v86 != 0;
            }
            *((unsigned char *)this + 164) = v87;
            goto LABEL_378;
          case 'p':
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v88 = *((void *)a2 + 1);
            if (v88 >= *((void *)a2 + 2))
            {
              BOOL v91 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v89 = v88 + 1;
              int v90 = *(unsigned __int8 *)(*(void *)a2 + v88);
              *((void *)a2 + 1) = v89;
              BOOL v91 = v90 != 0;
            }
            *((unsigned char *)this + 172) = v91;
            goto LABEL_378;
          case 'q':
            char v92 = v8[10];
            *((_WORD *)v8 + 4) |= 4u;
            v8[10] = v92;
            unint64_t v93 = *((void *)a2 + 1);
            if (v93 >= *((void *)a2 + 2))
            {
              BOOL v96 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v94 = v93 + 1;
              int v95 = *(unsigned __int8 *)(*(void *)a2 + v93);
              *((void *)a2 + 1) = v94;
              BOOL v96 = v95 != 0;
            }
            *((unsigned char *)this + 189) = v96;
            goto LABEL_378;
          case 'r':
            *(void *)v8 |= 0x20000uLL;
            unint64_t v97 = *((void *)a2 + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v97);
            goto LABEL_377;
          case 's':
            *(void *)v8 |= 0x200uLL;
            unint64_t v98 = *((void *)a2 + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v98);
            goto LABEL_377;
          case 't':
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v99 = *((void *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)a2 + 2)) {
              goto LABEL_232;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v99);
            goto LABEL_377;
          case 'u':
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 >= *((void *)a2 + 2))
            {
              BOOL v103 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v101 = v100 + 1;
              int v102 = *(unsigned __int8 *)(*(void *)a2 + v100);
              *((void *)a2 + 1) = v101;
              BOOL v103 = v102 != 0;
            }
            *((unsigned char *)this + 184) = v103;
            goto LABEL_378;
          case 'v':
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v104 = *((void *)a2 + 1);
            if (v104 >= *((void *)a2 + 2))
            {
              BOOL v107 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v105 = v104 + 1;
              int v106 = *(unsigned __int8 *)(*(void *)a2 + v104);
              *((void *)a2 + 1) = v105;
              BOOL v107 = v106 != 0;
            }
            *((unsigned char *)this + 160) = v107;
            goto LABEL_378;
          case 'w':
            char v108 = v8[10];
            *((_WORD *)v8 + 4) |= 0x2000u;
            v8[10] = v108;
            unint64_t v109 = *((void *)a2 + 1);
            if (v109 >= *((void *)a2 + 2))
            {
              BOOL v112 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v110 = v109 + 1;
              int v111 = *(unsigned __int8 *)(*(void *)a2 + v109);
              *((void *)a2 + 1) = v110;
              BOOL v112 = v111 != 0;
            }
            *((unsigned char *)this + 200) = v112;
            goto LABEL_378;
          case 'x':
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v113 = *((void *)a2 + 1);
            if (v113 >= *((void *)a2 + 2))
            {
              BOOL v116 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v114 = v113 + 1;
              int v115 = *(unsigned __int8 *)(*(void *)a2 + v113);
              *((void *)a2 + 1) = v114;
              BOOL v116 = v115 != 0;
            }
            *((unsigned char *)this + 168) = v116;
            goto LABEL_378;
          case 'y':
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v117 = *((void *)a2 + 1);
            if (v117 >= *((void *)a2 + 2))
            {
              BOOL v120 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v118 = v117 + 1;
              int v119 = *(unsigned __int8 *)(*(void *)a2 + v117);
              *((void *)a2 + 1) = v118;
              BOOL v120 = v119 != 0;
            }
            *((unsigned char *)this + 176) = v120;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1003:
                *(void *)v8 |= 2uLL;
                unint64_t v38 = *((void *)a2 + 1);
                unint64_t v39 = *((void *)a2 + 2);
                uint64_t v40 = *(void *)a2;
                if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
                {
                  char v41 = 0;
                  unsigned int v42 = 0;
                  uint64_t v43 = 0;
                  do
                  {
                    unint64_t v44 = v38 + 1;
                    *((void *)a2 + 1) = v38 + 1;
                    char v45 = *(unsigned char *)(v40 + v38);
                    v43 |= (unint64_t)(v45 & 0x7F) << v41;
                    if ((v45 & 0x80) == 0) {
                      goto LABEL_394;
                    }
                    v41 += 7;
                    unint64_t v38 = v44;
                    BOOL v15 = v42++ > 8;
                  }
                  while (!v15);
LABEL_265:
                  uint64_t v43 = 0;
                  goto LABEL_394;
                }
                char v309 = 0;
                unsigned int v310 = 0;
                uint64_t v43 = 0;
                if (v39 <= v38) {
                  unint64_t v39 = *((void *)a2 + 1);
                }
                break;
              case 1004:
                *(void *)v8 |= 0x400000uLL;
                unint64_t v183 = *((void *)a2 + 1);
                if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v183);
                goto LABEL_377;
              case 1005:
                *(void *)v8 |= 0x4000uLL;
                unint64_t v184 = *((void *)a2 + 1);
                if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v184);
                goto LABEL_377;
              case 1006:
                *(void *)v8 |= 0x40uLL;
                unint64_t v185 = *((void *)a2 + 1);
                if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v185);
                goto LABEL_377;
              case 1007:
                *(void *)v8 |= 0x4000000uLL;
                unint64_t v186 = *((void *)a2 + 1);
                if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v186);
                goto LABEL_377;
              case 1008:
                *(void *)v8 |= 0x400000000000000uLL;
                unint64_t v187 = *((void *)a2 + 1);
                if (v187 >= *((void *)a2 + 2))
                {
                  BOOL v190 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v188 = v187 + 1;
                  int v189 = *(unsigned __int8 *)(*(void *)a2 + v187);
                  *((void *)a2 + 1) = v188;
                  BOOL v190 = v189 != 0;
                }
                *((unsigned char *)this + 181) = v190;
                goto LABEL_378;
              case 1009:
                *(void *)v8 |= 0x400000000uLL;
                unint64_t v191 = *((void *)a2 + 1);
                if (v191 >= *((void *)a2 + 2))
                {
                  BOOL v194 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v192 = v191 + 1;
                  int v193 = *(unsigned __int8 *)(*(void *)a2 + v191);
                  *((void *)a2 + 1) = v192;
                  BOOL v194 = v193 != 0;
                }
                *((unsigned char *)this + 157) = v194;
                goto LABEL_378;
              case 1010:
                char v195 = v8[10];
                *((_WORD *)v8 + 4) |= 0x400u;
                v8[10] = v195;
                unint64_t v196 = *((void *)a2 + 1);
                if (v196 >= *((void *)a2 + 2))
                {
                  BOOL v199 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v197 = v196 + 1;
                  int v198 = *(unsigned __int8 *)(*(void *)a2 + v196);
                  *((void *)a2 + 1) = v197;
                  BOOL v199 = v198 != 0;
                }
                *((unsigned char *)this + 197) = v199;
                goto LABEL_378;
              case 1011:
                *(void *)v8 |= 0x40000000000uLL;
                unint64_t v200 = *((void *)a2 + 1);
                if (v200 >= *((void *)a2 + 2))
                {
                  BOOL v203 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v201 = v200 + 1;
                  int v202 = *(unsigned __int8 *)(*(void *)a2 + v200);
                  *((void *)a2 + 1) = v201;
                  BOOL v203 = v202 != 0;
                }
                *((unsigned char *)this + 165) = v203;
                goto LABEL_378;
              case 1012:
                *(void *)v8 |= 0x4000000000000uLL;
                unint64_t v204 = *((void *)a2 + 1);
                if (v204 >= *((void *)a2 + 2))
                {
                  BOOL v207 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v205 = v204 + 1;
                  int v206 = *(unsigned __int8 *)(*(void *)a2 + v204);
                  *((void *)a2 + 1) = v205;
                  BOOL v207 = v206 != 0;
                }
                *((unsigned char *)this + 173) = v207;
                goto LABEL_378;
              case 1013:
                char v208 = v8[10];
                *((_WORD *)v8 + 4) |= 8u;
                v8[10] = v208;
                unint64_t v209 = *((void *)a2 + 1);
                if (v209 >= *((void *)a2 + 2))
                {
                  BOOL v212 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v210 = v209 + 1;
                  int v211 = *(unsigned __int8 *)(*(void *)a2 + v209);
                  *((void *)a2 + 1) = v210;
                  BOOL v212 = v211 != 0;
                }
                *((unsigned char *)this + 190) = v212;
                goto LABEL_378;
              case 1014:
                *(void *)v8 |= 0x40000uLL;
                unint64_t v213 = *((void *)a2 + 1);
                if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v213);
                goto LABEL_377;
              case 1015:
                *(void *)v8 |= 0x400uLL;
                unint64_t v214 = *((void *)a2 + 1);
                if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v214);
                goto LABEL_377;
              case 1016:
                *(void *)v8 |= 0x40000000uLL;
                unint64_t v215 = *((void *)a2 + 1);
                if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_232;
                }
                *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v215);
                goto LABEL_377;
              case 1017:
                *(void *)v8 |= 0x4000000000000000uLL;
                unint64_t v216 = *((void *)a2 + 1);
                if (v216 >= *((void *)a2 + 2))
                {
                  BOOL v219 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v217 = v216 + 1;
                  int v218 = *(unsigned __int8 *)(*(void *)a2 + v216);
                  *((void *)a2 + 1) = v217;
                  BOOL v219 = v218 != 0;
                }
                *((unsigned char *)this + 185) = v219;
                goto LABEL_378;
              case 1018:
                *(void *)v8 |= 0x4000000000uLL;
                unint64_t v220 = *((void *)a2 + 1);
                if (v220 >= *((void *)a2 + 2))
                {
                  BOOL v223 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v221 = v220 + 1;
                  int v222 = *(unsigned __int8 *)(*(void *)a2 + v220);
                  *((void *)a2 + 1) = v221;
                  BOOL v223 = v222 != 0;
                }
                *((unsigned char *)this + 161) = v223;
                goto LABEL_378;
              case 1019:
                char v224 = v8[10];
                *((_WORD *)v8 + 4) |= 0x4000u;
                v8[10] = v224;
                unint64_t v225 = *((void *)a2 + 1);
                if (v225 >= *((void *)a2 + 2))
                {
                  BOOL v228 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v226 = v225 + 1;
                  int v227 = *(unsigned __int8 *)(*(void *)a2 + v225);
                  *((void *)a2 + 1) = v226;
                  BOOL v228 = v227 != 0;
                }
                *((unsigned char *)this + 201) = v228;
                goto LABEL_378;
              case 1020:
                *(void *)v8 |= 0x400000000000uLL;
                unint64_t v229 = *((void *)a2 + 1);
                if (v229 >= *((void *)a2 + 2))
                {
                  BOOL v232 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v230 = v229 + 1;
                  int v231 = *(unsigned __int8 *)(*(void *)a2 + v229);
                  *((void *)a2 + 1) = v230;
                  BOOL v232 = v231 != 0;
                }
                *((unsigned char *)this + 169) = v232;
                goto LABEL_378;
              case 1021:
                *(void *)v8 |= 0x40000000000000uLL;
                unint64_t v233 = *((void *)a2 + 1);
                if (v233 >= *((void *)a2 + 2))
                {
                  BOOL v236 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v234 = v233 + 1;
                  int v235 = *(unsigned __int8 *)(*(void *)a2 + v233);
                  *((void *)a2 + 1) = v234;
                  BOOL v236 = v235 != 0;
                }
                *((unsigned char *)this + 177) = v236;
                goto LABEL_378;
              case 1022:
                char v237 = v8[10];
                *((_WORD *)v8 + 4) |= 0x40u;
                v8[10] = v237;
                unint64_t v238 = *((void *)a2 + 1);
                if (v238 >= *((void *)a2 + 2))
                {
                  BOOL v241 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v239 = v238 + 1;
                  int v240 = *(unsigned __int8 *)(*(void *)a2 + v238);
                  *((void *)a2 + 1) = v239;
                  BOOL v241 = v240 != 0;
                }
                *((unsigned char *)this + 193) = v241;
                goto LABEL_378;
              default:
                goto LABEL_153;
            }
            break;
        }
        while (1)
        {
          if (v39 == v38)
          {
            uint64_t v43 = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_394;
          }
          unint64_t v311 = v38 + 1;
          char v312 = *(unsigned char *)(v40 + v38);
          *((void *)a2 + 1) = v311;
          v43 |= (unint64_t)(v312 & 0x7F) << v309;
          if ((v312 & 0x80) == 0) {
            break;
          }
          v309 += 7;
          unint64_t v38 = v311;
          BOOL v15 = v310++ > 8;
          if (v15) {
            goto LABEL_265;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          uint64_t v43 = 0;
        }
LABEL_394:
        *((void *)this + 2) = v43;
      }
LABEL_378:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRemoteAudioResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 204);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 0x65u);
    int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v5 = *(unsigned __int16 *)(this + 212) | (*(unsigned __int8 *)(this + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x66u);
    int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 188), 0x67u);
    int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    uint64_t v4 = *(void *)(v3 + 204);
    if ((v4 & 0x200000) == 0)
    {
LABEL_8:
      if ((v4 & 0x2000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x68u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x69u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x6Au);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x6Bu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 180), 0x6Cu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 156), 0x6Du);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 196), 0x6Eu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 164), 0x6Fu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 172), 0x70u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 189), 0x71u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x72u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x73u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x74u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 184), 0x75u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 160), 0x76u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 200), 0x77u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20000000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 168), 0x78u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0) {
      goto LABEL_26;
    }
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 176), 0x79u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x3EBu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x3ECu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x3EDu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x3EEu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x3EFu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 181), 0x3F0u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400) == 0) {
      goto LABEL_33;
    }
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 157), 0x3F1u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x400) == 0)
  {
LABEL_33:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 197), 0x3F2u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 165), 0x3F3u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 8) == 0) {
      goto LABEL_36;
    }
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 173), 0x3F4u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 190), 0x3F5u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 0x400) == 0) {
      goto LABEL_38;
    }
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x3F6u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x3F7u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x4000000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x3F8u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 185), 0x3F9u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 161), 0x3FAu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x4000) == 0)
  {
LABEL_42:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 201), 0x3FBu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 169), 0x3FCu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x40000000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 177), 0x3FDu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0) {
      goto LABEL_46;
    }
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 193), 0x3FEu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x44Fu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800000) == 0)
  {
LABEL_47:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x450u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0) {
      goto LABEL_49;
    }
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x451u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_49:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x452u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x453u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800000000000000) == 0)
  {
LABEL_51:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 182), 0x454u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0) {
      goto LABEL_53;
    }
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 158), 0x455u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 198), 0x456u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 166), 0x457u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x10) == 0) {
      goto LABEL_56;
    }
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 174), 0x458u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x10) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 191), 0x459u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0) {
      goto LABEL_58;
    }
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x45Au);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x45Bu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x45Cu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 186), 0x45Du);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 162), 0x45Eu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x8000) == 0)
  {
LABEL_62:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 202), 0x45Fu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_63:
    if ((v4 & 0x80000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 170), 0x460u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x80000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x80) == 0) {
      goto LABEL_65;
    }
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 178), 0x461u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x80) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0) {
      goto LABEL_66;
    }
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 194), 0x462u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x4B3u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x4B4u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_68:
    if ((v4 & 0x100) == 0) {
      goto LABEL_69;
    }
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x4B5u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_69:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x4B6u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x4B7u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 183), 0x4B8u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 159), 0x4B9u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x1000) == 0)
  {
LABEL_73:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 199), 0x4BAu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x10000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 167), 0x4BBu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x20) == 0) {
      goto LABEL_76;
    }
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 175), 0x4BCu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 192), 0x4BDu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_77:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x4BEu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_78:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x4BFu);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0) {
      goto LABEL_80;
    }
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x4C0u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 1) == 0)
  {
LABEL_80:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 187), 0x4C1u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 163), 0x4C2u);
  int v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_82:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 203), 0x4C3u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  uint64_t v4 = *(void *)(v3 + 204);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x100000000000000) == 0) {
      goto LABEL_84;
    }
LABEL_163:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 179), 0x4C5u);
    if ((*(_WORD *)(v3 + 212) & 0x100) == 0) {
      return this;
    }
    goto LABEL_164;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 171), 0x4C4u);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  if ((*(void *)(v3 + 204) & 0x100000000000000) != 0) {
    goto LABEL_163;
  }
LABEL_84:
  if ((v5 & 0x100) == 0) {
    return this;
  }
LABEL_164:
  char v6 = *(unsigned char *)(v3 + 195);

  return PB::Writer::write(a2, v6, 0x4C6u);
}

uint64_t CMMsl::KappaRemoteAudioResult::hash_value(CMMsl::KappaRemoteAudioResult *this)
{
  int v1 = *((unsigned __int16 *)this + 106) | (*((unsigned __int8 *)this + 214) << 16);
  uint64_t v2 = *(void *)((char *)this + 204);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 1);
    if ((v2 & 0x10) != 0)
    {
LABEL_3:
      uint64_t v131 = *((int *)this + 10);
      if ((*((_WORD *)this + 106) & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_150;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v131 = 0;
  if ((*((_WORD *)this + 106) & 2) != 0)
  {
LABEL_4:
    uint64_t v130 = *((unsigned __int8 *)this + 188);
    if ((v2 & 0x200000) != 0) {
      goto LABEL_5;
    }
LABEL_151:
    uint64_t v129 = 0;
    if ((*((_WORD *)this + 106) & 4) != 0) {
      goto LABEL_8;
    }
    goto LABEL_152;
  }
LABEL_150:
  uint64_t v130 = 0;
  if ((v2 & 0x200000) == 0) {
    goto LABEL_151;
  }
LABEL_5:
  float v4 = *((float *)this + 27);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v129 = v5;
  if ((*((_WORD *)this + 106) & 4) != 0)
  {
LABEL_8:
    uint64_t v128 = *((unsigned __int8 *)this + 189);
    if ((v2 & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_153;
  }
LABEL_152:
  uint64_t v128 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_9:
    uint64_t v127 = *((void *)this + 2);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_10;
    }
LABEL_154:
    uint64_t v126 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_13;
    }
LABEL_155:
    uint64_t v125 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_156:
    uint64_t v124 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_19;
    }
LABEL_157:
    uint64_t v123 = 0;
    if ((v2 & 0x400000000000000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_158;
  }
LABEL_153:
  uint64_t v127 = 0;
  if ((v2 & 0x400000) == 0) {
    goto LABEL_154;
  }
LABEL_10:
  float v6 = *((float *)this + 28);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v126 = v7;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_155;
  }
LABEL_13:
  float v8 = *((float *)this + 20);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v125 = v9;
  if ((v2 & 0x40) == 0) {
    goto LABEL_156;
  }
LABEL_16:
  float v10 = *((float *)this + 12);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v124 = v11;
  if ((v2 & 0x4000000) == 0) {
    goto LABEL_157;
  }
LABEL_19:
  float v12 = *((float *)this + 32);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  uint64_t v123 = v13;
  if ((v2 & 0x400000000000000) != 0)
  {
LABEL_22:
    uint64_t v122 = *((unsigned __int8 *)this + 181);
    if ((v2 & 0x400000000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_159;
  }
LABEL_158:
  uint64_t v122 = 0;
  if ((v2 & 0x400000000) != 0)
  {
LABEL_23:
    uint64_t v121 = *((unsigned __int8 *)this + 157);
    if ((*((_WORD *)this + 106) & 0x400) != 0) {
      goto LABEL_24;
    }
    goto LABEL_160;
  }
LABEL_159:
  uint64_t v121 = 0;
  if ((*((_WORD *)this + 106) & 0x400) != 0)
  {
LABEL_24:
    uint64_t v120 = *((unsigned __int8 *)this + 197);
    if ((v2 & 0x40000000000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_161;
  }
LABEL_160:
  uint64_t v120 = 0;
  if ((v2 & 0x40000000000) != 0)
  {
LABEL_25:
    uint64_t v119 = *((unsigned __int8 *)this + 165);
    if ((v2 & 0x4000000000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_162;
  }
LABEL_161:
  uint64_t v119 = 0;
  if ((v2 & 0x4000000000000) != 0)
  {
LABEL_26:
    uint64_t v118 = *((unsigned __int8 *)this + 173);
    if ((*((_WORD *)this + 106) & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_163;
  }
LABEL_162:
  uint64_t v118 = 0;
  if ((*((_WORD *)this + 106) & 8) != 0)
  {
LABEL_27:
    uint64_t v117 = *((unsigned __int8 *)this + 190);
    if ((v2 & 0x40000) != 0) {
      goto LABEL_28;
    }
LABEL_164:
    uint64_t v116 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_31;
    }
LABEL_165:
    uint64_t v115 = 0;
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_34;
    }
LABEL_166:
    uint64_t v114 = 0;
    if ((v2 & 0x4000000000000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_167;
  }
LABEL_163:
  uint64_t v117 = 0;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_164;
  }
LABEL_28:
  float v14 = *((float *)this + 24);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  uint64_t v116 = v15;
  if ((v2 & 0x400) == 0) {
    goto LABEL_165;
  }
LABEL_31:
  float v16 = *((float *)this + 16);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  uint64_t v115 = v17;
  if ((v2 & 0x40000000) == 0) {
    goto LABEL_166;
  }
LABEL_34:
  float v18 = *((float *)this + 36);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v114 = v19;
  if ((v2 & 0x4000000000000000) != 0)
  {
LABEL_37:
    uint64_t v113 = *((unsigned __int8 *)this + 185);
    if ((v2 & 0x4000000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_168;
  }
LABEL_167:
  uint64_t v113 = 0;
  if ((v2 & 0x4000000000) != 0)
  {
LABEL_38:
    uint64_t v112 = *((unsigned __int8 *)this + 161);
    if ((*((_WORD *)this + 106) & 0x4000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_169;
  }
LABEL_168:
  uint64_t v112 = 0;
  if ((*((_WORD *)this + 106) & 0x4000) != 0)
  {
LABEL_39:
    uint64_t v111 = *((unsigned __int8 *)this + 201);
    if ((v2 & 0x400000000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_170;
  }
LABEL_169:
  uint64_t v111 = 0;
  if ((v2 & 0x400000000000) != 0)
  {
LABEL_40:
    uint64_t v110 = *((unsigned __int8 *)this + 169);
    if ((v2 & 0x40000000000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_171;
  }
LABEL_170:
  uint64_t v110 = 0;
  if ((v2 & 0x40000000000000) != 0)
  {
LABEL_41:
    uint64_t v109 = *((unsigned __int8 *)this + 177);
    if ((*((_WORD *)this + 106) & 0x40) != 0) {
      goto LABEL_42;
    }
    goto LABEL_172;
  }
LABEL_171:
  uint64_t v109 = 0;
  if ((*((_WORD *)this + 106) & 0x40) != 0)
  {
LABEL_42:
    uint64_t v108 = *((unsigned __int8 *)this + 193);
    if ((v2 & 4) != 0) {
      goto LABEL_43;
    }
    goto LABEL_173;
  }
LABEL_172:
  uint64_t v108 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_43:
    uint64_t v107 = *((void *)this + 3);
    if ((v2 & 0x800000) != 0) {
      goto LABEL_44;
    }
LABEL_174:
    uint64_t v106 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_47;
    }
LABEL_175:
    uint64_t v105 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_50;
    }
LABEL_176:
    uint64_t v104 = 0;
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_53;
    }
LABEL_177:
    uint64_t v103 = 0;
    if ((v2 & 0x800000000000000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_178;
  }
LABEL_173:
  uint64_t v107 = 0;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_174;
  }
LABEL_44:
  float v20 = *((float *)this + 29);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  uint64_t v106 = v21;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_175;
  }
LABEL_47:
  float v22 = *((float *)this + 21);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  uint64_t v105 = v23;
  if ((v2 & 0x80) == 0) {
    goto LABEL_176;
  }
LABEL_50:
  float v24 = *((float *)this + 13);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  uint64_t v104 = v25;
  if ((v2 & 0x8000000) == 0) {
    goto LABEL_177;
  }
LABEL_53:
  float v26 = *((float *)this + 33);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  uint64_t v103 = v27;
  if ((v2 & 0x800000000000000) != 0)
  {
LABEL_56:
    uint64_t v102 = *((unsigned __int8 *)this + 182);
    if ((v2 & 0x800000000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_179;
  }
LABEL_178:
  uint64_t v102 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_57:
    uint64_t v101 = *((unsigned __int8 *)this + 158);
    if ((*((_WORD *)this + 106) & 0x800) != 0) {
      goto LABEL_58;
    }
    goto LABEL_180;
  }
LABEL_179:
  uint64_t v101 = 0;
  if ((*((_WORD *)this + 106) & 0x800) != 0)
  {
LABEL_58:
    uint64_t v100 = *((unsigned __int8 *)this + 198);
    if ((v2 & 0x80000000000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_181;
  }
LABEL_180:
  uint64_t v100 = 0;
  if ((v2 & 0x80000000000) != 0)
  {
LABEL_59:
    uint64_t v99 = *((unsigned __int8 *)this + 166);
    if ((v2 & 0x8000000000000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_182;
  }
LABEL_181:
  uint64_t v99 = 0;
  if ((v2 & 0x8000000000000) != 0)
  {
LABEL_60:
    uint64_t v98 = *((unsigned __int8 *)this + 174);
    if ((*((_WORD *)this + 106) & 0x10) != 0) {
      goto LABEL_61;
    }
    goto LABEL_183;
  }
LABEL_182:
  uint64_t v98 = 0;
  if ((*((_WORD *)this + 106) & 0x10) != 0)
  {
LABEL_61:
    uint64_t v97 = *((unsigned __int8 *)this + 191);
    if ((v2 & 0x80000) != 0) {
      goto LABEL_62;
    }
LABEL_184:
    uint64_t v96 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_65;
    }
LABEL_185:
    uint64_t v95 = 0;
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_68;
    }
LABEL_186:
    uint64_t v94 = 0;
    if (v2 < 0) {
      goto LABEL_71;
    }
    goto LABEL_187;
  }
LABEL_183:
  uint64_t v97 = 0;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_184;
  }
LABEL_62:
  float v28 = *((float *)this + 25);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  uint64_t v96 = v29;
  if ((v2 & 0x800) == 0) {
    goto LABEL_185;
  }
LABEL_65:
  float v30 = *((float *)this + 17);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v95 = v31;
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_186;
  }
LABEL_68:
  float v32 = *((float *)this + 37);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  uint64_t v94 = v33;
  if (v2 < 0)
  {
LABEL_71:
    uint64_t v93 = *((unsigned __int8 *)this + 186);
    if ((v2 & 0x8000000000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_188;
  }
LABEL_187:
  uint64_t v93 = 0;
  if ((v2 & 0x8000000000) != 0)
  {
LABEL_72:
    uint64_t v92 = *((unsigned __int8 *)this + 162);
    if ((*((_WORD *)this + 106) & 0x8000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_189;
  }
LABEL_188:
  uint64_t v92 = 0;
  if ((*((_WORD *)this + 106) & 0x8000) != 0)
  {
LABEL_73:
    uint64_t v91 = *((unsigned __int8 *)this + 202);
    if ((v2 & 0x800000000000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_190;
  }
LABEL_189:
  uint64_t v91 = 0;
  if ((v2 & 0x800000000000) != 0)
  {
LABEL_74:
    uint64_t v90 = *((unsigned __int8 *)this + 170);
    if ((v2 & 0x80000000000000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_191;
  }
LABEL_190:
  uint64_t v90 = 0;
  if ((v2 & 0x80000000000000) != 0)
  {
LABEL_75:
    uint64_t v89 = *((unsigned __int8 *)this + 178);
    if ((*((_WORD *)this + 106) & 0x80) != 0) {
      goto LABEL_76;
    }
    goto LABEL_192;
  }
LABEL_191:
  uint64_t v89 = 0;
  if ((*((_WORD *)this + 106) & 0x80) != 0)
  {
LABEL_76:
    uint64_t v88 = *((unsigned __int8 *)this + 194);
    if ((v2 & 8) != 0) {
      goto LABEL_77;
    }
    goto LABEL_193;
  }
LABEL_192:
  uint64_t v88 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_77:
    uint64_t v87 = *((void *)this + 4);
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_78;
    }
LABEL_194:
    uint64_t v86 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_81;
    }
LABEL_195:
    uint64_t v85 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_84;
    }
LABEL_196:
    uint64_t v84 = 0;
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_87;
    }
LABEL_197:
    uint64_t v83 = 0;
    if ((v2 & 0x1000000000000000) != 0) {
      goto LABEL_90;
    }
    goto LABEL_198;
  }
LABEL_193:
  uint64_t v87 = 0;
  if ((v2 & 0x1000000) == 0) {
    goto LABEL_194;
  }
LABEL_78:
  float v34 = *((float *)this + 30);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  uint64_t v86 = v35;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_195;
  }
LABEL_81:
  float v36 = *((float *)this + 22);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  uint64_t v85 = v37;
  if ((v2 & 0x100) == 0) {
    goto LABEL_196;
  }
LABEL_84:
  float v38 = *((float *)this + 14);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  uint64_t v84 = v39;
  if ((v2 & 0x10000000) == 0) {
    goto LABEL_197;
  }
LABEL_87:
  float v40 = *((float *)this + 34);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  uint64_t v83 = v41;
  if ((v2 & 0x1000000000000000) != 0)
  {
LABEL_90:
    uint64_t v82 = *((unsigned __int8 *)this + 183);
    if ((v2 & 0x1000000000) != 0) {
      goto LABEL_91;
    }
    goto LABEL_199;
  }
LABEL_198:
  uint64_t v82 = 0;
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_91:
    uint64_t v81 = *((unsigned __int8 *)this + 159);
    if ((*((_WORD *)this + 106) & 0x1000) != 0) {
      goto LABEL_92;
    }
    goto LABEL_200;
  }
LABEL_199:
  uint64_t v81 = 0;
  if ((*((_WORD *)this + 106) & 0x1000) != 0)
  {
LABEL_92:
    uint64_t v80 = *((unsigned __int8 *)this + 199);
    if ((v2 & 0x100000000000) != 0) {
      goto LABEL_93;
    }
    goto LABEL_201;
  }
LABEL_200:
  uint64_t v80 = 0;
  if ((v2 & 0x100000000000) != 0)
  {
LABEL_93:
    uint64_t v79 = *((unsigned __int8 *)this + 167);
    if ((v2 & 0x10000000000000) != 0) {
      goto LABEL_94;
    }
    goto LABEL_202;
  }
LABEL_201:
  uint64_t v79 = 0;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_94:
    uint64_t v78 = *((unsigned __int8 *)this + 175);
    if ((*((_WORD *)this + 106) & 0x20) != 0) {
      goto LABEL_95;
    }
    goto LABEL_203;
  }
LABEL_202:
  uint64_t v78 = 0;
  if ((*((_WORD *)this + 106) & 0x20) != 0)
  {
LABEL_95:
    uint64_t v42 = *((unsigned __int8 *)this + 192);
    if ((v2 & 0x100000) != 0) {
      goto LABEL_96;
    }
LABEL_204:
    uint64_t v44 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_100;
    }
LABEL_205:
    uint64_t v46 = 0;
    if ((v2 & 0x100000000) != 0) {
      goto LABEL_104;
    }
LABEL_206:
    uint64_t v48 = 0;
    if (*((_WORD *)this + 106)) {
      goto LABEL_108;
    }
    goto LABEL_207;
  }
LABEL_203:
  uint64_t v42 = 0;
  if ((v2 & 0x100000) == 0) {
    goto LABEL_204;
  }
LABEL_96:
  float v43 = *((float *)this + 26);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_205;
  }
LABEL_100:
  float v45 = *((float *)this + 18);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = LODWORD(v45);
  }
  if ((v2 & 0x100000000) == 0) {
    goto LABEL_206;
  }
LABEL_104:
  float v47 = *((float *)this + 38);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = LODWORD(v47);
  }
  if (*((_WORD *)this + 106))
  {
LABEL_108:
    uint64_t v49 = *((unsigned __int8 *)this + 187);
    if ((v2 & 0x10000000000) != 0) {
      goto LABEL_109;
    }
    goto LABEL_208;
  }
LABEL_207:
  uint64_t v49 = 0;
  if ((v2 & 0x10000000000) != 0)
  {
LABEL_109:
    uint64_t v50 = *((unsigned __int8 *)this + 163);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_110;
    }
    goto LABEL_209;
  }
LABEL_208:
  uint64_t v50 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_110:
    uint64_t v51 = *((unsigned __int8 *)this + 203);
    if ((v2 & 0x1000000000000) != 0) {
      goto LABEL_111;
    }
    goto LABEL_210;
  }
LABEL_209:
  uint64_t v51 = 0;
  if ((v2 & 0x1000000000000) != 0)
  {
LABEL_111:
    uint64_t v52 = *((unsigned __int8 *)this + 171);
    if ((v2 & 0x100000000000000) != 0) {
      goto LABEL_112;
    }
    goto LABEL_211;
  }
LABEL_210:
  uint64_t v52 = 0;
  if ((v2 & 0x100000000000000) != 0)
  {
LABEL_112:
    uint64_t v53 = *((unsigned __int8 *)this + 179);
    if ((*((_WORD *)this + 106) & 0x100) != 0) {
      goto LABEL_113;
    }
    goto LABEL_212;
  }
LABEL_211:
  uint64_t v53 = 0;
  if ((*((_WORD *)this + 106) & 0x100) != 0)
  {
LABEL_113:
    uint64_t v54 = *((unsigned __int8 *)this + 195);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_114;
    }
LABEL_213:
    uint64_t v56 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_118;
    }
LABEL_214:
    uint64_t v58 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_122;
    }
LABEL_215:
    uint64_t v60 = 0;
    if ((v2 & 0x200000000000000) != 0) {
      goto LABEL_126;
    }
    goto LABEL_216;
  }
LABEL_212:
  uint64_t v54 = 0;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_213;
  }
LABEL_114:
  float v55 = *((float *)this + 19);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = LODWORD(v55);
  }
  if ((v2 & 0x20) == 0) {
    goto LABEL_214;
  }
LABEL_118:
  float v57 = *((float *)this + 11);
  if (v57 == 0.0) {
    uint64_t v58 = 0;
  }
  else {
    uint64_t v58 = LODWORD(v57);
  }
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_215;
  }
LABEL_122:
  float v59 = *((float *)this + 31);
  if (v59 == 0.0) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = LODWORD(v59);
  }
  if ((v2 & 0x200000000000000) != 0)
  {
LABEL_126:
    uint64_t v61 = *((unsigned __int8 *)this + 180);
    if ((v2 & 0x200000000) != 0) {
      goto LABEL_127;
    }
    goto LABEL_217;
  }
LABEL_216:
  uint64_t v61 = 0;
  if ((v2 & 0x200000000) != 0)
  {
LABEL_127:
    uint64_t v62 = *((unsigned __int8 *)this + 156);
    if ((*((_WORD *)this + 106) & 0x200) != 0) {
      goto LABEL_128;
    }
    goto LABEL_218;
  }
LABEL_217:
  uint64_t v62 = 0;
  if ((*((_WORD *)this + 106) & 0x200) != 0)
  {
LABEL_128:
    uint64_t v63 = *((unsigned __int8 *)this + 196);
    if ((v2 & 0x20000000000) != 0) {
      goto LABEL_129;
    }
    goto LABEL_219;
  }
LABEL_218:
  uint64_t v63 = 0;
  if ((v2 & 0x20000000000) != 0)
  {
LABEL_129:
    uint64_t v64 = *((unsigned __int8 *)this + 164);
    if ((v2 & 0x2000000000000) != 0) {
      goto LABEL_130;
    }
    goto LABEL_220;
  }
LABEL_219:
  uint64_t v64 = 0;
  if ((v2 & 0x2000000000000) != 0)
  {
LABEL_130:
    uint64_t v65 = *((unsigned __int8 *)this + 172);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_131;
    }
LABEL_221:
    uint64_t v67 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_135;
    }
LABEL_222:
    uint64_t v69 = 0;
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_139;
    }
LABEL_223:
    uint64_t v71 = 0;
    if ((v2 & 0x2000000000000000) != 0) {
      goto LABEL_143;
    }
    goto LABEL_224;
  }
LABEL_220:
  uint64_t v65 = 0;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_221;
  }
LABEL_131:
  float v66 = *((float *)this + 23);
  if (v66 == 0.0) {
    uint64_t v67 = 0;
  }
  else {
    uint64_t v67 = LODWORD(v66);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_222;
  }
LABEL_135:
  float v68 = *((float *)this + 15);
  if (v68 == 0.0) {
    uint64_t v69 = 0;
  }
  else {
    uint64_t v69 = LODWORD(v68);
  }
  if ((v2 & 0x20000000) == 0) {
    goto LABEL_223;
  }
LABEL_139:
  float v70 = *((float *)this + 35);
  if (v70 == 0.0) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = LODWORD(v70);
  }
  if ((v2 & 0x2000000000000000) != 0)
  {
LABEL_143:
    uint64_t v72 = *((unsigned __int8 *)this + 184);
    if ((v2 & 0x2000000000) != 0) {
      goto LABEL_144;
    }
    goto LABEL_225;
  }
LABEL_224:
  uint64_t v72 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_144:
    uint64_t v73 = *((unsigned __int8 *)this + 160);
    if ((*((_WORD *)this + 106) & 0x2000) != 0) {
      goto LABEL_145;
    }
    goto LABEL_226;
  }
LABEL_225:
  uint64_t v73 = 0;
  if ((*((_WORD *)this + 106) & 0x2000) != 0)
  {
LABEL_145:
    uint64_t v74 = *((unsigned __int8 *)this + 200);
    if ((v2 & 0x200000000000) != 0) {
      goto LABEL_146;
    }
LABEL_227:
    uint64_t v75 = 0;
    if ((v2 & 0x20000000000000) != 0) {
      goto LABEL_147;
    }
LABEL_228:
    uint64_t v76 = 0;
    return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
  }
LABEL_226:
  uint64_t v74 = 0;
  if ((v2 & 0x200000000000) == 0) {
    goto LABEL_227;
  }
LABEL_146:
  uint64_t v75 = *((unsigned __int8 *)this + 168);
  if ((v2 & 0x20000000000000) == 0) {
    goto LABEL_228;
  }
LABEL_147:
  uint64_t v76 = *((unsigned __int8 *)this + 176);
  return v131 ^ v3 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v42 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50 ^ v51 ^ v52 ^ v53 ^ v54 ^ v56 ^ v58 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v67 ^ v69 ^ v71 ^ v72 ^ v73 ^ v74 ^ v75 ^ v76;
}

void CMMsl::KappaRoads::~KappaRoads(CMMsl::KappaRoads *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this, const CMMsl::KappaRoads *a2)
{
  *(void *)this = off_1003A6DD8;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 32) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 32))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 32) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_10:
    int v7 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = v3 | 8;
    *(_DWORD *)(this + 28) = v7;
    return this;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 24) = v6;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_10;
  }
  return this;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, const CMMsl::KappaRoads *a2)
{
  if ((const CMMsl::KappaRoads *)a1 != a2)
  {
    CMMsl::KappaRoads::KappaRoads((uint64_t)v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v4;
    *(void *)&long long v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v9;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoads *a2, CMMsl::KappaRoads *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  return result;
}

float CMMsl::KappaRoads::KappaRoads(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6DD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6DD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::KappaRoads::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v8 = off_1003A6DD8;
    int v3 = *(_DWORD *)(a2 + 24);
    uint64_t v4 = *(void *)(a2 + 28);
    *(_DWORD *)(a2 + 32) = 0;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v9 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    int v10 = v5;
    uint64_t v6 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v4;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::KappaRoads::formatText(CMMsl::KappaRoads *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "searchTimestamp", *((void *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoads::readFrom(CMMsl::KappaRoads *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_74;
                  }
                  unint64_t v41 = v20++;
                  char v42 = *(unsigned char *)(v21 + v41);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_73;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_73:
                unint64_t v2 = v41 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_74;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_74:
              *((void *)this + 2) = v24;
              goto LABEL_85;
            case 2u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_78:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_78;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_79:
              *((void *)this + 1) = v31;
              goto LABEL_85;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_85;
            case 4u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_84;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_83:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_83;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_84:
              *((_DWORD *)this + 7) = v37;
LABEL_85:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_85;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}