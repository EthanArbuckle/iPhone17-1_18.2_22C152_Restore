uint64_t CMMsl::FallDetectionStateMachine::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t vars8;

  v3 = this;
  v4 = *(void *)(this + 156);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    v4 = *(void *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 2u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 5u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 6u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 7u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 8u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 9u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0xAu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xBu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0xCu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0xDu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xEu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 44), 0xFu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 154), 0x10u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 153), 0x11u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x12u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x13u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x14u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 155), 0x15u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 152), 0x16u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x17u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x18u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x19u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x1Au);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x1Bu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x1Cu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x1Du);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x1Eu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x1Fu);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x20u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x21u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_36;
    }
LABEL_72:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x23u);
    if ((*(void *)(v3 + 156) & 1) == 0) {
      return this;
    }
    goto LABEL_73;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x22u);
  v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_72;
  }
LABEL_36:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_73:
  v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 0x24u);
}

BOOL CMMsl::FallDetectionStateMachine::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 156);
  uint64_t v3 = *(void *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(unsigned __int8 *)(a1 + 154) != *(unsigned __int8 *)(a2 + 154)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(unsigned __int8 *)(a1 + 153) != *(unsigned __int8 *)(a2 + 153)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(unsigned __int8 *)(a1 + 155) != *(unsigned __int8 *)(a2 + 155)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(unsigned __int8 *)(a1 + 152) != *(unsigned __int8 *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 108) != *(_DWORD *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(_DWORD *)(a1 + 112) != *(_DWORD *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 104) != *(_DWORD *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 156) & 1) == 0;
  if (v2) {
    return (v3 & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v4;
}

uint64_t CMMsl::FallDetectionStateMachine::hash_value(CMMsl::FallDetectionStateMachine *this)
{
  uint64_t v1 = *(void *)((char *)this + 156);
  if ((v1 & 4) != 0)
  {
    if (*((double *)this + 3) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 3);
    }
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v52 = *((void *)this + 4);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_68;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v52 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v51 = *((void *)this + 2);
    if ((v1 & 0x400) != 0) {
      goto LABEL_5;
    }
LABEL_69:
    uint64_t v50 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_8;
    }
LABEL_70:
    uint64_t v49 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_11;
    }
LABEL_71:
    uint64_t v48 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_14;
    }
    goto LABEL_72;
  }
LABEL_68:
  uint64_t v51 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_69;
  }
LABEL_5:
  float v3 = *((float *)this + 16);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v50 = v4;
  if ((v1 & 0x200) == 0) {
    goto LABEL_70;
  }
LABEL_8:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v49 = v6;
  if ((v1 & 0x100) == 0) {
    goto LABEL_71;
  }
LABEL_11:
  float v7 = *((float *)this + 14);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v48 = v8;
  if ((v1 & 0x800) != 0)
  {
LABEL_14:
    uint64_t v47 = *((int *)this + 17);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v47 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_15:
    uint64_t v46 = *((int *)this + 37);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_16;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v46 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_16:
    uint64_t v45 = *((int *)this + 18);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_17;
    }
LABEL_75:
    uint64_t v44 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_20;
    }
LABEL_76:
    uint64_t v12 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_24;
    }
LABEL_77:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_74:
  uint64_t v45 = 0;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_75;
  }
LABEL_17:
  float v9 = *((float *)this + 34);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v44 = v10;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_76;
  }
LABEL_20:
  float v11 = *((float *)this + 35);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = LODWORD(v11);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_77;
  }
LABEL_24:
  float v13 = *((float *)this + 33);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = LODWORD(v13);
  }
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    uint64_t v15 = *((int *)this + 24);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_29;
    }
LABEL_79:
    uint64_t v17 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_78:
  uint64_t v15 = 0;
  if ((v1 & 0x4000) == 0) {
    goto LABEL_79;
  }
LABEL_29:
  float v16 = *((float *)this + 20);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_33:
    uint64_t v18 = *((int *)this + 11);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v18 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_34:
    uint64_t v19 = *((unsigned __int8 *)this + 154);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v19 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_35:
    uint64_t v20 = *((unsigned __int8 *)this + 153);
    if ((v1 & 0x80) != 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v20 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_36:
    uint64_t v21 = *((int *)this + 13);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v21 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_37:
    uint64_t v22 = *((int *)this + 36);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v22 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_38:
    uint64_t v23 = *((int *)this + 31);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v23 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_39:
    uint64_t v24 = *((unsigned __int8 *)this + 155);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v24 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_40:
    uint64_t v25 = *((unsigned __int8 *)this + 152);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v25 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_41:
    uint64_t v26 = *((int *)this + 23);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v26 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_42:
    uint64_t v27 = *((int *)this + 27);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v27 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_43:
    uint64_t v28 = *((int *)this + 28);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_44:
    uint64_t v29 = *((int *)this + 25);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v29 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_45:
    uint64_t v30 = *((int *)this + 21);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_46;
    }
LABEL_93:
    uint64_t v32 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_94;
  }
LABEL_92:
  uint64_t v30 = 0;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_93;
  }
LABEL_46:
  float v31 = *((float *)this + 29);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_49:
    uint64_t v33 = *((int *)this + 26);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_50;
    }
LABEL_95:
    uint64_t v35 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_96;
  }
LABEL_94:
  uint64_t v33 = 0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_95;
  }
LABEL_50:
  float v34 = *((float *)this + 32);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  if ((v1 & 0x1000000) != 0)
  {
LABEL_53:
    uint64_t v36 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0) {
      goto LABEL_54;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t v36 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_54:
    uint64_t v37 = *((unsigned int *)this + 10);
    if ((v1 & 0x40) != 0) {
      goto LABEL_55;
    }
LABEL_98:
    uint64_t v39 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_99;
  }
LABEL_97:
  uint64_t v37 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_98;
  }
LABEL_55:
  float v38 = *((float *)this + 12);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_58:
    uint64_t v40 = *((int *)this + 22);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_100;
  }
LABEL_99:
  uint64_t v40 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_59:
    uint64_t v41 = *((int *)this + 19);
    if (v1) {
      goto LABEL_60;
    }
LABEL_101:
    double v42 = 0.0;
    return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(void *)&v42;
  }
LABEL_100:
  uint64_t v41 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_60:
  double v42 = *((double *)this + 1);
  if (v42 == 0.0) {
    double v42 = 0.0;
  }
  return v52 ^ v2 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v12 ^ v14 ^ v15 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v32 ^ v33 ^ v35 ^ v36 ^ v37 ^ v39 ^ v40 ^ v41 ^ *(void *)&v42;
}

double CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  *(void *)this = off_1003A59B8;
  *((_DWORD *)this + 99) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A59B8;
  *((_DWORD *)this + 99) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 27) = 0;
  return result;
}

void CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this)
{
  *(void *)this = off_1003A59B8;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay(this);

  operator delete();
}

CMMsl::FallDetectionWristStateReplay *CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(CMMsl::FallDetectionWristStateReplay *this, const CMMsl::FallDetectionWristStateReplay *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  float v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  float v7 = (char *)this + 152;
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v8 = (char *)this + 200;
  *(void *)this = off_1003A59B8;
  *((_DWORD *)this + 99) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 27) = 0;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000) != 0)
  {
    uint64_t v11 = *((void *)a2 + 47);
    int v10 = 0x80000;
    *((_DWORD *)this + 99) = 0x80000;
    *((void *)this + 47) = v11;
    int v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    char v12 = *((unsigned char *)a2 + 388);
    v10 |= 0x1000000u;
    *((_DWORD *)this + 99) = v10;
    *((unsigned char *)this + 388) = v12;
    int v9 = *((_DWORD *)a2 + 99);
  }
LABEL_6:
  if (v9)
  {
    uint64_t v15 = *((void *)a2 + 28);
    v10 |= 1u;
    *((_DWORD *)this + 99) = v10;
    *((void *)this + 28) = v15;
    int v9 = *((_DWORD *)a2 + 99);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v16 = *((void *)a2 + 46);
  v10 |= 0x40000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 46) = v16;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *((void *)a2 + 29);
  v10 |= 2u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 29) = v17;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *((void *)a2 + 32);
  v10 |= 0x10u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 32) = v18;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *((void *)a2 + 33);
  v10 |= 0x20u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 33) = v19;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *((void *)a2 + 36);
  v10 |= 0x100u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 36) = v20;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *((void *)a2 + 38);
  v10 |= 0x400u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 38) = v21;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *((void *)a2 + 37);
  v10 |= 0x200u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 37) = v22;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *((void *)a2 + 35);
  v10 |= 0x80u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 35) = v23;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *((void *)a2 + 34);
  v10 |= 0x40u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 34) = v24;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *((void *)a2 + 40);
  v10 |= 0x1000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 40) = v25;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *((void *)a2 + 39);
  v10 |= 0x800u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 39) = v26;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *((void *)a2 + 45);
  v10 |= 0x20000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 45) = v27;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v28 = *((void *)a2 + 44);
  v10 |= 0x10000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 44) = v28;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v29 = *((void *)a2 + 43);
  v10 |= 0x8000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 43) = v29;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v30 = *((void *)a2 + 42);
  v10 |= 0x4000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 42) = v30;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v31 = *((void *)a2 + 41);
  v10 |= 0x2000u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 41) = v31;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  char v32 = *((unsigned char *)a2 + 395);
  v10 |= 0x80000000;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 395) = v32;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v33 = *((void *)a2 + 30);
  v10 |= 4u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 30) = v33;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v34 = *((void *)a2 + 31);
  v10 |= 8u;
  *((_DWORD *)this + 99) = v10;
  *((void *)this + 31) = v34;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v35 = *((unsigned char *)a2 + 384);
  v10 |= 0x100000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 384) = v35;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v36 = *((unsigned char *)a2 + 386);
  v10 |= 0x400000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 386) = v36;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v37 = *((unsigned char *)a2 + 394);
  v10 |= 0x40000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 394) = v37;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v38 = *((unsigned char *)a2 + 385);
  v10 |= 0x200000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 385) = v38;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v39 = *((unsigned char *)a2 + 387);
  v10 |= 0x800000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 387) = v39;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v40 = *((unsigned char *)a2 + 392);
  v10 |= 0x10000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 392) = v40;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v41 = *((unsigned char *)a2 + 391);
  v10 |= 0x8000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 391) = v41;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  char v42 = *((unsigned char *)a2 + 393);
  v10 |= 0x20000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 393) = v42;
  int v9 = *((_DWORD *)a2 + 99);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_68:
  char v43 = *((unsigned char *)a2 + 389);
  v10 |= 0x2000000u;
  *((_DWORD *)this + 99) = v10;
  *((unsigned char *)this + 389) = v43;
  if ((*((_DWORD *)a2 + 99) & 0x4000000) != 0)
  {
LABEL_36:
    char v13 = *((unsigned char *)a2 + 390);
    *((_DWORD *)this + 99) = v10 | 0x4000000;
    *((unsigned char *)this + 390) = v13;
  }
LABEL_37:
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
    sub_1000330C4(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 3);
    sub_1000330C4((char *)this + 176, *((char **)a2 + 22), *((void *)a2 + 23), (uint64_t)(*((void *)a2 + 23) - *((void *)a2 + 22)) >> 3);
    sub_1000330C4(v7, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 3);
    sub_1000330C4(v8, *((char **)a2 + 25), *((void *)a2 + 26), (uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3);
  }
  return this;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, const CMMsl::FallDetectionWristStateReplay *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FallDetectionWristStateReplay *a2, CMMsl::FallDetectionWristStateReplay *a3)
{
  int v3 = *((_DWORD *)this + 99);
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  *((_DWORD *)a2 + 99) = v3;
  uint64_t v4 = *((void *)this + 47);
  *((void *)this + 47) = *((void *)a2 + 47);
  *((void *)a2 + 47) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 388);
  *((unsigned char *)this + 388) = *((unsigned char *)a2 + 388);
  *((unsigned char *)a2 + 388) = v4;
  uint64_t v5 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v5;
  uint64_t v6 = *((void *)this + 46);
  *((void *)this + 46) = *((void *)a2 + 46);
  *((void *)a2 + 46) = v6;
  uint64_t v7 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v7;
  uint64_t v8 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v8;
  uint64_t v9 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v9;
  uint64_t v10 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v10;
  uint64_t v11 = *((void *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v11;
  uint64_t v12 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v12;
  uint64_t v13 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v13;
  uint64_t v14 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v14;
  uint64_t v15 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v15;
  uint64_t v16 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v16;
  uint64_t v17 = *((void *)this + 45);
  *((void *)this + 45) = *((void *)a2 + 45);
  *((void *)a2 + 45) = v17;
  uint64_t v18 = *((void *)this + 44);
  *((void *)this + 44) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v18;
  uint64_t v19 = *((void *)this + 43);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v19;
  uint64_t v20 = *((void *)this + 42);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v20;
  uint64_t v21 = *((void *)this + 41);
  *((void *)this + 41) = *((void *)a2 + 41);
  *((void *)a2 + 41) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 395);
  *((unsigned char *)this + 395) = *((unsigned char *)a2 + 395);
  *((unsigned char *)a2 + 395) = v21;
  uint64_t v22 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v22;
  double result = *((double *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((double *)a2 + 31) = result;
  LOBYTE(v21) = *((unsigned char *)this + 384);
  *((unsigned char *)this + 384) = *((unsigned char *)a2 + 384);
  *((unsigned char *)a2 + 384) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 386);
  *((unsigned char *)this + 386) = *((unsigned char *)a2 + 386);
  *((unsigned char *)a2 + 386) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 394);
  *((unsigned char *)this + 394) = *((unsigned char *)a2 + 394);
  *((unsigned char *)a2 + 394) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 385);
  *((unsigned char *)this + 385) = *((unsigned char *)a2 + 385);
  *((unsigned char *)a2 + 385) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 387);
  *((unsigned char *)this + 387) = *((unsigned char *)a2 + 387);
  *((unsigned char *)a2 + 387) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 392);
  *((unsigned char *)this + 392) = *((unsigned char *)a2 + 392);
  *((unsigned char *)a2 + 392) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 391);
  *((unsigned char *)this + 391) = *((unsigned char *)a2 + 391);
  *((unsigned char *)a2 + 391) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 393);
  *((unsigned char *)this + 393) = *((unsigned char *)a2 + 393);
  *((unsigned char *)a2 + 393) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 389);
  *((unsigned char *)this + 389) = *((unsigned char *)a2 + 389);
  *((unsigned char *)a2 + 389) = v21;
  LOBYTE(v21) = *((unsigned char *)this + 390);
  *((unsigned char *)this + 390) = *((unsigned char *)a2 + 390);
  *((unsigned char *)a2 + 390) = v21;
  uint64_t v24 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v24;
  uint64_t v25 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v25;
  uint64_t v26 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v26;
  uint64_t v27 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v27;
  uint64_t v28 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v28;
  uint64_t v29 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v29;
  uint64_t v30 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v30;
  uint64_t v31 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v31;
  uint64_t v32 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v32;
  uint64_t v33 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v33;
  uint64_t v34 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v34;
  uint64_t v35 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v35;
  uint64_t v36 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v36;
  uint64_t v37 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v37;
  uint64_t v38 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v38;
  uint64_t v39 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v39;
  uint64_t v40 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v40;
  uint64_t v41 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v41;
  uint64_t v42 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v42;
  uint64_t v43 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v43;
  uint64_t v44 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v44;
  uint64_t v45 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v45;
  uint64_t v46 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v46;
  uint64_t v47 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v47;
  uint64_t v48 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v48;
  uint64_t v49 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v49;
  uint64_t v50 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v50;
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A59B8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a2 + 396) = 0;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 388) = *(unsigned char *)(a2 + 388);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 395) = *(unsigned char *)(a2 + 395);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(unsigned char *)(a1 + 386) = *(unsigned char *)(a2 + 386);
  *(unsigned char *)(a1 + 394) = *(unsigned char *)(a2 + 394);
  *(unsigned char *)(a1 + 385) = *(unsigned char *)(a2 + 385);
  *(unsigned char *)(a1 + 387) = *(unsigned char *)(a2 + 387);
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  *(unsigned char *)(a1 + 391) = *(unsigned char *)(a2 + 391);
  *(unsigned char *)(a1 + 393) = *(unsigned char *)(a2 + 393);
  *(unsigned char *)(a1 + 389) = *(unsigned char *)(a2 + 389);
  *(unsigned char *)(a1 + 390) = *(unsigned char *)(a2 + 390);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 128, (__n128 *)(a2 + 128));
  sub_100274A30(a1 + 176, (__n128 *)(a2 + 176));
  sub_100274A30(a1 + 152, (__n128 *)(a2 + 152));
  sub_100274A30(a1 + 200, (__n128 *)(a2 + 200));
  return a1;
}

CMMsl *CMMsl::FallDetectionWristStateReplay::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallDetectionWristStateReplay::FallDetectionWristStateReplay((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallDetectionWristStateReplay *)v5, v3);
    CMMsl::FallDetectionWristStateReplay::~FallDetectionWristStateReplay((CMMsl::FallDetectionWristStateReplay *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallDetectionWristStateReplay::formatText(CMMsl::FallDetectionWristStateReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 99);
  if (v5)
  {
    PB::TextFormatter::format(a2, "absoluteTimestampOfImpact", *((double *)this + 28));
    int v5 = *((_DWORD *)this + 99);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_62;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "anyOffWristAfterImpact", *((unsigned char *)this + 384));
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "aopTimestampOfImpact", *((void *)this + 29));
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "continuousLockedBeforeImpact", *((unsigned char *)this + 385));
  int v5 = *((_DWORD *)this + 99);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "continuousOffWristBeforeImpact", *((unsigned char *)this + 386));
  if ((*((_DWORD *)this + 99) & 0x800000) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "continuousStaticAndVerticalBeforeImpact", *((unsigned char *)this + 387));
LABEL_8:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  uint64_t v9 = (double *)*((void *)this + 4);
  uint64_t v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "coreMotionWristStateHistoryState", v14);
  }
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(a2, "gatingEnabled", *((unsigned char *)this + 388));
    int v15 = *((_DWORD *)this + 99);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "gatingLockedNoMotionPreImpact", *((unsigned char *)this + 389));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "gatingMotionPreImpact", *((unsigned char *)this + 390));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "gatingOffWristPostImpact", *((unsigned char *)this + 391));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "gatingOffWristPreImpact", *((unsigned char *)this + 392));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "gatingOnCharger", *((unsigned char *)this + 393));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "hasMotionBeforeImpact", *((unsigned char *)this + 394));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "lastChargerState", *((unsigned char *)this + 395));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "lastChargerStateDuration", *((double *)this + 30));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "lastChargerStateDurationThreshold", *((double *)this + 31));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "lastCoreMotionWristState", *((void *)this + 32));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDuration", *((double *)this + 33));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostEnd", *((double *)this + 34));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostStart", *((double *)this + 35));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPostThreshold", *((double *)this + 36));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreEnd", *((double *)this + 37));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "lastCoreMotionWristStateDurationPreStart", *((double *)this + 38));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreEnd", *((double *)this + 39));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "lastLockedStateDurationPreStart", *((double *)this + 40));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "lastMotionState", *((void *)this + 41));
  int v15 = *((_DWORD *)this + 99);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "lastMotionStateEndTime", *((void *)this + 42));
  if ((*((_DWORD *)this + 99) & 0x8000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(a2, "lastMotionStateStartTime", *((void *)this + 43));
LABEL_37:
  uint64_t v16 = (double *)*((void *)this + 10);
  uint64_t v17 = (double *)*((void *)this + 11);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(a2, "lockStateHistoryEndTimestamp", v18);
  }
  uint64_t v19 = (double *)*((void *)this + 13);
  uint64_t v20 = (double *)*((void *)this + 14);
  while (v19 != v20)
  {
    double v21 = *v19++;
    PB::TextFormatter::format(a2, "lockStateHistoryStartTimestamp", v21);
  }
  uint64_t v22 = (double *)*((void *)this + 16);
  uint64_t v23 = (double *)*((void *)this + 17);
  while (v22 != v23)
  {
    double v24 = *v22++;
    PB::TextFormatter::format(a2, "lockStateHistoryState", v24);
  }
  int v25 = *((_DWORD *)this + 99);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactEndOfInterval", *((void *)this + 44));
    int v25 = *((_DWORD *)this + 99);
  }
  if ((v25 & 0x20000) != 0) {
    PB::TextFormatter::format(a2, "motionLookbackBeforeImpactStartOfInterval", *((void *)this + 45));
  }
  uint64_t v26 = (double *)*((void *)this + 19);
  uint64_t v27 = (double *)*((void *)this + 20);
  while (v26 != v27)
  {
    double v28 = *v26++;
    PB::TextFormatter::format(a2, "motionStateHistoryEndTimestamp", v28);
  }
  uint64_t v29 = (double *)*((void *)this + 22);
  uint64_t v30 = (double *)*((void *)this + 23);
  while (v29 != v30)
  {
    double v31 = *v29++;
    PB::TextFormatter::format(a2, "motionStateHistoryStartTimestamp", v31);
  }
  uint64_t v32 = (double *)*((void *)this + 25);
  uint64_t v33 = (double *)*((void *)this + 26);
  while (v32 != v33)
  {
    double v34 = *v32++;
    PB::TextFormatter::format(a2, "motionStateHistoryState", v34);
  }
  int v35 = *((_DWORD *)this + 99);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(a2, "relativeTimestampToImpact", *((double *)this + 46));
    int v35 = *((_DWORD *)this + 99);
  }
  if ((v35 & 0x80000) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 47));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FallDetectionWristStateReplay::readFrom(CMMsl::FallDetectionWristStateReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v413 = (char *)this + 216;
    v414 = (void **)((char *)this + 152);
    v415 = (void **)((char *)this + 200);
    double v8 = (void **)((char *)this + 176);
    v411 = (char *)this + 192;
    v412 = (char *)this + 168;
    uint64_t v9 = (void **)((char *)this + 128);
    uint64_t v10 = (void **)((char *)this + 80);
    v409 = (char *)this + 96;
    v410 = (char *)this + 144;
    double v11 = (void **)((char *)this + 104);
    uint64_t v12 = (void **)((char *)this + 56);
    v407 = (char *)this + 72;
    v408 = (char *)this + 120;
    uint64_t v13 = (void **)((char *)this + 8);
    double v14 = (void **)((char *)this + 32);
    v405 = (char *)this + 48;
    v406 = (char *)this + 24;
    while (1)
    {
      uint64_t v15 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        unint64_t v19 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v20 = *(unsigned char *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v2 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v27 = v18 & 7;
      if (v27 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 99) |= 0x80000u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_541;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            uint64_t v34 = 0;
            goto LABEL_541;
          }
          char v298 = 0;
          unsigned int v299 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v300 = v29 + 1;
              char v301 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v300;
              v34 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                unint64_t v29 = v300;
                BOOL v21 = v299++ > 8;
                if (v21) {
                  goto LABEL_385;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_541:
          *((void *)this + 47) = v34;
          goto LABEL_631;
        case 2u:
          *((_DWORD *)this + 99) |= 0x1000000u;
          unint64_t v167 = *((void *)a2 + 1);
          if (v167 >= *((void *)a2 + 2))
          {
            BOOL v170 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v168 = v167 + 1;
            int v169 = *(unsigned __int8 *)(*(void *)a2 + v167);
            *((void *)a2 + 1) = v168;
            BOOL v170 = v169 != 0;
          }
          *((unsigned char *)this + 388) = v170;
          goto LABEL_631;
        case 3u:
          *((_DWORD *)this + 99) |= 1u;
          unint64_t v171 = *((void *)a2 + 1);
          if (v171 > 0xFFFFFFFFFFFFFFF7 || v171 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 28) = *(void *)(*(void *)a2 + v171);
          goto LABEL_630;
        case 4u:
          *((_DWORD *)this + 99) |= 0x40000u;
          unint64_t v172 = *((void *)a2 + 1);
          if (v172 > 0xFFFFFFFFFFFFFFF7 || v172 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 46) = *(void *)(*(void *)a2 + v172);
          goto LABEL_630;
        case 5u:
          *((_DWORD *)this + 99) |= 2u;
          unint64_t v173 = *((void *)a2 + 1);
          unint64_t v174 = *((void *)a2 + 2);
          uint64_t v175 = *(void *)a2;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            char v176 = 0;
            unsigned int v177 = 0;
            uint64_t v178 = 0;
            do
            {
              unint64_t v179 = v173 + 1;
              *((void *)a2 + 1) = v173 + 1;
              char v180 = *(unsigned char *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0) {
                goto LABEL_544;
              }
              v176 += 7;
              unint64_t v173 = v179;
              BOOL v21 = v177++ > 8;
            }
            while (!v21);
LABEL_394:
            uint64_t v178 = 0;
            goto LABEL_544;
          }
          char v302 = 0;
          unsigned int v303 = 0;
          uint64_t v178 = 0;
          if (v174 <= v173) {
            unint64_t v174 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v174 == v173)
            {
              uint64_t v178 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v304 = v173 + 1;
              char v305 = *(unsigned char *)(v175 + v173);
              *((void *)a2 + 1) = v304;
              v178 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                unint64_t v173 = v304;
                BOOL v21 = v303++ > 8;
                if (v21) {
                  goto LABEL_394;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v178 = 0;
              }
            }
            break;
          }
LABEL_544:
          *((void *)this + 29) = v178;
          goto LABEL_631;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          if ((PB::Reader::skip(a2, v28, v27, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_631;
        case 0x15u:
          *((_DWORD *)this + 99) |= 0x10u;
          unint64_t v181 = *((void *)a2 + 1);
          unint64_t v182 = *((void *)a2 + 2);
          uint64_t v183 = *(void *)a2;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            char v184 = 0;
            unsigned int v185 = 0;
            uint64_t v186 = 0;
            do
            {
              unint64_t v187 = v181 + 1;
              *((void *)a2 + 1) = v181 + 1;
              char v188 = *(unsigned char *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0) {
                goto LABEL_547;
              }
              v184 += 7;
              unint64_t v181 = v187;
              BOOL v21 = v185++ > 8;
            }
            while (!v21);
LABEL_401:
            uint64_t v186 = 0;
            goto LABEL_547;
          }
          char v306 = 0;
          unsigned int v307 = 0;
          uint64_t v186 = 0;
          if (v182 <= v181) {
            unint64_t v182 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v182 == v181)
            {
              uint64_t v186 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v308 = v181 + 1;
              char v309 = *(unsigned char *)(v183 + v181);
              *((void *)a2 + 1) = v308;
              v186 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                unint64_t v181 = v308;
                BOOL v21 = v307++ > 8;
                if (v21) {
                  goto LABEL_401;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v186 = 0;
              }
            }
            break;
          }
LABEL_547:
          *((void *)this + 32) = v186;
          goto LABEL_631;
        case 0x16u:
          *((_DWORD *)this + 99) |= 0x20u;
          unint64_t v189 = *((void *)a2 + 1);
          if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 33) = *(void *)(*(void *)a2 + v189);
          goto LABEL_630;
        case 0x17u:
          *((_DWORD *)this + 99) |= 0x100u;
          unint64_t v190 = *((void *)a2 + 1);
          if (v190 > 0xFFFFFFFFFFFFFFF7 || v190 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 36) = *(void *)(*(void *)a2 + v190);
          goto LABEL_630;
        case 0x18u:
          *((_DWORD *)this + 99) |= 0x400u;
          unint64_t v191 = *((void *)a2 + 1);
          if (v191 > 0xFFFFFFFFFFFFFFF7 || v191 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 38) = *(void *)(*(void *)a2 + v191);
          goto LABEL_630;
        case 0x19u:
          *((_DWORD *)this + 99) |= 0x200u;
          unint64_t v192 = *((void *)a2 + 1);
          if (v192 > 0xFFFFFFFFFFFFFFF7 || v192 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 37) = *(void *)(*(void *)a2 + v192);
          goto LABEL_630;
        case 0x1Au:
          *((_DWORD *)this + 99) |= 0x80u;
          unint64_t v193 = *((void *)a2 + 1);
          if (v193 > 0xFFFFFFFFFFFFFFF7 || v193 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 35) = *(void *)(*(void *)a2 + v193);
          goto LABEL_630;
        case 0x1Bu:
          *((_DWORD *)this + 99) |= 0x40u;
          unint64_t v194 = *((void *)a2 + 1);
          if (v194 > 0xFFFFFFFFFFFFFFF7 || v194 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 34) = *(void *)(*(void *)a2 + v194);
          goto LABEL_630;
        case 0x1Cu:
          *((_DWORD *)this + 99) |= 0x1000u;
          unint64_t v195 = *((void *)a2 + 1);
          if (v195 > 0xFFFFFFFFFFFFFFF7 || v195 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 40) = *(void *)(*(void *)a2 + v195);
          goto LABEL_630;
        case 0x1Du:
          *((_DWORD *)this + 99) |= 0x800u;
          unint64_t v196 = *((void *)a2 + 1);
          if (v196 > 0xFFFFFFFFFFFFFFF7 || v196 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 39) = *(void *)(*(void *)a2 + v196);
          goto LABEL_630;
        case 0x1Eu:
          *((_DWORD *)this + 99) |= 0x20000u;
          unint64_t v197 = *((void *)a2 + 1);
          unint64_t v198 = *((void *)a2 + 2);
          uint64_t v199 = *(void *)a2;
          if (v197 <= 0xFFFFFFFFFFFFFFF5 && v197 + 10 <= v198)
          {
            char v200 = 0;
            unsigned int v201 = 0;
            uint64_t v202 = 0;
            do
            {
              unint64_t v203 = v197 + 1;
              *((void *)a2 + 1) = v197 + 1;
              char v204 = *(unsigned char *)(v199 + v197);
              v202 |= (unint64_t)(v204 & 0x7F) << v200;
              if ((v204 & 0x80) == 0) {
                goto LABEL_550;
              }
              v200 += 7;
              unint64_t v197 = v203;
              BOOL v21 = v201++ > 8;
            }
            while (!v21);
LABEL_408:
            uint64_t v202 = 0;
            goto LABEL_550;
          }
          char v310 = 0;
          unsigned int v311 = 0;
          uint64_t v202 = 0;
          if (v198 <= v197) {
            unint64_t v198 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v198 == v197)
            {
              uint64_t v202 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v312 = v197 + 1;
              char v313 = *(unsigned char *)(v199 + v197);
              *((void *)a2 + 1) = v312;
              v202 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                unint64_t v197 = v312;
                BOOL v21 = v311++ > 8;
                if (v21) {
                  goto LABEL_408;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v202 = 0;
              }
            }
            break;
          }
LABEL_550:
          *((void *)this + 45) = v202;
          goto LABEL_631;
        case 0x1Fu:
          *((_DWORD *)this + 99) |= 0x10000u;
          unint64_t v205 = *((void *)a2 + 1);
          unint64_t v206 = *((void *)a2 + 2);
          uint64_t v207 = *(void *)a2;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            char v208 = 0;
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            do
            {
              unint64_t v211 = v205 + 1;
              *((void *)a2 + 1) = v205 + 1;
              char v212 = *(unsigned char *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0) {
                goto LABEL_553;
              }
              v208 += 7;
              unint64_t v205 = v211;
              BOOL v21 = v209++ > 8;
            }
            while (!v21);
LABEL_415:
            uint64_t v210 = 0;
            goto LABEL_553;
          }
          char v314 = 0;
          unsigned int v315 = 0;
          uint64_t v210 = 0;
          if (v206 <= v205) {
            unint64_t v206 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v206 == v205)
            {
              uint64_t v210 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v316 = v205 + 1;
              char v317 = *(unsigned char *)(v207 + v205);
              *((void *)a2 + 1) = v316;
              v210 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                unint64_t v205 = v316;
                BOOL v21 = v315++ > 8;
                if (v21) {
                  goto LABEL_415;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v210 = 0;
              }
            }
            break;
          }
LABEL_553:
          *((void *)this + 44) = v210;
          goto LABEL_631;
        case 0x20u:
          *((_DWORD *)this + 99) |= 0x8000u;
          unint64_t v213 = *((void *)a2 + 1);
          unint64_t v214 = *((void *)a2 + 2);
          uint64_t v215 = *(void *)a2;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            char v216 = 0;
            unsigned int v217 = 0;
            uint64_t v218 = 0;
            do
            {
              unint64_t v219 = v213 + 1;
              *((void *)a2 + 1) = v213 + 1;
              char v220 = *(unsigned char *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0) {
                goto LABEL_556;
              }
              v216 += 7;
              unint64_t v213 = v219;
              BOOL v21 = v217++ > 8;
            }
            while (!v21);
LABEL_422:
            uint64_t v218 = 0;
            goto LABEL_556;
          }
          char v318 = 0;
          unsigned int v319 = 0;
          uint64_t v218 = 0;
          if (v214 <= v213) {
            unint64_t v214 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v214 == v213)
            {
              uint64_t v218 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v320 = v213 + 1;
              char v321 = *(unsigned char *)(v215 + v213);
              *((void *)a2 + 1) = v320;
              v218 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                unint64_t v213 = v320;
                BOOL v21 = v319++ > 8;
                if (v21) {
                  goto LABEL_422;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v218 = 0;
              }
            }
            break;
          }
LABEL_556:
          *((void *)this + 43) = v218;
          goto LABEL_631;
        case 0x21u:
          *((_DWORD *)this + 99) |= 0x4000u;
          unint64_t v221 = *((void *)a2 + 1);
          unint64_t v222 = *((void *)a2 + 2);
          uint64_t v223 = *(void *)a2;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            char v224 = 0;
            unsigned int v225 = 0;
            uint64_t v226 = 0;
            do
            {
              unint64_t v227 = v221 + 1;
              *((void *)a2 + 1) = v221 + 1;
              char v228 = *(unsigned char *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0) {
                goto LABEL_559;
              }
              v224 += 7;
              unint64_t v221 = v227;
              BOOL v21 = v225++ > 8;
            }
            while (!v21);
LABEL_429:
            uint64_t v226 = 0;
            goto LABEL_559;
          }
          char v322 = 0;
          unsigned int v323 = 0;
          uint64_t v226 = 0;
          if (v222 <= v221) {
            unint64_t v222 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v222 == v221)
            {
              uint64_t v226 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v324 = v221 + 1;
              char v325 = *(unsigned char *)(v223 + v221);
              *((void *)a2 + 1) = v324;
              v226 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                unint64_t v221 = v324;
                BOOL v21 = v323++ > 8;
                if (v21) {
                  goto LABEL_429;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v226 = 0;
              }
            }
            break;
          }
LABEL_559:
          *((void *)this + 42) = v226;
          goto LABEL_631;
        case 0x22u:
          *((_DWORD *)this + 99) |= 0x2000u;
          unint64_t v229 = *((void *)a2 + 1);
          unint64_t v230 = *((void *)a2 + 2);
          uint64_t v231 = *(void *)a2;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            char v232 = 0;
            unsigned int v233 = 0;
            uint64_t v234 = 0;
            do
            {
              unint64_t v235 = v229 + 1;
              *((void *)a2 + 1) = v229 + 1;
              char v236 = *(unsigned char *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0) {
                goto LABEL_562;
              }
              v232 += 7;
              unint64_t v229 = v235;
              BOOL v21 = v233++ > 8;
            }
            while (!v21);
LABEL_436:
            uint64_t v234 = 0;
            goto LABEL_562;
          }
          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v234 = 0;
          if (v230 <= v229) {
            unint64_t v230 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v230 == v229)
            {
              uint64_t v234 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v328 = v229 + 1;
              char v329 = *(unsigned char *)(v231 + v229);
              *((void *)a2 + 1) = v328;
              v234 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                unint64_t v229 = v328;
                BOOL v21 = v327++ > 8;
                if (v21) {
                  goto LABEL_436;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v234 = 0;
              }
            }
            break;
          }
LABEL_562:
          *((void *)this + 41) = v234;
          goto LABEL_631;
        case 0x29u:
          *((_DWORD *)this + 99) |= 0x80000000;
          unint64_t v237 = *((void *)a2 + 1);
          if (v237 >= *((void *)a2 + 2))
          {
            BOOL v240 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v238 = v237 + 1;
            int v239 = *(unsigned __int8 *)(*(void *)a2 + v237);
            *((void *)a2 + 1) = v238;
            BOOL v240 = v239 != 0;
          }
          *((unsigned char *)this + 395) = v240;
          goto LABEL_631;
        case 0x2Au:
          *((_DWORD *)this + 99) |= 4u;
          unint64_t v241 = *((void *)a2 + 1);
          if (v241 > 0xFFFFFFFFFFFFFFF7 || v241 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 30) = *(void *)(*(void *)a2 + v241);
          goto LABEL_630;
        case 0x2Bu:
          *((_DWORD *)this + 99) |= 8u;
          unint64_t v242 = *((void *)a2 + 1);
          if (v242 > 0xFFFFFFFFFFFFFFF7 || v242 + 8 > *((void *)a2 + 2)) {
            goto LABEL_628;
          }
          *((void *)this + 31) = *(void *)(*(void *)a2 + v242);
          goto LABEL_630;
        case 0x33u:
          *((_DWORD *)this + 99) |= 0x100000u;
          unint64_t v243 = *((void *)a2 + 1);
          if (v243 >= *((void *)a2 + 2))
          {
            BOOL v246 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v244 = v243 + 1;
            int v245 = *(unsigned __int8 *)(*(void *)a2 + v243);
            *((void *)a2 + 1) = v244;
            BOOL v246 = v245 != 0;
          }
          *((unsigned char *)this + 384) = v246;
          goto LABEL_631;
        case 0x34u:
          *((_DWORD *)this + 99) |= 0x400000u;
          unint64_t v247 = *((void *)a2 + 1);
          if (v247 >= *((void *)a2 + 2))
          {
            BOOL v250 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v248 = v247 + 1;
            int v249 = *(unsigned __int8 *)(*(void *)a2 + v247);
            *((void *)a2 + 1) = v248;
            BOOL v250 = v249 != 0;
          }
          *((unsigned char *)this + 386) = v250;
          goto LABEL_631;
        case 0x35u:
          *((_DWORD *)this + 99) |= 0x40000000u;
          unint64_t v251 = *((void *)a2 + 1);
          if (v251 >= *((void *)a2 + 2))
          {
            BOOL v254 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v252 = v251 + 1;
            int v253 = *(unsigned __int8 *)(*(void *)a2 + v251);
            *((void *)a2 + 1) = v252;
            BOOL v254 = v253 != 0;
          }
          *((unsigned char *)this + 394) = v254;
          goto LABEL_631;
        case 0x36u:
          *((_DWORD *)this + 99) |= 0x200000u;
          unint64_t v255 = *((void *)a2 + 1);
          if (v255 >= *((void *)a2 + 2))
          {
            BOOL v258 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v256 = v255 + 1;
            int v257 = *(unsigned __int8 *)(*(void *)a2 + v255);
            *((void *)a2 + 1) = v256;
            BOOL v258 = v257 != 0;
          }
          *((unsigned char *)this + 385) = v258;
          goto LABEL_631;
        case 0x37u:
          *((_DWORD *)this + 99) |= 0x800000u;
          unint64_t v259 = *((void *)a2 + 1);
          if (v259 >= *((void *)a2 + 2))
          {
            BOOL v262 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v260 = v259 + 1;
            int v261 = *(unsigned __int8 *)(*(void *)a2 + v259);
            *((void *)a2 + 1) = v260;
            BOOL v262 = v261 != 0;
          }
          *((unsigned char *)this + 387) = v262;
          goto LABEL_631;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                v280 = (char *)*((void *)this + 5);
                unint64_t v279 = *((void *)this + 6);
                if ((unint64_t)v280 >= v279)
                {
                  v330 = (char *)*v14;
                  uint64_t v331 = (v280 - (unsigned char *)*v14) >> 3;
                  unint64_t v332 = v331 + 1;
                  if ((unint64_t)(v331 + 1) >> 61) {
LABEL_641:
                  }
                    sub_10000EE98();
                  uint64_t v333 = v279 - (void)v330;
                  if (v333 >> 2 > v332) {
                    unint64_t v332 = v333 >> 2;
                  }
                  if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v334 = v332;
                  }
                  if (v334)
                  {
                    v335 = (char *)sub_10000EEB0((uint64_t)v405, v334);
                    v330 = (char *)*((void *)this + 4);
                    v280 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    v335 = 0;
                  }
                  v384 = &v335[8 * v331];
                  *(void *)v384 = 0;
                  v281 = v384 + 8;
                  while (v280 != v330)
                  {
                    uint64_t v385 = *((void *)v280 - 1);
                    v280 -= 8;
                    *((void *)v384 - 1) = v385;
                    v384 -= 8;
                  }
                  *((void *)this + 4) = v384;
                  *((void *)this + 5) = v281;
                  *((void *)this + 6) = &v335[8 * v334];
                  if (v330) {
                    operator delete(v330);
                  }
                }
                else
                {
                  *(void *)v280 = 0;
                  v281 = v280 + 8;
                }
                *((void *)this + 5) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v38 = *((void *)a2 + 2);
              while (v37 < v38 && !*((unsigned char *)a2 + 24))
              {
                uint64_t v40 = (char *)*((void *)this + 5);
                unint64_t v39 = *((void *)this + 6);
                if ((unint64_t)v40 >= v39)
                {
                  uint64_t v42 = (char *)*v14;
                  uint64_t v43 = (v40 - (unsigned char *)*v14) >> 3;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61) {
                    goto LABEL_641;
                  }
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 2 > v44) {
                    unint64_t v44 = v45 >> 2;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    uint64_t v47 = (char *)sub_10000EEB0((uint64_t)v405, v46);
                    uint64_t v42 = (char *)*((void *)this + 4);
                    uint64_t v40 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v47 = 0;
                  }
                  uint64_t v48 = &v47[8 * v43];
                  *(void *)uint64_t v48 = 0;
                  uint64_t v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    uint64_t v49 = *((void *)v40 - 1);
                    v40 -= 8;
                    *((void *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *((void *)this + 4) = v48;
                  *((void *)this + 5) = v41;
                  *((void *)this + 6) = &v47[8 * v46];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(void *)uint64_t v40 = 0;
                  uint64_t v41 = v40 + 8;
                }
                *((void *)this + 5) = v41;
                unint64_t v50 = *((void *)a2 + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v41 - 1) = *(void *)(*(void *)a2 + v50);
                unint64_t v38 = *((void *)a2 + 2);
                unint64_t v37 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                v283 = (char *)*((void *)this + 2);
                unint64_t v282 = *((void *)this + 3);
                if ((unint64_t)v283 >= v282)
                {
                  v336 = (char *)*v13;
                  uint64_t v337 = (v283 - (unsigned char *)*v13) >> 3;
                  unint64_t v338 = v337 + 1;
                  if ((unint64_t)(v337 + 1) >> 61) {
LABEL_642:
                  }
                    sub_10000EE98();
                  uint64_t v339 = v282 - (void)v336;
                  if (v339 >> 2 > v338) {
                    unint64_t v338 = v339 >> 2;
                  }
                  if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v340 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v340 = v338;
                  }
                  if (v340)
                  {
                    v341 = (char *)sub_10000EEB0((uint64_t)v406, v340);
                    v336 = (char *)*((void *)this + 1);
                    v283 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    v341 = 0;
                  }
                  v386 = &v341[8 * v337];
                  *(void *)v386 = 0;
                  v281 = v386 + 8;
                  while (v283 != v336)
                  {
                    uint64_t v387 = *((void *)v283 - 1);
                    v283 -= 8;
                    *((void *)v386 - 1) = v387;
                    v386 -= 8;
                  }
                  *((void *)this + 1) = v386;
                  *((void *)this + 2) = v281;
                  *((void *)this + 3) = &v341[8 * v340];
                  if (v336) {
                    operator delete(v336);
                  }
                }
                else
                {
                  *(void *)v283 = 0;
                  v281 = v283 + 8;
                }
                *((void *)this + 2) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v55 = *((void *)a2 + 1);
              unint64_t v56 = *((void *)a2 + 2);
              while (v55 < v56 && !*((unsigned char *)a2 + 24))
              {
                v58 = (char *)*((void *)this + 2);
                unint64_t v57 = *((void *)this + 3);
                if ((unint64_t)v58 >= v57)
                {
                  v60 = (char *)*v13;
                  uint64_t v61 = (v58 - (unsigned char *)*v13) >> 3;
                  unint64_t v62 = v61 + 1;
                  if ((unint64_t)(v61 + 1) >> 61) {
                    goto LABEL_642;
                  }
                  uint64_t v63 = v57 - (void)v60;
                  if (v63 >> 2 > v62) {
                    unint64_t v62 = v63 >> 2;
                  }
                  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v64 = v62;
                  }
                  if (v64)
                  {
                    v65 = (char *)sub_10000EEB0((uint64_t)v406, v64);
                    v60 = (char *)*((void *)this + 1);
                    v58 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    v65 = 0;
                  }
                  v66 = &v65[8 * v61];
                  *(void *)v66 = 0;
                  v59 = v66 + 8;
                  while (v58 != v60)
                  {
                    uint64_t v67 = *((void *)v58 - 1);
                    v58 -= 8;
                    *((void *)v66 - 1) = v67;
                    v66 -= 8;
                  }
                  *((void *)this + 1) = v66;
                  *((void *)this + 2) = v59;
                  *((void *)this + 3) = &v65[8 * v64];
                  if (v60) {
                    operator delete(v60);
                  }
                }
                else
                {
                  *(void *)v58 = 0;
                  v59 = v58 + 8;
                }
                *((void *)this + 2) = v59;
                unint64_t v68 = *((void *)a2 + 1);
                if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v59 - 1) = *(void *)(*(void *)a2 + v68);
                unint64_t v56 = *((void *)a2 + 2);
                unint64_t v55 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v55;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                v285 = (char *)*((void *)this + 8);
                unint64_t v284 = *((void *)this + 9);
                if ((unint64_t)v285 >= v284)
                {
                  v342 = (char *)*v12;
                  uint64_t v343 = (v285 - (unsigned char *)*v12) >> 3;
                  unint64_t v344 = v343 + 1;
                  if ((unint64_t)(v343 + 1) >> 61) {
LABEL_643:
                  }
                    sub_10000EE98();
                  uint64_t v345 = v284 - (void)v342;
                  if (v345 >> 2 > v344) {
                    unint64_t v344 = v345 >> 2;
                  }
                  if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v346 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v346 = v344;
                  }
                  if (v346)
                  {
                    v347 = (char *)sub_10000EEB0((uint64_t)v407, v346);
                    v342 = (char *)*((void *)this + 7);
                    v285 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    v347 = 0;
                  }
                  v388 = &v347[8 * v343];
                  *(void *)v388 = 0;
                  v281 = v388 + 8;
                  while (v285 != v342)
                  {
                    uint64_t v389 = *((void *)v285 - 1);
                    v285 -= 8;
                    *((void *)v388 - 1) = v389;
                    v388 -= 8;
                  }
                  *((void *)this + 7) = v388;
                  *((void *)this + 8) = v281;
                  *((void *)this + 9) = &v347[8 * v346];
                  if (v342) {
                    operator delete(v342);
                  }
                }
                else
                {
                  *(void *)v285 = 0;
                  v281 = v285 + 8;
                }
                *((void *)this + 8) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v69 = *((void *)a2 + 1);
              unint64_t v70 = *((void *)a2 + 2);
              while (v69 < v70 && !*((unsigned char *)a2 + 24))
              {
                v72 = (char *)*((void *)this + 8);
                unint64_t v71 = *((void *)this + 9);
                if ((unint64_t)v72 >= v71)
                {
                  v74 = (char *)*v12;
                  uint64_t v75 = (v72 - (unsigned char *)*v12) >> 3;
                  unint64_t v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61) {
                    goto LABEL_643;
                  }
                  uint64_t v77 = v71 - (void)v74;
                  if (v77 >> 2 > v76) {
                    unint64_t v76 = v77 >> 2;
                  }
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v78 = v76;
                  }
                  if (v78)
                  {
                    v79 = (char *)sub_10000EEB0((uint64_t)v407, v78);
                    v74 = (char *)*((void *)this + 7);
                    v72 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v80 = &v79[8 * v75];
                  *(void *)v80 = 0;
                  v73 = v80 + 8;
                  while (v72 != v74)
                  {
                    uint64_t v81 = *((void *)v72 - 1);
                    v72 -= 8;
                    *((void *)v80 - 1) = v81;
                    v80 -= 8;
                  }
                  *((void *)this + 7) = v80;
                  *((void *)this + 8) = v73;
                  *((void *)this + 9) = &v79[8 * v78];
                  if (v74) {
                    operator delete(v74);
                  }
                }
                else
                {
                  *(void *)v72 = 0;
                  v73 = v72 + 8;
                }
                *((void *)this + 8) = v73;
                unint64_t v82 = *((void *)a2 + 1);
                if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v73 - 1) = *(void *)(*(void *)a2 + v82);
                unint64_t v70 = *((void *)a2 + 2);
                unint64_t v69 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v69;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                v287 = (char *)*((void *)this + 14);
                unint64_t v286 = *((void *)this + 15);
                if ((unint64_t)v287 >= v286)
                {
                  v348 = (char *)*v11;
                  uint64_t v349 = (v287 - (unsigned char *)*v11) >> 3;
                  unint64_t v350 = v349 + 1;
                  if ((unint64_t)(v349 + 1) >> 61) {
LABEL_644:
                  }
                    sub_10000EE98();
                  uint64_t v351 = v286 - (void)v348;
                  if (v351 >> 2 > v350) {
                    unint64_t v350 = v351 >> 2;
                  }
                  if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v352 = v350;
                  }
                  if (v352)
                  {
                    v353 = (char *)sub_10000EEB0((uint64_t)v408, v352);
                    v348 = (char *)*((void *)this + 13);
                    v287 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    v353 = 0;
                  }
                  v390 = &v353[8 * v349];
                  *(void *)v390 = 0;
                  v281 = v390 + 8;
                  while (v287 != v348)
                  {
                    uint64_t v391 = *((void *)v287 - 1);
                    v287 -= 8;
                    *((void *)v390 - 1) = v391;
                    v390 -= 8;
                  }
                  *((void *)this + 13) = v390;
                  *((void *)this + 14) = v281;
                  *((void *)this + 15) = &v353[8 * v352];
                  if (v348) {
                    operator delete(v348);
                  }
                }
                else
                {
                  *(void *)v287 = 0;
                  v281 = v287 + 8;
                }
                *((void *)this + 14) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v83 = *((void *)a2 + 1);
              unint64_t v84 = *((void *)a2 + 2);
              while (v83 < v84 && !*((unsigned char *)a2 + 24))
              {
                v86 = (char *)*((void *)this + 14);
                unint64_t v85 = *((void *)this + 15);
                if ((unint64_t)v86 >= v85)
                {
                  v88 = (char *)*v11;
                  uint64_t v89 = (v86 - (unsigned char *)*v11) >> 3;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 61) {
                    goto LABEL_644;
                  }
                  uint64_t v91 = v85 - (void)v88;
                  if (v91 >> 2 > v90) {
                    unint64_t v90 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    v93 = (char *)sub_10000EEB0((uint64_t)v408, v92);
                    v88 = (char *)*((void *)this + 13);
                    v86 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    v93 = 0;
                  }
                  v94 = &v93[8 * v89];
                  *(void *)v94 = 0;
                  v87 = v94 + 8;
                  while (v86 != v88)
                  {
                    uint64_t v95 = *((void *)v86 - 1);
                    v86 -= 8;
                    *((void *)v94 - 1) = v95;
                    v94 -= 8;
                  }
                  *((void *)this + 13) = v94;
                  *((void *)this + 14) = v87;
                  *((void *)this + 15) = &v93[8 * v92];
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *(void *)v86 = 0;
                  v87 = v86 + 8;
                }
                *((void *)this + 14) = v87;
                unint64_t v96 = *((void *)a2 + 1);
                if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v87 - 1) = *(void *)(*(void *)a2 + v96);
                unint64_t v84 = *((void *)a2 + 2);
                unint64_t v83 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v83;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                v289 = (char *)*((void *)this + 11);
                unint64_t v288 = *((void *)this + 12);
                if ((unint64_t)v289 >= v288)
                {
                  v354 = (char *)*v10;
                  uint64_t v355 = (v289 - (unsigned char *)*v10) >> 3;
                  unint64_t v356 = v355 + 1;
                  if ((unint64_t)(v355 + 1) >> 61) {
LABEL_645:
                  }
                    sub_10000EE98();
                  uint64_t v357 = v288 - (void)v354;
                  if (v357 >> 2 > v356) {
                    unint64_t v356 = v357 >> 2;
                  }
                  if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v358 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v358 = v356;
                  }
                  if (v358)
                  {
                    v359 = (char *)sub_10000EEB0((uint64_t)v409, v358);
                    v354 = (char *)*((void *)this + 10);
                    v289 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    v359 = 0;
                  }
                  v392 = &v359[8 * v355];
                  *(void *)v392 = 0;
                  v281 = v392 + 8;
                  while (v289 != v354)
                  {
                    uint64_t v393 = *((void *)v289 - 1);
                    v289 -= 8;
                    *((void *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *((void *)this + 10) = v392;
                  *((void *)this + 11) = v281;
                  *((void *)this + 12) = &v359[8 * v358];
                  if (v354) {
                    operator delete(v354);
                  }
                }
                else
                {
                  *(void *)v289 = 0;
                  v281 = v289 + 8;
                }
                *((void *)this + 11) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v97 = *((void *)a2 + 1);
              unint64_t v98 = *((void *)a2 + 2);
              while (v97 < v98 && !*((unsigned char *)a2 + 24))
              {
                v100 = (char *)*((void *)this + 11);
                unint64_t v99 = *((void *)this + 12);
                if ((unint64_t)v100 >= v99)
                {
                  v102 = (char *)*v10;
                  uint64_t v103 = (v100 - (unsigned char *)*v10) >> 3;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 61) {
                    goto LABEL_645;
                  }
                  uint64_t v105 = v99 - (void)v102;
                  if (v105 >> 2 > v104) {
                    unint64_t v104 = v105 >> 2;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    v107 = (char *)sub_10000EEB0((uint64_t)v409, v106);
                    v102 = (char *)*((void *)this + 10);
                    v100 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v108 = &v107[8 * v103];
                  *(void *)v108 = 0;
                  v101 = v108 + 8;
                  while (v100 != v102)
                  {
                    uint64_t v109 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v108 - 1) = v109;
                    v108 -= 8;
                  }
                  *((void *)this + 10) = v108;
                  *((void *)this + 11) = v101;
                  *((void *)this + 12) = &v107[8 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                }
                else
                {
                  *(void *)v100 = 0;
                  v101 = v100 + 8;
                }
                *((void *)this + 11) = v101;
                unint64_t v110 = *((void *)a2 + 1);
                if (v110 > 0xFFFFFFFFFFFFFFF7 || v110 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v101 - 1) = *(void *)(*(void *)a2 + v110);
                unint64_t v98 = *((void *)a2 + 2);
                unint64_t v97 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v97;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                v291 = (char *)*((void *)this + 17);
                unint64_t v290 = *((void *)this + 18);
                if ((unint64_t)v291 >= v290)
                {
                  v360 = (char *)*v9;
                  uint64_t v361 = (v291 - (unsigned char *)*v9) >> 3;
                  unint64_t v362 = v361 + 1;
                  if ((unint64_t)(v361 + 1) >> 61) {
LABEL_646:
                  }
                    sub_10000EE98();
                  uint64_t v363 = v290 - (void)v360;
                  if (v363 >> 2 > v362) {
                    unint64_t v362 = v363 >> 2;
                  }
                  if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v364 = v362;
                  }
                  if (v364)
                  {
                    v365 = (char *)sub_10000EEB0((uint64_t)v410, v364);
                    v360 = (char *)*((void *)this + 16);
                    v291 = (char *)*((void *)this + 17);
                  }
                  else
                  {
                    v365 = 0;
                  }
                  v394 = &v365[8 * v361];
                  *(void *)v394 = 0;
                  v281 = v394 + 8;
                  while (v291 != v360)
                  {
                    uint64_t v395 = *((void *)v291 - 1);
                    v291 -= 8;
                    *((void *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *((void *)this + 16) = v394;
                  *((void *)this + 17) = v281;
                  *((void *)this + 18) = &v365[8 * v364];
                  if (v360) {
                    operator delete(v360);
                  }
                }
                else
                {
                  *(void *)v291 = 0;
                  v281 = v291 + 8;
                }
                *((void *)this + 17) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v111 = *((void *)a2 + 1);
              unint64_t v112 = *((void *)a2 + 2);
              while (v111 < v112 && !*((unsigned char *)a2 + 24))
              {
                v114 = (char *)*((void *)this + 17);
                unint64_t v113 = *((void *)this + 18);
                if ((unint64_t)v114 >= v113)
                {
                  v116 = (char *)*v9;
                  uint64_t v117 = (v114 - (unsigned char *)*v9) >> 3;
                  unint64_t v118 = v117 + 1;
                  if ((unint64_t)(v117 + 1) >> 61) {
                    goto LABEL_646;
                  }
                  uint64_t v119 = v113 - (void)v116;
                  if (v119 >> 2 > v118) {
                    unint64_t v118 = v119 >> 2;
                  }
                  if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v120 = v118;
                  }
                  if (v120)
                  {
                    v121 = (char *)sub_10000EEB0((uint64_t)v410, v120);
                    v116 = (char *)*((void *)this + 16);
                    v114 = (char *)*((void *)this + 17);
                  }
                  else
                  {
                    v121 = 0;
                  }
                  v122 = &v121[8 * v117];
                  *(void *)v122 = 0;
                  v115 = v122 + 8;
                  while (v114 != v116)
                  {
                    uint64_t v123 = *((void *)v114 - 1);
                    v114 -= 8;
                    *((void *)v122 - 1) = v123;
                    v122 -= 8;
                  }
                  *((void *)this + 16) = v122;
                  *((void *)this + 17) = v115;
                  *((void *)this + 18) = &v121[8 * v120];
                  if (v116) {
                    operator delete(v116);
                  }
                }
                else
                {
                  *(void *)v114 = 0;
                  v115 = v114 + 8;
                }
                *((void *)this + 17) = v115;
                unint64_t v124 = *((void *)a2 + 1);
                if (v124 > 0xFFFFFFFFFFFFFFF7 || v124 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v115 - 1) = *(void *)(*(void *)a2 + v124);
                unint64_t v112 = *((void *)a2 + 2);
                unint64_t v111 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v111;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                v293 = (char *)*((void *)this + 23);
                unint64_t v292 = *((void *)this + 24);
                if ((unint64_t)v293 >= v292)
                {
                  v366 = (char *)*v8;
                  uint64_t v367 = (v293 - (unsigned char *)*v8) >> 3;
                  unint64_t v368 = v367 + 1;
                  if ((unint64_t)(v367 + 1) >> 61) {
LABEL_647:
                  }
                    sub_10000EE98();
                  uint64_t v369 = v292 - (void)v366;
                  if (v369 >> 2 > v368) {
                    unint64_t v368 = v369 >> 2;
                  }
                  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v370 = v368;
                  }
                  if (v370)
                  {
                    v371 = (char *)sub_10000EEB0((uint64_t)v411, v370);
                    v366 = (char *)*((void *)this + 22);
                    v293 = (char *)*((void *)this + 23);
                  }
                  else
                  {
                    v371 = 0;
                  }
                  v396 = &v371[8 * v367];
                  *(void *)v396 = 0;
                  v281 = v396 + 8;
                  while (v293 != v366)
                  {
                    uint64_t v397 = *((void *)v293 - 1);
                    v293 -= 8;
                    *((void *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *((void *)this + 22) = v396;
                  *((void *)this + 23) = v281;
                  *((void *)this + 24) = &v371[8 * v370];
                  if (v366) {
                    operator delete(v366);
                  }
                }
                else
                {
                  *(void *)v293 = 0;
                  v281 = v293 + 8;
                }
                *((void *)this + 23) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v125 = *((void *)a2 + 1);
              unint64_t v126 = *((void *)a2 + 2);
              while (v125 < v126 && !*((unsigned char *)a2 + 24))
              {
                v128 = (char *)*((void *)this + 23);
                unint64_t v127 = *((void *)this + 24);
                if ((unint64_t)v128 >= v127)
                {
                  v130 = (char *)*v8;
                  uint64_t v131 = (v128 - (unsigned char *)*v8) >> 3;
                  unint64_t v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 61) {
                    goto LABEL_647;
                  }
                  uint64_t v133 = v127 - (void)v130;
                  if (v133 >> 2 > v132) {
                    unint64_t v132 = v133 >> 2;
                  }
                  if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v134 = v132;
                  }
                  if (v134)
                  {
                    v135 = (char *)sub_10000EEB0((uint64_t)v411, v134);
                    v130 = (char *)*((void *)this + 22);
                    v128 = (char *)*((void *)this + 23);
                  }
                  else
                  {
                    v135 = 0;
                  }
                  v136 = &v135[8 * v131];
                  *(void *)v136 = 0;
                  v129 = v136 + 8;
                  while (v128 != v130)
                  {
                    uint64_t v137 = *((void *)v128 - 1);
                    v128 -= 8;
                    *((void *)v136 - 1) = v137;
                    v136 -= 8;
                  }
                  *((void *)this + 22) = v136;
                  *((void *)this + 23) = v129;
                  *((void *)this + 24) = &v135[8 * v134];
                  if (v130) {
                    operator delete(v130);
                  }
                }
                else
                {
                  *(void *)v128 = 0;
                  v129 = v128 + 8;
                }
                *((void *)this + 23) = v129;
                unint64_t v138 = *((void *)a2 + 1);
                if (v138 > 0xFFFFFFFFFFFFFFF7 || v138 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v129 - 1) = *(void *)(*(void *)a2 + v138);
                unint64_t v126 = *((void *)a2 + 2);
                unint64_t v125 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v125;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                v295 = (char *)*((void *)this + 20);
                unint64_t v294 = *((void *)this + 21);
                if ((unint64_t)v295 >= v294)
                {
                  v372 = (char *)*v414;
                  uint64_t v373 = (v295 - (unsigned char *)*v414) >> 3;
                  unint64_t v374 = v373 + 1;
                  if ((unint64_t)(v373 + 1) >> 61) {
LABEL_648:
                  }
                    sub_10000EE98();
                  uint64_t v375 = v294 - (void)v372;
                  if (v375 >> 2 > v374) {
                    unint64_t v374 = v375 >> 2;
                  }
                  if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v376 = v374;
                  }
                  if (v376)
                  {
                    v377 = (char *)sub_10000EEB0((uint64_t)v412, v376);
                    v372 = (char *)*((void *)this + 19);
                    v295 = (char *)*((void *)this + 20);
                  }
                  else
                  {
                    v377 = 0;
                  }
                  v398 = &v377[8 * v373];
                  *(void *)v398 = 0;
                  v281 = v398 + 8;
                  while (v295 != v372)
                  {
                    uint64_t v399 = *((void *)v295 - 1);
                    v295 -= 8;
                    *((void *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *((void *)this + 19) = v398;
                  *((void *)this + 20) = v281;
                  *((void *)this + 21) = &v377[8 * v376];
                  if (v372) {
                    operator delete(v372);
                  }
                }
                else
                {
                  *(void *)v295 = 0;
                  v281 = v295 + 8;
                }
                *((void *)this + 20) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v139 = *((void *)a2 + 1);
              unint64_t v140 = *((void *)a2 + 2);
              while (v139 < v140 && !*((unsigned char *)a2 + 24))
              {
                v142 = (char *)*((void *)this + 20);
                unint64_t v141 = *((void *)this + 21);
                if ((unint64_t)v142 >= v141)
                {
                  v144 = (char *)*v414;
                  uint64_t v145 = (v142 - (unsigned char *)*v414) >> 3;
                  unint64_t v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) >> 61) {
                    goto LABEL_648;
                  }
                  uint64_t v147 = v141 - (void)v144;
                  if (v147 >> 2 > v146) {
                    unint64_t v146 = v147 >> 2;
                  }
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v148 = v146;
                  }
                  if (v148)
                  {
                    v149 = (char *)sub_10000EEB0((uint64_t)v412, v148);
                    v144 = (char *)*((void *)this + 19);
                    v142 = (char *)*((void *)this + 20);
                  }
                  else
                  {
                    v149 = 0;
                  }
                  v150 = &v149[8 * v145];
                  *(void *)v150 = 0;
                  v143 = v150 + 8;
                  while (v142 != v144)
                  {
                    uint64_t v151 = *((void *)v142 - 1);
                    v142 -= 8;
                    *((void *)v150 - 1) = v151;
                    v150 -= 8;
                  }
                  *((void *)this + 19) = v150;
                  *((void *)this + 20) = v143;
                  *((void *)this + 21) = &v149[8 * v148];
                  if (v144) {
                    operator delete(v144);
                  }
                }
                else
                {
                  *(void *)v142 = 0;
                  v143 = v142 + 8;
                }
                *((void *)this + 20) = v143;
                unint64_t v152 = *((void *)a2 + 1);
                if (v152 > 0xFFFFFFFFFFFFFFF7 || v152 + 8 > *((void *)a2 + 2)) {
                  goto LABEL_252;
                }
                *(v143 - 1) = *(void *)(*(void *)a2 + v152);
                unint64_t v140 = *((void *)a2 + 2);
                unint64_t v139 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v139;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if (PB::Reader::placeMark()) {
                  return 0;
                }
                unint64_t v153 = *((void *)a2 + 1);
                unint64_t v154 = *((void *)a2 + 2);
                while (v153 < v154 && !*((unsigned char *)a2 + 24))
                {
                  v156 = (char *)*((void *)this + 26);
                  unint64_t v155 = *((void *)this + 27);
                  if ((unint64_t)v156 >= v155)
                  {
                    v158 = (char *)*v415;
                    uint64_t v159 = (v156 - (unsigned char *)*v415) >> 3;
                    unint64_t v160 = v159 + 1;
                    if ((unint64_t)(v159 + 1) >> 61) {
                      goto LABEL_649;
                    }
                    uint64_t v161 = v155 - (void)v158;
                    if (v161 >> 2 > v160) {
                      unint64_t v160 = v161 >> 2;
                    }
                    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v162 = v160;
                    }
                    if (v162)
                    {
                      v163 = (char *)sub_10000EEB0((uint64_t)v413, v162);
                      v158 = (char *)*((void *)this + 25);
                      v156 = (char *)*((void *)this + 26);
                    }
                    else
                    {
                      v163 = 0;
                    }
                    v164 = &v163[8 * v159];
                    *(void *)v164 = 0;
                    v157 = v164 + 8;
                    while (v156 != v158)
                    {
                      uint64_t v165 = *((void *)v156 - 1);
                      v156 -= 8;
                      *((void *)v164 - 1) = v165;
                      v164 -= 8;
                    }
                    *((void *)this + 25) = v164;
                    *((void *)this + 26) = v157;
                    *((void *)this + 27) = &v163[8 * v162];
                    if (v158) {
                      operator delete(v158);
                    }
                  }
                  else
                  {
                    *(void *)v156 = 0;
                    v157 = v156 + 8;
                  }
                  *((void *)this + 26) = v157;
                  unint64_t v166 = *((void *)a2 + 1);
                  if (v166 > 0xFFFFFFFFFFFFFFF7 || v166 + 8 > *((void *)a2 + 2))
                  {
LABEL_252:
                    *((unsigned char *)a2 + 24) = 1;
                    break;
                  }
                  *(v157 - 1) = *(void *)(*(void *)a2 + v166);
                  unint64_t v154 = *((void *)a2 + 2);
                  unint64_t v153 = *((void *)a2 + 1) + 8;
                  *((void *)a2 + 1) = v153;
                }
LABEL_253:
                PB::Reader::recallMark();
              }
              else
              {
                v297 = (char *)*((void *)this + 26);
                unint64_t v296 = *((void *)this + 27);
                if ((unint64_t)v297 >= v296)
                {
                  v378 = (char *)*v415;
                  uint64_t v379 = (v297 - (unsigned char *)*v415) >> 3;
                  unint64_t v380 = v379 + 1;
                  if ((unint64_t)(v379 + 1) >> 61) {
LABEL_649:
                  }
                    sub_10000EE98();
                  uint64_t v381 = v296 - (void)v378;
                  if (v381 >> 2 > v380) {
                    unint64_t v380 = v381 >> 2;
                  }
                  if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v382 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v382 = v380;
                  }
                  if (v382)
                  {
                    v383 = (char *)sub_10000EEB0((uint64_t)v413, v382);
                    v378 = (char *)*((void *)this + 25);
                    v297 = (char *)*((void *)this + 26);
                  }
                  else
                  {
                    v383 = 0;
                  }
                  v400 = &v383[8 * v379];
                  *(void *)v400 = 0;
                  v281 = v400 + 8;
                  while (v297 != v378)
                  {
                    uint64_t v401 = *((void *)v297 - 1);
                    v297 -= 8;
                    *((void *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *((void *)this + 25) = v400;
                  *((void *)this + 26) = v281;
                  *((void *)this + 27) = &v383[8 * v382];
                  if (v378) {
                    operator delete(v378);
                  }
                }
                else
                {
                  *(void *)v297 = 0;
                  v281 = v297 + 8;
                }
                *((void *)this + 26) = v281;
LABEL_626:
                unint64_t v402 = *((void *)a2 + 1);
                if (v402 <= 0xFFFFFFFFFFFFFFF7 && v402 + 8 <= *((void *)a2 + 2))
                {
                  *(v281 - 1) = *(void *)(*(void *)a2 + v402);
LABEL_630:
                  *((void *)a2 + 1) += 8;
                }
                else
                {
LABEL_628:
                  *((unsigned char *)a2 + 24) = 1;
                }
              }
LABEL_631:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *((_DWORD *)this + 99) |= 0x10000000u;
                  unint64_t v51 = *((void *)a2 + 1);
                  if (v51 >= *((void *)a2 + 2))
                  {
                    BOOL v54 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                  }
                  else
                  {
                    unint64_t v52 = v51 + 1;
                    int v53 = *(unsigned __int8 *)(*(void *)a2 + v51);
                    *((void *)a2 + 1) = v52;
                    BOOL v54 = v53 != 0;
                  }
                  *((unsigned char *)this + 392) = v54;
                  goto LABEL_631;
                case 'f':
                  *((_DWORD *)this + 99) |= 0x8000000u;
                  unint64_t v263 = *((void *)a2 + 1);
                  if (v263 >= *((void *)a2 + 2))
                  {
                    BOOL v266 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                  }
                  else
                  {
                    unint64_t v264 = v263 + 1;
                    int v265 = *(unsigned __int8 *)(*(void *)a2 + v263);
                    *((void *)a2 + 1) = v264;
                    BOOL v266 = v265 != 0;
                  }
                  *((unsigned char *)this + 391) = v266;
                  goto LABEL_631;
                case 'g':
                  *((_DWORD *)this + 99) |= 0x20000000u;
                  unint64_t v267 = *((void *)a2 + 1);
                  if (v267 >= *((void *)a2 + 2))
                  {
                    BOOL v270 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                  }
                  else
                  {
                    unint64_t v268 = v267 + 1;
                    int v269 = *(unsigned __int8 *)(*(void *)a2 + v267);
                    *((void *)a2 + 1) = v268;
                    BOOL v270 = v269 != 0;
                  }
                  *((unsigned char *)this + 393) = v270;
                  goto LABEL_631;
                case 'h':
                  *((_DWORD *)this + 99) |= 0x2000000u;
                  unint64_t v271 = *((void *)a2 + 1);
                  if (v271 >= *((void *)a2 + 2))
                  {
                    BOOL v274 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                  }
                  else
                  {
                    unint64_t v272 = v271 + 1;
                    int v273 = *(unsigned __int8 *)(*(void *)a2 + v271);
                    *((void *)a2 + 1) = v272;
                    BOOL v274 = v273 != 0;
                  }
                  *((unsigned char *)this + 389) = v274;
                  goto LABEL_631;
                case 'i':
                  *((_DWORD *)this + 99) |= 0x4000000u;
                  unint64_t v275 = *((void *)a2 + 1);
                  if (v275 >= *((void *)a2 + 2))
                  {
                    BOOL v278 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                  }
                  else
                  {
                    unint64_t v276 = v275 + 1;
                    int v277 = *(unsigned __int8 *)(*(void *)a2 + v275);
                    *((void *)a2 + 1) = v276;
                    BOOL v278 = v277 != 0;
                  }
                  *((unsigned char *)this + 390) = v278;
                  goto LABEL_631;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v24 = v2 + 1;
      char v25 = *(unsigned char *)(v15 + v2);
      *((void *)a2 + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      unint64_t v2 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDetectionWristStateReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 396);
  if ((v4 & 0x80000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 376), 1u);
    int v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 388), 2u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(double *)(v3 + 224), 3u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(double *)(v3 + 368), 4u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 232), 5u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 256), 0x15u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::write(a2, *(double *)(v3 + 264), 0x16u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(double *)(v3 + 288), 0x17u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(double *)(v3 + 304), 0x18u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(double *)(v3 + 296), 0x19u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(double *)(v3 + 280), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(double *)(v3 + 272), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(double *)(v3 + 320), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(double *)(v3 + 312), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 360), 0x1Eu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 352), 0x1Fu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 344), 0x20u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 336), 0x21u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 328), 0x22u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 395), 0x29u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(double *)(v3 + 240), 0x2Au);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(double *)(v3 + 248), 0x2Bu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 384), 0x33u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 386), 0x34u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 394), 0x35u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 385), 0x36u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 387), 0x37u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 392), 0x65u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 391), 0x66u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_32;
    }
LABEL_92:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 389), 0x68u);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 393), 0x67u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_92;
  }
LABEL_32:
  if ((v4 & 0x4000000) != 0) {
LABEL_33:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 390), 0x69u);
LABEL_34:
  int v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 0x97u);
  }
  double v8 = *(double **)(v3 + 8);
  uint64_t v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10, 0x98u);
  }
  double v11 = *(double **)(v3 + 56);
  uint64_t v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0x99u);
  }
  double v14 = *(double **)(v3 + 104);
  uint64_t v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    double v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xA1u);
  }
  unsigned int v17 = *(double **)(v3 + 80);
  unint64_t v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    double v19 = *v17++;
    this = PB::Writer::write(a2, v19, 0xA2u);
  }
  char v20 = *(double **)(v3 + 128);
  BOOL v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    double v22 = *v20++;
    this = PB::Writer::write(a2, v22, 0xA3u);
  }
  unsigned int v23 = *(double **)(v3 + 176);
  unint64_t v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    double v25 = *v23++;
    this = PB::Writer::write(a2, v25, 0xA4u);
  }
  uint64_t v26 = *(double **)(v3 + 152);
  int v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    this = PB::Writer::write(a2, v28, 0xA5u);
  }
  unint64_t v30 = *(double **)(v3 + 200);
  unint64_t v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    double v31 = *v30++;
    this = PB::Writer::write(a2, v31, 0xA6u);
  }
  return this;
}

BOOL CMMsl::FallDetectionWristStateReplay::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 396);
  int v4 = *(_DWORD *)(a2 + 396);
  if ((v3 & 0x80000) != 0)
  {
    if ((v4 & 0x80000) == 0) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 376);
    uint64_t v6 = *(void *)(a2 + 376);
    BOOL v2 = __OFSUB__(v5, v6);
    if (v5 != v6) {
      return 0;
    }
  }
  else if ((v4 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000000) != 0)
  {
    if ((v4 & 0x1000000) == 0) {
      return 0;
    }
    int v7 = *(unsigned __int8 *)(a1 + 388);
    int v8 = *(unsigned __int8 *)(a2 + 388);
    BOOL v2 = __OFSUB__(v7, v8);
    if (v7 != v8) {
      return 0;
    }
  }
  else if ((v4 & 0x1000000) != 0)
  {
    return 0;
  }
  if (v3)
  {
    if ((v4 & 1) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 224) != *(double *)(a2 + 224)) {
      return 0;
    }
  }
  else if (v4)
  {
    return 0;
  }
  if ((v3 & 0x40000) != 0)
  {
    if ((v4 & 0x40000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 368) != *(double *)(a2 + 368)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v3 & 2) != 0)
  {
    if ((v4 & 2) == 0) {
      return 0;
    }
    uint64_t v9 = *(void *)(a1 + 232);
    uint64_t v10 = *(void *)(a2 + 232);
    BOOL v2 = __OFSUB__(v9, v10);
    if (v9 != v10) {
      return 0;
    }
  }
  else if ((v4 & 2) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 256);
    uint64_t v12 = *(void *)(a2 + 256);
    BOOL v2 = __OFSUB__(v11, v12);
    if (v11 != v12) {
      return 0;
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20) != 0)
  {
    if ((v4 & 0x20) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 264) != *(double *)(a2 + 264)) {
      return 0;
    }
  }
  else if ((v4 & 0x20) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 288) != *(double *)(a2 + 288)) {
      return 0;
    }
  }
  else if ((v4 & 0x100) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400) != 0)
  {
    if ((v4 & 0x400) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 304) != *(double *)(a2 + 304)) {
      return 0;
    }
  }
  else if ((v4 & 0x400) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200) != 0)
  {
    if ((v4 & 0x200) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 296) != *(double *)(a2 + 296)) {
      return 0;
    }
  }
  else if ((v4 & 0x200) != 0)
  {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    if ((v4 & 0x80) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 280) != *(double *)(a2 + 280)) {
      return 0;
    }
  }
  else if ((v4 & 0x80) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 272) != *(double *)(a2 + 272)) {
      return 0;
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    return 0;
  }
  if ((v3 & 0x1000) != 0)
  {
    if ((v4 & 0x1000) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 320) != *(double *)(a2 + 320)) {
      return 0;
    }
  }
  else if ((v4 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800) != 0)
  {
    if ((v4 & 0x800) == 0) {
      return 0;
    }
    BOOL v2 = 0;
    if (*(double *)(a1 + 312) != *(double *)(a2 + 312)) {
      return 0;
    }
  }
  else if ((v4 & 0x800) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000) != 0)
  {
    if ((v4 & 0x20000) == 0) {
      return 0;
    }
    uint64_t v13 = *(void *)(a1 + 360);
    uint64_t v14 = *(void *)(a2 + 360);
    BOOL v2 = __OFSUB__(v13, v14);
    if (v13 != v14) {
      return 0;
    }
  }
  else if ((v4 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000) != 0)
  {
    if ((v4 & 0x10000) == 0) {
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 352);
    uint64_t v16 = *(void *)(a2 + 352);
    BOOL v2 = __OFSUB__(v15, v16);
    if (v15 != v16) {
      return 0;
    }
  }
  else if ((v4 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000) != 0)
  {
    if ((v4 & 0x8000) == 0) {
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 344);
    uint64_t v18 = *(void *)(a2 + 344);
    BOOL v2 = __OFSUB__(v17, v18);
    if (v17 != v18) {
      return 0;
    }
  }
  else if ((v4 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000) != 0)
  {
    if ((v4 & 0x4000) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 336);
    uint64_t v20 = *(void *)(a2 + 336);
    BOOL v2 = __OFSUB__(v19, v20);
    if (v19 != v20) {
      return 0;
    }
  }
  else if ((v4 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000) != 0)
  {
    if ((v4 & 0x2000) == 0) {
      return 0;
    }
    uint64_t v21 = *(void *)(a1 + 328);
    uint64_t v22 = *(void *)(a2 + 328);
    BOOL v2 = __OFSUB__(v21, v22);
    if (v21 != v22) {
      return 0;
    }
  }
  else if ((v4 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v3 & v4) < 0 != v2)
  {
    if (*(unsigned __int8 *)(a1 + 395) != *(unsigned __int8 *)(a2 + 395)) {
      return 0;
    }
  }
  else if ((v3 | v4) < 0)
  {
    return 0;
  }
  if ((v3 & 4) != 0)
  {
    if ((v4 & 4) == 0 || *(double *)(a1 + 240) != *(double *)(a2 + 240)) {
      return 0;
    }
  }
  else if ((v4 & 4) != 0)
  {
    return 0;
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0 || *(double *)(a1 + 248) != *(double *)(a2 + 248)) {
      return 0;
    }
  }
  else if ((v4 & 8) != 0)
  {
    return 0;
  }
  if ((v3 & 0x100000) != 0)
  {
    if ((v4 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 384) != *(unsigned __int8 *)(a2 + 384)) {
      return 0;
    }
  }
  else if ((v4 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x400000) != 0)
  {
    if ((v4 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 386) != *(unsigned __int8 *)(a2 + 386)) {
      return 0;
    }
  }
  else if ((v4 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x40000000) != 0)
  {
    if ((v4 & 0x40000000) == 0 || *(unsigned __int8 *)(a1 + 394) != *(unsigned __int8 *)(a2 + 394)) {
      return 0;
    }
  }
  else if ((v4 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x200000) != 0)
  {
    if ((v4 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 385) != *(unsigned __int8 *)(a2 + 385)) {
      return 0;
    }
  }
  else if ((v4 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x800000) != 0)
  {
    if ((v4 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 387) != *(unsigned __int8 *)(a2 + 387)) {
      return 0;
    }
  }
  else if ((v4 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x10000000) != 0)
  {
    if ((v4 & 0x10000000) == 0 || *(unsigned __int8 *)(a1 + 392) != *(unsigned __int8 *)(a2 + 392)) {
      return 0;
    }
  }
  else if ((v4 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x8000000) != 0)
  {
    if ((v4 & 0x8000000) == 0 || *(unsigned __int8 *)(a1 + 391) != *(unsigned __int8 *)(a2 + 391)) {
      return 0;
    }
  }
  else if ((v4 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x20000000) != 0)
  {
    if ((v4 & 0x20000000) == 0 || *(unsigned __int8 *)(a1 + 393) != *(unsigned __int8 *)(a2 + 393)) {
      return 0;
    }
  }
  else if ((v4 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x2000000) != 0)
  {
    if ((v4 & 0x2000000) == 0 || *(unsigned __int8 *)(a1 + 389) != *(unsigned __int8 *)(a2 + 389)) {
      return 0;
    }
  }
  else if ((v4 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v3 & 0x4000000) != 0)
  {
    if ((v4 & 0x4000000) == 0 || *(unsigned __int8 *)(a1 + 390) != *(unsigned __int8 *)(a2 + 390)) {
      return 0;
    }
  }
  else if ((v4 & 0x4000000) != 0)
  {
    return 0;
  }
  unint64_t v24 = *(double **)(a1 + 32);
  unsigned int v23 = *(double **)(a1 + 40);
  double v25 = *(double **)(a2 + 32);
  if ((char *)v23 - (char *)v24 != *(void *)(a2 + 40) - (void)v25) {
    return 0;
  }
  while (v24 != v23)
  {
    if (*v24 != *v25) {
      return 0;
    }
    ++v24;
    ++v25;
  }
  int v27 = *(double **)(a1 + 8);
  uint64_t v26 = *(double **)(a1 + 16);
  double v28 = *(double **)(a2 + 8);
  if ((char *)v26 - (char *)v27 != *(void *)(a2 + 16) - (void)v28) {
    return 0;
  }
  while (v27 != v26)
  {
    if (*v27 != *v28) {
      return 0;
    }
    ++v27;
    ++v28;
  }
  unint64_t v30 = *(double **)(a1 + 56);
  unint64_t v29 = *(double **)(a1 + 64);
  double v31 = *(double **)(a2 + 56);
  if ((char *)v29 - (char *)v30 != *(void *)(a2 + 64) - (void)v31) {
    return 0;
  }
  while (v30 != v29)
  {
    if (*v30 != *v31) {
      return 0;
    }
    ++v30;
    ++v31;
  }
  unsigned int v33 = *(double **)(a1 + 104);
  char v32 = *(double **)(a1 + 112);
  uint64_t v34 = *(double **)(a2 + 104);
  if ((char *)v32 - (char *)v33 != *(void *)(a2 + 112) - (void)v34) {
    return 0;
  }
  while (v33 != v32)
  {
    if (*v33 != *v34) {
      return 0;
    }
    ++v33;
    ++v34;
  }
  char v36 = *(double **)(a1 + 80);
  unint64_t v35 = *(double **)(a1 + 88);
  unint64_t v37 = *(double **)(a2 + 80);
  if ((char *)v35 - (char *)v36 != *(void *)(a2 + 88) - (void)v37) {
    return 0;
  }
  while (v36 != v35)
  {
    if (*v36 != *v37) {
      return 0;
    }
    ++v36;
    ++v37;
  }
  unint64_t v39 = *(double **)(a1 + 128);
  unint64_t v38 = *(double **)(a1 + 136);
  uint64_t v40 = *(double **)(a2 + 128);
  if ((char *)v38 - (char *)v39 != *(void *)(a2 + 136) - (void)v40) {
    return 0;
  }
  while (v39 != v38)
  {
    if (*v39 != *v40) {
      return 0;
    }
    ++v39;
    ++v40;
  }
  uint64_t v42 = *(double **)(a1 + 176);
  uint64_t v41 = *(double **)(a1 + 184);
  uint64_t v43 = *(double **)(a2 + 176);
  if ((char *)v41 - (char *)v42 != *(void *)(a2 + 184) - (void)v43) {
    return 0;
  }
  while (v42 != v41)
  {
    if (*v42 != *v43) {
      return 0;
    }
    ++v42;
    ++v43;
  }
  uint64_t v45 = *(double **)(a1 + 152);
  unint64_t v44 = *(double **)(a1 + 160);
  unint64_t v46 = *(double **)(a2 + 152);
  if ((char *)v44 - (char *)v45 != *(void *)(a2 + 160) - (void)v46) {
    return 0;
  }
  while (v45 != v44)
  {
    if (*v45 != *v46) {
      return 0;
    }
    ++v45;
    ++v46;
  }
  uint64_t v48 = *(void *)(a1 + 200);
  uint64_t v47 = *(void *)(a1 + 208);
  uint64_t v49 = *(double **)(a2 + 200);
  if (v47 - v48 != *(void *)(a2 + 208) - (void)v49) {
    return 0;
  }
  if (v48 == v47) {
    return 1;
  }
  uint64_t v50 = v48 + 8;
  do
  {
    double v51 = *v49++;
    BOOL result = *(double *)(v50 - 8) == v51;
    BOOL v53 = *(double *)(v50 - 8) != v51 || v50 == v47;
    v50 += 8;
  }
  while (!v53);
  return result;
}

uint64_t CMMsl::FallDetectionWristStateReplay::hash_value(CMMsl::FallDetectionWristStateReplay *this)
{
  int v2 = *((_DWORD *)this + 99);
  if ((v2 & 0x80000) != 0)
  {
    uint64_t v3 = *((void *)this + 47);
    if ((v2 & 0x1000000) != 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned __int8 *)this + 388);
      if (v2) {
        goto LABEL_4;
      }
LABEL_69:
      double v46 = 0.0;
      if ((v2 & 0x40000) != 0) {
        goto LABEL_7;
      }
LABEL_70:
      double v45 = 0.0;
      if ((v2 & 2) != 0) {
        goto LABEL_10;
      }
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_4:
  double v5 = *((double *)this + 28);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v46 = v5;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_70;
  }
LABEL_7:
  double v6 = *((double *)this + 46);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v45 = v6;
  if ((v2 & 2) != 0)
  {
LABEL_10:
    uint64_t v44 = *((void *)this + 29);
    if ((v2 & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v44 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_11:
    uint64_t v43 = *((void *)this + 32);
    if ((v2 & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_73:
    double v42 = 0.0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_74:
    uint64_t v8 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_19;
    }
LABEL_75:
    uint64_t v9 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_23;
    }
LABEL_76:
    uint64_t v10 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_77:
    uint64_t v11 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_31;
    }
LABEL_78:
    uint64_t v12 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_35;
    }
LABEL_79:
    uint64_t v13 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_39;
    }
LABEL_80:
    uint64_t v14 = 0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_81;
  }
LABEL_72:
  uint64_t v43 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_73;
  }
LABEL_12:
  double v7 = *((double *)this + 33);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  double v42 = v7;
  if ((v2 & 0x100) == 0) {
    goto LABEL_74;
  }
LABEL_15:
  if (*((double *)this + 36) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 36);
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_75;
  }
LABEL_19:
  if (*((double *)this + 38) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 38);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_76;
  }
LABEL_23:
  if (*((double *)this + 37) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 37);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_77;
  }
LABEL_27:
  if (*((double *)this + 35) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 35);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_78;
  }
LABEL_31:
  if (*((double *)this + 34) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 34);
  }
  if ((v2 & 0x1000) == 0) {
    goto LABEL_79;
  }
LABEL_35:
  if (*((double *)this + 40) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 40);
  }
  if ((v2 & 0x800) == 0) {
    goto LABEL_80;
  }
LABEL_39:
  if (*((double *)this + 39) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 39);
  }
  if ((v2 & 0x20000) != 0)
  {
LABEL_43:
    uint64_t v15 = *((void *)this + 45);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v15 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_44:
    uint64_t v16 = *((void *)this + 44);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v16 = 0;
  if ((v2 & 0x8000) != 0)
  {
LABEL_45:
    uint64_t v17 = *((void *)this + 43);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v17 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_46:
    uint64_t v18 = *((void *)this + 42);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v18 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_47:
    uint64_t v19 = *((void *)this + 41);
    if (v2 < 0) {
      goto LABEL_48;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v19 = 0;
  if (v2 < 0)
  {
LABEL_48:
    uint64_t v20 = *((unsigned __int8 *)this + 395);
    if ((v2 & 4) != 0) {
      goto LABEL_49;
    }
LABEL_87:
    uint64_t v21 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_53;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_89;
  }
LABEL_86:
  uint64_t v20 = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_87;
  }
LABEL_49:
  if (*((double *)this + 30) == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *((void *)this + 30);
  }
  if ((v2 & 8) == 0) {
    goto LABEL_88;
  }
LABEL_53:
  if (*((double *)this + 31) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 31);
  }
  if ((v2 & 0x100000) != 0)
  {
LABEL_57:
    uint64_t v23 = *((unsigned __int8 *)this + 384);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_58;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v23 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_58:
    uint64_t v24 = *((unsigned __int8 *)this + 386);
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v24 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_59:
    uint64_t v25 = *((unsigned __int8 *)this + 394);
    if ((v2 & 0x200000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v25 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_60:
    uint64_t v26 = *((unsigned __int8 *)this + 385);
    if ((v2 & 0x800000) != 0) {
      goto LABEL_61;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t v26 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_61:
    uint64_t v27 = *((unsigned __int8 *)this + 387);
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t v27 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_62:
    uint64_t v28 = *((unsigned __int8 *)this + 392);
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v28 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_63:
    uint64_t v29 = *((unsigned __int8 *)this + 391);
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_64;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t v29 = 0;
  if ((v2 & 0x20000000) != 0)
  {
LABEL_64:
    uint64_t v30 = *((unsigned __int8 *)this + 393);
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_65;
    }
LABEL_97:
    uint64_t v31 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_66;
    }
LABEL_98:
    uint64_t v32 = 0;
    goto LABEL_99;
  }
LABEL_96:
  uint64_t v30 = 0;
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_97;
  }
LABEL_65:
  uint64_t v31 = *((unsigned __int8 *)this + 389);
  if ((v2 & 0x4000000) == 0) {
    goto LABEL_98;
  }
LABEL_66:
  uint64_t v32 = *((unsigned __int8 *)this + 390);
LABEL_99:
  uint64_t v33 = v4 ^ v3 ^ *(void *)&v46 ^ *(void *)&v45 ^ v44 ^ v43 ^ *(void *)&v42 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ PBHashBytes();
  uint64_t v34 = PBHashBytes();
  uint64_t v35 = v34 ^ PBHashBytes();
  uint64_t v36 = v33 ^ v35 ^ PBHashBytes();
  uint64_t v37 = PBHashBytes();
  uint64_t v38 = v37 ^ PBHashBytes();
  uint64_t v39 = v38 ^ PBHashBytes();
  uint64_t v40 = v36 ^ v39 ^ PBHashBytes();
  return v40 ^ PBHashBytes();
}

uint64_t CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t this)
{
  *(void *)this = off_1003A59F0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = off_1003A59F0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallDistanceReplay::~FallDistanceReplay(CMMsl::FallDistanceReplay *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(CMMsl::FallDistanceReplay *this, const CMMsl::FallDistanceReplay *a2)
{
  *(void *)this = off_1003A59F0;
  *((_DWORD *)this + 18) = 0;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    __int16 v3 = 4;
    *((_WORD *)this + 36) = 4;
    *((void *)this + 3) = v4;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 36) = v3;
    *((void *)this + 4) = v5;
    __int16 v2 = *((_WORD *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 36) = v3;
    *((void *)this + 2) = v6;
    __int16 v2 = *((_WORD *)a2 + 36);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x200u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 17) = v7;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x100u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 16) = v4;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 5) = v8;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 6) = v9;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *((void *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 36) = v3;
  *((void *)this + 1) = v10;
  __int16 v2 = *((_WORD *)a2 + 36);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x80u;
  *((_WORD *)this + 36) = v3;
  *((_DWORD *)this + 15) = v4;
  if ((*((_WORD *)a2 + 36) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_22:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  *((_WORD *)this + 36) = v3 | 0x40;
  *((_DWORD *)this + 14) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, const CMMsl::FallDistanceReplay *a2)
{
  if ((const CMMsl::FallDistanceReplay *)a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((CMMsl::FallDistanceReplay *)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 68);
    *(void *)(a1 + 68) = v16;
    uint64_t v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v5;
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallDistanceReplay *a2, CMMsl::FallDistanceReplay *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

float CMMsl::FallDistanceReplay::FallDistanceReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A59F0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  float result = *(float *)(a2 + 56);
  *(float *)(a1 + 56) = result;
  return result;
}

uint64_t CMMsl::FallDistanceReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FallDistanceReplay::FallDistanceReplay((uint64_t)&v9, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 68);
    *(void *)(a1 + 68) = v16;
    uint64_t v16 = v4;
    LODWORD(v3) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v15;
    int v15 = v3;
    long long v5 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v12;
    long long v12 = v5;
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    *(void *)&long long v7 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::FallDistanceReplay::formatText(CMMsl::FallDistanceReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "afterElevationMedian", *((float *)this + 14));
    __int16 v5 = *((_WORD *)this + 36);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "beforeElevationMedian", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "endTimestampOfWindow", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "impactTimestamp", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "iostime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "pressureTimestamp", *((void *)this + 4));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rangeOfElevationInWindow", *((float *)this + 16));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "startTimestampOfLastInspectedWindow", *((void *)this + 5));
  __int16 v5 = *((_WORD *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTimestampOfWindow", *((void *)this + 6));
  if ((*((_WORD *)this + 36) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 17));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallDistanceReplay::readFrom(CMMsl::FallDistanceReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_122;
            case 2u:
              *((_WORD *)this + 36) |= 8u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v59 = v20++;
                  char v60 = *(unsigned char *)(v21 + v59);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_126:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_126;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)a2 + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_127:
              *((void *)this + 4) = v24;
              goto LABEL_153;
            case 3u:
              *((_WORD *)this + 36) |= 2u;
              unint64_t v26 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v27 = *(void *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v63 = v26++;
                  char v64 = *(unsigned char *)(v27 + v63);
                  *((void *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_131:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_131;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)a2 + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_132:
              *((void *)this + 2) = v30;
              goto LABEL_153;
            case 4u:
              *((_WORD *)this + 36) |= 0x200u;
              unint64_t v32 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v33 = *(void *)a2;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v32++;
                  char v68 = *(unsigned char *)(v33 + v67);
                  *((void *)a2 + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_136;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)a2 + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *((_DWORD *)this + 17) = v36;
              goto LABEL_153;
            case 0xAu:
              *((_WORD *)this + 36) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_121;
            case 0xBu:
              *((_WORD *)this + 36) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_141:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_141;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_142:
              *((void *)this + 5) = v43;
              goto LABEL_153;
            case 0xCu:
              *((_WORD *)this + 36) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_146:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_146;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_147:
              *((void *)this + 6) = v49;
              goto LABEL_153;
            case 0xDu:
              *((_WORD *)this + 36) |= 1u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_151:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_151;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_152:
              *((void *)this + 1) = v55;
LABEL_153:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x14u:
              *((_WORD *)this + 36) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_77;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_121;
            case 0x15u:
              *((_WORD *)this + 36) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_121:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_122:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_153;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_153;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallDistanceReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 72);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x14u);
    if ((*(_WORD *)(v3 + 72) & 0x40) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_21:
  float v5 = *(float *)(v3 + 56);

  return PB::Writer::write(a2, v5, 0x15u);
}

BOOL CMMsl::FallDistanceReplay::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 72);
  __int16 v3 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x200) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 72) & 0x100) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::FallDistanceReplay::hash_value(CMMsl::FallDistanceReplay *this)
{
  __int16 v1 = *((_WORD *)this + 36);
  if ((v1 & 4) != 0)
  {
    double v2 = *((double *)this + 3);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 8) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 4);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 2);
    if ((*((_WORD *)this + 36) & 0x200) != 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 36) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 17);
    if ((*((_WORD *)this + 36) & 0x100) != 0) {
      goto LABEL_6;
    }
LABEL_24:
    uint64_t v7 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 36) & 0x100) == 0) {
    goto LABEL_24;
  }
LABEL_6:
  float v6 = *((float *)this + 16);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_9:
    uint64_t v8 = *((void *)this + 5);
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    uint64_t v9 = *((void *)this + 6);
    if (v1) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v9 = 0;
  if (v1)
  {
LABEL_11:
    uint64_t v10 = *((void *)this + 1);
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_12:
    float v11 = *((float *)this + 15);
    uint64_t v12 = LODWORD(v11);
    if (v11 == 0.0) {
      uint64_t v12 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_29:
    uint64_t v14 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
  }
LABEL_28:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_15:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ v12 ^ v14;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this)
{
  *(void *)this = off_1003A5A28;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A5A28;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

void CMMsl::FallFalsePositiveSuppressionFeatures::~FallFalsePositiveSuppressionFeatures(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t this, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  *(void *)this = off_1003A5A28;
  *(_DWORD *)(this + 80) = 0;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    __int16 v3 = 4;
    *(_WORD *)(this + 80) = 4;
    *(void *)(this + 24) = v4;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 80) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 40);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 80) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 40);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 16);
  v3 |= 0x200u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 72) = v8;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 76) = v9;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 68) = v10;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x20u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 52) = v12;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 80) = v3;
  *(_DWORD *)(this + 60) = v13;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 80) = v3;
  *(void *)(this + 40) = v14;
  __int16 v2 = *((_WORD *)a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 14);
    *(_WORD *)(this + 80) = v3 | 0x80;
    *(_DWORD *)(this + 56) = v16;
    return this;
  }
LABEL_27:
  uint64_t v15 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 80) = v3;
  *(void *)(this + 32) = v15;
  if ((*((_WORD *)a2 + 40) & 0x80) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, const CMMsl::FallFalsePositiveSuppressionFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallFalsePositiveSuppressionFeatures *a2, CMMsl::FallFalsePositiveSuppressionFeatures *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  int v7 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v7;
  int v8 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v8;
  int v9 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v9;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  float result = *((float *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((float *)a2 + 13) = result;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  uint64_t v11 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  return result;
}

float CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5A28;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  float result = *(float *)(a2 + 52);
  *(float *)(a1 + 52) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return result;
}

CMMsl *CMMsl::FallFalsePositiveSuppressionFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallFalsePositiveSuppressionFeatures::FallFalsePositiveSuppressionFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallFalsePositiveSuppressionFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::formatText(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 40);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aopTsImpact", *((void *)this + 1));
    __int16 v5 = *((_WORD *)this + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsNow", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "aopTsSensor", *((void *)this + 3));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "nPeaks", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "normalizedIQR", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "repetitiveMotion", *((_DWORD *)this + 15));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "repetitiveMotionEndTs", *((void *)this + 4));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "repetitiveMotionStartTs", *((void *)this + 5));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 16));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "sumHighQPeaksInDecLowFreqFFT", *((float *)this + 17));
  __int16 v5 = *((_WORD *)this + 40);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "sumHighQPeaksInHighFreqFFT", *((float *)this + 18));
  if ((*((_WORD *)this + 40) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "sumHighQPeaksInLowFreqFFT", *((float *)this + 19));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::readFrom(CMMsl::FallFalsePositiveSuppressionFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 40) |= 4u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v77 = v20++;
                  char v78 = *(unsigned char *)(v21 + v77);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_167:
                unint64_t v2 = v77 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_168;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_168:
              *((void *)this + 3) = v24;
              goto LABEL_209;
            case 2u:
              *((_WORD *)this + 40) |= 2u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_173;
                  }
                  unint64_t v81 = v27++;
                  char v82 = *(unsigned char *)(v28 + v81);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_172:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_172;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_173:
              *((void *)this + 2) = v31;
              goto LABEL_209;
            case 3u:
              *((_WORD *)this + 40) |= 1u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v85 = v33++;
                  char v86 = *(unsigned char *)(v34 + v85);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_177:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_177;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_178:
              *((void *)this + 1) = v37;
              goto LABEL_209;
            case 4u:
              *((_WORD *)this + 40) |= 0x200u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v89 = v39++;
                  char v90 = *(unsigned char *)(v40 + v89);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_182;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *((_DWORD *)this + 16) = v43;
              goto LABEL_209;
            case 5u:
              *((_WORD *)this + 40) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_163;
            case 6u:
              *((_WORD *)this + 40) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_163;
            case 7u:
              *((_WORD *)this + 40) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_70;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_163;
            case 8u:
              *((_WORD *)this + 40) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v93 = v45++;
                  char v94 = *(unsigned char *)(v46 + v93);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_187;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *((_DWORD *)this + 12) = v49;
              goto LABEL_209;
            case 9u:
              *((_WORD *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_163:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_70:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *((_WORD *)this + 40) |= 0x100u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v97 = v51++;
                  char v98 = *(unsigned char *)(v52 + v97);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_192;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *((_DWORD *)this + 15) = v55;
              goto LABEL_209;
            case 0xBu:
              *((_WORD *)this + 40) |= 0x10u;
              unint64_t v57 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v58 = *(void *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    uint64_t v61 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v101 = v57++;
                  char v102 = *(unsigned char *)(v58 + v101);
                  *((void *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v61 = 0;
LABEL_197:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v61 = 0;
                }
                goto LABEL_197;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)a2 + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              uint64_t v61 = 0;
LABEL_198:
              *((void *)this + 5) = v61;
              goto LABEL_209;
            case 0xCu:
              *((_WORD *)this + 40) |= 8u;
              unint64_t v63 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v64 = *(void *)a2;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v103 = 0;
                unsigned int v104 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    uint64_t v67 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v105 = v63++;
                  char v106 = *(unsigned char *)(v64 + v105);
                  *((void *)a2 + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v103 += 7;
                  BOOL v14 = v104++ > 8;
                  if (v14)
                  {
                    uint64_t v67 = 0;
LABEL_202:
                    unint64_t v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v67 = 0;
                }
                goto LABEL_202;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)a2 + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              uint64_t v67 = 0;
LABEL_203:
              *((void *)this + 4) = v67;
              goto LABEL_209;
            case 0xDu:
              *((_WORD *)this + 40) |= 0x80u;
              unint64_t v69 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v70 = *(void *)a2;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                char v107 = 0;
                unsigned int v108 = 0;
                uint64_t v73 = 0;
                if (v2 <= v69) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v109 = v69++;
                  char v110 = *(unsigned char *)(v70 + v109);
                  *((void *)a2 + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0) {
                    break;
                  }
                  v107 += 7;
                  BOOL v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    unint64_t v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_207;
              }
              char v71 = 0;
              unsigned int v72 = 0;
              uint64_t v73 = 0;
              do
              {
                unint64_t v2 = v69 + 1;
                *((void *)a2 + 1) = v69 + 1;
                char v74 = *(unsigned char *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v71 += 7;
                unint64_t v69 = v2;
                BOOL v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *((_DWORD *)this + 14) = v73;
LABEL_209:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 80);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 5u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 6u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 7u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0xCu);
    if ((*(_WORD *)(v3 + 80) & 0x80) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 56);

  return PB::Writer::writeVarInt(a2, v5, 0xDu);
}

BOOL CMMsl::FallFalsePositiveSuppressionFeatures::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 80);
  __int16 v3 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x200) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x800) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x1000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x400) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 80) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 80) & 0x100) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 80) & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x80) == 0;
  if ((v2 & 0x80) != 0) {
    return (v3 & 0x80) != 0 && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  return v4;
}

uint64_t CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(CMMsl::FallFalsePositiveSuppressionFeatures *this)
{
  __int16 v1 = *((_WORD *)this + 40);
  if ((v1 & 4) != 0)
  {
    uint64_t v2 = *((void *)this + 3);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 2);
      if (v1) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if (v1)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 1);
    if ((*((_WORD *)this + 40) & 0x200) != 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((*((_WORD *)this + 40) & 0x200) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 16);
    if ((*((_WORD *)this + 40) & 0x800) != 0) {
      goto LABEL_6;
    }
LABEL_27:
    uint64_t v7 = 0;
    if ((*((_WORD *)this + 40) & 0x1000) != 0) {
      goto LABEL_9;
    }
LABEL_28:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 40) & 0x400) != 0) {
      goto LABEL_12;
    }
LABEL_29:
    uint64_t v11 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
    goto LABEL_30;
  }
LABEL_26:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 40) & 0x800) == 0) {
    goto LABEL_27;
  }
LABEL_6:
  float v6 = *((float *)this + 18);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x1000) == 0) {
    goto LABEL_28;
  }
LABEL_9:
  float v8 = *((float *)this + 19);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x400) == 0) {
    goto LABEL_29;
  }
LABEL_12:
  float v10 = *((float *)this + 17);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_15:
    uint64_t v12 = *((int *)this + 12);
    if ((v1 & 0x40) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 40) & 0x100) != 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_30:
  uint64_t v12 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  float v13 = *((float *)this + 13);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 40) & 0x100) != 0)
  {
LABEL_19:
    uint64_t v15 = *((int *)this + 15);
    if ((v1 & 0x10) != 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v15 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_20:
    uint64_t v16 = *((void *)this + 5);
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_34:
    uint64_t v17 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_22;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  uint64_t v16 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_34;
  }
LABEL_21:
  uint64_t v17 = *((void *)this + 4);
  if ((v1 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_22:
  uint64_t v18 = *((unsigned int *)this + 14);
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this)
{
  *(void *)this = off_1003A5A60;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = off_1003A5A60;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

void CMMsl::FallMetaData::~FallMetaData(CMMsl::FallMetaData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FallMetaData::FallMetaData(uint64_t this, const CMMsl::FallMetaData *a2)
{
  *(void *)this = off_1003A5A60;
  *(_DWORD *)(this + 72) = 0;
  int v2 = *((_DWORD *)a2 + 18);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    int v3 = 1;
    *(_DWORD *)(this + 72) = 1;
    *(_DWORD *)(this + 8) = v4;
    int v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(this + 72) = v3;
    *(unsigned char *)(this + 70) = v5;
    int v2 = *((_DWORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(_DWORD *)(this + 72) = v3;
    *(_DWORD *)(this + 12) = v6;
    int v2 = *((_DWORD *)a2 + 18);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 60) = v7;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v8 = *((_DWORD *)a2 + 16);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 64) = v8;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v9 = *((_DWORD *)a2 + 4);
  v3 |= 4u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 16) = v9;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v10 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 28) = v10;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v11 = *((_DWORD *)a2 + 5);
  v3 |= 8u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 20) = v11;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v12 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 24) = v12;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v13 = *((_DWORD *)a2 + 14);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 56) = v13;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v14 = *((_DWORD *)a2 + 13);
  v3 |= 0x800u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 52) = v14;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v15 = *((_DWORD *)a2 + 12);
  v3 |= 0x400u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 48) = v15;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *((_DWORD *)a2 + 11);
  v3 |= 0x200u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 44) = v16;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 32) = v17;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v18 = *((_DWORD *)a2 + 9);
  v3 |= 0x80u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 36) = v18;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v19 = *((_DWORD *)a2 + 10);
  v3 |= 0x100u;
  *(_DWORD *)(this + 72) = v3;
  *(_DWORD *)(this + 40) = v19;
  int v2 = *((_DWORD *)a2 + 18);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return this;
    }
LABEL_38:
    char v21 = *((unsigned char *)a2 + 68);
    *(_DWORD *)(this + 72) = v3 | 0x8000;
    *(unsigned char *)(this + 68) = v21;
    return this;
  }
LABEL_37:
  char v20 = *((unsigned char *)a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 72) = v3;
  *(unsigned char *)(this + 69) = v20;
  if ((*((_DWORD *)a2 + 18) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return this;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, const CMMsl::FallMetaData *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallMetaData *a2, CMMsl::FallMetaData *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 70);
  *((unsigned char *)this + 70) = *((unsigned char *)a2 + 70);
  *((unsigned char *)a2 + 70) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  int v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  int v11 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v11;
  int v12 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  int v13 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v13;
  int v14 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v14;
  int v15 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v15;
  int v16 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v16;
  int v17 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v17;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LOBYTE(v7) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v7;
  return result;
}

float CMMsl::FallMetaData::FallMetaData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5A60;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 70) = *(unsigned char *)(a2 + 70);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return result;
}

CMMsl *CMMsl::FallMetaData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallMetaData::FallMetaData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallMetaData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallMetaData::formatText(CMMsl::FallMetaData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 18);
  if (v5)
  {
    PB::TextFormatter::format(a2, "crownUpDown", *((_DWORD *)this + 2));
    int v5 = *((_DWORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fallType", *((_DWORD *)this + 3));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "impactMaxAccelNormAlertThreshold", *((float *)this + 4));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHeartRateThreshold", *((float *)this + 5));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *((float *)this + 6));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "impactMaxAccelNormLoggingStatsThreshold", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isADLImpact", *((unsigned char *)this + 68));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isFallDetectionFeatureEnabled", *((unsigned char *)this + 69));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "isNearFall", *((unsigned char *)this + 70));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "metMinutePercentile90", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "metMinutePercentile95", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "metMinutePercentile98", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "metMinutePercentileActual", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "otherFallPosteriorRatioDetectionThreshold", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "slipFallPosteriorRatioDetectionThreshold", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "tripFallPosteriorRatioDetectionThreshold", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 18);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "userAgeBucket", *((_DWORD *)this + 15));
  if ((*((_DWORD *)this + 18) & 0x4000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 16));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallMetaData::readFrom(CMMsl::FallMetaData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 18) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_131;
                  }
                  unint64_t v53 = v20++;
                  char v54 = *(unsigned char *)(v21 + v53);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_130:
                unint64_t v2 = v53 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_131;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *((_DWORD *)this + 2) = v24;
              goto LABEL_147;
            case 2u:
              *((_DWORD *)this + 18) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 70) = v28;
              goto LABEL_147;
            case 3u:
              *((_DWORD *)this + 18) |= 2u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_136;
                  }
                  unint64_t v57 = v29++;
                  char v58 = *(unsigned char *)(v30 + v57);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_135;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_136;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *((_DWORD *)this + 3) = v33;
              goto LABEL_147;
            case 4u:
              *((_DWORD *)this + 18) |= 0x2000u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_141;
                  }
                  unint64_t v61 = v35++;
                  char v62 = *(unsigned char *)(v36 + v61);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_140;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_147;
            case 5u:
              *((_DWORD *)this + 18) |= 0x4000u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v65 = v41++;
                  char v66 = *(unsigned char *)(v42 + v65);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_145;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *((_DWORD *)this + 16) = v45;
LABEL_147:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((_DWORD *)this + 18) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 7u:
              *((_DWORD *)this + 18) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 8u:
              *((_DWORD *)this + 18) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 9u:
              *((_DWORD *)this + 18) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xAu:
              *((_DWORD *)this + 18) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xBu:
              *((_DWORD *)this + 18) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xCu:
              *((_DWORD *)this + 18) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xDu:
              *((_DWORD *)this + 18) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xEu:
              *((_DWORD *)this + 18) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0xFu:
              *((_DWORD *)this + 18) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_86;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_126;
            case 0x10u:
              *((_DWORD *)this + 18) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_126:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_86:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *((_DWORD *)this + 18) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *((_DWORD *)this + 18) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *((unsigned char *)this + 68) = v50;
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallMetaData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 72);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 70), 2u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 12), 3u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 5u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 6u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 7u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 8u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xAu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xBu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xDu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xEu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xFu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 69), 0x11u);
    if ((*(_DWORD *)(v3 + 72) & 0x8000) == 0) {
      return this;
    }
    goto LABEL_37;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return this;
  }
LABEL_37:
  char v5 = *(unsigned char *)(v3 + 68);

  return PB::Writer::write(a2, v5, 0x12u);
}

BOOL CMMsl::FallMetaData::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 72);
  int v3 = *(_DWORD *)(a2 + 72);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 70) != *(unsigned __int8 *)(a2 + 70)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(unsigned __int8 *)(a1 + 69) != *(unsigned __int8 *)(a2 + 69)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 72) & 0x8000) == 0;
  if ((v2 & 0x8000) != 0) {
    return (v3 & 0x8000) != 0 && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68);
  }
  return v4;
}

uint64_t CMMsl::FallMetaData::hash_value(CMMsl::FallMetaData *this)
{
  int v1 = *((_DWORD *)this + 18);
  if (v1)
  {
    uint64_t v2 = *((int *)this + 2);
    if ((v1 & 0x20000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 70);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 3);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v4 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((int *)this + 15);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v5 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((int *)this + 16);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
LABEL_47:
    uint64_t v8 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
LABEL_48:
    uint64_t v10 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_13;
    }
LABEL_49:
    uint64_t v12 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_16;
    }
LABEL_50:
    uint64_t v14 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_19;
    }
LABEL_51:
    uint64_t v16 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_22;
    }
LABEL_52:
    uint64_t v18 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_25;
    }
LABEL_53:
    uint64_t v20 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_28;
    }
LABEL_54:
    uint64_t v22 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_31;
    }
LABEL_55:
    uint64_t v24 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_34;
    }
LABEL_56:
    uint64_t v26 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_37;
    }
LABEL_57:
    uint64_t v28 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_40;
    }
LABEL_58:
    uint64_t v29 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_41;
    }
LABEL_59:
    uint64_t v30 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
  }
LABEL_46:
  uint64_t v6 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_47;
  }
LABEL_7:
  float v7 = *((float *)this + 4);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_48;
  }
LABEL_10:
  float v9 = *((float *)this + 7);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_49;
  }
LABEL_13:
  float v11 = *((float *)this + 5);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_50;
  }
LABEL_16:
  float v13 = *((float *)this + 6);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_51;
  }
LABEL_19:
  float v15 = *((float *)this + 14);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_52;
  }
LABEL_22:
  float v17 = *((float *)this + 13);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_53;
  }
LABEL_25:
  float v19 = *((float *)this + 12);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_54;
  }
LABEL_28:
  float v21 = *((float *)this + 11);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_55;
  }
LABEL_31:
  float v23 = *((float *)this + 8);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_56;
  }
LABEL_34:
  float v25 = *((float *)this + 9);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_57;
  }
LABEL_37:
  float v27 = *((float *)this + 10);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_58;
  }
LABEL_40:
  uint64_t v29 = *((unsigned __int8 *)this + 69);
  if ((v1 & 0x8000) == 0) {
    goto LABEL_59;
  }
LABEL_41:
  uint64_t v30 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v29 ^ v30;
}

double CMMsl::FallSnippet::FallSnippet(CMMsl::FallSnippet *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = off_1003A5A98;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

{
  double result;

  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = off_1003A5A98;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  return result;
}

void CMMsl::FallSnippet::~FallSnippet(CMMsl::FallSnippet *this)
{
  *(void *)this = off_1003A5A98;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FallSnippet::~FallSnippet(this);

  operator delete();
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t this, const CMMsl::FallSnippet *a2)
{
  *(void *)this = off_1003A5A98;
  *(void *)(this + 8) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(void *)(this + 16) = 0;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 112) = 0u;
  *(_DWORD *)(this + 128) = 0;
  if (*((unsigned char *)a2 + 128))
  {
    uint64_t v2 = *((void *)a2 + 3);
    *(unsigned char *)(this + 128) = 1;
    *(void *)(this + 24) = v2;
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 12)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, const CMMsl::FallSnippet *a2)
{
  if ((const CMMsl::FallSnippet *)a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallSnippet *a2, CMMsl::FallSnippet *a3)
{
  int v3 = *(_DWORD *)(this + 128);
  *(_DWORD *)(this + 128) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *(void *)(this + 88);
  *(void *)(this + 88) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v7 = *(void *)(this + 16);
  uint64_t v6 = *(void *)(this + 24);
  uint64_t v8 = *((void *)a2 + 3);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *(void *)(this + 24) = v8;
  *((void *)a2 + 2) = v7;
  *((void *)a2 + 3) = v6;
  uint64_t v9 = *(void *)(this + 64);
  *(void *)(this + 64) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *(void *)(this + 72);
  *(void *)(this + 72) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *(void *)(this + 32);
  *(void *)(this + 32) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *(void *)(this + 104);
  *(void *)(this + 104) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v12;
  uint64_t v13 = *(void *)(this + 80);
  *(void *)(this + 80) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v13;
  uint64_t v14 = *(void *)(this + 120);
  *(void *)(this + 120) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v14;
  uint64_t v15 = *(void *)(this + 48);
  *(void *)(this + 48) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v15;
  uint64_t v16 = *(void *)(this + 56);
  *(void *)(this + 56) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  uint64_t v17 = *(void *)(this + 112);
  *(void *)(this + 112) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v17;
  uint64_t v18 = *(void *)(this + 40);
  *(void *)(this + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  uint64_t v19 = *(void *)(this + 96);
  *(void *)(this + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v19;
  return this;
}

uint64_t CMMsl::FallSnippet::FallSnippet(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5A98;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *v4;
  *uint64_t v4 = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v15 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v17 = *v5;
  *uint64_t v5 = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v19 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v21 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v23 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v25 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v27 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v29 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v28;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v31 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v30;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v33 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FallSnippet::FallSnippet((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallSnippet *)v5, v3);
    CMMsl::FallSnippet::~FallSnippet((CMMsl::FallSnippet *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallSnippet::formatText(CMMsl::FallSnippet *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "accel100");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "accel800");
  }
  if (*((unsigned char *)this + 128)) {
    PB::TextFormatter::format(a2, "aopTimestamp", *((void *)this + 3));
  }
  uint64_t v7 = *((void *)this + 4);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "dm");
  }
  uint64_t v8 = *((void *)this + 5);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "dmAlwaysOn");
  }
  uint64_t v9 = *((void *)this + 6);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "fallState");
  }
  uint64_t v10 = *((void *)this + 7);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "fallStats");
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "gyro100");
  }
  uint64_t v12 = *((void *)this + 9);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "gyro200");
  }
  uint64_t v13 = *((void *)this + 10);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "heartRate");
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "meta");
  }
  uint64_t v15 = *((void *)this + 12);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "odometerEntry");
  }
  uint64_t v16 = *((void *)this + 13);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "pressure");
  }
  uint64_t v17 = *((void *)this + 14);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "suppressionFeatures");
  }
  uint64_t v18 = *((void *)this + 15);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "wristState");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallSnippet::readFrom(CMMsl::FallSnippet *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 2u:
          *((unsigned char *)this + 128) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_60;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_56:
            uint64_t v25 = 0;
            goto LABEL_60;
          }
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          operator new();
        case 0xAu:
          operator new();
        case 0xBu:
          operator new();
        case 0xCu:
          operator new();
        case 0xDu:
          operator new();
        case 0xEu:
          operator new();
        case 0xFu:
          operator new();
        case 0x10u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_45;
      }
      while (1)
      {
        if (v21 == v20)
        {
          uint64_t v25 = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_60;
        }
        unint64_t v32 = v20 + 1;
        char v33 = *(unsigned char *)(v22 + v20);
        *((void *)a2 + 1) = v32;
        v25 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0) {
          break;
        }
        v30 += 7;
        unint64_t v20 = v32;
        BOOL v14 = v31++ > 8;
        if (v14) {
          goto LABEL_56;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        uint64_t v25 = 0;
      }
LABEL_60:
      *((void *)this + 3) = v25;
LABEL_45:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Pressure::Pressure(uint64_t this)
{
  *(void *)this = off_1003A85B0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A85B0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void *CMMsl::StreamingHeartRateData::StreamingHeartRateData(void *this)
{
  *this = off_1003A95E0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A95E0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::WatchOnWristState::WatchOnWristState(uint64_t this)
{
  *(void *)this = off_1003A9F10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9F10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t this)
{
  *(void *)this = off_1003A5AD0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A5AD0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void *CMMsl::FallStats::FallStats(void *this)
{
  *this = off_1003A5B08;
  this[27] = 0;
  return this;
}

{
  *this = off_1003A5B08;
  this[27] = 0;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this)
{
  *(void *)this = off_1003A79E0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A79E0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::FallSnippet::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 128)) {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 24), 2u);
  }
  int v4 = (const PB::Base *)v3[11];
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 3u);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 4u);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 5u);
  }
  uint64_t v7 = (const PB::Base *)v3[8];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7, 6u);
  }
  uint64_t v8 = (const PB::Base *)v3[9];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8, 7u);
  }
  char v9 = (const PB::Base *)v3[4];
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9, 8u);
  }
  unsigned int v10 = (const PB::Base *)v3[13];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10, 9u);
  }
  unint64_t v11 = (const PB::Base *)v3[10];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11, 0xAu);
  }
  unint64_t v12 = (const PB::Base *)v3[15];
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12, 0xBu);
  }
  char v13 = (const PB::Base *)v3[6];
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13, 0xCu);
  }
  BOOL v14 = (const PB::Base *)v3[7];
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14, 0xDu);
  }
  char v15 = (const PB::Base *)v3[14];
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15, 0xEu);
  }
  unsigned int v16 = (const PB::Base *)v3[5];
  if (v16) {
    this = PB::Writer::writeSubmessage(a2, v16, 0xFu);
  }
  unint64_t v17 = (const PB::Base *)v3[12];
  if (v17)
  {
    return PB::Writer::writeSubmessage(a2, v17, 0x10u);
  }
  return this;
}

BOOL CMMsl::FallSnippet::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if ((*(unsigned char *)(a2 + 128) & 1) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 128))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a2 + 88);
  if (v4)
  {
    if (!v5 || !CMMsl::FallMetaData::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::Accel::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::Accel::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::Gyro::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v13 = *(void *)(a2 + 72);
  if (v12)
  {
    if (!v13 || !CMMsl::Gyro::operator==(v12, v13)) {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a2 + 32);
  if (v14)
  {
    if (!v15 || !CMMsl::DeviceMotion::operator==(v14, v15)) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 104);
  uint64_t v17 = *(void *)(a2 + 104);
  if (v16)
  {
    if (!v17 || !CMMsl::Pressure::operator==(v16, v17)) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a2 + 80);
  if (v18)
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::OnsetHeartRateData::operator==(v20, v21)) {
        return 0;
      }
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 120);
  uint64_t v23 = *(void *)(a2 + 120);
  if (v22)
  {
    if (!v23 || !CMMsl::WatchOnWristState::operator==(v22, v23)) {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v25 = *(void *)(a2 + 48);
  if (v24)
  {
    if (!v25 || !CMMsl::FallState::operator==(v24, v25)) {
      return 0;
    }
  }
  else if (v25)
  {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a2 + 56);
  if (v26)
  {
    if (!v27 || !CMMsl::FallStats::operator==(v26, v27)) {
      return 0;
    }
  }
  else if (v27)
  {
    return 0;
  }
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v29 = *(void *)(a2 + 112);
  if (v28)
  {
    if (!v29 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v28, v29)) {
      return 0;
    }
  }
  else if (v29)
  {
    return 0;
  }
  uint64_t v30 = *(void *)(a1 + 40);
  uint64_t v31 = *(void *)(a2 + 40);
  if (v30)
  {
    if (!v31 || !CMMsl::DeviceMotion::operator==(v30, v31)) {
      return 0;
    }
  }
  else if (v31)
  {
    return 0;
  }
  uint64_t v32 = *(void *)(a2 + 96);
  BOOL result = v32 == 0;
  if (!*(void *)(a1 + 96)) {
    return result;
  }
  return v32 && CMMsl::OdometerWithAltitude::operator==(*(void *)(a1 + 96), v32);
}

BOOL CMMsl::Pressure::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 4) == 0;
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
    return (*(unsigned char *)(a2 + 24) & 4) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

BOOL CMMsl::StreamingHeartRateData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::OnsetHeartRateData::operator==(v2, v3);
  }
  return result;
}

BOOL CMMsl::WatchOnWristState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  return v4;
}

BOOL CMMsl::FallState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  int v3 = *(unsigned __int8 *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0) {
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  }
  else {
    return ((v2 | v3) & 0x80u) == 0;
  }
}

BOOL CMMsl::FallStats::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  uint64_t v3 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    if ((v3 & 0x80000000) == 0 || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000000) != 0)
  {
    if ((v3 & 0x8000000000) == 0 || *(float *)(a1 + 176) != *(float *)(a2 + 176)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000000) != 0)
  {
    if ((v3 & 0x4000000000) == 0 || *(float *)(a1 + 172) != *(float *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000000000) != 0)
  {
    if ((v3 & 0x80000000000) == 0 || *(float *)(a1 + 192) != *(float *)(a2 + 192)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000000) != 0)
  {
    if ((v3 & 0x40000000000) == 0 || *(float *)(a1 + 188) != *(float *)(a2 + 188)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000000) != 0)
  {
    if ((v3 & 0x800000000000) == 0 || *(float *)(a1 + 208) != *(float *)(a2 + 208)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000000) != 0)
  {
    if ((v3 & 0x400000000000) == 0 || *(float *)(a1 + 204) != *(float *)(a2 + 204)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000000) != 0)
  {
    if ((v3 & 0x10000000000) == 0 || *(float *)(a1 + 180) != *(float *)(a2 + 180)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000000) != 0)
  {
    if ((v3 & 0x100000000000) == 0 || *(float *)(a1 + 196) != *(float *)(a2 + 196)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000000) != 0)
  {
    if ((v3 & 0x1000000000000) == 0 || *(float *)(a1 + 212) != *(float *)(a2 + 212)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000000) != 0)
  {
    if ((v3 & 0x2000000000) == 0 || *(float *)(a1 + 168) != *(float *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000000) != 0)
  {
    if ((v3 & 0x20000000000) == 0 || *(float *)(a1 + 184) != *(float *)(a2 + 184)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000000) != 0)
  {
    if ((v3 & 0x200000000000) == 0 || *(float *)(a1 + 200) != *(float *)(a2 + 200)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000000) != 0)
  {
    if ((v3 & 0x40000000) == 0 || *(float *)(a1 + 140) != *(float *)(a2 + 140)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000000) != 0)
  {
    if ((v3 & 0x100000000) == 0 || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
    if ((v3 & 0x1000000000) == 0 || *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
    if ((v3 & 0x200000000) == 0 || *(float *)(a1 + 152) != *(float *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000000) != 0)
  {
    if ((v3 & 0x20000000) == 0 || *(float *)(a1 + 136) != *(float *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000000) != 0)
  {
    if ((v3 & 0x800000000) == 0 || *(float *)(a1 + 160) != *(float *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000000) != 0)
  {
    if ((v3 & 0x400000000) == 0 || *(float *)(a1 + 156) != *(float *)(a2 + 156)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000000) != 0)
  {
    if ((v3 & 0x10000000) == 0 || *(float *)(a1 + 132) != *(float *)(a2 + 132)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000000) != 0)
  {
    if ((v3 & 0x4000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000000) != 0)
  {
    if ((v3 & 0x8000000) == 0 || *(float *)(a1 + 128) != *(float *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(void *)(a2 + 216) & 8) == 0;
  if ((v2 & 8) != 0) {
    return (v3 & 8) != 0 && *(float *)(a1 + 32) == *(float *)(a2 + 32);
  }
  return v4;
}

BOOL CMMsl::OdometerWithAltitude::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v4)
  {
    if (!v5 || !CMMsl::Odometer::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 80);
  int v7 = *(unsigned __int8 *)(a2 + 80);
  if ((v6 & 4) != 0)
  {
    if ((v7 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v7 & 4) != 0)
  {
    return 0;
  }
  if ((v6 & 8) != 0)
  {
    if ((v7 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v7 & 8) != 0)
  {
    return 0;
  }
  if ((v6 & 0x40) != 0)
  {
    if ((v7 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v7 & 0x40) != 0)
  {
    return 0;
  }
  if ((v6 & v7 & 0x80) != 0)
  {
    if (*(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if (((v6 | v7) & 0x80) != 0)
  {
    return 0;
  }
  if ((v6 & 2) != 0)
  {
    if ((v7 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v7 & 2) != 0)
  {
    return 0;
  }
  if (v6)
  {
    if ((v7 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  if ((v6 & 0x20) != 0)
  {
    if ((v7 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v7 & 0x20) != 0)
  {
    return 0;
  }
  BOOL result = (v7 & 0x10) == 0;
  if ((v6 & 0x10) == 0) {
    return result;
  }
  return (v7 & 0x10) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

unint64_t CMMsl::FallSnippet::hash_value(CMMsl::FallSnippet *this)
{
  if (*((unsigned char *)this + 128)) {
    uint64_t v2 = *((void *)this + 3);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (CMMsl::FallMetaData *)*((void *)this + 11);
  uint64_t v36 = v2;
  if (v3) {
    uint64_t v4 = CMMsl::FallMetaData::hash_value(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = (CMMsl::Accel *)*((void *)this + 1);
  uint64_t v35 = v4;
  if (v5) {
    uint64_t v6 = CMMsl::Accel::hash_value(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = (CMMsl::Accel *)*((void *)this + 2);
  uint64_t v34 = v6;
  if (v7) {
    uint64_t v8 = CMMsl::Accel::hash_value(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (CMMsl::Gyro *)*((void *)this + 8);
  uint64_t v33 = v8;
  if (v9) {
    uint64_t v10 = CMMsl::Gyro::hash_value(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (CMMsl::Gyro *)*((void *)this + 9);
  uint64_t v32 = v10;
  if (v11) {
    uint64_t v12 = CMMsl::Gyro::hash_value(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (CMMsl::DeviceMotion *)*((void *)this + 4);
  if (v13) {
    uint64_t v14 = CMMsl::DeviceMotion::hash_value(v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = (CMMsl::Pressure *)*((void *)this + 13);
  if (v15) {
    uint64_t v16 = CMMsl::Pressure::hash_value(v15);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((void *)this + 10);
  if (v17 && (uint64_t v18 = *(CMMsl::OnsetHeartRateData **)(v17 + 8)) != 0) {
    uint64_t v19 = CMMsl::OnsetHeartRateData::hash_value(v18);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (CMMsl::WatchOnWristState *)*((void *)this + 15);
  if (v20) {
    uint64_t v21 = CMMsl::WatchOnWristState::hash_value(v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = (CMMsl::FallState *)*((void *)this + 6);
  if (v22) {
    uint64_t v23 = CMMsl::FallState::hash_value(v22);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (CMMsl::FallStats *)*((void *)this + 7);
  if (v24) {
    uint64_t v25 = CMMsl::FallStats::hash_value(v24);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (CMMsl::FallFalsePositiveSuppressionFeatures *)*((void *)this + 14);
  if (v26) {
    uint64_t v27 = CMMsl::FallFalsePositiveSuppressionFeatures::hash_value(v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = (CMMsl::DeviceMotion *)*((void *)this + 5);
  if (v28) {
    uint64_t v29 = CMMsl::DeviceMotion::hash_value(v28);
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = *((void *)this + 12);
  if (v30) {
    unint64_t v30 = CMMsl::OdometerWithAltitude::hash_value((CMMsl::OdometerWithAltitude *)v30);
  }
  return v35 ^ v36 ^ v34 ^ v33 ^ v32 ^ v12 ^ v14 ^ v16 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v30;
}

uint64_t CMMsl::FallSnippet::makeMeta(uint64_t this)
{
  if (!*(void *)(this + 88)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel100(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeAccel800(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro100(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeGyro200(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeDm(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makePressure(uint64_t this)
{
  if (!*(void *)(this + 104)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeHeartRate(uint64_t this)
{
  if (!*(void *)(this + 80)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeWristState(uint64_t this)
{
  if (!*(void *)(this + 120)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallState(uint64_t this)
{
  if (!*(void *)(this + 48)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeFallStats(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeSuppressionFeatures(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeDmAlwaysOn(uint64_t this)
{
  if (!*(void *)(this + 40)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::FallSnippet::makeOdometerEntry(uint64_t this)
{
  if (!*(void *)(this + 96)) {
    operator new();
  }
  return this;
}

void CMMsl::FallState::~FallState(CMMsl::FallState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FallState::FallState(uint64_t this, const CMMsl::FallState *a2)
{
  *(void *)this = off_1003A5AD0;
  *(_DWORD *)(this + 48) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 48) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 48))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 48) = v3;
    *(void *)(this + 8) = v5;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *(unsigned char *)(this + 48) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 40) = v7;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 36) = v8;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 32) = v9;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return this;
    }
LABEL_18:
    char v11 = *((unsigned char *)a2 + 44);
    *(unsigned char *)(this + 48) = v3 | 0x80;
    *(unsigned char *)(this + 44) = v11;
    return this;
  }
LABEL_17:
  int v10 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(unsigned char *)(this + 48) = v3;
  *(_DWORD *)(this + 28) = v10;
  if ((*((unsigned char *)a2 + 48) & 0x80) != 0) {
    goto LABEL_18;
  }
  return this;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, const CMMsl::FallState *a2)
{
  if ((const CMMsl::FallState *)a1 != a2)
  {
    CMMsl::FallState::FallState((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v6;
    LOBYTE(v5) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FallState *a2, CMMsl::FallState *a3)
{
  int v3 = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 40);
  *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LOBYTE(v5) = *(unsigned char *)(this + 44);
  *(unsigned char *)(this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v5;
  return this;
}

uint64_t CMMsl::FallState::FallState(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = off_1003A5AD0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

{
  *(void *)BOOL result = off_1003A5AD0;
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  return result;
}

uint64_t CMMsl::FallState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v10 = off_1003A5AD0;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    int v4 = *(_DWORD *)(a2 + 40);
    char v5 = *(unsigned char *)(a2 + 44);
    int v15 = *(_DWORD *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a1 + 24);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = v4;
    *(_OWORD *)(a1 + 24) = v8;
    long long v11 = v6;
    long long v12 = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v5;
    char v14 = v3;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::FallState::formatText(CMMsl::FallState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aopTsNow", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "aopTsSensor", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "fallAlertSentFromReferee", *((unsigned char *)this + 44));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isFall", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "resolution", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "response", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 48) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 10));
LABEL_10:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallState::readFrom(CMMsl::FallState *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)a2 + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 48) |= 2u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_136:
                unint64_t v3 = v67 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_137;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_137:
              *((void *)this + 2) = v24;
              goto LABEL_168;
            case 2u:
              *((unsigned char *)this + 48) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v27++;
                  char v72 = *(unsigned char *)(v28 + v71);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_141:
                    unint64_t v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_141;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_142:
              *((void *)this + 1) = v31;
              goto LABEL_168;
            case 3u:
              *((unsigned char *)this + 48) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v33++;
                  char v76 = *(unsigned char *)(v34 + v75);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    unint64_t v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_146;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_168;
            case 4u:
              *((unsigned char *)this + 48) |= 0x40u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v39++;
                  char v80 = *(unsigned char *)(v40 + v79);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    unint64_t v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_151;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *((_DWORD *)this + 10) = v43;
              goto LABEL_168;
            case 5u:
              *((unsigned char *)this + 48) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v83 = v45++;
                  char v84 = *(unsigned char *)(v46 + v83);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    unint64_t v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_156;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *((_DWORD *)this + 9) = v49;
              goto LABEL_168;
            case 6u:
              *((unsigned char *)this + 48) |= 0x10u;
              unint64_t v51 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v52 = *(void *)a2;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v87 = v51++;
                  char v88 = *(unsigned char *)(v52 + v87);
                  *((void *)a2 + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    unint64_t v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_161;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)a2 + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *((_DWORD *)this + 8) = v55;
              goto LABEL_168;
            case 7u:
              *((unsigned char *)this + 48) |= 8u;
              unint64_t v57 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v58 = *(void *)a2;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v3 = *((void *)a2 + 1);
                }
                else {
                  unint64_t v3 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v91 = v57++;
                  char v92 = *(unsigned char *)(v58 + v91);
                  *((void *)a2 + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    unint64_t v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_166;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v3 = v57 + 1;
                *((void *)a2 + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v59 += 7;
                unint64_t v57 = v3;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *((_DWORD *)this + 7) = v61;
LABEL_168:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *((unsigned char *)this + 48) |= 0x80u;
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              if (v3 >= v2)
              {
                BOOL v64 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)a2 + v3++);
                *((void *)a2 + 1) = v3;
                BOOL v64 = v63 != 0;
              }
              *((unsigned char *)this + 44) = v64;
              goto LABEL_168;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              goto LABEL_168;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FallState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 7u);
    if ((*(unsigned char *)(v3 + 48) & 0x80) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return this;
  }
LABEL_17:
  char v5 = *(unsigned char *)(v3 + 44);

  return PB::Writer::write(a2, v5, 8u);
}

uint64_t CMMsl::FallState::hash_value(CMMsl::FallState *this)
{
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
    uint64_t v1 = *((void *)this + 2);
    if (*((unsigned char *)this + 48))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 1);
      if ((*((unsigned char *)this + 48) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 48) & 0x40) != 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 48) & 0x40) != 0)
  {
LABEL_5:
    uint64_t v4 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 48) & 0x20) != 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 48) & 0x20) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_7:
    uint64_t v6 = *((unsigned int *)this + 8);
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 48) & 0x80) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v8 = 0;
    return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
  }
LABEL_15:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v7 = *((unsigned int *)this + 7);
  if ((*((unsigned char *)this + 48) & 0x80) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v8 = *((unsigned __int8 *)this + 44);
  return v2 ^ v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8;
}

void CMMsl::FallStats::~FallStats(CMMsl::FallStats *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FallStats::FallStats(CMMsl::FallStats *this, const CMMsl::FallStats *a2)
{
  *(void *)this = off_1003A5B08;
  *((void *)this + 27) = 0;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 36);
    uint64_t v3 = 0x80000000;
    *((void *)this + 27) = 0x80000000;
    *((_DWORD *)this + 36) = v4;
    uint64_t v2 = *((void *)a2 + 27);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1uLL;
    *((void *)this + 27) = v3;
    *((void *)this + 1) = v5;
    uint64_t v2 = *((void *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2uLL;
    *((void *)this + 27) = v3;
    *((void *)this + 2) = v6;
    uint64_t v2 = *((void *)a2 + 27);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 22);
  v3 |= 0x20000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 22) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *((float *)a2 + 44);
  v3 |= 0x8000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 44) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
LABEL_57:
  float result = *((float *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 43) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_58:
  float result = *((float *)a2 + 48);
  v3 |= 0x80000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 48) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }
LABEL_59:
  float result = *((float *)a2 + 47);
  v3 |= 0x40000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 47) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_60:
  float result = *((float *)a2 + 52);
  v3 |= 0x800000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 52) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  float result = *((float *)a2 + 51);
  v3 |= 0x400000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 51) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  float result = *((float *)a2 + 45);
  v3 |= 0x10000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 45) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  float result = *((float *)a2 + 49);
  v3 |= 0x100000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 49) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  float result = *((float *)a2 + 53);
  v3 |= 0x1000000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 53) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  float result = *((float *)a2 + 21);
  v3 |= 0x10000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 21) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_67;
  }
LABEL_66:
  float result = *((float *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 42) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }
LABEL_67:
  float result = *((float *)a2 + 46);
  v3 |= 0x20000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 46) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_68:
  float result = *((float *)a2 + 50);
  v3 |= 0x200000000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 50) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v8 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *((void *)this + 27) = v3;
  *((void *)this + 3) = v8;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }
LABEL_70:
  float result = *((float *)a2 + 9);
  v3 |= 0x10uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 9) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
LABEL_71:
  float result = *((float *)a2 + 28);
  v3 |= 0x800000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 28) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }
LABEL_72:
  float result = *((float *)a2 + 12);
  v3 |= 0x80uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 12) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }
LABEL_73:
  float result = *((float *)a2 + 11);
  v3 |= 0x40uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 11) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }
LABEL_74:
  float result = *((float *)a2 + 25);
  v3 |= 0x100000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 25) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }
LABEL_75:
  float result = *((float *)a2 + 24);
  v3 |= 0x80000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 24) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }
LABEL_76:
  float result = *((float *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 35) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v9 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 17) = v9;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v10 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 19) = v10;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v11 = *((_DWORD *)a2 + 37);
  v3 |= (unint64_t)&_mh_execute_header;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 37) = v11;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v12 = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 41) = v12;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 13) = v13;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  float result = *((float *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 38) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  float result = *((float *)a2 + 16);
  v3 |= 0x800uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 16) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  float result = *((float *)a2 + 15);
  v3 |= 0x400uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 15) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  float result = *((float *)a2 + 26);
  v3 |= 0x200000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 26) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  float result = *((float *)a2 + 23);
  v3 |= 0x40000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 23) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  float result = *((float *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 34) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  float result = *((float *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 40) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  float result = *((float *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 39) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  int v14 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 20) = v14;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 33) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *((float *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 31) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_94;
  }
LABEL_93:
  float result = *((float *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 32) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }
LABEL_94:
  float result = *((float *)a2 + 10);
  v3 |= 0x20uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 10) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_96;
  }
LABEL_95:
  float result = *((float *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 29) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_97;
  }
LABEL_96:
  int v15 = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((void *)this + 27) = v3;
  *((_DWORD *)this + 30) = v15;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0) {
      goto LABEL_51;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *((float *)a2 + 18);
  v3 |= 0x2000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 18) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *((float *)a2 + 14);
  v3 |= 0x200uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 14) = result;
  uint64_t v2 = *((void *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_100:
    float result = *((float *)a2 + 8);
    *((void *)this + 27) = v3 | 8;
    *((float *)this + 8) = result;
    return result;
  }
LABEL_99:
  float result = *((float *)a2 + 27);
  v3 |= 0x400000uLL;
  *((void *)this + 27) = v3;
  *((float *)this + 27) = result;
  if ((*((void *)a2 + 27) & 8) != 0) {
    goto LABEL_100;
  }
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, const CMMsl::FallStats *a2)
{
  if (a1 != a2)
  {
    CMMsl::FallStats::FallStats((CMMsl::FallStats *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FallStats *a2, CMMsl::FallStats *a3)
{
  uint64_t v3 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  int v6 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  int v7 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v7;
  int v8 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v8;
  int v9 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v9;
  int v10 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v10;
  int v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  int v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  int v13 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v13;
  int v14 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  int v15 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v15;
  int v16 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v16;
  int v17 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v17;
  int v18 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v18;
  int v19 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v19;
  uint64_t v20 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v20;
  int v21 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v21;
  int v22 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v22;
  int v23 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v23;
  int v24 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v24;
  int v25 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v25;
  int v26 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v26;
  int v27 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v27;
  LODWORD(v20) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  LODWORD(v20) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v20;
  LODWORD(v20) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v20;
  LODWORD(v20) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v20;
  LODWORD(v20) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v20;
  int v28 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v28;
  int v29 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v29;
  int v30 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v30;
  int v31 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v31;
  int v32 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v32;
  int v33 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v33;
  int v34 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v34;
  int v35 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v35;
  LODWORD(v20) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v20;
  int v36 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v36;
  int v37 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v37;
  int v38 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v38;
  int v39 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v39;
  int v40 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v40;
  LODWORD(v20) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v20;
  int v41 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v41;
  int v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  int v43 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v43;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  return result;
}

float CMMsl::FallStats::FallStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5B08;
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  return result;
}

CMMsl *CMMsl::FallStats::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FallStats::FallStats((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FallStats *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FallStats::formatText(CMMsl::FallStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "abruptGravityChangeAngle", *((float *)this + 8));
    uint64_t v5 = *((void *)this + 27);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_56;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelPathLength", *((float *)this + 9));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "accelPathLengthWithPeak", *((float *)this + 10));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "angleChangePostImpact", *((float *)this + 11));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "angleChangePreImpact", *((float *)this + 12));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "aopTsNow", *((void *)this + 1));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "aopTsSensor", *((void *)this + 2));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "crown", *((_DWORD *)this + 13));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "crownVariance", *((float *)this + 14));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "extrapolatedMaxAccelNorm", *((float *)this + 15));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "extrapolatedMaxMinusMin", *((float *)this + 16));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "fallType", *((_DWORD *)this + 17));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "gravityVariance", *((float *)this + 18));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "isFall", *((_DWORD *)this + 19));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "isNearFall", *((_DWORD *)this + 20));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "jerkVectorMagMax", *((float *)this + 21));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "magMax", *((float *)this + 22));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 23));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "maxAngleChangePostImpact", *((float *)this + 24));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "maxAngleChangePreImpact", *((float *)this + 25));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "maxMinusMin", *((float *)this + 26));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "medianAbsGravityY", *((float *)this + 27));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "minInertialZ", *((float *)this + 28));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "minInertialZHighFreq", *((float *)this + 29));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "operatingMode", *((_DWORD *)this + 30));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "pathLengthDecorrelation", *((float *)this + 31));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "pathLengthDelaySpread", *((float *)this + 32));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "pathLengthHarmonicMean", *((float *)this + 33));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "peakTimestamp", *((void *)this + 3));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "poseAtImpact", *((float *)this + 34));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "posteriorRatio", *((float *)this + 35));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 36));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "simulated", *((_DWORD *)this + 37));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "sumDeltaAngles", *((float *)this + 38));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "swingAngle", *((float *)this + 39));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "tiltAngle", *((float *)this + 40));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "trialCount", *((_DWORD *)this + 41));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "xJerkScalarMagMax", *((float *)this + 42));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "xMax", *((float *)this + 43));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "xMin", *((float *)this + 44));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "xZCTime", *((float *)this + 45));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "yJerkScalarMagMax", *((float *)this + 46));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "yMax", *((float *)this + 47));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "yMin", *((float *)this + 48));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "yZCTime", *((float *)this + 49));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "zJerkScalarMagMax", *((float *)this + 50));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "zMax", *((float *)this + 51));
  uint64_t v5 = *((void *)this + 27);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "zMin", *((float *)this + 52));
  if ((*((void *)this + 27) & 0x1000000000000) != 0) {
LABEL_50:
  }
    PB::TextFormatter::format(a2, "zZCTime", *((float *)this + 53));
LABEL_51:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FallStats::readFrom(CMMsl::FallStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((void *)this + 27) |= 0x80000000uLL;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v147 = 0;
            unsigned int v148 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)a2 + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_302;
              }
              unint64_t v149 = v20 + 1;
              char v150 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_302;
              }
              v147 += 7;
              unint64_t v20 = v149;
              BOOL v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_221;
              }
            }
          }
LABEL_302:
          *((_DWORD *)this + 36) = v25;
          goto LABEL_294;
        case 2u:
          *((void *)this + 27) |= 1uLL;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_306;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v34 = 0;
            goto LABEL_306;
          }
          char v151 = 0;
          unsigned int v152 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v153 = v29 + 1;
              char v154 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                unint64_t v29 = v153;
                BOOL v14 = v152++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_306:
          *((void *)this + 1) = v34;
          goto LABEL_294;
        case 3u:
          *((void *)this + 27) |= 2uLL;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_310;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            uint64_t v42 = 0;
            goto LABEL_310;
          }
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              uint64_t v42 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v157 = v37 + 1;
              char v158 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v37 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v42 = 0;
              }
            }
            break;
          }
LABEL_310:
          *((void *)this + 2) = v42;
          goto LABEL_294;
        case 4u:
          *((void *)this + 27) |= 0x20000uLL;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v45);
          goto LABEL_293;
        case 5u:
          *((void *)this + 27) |= 0x8000000000uLL;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v46);
          goto LABEL_293;
        case 6u:
          *((void *)this + 27) |= 0x4000000000uLL;
          unint64_t v47 = *((void *)a2 + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v47);
          goto LABEL_293;
        case 7u:
          *((void *)this + 27) |= 0x80000000000uLL;
          unint64_t v48 = *((void *)a2 + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v48);
          goto LABEL_293;
        case 8u:
          *((void *)this + 27) |= 0x40000000000uLL;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_293;
        case 9u:
          *((void *)this + 27) |= 0x800000000000uLL;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_293;
        case 0xAu:
          *((void *)this + 27) |= 0x400000000000uLL;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v51);
          goto LABEL_293;
        case 0xBu:
          *((void *)this + 27) |= 0x10000000000uLL;
          unint64_t v52 = *((void *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v52);
          goto LABEL_293;
        case 0xCu:
          *((void *)this + 27) |= 0x100000000000uLL;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v53);
          goto LABEL_293;
        case 0xDu:
          *((void *)this + 27) |= 0x1000000000000uLL;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 53) = *(_DWORD *)(*(void *)a2 + v54);
          goto LABEL_293;
        case 0xEu:
          *((void *)this + 27) |= 0x10000uLL;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v55);
          goto LABEL_293;
        case 0xFu:
          *((void *)this + 27) |= 0x2000000000uLL;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_293;
        case 0x10u:
          *((void *)this + 27) |= 0x20000000000uLL;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v57);
          goto LABEL_293;
        case 0x11u:
          *((void *)this + 27) |= 0x200000000000uLL;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v58);
          goto LABEL_293;
        case 0x12u:
          *((void *)this + 27) |= 4uLL;
          unint64_t v59 = *((void *)a2 + 1);
          unint64_t v60 = *((void *)a2 + 2);
          uint64_t v61 = *(void *)a2;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)a2 + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_314;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            uint64_t v64 = 0;
            goto LABEL_314;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              uint64_t v64 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v161 = v59 + 1;
              char v162 = *(unsigned char *)(v61 + v59);
              *((void *)a2 + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v59 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v64 = 0;
              }
            }
            break;
          }
LABEL_314:
          *((void *)this + 3) = v64;
          goto LABEL_294;
        case 0x13u:
          *((void *)this + 27) |= 0x10uLL;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v67);
          goto LABEL_293;
        case 0x14u:
          *((void *)this + 27) |= 0x800000uLL;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v68);
          goto LABEL_293;
        case 0x15u:
          *((void *)this + 27) |= 0x80uLL;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v69);
          goto LABEL_293;
        case 0x16u:
          *((void *)this + 27) |= 0x40uLL;
          unint64_t v70 = *((void *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v70);
          goto LABEL_293;
        case 0x17u:
          *((void *)this + 27) |= 0x100000uLL;
          unint64_t v71 = *((void *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v71);
          goto LABEL_293;
        case 0x18u:
          *((void *)this + 27) |= 0x80000uLL;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v72);
          goto LABEL_293;
        case 0x19u:
          *((void *)this + 27) |= 0x40000000uLL;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v73);
          goto LABEL_293;
        case 0x1Au:
          *((void *)this + 27) |= 0x1000uLL;
          unint64_t v74 = *((void *)a2 + 1);
          unint64_t v75 = *((void *)a2 + 2);
          uint64_t v76 = *(void *)a2;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)a2 + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_318;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v165 = v74 + 1;
              char v166 = *(unsigned char *)(v76 + v74);
              *((void *)a2 + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v74 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v79) = 0;
              }
            }
            break;
          }
LABEL_318:
          *((_DWORD *)this + 17) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *((void *)this + 27) |= 0x4000uLL;
          unint64_t v82 = *((void *)a2 + 1);
          unint64_t v83 = *((void *)a2 + 2);
          uint64_t v84 = *(void *)a2;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            char v85 = 0;
            unsigned int v86 = 0;
            uint64_t v87 = 0;
            do
            {
              unint64_t v88 = v82 + 1;
              *((void *)a2 + 1) = v82 + 1;
              char v89 = *(unsigned char *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0) {
                goto LABEL_322;
              }
              v85 += 7;
              unint64_t v82 = v88;
              BOOL v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v87 = 0;
          if (v83 <= v82) {
            unint64_t v83 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v169 = v82 + 1;
              char v170 = *(unsigned char *)(v84 + v82);
              *((void *)a2 + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v82 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v87) = 0;
              }
            }
            break;
          }
LABEL_322:
          *((_DWORD *)this + 19) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *((void *)this + 27) |= (unint64_t)&_mh_execute_header;
          unint64_t v90 = *((void *)a2 + 1);
          unint64_t v91 = *((void *)a2 + 2);
          uint64_t v92 = *(void *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)a2 + 1) = v90 + 1;
              char v97 = *(unsigned char *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_326;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v95 = 0;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v173 = v90 + 1;
              char v174 = *(unsigned char *)(v92 + v90);
              *((void *)a2 + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                unint64_t v90 = v173;
                BOOL v14 = v172++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v95) = 0;
              }
            }
            break;
          }
LABEL_326:
          *((_DWORD *)this + 37) = v95;
          goto LABEL_294;
        case 0x1Du:
          *((void *)this + 27) |= 0x1000000000uLL;
          unint64_t v98 = *((void *)a2 + 1);
          unint64_t v99 = *((void *)a2 + 2);
          uint64_t v100 = *(void *)a2;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            do
            {
              unint64_t v104 = v98 + 1;
              *((void *)a2 + 1) = v98 + 1;
              char v105 = *(unsigned char *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0) {
                goto LABEL_330;
              }
              v101 += 7;
              unint64_t v98 = v104;
              BOOL v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          char v175 = 0;
          unsigned int v176 = 0;
          uint64_t v103 = 0;
          if (v99 <= v98) {
            unint64_t v99 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v177 = v98 + 1;
              char v178 = *(unsigned char *)(v100 + v98);
              *((void *)a2 + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                unint64_t v98 = v177;
                BOOL v14 = v176++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v103) = 0;
              }
            }
            break;
          }
LABEL_330:
          *((_DWORD *)this + 41) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *((void *)this + 27) |= 0x100uLL;
          unint64_t v106 = *((void *)a2 + 1);
          unint64_t v107 = *((void *)a2 + 2);
          uint64_t v108 = *(void *)a2;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            char v109 = 0;
            unsigned int v110 = 0;
            uint64_t v111 = 0;
            do
            {
              unint64_t v112 = v106 + 1;
              *((void *)a2 + 1) = v106 + 1;
              char v113 = *(unsigned char *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0) {
                goto LABEL_334;
              }
              v109 += 7;
              unint64_t v106 = v112;
              BOOL v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          char v179 = 0;
          unsigned int v180 = 0;
          uint64_t v111 = 0;
          if (v107 <= v106) {
            unint64_t v107 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v181 = v106 + 1;
              char v182 = *(unsigned char *)(v108 + v106);
              *((void *)a2 + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                unint64_t v106 = v181;
                BOOL v14 = v180++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v111) = 0;
              }
            }
            break;
          }
LABEL_334:
          *((_DWORD *)this + 13) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *((void *)this + 27) |= 0x200000000uLL;
          unint64_t v114 = *((void *)a2 + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v114);
          goto LABEL_293;
        case 0x20u:
          *((void *)this + 27) |= 0x800uLL;
          unint64_t v115 = *((void *)a2 + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v115);
          goto LABEL_293;
        case 0x21u:
          *((void *)this + 27) |= 0x400uLL;
          unint64_t v116 = *((void *)a2 + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v116);
          goto LABEL_293;
        case 0x22u:
          *((void *)this + 27) |= 0x200000uLL;
          unint64_t v117 = *((void *)a2 + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v117);
          goto LABEL_293;
        case 0x23u:
          *((void *)this + 27) |= 0x40000uLL;
          unint64_t v118 = *((void *)a2 + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v118);
          goto LABEL_293;
        case 0x24u:
          *((void *)this + 27) |= 0x20000000uLL;
          unint64_t v119 = *((void *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v119);
          goto LABEL_293;
        case 0x25u:
          *((void *)this + 27) |= 0x800000000uLL;
          unint64_t v120 = *((void *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v120);
          goto LABEL_293;
        case 0x26u:
          *((void *)this + 27) |= 0x400000000uLL;
          unint64_t v121 = *((void *)a2 + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v121);
          goto LABEL_293;
        case 0x27u:
          *((void *)this + 27) |= 0x8000uLL;
          unint64_t v122 = *((void *)a2 + 1);
          unint64_t v123 = *((void *)a2 + 2);
          uint64_t v124 = *(void *)a2;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)a2 + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_338;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          char v183 = 0;
          unsigned int v184 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v185 = v122 + 1;
              char v186 = *(unsigned char *)(v124 + v122);
              *((void *)a2 + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                unint64_t v122 = v185;
                BOOL v14 = v184++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v127) = 0;
              }
            }
            break;
          }
LABEL_338:
          *((_DWORD *)this + 20) = v127;
          goto LABEL_294;
        case 0x28u:
          *((void *)this + 27) |= 0x10000000uLL;
          unint64_t v130 = *((void *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v130);
          goto LABEL_293;
        case 0x29u:
          *((void *)this + 27) |= 0x4000000uLL;
          unint64_t v131 = *((void *)a2 + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v131);
          goto LABEL_293;
        case 0x2Au:
          *((void *)this + 27) |= 0x8000000uLL;
          unint64_t v132 = *((void *)a2 + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v132);
          goto LABEL_293;
        case 0x2Bu:
          *((void *)this + 27) |= 0x20uLL;
          unint64_t v133 = *((void *)a2 + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v133);
          goto LABEL_293;
        case 0x2Cu:
          *((void *)this + 27) |= 0x1000000uLL;
          unint64_t v134 = *((void *)a2 + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v134);
          goto LABEL_293;
        case 0x2Du:
          *((void *)this + 27) |= 0x2000000uLL;
          unint64_t v135 = *((void *)a2 + 1);
          unint64_t v136 = *((void *)a2 + 2);
          uint64_t v137 = *(void *)a2;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            char v138 = 0;
            unsigned int v139 = 0;
            uint64_t v140 = 0;
            do
            {
              unint64_t v141 = v135 + 1;
              *((void *)a2 + 1) = v135 + 1;
              char v142 = *(unsigned char *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0) {
                goto LABEL_342;
              }
              v138 += 7;
              unint64_t v135 = v141;
              BOOL v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v140 = 0;
          if (v136 <= v135) {
            unint64_t v136 = *((void *)a2 + 1);
          }
          break;
        case 0x2Eu:
          *((void *)this + 27) |= 0x2000uLL;
          unint64_t v143 = *((void *)a2 + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v143);
          goto LABEL_293;
        case 0x2Fu:
          *((void *)this + 27) |= 0x200uLL;
          unint64_t v144 = *((void *)a2 + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v144);
          goto LABEL_293;
        case 0x30u:
          *((void *)this + 27) |= 0x400000uLL;
          unint64_t v145 = *((void *)a2 + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)a2 + 2)) {
            goto LABEL_214;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v145);
          goto LABEL_293;
        case 0x31u:
          *((void *)this + 27) |= 8uLL;
          unint64_t v146 = *((void *)a2 + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v146);
LABEL_293:
            *((void *)a2 + 1) += 4;
          }
          else
          {
LABEL_214:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_294;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_342;
        }
        unint64_t v189 = v135 + 1;
        char v190 = *(unsigned char *)(v137 + v135);
        *((void *)a2 + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0) {
          break;
        }
        v187 += 7;
        unint64_t v135 = v189;
        BOOL v14 = v188++ > 8;
        if (v14) {
          goto LABEL_291;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v140) = 0;
      }
LABEL_342:
      *((_DWORD *)this + 30) = v140;
LABEL_294:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FallStats::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 216);
  if ((v4 & 0x80000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 144), 1u);
    uint64_t v4 = *(void *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 2u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 4u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 5u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 6u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 7u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 8u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 9u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0xAu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0xBu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xCu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0xDu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xFu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x10u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x11u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x12u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x13u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x14u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x15u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x16u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x17u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x18u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x19u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x20u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x21u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x22u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0x23u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x24u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x25u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x26u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }
LABEL_89:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x27u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x28u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x29u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x2Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0) {
      goto LABEL_48;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x2Eu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_49;
    }
LABEL_98:
    this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x30u);
    if ((*(void *)(v3 + 216) & 8) == 0) {
      return this;
    }
    goto LABEL_99;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x2Fu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000) != 0) {
    goto LABEL_98;
  }
LABEL_49:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_99:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(a2, v5, 0x31u);
}

uint64_t CMMsl::FallStats::hash_value(CMMsl::FallStats *this)
{
  uint64_t v1 = *((void *)this + 27);
  if ((v1 & 0x80000000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 36);
    if (v1)
    {
LABEL_3:
      uint64_t v108 = *((void *)this + 1);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_131;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (v1) {
      goto LABEL_3;
    }
  }
  uint64_t v108 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v107 = *((void *)this + 2);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_5;
    }
LABEL_132:
    uint64_t v106 = 0;
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_8;
    }
LABEL_133:
    uint64_t v105 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_11;
    }
LABEL_134:
    uint64_t v104 = 0;
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_14;
    }
LABEL_135:
    uint64_t v103 = 0;
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_17;
    }
LABEL_136:
    uint64_t v102 = 0;
    if ((v1 & 0x800000000000) != 0) {
      goto LABEL_20;
    }
LABEL_137:
    uint64_t v101 = 0;
    if ((v1 & 0x400000000000) != 0) {
      goto LABEL_23;
    }
LABEL_138:
    uint64_t v100 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_26;
    }
LABEL_139:
    uint64_t v99 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_29;
    }
LABEL_140:
    uint64_t v98 = 0;
    if ((v1 & 0x1000000000000) != 0) {
      goto LABEL_32;
    }
LABEL_141:
    uint64_t v97 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_35;
    }
LABEL_142:
    uint64_t v96 = 0;
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_38;
    }
LABEL_143:
    uint64_t v95 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_41;
    }
LABEL_144:
    uint64_t v94 = 0;
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_44;
    }
LABEL_145:
    uint64_t v93 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_47;
    }
    goto LABEL_146;
  }
LABEL_131:
  uint64_t v107 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_132;
  }
LABEL_5:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v106 = v4;
  if ((v1 & 0x8000000000) == 0) {
    goto LABEL_133;
  }
LABEL_8:
  float v5 = *((float *)this + 44);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v105 = v6;
  if ((v1 & 0x4000000000) == 0) {
    goto LABEL_134;
  }
LABEL_11:
  float v7 = *((float *)this + 43);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v104 = v8;
  if ((v1 & 0x80000000000) == 0) {
    goto LABEL_135;
  }
LABEL_14:
  float v9 = *((float *)this + 48);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v103 = v10;
  if ((v1 & 0x40000000000) == 0) {
    goto LABEL_136;
  }
LABEL_17:
  float v11 = *((float *)this + 47);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v102 = v12;
  if ((v1 & 0x800000000000) == 0) {
    goto LABEL_137;
  }
LABEL_20:
  float v13 = *((float *)this + 52);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  uint64_t v101 = v14;
  if ((v1 & 0x400000000000) == 0) {
    goto LABEL_138;
  }
LABEL_23:
  float v15 = *((float *)this + 51);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  uint64_t v100 = v16;
  if ((v1 & 0x10000000000) == 0) {
    goto LABEL_139;
  }
LABEL_26:
  float v17 = *((float *)this + 45);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  uint64_t v99 = v18;
  if ((v1 & 0x100000000000) == 0) {
    goto LABEL_140;
  }
LABEL_29:
  float v19 = *((float *)this + 49);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v98 = v20;
  if ((v1 & 0x1000000000000) == 0) {
    goto LABEL_141;
  }
LABEL_32:
  float v21 = *((float *)this + 53);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v97 = v22;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_142;
  }
LABEL_35:
  float v23 = *((float *)this + 21);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v96 = v24;
  if ((v1 & 0x2000000000) == 0) {
    goto LABEL_143;
  }
LABEL_38:
  float v25 = *((float *)this + 42);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v95 = v26;
  if ((v1 & 0x20000000000) == 0) {
    goto LABEL_144;
  }
LABEL_41:
  float v27 = *((float *)this + 46);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  uint64_t v94 = v28;
  if ((v1 & 0x200000000000) == 0) {
    goto LABEL_145;
  }
LABEL_44:
  float v29 = *((float *)this + 50);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  uint64_t v93 = v30;
  if ((v1 & 4) != 0)
  {
LABEL_47:
    uint64_t v92 = *((void *)this + 3);
    if ((v1 & 0x10) != 0) {
      goto LABEL_48;
    }
LABEL_147:
    uint64_t v91 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_51;
    }
LABEL_148:
    uint64_t v90 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_54;
    }
LABEL_149:
    uint64_t v89 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_57;
    }
LABEL_150:
    uint64_t v88 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_60;
    }
LABEL_151:
    uint64_t v87 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_63;
    }
LABEL_152:
    uint64_t v42 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_67;
    }
LABEL_153:
    uint64_t v44 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_154;
  }
LABEL_146:
  uint64_t v92 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_147;
  }
LABEL_48:
  float v31 = *((float *)this + 9);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  uint64_t v91 = v32;
  if ((v1 & 0x800000) == 0) {
    goto LABEL_148;
  }
LABEL_51:
  float v33 = *((float *)this + 28);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  uint64_t v90 = v34;
  if ((v1 & 0x80) == 0) {
    goto LABEL_149;
  }
LABEL_54:
  float v35 = *((float *)this + 12);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  uint64_t v89 = v36;
  if ((v1 & 0x40) == 0) {
    goto LABEL_150;
  }
LABEL_57:
  float v37 = *((float *)this + 11);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  uint64_t v88 = v38;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_151;
  }
LABEL_60:
  float v39 = *((float *)this + 25);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  uint64_t v87 = v40;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_152;
  }
LABEL_63:
  float v41 = *((float *)this + 24);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_153;
  }
LABEL_67:
  float v43 = *((float *)this + 35);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = LODWORD(v43);
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_71:
    uint64_t v45 = *((int *)this + 17);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_155;
  }
LABEL_154:
  uint64_t v45 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_72:
    uint64_t v46 = *((unsigned int *)this + 19);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_156;
  }
LABEL_155:
  uint64_t v46 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_73:
    uint64_t v47 = *((unsigned int *)this + 37);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_157;
  }
LABEL_156:
  uint64_t v47 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_74:
    uint64_t v48 = *((unsigned int *)this + 41);
    if ((v1 & 0x100) != 0) {
      goto LABEL_75;
    }
    goto LABEL_158;
  }
LABEL_157:
  uint64_t v48 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_75:
    uint64_t v49 = *((int *)this + 13);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_76;
    }
LABEL_159:
    uint64_t v51 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_79;
    }
LABEL_160:
    uint64_t v53 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_82;
    }
LABEL_161:
    uint64_t v55 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_85;
    }
LABEL_162:
    uint64_t v57 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_88;
    }
LABEL_163:
    uint64_t v59 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_91;
    }
LABEL_164:
    uint64_t v61 = 0;
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_94;
    }
LABEL_165:
    uint64_t v63 = 0;
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_97;
    }
LABEL_166:
    uint64_t v65 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_100;
    }
    goto LABEL_167;
  }
LABEL_158:
  uint64_t v49 = 0;
  if ((v1 & 0x200000000) == 0) {
    goto LABEL_159;
  }
LABEL_76:
  float v50 = *((float *)this + 38);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_160;
  }
LABEL_79:
  float v52 = *((float *)this + 16);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_161;
  }
LABEL_82:
  float v54 = *((float *)this + 15);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_162;
  }
LABEL_85:
  float v56 = *((float *)this + 26);
  uint64_t v57 = LODWORD(v56);
  if (v56 == 0.0) {
    uint64_t v57 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_163;
  }
LABEL_88:
  float v58 = *((float *)this + 23);
  uint64_t v59 = LODWORD(v58);
  if (v58 == 0.0) {
    uint64_t v59 = 0;
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_164;
  }
LABEL_91:
  float v60 = *((float *)this + 34);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_165;
  }
LABEL_94:
  float v62 = *((float *)this + 40);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_166;
  }
LABEL_97:
  float v64 = *((float *)this + 39);
  uint64_t v65 = LODWORD(v64);
  if (v64 == 0.0) {
    uint64_t v65 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_100:
    uint64_t v66 = *((unsigned int *)this + 20);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_101;
    }
LABEL_168:
    uint64_t v68 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_104;
    }
LABEL_169:
    uint64_t v70 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_107;
    }
LABEL_170:
    uint64_t v72 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_110;
    }
LABEL_171:
    uint64_t v74 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_113;
    }
LABEL_172:
    uint64_t v76 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_116;
    }
    goto LABEL_173;
  }
LABEL_167:
  uint64_t v66 = 0;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_168;
  }
LABEL_101:
  float v67 = *((float *)this + 33);
  uint64_t v68 = LODWORD(v67);
  if (v67 == 0.0) {
    uint64_t v68 = 0;
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_169;
  }
LABEL_104:
  float v69 = *((float *)this + 31);
  uint64_t v70 = LODWORD(v69);
  if (v69 == 0.0) {
    uint64_t v70 = 0;
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_170;
  }
LABEL_107:
  float v71 = *((float *)this + 32);
  uint64_t v72 = LODWORD(v71);
  if (v71 == 0.0) {
    uint64_t v72 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_171;
  }
LABEL_110:
  float v73 = *((float *)this + 10);
  uint64_t v74 = LODWORD(v73);
  if (v73 == 0.0) {
    uint64_t v74 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_172;
  }
LABEL_113:
  float v75 = *((float *)this + 29);
  uint64_t v76 = LODWORD(v75);
  if (v75 == 0.0) {
    uint64_t v76 = 0;
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_116:
    uint64_t v77 = *((int *)this + 30);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_117;
    }
LABEL_174:
    uint64_t v79 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_120;
    }
LABEL_175:
    uint64_t v81 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_123;
    }
    goto LABEL_176;
  }
LABEL_173:
  uint64_t v77 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_174;
  }
LABEL_117:
  float v78 = *((float *)this + 18);
  uint64_t v79 = LODWORD(v78);
  if (v78 == 0.0) {
    uint64_t v79 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_175;
  }
LABEL_120:
  float v80 = *((float *)this + 14);
  uint64_t v81 = LODWORD(v80);
  if (v80 == 0.0) {
    uint64_t v81 = 0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_123:
    float v82 = *((float *)this + 27);
    uint64_t v83 = LODWORD(v82);
    if (v82 == 0.0) {
      uint64_t v83 = 0;
    }
    if ((v1 & 8) != 0) {
      goto LABEL_126;
    }
LABEL_177:
    uint64_t v85 = 0;
    return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
  }
LABEL_176:
  uint64_t v83 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_177;
  }
LABEL_126:
  float v84 = *((float *)this + 8);
  uint64_t v85 = LODWORD(v84);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  return v108 ^ v2 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v42 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v51 ^ v53 ^ v55 ^ v57 ^ v59 ^ v61 ^ v63 ^ v65 ^ v66 ^ v68 ^ v70 ^ v72 ^ v74 ^ v76 ^ v77 ^ v79 ^ v81 ^ v83 ^ v85;
}

void CMMsl::FirstStepFeatures::~FirstStepFeatures(CMMsl::FirstStepFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t this, const CMMsl::FirstStepFeatures *a2)
{
  *(void *)this = off_1003A5B40;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 44) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    v3 |= 8u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 32) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 10);
      *(unsigned char *)(this + 44) = v3 | 0x10;
      *(_DWORD *)(this + 40) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, const CMMsl::FirstStepFeatures *a2)
{
  if ((const CMMsl::FirstStepFeatures *)a1 != a2)
  {
    CMMsl::FirstStepFeatures::FirstStepFeatures((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    long long v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v9;
    uint64_t v9 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FirstStepFeatures *a2, CMMsl::FirstStepFeatures *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  return result;
}

double CMMsl::FirstStepFeatures::FirstStepFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5B40;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5B40;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t CMMsl::FirstStepFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A5B40;
    uint64_t v3 = *(void *)(a2 + 40);
    *(_DWORD *)(a2 + 44) = 0;
    long long v9 = *(_OWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    *(void *)&long long v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v3;
    uint64_t v10 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::FirstStepFeatures::formatText(CMMsl::FirstStepFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "aggAccelZDelta", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "arcLength", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "curveDistance", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "firstLoftAngleDeg", *((double *)this + 4));
  if ((*((unsigned char *)this + 44) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "stepResult", *((_DWORD *)this + 10));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FirstStepFeatures::readFrom(CMMsl::FirstStepFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_51:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 10) = v25;
LABEL_57:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FirstStepFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

uint64_t CMMsl::FirstStepFeatures::hash_value(CMMsl::FirstStepFeatures *this)
{
  if ((*((unsigned char *)this + 44) & 2) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 2);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 4);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if (*((unsigned char *)this + 44))
  {
LABEL_9:
    double v4 = *((double *)this + 1);
    if (v4 == 0.0) {
      double v4 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v5 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
  }
LABEL_18:
  double v4 = 0.0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v5 = *((int *)this + 10);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5;
}

uint64_t CMMsl::FitnessMachineData::FitnessMachineData(uint64_t this)
{
  *(void *)this = off_1003A5B78;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(void *)this = off_1003A5B78;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

void CMMsl::FitnessMachineData::~FitnessMachineData(CMMsl::FitnessMachineData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::FitnessMachineData::FitnessMachineData(CMMsl::FitnessMachineData *this, const CMMsl::FitnessMachineData *a2)
{
  *(void *)this = off_1003A5B78;
  *((_DWORD *)this + 44) = 0;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    int v3 = 8;
    *((_DWORD *)this + 44) = 8;
    *((double *)this + 4) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 5) = result;
    int v2 = *((_DWORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *((double *)a2 + 6);
    v3 |= 0x20u;
    *((_DWORD *)this + 44) = v3;
    *((double *)this + 6) = result;
    int v2 = *((_DWORD *)a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *((double *)a2 + 9);
  v3 |= 0x100u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 9) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *((double *)a2 + 13);
  v3 |= 0x1000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *((double *)a2 + 15);
  v3 |= 0x4000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *((double *)a2 + 16);
  v3 |= 0x8000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *((double *)a2 + 14);
  v3 |= 0x2000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v5 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 17) = v5;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v6 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 18) = v6;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v7 = *((void *)a2 + 19);
  v3 |= 0x40000u;
  *((_DWORD *)this + 44) = v3;
  *((void *)this + 19) = v7;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *((double *)a2 + 20);
  v3 |= 0x80000u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v8 = *((_DWORD *)a2 + 42);
  v3 |= 0x100000u;
  *((_DWORD *)this + 44) = v3;
  *((_DWORD *)this + 42) = v8;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *((double *)a2 + 11);
  v3 |= 0x400u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *((double *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 2) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 3) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 44) = v3;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *((double *)a2 + 10);
  v3 |= 0x200u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_46:
    double result = *((double *)a2 + 12);
    *((_DWORD *)this + 44) = v3 | 0x800;
    *((double *)this + 12) = result;
    return result;
  }
LABEL_45:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_DWORD *)this + 44) = v3;
  *((double *)this + 1) = result;
  if ((*((_DWORD *)a2 + 44) & 0x800) != 0) {
    goto LABEL_46;
  }
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, const CMMsl::FitnessMachineData *a2)
{
  if (a1 != a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((CMMsl::FitnessMachineData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineData *a2, CMMsl::FitnessMachineData *a3)
{
  int v3 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v9;
  uint64_t v10 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v13;
  uint64_t v14 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v14;
  uint64_t v15 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v15;
  uint64_t v16 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v16;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  uint64_t v17 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  LODWORD(v15) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v15;
  uint64_t v20 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v20;
  uint64_t v21 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v21;
  uint64_t v22 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v22;
  double result = *((double *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((double *)a2 + 12) = result;
  return result;
}

double CMMsl::FitnessMachineData::FitnessMachineData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5B78;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a2 + 176) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 96);
  *(double *)(a1 + 96) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineData::FitnessMachineData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineData::formatText(CMMsl::FitnessMachineData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "cadenceDeviceIdentification", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadenceUpdateTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "externalMachineType", *((_DWORD *)this + 42));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "inclination", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "instantaneousPower", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "powerMeterIdentification", *((_DWORD *)this + 43));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "powerUpdateTime", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "resistanceLevel", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "speedDeviceIdentification", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "speedUpdateTime", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "totalDistance", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "totalElevationAscended", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "totalEnergy", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "totalFloorsClimbed", *((void *)this + 17));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "totalStrideCount", *((void *)this + 18));
  int v5 = *((_DWORD *)this + 44);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "totalStrokeCount", *((void *)this + 19));
  if ((*((_DWORD *)this + 44) & 0x80000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "verticalSpeed", *((double *)this + 20));
LABEL_24:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineData::readFrom(CMMsl::FitnessMachineData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 2u:
              *((_DWORD *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 3u:
              *((_DWORD *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 4u:
              *((_DWORD *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 5u:
              *((_DWORD *)this + 44) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 6u:
              *((_DWORD *)this + 44) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 7u:
              *((_DWORD *)this + 44) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 8u:
              *((_DWORD *)this + 44) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 9u:
              *((_DWORD *)this + 44) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0xAu:
              *((_DWORD *)this + 44) |= 0x10000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_155:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_155;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_156:
              *((void *)this + 17) = v25;
              goto LABEL_147;
            case 0xBu:
              *((_DWORD *)this + 44) |= 0x20000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_160:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_160;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_161:
              *((void *)this + 18) = v31;
              goto LABEL_147;
            case 0xCu:
              *((_DWORD *)this + 44) |= 0x40000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_165:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_165;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_166:
              *((void *)this + 19) = v37;
              goto LABEL_147;
            case 0xDu:
              *((_DWORD *)this + 44) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0xEu:
              *((_DWORD *)this + 44) |= 0x100000u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_171;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_170;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *((_DWORD *)this + 42) = v43;
              goto LABEL_147;
            case 0xFu:
              *((_DWORD *)this + 44) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x10u:
              *((_DWORD *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x11u:
              *((_DWORD *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x12u:
              *((_DWORD *)this + 44) |= 0x200000u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_175;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *((_DWORD *)this + 43) = v49;
LABEL_147:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *((_DWORD *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x14u:
              *((_DWORD *)this + 44) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x15u:
              *((_DWORD *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_109;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_146;
            case 0x16u:
              *((_DWORD *)this + 44) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
LABEL_146:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_109:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 176);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 5u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 7u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 8u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 9u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 136), 0xAu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 144), 0xBu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 152), 0xCu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xDu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0xEu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0xFu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0x10u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x11u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x12u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 0x13u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 0x15u);
    if ((*(_DWORD *)(v3 + 176) & 0x800) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0x14u);
  int v4 = *(_DWORD *)(v3 + 176);
  if (v4) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_45:
  double v5 = *(double *)(v3 + 96);

  return PB::Writer::write(a2, v5, 0x16u);
}

BOOL CMMsl::FitnessMachineData::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 176);
  int v3 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(double *)(a1 + 120) != *(double *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(void *)(a1 + 136) != *(void *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(void *)(a1 + 144) != *(void *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(void *)(a1 + 152) != *(void *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 176) & 0x800) == 0;
  if ((v2 & 0x800) != 0) {
    return (v3 & 0x800) != 0 && *(double *)(a1 + 96) == *(double *)(a2 + 96);
  }
  return v4;
}

uint64_t CMMsl::FitnessMachineData::hash_value(CMMsl::FitnessMachineData *this)
{
  int v1 = *((_DWORD *)this + 44);
  if ((v1 & 8) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_59:
    double v3 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_60:
    double v4 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_61:
    double v5 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_62:
    double v6 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_15;
    }
LABEL_63:
    double v7 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_18;
    }
LABEL_64:
    double v8 = 0.0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_65:
    double v9 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_66:
    double v10 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
  double v2 = *((double *)this + 4);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_59;
  }
LABEL_3:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_60;
  }
LABEL_6:
  double v4 = *((double *)this + 6);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_61;
  }
LABEL_9:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_62;
  }
LABEL_12:
  double v6 = *((double *)this + 9);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_63;
  }
LABEL_15:
  double v7 = *((double *)this + 13);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_64;
  }
LABEL_18:
  double v8 = *((double *)this + 15);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_65;
  }
LABEL_21:
  double v9 = *((double *)this + 16);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_66;
  }
LABEL_24:
  double v10 = *((double *)this + 14);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_27:
    uint64_t v11 = *((void *)this + 17);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v11 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_28:
    uint64_t v12 = *((void *)this + 18);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v12 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_29:
    uint64_t v13 = *((void *)this + 19);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_30;
    }
LABEL_70:
    double v14 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_69:
  uint64_t v13 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_70;
  }
LABEL_30:
  double v14 = *((double *)this + 20);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v1 & 0x100000) != 0)
  {
LABEL_33:
    uint64_t v15 = *((unsigned int *)this + 42);
    if ((v1 & 0x400) != 0) {
      goto LABEL_34;
    }
LABEL_72:
    double v16 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_37;
    }
LABEL_73:
    double v17 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_40;
    }
LABEL_74:
    double v18 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_43;
    }
    goto LABEL_75;
  }
LABEL_71:
  uint64_t v15 = 0;
  if ((v1 & 0x400) == 0) {
    goto LABEL_72;
  }
LABEL_34:
  double v16 = *((double *)this + 11);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_73;
  }
LABEL_37:
  double v17 = *((double *)this + 2);
  if (v17 == 0.0) {
    double v17 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_74;
  }
LABEL_40:
  double v18 = *((double *)this + 3);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_43:
    uint64_t v19 = *((int *)this + 43);
    if ((v1 & 0x80) != 0) {
      goto LABEL_44;
    }
LABEL_76:
    double v20 = 0.0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_47;
    }
LABEL_77:
    double v21 = 0.0;
    if (v1) {
      goto LABEL_50;
    }
    goto LABEL_78;
  }
LABEL_75:
  uint64_t v19 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_76;
  }
LABEL_44:
  double v20 = *((double *)this + 8);
  if (v20 == 0.0) {
    double v20 = 0.0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_77;
  }
LABEL_47:
  double v21 = *((double *)this + 10);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  if (v1)
  {
LABEL_50:
    double v22 = *((double *)this + 1);
    if (v22 == 0.0) {
      double v22 = 0.0;
    }
    if ((v1 & 0x800) != 0) {
      goto LABEL_53;
    }
LABEL_79:
    double v23 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23;
  }
LABEL_78:
  double v22 = 0.0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_79;
  }
LABEL_53:
  double v23 = *((double *)this + 12);
  if (v23 == 0.0) {
    double v23 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ *(void *)&v14 ^ v15 ^ *(void *)&v16 ^ *(void *)&v17 ^ *(void *)&v18 ^ v19 ^ *(void *)&v20 ^ *(void *)&v21 ^ *(void *)&v22 ^ *(void *)&v23;
}

uint64_t CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t this)
{
  *(void *)this = off_1003A5BB0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(void *)this = off_1003A5BB0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

void CMMsl::FitnessMachineSample::~FitnessMachineSample(CMMsl::FitnessMachineSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(CMMsl::FitnessMachineSample *this, const CMMsl::FitnessMachineSample *a2)
{
  *(void *)this = off_1003A5BB0;
  *((_DWORD *)this + 28) = 0;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    int v3 = 4;
    *((_DWORD *)this + 28) = 4;
    *((void *)this + 3) = v4;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 28) = v3;
    *((void *)this + 2) = v4;
    int v2 = *((_DWORD *)a2 + 28);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    v3 |= 1u;
    *((_DWORD *)this + 28) = v3;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 28);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x400u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 27) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x2000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x800u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 16) = v5;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v6 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 25) = v6;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 26);
  v3 |= 0x200000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 26) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x40000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 12) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x10000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x20u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x1000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x80000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x20000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 11) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x4000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 8) = v4;
  int v2 = *((_DWORD *)a2 + 28);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x8000u;
  *((_DWORD *)this + 28) = v3;
  *((_DWORD *)this + 20) = v4;
  if ((*((_DWORD *)a2 + 28) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 28) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, const CMMsl::FitnessMachineSample *a2)
{
  if (a1 != a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((CMMsl::FitnessMachineSample *)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::FitnessMachineSample *a2, CMMsl::FitnessMachineSample *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LODWORD(v6) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  int v7 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v7;
  int v8 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v8;
  LODWORD(v6) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v6;
  LODWORD(v6) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v6;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v6;
  LODWORD(v6) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v6;
  LODWORD(v6) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v6;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::FitnessMachineSample::FitnessMachineSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5BB0;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

CMMsl *CMMsl::FitnessMachineSample::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::FitnessMachineSample::FitnessMachineSample((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::FitnessMachineSample *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::FitnessMachineSample::formatText(CMMsl::FitnessMachineSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "averageCadence", *((float *)this + 8));
    int v5 = *((_DWORD *)this + 28);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "averageHeartRate", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "averagePace", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "averagePower", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "averageSpeed", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "crossTrainerDistance", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "elapsedTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "elevationGain", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "energy", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "floors", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "indoorBikeDistance", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "instantaneousCadence", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "instantaneousHeartRate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "instantaneousPace", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "instantaneousPower", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "instantaneousSpeed", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "resistanceLevel", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 25));
  int v5 = *((_DWORD *)this + 28);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "strideCount", *((float *)this + 26));
  if ((*((_DWORD *)this + 28) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "treadmillDistance", *((float *)this + 27));
LABEL_25:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FitnessMachineSample::readFrom(CMMsl::FitnessMachineSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_33;
            case 2u:
              *((_DWORD *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_33;
            case 3u:
              *((_DWORD *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_33:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_118;
            case 4u:
              *((_DWORD *)this + 28) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 5u:
              *((_DWORD *)this + 28) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 6u:
              *((_DWORD *)this + 28) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 7u:
              *((_DWORD *)this + 28) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 8u:
              *((_DWORD *)this + 28) |= 0x800u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_128;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_127;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_128;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *((_DWORD *)this + 16) = v25;
              goto LABEL_119;
            case 9u:
              *((_DWORD *)this + 28) |= 0x100000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_133;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_132;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_133;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *((_DWORD *)this + 25) = v31;
LABEL_119:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *((_DWORD *)this + 28) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0xBu:
              *((_DWORD *)this + 28) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0xCu:
              *((_DWORD *)this + 28) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0xDu:
              *((_DWORD *)this + 28) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0xEu:
              *((_DWORD *)this + 28) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0xFu:
              *((_DWORD *)this + 28) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x10u:
              *((_DWORD *)this + 28) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x11u:
              *((_DWORD *)this + 28) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x12u:
              *((_DWORD *)this + 28) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x13u:
              *((_DWORD *)this + 28) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x14u:
              *((_DWORD *)this + 28) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x15u:
              *((_DWORD *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x16u:
              *((_DWORD *)this + 28) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_101;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_117;
            case 0x17u:
              *((_DWORD *)this + 28) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_117:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_118:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_101:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::FitnessMachineSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 112);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 5u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 6u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 8u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 9u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xAu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xCu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xDu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xEu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xFu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x10u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x12u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x13u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x14u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
    if ((*(_DWORD *)(v3 + 112) & 0x10) == 0) {
      return this;
    }
    goto LABEL_47;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x15u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_47:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 0x17u);
}

BOOL CMMsl::FitnessMachineSample::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 112);
  int v3 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 112) & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::FitnessMachineSample::hash_value(CMMsl::FitnessMachineSample *this)
{
  int v1 = *((_DWORD *)this + 28);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_68:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_69:
    double v4 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_70:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_12;
    }
LABEL_71:
    uint64_t v8 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_15;
    }
LABEL_72:
    uint64_t v10 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_73:
    uint64_t v12 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_68;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_69;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_70;
  }
LABEL_9:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_71;
  }
LABEL_12:
  float v7 = *((float *)this + 27);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_72;
  }
LABEL_15:
  float v9 = *((float *)this + 18);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_73;
  }
LABEL_18:
  float v11 = *((float *)this + 13);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x800) != 0)
  {
LABEL_21:
    uint64_t v13 = *((int *)this + 16);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v13 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_22:
    uint64_t v14 = *((int *)this + 25);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_23;
    }
LABEL_76:
    uint64_t v16 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_26;
    }
LABEL_77:
    uint64_t v18 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_29;
    }
LABEL_78:
    uint64_t v20 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_32;
    }
LABEL_79:
    uint64_t v22 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_35;
    }
LABEL_80:
    uint64_t v24 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_38;
    }
LABEL_81:
    uint64_t v26 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_41;
    }
LABEL_82:
    uint64_t v28 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_44;
    }
LABEL_83:
    uint64_t v30 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
LABEL_84:
    uint64_t v32 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_50;
    }
LABEL_85:
    uint64_t v34 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_53;
    }
LABEL_86:
    uint64_t v36 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_56;
    }
LABEL_87:
    uint64_t v38 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_88;
  }
LABEL_75:
  uint64_t v14 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_76;
  }
LABEL_23:
  float v15 = *((float *)this + 26);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_77;
  }
LABEL_26:
  float v17 = *((float *)this + 23);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_78;
  }
LABEL_29:
  float v19 = *((float *)this + 12);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_79;
  }
LABEL_32:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_80;
  }
LABEL_35:
  float v23 = *((float *)this + 10);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_81;
  }
LABEL_38:
  float v25 = *((float *)this + 14);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_82;
  }
LABEL_41:
  float v27 = *((float *)this + 17);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_83;
  }
LABEL_44:
  float v29 = *((float *)this + 24);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_84;
  }
LABEL_47:
  float v31 = *((float *)this + 22);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_85;
  }
LABEL_50:
  float v33 = *((float *)this + 11);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_86;
  }
LABEL_53:
  float v35 = *((float *)this + 19);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_87;
  }
LABEL_56:
  float v37 = *((float *)this + 8);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x8000) != 0)
  {
LABEL_59:
    float v39 = *((float *)this + 20);
    uint64_t v40 = LODWORD(v39);
    if (v39 == 0.0) {
      uint64_t v40 = 0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_62;
    }
LABEL_89:
    uint64_t v42 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
  }
LABEL_88:
  uint64_t v40 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_89;
  }
LABEL_62:
  float v41 = *((float *)this + 9);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v13 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A5BE8;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A5BE8;
  return this;
}

void CMMsl::FocusModes::~FocusModes(CMMsl::FocusModes *this)
{
  *(void *)this = off_1003A5BE8;
  uint64_t v4 = *((void *)this + 2);
  double v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  *double v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_100012E84((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FocusModes::~FocusModes(this);

  operator delete();
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t this, const CMMsl::FocusModes *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)this = off_1003A5BE8;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 4) != 0)
  {
    int v4 = *((_DWORD *)a2 + 9);
    *(unsigned char *)(this + 48) |= 4u;
    *(_DWORD *)(this + 36) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  int v5 = *((_DWORD *)a2 + 8);
  *(unsigned char *)(this + 48) |= 2u;
  *(_DWORD *)(this + 32) = v5;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_8:
    if ((v2 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v6 = *((_DWORD *)a2 + 10);
  *(unsigned char *)(this + 48) |= 8u;
  *(_DWORD *)(this + 40) = v6;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return this;
    }
    goto LABEL_10;
  }
LABEL_15:
  char v7 = *((unsigned char *)a2 + 44);
  *(unsigned char *)(this + 48) |= 0x10u;
  *(unsigned char *)(this + 44) = v7;
  if ((*((unsigned char *)a2 + 48) & 1) == 0) {
    return this;
  }
LABEL_10:
  uint64_t v3 = *((void *)a2 + 3);
  *(unsigned char *)(this + 48) |= 1u;
  *(void *)(this + 24) = v3;
  return this;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, const CMMsl::FocusModes *a2)
{
  if ((const CMMsl::FocusModes *)a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v12;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    int v15 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v7;
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FocusModes *a2, CMMsl::FocusModes *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v5;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

uint64_t CMMsl::FocusModes::FocusModes(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5BE8;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = *v4;
  *uint64_t v4 = v6;
  if (v7) {
    sub_100012E84((uint64_t)v4, v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = *v5;
  *uint64_t v5 = v8;
  if (v9) {
    sub_100012E84(a1 + 16, v9);
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t CMMsl::FocusModes::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FocusModes::FocusModes((uint64_t)v9, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v3;
    *(void *)&long long v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = v12;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v15;
    int v15 = v6;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v7;
    LOBYTE(v7) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v14;
    char v14 = v7;
    uint64_t v11 = v3;
    uint64_t v12 = v4;
    CMMsl::FocusModes::~FocusModes((CMMsl::FocusModes *)v9);
  }
  return a1;
}

uint64_t CMMsl::FocusModes::formatText(CMMsl::FocusModes *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "modeSemanticType", *((_DWORD *)this + 8));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*((unsigned char *)this + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "modeUpdateReason", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 48) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "modeUpdateSource", *((_DWORD *)this + 10));
LABEL_7:
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  char v6 = *((unsigned char *)this + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "starting", *((unsigned char *)this + 44));
    char v6 = *((unsigned char *)this + 48);
  }
  if (v6) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FocusModes::readFrom(CMMsl::FocusModes *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *((unsigned char *)this + 48) |= 4u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v22 = *((void *)a2 + 2);
          uint64_t v23 = *(void *)a2;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_79;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v26) = 0;
            goto LABEL_79;
          }
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v52 = v21 + 1;
              char v53 = *(unsigned char *)(v23 + v21);
              *((void *)a2 + 1) = v52;
              v26 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v21 = v52;
                BOOL v14 = v51++ > 8;
                if (v14) {
                  goto LABEL_58;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_79:
          *((_DWORD *)this + 9) = v26;
          goto LABEL_88;
        case 4u:
          *((unsigned char *)this + 48) |= 2u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_83;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_83;
          }
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v56 = v29 + 1;
              char v57 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v56;
              v34 |= (unint64_t)(v57 & 0x7F) << v54;
              if (v57 < 0)
              {
                v54 += 7;
                unint64_t v29 = v56;
                BOOL v14 = v55++ > 8;
                if (v14) {
                  goto LABEL_65;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_83:
          *((_DWORD *)this + 8) = v34;
          goto LABEL_88;
        case 5u:
          *((unsigned char *)this + 48) |= 8u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_87;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_87;
          }
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          break;
        case 6u:
          *((unsigned char *)this + 48) |= 0x10u;
          unint64_t v45 = *((void *)a2 + 1);
          if (v45 >= *((void *)a2 + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)a2 + v45);
            *((void *)a2 + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *((unsigned char *)this + 44) = v48;
          goto LABEL_88;
        case 7u:
          *((unsigned char *)this + 48) |= 1u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v49);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_88;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_88;
      }
      while (1)
      {
        if (v38 == v37)
        {
          LODWORD(v42) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_87;
        }
        unint64_t v60 = v37 + 1;
        char v61 = *(unsigned char *)(v39 + v37);
        *((void *)a2 + 1) = v60;
        v42 |= (unint64_t)(v61 & 0x7F) << v58;
        if ((v61 & 0x80) == 0) {
          break;
        }
        v58 += 7;
        unint64_t v37 = v60;
        BOOL v14 = v59++ > 8;
        if (v14) {
          goto LABEL_72;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v42) = 0;
      }
LABEL_87:
      *((_DWORD *)this + 10) = v42;
LABEL_88:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FocusModes::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v3 + 16)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 3u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 44), 6u);
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 7u);
}

BOOL CMMsl::FocusModes::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned __int8 **)(a1 + 8);
  double v5 = *(unsigned __int8 ***)(a2 + 8);
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      int v7 = (unsigned __int8 *)v4[23];
    }
    else {
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unsigned int v10 = *(unsigned __int8 **)(a2 + 8);
    }
    else {
      unsigned int v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  unint64_t v11 = *(unsigned __int8 **)(a1 + 16);
  unint64_t v12 = *(unsigned __int8 ***)(a2 + 16);
  if (v11)
  {
    if (!v12) {
      return 0;
    }
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      BOOL v14 = (unsigned __int8 *)v11[23];
    }
    else {
      BOOL v14 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    char v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      char v15 = v12[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      unint64_t v17 = *(unsigned __int8 **)(a2 + 16);
    }
    else {
      unint64_t v17 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        return 0;
      }
    }
    else if (v11[23])
    {
      while (*v11 == *v17)
      {
        ++v11;
        ++v17;
        if (!--v13) {
          goto LABEL_35;
        }
      }
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
LABEL_35:
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 8) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 48) & 1) == 0;
  if ((*(unsigned char *)(a1 + 48) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 48) & 1) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
}

unint64_t CMMsl::FocusModes::hash_value(CMMsl::FocusModes *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v12, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    unint64_t v5 = sub_100012EE0((uint64_t)&v13, v4);
  }
  else {
    unint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 48) & 4) != 0)
  {
    uint64_t v6 = *((unsigned int *)this + 9);
    if ((*((unsigned char *)this + 48) & 2) != 0)
    {
LABEL_9:
      uint64_t v7 = *((int *)this + 8);
      if ((*((unsigned char *)this + 48) & 8) != 0) {
        goto LABEL_10;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 48) & 8) != 0)
  {
LABEL_10:
    uint64_t v8 = *((int *)this + 10);
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_11:
    uint64_t v9 = *((unsigned __int8 *)this + 44);
    if (*((unsigned char *)this + 48)) {
      goto LABEL_12;
    }
LABEL_19:
    double v10 = 0.0;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10;
  }
LABEL_18:
  uint64_t v9 = 0;
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_19;
  }
LABEL_12:
  double v10 = *((double *)this + 3);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ *(void *)&v10;
}

double CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  *(void *)this = off_1003A5C20;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5C20;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::FrequencyResponse::~FrequencyResponse(CMMsl::FrequencyResponse *this)
{
  *(void *)this = off_1003A5C20;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FrequencyResponse::~FrequencyResponse(this);

  operator delete();
}

CMMsl::FrequencyResponse *CMMsl::FrequencyResponse::FrequencyResponse(CMMsl::FrequencyResponse *this, const CMMsl::FrequencyResponse *a2)
{
  *(void *)this = off_1003A5C20;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 64))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 64) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, const CMMsl::FrequencyResponse *a2)
{
  if ((const CMMsl::FrequencyResponse *)a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((CMMsl::FrequencyResponse *)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::FrequencyResponse *a2, CMMsl::FrequencyResponse *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  return result;
}

uint64_t CMMsl::FrequencyResponse::FrequencyResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5C20;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::FrequencyResponse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::FrequencyResponse::FrequencyResponse((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v5;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    CMMsl::FrequencyResponse::~FrequencyResponse((CMMsl::FrequencyResponse *)v9);
  }
  return a1;
}

uint64_t CMMsl::FrequencyResponse::formatText(CMMsl::FrequencyResponse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "freq", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "mag", v10);
  }
  if (*((unsigned char *)this + 64)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::FrequencyResponse::readFrom(CMMsl::FrequencyResponse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    float v10 = (void **)((char *)this + 8);
    long long v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 2);
            unint64_t v44 = *((void *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              int v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_100024458((uint64_t)v11, v51);
                int v47 = (char *)*((void *)this + 1);
                unint64_t v45 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 1) = v53;
              *((void *)this + 2) = v46;
              *((void *)this + 3) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *((void *)this + 2) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_82;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_83;
        }
        unint64_t v60 = (char *)*((void *)this + 2);
        unint64_t v59 = *((void *)this + 3);
        if ((unint64_t)v60 >= v59)
        {
          char v67 = (char *)*v10;
          uint64_t v68 = (v60 - (unsigned char *)*v10) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
LABEL_128:
          }
            sub_10000EE98();
          uint64_t v70 = v59 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            uint64_t v72 = (char *)sub_100024458((uint64_t)v11, v71);
            char v67 = (char *)*((void *)this + 1);
            unint64_t v60 = (char *)*((void *)this + 2);
          }
          else
          {
            uint64_t v72 = 0;
          }
          float v75 = &v72[4 * v68];
          *(_DWORD *)float v75 = 0;
          char v58 = v75 + 4;
          while (v60 != v67)
          {
            int v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *((void *)this + 1) = v75;
          *((void *)this + 2) = v58;
          *((void *)this + 3) = &v72[4 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v60 = 0;
          char v58 = v60 + 4;
        }
        *((void *)this + 2) = v58;
LABEL_114:
        unint64_t v77 = *((void *)a2 + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2))
        {
LABEL_116:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(void *)a2 + v77);
        uint64_t v27 = *((void *)a2 + 1) + 4;
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *((unsigned char *)this + 64) |= 1u;
        unint64_t v26 = *((void *)a2 + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
          goto LABEL_116;
        }
        *((void *)this + 7) = *(void *)(*(void *)a2 + v26);
        uint64_t v27 = *((void *)a2 + 1) + 8;
LABEL_118:
        *((void *)a2 + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v28 = *((void *)a2 + 1);
      unint64_t v29 = *((void *)a2 + 2);
      while (v28 < v29 && !*((unsigned char *)a2 + 24))
      {
        uint64_t v31 = (char *)*((void *)this + 5);
        unint64_t v30 = *((void *)this + 6);
        if ((unint64_t)v31 >= v30)
        {
          unsigned int v33 = (char *)*v8;
          uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            goto LABEL_127;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v38 = (char *)sub_100024458((uint64_t)v9, v37);
            unsigned int v33 = (char *)*((void *)this + 4);
            uint64_t v31 = (char *)*((void *)this + 5);
          }
          else
          {
            unint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = 0;
          char v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((void *)this + 4) = v39;
          *((void *)this + 5) = v32;
          *((void *)this + 6) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = 0;
          char v32 = v31 + 4;
        }
        *((void *)this + 5) = v32;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
        {
LABEL_82:
          *((unsigned char *)a2 + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
        unint64_t v29 = *((void *)a2 + 2);
        unint64_t v28 = *((void *)a2 + 1) + 4;
        *((void *)a2 + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v57 = (char *)*((void *)this + 5);
    unint64_t v56 = *((void *)this + 6);
    if ((unint64_t)v57 >= v56)
    {
      char v61 = (char *)*v8;
      uint64_t v62 = (v57 - (unsigned char *)*v8) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
LABEL_127:
      }
        sub_10000EE98();
      uint64_t v64 = v56 - (void)v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        char v66 = (char *)sub_100024458((uint64_t)v9, v65);
        char v61 = (char *)*((void *)this + 4);
        char v57 = (char *)*((void *)this + 5);
      }
      else
      {
        char v66 = 0;
      }
      float v73 = &v66[4 * v62];
      *(_DWORD *)float v73 = 0;
      char v58 = v73 + 4;
      while (v57 != v61)
      {
        int v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *((void *)this + 4) = v73;
      *((void *)this + 5) = v58;
      *((void *)this + 6) = &v66[4 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)char v57 = 0;
      char v58 = v57 + 4;
    }
    *((void *)this + 5) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t CMMsl::FrequencyResponse::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 64)) {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  }
  int v4 = (float *)v3[1];
  long long v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  return this;
}

BOOL CMMsl::FrequencyResponse::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 64))
  {
    return 0;
  }
  unint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if (v5 - v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  uint64_t v8 = v6 + 4;
  do
  {
    float v9 = *v7++;
    BOOL result = *(float *)(v8 - 4) == v9;
    BOOL v11 = *(float *)(v8 - 4) != v9 || v8 == v5;
    v8 += 4;
  }
  while (!v11);
  return result;
}

uint64_t CMMsl::FrequencyResponse::hash_value(CMMsl::FrequencyResponse *this)
{
  if (*((unsigned char *)this + 64))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  return v2 ^ PBHashBytes();
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *this)
{
  *this = off_1003A5C58;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A5C58;
  this[1] = 0;
  return this;
}

void CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(CMMsl::FusedBioMotionClassification *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5C58;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification(this);

  operator delete();
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *this, const CMMsl::FusedBioMotionClassification *a2)
{
  *this = off_1003A5C58;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::FusedBioMotionClassification *CMMsl::FusedBioMotionClassification::operator=(const CMMsl::FusedBioMotionClassification *a1, const CMMsl::FusedBioMotionClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification((CMMsl::FusedBioMotionClassification *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::FusedBioMotionClassification *a2, CMMsl::FusedBioMotionClassification *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::FusedBioMotionClassification::FusedBioMotionClassification(void *a1, uint64_t a2)
{
  *a1 = off_1003A5C58;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A5C58;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A5C58;
    v6[1] = v4;
    CMMsl::FusedBioMotionClassification::~FusedBioMotionClassification((CMMsl::FusedBioMotionClassification *)v6);
  }
  return a1;
}

uint64_t CMMsl::FusedBioMotionClassification::formatText(CMMsl::FusedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::FusedBioMotionClassification::readFrom(CMMsl::FusedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::FusedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::FusedBioMotionClassification::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::BioMotionClassification::operator==(v2, v3);
  }
  return result;
}

CMMsl::BioMotionClassification *CMMsl::FusedBioMotionClassification::hash_value(CMMsl::FusedBioMotionClassification *this)
{
  BOOL result = (CMMsl::BioMotionClassification *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::FusedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t this)
{
  *(void *)this = off_1003A5C90;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(void *)this = off_1003A5C90;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void CMMsl::GaitCycleSegment::~GaitCycleSegment(CMMsl::GaitCycleSegment *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(CMMsl::GaitCycleSegment *this, const CMMsl::GaitCycleSegment *a2)
{
  *(void *)this = off_1003A5C90;
  *((_DWORD *)this + 25) = 0;
  int v2 = *((_DWORD *)a2 + 25);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 25) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *((_DWORD *)this + 25) = v3;
    *((void *)this + 3) = v5;
    int v2 = *((_DWORD *)a2 + 25);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *((_DWORD *)this + 25) = v3;
    *((void *)this + 2) = v6;
    int v2 = *((_DWORD *)a2 + 25);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 15) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *((float *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 22) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *((float *)a2 + 12);
  v3 |= 0x40u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 12) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *((float *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 20) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *((float *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 14) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *((float *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 13) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *((float *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 19) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *((float *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 11) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *((float *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 21) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *((float *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 16) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  char v8 = *((unsigned char *)a2 + 98);
  v3 |= 0x800000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 98) = v8;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *((float *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 17) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v9 = *((unsigned char *)a2 + 97);
  v3 |= 0x400000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 97) = v9;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v10 = *((unsigned char *)a2 + 94);
  v3 |= 0x80000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 94) = v10;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v11 = *((unsigned char *)a2 + 93);
  v3 |= 0x40000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 93) = v11;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v12 = *((unsigned char *)a2 + 95);
  v3 |= 0x100000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 95) = v12;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *((float *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 25) = v3;
  *((float *)this + 10) = result;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v13 = *((unsigned char *)a2 + 96);
  v3 |= 0x200000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 96) = v13;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v14 = *((unsigned char *)a2 + 92);
  v3 |= 0x20000u;
  *((_DWORD *)this + 25) = v3;
  *((unsigned char *)this + 92) = v14;
  int v2 = *((_DWORD *)a2 + 25);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_50:
    float result = *((float *)a2 + 18);
    *((_DWORD *)this + 25) = v3 | 0x1000;
    *((float *)this + 18) = result;
    return result;
  }
LABEL_49:
  uint64_t v15 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 25) = v3;
  *((void *)this + 4) = v15;
  if ((*((_DWORD *)a2 + 25) & 0x1000) != 0) {
    goto LABEL_50;
  }
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, const CMMsl::GaitCycleSegment *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((CMMsl::GaitCycleSegment *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegment *a2, CMMsl::GaitCycleSegment *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  int v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  int v9 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v9;
  int v10 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  int v11 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v11;
  int v12 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v14;
  int v15 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v15;
  int v16 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v16;
  LOBYTE(v6) = *((unsigned char *)this + 98);
  *((unsigned char *)this + 98) = *((unsigned char *)a2 + 98);
  *((unsigned char *)a2 + 98) = v6;
  int v17 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v17;
  LOBYTE(v6) = *((unsigned char *)this + 97);
  *((unsigned char *)this + 97) = *((unsigned char *)a2 + 97);
  *((unsigned char *)a2 + 97) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 94);
  *((unsigned char *)this + 94) = *((unsigned char *)a2 + 94);
  *((unsigned char *)a2 + 94) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 95);
  *((unsigned char *)this + 95) = *((unsigned char *)a2 + 95);
  *((unsigned char *)a2 + 95) = v6;
  int v18 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v18;
  LOBYTE(v6) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v6;
  uint64_t v19 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v19;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  return result;
}

float CMMsl::GaitCycleSegment::GaitCycleSegment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5C90;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 95) = *(unsigned char *)(a2 + 95);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  float result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  return result;
}

CMMsl *CMMsl::GaitCycleSegment::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegment::GaitCycleSegment((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegment *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegment::formatText(CMMsl::GaitCycleSegment *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbabilityEstimate", *((float *)this + 10));
    int v5 = *((_DWORD *)this + 25);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cadence", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "doubleSupportEstimate", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "horizontalRotationRateMax", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "impulseMagnitude", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "impulseStartTime", *((void *)this + 1));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isCadenceConcordant", *((unsigned char *)this + 92));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "isFeasibleWalkingSpeed", *((unsigned char *)this + 93));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isNotRunning", *((unsigned char *)this + 94));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isPendular", *((unsigned char *)this + 95));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "isSufficientVerticalTwist", *((unsigned char *)this + 96));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "isSwingStanceCycle", *((unsigned char *)this + 97));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "isValid", *((unsigned char *)this + 98));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftEndTime", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "loftMagnitude", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "loftStartTime", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "pendulumResidual", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "previousImpulseStartTime", *((void *)this + 4));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "rawLoftSpeed", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "sqrtMaxAbsLoftAccel", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "stanceProbability", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "stepLengthEstimate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 25);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "verticalRotationRateMean", *((float *)this + 21));
  if ((*((_DWORD *)this + 25) & 0x10000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(a2, "walkSpeedEstimate", *((float *)this + 22));
LABEL_26:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegment::readFrom(CMMsl::GaitCycleSegment *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 25) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_153;
                  }
                  unint64_t v61 = v20++;
                  char v62 = *(unsigned char *)(v21 + v61);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_152:
                unint64_t v2 = v61 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_153;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_153:
              *((void *)this + 1) = v24;
              goto LABEL_169;
            case 2u:
              *((_DWORD *)this + 25) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_158;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_157:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_157;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_158;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_158:
              *((void *)this + 3) = v31;
              goto LABEL_169;
            case 3u:
              *((_DWORD *)this + 25) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_163;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_162:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_162;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_163;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_163:
              *((void *)this + 2) = v37;
              goto LABEL_169;
            case 4u:
              *((_DWORD *)this + 25) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 5u:
              *((_DWORD *)this + 25) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 6u:
              *((_DWORD *)this + 25) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 7u:
              *((_DWORD *)this + 25) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 8u:
              *((_DWORD *)this + 25) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 9u:
              *((_DWORD *)this + 25) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0xAu:
              *((_DWORD *)this + 25) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0xBu:
              *((_DWORD *)this + 25) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0xCu:
              *((_DWORD *)this + 25) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0xDu:
              *((_DWORD *)this + 25) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0xEu:
              *((_DWORD *)this + 25) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *((_DWORD *)this + 25) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0x10u:
              *((_DWORD *)this + 25) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *((_DWORD *)this + 25) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *((unsigned char *)this + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *((_DWORD *)this + 25) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *((_DWORD *)this + 25) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *((_DWORD *)this + 25) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_104;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_148;
            case 0x15u:
              *((_DWORD *)this + 25) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *((unsigned char *)this + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *((_DWORD *)this + 25) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *((unsigned char *)this + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *((_DWORD *)this + 25) |= 8u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v73 = v53++;
                  char v74 = *(unsigned char *)(v54 + v73);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_167:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_167;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_168:
              *((void *)this + 4) = v57;
LABEL_169:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x18u:
              *((_DWORD *)this + 25) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_148:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_104:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_169;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_169;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegment::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 100);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 2u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 3u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 5u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 8u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 9u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xAu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xBu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xCu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xDu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 98), 0xEu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xFu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 97), 0x10u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 94), 0x11u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 93), 0x12u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 95), 0x13u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x14u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 96), 0x15u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x17u);
    if ((*(_DWORD *)(v3 + 100) & 0x1000) == 0) {
      return this;
    }
    goto LABEL_49;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 0x16u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x1000) == 0) {
    return this;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 72);

  return PB::Writer::write(a2, v5, 0x18u);
}

BOOL CMMsl::GaitCycleSegment::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 100);
  int v3 = *(_DWORD *)(a2 + 100);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 64) != *(float *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(unsigned __int8 *)(a1 + 98) != *(unsigned __int8 *)(a2 + 98)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(unsigned __int8 *)(a1 + 97) != *(unsigned __int8 *)(a2 + 97)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 94) != *(unsigned __int8 *)(a2 + 94)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 93) != *(unsigned __int8 *)(a2 + 93)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 95) != *(unsigned __int8 *)(a2 + 95)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 96) != *(unsigned __int8 *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(unsigned __int8 *)(a1 + 92) != *(unsigned __int8 *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 100) & 0x1000) == 0;
  if ((v2 & 0x1000) != 0) {
    return (v3 & 0x1000) != 0 && *(float *)(a1 + 72) == *(float *)(a2 + 72);
  }
  return v4;
}

uint64_t CMMsl::GaitCycleSegment::hash_value(CMMsl::GaitCycleSegment *this)
{
  int v1 = *((_DWORD *)this + 25);
  if (v1)
  {
    uint64_t v2 = *((void *)this + 1);
    if ((v1 & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((void *)this + 3);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_4:
    uint64_t v4 = *((void *)this + 2);
    if ((v1 & 0x200) != 0) {
      goto LABEL_5;
    }
LABEL_55:
    uint64_t v6 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_8;
    }
LABEL_56:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_11;
    }
LABEL_57:
    uint64_t v10 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_14;
    }
LABEL_58:
    uint64_t v12 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_17;
    }
LABEL_59:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_20;
    }
LABEL_60:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_23;
    }
LABEL_61:
    uint64_t v18 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_26;
    }
LABEL_62:
    uint64_t v20 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_29;
    }
LABEL_63:
    uint64_t v22 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_32;
    }
LABEL_64:
    uint64_t v24 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_54:
  uint64_t v4 = 0;
  if ((v1 & 0x200) == 0) {
    goto LABEL_55;
  }
LABEL_5:
  float v5 = *((float *)this + 15);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_56;
  }
LABEL_8:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_57;
  }
LABEL_11:
  float v9 = *((float *)this + 12);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_58;
  }
LABEL_14:
  float v11 = *((float *)this + 20);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_59;
  }
LABEL_17:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_20:
  float v15 = *((float *)this + 13);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_61;
  }
LABEL_23:
  float v17 = *((float *)this + 19);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_62;
  }
LABEL_26:
  float v19 = *((float *)this + 11);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_63;
  }
LABEL_29:
  float v21 = *((float *)this + 21);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_64;
  }
LABEL_32:
  float v23 = *((float *)this + 16);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x800000) != 0)
  {
LABEL_35:
    uint64_t v25 = *((unsigned __int8 *)this + 98);
    if ((v1 & 0x800) != 0) {
      goto LABEL_36;
    }
LABEL_66:
    uint64_t v27 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_67;
  }
LABEL_65:
  uint64_t v25 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_66;
  }
LABEL_36:
  float v26 = *((float *)this + 17);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x400000) != 0)
  {
LABEL_39:
    uint64_t v28 = *((unsigned __int8 *)this + 97);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v28 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_40:
    uint64_t v29 = *((unsigned __int8 *)this + 94);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v29 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_41:
    uint64_t v30 = *((unsigned __int8 *)this + 93);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v30 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_42:
    uint64_t v31 = *((unsigned __int8 *)this + 95);
    if ((v1 & 0x10) != 0) {
      goto LABEL_43;
    }
LABEL_71:
    uint64_t v33 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_72;
  }
LABEL_70:
  uint64_t v31 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_71;
  }
LABEL_43:
  float v32 = *((float *)this + 10);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_46:
    uint64_t v34 = *((unsigned __int8 *)this + 96);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_47;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v34 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_47:
    uint64_t v35 = *((unsigned __int8 *)this + 92);
    if ((v1 & 8) != 0) {
      goto LABEL_48;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v35 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_48:
    uint64_t v36 = *((void *)this + 4);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_49;
    }
LABEL_75:
    uint64_t v38 = 0;
    return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
  }
LABEL_74:
  uint64_t v36 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_75;
  }
LABEL_49:
  float v37 = *((float *)this + 18);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v25 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v33 ^ v34 ^ v35 ^ v36 ^ v38;
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this)
{
  *(void *)this = off_1003A5CC8;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(void *)this = off_1003A5CC8;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

void CMMsl::GaitCycleSegmentationState::~GaitCycleSegmentationState(CMMsl::GaitCycleSegmentationState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t this, const CMMsl::GaitCycleSegmentationState *a2)
{
  *(void *)this = off_1003A5CC8;
  *(_DWORD *)(this + 116) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    int v3 = 128;
    *(_DWORD *)(this + 116) = 128;
    *(void *)(this + 64) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(this + 116) = v3;
    *(unsigned char *)(this + 114) = v5;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    char v6 = *((unsigned char *)a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(this + 116) = v3;
    *(unsigned char *)(this + 113) = v6;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 115) = v7;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v8 = *((unsigned char *)a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v8;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 24) = v9;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 16) = v10;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 8) = v11;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 48) = v12;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 56) = v13;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v14 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 92) = v14;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v15 = *((_DWORD *)a2 + 26);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v15;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v16 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v16;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v17 = *((_DWORD *)a2 + 21);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v17;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v18;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v19 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v19;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v20 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 80) = v20;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v21 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v21;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v22;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v23 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 108) = v23;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0) {
      return this;
    }
LABEL_46:
    uint64_t v25 = *((void *)a2 + 5);
    *(_DWORD *)(this + 116) = v3 | 0x10;
    *(void *)(this + 40) = v25;
    return this;
  }
LABEL_45:
  uint64_t v24 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 32) = v24;
  if ((*((_DWORD *)a2 + 29) & 0x10) != 0) {
    goto LABEL_46;
  }
  return this;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, const CMMsl::GaitCycleSegmentationState *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GaitCycleSegmentationState *a2, CMMsl::GaitCycleSegmentationState *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 114);
  *((unsigned char *)this + 114) = *((unsigned char *)a2 + 114);
  *((unsigned char *)a2 + 114) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 115);
  *((unsigned char *)this + 115) = *((unsigned char *)a2 + 115);
  *((unsigned char *)a2 + 115) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v3;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  float result = *((float *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((float *)a2 + 27) = result;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  return result;
}

float CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5CC8;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 115) = *(unsigned char *)(a2 + 115);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  float result = *(float *)(a2 + 108);
  *(float *)(a1 + 108) = result;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return result;
}

CMMsl *CMMsl::GaitCycleSegmentationState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitCycleSegmentationState::GaitCycleSegmentationState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitCycleSegmentationState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitCycleSegmentationState::formatText(CMMsl::GaitCycleSegmentationState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if (v5)
  {
    PB::TextFormatter::format(a2, "curImpulseStartTime", *((void *)this + 1));
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "curLoftEndTime", *((void *)this + 2));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "curLoftStartTime", *((void *)this + 3));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "currentHorzRotRateMax", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "currentImpulseMagnitude", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "currentLoftMagnitude", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "currentMax", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "currentMin", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "currentWalkSpeedEstimate", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "firstLoft", *((unsigned char *)this + 112));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "impulseStartTimeWalkingSpeed", *((void *)this + 4));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "impulseStopTimeWalkingSpeed", *((void *)this + 5));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "lastZeroTime", *((void *)this + 6));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "loftEndDetected", *((unsigned char *)this + 113));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "loftStartDetected", *((unsigned char *)this + 114));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "prevLoftStartTime", *((void *)this + 7));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "previousHorzRotRateMax", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "previousMax", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "vertRotationRateMean", *((float *)this + 27));
  if ((*((_DWORD *)this + 29) & 0x200000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "waitingToConfirmLoft", *((unsigned char *)this + 115));
LABEL_24:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitCycleSegmentationState::readFrom(CMMsl::GaitCycleSegmentationState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 29) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_173;
            case 2u:
              *((_DWORD *)this + 29) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 114) = v22;
              goto LABEL_209;
            case 3u:
              *((_DWORD *)this + 29) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 113) = v24;
              goto LABEL_209;
            case 4u:
              *((_DWORD *)this + 29) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 115) = v26;
              goto LABEL_209;
            case 5u:
              *((_DWORD *)this + 29) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 112) = v28;
              goto LABEL_209;
            case 6u:
              *((_DWORD *)this + 29) |= 4u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v73 = v29++;
                  char v74 = *(unsigned char *)(v30 + v73);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0;
LABEL_177:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v33 = 0;
                }
                goto LABEL_177;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              uint64_t v33 = 0;
LABEL_178:
              *((void *)this + 3) = v33;
              goto LABEL_209;
            case 7u:
              *((_DWORD *)this + 29) |= 2u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    uint64_t v39 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v77 = v35++;
                  char v78 = *(unsigned char *)(v36 + v77);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v39 = 0;
LABEL_182:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v39 = 0;
                }
                goto LABEL_182;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              uint64_t v39 = 0;
LABEL_183:
              *((void *)this + 2) = v39;
              goto LABEL_209;
            case 8u:
              *((_DWORD *)this + 29) |= 1u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v81 = v41++;
                  char v82 = *(unsigned char *)(v42 + v81);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_187:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_187;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_188:
              *((void *)this + 1) = v45;
              goto LABEL_209;
            case 9u:
              *((_DWORD *)this + 29) |= 0x20u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v85 = v47++;
                  char v86 = *(unsigned char *)(v48 + v85);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_192:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_192;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_193:
              *((void *)this + 6) = v51;
              goto LABEL_209;
            case 0xAu:
              *((_DWORD *)this + 29) |= 0x40u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v89 = v53++;
                  char v90 = *(unsigned char *)(v54 + v89);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_197:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_197;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_198:
              *((void *)this + 7) = v57;
              goto LABEL_209;
            case 0xBu:
              *((_DWORD *)this + 29) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0xCu:
              *((_DWORD *)this + 29) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0xDu:
              *((_DWORD *)this + 29) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0xEu:
              *((_DWORD *)this + 29) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0xFu:
              *((_DWORD *)this + 29) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0x10u:
              *((_DWORD *)this + 29) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0x11u:
              *((_DWORD *)this + 29) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0x12u:
              *((_DWORD *)this + 29) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0x13u:
              *((_DWORD *)this + 29) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_99;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_172;
            case 0x14u:
              *((_DWORD *)this + 29) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_172:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_173:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_99:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *((_DWORD *)this + 29) |= 8u;
              unint64_t v59 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v60 = *(void *)a2;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    uint64_t v63 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v93 = v59++;
                  char v94 = *(unsigned char *)(v60 + v93);
                  *((void *)a2 + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    uint64_t v63 = 0;
LABEL_202:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v63 = 0;
                }
                goto LABEL_202;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)a2 + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              uint64_t v63 = 0;
LABEL_203:
              *((void *)this + 4) = v63;
              goto LABEL_209;
            case 0x16u:
              *((_DWORD *)this + 29) |= 0x10u;
              unint64_t v65 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v66 = *(void *)a2;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v69 = 0;
                if (v2 <= v65) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v97 = v65++;
                  char v98 = *(unsigned char *)(v66 + v97);
                  *((void *)a2 + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0;
LABEL_207:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v69 = 0;
                }
                goto LABEL_207;
              }
              char v67 = 0;
              unsigned int v68 = 0;
              uint64_t v69 = 0;
              do
              {
                unint64_t v2 = v65 + 1;
                *((void *)a2 + 1) = v65 + 1;
                char v70 = *(unsigned char *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v67 += 7;
                unint64_t v65 = v2;
                BOOL v14 = v68++ > 8;
              }
              while (!v14);
              uint64_t v69 = 0;
LABEL_208:
              *((void *)this + 5) = v69;
LABEL_209:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitCycleSegmentationState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 114), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 113), 3u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 115), 4u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 112), 5u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 6u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 7u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 8u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 9u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0xAu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xBu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xCu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xDu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0xEu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x10u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x11u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x12u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x13u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x15u);
    if ((*(_DWORD *)(v3 + 116) & 0x10) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x14u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_45:
  unint64_t v5 = *(void *)(v3 + 40);

  return PB::Writer::writeVarInt(a2, v5, 0x16u);
}

BOOL CMMsl::GaitCycleSegmentationState::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 116);
  int v3 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(unsigned __int8 *)(a1 + 114) != *(unsigned __int8 *)(a2 + 114)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(unsigned __int8 *)(a1 + 115) != *(unsigned __int8 *)(a2 + 115)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(void *)(a1 + 48) != *(void *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(void *)(a1 + 56) != *(void *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 116) & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(void *)(a1 + 40) == *(void *)(a2 + 40);
  }
  return v4;
}

uint64_t CMMsl::GaitCycleSegmentationState::hash_value(CMMsl::GaitCycleSegmentationState *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x80) != 0)
  {
    double v2 = *((double *)this + 8);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 114);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v4 = 0;
  if ((v1 & 0x200000) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 115);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v5 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 112);
    if ((v1 & 4) != 0) {
      goto LABEL_7;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v6 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_7:
    uint64_t v7 = *((void *)this + 3);
    if ((v1 & 2) != 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v7 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_8:
    uint64_t v8 = *((void *)this + 2);
    if (v1) {
      goto LABEL_9;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v8 = 0;
  if (v1)
  {
LABEL_9:
    uint64_t v9 = *((void *)this + 1);
    if ((v1 & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v9 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_10:
    uint64_t v10 = *((void *)this + 6);
    if ((v1 & 0x40) != 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v10 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_11:
    uint64_t v11 = *((void *)this + 7);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_12;
    }
LABEL_56:
    uint64_t v13 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_57:
    uint64_t v15 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_58:
    uint64_t v17 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
LABEL_59:
    uint64_t v19 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_24;
    }
LABEL_60:
    uint64_t v21 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_27;
    }
LABEL_61:
    uint64_t v23 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_30;
    }
LABEL_62:
    uint64_t v25 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_33;
    }
LABEL_63:
    uint64_t v27 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_36;
    }
LABEL_64:
    uint64_t v29 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_39;
    }
LABEL_65:
    uint64_t v31 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_42;
    }
LABEL_66:
    uint64_t v32 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_43;
    }
LABEL_67:
    uint64_t v33 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
  }
LABEL_55:
  uint64_t v11 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_56;
  }
LABEL_12:
  float v12 = *((float *)this + 23);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_57;
  }
LABEL_15:
  float v14 = *((float *)this + 26);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_58;
  }
LABEL_18:
  float v16 = *((float *)this + 22);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_59;
  }
LABEL_21:
  float v18 = *((float *)this + 21);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_60;
  }
LABEL_24:
  float v20 = *((float *)this + 25);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_61;
  }
LABEL_27:
  float v22 = *((float *)this + 19);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_62;
  }
LABEL_30:
  float v24 = *((float *)this + 20);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_63;
  }
LABEL_33:
  float v26 = *((float *)this + 24);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_64;
  }
LABEL_36:
  float v28 = *((float *)this + 18);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_65;
  }
LABEL_39:
  float v30 = *((float *)this + 27);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_66;
  }
LABEL_42:
  uint64_t v32 = *((void *)this + 4);
  if ((v1 & 0x10) == 0) {
    goto LABEL_67;
  }
LABEL_43:
  uint64_t v33 = *((void *)this + 5);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v13 ^ v15 ^ v17 ^ v19 ^ v21 ^ v23 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33;
}

uint64_t CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t this)
{
  *(void *)this = off_1003A5D00;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(void *)this = off_1003A5D00;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

void CMMsl::GaitEventsHKResult::~GaitEventsHKResult(CMMsl::GaitEventsHKResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(CMMsl::GaitEventsHKResult *this, const CMMsl::GaitEventsHKResult *a2)
{
  *(void *)this = off_1003A5D00;
  *((_DWORD *)this + 19) = 0;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 4) != 0)
  {
    double result = *((double *)a2 + 3);
    __int16 v3 = 4;
    *((_WORD *)this + 38) = 4;
    *((double *)this + 3) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 5);
    v3 |= 0x10u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 5) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    double result = *((double *)a2 + 4);
    v3 |= 8u;
    *((_WORD *)this + 38) = v3;
    *((double *)this + 4) = result;
    __int16 v2 = *((_WORD *)a2 + 38);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *((double *)a2 + 1);
  v3 |= 1u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 1) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 38) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v5 = *((unsigned char *)a2 + 73);
  v3 |= 0x200u;
  *((_WORD *)this + 38) = v3;
  *((unsigned char *)this + 73) = v5;
  __int16 v2 = *((_WORD *)a2 + 38);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_22:
    double result = *((double *)a2 + 2);
    *((_WORD *)this + 38) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_21:
  char v6 = *((unsigned char *)a2 + 72);
  v3 |= 0x100u;
  *((_WORD *)this + 38) = v3;
  *((unsigned char *)this + 72) = v6;
  if ((*((_WORD *)a2 + 38) & 2) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, const CMMsl::GaitEventsHKResult *a2)
{
  if ((const CMMsl::GaitEventsHKResult *)a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((CMMsl::GaitEventsHKResult *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 73);
    *(unsigned char *)(a1 + 73) = v15;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v14;
    char v14 = v3;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsHKResult *a2, CMMsl::GaitEventsHKResult *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  LOBYTE(v3) = *((unsigned char *)this + 73);
  *((unsigned char *)this + 73) = *((unsigned char *)a2 + 73);
  *((unsigned char *)a2 + 73) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 72);
  *((unsigned char *)this + 72) = *((unsigned char *)a2 + 72);
  *((unsigned char *)a2 + 72) = v3;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::GaitEventsHKResult::GaitEventsHKResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5D00;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::GaitEventsHKResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitEventsHKResult::GaitEventsHKResult((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v16;
    int v16 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v13;
    long long v13 = v6;
    LOBYTE(v3) = *(unsigned char *)(a1 + 73);
    *(unsigned char *)(a1 + 73) = v15;
    char v15 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 72);
    *(unsigned char *)(a1 + 72) = v14;
    char v14 = v3;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsHKResult::formatText(CMMsl::GaitEventsHKResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 38);
  if (v5)
  {
    PB::TextFormatter::format(a2, "emptyField2", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 38);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*((_WORD *)this + 38) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "emptyField3", *((unsigned char *)this + 72));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "hasValidGroundContactTime", *((unsigned char *)this + 73));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "leftGroundContactTime", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "leftGroundContactTimePercentage", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "rightGroundContactTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "rightGroundContactTimePercentage", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 38);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  if ((*((_WORD *)this + 38) & 0x80) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsHKResult::readFrom(CMMsl::GaitEventsHKResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 38) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 2u:
          *((_WORD *)this + 38) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 3u:
          *((_WORD *)this + 38) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 4u:
          *((_WORD *)this + 38) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 5u:
          *((_WORD *)this + 38) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 6u:
          *((_WORD *)this + 38) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 7u:
          *((_WORD *)this + 38) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_49;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
          goto LABEL_57;
        case 8u:
          *((_WORD *)this + 38) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *((unsigned char *)this + 73) = v21;
          break;
        case 9u:
          *((_WORD *)this + 38) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 >= *((void *)a2 + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
            *((void *)a2 + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *((unsigned char *)this + 72) = v24;
          break;
        case 0xAu:
          *((_WORD *)this + 38) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_49:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_57:
            unint64_t v2 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsHKResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 76);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 4u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 72), 9u);
    if ((*(_WORD *)(v3 + 76) & 2) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 73), 8u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0xAu);
}

BOOL CMMsl::GaitEventsHKResult::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 76);
  __int16 v3 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x200) == 0 || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 76) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 76) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 76) & 0x100) == 0 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 2) == 0;
  if ((v2 & 2) != 0) {
    return (v3 & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v4;
}

uint64_t CMMsl::GaitEventsHKResult::hash_value(CMMsl::GaitEventsHKResult *this)
{
  __int16 v1 = *((_WORD *)this + 38);
  if ((v1 & 4) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_29:
    double v3 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_6;
    }
LABEL_30:
    double v4 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_31:
    double v5 = 0.0;
    if (v1) {
      goto LABEL_12;
    }
LABEL_32:
    double v6 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_33:
    double v7 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_34:
    double v8 = 0.0;
    if ((*((_WORD *)this + 38) & 0x200) != 0) {
      goto LABEL_21;
    }
    goto LABEL_35;
  }
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_3:
  double v3 = *((double *)this + 5);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_30;
  }
LABEL_6:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_31;
  }
LABEL_9:
  double v5 = *((double *)this + 6);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_32;
  }
LABEL_12:
  double v6 = *((double *)this + 1);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_33;
  }
LABEL_15:
  double v7 = *((double *)this + 8);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_34;
  }
LABEL_18:
  double v8 = *((double *)this + 7);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((_WORD *)this + 38) & 0x200) != 0)
  {
LABEL_21:
    uint64_t v9 = *((unsigned __int8 *)this + 73);
    if ((*((_WORD *)this + 38) & 0x100) != 0) {
      goto LABEL_22;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v9 = 0;
  if ((*((_WORD *)this + 38) & 0x100) != 0)
  {
LABEL_22:
    uint64_t v10 = *((unsigned __int8 *)this + 72);
    if ((v1 & 2) != 0) {
      goto LABEL_23;
    }
LABEL_37:
    double v11 = 0.0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ *(void *)&v11;
  }
LABEL_36:
  uint64_t v10 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_23:
  double v11 = *((double *)this + 2);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ v9 ^ v10 ^ *(void *)&v11;
}

uint64_t CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t this)
{
  *(void *)this = off_1003A5D38;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = off_1003A5D38;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

void CMMsl::GaitEventsModelOutput::~GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(CMMsl::GaitEventsModelOutput *this, const CMMsl::GaitEventsModelOutput *a2)
{
  *(void *)this = off_1003A5D38;
  *((_DWORD *)this + 22) = 0;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x800) != 0)
  {
    char v4 = *((unsigned char *)a2 + 84);
    __int16 v3 = 2048;
    *((_WORD *)this + 44) = 2048;
    *((unsigned char *)this + 84) = v4;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 1) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((_WORD *)this + 44) = v3;
    *((double *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 44);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 6);
  v3 |= 0x20u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 6) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *((double *)a2 + 4);
  v3 |= 8u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 4) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *((double *)a2 + 5);
  v3 |= 0x10u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *((double *)a2 + 8);
  v3 |= 0x80u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 8) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *((double *)a2 + 7);
  v3 |= 0x40u;
  *((_WORD *)this + 44) = v3;
  *((double *)this + 7) = result;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 19) = v6;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v7 = *((unsigned char *)a2 + 85);
  v3 |= 0x1000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 85) = v7;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v8 = *((unsigned char *)a2 + 86);
  v3 |= 0x2000u;
  *((_WORD *)this + 44) = v3;
  *((unsigned char *)this + 86) = v8;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *((double *)a2 + 3);
    *((_WORD *)this + 44) = v3 | 4;
    *((double *)this + 3) = result;
    return result;
  }
LABEL_29:
  int v10 = *((_DWORD *)a2 + 18);
  v3 |= 0x100u;
  *((_WORD *)this + 44) = v3;
  *((_DWORD *)this + 18) = v10;
  if ((*((_WORD *)a2 + 44) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, const CMMsl::GaitEventsModelOutput *a2)
{
  if (a1 != a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((CMMsl::GaitEventsModelOutput *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsModelOutput *a2, CMMsl::GaitEventsModelOutput *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 84);
  *((unsigned char *)this + 84) = *((unsigned char *)a2 + 84);
  *((unsigned char *)a2 + 84) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  int v11 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 85);
  *((unsigned char *)this + 85) = *((unsigned char *)a2 + 85);
  *((unsigned char *)a2 + 85) = v11;
  LOBYTE(v11) = *((unsigned char *)this + 86);
  *((unsigned char *)this + 86) = *((unsigned char *)a2 + 86);
  *((unsigned char *)a2 + 86) = v11;
  int v12 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v12;
  int v13 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v13;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  return result;
}

double CMMsl::GaitEventsModelOutput::GaitEventsModelOutput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5D38;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(unsigned char *)(a1 + 85) = *(unsigned char *)(a2 + 85);
  *(unsigned char *)(a1 + 86) = *(unsigned char *)(a2 + 86);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GaitEventsModelOutput::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GaitEventsModelOutput::GaitEventsModelOutput((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GaitEventsModelOutput *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsModelOutput::formatText(CMMsl::GaitEventsModelOutput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "crownOrientation", *((_DWORD *)this + 18));
    __int16 v5 = *((_WORD *)this + 44);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isSuccessful", *((unsigned char *)this + 84));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "isValidSide", *((unsigned char *)this + 85));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "isValidToeOff", *((unsigned char *)this + 86));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "meanRotationZ", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "relativeInitialContactTime", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "relativeToeOffTime", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "stepSide", *((_DWORD *)this + 19));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "windowEndTime", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 8));
  if ((*((_WORD *)this + 44) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "wristOrientation", *((_DWORD *)this + 20));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsModelOutput::readFrom(CMMsl::GaitEventsModelOutput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 44) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 84) = v21;
              goto LABEL_119;
            case 2u:
              *((_WORD *)this + 44) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 3u:
              *((_WORD *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 4u:
              *((_WORD *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 5u:
              *((_WORD *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 6u:
              *((_WORD *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 7u:
              *((_WORD *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 8u:
              *((_WORD *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_74;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_103;
            case 9u:
              *((_WORD *)this + 44) |= 0x200u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v47 = v23++;
                  char v48 = *(unsigned char *)(v24 + v47);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_107;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *((_DWORD *)this + 19) = v27;
              goto LABEL_119;
            case 0xAu:
              *((_WORD *)this + 44) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *((_WORD *)this + 44) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *((_WORD *)this + 44) |= 0x400u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v51 = v33++;
                  char v52 = *(unsigned char *)(v34 + v51);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *((_DWORD *)this + 20) = v37;
              goto LABEL_119;
            case 0xDu:
              *((_WORD *)this + 44) |= 0x100u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v55 = v39++;
                  char v56 = *(unsigned char *)(v40 + v55);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *((_DWORD *)this + 18) = v43;
LABEL_119:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *((_WORD *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_103:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsModelOutput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 88);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 84), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 9u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 85), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 86), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xDu);
    if ((*(_WORD *)(v3 + 88) & 4) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(a2, v5, 0xEu);
}

BOOL CMMsl::GaitEventsModelOutput::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 88);
  __int16 v3 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x800) == 0 || *(unsigned __int8 *)(a1 + 84) != *(unsigned __int8 *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x800) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 48) != *(double *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 40) != *(double *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x200) == 0 || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x1000) == 0 || *(unsigned __int8 *)(a1 + 85) != *(unsigned __int8 *)(a2 + 85)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x1000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x2000) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x2000) == 0 || *(unsigned __int8 *)(a1 + 86) != *(unsigned __int8 *)(a2 + 86)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x2000) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x400) == 0 || *(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x400) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 88) & 0x100) == 0 || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 88) & 0x100) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::GaitEventsModelOutput::hash_value(CMMsl::GaitEventsModelOutput *this)
{
  __int16 v1 = *((_WORD *)this + 44);
  if ((v1 & 0x800) == 0)
  {
    uint64_t v2 = 0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_37:
    double v7 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_18;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_39:
    double v9 = 0.0;
    if ((*((_WORD *)this + 44) & 0x200) != 0) {
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  uint64_t v2 = *((unsigned __int8 *)this + 84);
  if ((v1 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 6);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_37;
  }
LABEL_15:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_38;
  }
LABEL_18:
  double v8 = *((double *)this + 8);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_39;
  }
LABEL_21:
  double v9 = *((double *)this + 7);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 44) & 0x200) != 0)
  {
LABEL_24:
    uint64_t v10 = *((unsigned int *)this + 19);
    if ((*((_WORD *)this + 44) & 0x1000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v10 = 0;
  if ((*((_WORD *)this + 44) & 0x1000) != 0)
  {
LABEL_25:
    uint64_t v11 = *((unsigned __int8 *)this + 85);
    if ((*((_WORD *)this + 44) & 0x2000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 44) & 0x2000) != 0)
  {
LABEL_26:
    uint64_t v12 = *((unsigned __int8 *)this + 86);
    if ((*((_WORD *)this + 44) & 0x400) != 0) {
      goto LABEL_27;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 44) & 0x400) != 0)
  {
LABEL_27:
    uint64_t v13 = *((int *)this + 20);
    if ((*((_WORD *)this + 44) & 0x100) != 0) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 44) & 0x100) != 0)
  {
LABEL_28:
    uint64_t v14 = *((int *)this + 18);
    if ((v1 & 4) != 0) {
      goto LABEL_29;
    }
LABEL_45:
    double v15 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
  }
LABEL_44:
  uint64_t v14 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_45;
  }
LABEL_29:
  double v15 = *((double *)this + 3);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ *(void *)&v15;
}

uint64_t CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t this)
{
  *(void *)this = off_1003A5D70;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A5D70;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void CMMsl::GaitEventsStrideAggregation::~GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(CMMsl::GaitEventsStrideAggregation *this, const CMMsl::GaitEventsStrideAggregation *a2)
{
  *(void *)this = off_1003A5D70;
  *((_DWORD *)this + 12) = 0;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    char v4 = *((unsigned char *)a2 + 44);
    char v3 = 32;
    *((unsigned char *)this + 48) = 32;
    *((unsigned char *)this + 44) = v4;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 48))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    v3 |= 1u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 48) = v3;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *((double *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 48) = v3;
  *((double *)this + 3) = result;
  char v2 = *((unsigned char *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_14:
    double result = *((double *)a2 + 4);
    *((unsigned char *)this + 48) = v3 | 8;
    *((double *)this + 4) = result;
    return result;
  }
LABEL_13:
  int v6 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((unsigned char *)this + 48) = v3;
  *((_DWORD *)this + 10) = v6;
  if ((*((unsigned char *)a2 + 48) & 8) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, const CMMsl::GaitEventsStrideAggregation *a2)
{
  if ((const CMMsl::GaitEventsStrideAggregation *)a1 != a2)
  {
    CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation((CMMsl::GaitEventsStrideAggregation *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v13;
    int v13 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v12;
    char v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v10;
    long long v9 = v4;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GaitEventsStrideAggregation *a2, CMMsl::GaitEventsStrideAggregation *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  int v7 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v7;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  return result;
}

double CMMsl::GaitEventsStrideAggregation::GaitEventsStrideAggregation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5D70;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5D70;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

uint64_t CMMsl::GaitEventsStrideAggregation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v13 = off_1003A5D70;
    int v3 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    char v4 = *(unsigned char *)(a2 + 44);
    int v5 = *(_DWORD *)(a2 + 40);
    int v18 = *(_DWORD *)(a1 + 48);
    char v6 = *(unsigned char *)(a1 + 44);
    *(unsigned char *)(a1 + 44) = v4;
    char v17 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    long long v8 = *(_OWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v5;
    int v16 = v9;
    long long v10 = *(_OWORD *)(a1 + 24);
    long long v11 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v11;
    long long v14 = v7;
    long long v15 = v10;
    PB::Base::~Base((PB::Base *)&v13);
  }
  return a1;
}

uint64_t CMMsl::GaitEventsStrideAggregation::formatText(CMMsl::GaitEventsStrideAggregation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "groundContactTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "initialContactTime", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "isSuccessful", *((unsigned char *)this + 44));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "stepSide", *((_DWORD *)this + 10));
  char v5 = *((unsigned char *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "toeOffTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 48) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "windowStartTime", *((double *)this + 4));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GaitEventsStrideAggregation::readFrom(CMMsl::GaitEventsStrideAggregation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 48) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 44) = v21;
              goto LABEL_61;
            case 2u:
              *((unsigned char *)this + 48) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_55;
            case 3u:
              *((unsigned char *)this + 48) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_55;
            case 4u:
              *((unsigned char *)this + 48) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_44;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_55;
            case 5u:
              *((unsigned char *)this + 48) |= 0x10u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_60;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_59;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *((_DWORD *)this + 10) = v27;
LABEL_61:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((unsigned char *)this + 48) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_55:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_61;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_61;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GaitEventsStrideAggregation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 48);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 44), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 5u);
    if ((*(unsigned char *)(v3 + 48) & 8) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(a2, v5, 6u);
}

BOOL CMMsl::GaitEventsStrideAggregation::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 48) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 44) != *(unsigned __int8 *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x20) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if ((*(unsigned char *)(a2 + 48) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 48) & 0x10) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 48) & 8) == 0;
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
    return (*(unsigned char *)(a2 + 48) & 8) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::GaitEventsStrideAggregation::hash_value(CMMsl::GaitEventsStrideAggregation *this)
{
  if ((*((unsigned char *)this + 48) & 0x20) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 48)) {
      goto LABEL_3;
    }
LABEL_17:
    double v2 = 0.0;
    if ((*((unsigned char *)this + 48) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 48) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 48) & 0x10) != 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  uint64_t v1 = *((unsigned __int8 *)this + 44);
  if ((*((unsigned char *)this + 48) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 2) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 48) & 0x10) != 0)
  {
LABEL_12:
    uint64_t v5 = *((unsigned int *)this + 10);
    if ((*((unsigned char *)this + 48) & 8) != 0) {
      goto LABEL_13;
    }
LABEL_21:
    double v6 = 0.0;
    return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6;
  }
LABEL_20:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 48) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_13:
  double v6 = *((double *)this + 4);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3 ^ *(void *)&v4 ^ v5 ^ *(void *)&v6;
}

uint64_t CMMsl::GeomagneticData::GeomagneticData(uint64_t this)
{
  *(void *)this = off_1003A5DA8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A5DA8;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void CMMsl::GeomagneticData::~GeomagneticData(CMMsl::GeomagneticData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GeomagneticData::GeomagneticData(CMMsl::GeomagneticData *this, const CMMsl::GeomagneticData *a2)
{
  *(void *)this = off_1003A5DA8;
  *((_DWORD *)this + 13) = 0;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x20) != 0)
  {
    float result = *((float *)a2 + 7);
    __int16 v3 = 32;
    *((_WORD *)this + 26) = 32;
    *((float *)this + 7) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 8);
    v3 |= 0x40u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 8) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
  }
LABEL_6:
  if (v2)
  {
    float result = *((float *)a2 + 2);
    v3 |= 1u;
    *((_WORD *)this + 26) = v3;
    *((float *)this + 2) = result;
    __int16 v2 = *((_WORD *)a2 + 26);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 3);
  v3 |= 2u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 3) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *((float *)a2 + 10);
  v3 |= 0x100u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 10) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *((float *)a2 + 11);
  v3 |= 0x200u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 11) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *((float *)a2 + 12);
  v3 |= 0x400u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 12) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *((float *)a2 + 9);
  v3 |= 0x80u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 9) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 5) = result;
  __int16 v2 = *((_WORD *)a2 + 26);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    float result = *((float *)a2 + 6);
    *((_WORD *)this + 26) = v3 | 0x10;
    *((float *)this + 6) = result;
    return result;
  }
LABEL_23:
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((_WORD *)this + 26) = v3;
  *((float *)this + 4) = result;
  if ((*((_WORD *)a2 + 26) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, const CMMsl::GeomagneticData *a2)
{
  if (a1 != a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((CMMsl::GeomagneticData *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GeomagneticData *a2, CMMsl::GeomagneticData *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  int v6 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  int v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  int v9 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v9;
  int v10 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v10;
  int v11 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v11;
  int v12 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v12;
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GeomagneticData::GeomagneticData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5DA8;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

CMMsl *CMMsl::GeomagneticData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GeomagneticData::GeomagneticData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GeomagneticData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GeomagneticData::formatText(CMMsl::GeomagneticData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 26);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((float *)this + 2));
    __int16 v5 = *((_WORD *)this + 26);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "decimalYear", *((float *)this + 3));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "declination", *((float *)this + 4));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "horizontal", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "inclination", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "latitude", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "longitude", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "magnitude", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "x", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 26);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "y", *((float *)this + 11));
  if ((*((_WORD *)this + 26) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 12));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GeomagneticData::readFrom(CMMsl::GeomagneticData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 26) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 2u:
          *((_WORD *)this + 26) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 3u:
          *((_WORD *)this + 26) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 4u:
          *((_WORD *)this + 26) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 5u:
          *((_WORD *)this + 26) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 6u:
          *((_WORD *)this + 26) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 7u:
          *((_WORD *)this + 26) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 8u:
          *((_WORD *)this + 26) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 9u:
          *((_WORD *)this + 26) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 0xAu:
          *((_WORD *)this + 26) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_54;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_58;
        case 0xBu:
          *((_WORD *)this + 26) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_58:
            unint64_t v2 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_54:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GeomagneticData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 52);
  if ((v4 & 0x20) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 28), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 4u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 7u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 8u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(float *)(v3 + 16), 0xAu);
    if ((*(_WORD *)(v3 + 52) & 0x10) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 9u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 0xBu);
}

BOOL CMMsl::GeomagneticData::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 52);
  __int16 v3 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x100) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x200) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 52) & 0x400) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x10) == 0;
  if ((v2 & 0x10) != 0) {
    return (v3 & 0x10) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v4;
}

uint64_t CMMsl::GeomagneticData::hash_value(CMMsl::GeomagneticData *this)
{
  __int16 v1 = *((_WORD *)this + 26);
  if ((v1 & 0x20) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v4 = 0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_37:
    uint64_t v6 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_38:
    uint64_t v8 = 0;
    if ((*((_WORD *)this + 26) & 0x100) != 0) {
      goto LABEL_12;
    }
LABEL_39:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 26) & 0x200) != 0) {
      goto LABEL_15;
    }
LABEL_40:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 26) & 0x400) != 0) {
      goto LABEL_18;
    }
LABEL_41:
    uint64_t v14 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_21;
    }
LABEL_42:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_43:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
  float v23 = *((float *)this + 7);
  uint64_t v2 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v2 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_36;
  }
LABEL_3:
  float v3 = *((float *)this + 8);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_6:
  float v5 = *((float *)this + 2);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_38;
  }
LABEL_9:
  float v7 = *((float *)this + 3);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x200) == 0) {
    goto LABEL_40;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 26) & 0x400) == 0) {
    goto LABEL_41;
  }
LABEL_18:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_21:
  float v15 = *((float *)this + 9);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_43;
  }
LABEL_24:
  float v17 = *((float *)this + 5);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 4) != 0)
  {
LABEL_27:
    float v19 = *((float *)this + 4);
    uint64_t v20 = LODWORD(v19);
    if (v19 == 0.0) {
      uint64_t v20 = 0;
    }
    if ((v1 & 0x10) != 0) {
      goto LABEL_30;
    }
LABEL_45:
    uint64_t v22 = 0;
    return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
  }
LABEL_44:
  uint64_t v20 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_30:
  float v21 = *((float *)this + 6);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  return v4 ^ v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t this)
{
  *(void *)this = off_1003A5DE0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A5DE0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GnssAvailabilityPredictorData::~GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(CMMsl::GnssAvailabilityPredictorData *this, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  *(void *)this = off_1003A5DE0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    char v3 = 2;
    *((unsigned char *)this + 32) = 2;
    *((double *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 8u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 32) = v3 | 1;
    *((double *)this + 1) = result;
    return result;
  }
  int v6 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 6) = v6;
  if (*((unsigned char *)a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, const CMMsl::GnssAvailabilityPredictorData *a2)
{
  if ((const CMMsl::GnssAvailabilityPredictorData *)a1 != a2)
  {
    CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData((CMMsl::GnssAvailabilityPredictorData *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssAvailabilityPredictorData *a2, CMMsl::GnssAvailabilityPredictorData *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::GnssAvailabilityPredictorData::GnssAvailabilityPredictorData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5DE0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A5DE0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A5DE0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::formatText(CMMsl::GnssAvailabilityPredictorData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "measSource", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "stateProbability", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssAvailabilityPredictorData::readFrom(CMMsl::GnssAvailabilityPredictorData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_43;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_59;
            case 2u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *((_DWORD *)this + 7) = v25;
              goto LABEL_70;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *((_DWORD *)this + 6) = v31;
LABEL_70:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_59:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::GnssAvailabilityPredictorData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 1) == 0;
  if (*(unsigned char *)(a1 + 32)) {
    return (*(unsigned char *)(a2 + 32) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::GnssAvailabilityPredictorData::hash_value(CMMsl::GnssAvailabilityPredictorData *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    double v1 = *((double *)this + 2);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 7);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 6);
    if (*((unsigned char *)this + 32)) {
      goto LABEL_5;
    }
LABEL_13:
    double v4 = 0.0;
    return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
  }
LABEL_12:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_5:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ *(void *)&v4;
}

double CMMsl::GnssLeechLocationData::GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  *(void *)this = off_1003A5E18;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5E18;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 17) = 0;
  return result;
}

void CMMsl::GnssLeechLocationData::~GnssLeechLocationData(CMMsl::GnssLeechLocationData *this)
{
  *(void *)this = off_1003A5E18;
  uint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 120);
  sub_100274A84(&v3);
  uint64_t v3 = (void **)((char *)this + 96);
  sub_100274A84(&v3);
  uint64_t v3 = (void **)((char *)this + 72);
  sub_100274A84(&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  sub_100274A84(&v3);
  uint64_t v3 = v2;
  sub_100274A84(&v3);
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GnssLeechLocationData::~GnssLeechLocationData(this);

  operator delete();
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t this, const CMMsl::GnssLeechLocationData *a2)
{
  *(void *)this = off_1003A5E18;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  *(_OWORD *)(this + 120) = 0u;
  *(_DWORD *)(this + 152) = 0;
  *(_OWORD *)(this + 40) = 0u;
  *(_OWORD *)(this + 56) = 0u;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(void *)(this + 136) = 0;
  if ((*((unsigned char *)a2 + 152) & 4) != 0)
  {
    uint64_t v2 = *((void *)a2 + 18);
    *(unsigned char *)(this + 152) = 4;
    *(void *)(this + 144) = v2;
  }
  if (*((void *)a2 + 12) != *((void *)a2 + 13)) {
    sub_1000EA9F0();
  }
  if (*((void *)a2 + 9) != *((void *)a2 + 10)) {
    sub_1000EA9F0();
  }
  if (*((void *)a2 + 15) != *((void *)a2 + 16)) {
    sub_1000EA9F0();
  }
  if (*((void *)a2 + 6) != *((void *)a2 + 7)) {
    sub_1000EA9F0();
  }
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    sub_1000EA9F0();
  }
  char v3 = *((unsigned char *)a2 + 152);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    *(unsigned char *)(this + 152) |= 2u;
    *(void *)(this + 16) = v4;
    char v3 = *((unsigned char *)a2 + 152);
  }
  if (v3)
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(unsigned char *)(this + 152) |= 1u;
    *(void *)(this + 8) = v5;
  }
  return this;
}

void sub_1000EA9F0()
{
}

void sub_1000EAAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, const CMMsl::GnssLeechLocationData *a2)
{
  if (a1 != a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GnssLeechLocationData *a2, CMMsl::GnssLeechLocationData *a3)
{
  int v3 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  uint64_t v4 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v4;
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v6;
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v7;
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v8;
  uint64_t v9 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v9;
  uint64_t v10 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v10;
  uint64_t v11 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v11;
  uint64_t v12 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v12;
  uint64_t v13 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  uint64_t v15 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v15;
  uint64_t v16 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v16;
  uint64_t v17 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  uint64_t v20 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v20;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::GnssLeechLocationData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5E18;
  uint64_t v4 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 120) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v7 = (_OWORD *)(a1 + 72);
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  sub_100274B44((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  sub_100274B44((void **)(a1 + 72));
  *uint64_t v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  sub_100274B44((void **)(a1 + 120));
  *uint64_t v6 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  sub_100274B44(v4);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_100274B44((void **)(a1 + 24));
  *uint64_t v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  return a1;
}

CMMsl *CMMsl::GnssLeechLocationData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GnssLeechLocationData::GnssLeechLocationData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GnssLeechLocationData *)v5, v3);
    CMMsl::GnssLeechLocationData::~GnssLeechLocationData((CMMsl::GnssLeechLocationData *)v5);
  }
  return a1;
}

uint64_t CMMsl::GnssLeechLocationData::formatText(CMMsl::GnssLeechLocationData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 152);
  if (v5)
  {
    PB::TextFormatter::format(a2, "lifespan", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 152);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "machTime", *((double *)this + 2));
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 3);
  uint64_t v7 = (uint64_t *)*((void *)this + 4);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "satInfoBeidou");
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 6);
  uint64_t v10 = (uint64_t *)*((void *)this + 7);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "satInfoGalileo");
  }
  uint64_t v12 = (uint64_t *)*((void *)this + 9);
  uint64_t v13 = (uint64_t *)*((void *)this + 10);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "satInfoGlonass");
  }
  uint64_t v15 = (uint64_t *)*((void *)this + 12);
  uint64_t v16 = (uint64_t *)*((void *)this + 13);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "satInfoGps");
  }
  uint64_t v18 = (uint64_t *)*((void *)this + 15);
  uint64_t v19 = (uint64_t *)*((void *)this + 16);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, a2, "satInfoQzss");
  }
  if ((*((unsigned char *)this + 152) & 4) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 18));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GnssLeechLocationData::readFrom(CMMsl::GnssLeechLocationData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 152) |= 4u;
              unint64_t v20 = *((void *)a2 + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
                goto LABEL_37;
              }
              *((void *)this + 18) = *(void *)(*(void *)a2 + v20);
              goto LABEL_39;
            case 2u:
              sub_1000EB3AC();
            case 3u:
              sub_1000EB3AC();
            case 4u:
              sub_1000EB3AC();
            case 5u:
              sub_1000EB3AC();
            case 6u:
              sub_1000EB3AC();
            case 7u:
              *((unsigned char *)this + 152) |= 2u;
              unint64_t v23 = *((void *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
                goto LABEL_37;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v23);
              goto LABEL_39;
            case 8u:
              *((unsigned char *)this + 152) |= 1u;
              unint64_t v21 = *((void *)a2 + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2))
              {
LABEL_37:
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v21);
LABEL_39:
                *((void *)a2 + 1) += 8;
              }
LABEL_40:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_40;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

void sub_1000EB3AC()
{
}

void sub_1000EB4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GnssLeechLocationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 152) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 144), 1u);
  }
  int v4 = *(const PB::Base ***)(v3 + 96);
  char v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 2u);
  }
  uint64_t v7 = *(const PB::Base ***)(v3 + 72);
  uint64_t v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    char v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9, 3u);
  }
  unsigned int v10 = *(const PB::Base ***)(v3 + 120);
  unint64_t v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    this = PB::Writer::writeSubmessage(a2, v12, 4u);
  }
  char v13 = *(const PB::Base ***)(v3 + 48);
  uint64_t v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    char v15 = *v13++;
    this = PB::Writer::writeSubmessage(a2, v15, 5u);
  }
  unsigned int v16 = *(const PB::Base ***)(v3 + 24);
  unint64_t v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    char v18 = *v16++;
    this = PB::Writer::writeSubmessage(a2, v18, 6u);
  }
  char v19 = *(unsigned char *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
    char v19 = *(unsigned char *)(v3 + 152);
  }
  if (v19)
  {
    double v20 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v20, 8u);
  }
  return this;
}

BOOL CMMsl::GnssLeechLocationData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 152) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 152) & 4) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 152) & 4) != 0)
  {
    return 0;
  }
  BOOL result = sub_1000EB728((uint64_t *)(a1 + 96), a2 + 96);
  if (result)
  {
    BOOL result = sub_1000EB728((uint64_t *)(a1 + 72), a2 + 72);
    if (result)
    {
      BOOL result = sub_1000EB728((uint64_t *)(a1 + 120), a2 + 120);
      if (result)
      {
        BOOL result = sub_1000EB728((uint64_t *)(a1 + 48), a2 + 48);
        if (result)
        {
          BOOL result = sub_1000EB728((uint64_t *)(a1 + 24), a2 + 24);
          if (result)
          {
            if ((*(unsigned char *)(a1 + 152) & 2) != 0)
            {
              if ((*(unsigned char *)(a2 + 152) & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
                return 0;
              }
            }
            else if ((*(unsigned char *)(a2 + 152) & 2) != 0)
            {
              return 0;
            }
            BOOL result = (*(unsigned char *)(a2 + 152) & 1) == 0;
            if ((*(unsigned char *)(a1 + 152) & 1) == 0) {
              return result;
            }
            return (*(unsigned char *)(a2 + 152) & 1) != 0 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1000EB728(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::SatelliteInfo::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GnssLeechLocationData::hash_value(CMMsl::GnssLeechLocationData *this)
{
  char v2 = *((unsigned char *)this + 152);
  if ((v2 & 4) != 0)
  {
    if (*((double *)this + 18) == 0.0) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 18);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = (CMMsl::SatelliteInfo **)*((void *)this + 12);
  uint64_t v5 = (CMMsl::SatelliteInfo **)*((void *)this + 13);
  if (v4 == v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 ^= CMMsl::SatelliteInfo::hash_value(v7);
    }
    while (v4 != v5);
  }
  BOOL v8 = (CMMsl::SatelliteInfo **)*((void *)this + 9);
  char v9 = (CMMsl::SatelliteInfo **)*((void *)this + 10);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = *v8++;
      v10 ^= CMMsl::SatelliteInfo::hash_value(v11);
    }
    while (v8 != v9);
  }
  unint64_t v12 = (CMMsl::SatelliteInfo **)*((void *)this + 15);
  char v13 = (CMMsl::SatelliteInfo **)*((void *)this + 16);
  if (v12 == v13)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      char v15 = *v12++;
      v14 ^= CMMsl::SatelliteInfo::hash_value(v15);
    }
    while (v12 != v13);
  }
  unsigned int v16 = (CMMsl::SatelliteInfo **)*((void *)this + 6);
  unint64_t v17 = (CMMsl::SatelliteInfo **)*((void *)this + 7);
  if (v16 == v17)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      char v19 = *v16++;
      v18 ^= CMMsl::SatelliteInfo::hash_value(v19);
    }
    while (v16 != v17);
  }
  double v20 = (CMMsl::SatelliteInfo **)*((void *)this + 3);
  unint64_t v21 = (CMMsl::SatelliteInfo **)*((void *)this + 4);
  if (v20 == v21)
  {
    uint64_t v22 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_30;
    }
LABEL_35:
    double v24 = *((double *)this + 2);
    if (v24 == 0.0) {
      double v24 = 0.0;
    }
    if (v2) {
      goto LABEL_31;
    }
LABEL_38:
    double v25 = 0.0;
    return v6 ^ v3 ^ v10 ^ v14 ^ *(void *)&v24 ^ *(void *)&v25 ^ v18 ^ v22;
  }
  uint64_t v22 = 0;
  do
  {
    unint64_t v23 = *v20++;
    v22 ^= CMMsl::SatelliteInfo::hash_value(v23);
  }
  while (v20 != v21);
  if ((v2 & 2) != 0) {
    goto LABEL_35;
  }
LABEL_30:
  double v24 = 0.0;
  if ((v2 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_31:
  double v25 = *((double *)this + 1);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  return v6 ^ v3 ^ v10 ^ v14 ^ *(void *)&v24 ^ *(void *)&v25 ^ v18 ^ v22;
}

uint64_t CMMsl::GravityConstraints::GravityConstraints(uint64_t this)
{
  *(void *)this = off_1003A5E50;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A5E50;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::GravityConstraints::~GravityConstraints(CMMsl::GravityConstraints *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GravityConstraints::GravityConstraints(CMMsl::GravityConstraints *this, const CMMsl::GravityConstraints *a2)
{
  *(void *)this = off_1003A5E50;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 7) = v4;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 4) = v4;
  if ((*((unsigned char *)a2 + 32) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 32) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, const CMMsl::GravityConstraints *a2)
{
  if ((const CMMsl::GravityConstraints *)a1 != a2)
  {
    CMMsl::GravityConstraints::GravityConstraints((CMMsl::GravityConstraints *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GravityConstraints *a2, CMMsl::GravityConstraints *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GravityConstraints::GravityConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5E50;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A5E50;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GravityConstraints::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A5E50;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GravityConstraints::formatText(CMMsl::GravityConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "gyroMaxMean", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "magnitudeDiffUnity", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "magnitudeVar", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "maxAccelStdAxis", *((float *)this + 7));
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityConstraints::readFrom(CMMsl::GravityConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_41;
        case 2u:
          *((unsigned char *)this + 32) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 3u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_38;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_40;
        case 5u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_40:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_41:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 5u);
}

BOOL CMMsl::GravityConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 8) == 0;
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
    return (*(unsigned char *)(a2 + 32) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::GravityConstraints::hash_value(CMMsl::GravityConstraints *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_19:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v2 = *((float *)this + 7);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_9:
    float v6 = *((float *)this + 4);
    uint64_t v7 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v7 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v9 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9;
  }
LABEL_20:
  uint64_t v7 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this)
{
  *(void *)this = off_1003A5E88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5E88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GravityCorrection::~GravityCorrection(CMMsl::GravityCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5E88;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GravityCorrection::~GravityCorrection(this);

  operator delete();
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t this, const CMMsl::GravityCorrection *a2)
{
  *(void *)this = off_1003A5E88;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    char v2 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) |= 1u;
    *(unsigned char *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, const CMMsl::GravityCorrection *a2)
{
  if ((const CMMsl::GravityCorrection *)a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::GravityCorrection::~GravityCorrection((CMMsl::GravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GravityCorrection *a2, CMMsl::GravityCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v4;
  return this;
}

uint64_t CMMsl::GravityCorrection::GravityCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5E88;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GravityCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GravityCorrection::GravityCorrection((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v4;
    CMMsl::GravityCorrection::~GravityCorrection((CMMsl::GravityCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::GravityCorrection::formatText(CMMsl::GravityCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "isAvgGrav", *((unsigned char *)this + 16));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GravityCorrection::readFrom(CMMsl::GravityCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 16) = v24;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GravityCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::GravityCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
}

unint64_t CMMsl::GravityCorrection::hash_value(CMMsl::GravityCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((unsigned __int8 *)this + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::GravityCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::Gyro::~Gyro(CMMsl::Gyro *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Gyro::Gyro(uint64_t this, const CMMsl::Gyro *a2)
{
  *(void *)this = off_1003A5EC0;
  *(_DWORD *)(this + 44) = 0;
  __int16 v2 = *((_WORD *)a2 + 22);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 44) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 22);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *(_WORD *)(this + 44) = v3;
    *(_DWORD *)(this + 32) = v6;
    __int16 v2 = *((_WORD *)a2 + 22);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 36) = v7;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 24) = v8;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(_WORD *)(this + 44) = v3;
  *(_DWORD *)(this + 20) = v9;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(this + 44) = v3;
  *(unsigned char *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 22);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 4);
    *(_WORD *)(this + 44) = v3 | 2;
    *(_DWORD *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  char v11 = *((unsigned char *)a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(this + 44) = v3;
  *(unsigned char *)(this + 41) = v11;
  if ((*((_WORD *)a2 + 22) & 2) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, const CMMsl::Gyro *a2)
{
  if ((const CMMsl::Gyro *)a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v15;
    uint64_t v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v4;
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v5;
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v8;
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    int v14 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v17;
    char v17 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v18;
    char v18 = v9;
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Gyro *a2, CMMsl::Gyro *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 41);
  *((unsigned char *)this + 41) = *((unsigned char *)a2 + 41);
  *((unsigned char *)a2 + 41) = v7;
  int v8 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return result;
}

float CMMsl::Gyro::Gyro(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5EC0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Gyro::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::Gyro::Gyro((uint64_t)&v11, a2);
    uint64_t v3 = *(void *)(a1 + 28);
    *(void *)(a1 + 28) = v15;
    uint64_t v15 = v3;
    int v4 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v4;
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v5;
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v19;
    int v19 = v8;
    int v9 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v14;
    int v14 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v17;
    char v17 = v9;
    LOBYTE(v9) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v18;
    char v18 = v9;
    uint64_t v12 = v6;
    uint64_t v13 = v7;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

uint64_t CMMsl::Gyro::formatText(CMMsl::Gyro *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    __int16 v5 = *((_WORD *)this + 22);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNumMod3", *((_DWORD *)this + 5));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "subType", *((_DWORD *)this + 6));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "triggerEnabled", *((unsigned char *)this + 40));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "triggerOn", *((unsigned char *)this + 41));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "x", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 22);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "y", *((float *)this + 8));
  if ((*((_WORD *)this + 22) & 0x40) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 9));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Gyro::readFrom(CMMsl::Gyro *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 22) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_88;
            case 2u:
              *((_WORD *)this + 22) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_87;
            case 3u:
              *((_WORD *)this + 22) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_87;
            case 4u:
              *((_WORD *)this + 22) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_87:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_88:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((_WORD *)this + 22) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v45 = v21++;
                  char v46 = *(unsigned char *)(v22 + v45);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_104;
            case 6u:
              *((_WORD *)this + 22) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v49 = v27++;
                  char v50 = *(unsigned char *)(v28 + v49);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_97;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_104;
            case 7u:
              *((_WORD *)this + 22) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 40) = v34;
              goto LABEL_104;
            case 8u:
              *((_WORD *)this + 22) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 41) = v36;
              goto LABEL_104;
            case 9u:
              *((_WORD *)this + 22) |= 2u;
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v38 = *(void *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v53 = v37++;
                  char v54 = *(unsigned char *)(v38 + v53);
                  *((void *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_102;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *((_DWORD *)this + 4) = v41;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Gyro::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 4u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 5u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 6u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 41), 8u);
    if ((*(_WORD *)(v3 + 44) & 2) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_19:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 9u);
}

uint64_t CMMsl::Gyro::hash_value(CMMsl::Gyro *this)
{
  __int16 v1 = *((_WORD *)this + 22);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v4 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_21:
    uint64_t v6 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_22:
    uint64_t v8 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_3:
  float v3 = *((float *)this + 7);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  float v5 = *((float *)this + 8);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  float v7 = *((float *)this + 9);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 8) != 0)
  {
LABEL_12:
    uint64_t v9 = *((unsigned int *)this + 6);
    if ((v1 & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v9 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned int *)this + 5);
    if ((v1 & 0x80) != 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 22) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t v12 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_16;
    }
LABEL_27:
    uint64_t v13 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_25:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 22) & 0x100) == 0) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v12 = *((unsigned __int8 *)this + 41);
  if ((v1 & 2) == 0) {
    goto LABEL_27;
  }
LABEL_16:
  uint64_t v13 = *((int *)this + 4);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this)
{
  *(void *)this = off_1003A5EF8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A5EF8;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroBiasAndVariance::~GyroBiasAndVariance(CMMsl::GyroBiasAndVariance *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t this, const CMMsl::GyroBiasAndVariance *a2)
{
  *(void *)this = off_1003A5EF8;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    int v4 = *((_DWORD *)a2 + 2);
    char v3 = 1;
    *(unsigned char *)(this + 36) = 1;
    *(_DWORD *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 3);
    v3 |= 2u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 12) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 16) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 24) = v7;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x20u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v8;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return this;
    }
LABEL_16:
    int v10 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 36) = v3 | 8;
    *(_DWORD *)(this + 20) = v10;
    return this;
  }
LABEL_15:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x40u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v9;
  if ((*((unsigned char *)a2 + 36) & 8) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, const CMMsl::GyroBiasAndVariance *a2)
{
  if ((const CMMsl::GyroBiasAndVariance *)a1 != a2)
  {
    CMMsl::GyroBiasAndVariance::GyroBiasAndVariance((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v11;
    uint64_t v11 = v4;
    int v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v12;
    int v12 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v14;
    uint64_t v14 = v6;
    int v7 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    int v15 = v7;
    int v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v13;
    int v13 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasAndVariance *a2, CMMsl::GyroBiasAndVariance *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  int v10 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v10;
  return result;
}

float CMMsl::GyroBiasAndVariance::GyroBiasAndVariance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5EF8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A5EF8;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::GyroBiasAndVariance::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v13[0] = off_1003A5EF8;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    int v4 = *(_DWORD *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 32);
    int v6 = *(_DWORD *)(a2 + 20);
    int v18 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = *(void *)(a2 + 8);
    v13[1] = *(void *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v9;
    uint64_t v16 = v8;
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    int v17 = v10;
    int v11 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v6;
    int v15 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasAndVariance::formatText(CMMsl::GyroBiasAndVariance *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if (v5)
  {
    PB::TextFormatter::format(a2, "biasX", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "biasY", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "biasZ", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doingBiasEstimation", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "varianceX", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "varianceY", *((float *)this + 7));
  if ((*((unsigned char *)this + 36) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "varianceZ", *((float *)this + 8));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasAndVariance::readFrom(CMMsl::GyroBiasAndVariance *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_57;
            case 2u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_57;
            case 3u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_57;
            case 4u:
              *((unsigned char *)this + 36) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_57;
            case 5u:
              *((unsigned char *)this + 36) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_41;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_57;
            case 6u:
              *((unsigned char *)this + 36) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_57:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_41:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_62;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_61;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_62;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *((_DWORD *)this + 5) = v25;
LABEL_63:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_63;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasAndVariance::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
    if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(a2, v5, 7u);
}

BOOL CMMsl::GyroBiasAndVariance::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x20) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x40) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x40) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x40) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 8) == 0;
  if ((*(unsigned char *)(a1 + 36) & 8) != 0) {
    return (*(unsigned char *)(a2 + 36) & 8) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroBiasAndVariance::hash_value(CMMsl::GyroBiasAndVariance *this)
{
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_22:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_24:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_25:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 36) & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  float v13 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_22;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_23;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_24;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_12:
  float v8 = *((float *)this + 7);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x40) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 8);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_27:
    uint64_t v12 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
  }
LABEL_26:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_27;
  }
LABEL_18:
  uint64_t v12 = *((int *)this + 5);
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v12;
}

double CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  *(void *)this = off_1003A5F30;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5F30;
  *((_DWORD *)this + 29) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::GyroBiasConstraints::~GyroBiasConstraints(CMMsl::GyroBiasConstraints *this)
{
  *(void *)this = off_1003A5F30;
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasConstraints::~GyroBiasConstraints(this);

  operator delete();
}

CMMsl::GyroBiasConstraints *CMMsl::GyroBiasConstraints::GyroBiasConstraints(CMMsl::GyroBiasConstraints *this, const CMMsl::GyroBiasConstraints *a2)
{
  *(void *)this = off_1003A5F30;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *((_DWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  char v6 = *((unsigned char *)a2 + 116);
  if (v6)
  {
    uint64_t v8 = *((void *)a2 + 13);
    char v7 = 1;
    *((unsigned char *)this + 116) = 1;
    *((void *)this + 13) = v8;
    char v6 = *((unsigned char *)a2 + 116);
    if ((v6 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v7 = 0;
  if ((*((unsigned char *)a2 + 116) & 4) != 0)
  {
LABEL_5:
    char v9 = *((unsigned char *)a2 + 113);
    v7 |= 4u;
    *((unsigned char *)this + 116) = v7;
    *((unsigned char *)this + 113) = v9;
    char v6 = *((unsigned char *)a2 + 116);
  }
LABEL_6:
  if ((v6 & 2) != 0)
  {
    char v10 = *((unsigned char *)a2 + 112);
    *((unsigned char *)this + 116) = v7 | 2;
    *((unsigned char *)this + 112) = v10;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, const CMMsl::GyroBiasConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroBiasConstraints *a2, CMMsl::GyroBiasConstraints *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  LOBYTE(v3) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v3;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v10;
  uint64_t v11 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v16;
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::GyroBiasConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5F30;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

CMMsl *CMMsl::GyroBiasConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasConstraints::GyroBiasConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasConstraints *)v5, v3);
    CMMsl::GyroBiasConstraints::~GyroBiasConstraints((CMMsl::GyroBiasConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasConstraints::formatText(CMMsl::GyroBiasConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accelVariance", v7);
  }
  if ((*((unsigned char *)this + 116) & 2) != 0) {
    PB::TextFormatter::format(a2, "allowRelaxedGyroMean", *((unsigned char *)this + 112));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "gyroMean", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "gyroVariance", v13);
  }
  if ((*((unsigned char *)this + 116) & 4) != 0) {
    PB::TextFormatter::format(a2, "stillOnAll", *((unsigned char *)this + 113));
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "temperatureBias", v16);
  }
  if (*((unsigned char *)this + 116)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasConstraints::readFrom(CMMsl::GyroBiasConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (void **)((char *)this + 80);
    unint64_t v136 = (char *)this + 96;
    uint64_t v137 = (char *)this + 24;
    float v10 = (void **)((char *)this + 56);
    unint64_t v135 = (char *)this + 72;
    uint64_t v11 = (void **)((char *)this + 32);
    uint64_t v12 = (char *)this + 48;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 116) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_204;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_206;
        case 2u:
          *((unsigned char *)this + 116) |= 4u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 >= *((void *)a2 + 2))
          {
            BOOL v31 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v29 = v28 + 1;
            int v30 = *(unsigned __int8 *)(*(void *)a2 + v28);
            *((void *)a2 + 1) = v29;
            BOOL v31 = v30 != 0;
          }
          *((unsigned char *)this + 113) = v31;
          goto LABEL_207;
        case 3u:
          *((unsigned char *)this + 116) |= 2u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 >= *((void *)a2 + 2))
          {
            BOOL v35 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v33 = v32 + 1;
            int v34 = *(unsigned __int8 *)(*(void *)a2 + v32);
            *((void *)a2 + 1) = v33;
            BOOL v35 = v34 != 0;
          }
          *((unsigned char *)this + 112) = v35;
          goto LABEL_207;
        case 4u:
          if (v25 != 2)
          {
            unint64_t v93 = (char *)*((void *)this + 5);
            unint64_t v92 = *((void *)this + 6);
            if ((unint64_t)v93 >= v92)
            {
              uint64_t v101 = (char *)*v11;
              uint64_t v102 = (v93 - (unsigned char *)*v11) >> 2;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62) {
LABEL_215:
              }
                sub_10000EE98();
              uint64_t v104 = v92 - (void)v101;
              if (v104 >> 1 > v103) {
                unint64_t v103 = v104 >> 1;
              }
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v103;
              }
              if (v105)
              {
                uint64_t v106 = (char *)sub_100024458((uint64_t)v12, v105);
                uint64_t v101 = (char *)*((void *)this + 4);
                unint64_t v93 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v106 = 0;
              }
              char v125 = &v106[4 * v102];
              *(_DWORD *)char v125 = 0;
              char v94 = v125 + 4;
              while (v93 != v101)
              {
                int v126 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v125 - 1) = v126;
                v125 -= 4;
              }
              *((void *)this + 4) = v125;
              *((void *)this + 5) = v94;
              *((void *)this + 6) = &v106[4 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v93 = 0;
              char v94 = v93 + 4;
            }
            *((void *)this + 5) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          while (v36 < v37 && !*((unsigned char *)a2 + 24))
          {
            char v39 = (char *)*((void *)this + 5);
            unint64_t v38 = *((void *)this + 6);
            if ((unint64_t)v39 >= v38)
            {
              uint64_t v41 = (char *)*v11;
              uint64_t v42 = (v39 - (unsigned char *)*v11) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                goto LABEL_215;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                char v46 = (char *)sub_100024458((uint64_t)v12, v45);
                uint64_t v41 = (char *)*((void *)this + 4);
                char v39 = (char *)*((void *)this + 5);
              }
              else
              {
                char v46 = 0;
              }
              char v47 = &v46[4 * v42];
              *(_DWORD *)char v47 = 0;
              unsigned int v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *((void *)this + 4) = v47;
              *((void *)this + 5) = v40;
              *((void *)this + 6) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)char v39 = 0;
              unsigned int v40 = v39 + 4;
            }
            *((void *)this + 5) = v40;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
              goto LABEL_128;
            }
            *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
            unint64_t v37 = *((void *)a2 + 2);
            unint64_t v36 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v36;
          }
          goto LABEL_129;
        case 5u:
          if (v25 != 2)
          {
            unsigned int v96 = (char *)*((void *)this + 8);
            unint64_t v95 = *((void *)this + 9);
            if ((unint64_t)v96 >= v95)
            {
              uint64_t v107 = (char *)*v10;
              uint64_t v108 = (v96 - (unsigned char *)*v10) >> 2;
              unint64_t v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 62) {
LABEL_216:
              }
                sub_10000EE98();
              uint64_t v110 = v95 - (void)v107;
              if (v110 >> 1 > v109) {
                unint64_t v109 = v110 >> 1;
              }
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v111 = v109;
              }
              if (v111)
              {
                unint64_t v112 = (char *)sub_100024458((uint64_t)v135, v111);
                uint64_t v107 = (char *)*((void *)this + 7);
                unsigned int v96 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v112 = 0;
              }
              uint64_t v127 = &v112[4 * v108];
              *(_DWORD *)uint64_t v127 = 0;
              char v94 = v127 + 4;
              while (v96 != v107)
              {
                int v128 = *((_DWORD *)v96 - 1);
                v96 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              *((void *)this + 7) = v127;
              *((void *)this + 8) = v94;
              *((void *)this + 9) = &v112[4 * v111];
              if (v107) {
                operator delete(v107);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v96 = 0;
              char v94 = v96 + 4;
            }
            *((void *)this + 8) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v50 = *((void *)a2 + 1);
          unint64_t v51 = *((void *)a2 + 2);
          while (v50 < v51 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v53 = (char *)*((void *)this + 8);
            unint64_t v52 = *((void *)this + 9);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v10;
              uint64_t v56 = (v53 - (unsigned char *)*v10) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
                goto LABEL_216;
              }
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                uint64_t v60 = (char *)sub_100024458((uint64_t)v135, v59);
                unint64_t v55 = (char *)*((void *)this + 7);
                unint64_t v53 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v60 = 0;
              }
              char v61 = &v60[4 * v56];
              *(_DWORD *)char v61 = 0;
              char v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((void *)this + 7) = v61;
              *((void *)this + 8) = v54;
              *((void *)this + 9) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v53 = 0;
              char v54 = v53 + 4;
            }
            *((void *)this + 8) = v54;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
              goto LABEL_128;
            }
            *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
            unint64_t v51 = *((void *)a2 + 2);
            unint64_t v50 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v50;
          }
          goto LABEL_129;
        case 6u:
          if (v25 != 2)
          {
            char v98 = (char *)*((void *)this + 11);
            unint64_t v97 = *((void *)this + 12);
            if ((unint64_t)v98 >= v97)
            {
              char v113 = (char *)*v9;
              uint64_t v114 = (v98 - (unsigned char *)*v9) >> 2;
              unint64_t v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 62) {
LABEL_217:
              }
                sub_10000EE98();
              uint64_t v116 = v97 - (void)v113;
              if (v116 >> 1 > v115) {
                unint64_t v115 = v116 >> 1;
              }
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v117 = v115;
              }
              if (v117)
              {
                unint64_t v118 = (char *)sub_100024458((uint64_t)v136, v117);
                char v113 = (char *)*((void *)this + 10);
                char v98 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v118 = 0;
              }
              char v129 = &v118[4 * v114];
              *(_DWORD *)char v129 = 0;
              char v94 = v129 + 4;
              while (v98 != v113)
              {
                int v130 = *((_DWORD *)v98 - 1);
                v98 -= 4;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *((void *)this + 10) = v129;
              *((void *)this + 11) = v94;
              *((void *)this + 12) = &v118[4 * v117];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *(_DWORD *)char v98 = 0;
              char v94 = v98 + 4;
            }
            *((void *)this + 11) = v94;
            goto LABEL_202;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v64 = *((void *)a2 + 1);
          unint64_t v65 = *((void *)a2 + 2);
          while (v64 < v65 && !*((unsigned char *)a2 + 24))
          {
            char v67 = (char *)*((void *)this + 11);
            unint64_t v66 = *((void *)this + 12);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v69 = (char *)*v9;
              uint64_t v70 = (v67 - (unsigned char *)*v9) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
                goto LABEL_217;
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                char v74 = (char *)sub_100024458((uint64_t)v136, v73);
                uint64_t v69 = (char *)*((void *)this + 10);
                char v67 = (char *)*((void *)this + 11);
              }
              else
              {
                char v74 = 0;
              }
              char v75 = &v74[4 * v70];
              *(_DWORD *)char v75 = 0;
              unsigned int v68 = v75 + 4;
              while (v67 != v69)
              {
                int v76 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v75 - 1) = v76;
                v75 -= 4;
              }
              *((void *)this + 10) = v75;
              *((void *)this + 11) = v68;
              *((void *)this + 12) = &v74[4 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(_DWORD *)char v67 = 0;
              unsigned int v68 = v67 + 4;
            }
            *((void *)this + 11) = v68;
            unint64_t v77 = *((void *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
              goto LABEL_128;
            }
            *(v68 - 1) = *(_DWORD *)(*(void *)a2 + v77);
            unint64_t v65 = *((void *)a2 + 2);
            unint64_t v64 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v64;
          }
          goto LABEL_129;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v78 = *((void *)a2 + 1);
            unint64_t v79 = *((void *)a2 + 2);
            while (v78 < v79 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v81 = (char *)*((void *)this + 2);
              unint64_t v80 = *((void *)this + 3);
              if ((unint64_t)v81 >= v80)
              {
                char v83 = (char *)*v8;
                uint64_t v84 = (v81 - (unsigned char *)*v8) >> 2;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 62) {
                  goto LABEL_218;
                }
                uint64_t v86 = v80 - (void)v83;
                if (v86 >> 1 > v85) {
                  unint64_t v85 = v86 >> 1;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  unsigned int v88 = (char *)sub_100024458((uint64_t)v137, v87);
                  char v83 = (char *)*((void *)this + 1);
                  unint64_t v81 = (char *)*((void *)this + 2);
                }
                else
                {
                  unsigned int v88 = 0;
                }
                unint64_t v89 = &v88[4 * v84];
                *(_DWORD *)unint64_t v89 = 0;
                char v82 = v89 + 4;
                while (v81 != v83)
                {
                  int v90 = *((_DWORD *)v81 - 1);
                  v81 -= 4;
                  *((_DWORD *)v89 - 1) = v90;
                  v89 -= 4;
                }
                *((void *)this + 1) = v89;
                *((void *)this + 2) = v82;
                *((void *)this + 3) = &v88[4 * v87];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v81 = 0;
                char v82 = v81 + 4;
              }
              *((void *)this + 2) = v82;
              unint64_t v91 = *((void *)a2 + 1);
              if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2))
              {
LABEL_128:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v82 - 1) = *(_DWORD *)(*(void *)a2 + v91);
              unint64_t v79 = *((void *)a2 + 2);
              unint64_t v78 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v78;
            }
LABEL_129:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v100 = (char *)*((void *)this + 2);
            unint64_t v99 = *((void *)this + 3);
            if ((unint64_t)v100 >= v99)
            {
              unint64_t v119 = (char *)*v8;
              uint64_t v120 = (v100 - (unsigned char *)*v8) >> 2;
              unint64_t v121 = v120 + 1;
              if ((unint64_t)(v120 + 1) >> 62) {
LABEL_218:
              }
                sub_10000EE98();
              uint64_t v122 = v99 - (void)v119;
              if (v122 >> 1 > v121) {
                unint64_t v121 = v122 >> 1;
              }
              if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v123 = v121;
              }
              if (v123)
              {
                uint64_t v124 = (char *)sub_100024458((uint64_t)v137, v123);
                unint64_t v119 = (char *)*((void *)this + 1);
                uint64_t v100 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v124 = 0;
              }
              unint64_t v131 = &v124[4 * v120];
              *(_DWORD *)unint64_t v131 = 0;
              char v94 = v131 + 4;
              while (v100 != v119)
              {
                int v132 = *((_DWORD *)v100 - 1);
                v100 -= 4;
                *((_DWORD *)v131 - 1) = v132;
                v131 -= 4;
              }
              *((void *)this + 1) = v131;
              *((void *)this + 2) = v94;
              *((void *)this + 3) = &v124[4 * v123];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v100 = 0;
              char v94 = v100 + 4;
            }
            *((void *)this + 2) = v94;
LABEL_202:
            unint64_t v133 = *((void *)a2 + 1);
            if (v133 <= 0xFFFFFFFFFFFFFFFBLL && v133 + 4 <= *((void *)a2 + 2))
            {
              *(v94 - 1) = *(_DWORD *)(*(void *)a2 + v133);
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_206:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_204:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_207:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_207;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 116) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_19:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 113), 2u);
    if ((*(unsigned char *)(v3 + 116) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::write(a2, *(double *)(this + 104), 1u);
  char v4 = *(unsigned char *)(v3 + 116);
  if ((v4 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 112), 3u);
LABEL_5:
  uint64_t v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  uint64_t v8 = *(float **)(v3 + 56);
  uint64_t v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  uint64_t v11 = *(float **)(v3 + 80);
  uint64_t v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  unsigned int v15 = *(float **)(v3 + 8);
  char v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    float v16 = *v15++;
    this = PB::Writer::write(a2, v16, 7u);
  }
  return this;
}

BOOL CMMsl::GyroBiasConstraints::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 116))
  {
    if ((*(unsigned char *)(a2 + 116) & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 116))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 4) == 0 || *(unsigned __int8 *)(a1 + 113) != *(unsigned __int8 *)(a2 + 113)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 116) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 116) & 2) == 0 || *(unsigned __int8 *)(a1 + 112) != *(unsigned __int8 *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 116) & 2) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  char v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  uint64_t v6 = *(float **)(a1 + 56);
  uint64_t v5 = *(float **)(a1 + 64);
  float v7 = *(float **)(a2 + 56);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 64) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  uint64_t v9 = *(float **)(a1 + 80);
  uint64_t v8 = *(float **)(a1 + 88);
  float v10 = *(float **)(a2 + 80);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 88) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  float v13 = *(float **)(a2 + 8);
  if (v11 - v12 != *(void *)(a2 + 16) - (void)v13) {
    return 0;
  }
  if (v12 == v11) {
    return 1;
  }
  uint64_t v14 = v12 + 4;
  do
  {
    float v15 = *v13++;
    BOOL result = *(float *)(v14 - 4) == v15;
    BOOL v17 = *(float *)(v14 - 4) != v15 || v14 == v11;
    v14 += 4;
  }
  while (!v17);
  return result;
}

uint64_t CMMsl::GyroBiasConstraints::hash_value(CMMsl::GyroBiasConstraints *this)
{
  if ((*((unsigned char *)this + 116) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 116) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 116) & 2) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    goto LABEL_10;
  }
  double v1 = *((double *)this + 13);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 116) & 4) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 113);
  if ((*((unsigned char *)this + 116) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned __int8 *)this + 112);
LABEL_10:
  uint64_t v4 = v2 ^ *(void *)&v1 ^ v3 ^ PBHashBytes();
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = v4 ^ v5 ^ PBHashBytes();
  return v6 ^ PBHashBytes();
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this)
{
  *(void *)this = off_1003A5F68;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A5F68;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::GyroBiasCorrection::~GyroBiasCorrection(CMMsl::GyroBiasCorrection *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A5F68;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasCorrection::~GyroBiasCorrection(this);

  operator delete();
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t this, const CMMsl::GyroBiasCorrection *a2)
{
  *(void *)this = off_1003A5F68;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 20))
  {
    int v2 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) |= 1u;
    *(_DWORD *)(this + 16) = v2;
  }
  return this;
}

const CMMsl::GyroBiasCorrection *CMMsl::GyroBiasCorrection::operator=(const CMMsl::GyroBiasCorrection *a1, const CMMsl::GyroBiasCorrection *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    CMMsl::GyroBiasCorrection::~GyroBiasCorrection((CMMsl::GyroBiasCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::GyroBiasCorrection *a2, CMMsl::GyroBiasCorrection *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::GyroBiasCorrection::GyroBiasCorrection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5F68;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasCorrection::GyroBiasCorrection((uint64_t)v6, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v8;
    uint64_t v8 = v4;
    CMMsl::GyroBiasCorrection::~GyroBiasCorrection((CMMsl::GyroBiasCorrection *)v6);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasCorrection::formatText(CMMsl::GyroBiasCorrection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 20)) {
    PB::TextFormatter::format(a2, "axis", *((_DWORD *)this + 4));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "correction");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroBiasCorrection::readFrom(CMMsl::GyroBiasCorrection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 4) = v26;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasCorrection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::GyroBiasCorrection::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::DeviceMotionCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if ((*(unsigned char *)(a1 + 20) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

unint64_t CMMsl::GyroBiasCorrection::hash_value(CMMsl::GyroBiasCorrection *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::DeviceMotionCorrection::hash_value((CMMsl::DeviceMotionCorrection *)v2);
  }
  if (*((unsigned char *)this + 20)) {
    uint64_t v3 = *((int *)this + 4);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

uint64_t CMMsl::GyroBiasCorrection::makeCorrection(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  *(void *)this = off_1003A5FA0;
  *((_DWORD *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5FA0;
  *((_DWORD *)this + 23) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this)
{
  *(void *)this = off_1003A5FA0;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError(this);

  operator delete();
}

CMMsl::GyroBiasEstimateError *CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(CMMsl::GyroBiasEstimateError *this, const CMMsl::GyroBiasEstimateError *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A5FA0;
  *((_DWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (*((unsigned char *)a2 + 92))
  {
    uint64_t v5 = *((void *)a2 + 10);
    *((unsigned char *)this + 92) = 1;
    *((void *)this + 10) = v5;
  }
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  if ((*((unsigned char *)a2 + 92) & 2) != 0)
  {
    int v6 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 92) |= 2u;
    *((_DWORD *)this + 22) = v6;
  }
  return this;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, const CMMsl::GyroBiasEstimateError *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasEstimateError *a2, CMMsl::GyroBiasEstimateError *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v13;
  float result = *((float *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((float *)a2 + 22) = result;
  return result;
}

uint64_t CMMsl::GyroBiasEstimateError::GyroBiasEstimateError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5FA0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  return a1;
}

CMMsl *CMMsl::GyroBiasEstimateError::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroBiasEstimateError::GyroBiasEstimateError((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroBiasEstimateError *)v5, v3);
    CMMsl::GyroBiasEstimateError::~GyroBiasEstimateError((CMMsl::GyroBiasEstimateError *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasEstimateError::formatText(CMMsl::GyroBiasEstimateError *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dynamicBiasEstimate", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "estimateErrorMetric", v10);
  }
  if ((*((unsigned char *)this + 92) & 2) != 0) {
    PB::TextFormatter::format(a2, "rawGyroTemperature", *((float *)this + 22));
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "subFitError", v13);
  }
  if (*((unsigned char *)this + 92)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 10));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasEstimateError::readFrom(CMMsl::GyroBiasEstimateError *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 56);
    uint64_t v104 = (char *)this + 72;
    uint64_t v9 = (void **)((char *)this + 32);
    float v10 = (char *)this + 48;
    uint64_t v11 = (void **)((char *)this + 8);
    uint64_t v12 = (char *)this + 24;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 92) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_158;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_161;
        case 2u:
          if (v25 != 2)
          {
            uint64_t v72 = (char *)*((void *)this + 2);
            unint64_t v71 = *((void *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              unint64_t v78 = (char *)*v11;
              uint64_t v79 = (v72 - (unsigned char *)*v11) >> 2;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62) {
LABEL_170:
              }
                sub_10000EE98();
              uint64_t v81 = v71 - (void)v78;
              if (v81 >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                char v83 = (char *)sub_100024458((uint64_t)v12, v82);
                unint64_t v78 = (char *)*((void *)this + 1);
                uint64_t v72 = (char *)*((void *)this + 2);
              }
              else
              {
                char v83 = 0;
              }
              unsigned int v96 = &v83[4 * v79];
              *(_DWORD *)unsigned int v96 = 0;
              unint64_t v73 = v96 + 4;
              while (v72 != v78)
              {
                int v97 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *((void *)this + 1) = v96;
              *((void *)this + 2) = v73;
              *((void *)this + 3) = &v83[4 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v72 = 0;
              unint64_t v73 = v72 + 4;
            }
            *((void *)this + 2) = v73;
            goto LABEL_156;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            unsigned int v31 = (char *)*((void *)this + 2);
            unint64_t v30 = *((void *)this + 3);
            if ((unint64_t)v31 >= v30)
            {
              char v33 = (char *)*v11;
              uint64_t v34 = (v31 - (unsigned char *)*v11) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_170;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unint64_t v38 = (char *)sub_100024458((uint64_t)v12, v37);
                char v33 = (char *)*((void *)this + 1);
                unsigned int v31 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v38 = 0;
              }
              char v39 = &v38[4 * v34];
              *(_DWORD *)char v39 = 0;
              unint64_t v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 1) = v39;
              *((void *)this + 2) = v32;
              *((void *)this + 3) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v31 = 0;
              unint64_t v32 = v31 + 4;
            }
            *((void *)this + 2) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_109;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_110;
        case 3u:
          if (v25 != 2)
          {
            char v75 = (char *)*((void *)this + 5);
            unint64_t v74 = *((void *)this + 6);
            if ((unint64_t)v75 >= v74)
            {
              uint64_t v84 = (char *)*v9;
              uint64_t v85 = (v75 - (unsigned char *)*v9) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_171:
              }
                sub_10000EE98();
              uint64_t v87 = v74 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_100024458((uint64_t)v10, v88);
                uint64_t v84 = (char *)*((void *)this + 4);
                char v75 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v89 = 0;
              }
              char v98 = &v89[4 * v85];
              *(_DWORD *)char v98 = 0;
              unint64_t v73 = v98 + 4;
              while (v75 != v84)
              {
                int v99 = *((_DWORD *)v75 - 1);
                v75 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *((void *)this + 4) = v98;
              *((void *)this + 5) = v73;
              *((void *)this + 6) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)char v75 = 0;
              unint64_t v73 = v75 + 4;
            }
            *((void *)this + 5) = v73;
            goto LABEL_156;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 5);
            unint64_t v44 = *((void *)this + 6);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v9;
              uint64_t v48 = (v45 - (unsigned char *)*v9) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_171;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_100024458((uint64_t)v10, v51);
                char v47 = (char *)*((void *)this + 4);
                unint64_t v45 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v52 = 0;
              }
              unint64_t v53 = &v52[4 * v48];
              *(_DWORD *)unint64_t v53 = 0;
              char v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 4) = v53;
              *((void *)this + 5) = v46;
              *((void *)this + 6) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              char v46 = v45 + 4;
            }
            *((void *)this + 5) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_109;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_110;
        case 4u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v56 = *((void *)a2 + 1);
            unint64_t v57 = *((void *)a2 + 2);
            while (v56 < v57 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v59 = (char *)*((void *)this + 8);
              unint64_t v58 = *((void *)this + 9);
              if ((unint64_t)v59 >= v58)
              {
                char v61 = (char *)*v8;
                uint64_t v62 = (v59 - (unsigned char *)*v8) >> 2;
                unint64_t v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62) {
                  goto LABEL_172;
                }
                uint64_t v64 = v58 - (void)v61;
                if (v64 >> 1 > v63) {
                  unint64_t v63 = v64 >> 1;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v63;
                }
                if (v65)
                {
                  unint64_t v66 = (char *)sub_100024458((uint64_t)v104, v65);
                  char v61 = (char *)*((void *)this + 7);
                  unint64_t v59 = (char *)*((void *)this + 8);
                }
                else
                {
                  unint64_t v66 = 0;
                }
                char v67 = &v66[4 * v62];
                *(_DWORD *)char v67 = 0;
                uint64_t v60 = v67 + 4;
                while (v59 != v61)
                {
                  int v68 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                *((void *)this + 7) = v67;
                *((void *)this + 8) = v60;
                *((void *)this + 9) = &v66[4 * v65];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v59 = 0;
                uint64_t v60 = v59 + 4;
              }
              *((void *)this + 8) = v60;
              unint64_t v69 = *((void *)a2 + 1);
              if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2))
              {
LABEL_109:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
              unint64_t v57 = *((void *)a2 + 2);
              unint64_t v56 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v56;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v77 = (char *)*((void *)this + 8);
            unint64_t v76 = *((void *)this + 9);
            if ((unint64_t)v77 >= v76)
            {
              int v90 = (char *)*v8;
              uint64_t v91 = (v77 - (unsigned char *)*v8) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_172:
              }
                sub_10000EE98();
              uint64_t v93 = v76 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unint64_t v95 = (char *)sub_100024458((uint64_t)v104, v94);
                int v90 = (char *)*((void *)this + 7);
                unint64_t v77 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v100 = &v95[4 * v91];
              *(_DWORD *)uint64_t v100 = 0;
              unint64_t v73 = v100 + 4;
              while (v77 != v90)
              {
                int v101 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *((void *)this + 7) = v100;
              *((void *)this + 8) = v73;
              *((void *)this + 9) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v77 = 0;
              unint64_t v73 = v77 + 4;
            }
            *((void *)this + 8) = v73;
LABEL_156:
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 <= 0xFFFFFFFFFFFFFFFBLL && v102 + 4 <= *((void *)a2 + 2))
            {
              *(v73 - 1) = *(_DWORD *)(*(void *)a2 + v102);
LABEL_160:
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_161:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_158:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_162:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 5u:
          *((unsigned char *)this + 92) |= 2u;
          unint64_t v70 = *((void *)a2 + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
            goto LABEL_158;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v70);
          goto LABEL_160;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_162;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasEstimateError::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 92)) {
    this = PB::Writer::write(a2, *(double *)(this + 80), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  uint64_t v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  float v10 = *(float **)(v3 + 56);
  uint64_t v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  if ((*(unsigned char *)(v3 + 92) & 2) != 0)
  {
    float v13 = *(float *)(v3 + 88);
    return PB::Writer::write(a2, v13, 5u);
  }
  return this;
}

BOOL CMMsl::GyroBiasEstimateError::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 92))
  {
    if ((*(unsigned char *)(a2 + 92) & 1) == 0 || *(double *)(a1 + 80) != *(double *)(a2 + 80)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 92))
  {
    return 0;
  }
  uint64_t v3 = *(float **)(a1 + 8);
  unint64_t v2 = *(float **)(a1 + 16);
  int v4 = *(float **)(a2 + 8);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 16) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 32);
  uint64_t v5 = *(float **)(a1 + 40);
  float v7 = *(float **)(a2 + 32);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 40) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  float v9 = *(float **)(a1 + 56);
  uint64_t v8 = *(float **)(a1 + 64);
  float v10 = *(float **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 92) & 2) == 0;
  if ((*(unsigned char *)(a1 + 92) & 2) != 0) {
    return (*(unsigned char *)(a2 + 92) & 2) != 0 && *(float *)(a1 + 88) == *(float *)(a2 + 88);
  }
  return v11;
}

uint64_t CMMsl::GyroBiasEstimateError::hash_value(CMMsl::GyroBiasEstimateError *this)
{
  if (*((unsigned char *)this + 92))
  {
    if (*((double *)this + 10) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 10);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  if ((*((unsigned char *)this + 92) & 2) != 0)
  {
    float v7 = *((float *)this + 22);
    uint64_t v6 = LODWORD(v7);
    if (v7 == 0.0) {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

double CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  *(void *)this = off_1003A5FD8;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A5FD8;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::GyroBiasFit::~GyroBiasFit(CMMsl::GyroBiasFit *this)
{
  *(void *)this = off_1003A5FD8;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroBiasFit::~GyroBiasFit(this);

  operator delete();
}

CMMsl::GyroBiasFit *CMMsl::GyroBiasFit::GyroBiasFit(CMMsl::GyroBiasFit *this, const CMMsl::GyroBiasFit *a2)
{
  *(void *)this = off_1003A5FD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 15) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if (*((unsigned char *)a2 + 60))
  {
    int v5 = *((_DWORD *)a2 + 14);
    *((unsigned char *)this + 60) |= 1u;
    *((_DWORD *)this + 14) = v5;
  }
  return this;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, const CMMsl::GyroBiasFit *a2)
{
  if ((const CMMsl::GyroBiasFit *)a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((CMMsl::GyroBiasFit *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    int v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroBiasFit *a2, CMMsl::GyroBiasFit *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  float result = *((float *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((float *)a2 + 14) = result;
  return result;
}

uint64_t CMMsl::GyroBiasFit::GyroBiasFit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A5FD8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::GyroBiasFit::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroBiasFit::GyroBiasFit((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v14;
    int v14 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v13;
    int v13 = v7;
    CMMsl::GyroBiasFit::~GyroBiasFit((CMMsl::GyroBiasFit *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroBiasFit::formatText(CMMsl::GyroBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "intercept", v7);
  }
  if (*((unsigned char *)this + 60)) {
    PB::TextFormatter::format(a2, "lastMiniCal", *((float *)this + 14));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "slope", v10);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::GyroBiasFit::readFrom(CMMsl::GyroBiasFit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    float v10 = (void **)((char *)this + 32);
    long long v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v44 = (char *)*((void *)this + 2);
            unint64_t v43 = *((void *)this + 3);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v8;
              uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_100024458((uint64_t)v9, v50);
                char v46 = (char *)*((void *)this + 1);
                unint64_t v44 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v51 = 0;
              }
              unint64_t v52 = &v51[4 * v47];
              *(_DWORD *)unint64_t v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((void *)this + 1) = v52;
              *((void *)this + 2) = v45;
              *((void *)this + 3) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *((void *)this + 2) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2))
            {
LABEL_82:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_83;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_83;
        }
        unint64_t v59 = (char *)*((void *)this + 2);
        unint64_t v58 = *((void *)this + 3);
        if ((unint64_t)v59 >= v58)
        {
          unint64_t v66 = (char *)*v8;
          uint64_t v67 = (v59 - (unsigned char *)*v8) >> 2;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62) {
LABEL_128:
          }
            sub_10000EE98();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 1 > v68) {
            unint64_t v68 = v69 >> 1;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            unint64_t v71 = (char *)sub_100024458((uint64_t)v9, v70);
            unint64_t v66 = (char *)*((void *)this + 1);
            unint64_t v59 = (char *)*((void *)this + 2);
          }
          else
          {
            unint64_t v71 = 0;
          }
          unint64_t v74 = &v71[4 * v67];
          *(_DWORD *)unint64_t v74 = 0;
          unint64_t v57 = v74 + 4;
          while (v59 != v66)
          {
            int v75 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *((void *)this + 1) = v74;
          *((void *)this + 2) = v57;
          *((void *)this + 3) = &v71[4 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v59 = 0;
          unint64_t v57 = v59 + 4;
        }
        *((void *)this + 2) = v57;
LABEL_114:
        unint64_t v76 = *((void *)a2 + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2)) {
          goto LABEL_116;
        }
        *(v57 - 1) = *(_DWORD *)(*(void *)a2 + v76);
LABEL_118:
        *((void *)a2 + 1) += 4;
        goto LABEL_119;
      }
      if (v25 == 1)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v29 = (char *)*((void *)this + 5);
            unint64_t v28 = *((void *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              unsigned int v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 2;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                goto LABEL_127;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                uint64_t v36 = (char *)sub_100024458((uint64_t)v11, v35);
                unsigned int v31 = (char *)*((void *)this + 4);
                unint64_t v29 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v36 = 0;
              }
              unint64_t v37 = &v36[4 * v32];
              *(_DWORD *)unint64_t v37 = 0;
              unint64_t v30 = v37 + 4;
              while (v29 != v31)
              {
                int v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *((void *)this + 4) = v37;
              *((void *)this + 5) = v30;
              *((void *)this + 6) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v29 = 0;
              unint64_t v30 = v29 + 4;
            }
            *((void *)this + 5) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)a2 + 2)) {
              goto LABEL_82;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v26;
          }
LABEL_83:
          PB::Reader::recallMark();
          goto LABEL_119;
        }
        unint64_t v56 = (char *)*((void *)this + 5);
        unint64_t v55 = *((void *)this + 6);
        if ((unint64_t)v56 >= v55)
        {
          uint64_t v60 = (char *)*v10;
          uint64_t v61 = (v56 - (unsigned char *)*v10) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
LABEL_127:
          }
            sub_10000EE98();
          uint64_t v63 = v55 - (void)v60;
          if (v63 >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            unint64_t v65 = (char *)sub_100024458((uint64_t)v11, v64);
            uint64_t v60 = (char *)*((void *)this + 4);
            unint64_t v56 = (char *)*((void *)this + 5);
          }
          else
          {
            unint64_t v65 = 0;
          }
          uint64_t v72 = &v65[4 * v61];
          *(_DWORD *)uint64_t v72 = 0;
          unint64_t v57 = v72 + 4;
          while (v56 != v60)
          {
            int v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *((void *)this + 4) = v72;
          *((void *)this + 5) = v57;
          *((void *)this + 6) = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v56 = 0;
          unint64_t v57 = v56 + 4;
        }
        *((void *)this + 5) = v57;
        goto LABEL_114;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    *((unsigned char *)this + 60) |= 1u;
    unint64_t v40 = *((void *)a2 + 1);
    if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2))
    {
LABEL_116:
      *((unsigned char *)a2 + 24) = 1;
      goto LABEL_119;
    }
    *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v40);
    goto LABEL_118;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 32);
  long long v5 = *(float **)(this + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    float v10 = *(float *)(v3 + 56);
    return PB::Writer::write(a2, v10, 3u);
  }
  return this;
}

BOOL CMMsl::GyroBiasFit::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(float **)(a1 + 32);
  unint64_t v2 = *(float **)(a1 + 40);
  int v4 = *(float **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  float v6 = *(float **)(a1 + 8);
  long long v5 = *(float **)(a1 + 16);
  float v7 = *(float **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 60) & 1) == 0;
  if (*(unsigned char *)(a1 + 60)) {
    return (*(unsigned char *)(a2 + 60) & 1) != 0 && *(float *)(a1 + 56) == *(float *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::GyroBiasFit::hash_value(CMMsl::GyroBiasFit *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  if (*((unsigned char *)this + 60))
  {
    float v5 = *((float *)this + 14);
    uint64_t v4 = LODWORD(v5);
    if (v5 == 0.0) {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v3 ^ v2 ^ v4;
}

void *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(void *this)
{
  *this = off_1003A6010;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A6010;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataFactory::~GyroCalibrationDataFactory(CMMsl::GyroCalibrationDataFactory *this)
{
  *(void *)this = off_1003A6010;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6010;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6010;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(void *this, const CMMsl::GyroCalibrationDataFactory *a2)
{
  this[1] = 0;
  *this = off_1003A6010;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_1000F1DA4();
  }
  return this;
}

void sub_1000F1DA4()
{
}

void sub_1000F1EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataFactory *a2)
{
  if ((const CMMsl::GyroCalibrationDataFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    float v6 = off_1003A6010;
    float v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::GyroCalibrationDataFactory *a2, CMMsl::GyroCalibrationDataFactory *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::GyroCalibrationDataFactory::GyroCalibrationDataFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6010;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A6010;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v9 = off_1003A6010;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    uint64_t v12 = (void **)&v10;
    float v9 = off_1003A6010;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataFactory::formatText(CMMsl::GyroCalibrationDataFactory *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "sample");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataFactory::readFrom(CMMsl::GyroCalibrationDataFactory *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1000F23AC();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1000F23AC()
{
}

void sub_1000F24C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataFactory::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1000F2560((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_1000F2560(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::GyroCalibrationSample::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataFactory::hash_value(CMMsl::GyroCalibrationDataFactory *this)
{
  double v1 = (CMMsl::GyroCalibrationSample **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::GyroCalibrationSample **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSample::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

void *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(void *this)
{
  *this = off_1003A6048;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A6048;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::GyroCalibrationDataNonlinearNonFactory::~GyroCalibrationDataNonlinearNonFactory(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  *(void *)this = off_1003A6048;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6048;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6048;
  uint64_t v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

void *CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(void *this, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  this[1] = 0;
  *this = off_1003A6048;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_1000F2810();
  }
  return this;
}

void sub_1000F2810()
{
}

void sub_1000F2914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, const CMMsl::GyroCalibrationDataNonlinearNonFactory *a2)
{
  if ((const CMMsl::GyroCalibrationDataNonlinearNonFactory *)a1 != a2)
  {
    CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    uint64_t v6 = off_1003A6048;
    unsigned int v9 = (void **)&v7;
    sub_100274A84(&v9);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::GyroCalibrationDataNonlinearNonFactory *a2, CMMsl::GyroCalibrationDataNonlinearNonFactory *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  return this;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::GyroCalibrationDataNonlinearNonFactory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6048;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

{
  _OWORD *v4;

  *(void *)a1 = off_1003A6048;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v9 = off_1003A6048;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    sub_100274B44((void **)&v10);
    uint64_t v4 = *(void *)(a2 + 24);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    long long v10 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v11 = v7;
    char v12 = (void **)&v10;
    unsigned int v9 = off_1003A6048;
    sub_100274A84(&v12);
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::formatText(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (uint64_t *)*((void *)this + 1);
  long long v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "sample");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::readFrom(CMMsl::GyroCalibrationDataNonlinearNonFactory *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1000F2E18();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1000F2E18()
{
}

void sub_1000F2F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base ***)(this + 8);
  for (i = *(const PB::Base ***)(this + 16); v2 != i; this = PB::Writer::writeSubmessage(a2, v5, 1u))
    long long v5 = *v2++;
  return this;
}

BOOL CMMsl::GyroCalibrationDataNonlinearNonFactory::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1000F2FCC((uint64_t *)(a1 + 8), a2 + 8);
}

BOOL sub_1000F2FCC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::GyroCalibrationSampleNonlinear::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::GyroCalibrationDataNonlinearNonFactory::hash_value(CMMsl::GyroCalibrationDataNonlinearNonFactory *this)
{
  double v1 = (CMMsl::GyroCalibrationSampleNonlinear **)*((void *)this + 1);
  uint64_t v2 = (CMMsl::GyroCalibrationSampleNonlinear **)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    int v4 = *v1++;
    v3 ^= CMMsl::GyroCalibrationSampleNonlinear::hash_value(v4);
  }
  while (v1 != v2);
  return v3;
}

uint64_t CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t this)
{
  *(void *)this = off_1003A6080;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A6080;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSample::~GyroCalibrationSample(CMMsl::GyroCalibrationSample *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(CMMsl::GyroCalibrationSample *this, const CMMsl::GyroCalibrationSample *a2)
{
  *(void *)this = off_1003A6080;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((unsigned char *)a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, const CMMsl::GyroCalibrationSample *a2)
{
  if ((const CMMsl::GyroCalibrationSample *)a1 != a2)
  {
    CMMsl::GyroCalibrationSample::GyroCalibrationSample((CMMsl::GyroCalibrationSample *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSample *a2, CMMsl::GyroCalibrationSample *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroCalibrationSample::GyroCalibrationSample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6080;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6080;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A6080;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSample::formatText(CMMsl::GyroCalibrationSample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSample::readFrom(CMMsl::GyroCalibrationSample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 24) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 24) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 24) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 24) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::GyroCalibrationSample::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 8) == 0;
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
    return (*(unsigned char *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroCalibrationSample::hash_value(CMMsl::GyroCalibrationSample *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this)
{
  *(void *)this = off_1003A60B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A60B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A60B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear(this);

  operator delete();
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t this, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  *(void *)this = off_1003A60B8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = *((void *)a2 + 2);
    *(unsigned char *)(this + 24) |= 1u;
    *(void *)(this + 16) = v2;
  }
  return this;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, const CMMsl::GyroCalibrationSampleNonlinear *a2)
{
  if ((const CMMsl::GyroCalibrationSampleNonlinear *)a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear((CMMsl::GyroCalibrationSampleNonlinear *)&v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::GyroCalibrationSampleNonlinear *a2, CMMsl::GyroCalibrationSampleNonlinear *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A60B8;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroCalibrationSampleNonlinear::GyroCalibrationSampleNonlinear((uint64_t)&v7, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    uint64_t v9 = v5;
    CMMsl::GyroCalibrationSampleNonlinear::~GyroCalibrationSampleNonlinear((CMMsl::GyroCalibrationSampleNonlinear *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::formatText(CMMsl::GyroCalibrationSampleNonlinear *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }
  if (*((unsigned char *)this + 24)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::readFrom(CMMsl::GyroCalibrationSampleNonlinear *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v21);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 8);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::GyroCalibrationSampleNonlinear::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroCalibrationSample::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 24) & 1) == 0;
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t CMMsl::GyroCalibrationSampleNonlinear::hash_value(CMMsl::GyroCalibrationSampleNonlinear *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v2 = CMMsl::GyroCalibrationSample::hash_value((CMMsl::GyroCalibrationSample *)v2);
  }
  if (*((unsigned char *)this + 24))
  {
    double v3 = *((double *)this + 2);
    if (v3 == 0.0) {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = 0.0;
  }
  return *(void *)&v3 ^ v2;
}

uint64_t CMMsl::GyroCalibrationSampleNonlinear::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this)
{
  *(void *)this = off_1003A60F0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A60F0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void CMMsl::GyroCompass::~GyroCompass(CMMsl::GyroCompass *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::GyroCompass::GyroCompass(uint64_t this, const CMMsl::GyroCompass *a2)
{
  *(void *)this = off_1003A60F0;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 60) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 11);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 44) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x200u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 48) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 52) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 36) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 16) = v11;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v12 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 24) = v12;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 28) = v13;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_26:
    int v15 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 60) = v3 | 4;
    *(_DWORD *)(this + 20) = v15;
    return this;
  }
LABEL_25:
  int v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 30) & 4) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, const CMMsl::GyroCompass *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroCompass *a2, CMMsl::GyroCompass *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

float CMMsl::GyroCompass::GyroCompass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A60F0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

CMMsl *CMMsl::GyroCompass::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::GyroCompass::GyroCompass((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::GyroCompass *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::GyroCompass::formatText(CMMsl::GyroCompass *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accuracy", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "calibrationLevel", *((_DWORD *)this + 5));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "magneticFieldX", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "magneticFieldY", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "magneticFieldZ", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "magneticHeading", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 30) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "trueHeading", *((float *)this + 14));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroCompass::readFrom(CMMsl::GyroCompass *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 30) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_73;
            case 2u:
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 3u:
              *((_WORD *)this + 30) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 4u:
              *((_WORD *)this + 30) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 5u:
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 6u:
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 7u:
              *((_WORD *)this + 30) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 8u:
              *((_WORD *)this + 30) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 9u:
              *((_WORD *)this + 30) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 0xAu:
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_72;
            case 0xBu:
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_72:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_73:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_56:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_79;
            case 0xCu:
              *((_WORD *)this + 30) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_78;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_77;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_78;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *((_DWORD *)this + 5) = v25;
LABEL_79:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_79;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroCompass::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 2u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 3u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 4u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 8u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 9u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
    if ((*(_WORD *)(v3 + 60) & 4) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_25:
  int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(a2, v5, 0xCu);
}

BOOL CMMsl::GyroCompass::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 60);
  __int16 v3 = *(_WORD *)(a2 + 60);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 60) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 60) & 0x800) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 60) & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
  }
  return v4;
}

uint64_t CMMsl::GyroCompass::hash_value(CMMsl::GyroCompass *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_37:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 30) & 0x200) != 0) {
      goto LABEL_6;
    }
LABEL_38:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 30) & 0x400) != 0) {
      goto LABEL_9;
    }
LABEL_39:
    uint64_t v8 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
LABEL_40:
    uint64_t v10 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
LABEL_41:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 30) & 0x800) != 0) {
      goto LABEL_18;
    }
LABEL_42:
    uint64_t v14 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_21;
    }
LABEL_43:
    uint64_t v16 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
LABEL_44:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_27;
    }
LABEL_45:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_30;
    }
    goto LABEL_46;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 30) & 0x100) == 0) {
    goto LABEL_37;
  }
LABEL_3:
  float v3 = *((float *)this + 11);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x200) == 0) {
    goto LABEL_38;
  }
LABEL_6:
  float v5 = *((float *)this + 12);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x400) == 0) {
    goto LABEL_39;
  }
LABEL_9:
  float v7 = *((float *)this + 13);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_15:
  float v11 = *((float *)this + 9);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 30) & 0x800) == 0) {
    goto LABEL_42;
  }
LABEL_18:
  float v13 = *((float *)this + 14);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_43;
  }
LABEL_21:
  float v15 = *((float *)this + 4);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_44;
  }
LABEL_24:
  float v17 = *((float *)this + 6);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_45;
  }
LABEL_27:
  float v19 = *((float *)this + 7);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_30:
    float v21 = *((float *)this + 8);
    uint64_t v22 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v22 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_33;
    }
LABEL_47:
    uint64_t v23 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_46:
  uint64_t v22 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_47;
  }
LABEL_33:
  uint64_t v23 = *((int *)this + 5);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

uint64_t CMMsl::GyroDt::GyroDt(uint64_t this)
{
  *(void *)this = off_1003A6128;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A6128;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

void CMMsl::GyroDt::~GyroDt(CMMsl::GyroDt *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GyroDt::GyroDt(CMMsl::GyroDt *this, const CMMsl::GyroDt *a2)
{
  *(void *)this = off_1003A6128;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

{
  float result;

  *(void *)this = off_1003A6128;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::GyroDt::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    float v7 = off_1003A6128;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::GyroDt *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = off_1003A6128;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    uint64_t v10 = v5;
    uint64_t v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroDt *a2, CMMsl::GyroDt *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float CMMsl::GyroDt::GyroDt(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6128;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6128;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::GyroDt::formatText(CMMsl::GyroDt *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "dt", *((float *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroDt::readFrom(CMMsl::GyroDt *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroDt::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::GyroDt::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  }
  return result;
}

float CMMsl::GyroDt::hash_value(CMMsl::GyroDt *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t this)
{
  *(void *)this = off_1003A6160;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A6160;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void CMMsl::GyroFactoryCalibrationData::~GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(CMMsl::GyroFactoryCalibrationData *this, const CMMsl::GyroFactoryCalibrationData *a2)
{
  *(void *)this = off_1003A6160;
  *((_DWORD *)this + 6) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 24) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 3);
    v3 |= 2u;
    *((unsigned char *)this + 24) = v3;
    *((float *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_10:
    float result = *((float *)a2 + 5);
    *((unsigned char *)this + 24) = v3 | 8;
    *((float *)this + 5) = result;
    return result;
  }
  float result = *((float *)a2 + 4);
  v3 |= 4u;
  *((unsigned char *)this + 24) = v3;
  *((float *)this + 4) = result;
  if ((*((unsigned char *)a2 + 24) & 8) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, const CMMsl::GyroFactoryCalibrationData *a2)
{
  if ((const CMMsl::GyroFactoryCalibrationData *)a1 != a2)
  {
    CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData((CMMsl::GyroFactoryCalibrationData *)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    int v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroFactoryCalibrationData *a2, CMMsl::GyroFactoryCalibrationData *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  return result;
}

float CMMsl::GyroFactoryCalibrationData::GyroFactoryCalibrationData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6160;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6160;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  return result;
}

uint64_t CMMsl::GyroFactoryCalibrationData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A6160;
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    int v9 = *(_DWORD *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::GyroFactoryCalibrationData::formatText(CMMsl::GyroFactoryCalibrationData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 4));
  if ((*((unsigned char *)this + 24) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 5));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroFactoryCalibrationData::readFrom(CMMsl::GyroFactoryCalibrationData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 24) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 2u:
          *((unsigned char *)this + 24) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 24) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 24) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroFactoryCalibrationData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
      if ((*(unsigned char *)(v3 + 24) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12), 2u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::GyroFactoryCalibrationData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 24) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 24) & 8) == 0;
  if ((*(unsigned char *)(a1 + 24) & 8) != 0) {
    return (*(unsigned char *)(a2 + 24) & 8) != 0 && *(float *)(a1 + 20) == *(float *)(a2 + 20);
  }
  return v2;
}

uint64_t CMMsl::GyroFactoryCalibrationData::hash_value(CMMsl::GyroFactoryCalibrationData *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  float v8 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 3);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 24) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 24) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 24) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroGps::GyroGps(uint64_t this)
{
  *(void *)this = off_1003A6198;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A6198;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void CMMsl::GyroGps::~GyroGps(CMMsl::GyroGps *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::GyroGps::GyroGps(CMMsl::GyroGps *this, const CMMsl::GyroGps *a2)
{
  *(void *)this = off_1003A6198;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, const CMMsl::GyroGps *a2)
{
  if ((const CMMsl::GyroGps *)a1 != a2)
  {
    CMMsl::GyroGps::GyroGps((CMMsl::GyroGps *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroGps *a2, CMMsl::GyroGps *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::GyroGps::GyroGps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6198;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6198;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::GyroGps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = off_1003A6198;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    void v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::GyroGps::formatText(CMMsl::GyroGps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "x", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "y", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 6));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroGps::readFrom(CMMsl::GyroGps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroGps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 4u);
}

BOOL CMMsl::GyroGps::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    if ((*(unsigned char *)(a2 + 28) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 28))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 28) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 28) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 28) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 28) & 8) == 0;
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
    return (*(unsigned char *)(a2 + 28) & 8) != 0 && *(float *)(a1 + 24) == *(float *)(a2 + 24);
  }
  return v2;
}

uint64_t CMMsl::GyroGps::hash_value(CMMsl::GyroGps *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this)
{
  *(void *)this = off_1003A61D0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A61D0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::GyroOscarEmu::~GyroOscarEmu(CMMsl::GyroOscarEmu *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t this, const CMMsl::GyroOscarEmu *a2)
{
  *(void *)this = off_1003A61D0;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 36) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 20) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 28) = v7;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 32);
    *(unsigned char *)(this + 36) = v3 | 0x20;
    *(unsigned char *)(this + 32) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v8;
  if ((*((unsigned char *)a2 + 36) & 0x20) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, const CMMsl::GyroOscarEmu *a2)
{
  if ((const CMMsl::GyroOscarEmu *)a1 != a2)
  {
    CMMsl::GyroOscarEmu::GyroOscarEmu((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v14;
    int v14 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 20);
    *(void *)(a1 + 20) = v11;
    uint64_t v11 = v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v12;
    int v12 = v4;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v13;
    char v13 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroOscarEmu *a2, CMMsl::GyroOscarEmu *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 32);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v6;
  return result;
}

float CMMsl::GyroOscarEmu::GyroOscarEmu(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A61D0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A61D0;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return result;
}

uint64_t CMMsl::GyroOscarEmu::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v13[0] = off_1003A61D0;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 28);
    int v6 = *(_DWORD *)(a2 + 16);
    char v7 = *(unsigned char *)(a2 + 32);
    int v18 = *(_DWORD *)(a1 + 36);
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v13[1] = v8;
    uint64_t v9 = *(void *)(a1 + 20);
    uint64_t v10 = *(void *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(void *)(a1 + 20) = v10;
    uint64_t v15 = v9;
    LODWORD(v9) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v5;
    int v16 = v9;
    int v11 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v6;
    int v14 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v7;
    char v17 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t CMMsl::GyroOscarEmu::formatText(CMMsl::GyroOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "fsync", *((unsigned char *)this + 32));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "sampleNum", *((_DWORD *)this + 4));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "x", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "y", *((float *)this + 6));
  if ((*((unsigned char *)this + 36) & 0x10) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 7));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroOscarEmu::readFrom(CMMsl::GyroOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_56;
            case 2u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_55;
            case 3u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_35;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_55;
            case 4u:
              *((unsigned char *)this + 36) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_55:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_56:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_62;
            case 5u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_61;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_60;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_61;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *((_DWORD *)this + 4) = v25;
LABEL_62:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *((unsigned char *)this + 36) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 32) = v28;
              goto LABEL_62;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_62;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 5u);
    if ((*(unsigned char *)(v3 + 36) & 0x20) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 4u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_13:
  char v5 = *(unsigned char *)(v3 + 32);

  return PB::Writer::write(a2, v5, 6u);
}

BOOL CMMsl::GyroOscarEmu::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 36))
  {
    if ((*(unsigned char *)(a2 + 36) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 36))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 36) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 36) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 36) & 0x20) == 0;
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0) {
    return (*(unsigned char *)(a2 + 36) & 0x20) != 0 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
  }
  return v2;
}

uint64_t CMMsl::GyroOscarEmu::hash_value(CMMsl::GyroOscarEmu *this)
{
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_18:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_9;
    }
LABEL_19:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_12;
    }
LABEL_20:
    uint64_t v8 = 0;
    if ((*((unsigned char *)this + 36) & 0x20) != 0) {
      goto LABEL_13;
    }
LABEL_21:
    uint64_t v9 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 4) == 0) {
    goto LABEL_17;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_18;
  }
LABEL_6:
  float v4 = *((float *)this + 6);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_19;
  }
LABEL_9:
  float v6 = *((float *)this + 7);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v8 = *((unsigned int *)this + 4);
  if ((*((unsigned char *)this + 36) & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v9 = *((unsigned __int8 *)this + 32);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v8 ^ v9;
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this)
{
  *(void *)this = off_1003A6208;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A6208;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void CMMsl::GyroTemperature::~GyroTemperature(CMMsl::GyroTemperature *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::GyroTemperature::GyroTemperature(uint64_t this, const CMMsl::GyroTemperature *a2)
{
  *(void *)this = off_1003A6208;
  *(_DWORD *)(this + 16) = 0;
  if ((*((unsigned char *)a2 + 16) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 3);
    *(unsigned char *)(this + 16) = 2;
    *(_DWORD *)(this + 12) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 16) & 1) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 16))
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 16) = v2;
    *(_DWORD *)(this + 8) = v4;
  }
  return this;
}

const CMMsl::GyroTemperature *CMMsl::GyroTemperature::operator=(const CMMsl::GyroTemperature *a1, const CMMsl::GyroTemperature *a2)
{
  if (a1 != a2)
  {
    CMMsl::GyroTemperature::GyroTemperature((uint64_t)v7, a2);
    int v3 = *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = v10;
    int v10 = v3;
    int v4 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v9;
    int v9 = v4;
    int v5 = *((_DWORD *)a1 + 2);
    *((_DWORD *)a1 + 2) = v8;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::GyroTemperature *a2, CMMsl::GyroTemperature *a3)
{
  int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  int v5 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v5;
  return result;
}

float CMMsl::GyroTemperature::GyroTemperature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6208;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6208;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

_DWORD *CMMsl::GyroTemperature::operator=(_DWORD *a1, _DWORD *a2)
{
  if (a1 != a2)
  {
    int v10 = off_1003A6208;
    int v3 = a2[4];
    a2[4] = 0;
    int v4 = a2[3];
    int v5 = a2[2];
    int v6 = a1[4];
    a1[4] = v3;
    int v13 = v6;
    int v7 = a1[3];
    a1[3] = v4;
    int v12 = v7;
    int v8 = a1[2];
    a1[2] = v5;
    int v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::GyroTemperature::formatText(CMMsl::GyroTemperature *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 16);
  if (v5)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 2));
    char v5 = *((unsigned char *)this + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "temperature", *((float *)this + 3));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::GyroTemperature::readFrom(CMMsl::GyroTemperature *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 2) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 16) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::GyroTemperature::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 16);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12), 1u);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    int v5 = *(_DWORD *)(v3 + 8);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::GyroTemperature::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 16) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 16) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 16) & 1) == 0;
  if (*(unsigned char *)(a1 + 16)) {
    return (*(unsigned char *)(a2 + 16) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

uint64_t CMMsl::GyroTemperature::hash_value(CMMsl::GyroTemperature *this)
{
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    float v3 = *((float *)this + 3);
    uint64_t v1 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v1 = 0;
    }
    if (*((unsigned char *)this + 16)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 16) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((int *)this + 2);
  return v2 ^ v1;
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this)
{
  *(void *)this = off_1003A6240;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A6240;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HIDShower::~HIDShower(CMMsl::HIDShower *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::HIDShower::HIDShower(uint64_t this, const CMMsl::HIDShower *a2)
{
  *(void *)this = off_1003A6240;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, const CMMsl::HIDShower *a2)
{
  if ((const CMMsl::HIDShower *)a1 != a2)
  {
    CMMsl::HIDShower::HIDShower((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HIDShower *a2, CMMsl::HIDShower *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::HIDShower::HIDShower(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6240;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A6240;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HIDShower::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A6240;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HIDShower::formatText(CMMsl::HIDShower *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "inShower", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HIDShower::readFrom(CMMsl::HIDShower *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HIDShower::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::HIDShower::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HIDShower::hash_value(CMMsl::HIDShower *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this)
{
  *(void *)this = off_1003A6278;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A6278;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void CMMsl::HapticModuleState::~HapticModuleState(CMMsl::HapticModuleState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::HapticModuleState::HapticModuleState(uint64_t this, const CMMsl::HapticModuleState *a2)
{
  *(void *)this = off_1003A6278;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, const CMMsl::HapticModuleState *a2)
{
  if ((const CMMsl::HapticModuleState *)a1 != a2)
  {
    CMMsl::HapticModuleState::HapticModuleState((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HapticModuleState *a2, CMMsl::HapticModuleState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::HapticModuleState::HapticModuleState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6278;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A6278;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::HapticModuleState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A6278;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HapticModuleState::formatText(CMMsl::HapticModuleState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "hapticOn", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HapticModuleState::readFrom(CMMsl::HapticModuleState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HapticModuleState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

BOOL CMMsl::HapticModuleState::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    if ((*(unsigned char *)(a2 + 20) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 2) == 0;
  if ((*(unsigned char *)(a1 + 20) & 2) != 0) {
    return (*(unsigned char *)(a2 + 20) & 2) != 0 && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HapticModuleState::hash_value(CMMsl::HapticModuleState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

uint64_t CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t this)
{
  *(void *)this = off_1003A62B0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A62B0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void CMMsl::HarmonicMetrics::~HarmonicMetrics(CMMsl::HarmonicMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(CMMsl::HarmonicMetrics *this, const CMMsl::HarmonicMetrics *a2)
{
  *(void *)this = off_1003A62B0;
  *((_DWORD *)this + 11) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 44) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    char v3 = 0;
    if ((*((unsigned char *)a2 + 44) & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  float result = *((float *)a2 + 10);
  v3 |= 0x80u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 10) = result;
  char v2 = *((unsigned char *)a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    float result = *((float *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 44) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 5) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  float result = *((float *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 6) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  float result = *((float *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 7) = result;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      return result;
    }
LABEL_18:
    float result = *((float *)a2 + 9);
    *((unsigned char *)this + 44) = v3 | 0x40;
    *((float *)this + 9) = result;
    return result;
  }
LABEL_17:
  float result = *((float *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 44) = v3;
  *((float *)this + 8) = result;
  if ((*((unsigned char *)a2 + 44) & 0x40) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, const CMMsl::HarmonicMetrics *a2)
{
  if ((const CMMsl::HarmonicMetrics *)a1 != a2)
  {
    CMMsl::HarmonicMetrics::HarmonicMetrics((CMMsl::HarmonicMetrics *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    *(void *)&long long v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::HarmonicMetrics *a2, CMMsl::HarmonicMetrics *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  int v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  int v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  int v9 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v9;
  int v10 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v10;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::HarmonicMetrics::HarmonicMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A62B0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A62B0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::HarmonicMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[0] = off_1003A62B0;
    v11[1] = v6;
    int v14 = *(_DWORD *)(a1 + 40);
    long long v7 = *(_OWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 40) = v5;
    *(_OWORD *)(a1 + 16) = v7;
    *(void *)(a1 + 32) = v9;
    uint64_t v13 = v8;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::HarmonicMetrics::formatText(CMMsl::HarmonicMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "thetaAPDirRad", *((float *)this + 10));
  if (*((unsigned char *)this + 44)) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_10:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HarmonicMetrics::readFrom(CMMsl::HarmonicMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_65;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_64:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_65:
              *((void *)this + 1) = v24;
              goto LABEL_66;
            case 2u:
              *((unsigned char *)this + 44) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 3u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 4u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 5u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 6u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 7u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_51;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_60;
            case 8u:
              *((unsigned char *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_60:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_66;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
LABEL_66:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::HarmonicMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 32), 7u);
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 8u);
}

BOOL CMMsl::HarmonicMetrics::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 44);
  int v3 = *(unsigned __int8 *)(a2 + 44);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & v3 & 0x80) != 0)
  {
    if (*(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if (((v2 | v3) & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 36) == *(float *)(a2 + 36);
  }
  return v4;
}

uint64_t CMMsl::HarmonicMetrics::hash_value(CMMsl::HarmonicMetrics *this)
{
  if ((*((unsigned char *)this + 44) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 44) & 0x80) != 0) {
      goto LABEL_3;
    }
LABEL_25:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_26:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_27:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_12;
    }
LABEL_28:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_15;
    }
LABEL_29:
    uint64_t v11 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
  uint64_t v1 = *((void *)this + 1);
  if ((*((unsigned char *)this + 44) & 0x80) == 0) {
    goto LABEL_25;
  }
LABEL_3:
  float v2 = *((float *)this + 10);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 44) & 2) == 0) {
    goto LABEL_26;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_27;
  }
LABEL_9:
  float v6 = *((float *)this + 5);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 44) & 8) == 0) {
    goto LABEL_28;
  }
LABEL_12:
  float v8 = *((float *)this + 6);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_15:
  float v10 = *((float *)this + 7);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_18:
    float v12 = *((float *)this + 8);
    uint64_t v13 = LODWORD(v12);
    if (v12 == 0.0) {
      uint64_t v13 = 0;
    }
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_21;
    }
LABEL_31:
    uint64_t v15 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
  }
LABEL_30:
  uint64_t v13 = 0;
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_31;
  }
LABEL_21:
  float v14 = *((float *)this + 9);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13 ^ v15;
}

double CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  *(void *)this = off_1003A62E8;
  *((void *)this + 21) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A62E8;
  *((void *)this + 21) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  *(void *)this = off_1003A62E8;
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate(this);

  operator delete();
}

CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  *(void *)this = off_1003A62E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if ((*((_WORD *)a2 + 86) & 0x10) != 0)
  {
    uint64_t v7 = *((void *)a2 + 17);
    *((_WORD *)this + 86) = 16;
    *((void *)this + 17) = v7;
    __int16 v6 = 272;
    if ((*((_WORD *)a2 + 86) & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 256;
  if ((*((_WORD *)a2 + 86) & 0x100) != 0)
  {
LABEL_5:
    int v8 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 86) = v6;
    *((_DWORD *)this + 42) = v8;
  }
LABEL_6:
  if (this != a2)
  {
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  __int16 v9 = *((_WORD *)a2 + 86);
  if ((v9 & 2) != 0)
  {
    uint64_t v10 = *((void *)a2 + 14);
    *((_WORD *)this + 86) |= 2u;
    *((void *)this + 14) = v10;
    __int16 v9 = *((_WORD *)a2 + 86);
  }
  if (v9)
  {
    uint64_t v11 = *((void *)a2 + 13);
    *((_WORD *)this + 86) |= 1u;
    *((void *)this + 13) = v11;
  }
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x80) != 0)
  {
    uint64_t v15 = *((void *)a2 + 20);
    *((_WORD *)this + 86) |= 0x80u;
    *((void *)this + 20) = v15;
    __int16 v12 = *((_WORD *)a2 + 86);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v16 = *((void *)a2 + 18);
  *((_WORD *)this + 86) |= 0x20u;
  *((void *)this + 18) = v16;
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0) {
      goto LABEL_18;
    }
LABEL_24:
    uint64_t v18 = *((void *)a2 + 16);
    *((_WORD *)this + 86) |= 8u;
    *((void *)this + 16) = v18;
    if ((*((_WORD *)a2 + 86) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v17 = *((void *)a2 + 19);
  *((_WORD *)this + 86) |= 0x40u;
  *((void *)this + 19) = v17;
  __int16 v12 = *((_WORD *)a2 + 86);
  if ((v12 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    uint64_t v13 = *((void *)a2 + 15);
    *((_WORD *)this + 86) |= 4u;
    *((void *)this + 15) = v13;
  }
  return this;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, const CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a2, CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *a3)
{
  int v3 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v4;
  int v5 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v7;
  uint64_t v8 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v12;
  uint64_t v13 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v13;
  uint64_t v14 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v14;
  uint64_t v15 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  uint64_t v20 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v20;
  uint64_t v21 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v21;
  uint64_t v22 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v22;
  uint64_t v23 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v23;
  double result = *((double *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((double *)a2 + 15) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A62E8;
  uint64_t v4 = a1 + 32;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a2 + 172) = 0;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

CMMsl *CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::HeadToHeadsetAttitudeEstimatorMeasurementUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5, v3);
    CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::~HeadToHeadsetAttitudeEstimatorMeasurementUpdate((CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::formatText(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 86);
  if (v5)
  {
    PB::TextFormatter::format(a2, "covTraceAfterCorrection", *((double *)this + 13));
    __int16 v5 = *((_WORD *)this + 86);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "covTraceBeforeCorrection", *((double *)this + 14));
  }
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "dX", v8);
  }
  __int16 v9 = *((_WORD *)this + 86);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "lastStateTimestamp", *((double *)this + 15));
    __int16 v9 = *((_WORD *)this + 86);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "lidAngleDeg", *((double *)this + 16));
  if ((*((_WORD *)this + 86) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "measurementUpdateType", *((_DWORD *)this + 42));
LABEL_11:
  uint64_t v10 = (double *)*((void *)this + 4);
  uint64_t v11 = (double *)*((void *)this + 5);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(a2, "residual", v12);
  }
  uint64_t v13 = (double *)*((void *)this + 7);
  uint64_t v14 = (double *)*((void *)this + 8);
  while (v13 != v14)
  {
    double v15 = *v13++;
    PB::TextFormatter::format(a2, "stateQfbAfterCorrection", v15);
  }
  uint64_t v16 = (double *)*((void *)this + 10);
  uint64_t v17 = (double *)*((void *)this + 11);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(a2, "stateQfbBeforeCorrection", v18);
  }
  __int16 v19 = *((_WORD *)this + 86);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 17));
    __int16 v19 = *((_WORD *)this + 86);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0) {
        goto LABEL_20;
      }
      goto LABEL_30;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(a2, "wAuxBudNormMeanDps", *((double *)this + 18));
  __int16 v19 = *((_WORD *)this + 86);
  if ((v19 & 0x40) == 0)
  {
LABEL_20:
    if ((v19 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "wAuxFaceNormMeanDps", *((double *)this + 19));
  if ((*((_WORD *)this + 86) & 0x80) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(a2, "wSrcNormMeanDps", *((double *)this + 20));
LABEL_22:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::readFrom(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 8);
    __int16 v9 = (void **)((char *)this + 32);
    char v147 = (char *)this + 48;
    unsigned int v148 = (char *)this + 24;
    uint64_t v10 = (void **)((char *)this + 56);
    uint64_t v11 = (void **)((char *)this + 80);
    unint64_t v145 = (char *)this + 96;
    unint64_t v146 = (char *)this + 72;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((_WORD *)this + 86) |= 0x10u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v25);
          goto LABEL_237;
        case 2u:
          *((_WORD *)this + 86) |= 0x100u;
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          uint64_t v28 = *(void *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v32 = v26 + 1;
              *((void *)a2 + 1) = v26 + 1;
              char v33 = *(unsigned char *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0) {
                goto LABEL_204;
              }
              v29 += 7;
              unint64_t v26 = v32;
              BOOL v18 = v30++ > 8;
            }
            while (!v18);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_204;
          }
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v99 = v26 + 1;
              char v100 = *(unsigned char *)(v28 + v26);
              *((void *)a2 + 1) = v99;
              v31 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                unint64_t v26 = v99;
                BOOL v18 = v98++ > 8;
                if (v18) {
                  goto LABEL_160;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v31) = 0;
              }
            }
            break;
          }
LABEL_204:
          *((_DWORD *)this + 42) = v31;
          goto LABEL_238;
        case 3u:
          if (v24 != 2)
          {
            unint64_t v102 = (char *)*((void *)this + 11);
            unint64_t v101 = *((void *)this + 12);
            if ((unint64_t)v102 >= v101)
            {
              uint64_t v110 = (char *)*v11;
              uint64_t v111 = (v102 - (unsigned char *)*v11) >> 3;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61) {
LABEL_248:
              }
                sub_10000EE98();
              uint64_t v113 = v101 - (void)v110;
              if (v113 >> 2 > v112) {
                unint64_t v112 = v113 >> 2;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v115 = (char *)sub_10000EEB0((uint64_t)v145, v114);
                uint64_t v110 = (char *)*((void *)this + 10);
                unint64_t v102 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v115 = 0;
              }
              unint64_t v134 = &v115[8 * v111];
              *(void *)unint64_t v134 = 0;
              unint64_t v103 = v134 + 8;
              while (v102 != v110)
              {
                uint64_t v135 = *((void *)v102 - 1);
                v102 -= 8;
                *((void *)v134 - 1) = v135;
                v134 -= 8;
              }
              *((void *)this + 10) = v134;
              *((void *)this + 11) = v103;
              *((void *)this + 12) = &v115[8 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unint64_t v102 = 0;
              unint64_t v103 = v102 + 8;
            }
            *((void *)this + 11) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v34 = *((void *)a2 + 1);
          unint64_t v35 = *((void *)a2 + 2);
          while (v34 < v35 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v37 = (char *)*((void *)this + 11);
            unint64_t v36 = *((void *)this + 12);
            if ((unint64_t)v37 >= v36)
            {
              unint64_t v39 = (char *)*v11;
              uint64_t v40 = (v37 - (unsigned char *)*v11) >> 3;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61) {
                goto LABEL_248;
              }
              uint64_t v42 = v36 - (void)v39;
              if (v42 >> 2 > v41) {
                unint64_t v41 = v42 >> 2;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                unint64_t v44 = (char *)sub_10000EEB0((uint64_t)v145, v43);
                unint64_t v39 = (char *)*((void *)this + 10);
                unint64_t v37 = (char *)*((void *)this + 11);
              }
              else
              {
                unint64_t v44 = 0;
              }
              unint64_t v45 = &v44[8 * v40];
              *(void *)unint64_t v45 = 0;
              int v38 = v45 + 8;
              while (v37 != v39)
              {
                uint64_t v46 = *((void *)v37 - 1);
                v37 -= 8;
                *((void *)v45 - 1) = v46;
                v45 -= 8;
              }
              *((void *)this + 10) = v45;
              *((void *)this + 11) = v38;
              *((void *)this + 12) = &v44[8 * v43];
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(void *)unint64_t v37 = 0;
              int v38 = v37 + 8;
            }
            *((void *)this + 11) = v38;
            unint64_t v47 = *((void *)a2 + 1);
            if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)a2 + 2)) {
              goto LABEL_152;
            }
            *(v38 - 1) = *(void *)(*(void *)a2 + v47);
            unint64_t v35 = *((void *)a2 + 2);
            unint64_t v34 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v34;
          }
          goto LABEL_153;
        case 4u:
          if (v24 != 2)
          {
            unint64_t v105 = (char *)*((void *)this + 8);
            unint64_t v104 = *((void *)this + 9);
            if ((unint64_t)v105 >= v104)
            {
              uint64_t v116 = (char *)*v10;
              uint64_t v117 = (v105 - (unsigned char *)*v10) >> 3;
              unint64_t v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 61) {
LABEL_249:
              }
                sub_10000EE98();
              uint64_t v119 = v104 - (void)v116;
              if (v119 >> 2 > v118) {
                unint64_t v118 = v119 >> 2;
              }
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v120 = v118;
              }
              if (v120)
              {
                unint64_t v121 = (char *)sub_10000EEB0((uint64_t)v146, v120);
                uint64_t v116 = (char *)*((void *)this + 7);
                unint64_t v105 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v121 = 0;
              }
              unint64_t v136 = &v121[8 * v117];
              *(void *)unint64_t v136 = 0;
              unint64_t v103 = v136 + 8;
              while (v105 != v116)
              {
                uint64_t v137 = *((void *)v105 - 1);
                v105 -= 8;
                *((void *)v136 - 1) = v137;
                v136 -= 8;
              }
              *((void *)this + 7) = v136;
              *((void *)this + 8) = v103;
              *((void *)this + 9) = &v121[8 * v120];
              if (v116) {
                operator delete(v116);
              }
            }
            else
            {
              *(void *)unint64_t v105 = 0;
              unint64_t v103 = v105 + 8;
            }
            *((void *)this + 8) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v48 = *((void *)a2 + 1);
          unint64_t v49 = *((void *)a2 + 2);
          while (v48 < v49 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v51 = (char *)*((void *)this + 8);
            unint64_t v50 = *((void *)this + 9);
            if ((unint64_t)v51 >= v50)
            {
              int v53 = (char *)*v10;
              uint64_t v54 = (v51 - (unsigned char *)*v10) >> 3;
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61) {
                goto LABEL_249;
              }
              uint64_t v56 = v50 - (void)v53;
              if (v56 >> 2 > v55) {
                unint64_t v55 = v56 >> 2;
              }
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57)
              {
                unint64_t v58 = (char *)sub_10000EEB0((uint64_t)v146, v57);
                int v53 = (char *)*((void *)this + 7);
                unint64_t v51 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v58 = 0;
              }
              unint64_t v59 = &v58[8 * v54];
              *(void *)unint64_t v59 = 0;
              unint64_t v52 = v59 + 8;
              while (v51 != v53)
              {
                uint64_t v60 = *((void *)v51 - 1);
                v51 -= 8;
                *((void *)v59 - 1) = v60;
                v59 -= 8;
              }
              *((void *)this + 7) = v59;
              *((void *)this + 8) = v52;
              *((void *)this + 9) = &v58[8 * v57];
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              *(void *)unint64_t v51 = 0;
              unint64_t v52 = v51 + 8;
            }
            *((void *)this + 8) = v52;
            unint64_t v61 = *((void *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)a2 + 2)) {
              goto LABEL_152;
            }
            *(v52 - 1) = *(void *)(*(void *)a2 + v61);
            unint64_t v49 = *((void *)a2 + 2);
            unint64_t v48 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v48;
          }
          goto LABEL_153;
        case 5u:
          *((_WORD *)this + 86) |= 2u;
          unint64_t v62 = *((void *)a2 + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v62);
          goto LABEL_237;
        case 6u:
          *((_WORD *)this + 86) |= 1u;
          unint64_t v63 = *((void *)a2 + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v63);
          goto LABEL_237;
        case 7u:
          if (v24 != 2)
          {
            uint64_t v107 = (char *)*((void *)this + 5);
            unint64_t v106 = *((void *)this + 6);
            if ((unint64_t)v107 >= v106)
            {
              uint64_t v122 = (char *)*v9;
              uint64_t v123 = (v107 - (unsigned char *)*v9) >> 3;
              unint64_t v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61) {
LABEL_250:
              }
                sub_10000EE98();
              uint64_t v125 = v106 - (void)v122;
              if (v125 >> 2 > v124) {
                unint64_t v124 = v125 >> 2;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v126 = v124;
              }
              if (v126)
              {
                uint64_t v127 = (char *)sub_10000EEB0((uint64_t)v147, v126);
                uint64_t v122 = (char *)*((void *)this + 4);
                uint64_t v107 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v127 = 0;
              }
              char v138 = &v127[8 * v123];
              *(void *)char v138 = 0;
              unint64_t v103 = v138 + 8;
              while (v107 != v122)
              {
                uint64_t v139 = *((void *)v107 - 1);
                v107 -= 8;
                *((void *)v138 - 1) = v139;
                v138 -= 8;
              }
              *((void *)this + 4) = v138;
              *((void *)this + 5) = v103;
              *((void *)this + 6) = &v127[8 * v126];
              if (v122) {
                operator delete(v122);
              }
            }
            else
            {
              *(void *)uint64_t v107 = 0;
              unint64_t v103 = v107 + 8;
            }
            *((void *)this + 5) = v103;
            goto LABEL_233;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v64 = *((void *)a2 + 1);
          unint64_t v65 = *((void *)a2 + 2);
          while (v64 < v65 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v67 = (char *)*((void *)this + 5);
            unint64_t v66 = *((void *)this + 6);
            if ((unint64_t)v67 >= v66)
            {
              uint64_t v69 = (char *)*v9;
              uint64_t v70 = (v67 - (unsigned char *)*v9) >> 3;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61) {
                goto LABEL_250;
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 2 > v71) {
                unint64_t v71 = v72 >> 2;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                unint64_t v74 = (char *)sub_10000EEB0((uint64_t)v147, v73);
                uint64_t v69 = (char *)*((void *)this + 4);
                uint64_t v67 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v74 = 0;
              }
              int v75 = &v74[8 * v70];
              *(void *)int v75 = 0;
              unint64_t v68 = v75 + 8;
              while (v67 != v69)
              {
                uint64_t v76 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              *((void *)this + 4) = v75;
              *((void *)this + 5) = v68;
              *((void *)this + 6) = &v74[8 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(void *)uint64_t v67 = 0;
              unint64_t v68 = v67 + 8;
            }
            *((void *)this + 5) = v68;
            unint64_t v77 = *((void *)a2 + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)a2 + 2)) {
              goto LABEL_152;
            }
            *(v68 - 1) = *(void *)(*(void *)a2 + v77);
            unint64_t v65 = *((void *)a2 + 2);
            unint64_t v64 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v64;
          }
          goto LABEL_153;
        case 8u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v78 = *((void *)a2 + 1);
            unint64_t v79 = *((void *)a2 + 2);
            while (v78 < v79 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v81 = (char *)*((void *)this + 2);
              unint64_t v80 = *((void *)this + 3);
              if ((unint64_t)v81 >= v80)
              {
                char v83 = (char *)*v8;
                uint64_t v84 = (v81 - (unsigned char *)*v8) >> 3;
                unint64_t v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61) {
                  goto LABEL_251;
                }
                uint64_t v86 = v80 - (void)v83;
                if (v86 >> 2 > v85) {
                  unint64_t v85 = v86 >> 2;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  unint64_t v88 = (char *)sub_10000EEB0((uint64_t)v148, v87);
                  char v83 = (char *)*((void *)this + 1);
                  uint64_t v81 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v88 = 0;
                }
                unint64_t v89 = &v88[8 * v84];
                *(void *)unint64_t v89 = 0;
                unint64_t v82 = v89 + 8;
                while (v81 != v83)
                {
                  uint64_t v90 = *((void *)v81 - 1);
                  v81 -= 8;
                  *((void *)v89 - 1) = v90;
                  v89 -= 8;
                }
                *((void *)this + 1) = v89;
                *((void *)this + 2) = v82;
                *((void *)this + 3) = &v88[8 * v87];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                *(void *)uint64_t v81 = 0;
                unint64_t v82 = v81 + 8;
              }
              *((void *)this + 2) = v82;
              unint64_t v91 = *((void *)a2 + 1);
              if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((void *)a2 + 2))
              {
LABEL_152:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v82 - 1) = *(void *)(*(void *)a2 + v91);
              unint64_t v79 = *((void *)a2 + 2);
              unint64_t v78 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v78;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v109 = (char *)*((void *)this + 2);
            unint64_t v108 = *((void *)this + 3);
            if ((unint64_t)v109 >= v108)
            {
              int v128 = (char *)*v8;
              uint64_t v129 = (v109 - (unsigned char *)*v8) >> 3;
              unint64_t v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61) {
LABEL_251:
              }
                sub_10000EE98();
              uint64_t v131 = v108 - (void)v128;
              if (v131 >> 2 > v130) {
                unint64_t v130 = v131 >> 2;
              }
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v132 = v130;
              }
              if (v132)
              {
                unint64_t v133 = (char *)sub_10000EEB0((uint64_t)v148, v132);
                int v128 = (char *)*((void *)this + 1);
                unint64_t v109 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v133 = 0;
              }
              uint64_t v140 = &v133[8 * v129];
              *(void *)uint64_t v140 = 0;
              unint64_t v103 = v140 + 8;
              while (v109 != v128)
              {
                uint64_t v141 = *((void *)v109 - 1);
                v109 -= 8;
                *((void *)v140 - 1) = v141;
                v140 -= 8;
              }
              *((void *)this + 1) = v140;
              *((void *)this + 2) = v103;
              *((void *)this + 3) = &v133[8 * v132];
              if (v128) {
                operator delete(v128);
              }
            }
            else
            {
              *(void *)unint64_t v109 = 0;
              unint64_t v103 = v109 + 8;
            }
            *((void *)this + 2) = v103;
LABEL_233:
            unint64_t v142 = *((void *)a2 + 1);
            if (v142 <= 0xFFFFFFFFFFFFFFF7 && v142 + 8 <= *((void *)a2 + 2))
            {
              *(v103 - 1) = *(void *)(*(void *)a2 + v142);
LABEL_237:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_235:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_238:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 9u:
          *((_WORD *)this + 86) |= 0x80u;
          unint64_t v92 = *((void *)a2 + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v92);
          goto LABEL_237;
        case 0xAu:
          *((_WORD *)this + 86) |= 0x20u;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v93);
          goto LABEL_237;
        case 0xBu:
          *((_WORD *)this + 86) |= 0x40u;
          unint64_t v94 = *((void *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v94);
          goto LABEL_237;
        case 0xCu:
          *((_WORD *)this + 86) |= 8u;
          unint64_t v95 = *((void *)a2 + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v95);
          goto LABEL_237;
        case 0xDu:
          *((_WORD *)this + 86) |= 4u;
          unint64_t v96 = *((void *)a2 + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)a2 + 2)) {
            goto LABEL_235;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v96);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_238;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 172);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 136), 1u);
    __int16 v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 2u);
  }
  __int16 v5 = *(double **)(v3 + 80);
  uint64_t v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  double v8 = *(double **)(v3 + 56);
  __int16 v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  __int16 v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 112), 5u);
    __int16 v11 = *(_WORD *)(v3 + 172);
  }
  if (v11) {
    this = PB::Writer::write(a2, *(double *)(v3 + 104), 6u);
  }
  uint64_t v12 = *(double **)(v3 + 32);
  char v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    double v14 = *v12++;
    this = PB::Writer::write(a2, v14, 7u);
  }
  unint64_t v15 = *(double **)(v3 + 8);
  unint64_t v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    double v17 = *v15++;
    this = PB::Writer::write(a2, v17, 8u);
  }
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 160), 9u);
    __int16 v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0xAu);
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0) {
      goto LABEL_25;
    }
LABEL_30:
    this = PB::Writer::write(a2, *(double *)(v3 + 128), 0xCu);
    if ((*(_WORD *)(v3 + 172) & 4) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(double *)(v3 + 152), 0xBu);
  __int16 v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) != 0) {
    goto LABEL_30;
  }
LABEL_25:
  if ((v18 & 4) == 0) {
    return this;
  }
LABEL_31:
  double v19 = *(double *)(v3 + 120);

  return PB::Writer::write(a2, v19, 0xDu);
}

BOOL CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 172);
  __int16 v3 = *(_WORD *)(a2 + 172);
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(double *)(a1 + 136) != *(double *)(a2 + 136)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0 || *(_DWORD *)(a1 + 168) != *(_DWORD *)(a2 + 168)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
    return 0;
  }
  __int16 v5 = *(double **)(a1 + 80);
  __int16 v4 = *(double **)(a1 + 88);
  uint64_t v6 = *(double **)(a2 + 80);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 88) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  double v8 = *(double **)(a1 + 56);
  double v7 = *(double **)(a1 + 64);
  __int16 v9 = *(double **)(a2 + 56);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 64) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 112) != *(double *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 104) != *(double *)(a2 + 104)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  __int16 v11 = *(double **)(a1 + 32);
  double v10 = *(double **)(a1 + 40);
  uint64_t v12 = *(double **)(a2 + 32);
  if ((char *)v10 - (char *)v11 != *(void *)(a2 + 40) - (void)v12) {
    return 0;
  }
  while (v11 != v10)
  {
    if (*v11 != *v12) {
      return 0;
    }
    ++v11;
    ++v12;
  }
  double v14 = *(double **)(a1 + 8);
  char v13 = *(double **)(a1 + 16);
  unint64_t v15 = *(double **)(a2 + 8);
  if ((char *)v13 - (char *)v14 != *(void *)(a2 + 16) - (void)v15) {
    return 0;
  }
  while (v14 != v13)
  {
    if (*v14 != *v15) {
      return 0;
    }
    ++v14;
    ++v15;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(double *)(a1 + 160) != *(double *)(a2 + 160)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(double *)(a1 + 144) != *(double *)(a2 + 144)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(double *)(a1 + 152) != *(double *)(a2 + 152)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 128) != *(double *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  BOOL v16 = (v3 & 4) == 0;
  if ((v2 & 4) != 0) {
    return (v3 & 4) != 0 && *(double *)(a1 + 120) == *(double *)(a2 + 120);
  }
  return v16;
}

uint64_t CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::hash_value(CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate *this)
{
  if ((*((_WORD *)this + 86) & 0x10) != 0)
  {
    if (*((double *)this + 17) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 17);
    }
    if ((*((_WORD *)this + 86) & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 86) & 0x100) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 42);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  uint64_t v5 = PBHashBytes();
  __int16 v6 = *((_WORD *)this + 86);
  if ((v6 & 2) != 0)
  {
    if (*((double *)this + 14) == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *((void *)this + 14);
    }
    if (v6) {
      goto LABEL_11;
    }
LABEL_18:
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  uint64_t v7 = 0;
  if ((v6 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_11:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 13);
  }
LABEL_19:
  uint64_t v9 = PBHashBytes();
  uint64_t v10 = PBHashBytes();
  __int16 v11 = *((_WORD *)this + 86);
  if ((v11 & 0x80) == 0)
  {
    double v12 = 0.0;
    if ((v11 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_36:
    double v13 = 0.0;
    if ((v11 & 0x40) != 0) {
      goto LABEL_24;
    }
LABEL_37:
    double v14 = 0.0;
    if ((v11 & 8) != 0) {
      goto LABEL_27;
    }
    goto LABEL_38;
  }
  double v12 = *((double *)this + 20);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v11 & 0x20) == 0) {
    goto LABEL_36;
  }
LABEL_21:
  double v13 = *((double *)this + 18);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v11 & 0x40) == 0) {
    goto LABEL_37;
  }
LABEL_24:
  double v14 = *((double *)this + 19);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v11 & 8) != 0)
  {
LABEL_27:
    double v15 = *((double *)this + 16);
    if (v15 == 0.0) {
      double v15 = 0.0;
    }
    if ((v11 & 4) != 0) {
      goto LABEL_30;
    }
LABEL_39:
    double v16 = 0.0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
  }
LABEL_38:
  double v15 = 0.0;
  if ((v11 & 4) == 0) {
    goto LABEL_39;
  }
LABEL_30:
  double v16 = *((double *)this + 15);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ v5 ^ v7 ^ v8 ^ v9 ^ v10 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16;
}

double CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  *(void *)this = off_1003A6320;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6320;
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  *(void *)this = off_1003A6320;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate(this);

  operator delete();
}

CMMsl::HeadToHeadsetTransformationEstimate *CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(CMMsl::HeadToHeadsetTransformationEstimate *this, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  *(void *)this = off_1003A6320;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if ((*((unsigned char *)a2 + 80) & 4) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    *((unsigned char *)this + 80) = 4;
    *((void *)this + 9) = v5;
  }
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  char v6 = *((unsigned char *)a2 + 80);
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    *((unsigned char *)this + 80) |= 2u;
    *((void *)this + 8) = v7;
    char v6 = *((unsigned char *)a2 + 80);
  }
  if (v6)
  {
    uint64_t v8 = *((void *)a2 + 7);
    *((unsigned char *)this + 80) |= 1u;
    *((void *)this + 7) = v8;
  }
  return this;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, const CMMsl::HeadToHeadsetTransformationEstimate *a2)
{
  if ((const CMMsl::HeadToHeadsetTransformationEstimate *)a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeadToHeadsetTransformationEstimate *a2, CMMsl::HeadToHeadsetTransformationEstimate *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  double result = *((double *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((double *)a2 + 7) = result;
  return result;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6320;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::HeadToHeadsetTransformationEstimate::HeadToHeadsetTransformationEstimate((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v13 = v5;
    long long v8 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v14 = v8;
    CMMsl::HeadToHeadsetTransformationEstimate::~HeadToHeadsetTransformationEstimate((CMMsl::HeadToHeadsetTransformationEstimate *)v10);
  }
  return a1;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::formatText(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 80)) {
    PB::TextFormatter::format(a2, "lastUpdateTimestamp", *((double *)this + 7));
  }
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "stateCov", v7);
  }
  if ((*((unsigned char *)this + 80) & 2) != 0) {
    PB::TextFormatter::format(a2, "stateCovTrace", *((double *)this + 8));
  }
  long long v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "stateQfb", v10);
  }
  if ((*((unsigned char *)this + 80) & 4) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::readFrom(CMMsl::HeadToHeadsetTransformationEstimate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    long long v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    double v10 = (void **)((char *)this + 32);
    long long v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 80) |= 4u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_120;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v25);
          goto LABEL_122;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v57 = (char *)*((void *)this + 5);
            unint64_t v56 = *((void *)this + 6);
            if ((unint64_t)v57 >= v56)
            {
              unint64_t v61 = (char *)*v10;
              uint64_t v62 = (v57 - (unsigned char *)*v10) >> 3;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61) {
LABEL_131:
              }
                sub_10000EE98();
              uint64_t v64 = v56 - (void)v61;
              if (v64 >> 2 > v63) {
                unint64_t v63 = v64 >> 2;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v66 = (char *)sub_10000EEB0((uint64_t)v11, v65);
                unint64_t v61 = (char *)*((void *)this + 4);
                unint64_t v57 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v66 = 0;
              }
              unint64_t v73 = &v66[8 * v62];
              *(void *)unint64_t v73 = 0;
              unint64_t v58 = v73 + 8;
              while (v57 != v61)
              {
                uint64_t v74 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              *((void *)this + 4) = v73;
              *((void *)this + 5) = v58;
              *((void *)this + 6) = &v66[8 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(void *)unint64_t v57 = 0;
              unint64_t v58 = v57 + 8;
            }
            *((void *)this + 5) = v58;
            goto LABEL_118;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            char v29 = (char *)*((void *)this + 5);
            unint64_t v28 = *((void *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_131;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unint64_t v36 = (char *)sub_10000EEB0((uint64_t)v11, v35);
                uint64_t v31 = (char *)*((void *)this + 4);
                char v29 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unsigned int v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((void *)this + 4) = v37;
              *((void *)this + 5) = v30;
              *((void *)this + 6) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)char v29 = 0;
              unsigned int v30 = v29 + 8;
            }
            *((void *)this + 5) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
              goto LABEL_86;
            }
            *(v30 - 1) = *(void *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_87;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v43 = (char *)*((void *)this + 2);
              unint64_t v42 = *((void *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                unint64_t v45 = (char *)*v8;
                uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  goto LABEL_132;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 2 > v47) {
                  unint64_t v47 = v48 >> 2;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unint64_t v50 = (char *)sub_10000EEB0((uint64_t)v9, v49);
                  unint64_t v45 = (char *)*((void *)this + 1);
                  unint64_t v43 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v50 = 0;
                }
                unint64_t v51 = &v50[8 * v46];
                *(void *)unint64_t v51 = 0;
                unint64_t v44 = v51 + 8;
                while (v43 != v45)
                {
                  uint64_t v52 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((void *)this + 1) = v51;
                *((void *)this + 2) = v44;
                *((void *)this + 3) = &v50[8 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(void *)unint64_t v43 = 0;
                unint64_t v44 = v43 + 8;
              }
              *((void *)this + 2) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2))
              {
LABEL_86:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v44 - 1) = *(void *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v40;
            }
LABEL_87:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v60 = (char *)*((void *)this + 2);
            unint64_t v59 = *((void *)this + 3);
            if ((unint64_t)v60 >= v59)
            {
              uint64_t v67 = (char *)*v8;
              uint64_t v68 = (v60 - (unsigned char *)*v8) >> 3;
              unint64_t v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61) {
LABEL_132:
              }
                sub_10000EE98();
              uint64_t v70 = v59 - (void)v67;
              if (v70 >> 2 > v69) {
                unint64_t v69 = v70 >> 2;
              }
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                uint64_t v72 = (char *)sub_10000EEB0((uint64_t)v9, v71);
                uint64_t v67 = (char *)*((void *)this + 1);
                uint64_t v60 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v72 = 0;
              }
              int v75 = &v72[8 * v68];
              *(void *)int v75 = 0;
              unint64_t v58 = v75 + 8;
              while (v60 != v67)
              {
                uint64_t v76 = *((void *)v60 - 1);
                v60 -= 8;
                *((void *)v75 - 1) = v76;
                v75 -= 8;
              }
              *((void *)this + 1) = v75;
              *((void *)this + 2) = v58;
              *((void *)this + 3) = &v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *(void *)uint64_t v60 = 0;
              unint64_t v58 = v60 + 8;
            }
            *((void *)this + 2) = v58;
LABEL_118:
            unint64_t v77 = *((void *)a2 + 1);
            if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((void *)a2 + 2))
            {
              *(v58 - 1) = *(void *)(*(void *)a2 + v77);
LABEL_122:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_120:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_123:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 80) |= 2u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
            goto LABEL_120;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v54);
          goto LABEL_122;
        case 5u:
          *((unsigned char *)this + 80) |= 1u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((void *)a2 + 2)) {
            goto LABEL_120;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v55);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_123;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if ((*(unsigned char *)(this + 80) & 4) != 0) {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
  }
  int v4 = *(double **)(v3 + 32);
  long long v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  double v7 = *(double **)(v3 + 8);
  long long v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  char v10 = *(unsigned char *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
    char v10 = *(unsigned char *)(v3 + 80);
  }
  if (v10)
  {
    double v11 = *(double *)(v3 + 56);
    return PB::Writer::write(a2, v11, 5u);
  }
  return this;
}

BOOL CMMsl::HeadToHeadsetTransformationEstimate::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 80) & 4) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 4) != 0)
  {
    return 0;
  }
  uint64_t v3 = *(double **)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  int v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 8);
  long long v5 = *(double **)(a1 + 16);
  double v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  if ((*(unsigned char *)(a1 + 80) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 80) & 2) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 2) != 0)
  {
    return 0;
  }
  BOOL v8 = (*(unsigned char *)(a2 + 80) & 1) == 0;
  if (*(unsigned char *)(a1 + 80)) {
    return (*(unsigned char *)(a2 + 80) & 1) != 0 && *(double *)(a1 + 56) == *(double *)(a2 + 56);
  }
  return v8;
}

uint64_t CMMsl::HeadToHeadsetTransformationEstimate::hash_value(CMMsl::HeadToHeadsetTransformationEstimate *this)
{
  if ((*((unsigned char *)this + 80) & 4) != 0)
  {
    if (*((double *)this + 9) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 9);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 80) & 2) != 0)
  {
    double v5 = *((double *)this + 8);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if (*((unsigned char *)this + 80)) {
      goto LABEL_8;
    }
LABEL_14:
    double v6 = 0.0;
    return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
  }
  double v5 = 0.0;
  if ((*((unsigned char *)this + 80) & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5 ^ *(void *)&v6;
}

void *CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(void *this)
{
  *this = off_1003A6358;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A6358;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingBehaviorUpdate::~HeadTrackingBehaviorUpdate(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t this, const CMMsl::HeadTrackingBehaviorUpdate *a2)
{
  *(void *)this = off_1003A6358;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = off_1003A6358;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A6358;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A6358;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingBehaviorUpdate *a2, CMMsl::HeadTrackingBehaviorUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::HeadTrackingBehaviorUpdate(uint64_t result, uint64_t a2)
{
  *(void *)double result = off_1003A6358;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)double result = off_1003A6358;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::formatText(CMMsl::HeadTrackingBehaviorUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "trackingBehavior", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::readFrom(CMMsl::HeadTrackingBehaviorUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::HeadTrackingBehaviorUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::HeadTrackingBehaviorUpdate::hash_value(CMMsl::HeadTrackingBehaviorUpdate *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void *CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(void *this)
{
  *this = off_1003A6390;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A6390;
  this[1] = 0;
  return this;
}

void CMMsl::HeadTrackingClientModeUpdate::~HeadTrackingClientModeUpdate(CMMsl::HeadTrackingClientModeUpdate *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t this, const CMMsl::HeadTrackingClientModeUpdate *a2)
{
  *(void *)this = off_1003A6390;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

{
  int v2;

  *(void *)this = off_1003A6390;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A6390;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A6390;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HeadTrackingClientModeUpdate *a2, CMMsl::HeadTrackingClientModeUpdate *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::HeadTrackingClientModeUpdate(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = off_1003A6390;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)BOOL result = off_1003A6390;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::formatText(CMMsl::HeadTrackingClientModeUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "clientMode", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::readFrom(CMMsl::HeadTrackingClientModeUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

BOOL CMMsl::HeadTrackingClientModeUpdate::operator==(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 12);
  BOOL result = (*(unsigned char *)(a2 + 12) & 1) == 0;
  if (v3) {
    return (*(unsigned char *)(a2 + 12) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t CMMsl::HeadTrackingClientModeUpdate::hash_value(CMMsl::HeadTrackingClientModeUpdate *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t CMMsl::HeartRateReference::HeartRateReference(uint64_t this)
{
  *(void *)this = off_1003A63C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A63C8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void CMMsl::HeartRateReference::~HeartRateReference(CMMsl::HeartRateReference *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::HeartRateReference::HeartRateReference(CMMsl::HeartRateReference *this, const CMMsl::HeartRateReference *a2)
{
  *(void *)this = off_1003A63C8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    double result = *((double *)a2 + 3);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((double *)this + 3) = result;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, const CMMsl::HeartRateReference *a2)
{
  if ((const CMMsl::HeartRateReference *)a1 != a2)
  {
    CMMsl::HeartRateReference::HeartRateReference((CMMsl::HeartRateReference *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::HeartRateReference *a2, CMMsl::HeartRateReference *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::HeartRateReference::HeartRateReference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A63C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A63C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::HeartRateReference::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[0] = off_1003A63C8;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::HeartRateReference::formatText(CMMsl::HeartRateReference *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if (v5)
  {
    PB::TextFormatter::format(a2, "bpm", *((void *)this + 1));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "globalMachtime", *((double *)this + 2));
  if ((*((unsigned char *)this + 32) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "localMachtime", *((double *)this + 3));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HeartRateReference::readFrom(CMMsl::HeartRateReference *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 32) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v25 = 0;
            if (v2 <= v21) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                uint64_t v25 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v30 = v21++;
              char v31 = *(unsigned char *)(v22 + v30);
              *((void *)a2 + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              BOOL v14 = v29++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v25 = 0;
            }
LABEL_51:
            unint64_t v2 = v30 + 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v2 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                break;
              }
            }
          }
LABEL_52:
          *((void *)this + 1) = v25;
        }
        else
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
        }
        goto LABEL_53;
      }
      *((unsigned char *)this + 32) |= 4u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::HeartRateReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 32) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 3u);
}

BOOL CMMsl::HeartRateReference::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 2) == 0;
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
    return (*(unsigned char *)(a2 + 32) & 2) != 0 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  }
  return v2;
}

uint64_t CMMsl::HeartRateReference::hash_value(CMMsl::HeartRateReference *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 4) != 0)
    {
LABEL_3:
      double v2 = *((double *)this + 3);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 32) & 2) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      double v3 = 0.0;
      return *(void *)&v2 ^ v1 ^ *(void *)&v3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return *(void *)&v2 ^ v1 ^ *(void *)&v3;
}

void *CMMsl::HgAccel::HgAccel(void *this)
{
  *this = off_1003A6400;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A6400;
  this[1] = 0;
  return this;
}

void CMMsl::HgAccel::~HgAccel(CMMsl::HgAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A6400;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::HgAccel::~HgAccel(this);

  operator delete();
}

void *CMMsl::HgAccel::HgAccel(void *this, const CMMsl::HgAccel *a2)
{
  *this = off_1003A6400;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::HgAccel *CMMsl::HgAccel::operator=(const CMMsl::HgAccel *a1, const CMMsl::HgAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::HgAccel::HgAccel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::HgAccel::~HgAccel((CMMsl::HgAccel *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::HgAccel *a2, CMMsl::HgAccel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::HgAccel::HgAccel(void *a1, uint64_t a2)
{
  *a1 = off_1003A6400;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A6400;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A6400;
    v6[1] = v4;
    CMMsl::HgAccel::~HgAccel((CMMsl::HgAccel *)v6);
  }
  return a1;
}

uint64_t CMMsl::HgAccel::formatText(CMMsl::HgAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::HgAccel::readFrom(CMMsl::HgAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::HgAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::HgAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::Accel::operator==(v2, v3);
  }
  return result;
}

CMMsl::Accel *CMMsl::HgAccel::hash_value(CMMsl::HgAccel *this)
{
  BOOL result = (CMMsl::Accel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::Accel *)CMMsl::Accel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::HgAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::ISPPacket::ISPPacket(uint64_t this)
{
  *(void *)this = off_1003A6438;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(void *)this = off_1003A6438;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void CMMsl::ISPPacket::~ISPPacket(CMMsl::ISPPacket *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::ISPPacket::ISPPacket(CMMsl::ISPPacket *this, const CMMsl::ISPPacket *a2)
{
  *(void *)this = off_1003A6438;
  *((_DWORD *)this + 32) = 0;
  int v2 = *((_DWORD *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 32) = 1;
    *((void *)this + 1) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 26);
    v3 |= 0x100000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 26) = v4;
    int v2 = *((_DWORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 27);
    v3 |= 0x200000u;
    *((_DWORD *)this + 32) = v3;
    *((_DWORD *)this + 27) = v4;
    int v2 = *((_DWORD *)a2 + 32);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x400000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 28) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *((_DWORD *)a2 + 25);
  v3 |= 0x80000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 25) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *((_DWORD *)a2 + 22);
  v3 |= 0x10000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 22) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *((_DWORD *)a2 + 23);
  v3 |= 0x20000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 23) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *((_DWORD *)a2 + 24);
  v3 |= 0x40000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 24) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *((_DWORD *)a2 + 21);
  v3 |= 0x8000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 21) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *((_DWORD *)a2 + 17);
  v3 |= 0x800u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 17) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *((_DWORD *)a2 + 18);
  v3 |= 0x1000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 18) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *((_DWORD *)a2 + 19);
  v3 |= 0x2000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 19) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v4 = *((void *)a2 + 4);
  v3 |= 8u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 4) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v5 = *((_DWORD *)a2 + 16);
  v3 |= 0x400u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 16) = v5;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v4 = *((void *)a2 + 2);
  v3 |= 2u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 2) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x80u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 13) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x100u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 14) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *((_DWORD *)a2 + 15);
  v3 |= 0x200u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 15) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *((_DWORD *)a2 + 20);
  v3 |= 0x4000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 20) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x800000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 29) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x1000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 30) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x2000000u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 31) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v4 = *((void *)a2 + 3);
  v3 |= 4u;
  *((_DWORD *)this + 32) = v3;
  *((void *)this + 3) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 10) = v4;
  int v2 = *((_DWORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *((_DWORD *)this + 32) = v3;
  *((_DWORD *)this + 11) = v4;
  if ((*((_DWORD *)a2 + 32) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_54:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 32) = v3 | 0x40;
  *((_DWORD *)this + 12) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, const CMMsl::ISPPacket *a2)
{
  if (a1 != a2)
  {
    CMMsl::ISPPacket::ISPPacket((CMMsl::ISPPacket *)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::ISPPacket *a2, CMMsl::ISPPacket *a3)
{
  int v3 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v4;
  LODWORD(v4) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  LODWORD(v7) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v7;
  LODWORD(v7) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LODWORD(v7) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v7;
  LODWORD(v7) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v7;
  LODWORD(v7) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v7;
  LODWORD(v7) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  LODWORD(v8) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v8;
  LODWORD(v8) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v8;
  float result = *((float *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((float *)a2 + 12) = result;
  return result;
}

float CMMsl::ISPPacket::ISPPacket(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6438;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 48);
  *(float *)(a1 + 48) = result;
  return result;
}

CMMsl *CMMsl::ISPPacket::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::ISPPacket::ISPPacket((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::ISPPacket *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::ISPPacket::formatText(CMMsl::ISPPacket *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "accelUnfilteredX", *((float *)this + 10));
    int v5 = *((_DWORD *)this + 32);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelUnfilteredY", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "accelUnfilteredZ", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "accelX", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "accelY", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "accelZ", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "flags", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "gravityX", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "gravityY", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "gravityZ", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "gyroBiasErrorEstimate", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "quaternionPredictedW", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "quaternionPredictedX", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "quaternionPredictedY", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "quaternionPredictedZ", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 25));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 26));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 27));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "rotationRateX", *((float *)this + 29));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "rotationRateY", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "rotationRateZ", *((float *)this + 31));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "timestampAccel", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "timestampAccelUnfiltered", *((double *)this + 3));
  if ((*((_DWORD *)this + 32) & 8) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "timestampPrediction", *((double *)this + 4));
LABEL_28:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ISPPacket::readFrom(CMMsl::ISPPacket *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_DWORD *)this + 32) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 3u:
              *((_DWORD *)this + 32) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 4u:
              *((_DWORD *)this + 32) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 5u:
              *((_DWORD *)this + 32) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 6u:
              *((_DWORD *)this + 32) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 7u:
              *((_DWORD *)this + 32) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 8u:
              *((_DWORD *)this + 32) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 9u:
              *((_DWORD *)this + 32) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0xAu:
              *((_DWORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0xBu:
              *((_DWORD *)this + 32) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0xCu:
              *((_DWORD *)this + 32) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0xDu:
              *((_DWORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xEu:
              *((_DWORD *)this + 32) |= 0x400u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_125;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *((_DWORD *)this + 16) = v25;
LABEL_117:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *((_DWORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0x10u:
              *((_DWORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x11u:
              *((_DWORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x12u:
              *((_DWORD *)this + 32) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x13u:
              *((_DWORD *)this + 32) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x14u:
              *((_DWORD *)this + 32) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x15u:
              *((_DWORD *)this + 32) |= 0x1000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x16u:
              *((_DWORD *)this + 32) |= 0x2000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x17u:
              *((_DWORD *)this + 32) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_97:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_116;
            case 0x18u:
              *((_DWORD *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x19u:
              *((_DWORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_106;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_115;
            case 0x1Au:
              *((_DWORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_115:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_116:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_106:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_117;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_117;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::ISPPacket::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 128);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 2u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 3u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 4u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 5u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 7u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 8u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 9u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xAu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0xBu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xCu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xDu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0xEu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xFu);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x10u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x11u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0x12u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x13u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x14u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x15u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x16u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0x17u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x19u);
    if ((*(_DWORD *)(v3 + 128) & 0x40) == 0) {
      return this;
    }
    goto LABEL_53;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x18u);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(a2, v5, 0x1Au);
}

BOOL CMMsl::ISPPacket::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 128);
  int v3 = *(_DWORD *)(a2 + 128);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 0x100000) != 0)
  {
    if ((v3 & 0x100000) == 0 || *(float *)(a1 + 104) != *(float *)(a2 + 104)) {
      return 0;
    }
  }
  else if ((v3 & 0x100000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200000) != 0)
  {
    if ((v3 & 0x200000) == 0 || *(float *)(a1 + 108) != *(float *)(a2 + 108)) {
      return 0;
    }
  }
  else if ((v3 & 0x200000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400000) != 0)
  {
    if ((v3 & 0x400000) == 0 || *(float *)(a1 + 112) != *(float *)(a2 + 112)) {
      return 0;
    }
  }
  else if ((v3 & 0x400000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80000) != 0)
  {
    if ((v3 & 0x80000) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
      return 0;
    }
  }
  else if ((v3 & 0x80000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10000) != 0)
  {
    if ((v3 & 0x10000) == 0 || *(float *)(a1 + 88) != *(float *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v3 & 0x10000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20000) != 0)
  {
    if ((v3 & 0x20000) == 0 || *(float *)(a1 + 92) != *(float *)(a2 + 92)) {
      return 0;
    }
  }
  else if ((v3 & 0x20000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40000) != 0)
  {
    if ((v3 & 0x40000) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
      return 0;
    }
  }
  else if ((v3 & 0x40000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    if ((v3 & 0x8000) == 0 || *(float *)(a1 + 84) != *(float *)(a2 + 84)) {
      return 0;
    }
  }
  else if ((v3 & 0x8000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800) != 0)
  {
    if ((v3 & 0x800) == 0 || *(float *)(a1 + 68) != *(float *)(a2 + 68)) {
      return 0;
    }
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((v3 & 0x1000) == 0 || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000) != 0)
  {
    if ((v3 & 0x2000) == 0 || *(float *)(a1 + 76) != *(float *)(a2 + 76)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x400) != 0)
  {
    if ((v3 & 0x400) == 0 || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)) {
      return 0;
    }
  }
  else if ((v3 & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((v2 & 0x100) != 0)
  {
    if ((v3 & 0x100) == 0 || *(float *)(a1 + 56) != *(float *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((v3 & 0x100) != 0)
  {
    return 0;
  }
  if ((v2 & 0x200) != 0)
  {
    if ((v3 & 0x200) == 0 || *(float *)(a1 + 60) != *(float *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((v3 & 0x200) != 0)
  {
    return 0;
  }
  if ((v2 & 0x4000) != 0)
  {
    if ((v3 & 0x4000) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
      return 0;
    }
  }
  else if ((v3 & 0x4000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x800000) != 0)
  {
    if ((v3 & 0x800000) == 0 || *(float *)(a1 + 116) != *(float *)(a2 + 116)) {
      return 0;
    }
  }
  else if ((v3 & 0x800000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x1000000) != 0)
  {
    if ((v3 & 0x1000000) == 0 || *(float *)(a1 + 120) != *(float *)(a2 + 120)) {
      return 0;
    }
  }
  else if ((v3 & 0x1000000) != 0)
  {
    return 0;
  }
  if ((v2 & 0x2000000) != 0)
  {
    if ((v3 & 0x2000000) == 0 || *(float *)(a1 + 124) != *(float *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((v3 & 0x2000000) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  BOOL v4 = (*(_DWORD *)(a2 + 128) & 0x40) == 0;
  if ((v2 & 0x40) != 0) {
    return (v3 & 0x40) != 0 && *(float *)(a1 + 48) == *(float *)(a2 + 48);
  }
  return v4;
}

uint64_t CMMsl::ISPPacket::hash_value(CMMsl::ISPPacket *this)
{
  int v1 = *((_DWORD *)this + 32);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
LABEL_79:
    uint64_t v4 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
LABEL_80:
    uint64_t v6 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_9;
    }
LABEL_81:
    uint64_t v8 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_12;
    }
LABEL_82:
    uint64_t v10 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_15;
    }
LABEL_83:
    uint64_t v12 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_18;
    }
LABEL_84:
    uint64_t v14 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_21;
    }
LABEL_85:
    uint64_t v16 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_24;
    }
LABEL_86:
    uint64_t v18 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_27;
    }
LABEL_87:
    uint64_t v20 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_30;
    }
LABEL_88:
    uint64_t v22 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_33;
    }
LABEL_89:
    uint64_t v24 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_36;
    }
LABEL_90:
    double v25 = 0.0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_79;
  }
LABEL_3:
  float v3 = *((float *)this + 26);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_80;
  }
LABEL_6:
  float v5 = *((float *)this + 27);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_81;
  }
LABEL_9:
  float v7 = *((float *)this + 28);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_82;
  }
LABEL_12:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x10000) == 0) {
    goto LABEL_83;
  }
LABEL_15:
  float v11 = *((float *)this + 22);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_84;
  }
LABEL_18:
  float v13 = *((float *)this + 23);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_85;
  }
LABEL_21:
  float v15 = *((float *)this + 24);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_86;
  }
LABEL_24:
  float v17 = *((float *)this + 21);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_87;
  }
LABEL_27:
  float v19 = *((float *)this + 17);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_88;
  }
LABEL_30:
  float v21 = *((float *)this + 18);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_89;
  }
LABEL_33:
  float v23 = *((float *)this + 19);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_90;
  }
LABEL_36:
  double v25 = *((double *)this + 4);
  if (v25 == 0.0) {
    double v25 = 0.0;
  }
  if ((v1 & 0x400) != 0)
  {
LABEL_39:
    uint64_t v26 = *((unsigned int *)this + 16);
    if ((v1 & 2) != 0) {
      goto LABEL_40;
    }
LABEL_92:
    double v27 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_43;
    }
LABEL_93:
    uint64_t v29 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_46;
    }
LABEL_94:
    uint64_t v31 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_49;
    }
LABEL_95:
    uint64_t v33 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_52;
    }
LABEL_96:
    uint64_t v35 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_55;
    }
LABEL_97:
    uint64_t v37 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_58;
    }
LABEL_98:
    uint64_t v39 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_61;
    }
LABEL_99:
    uint64_t v41 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_64;
    }
LABEL_100:
    double v42 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_67;
    }
LABEL_101:
    uint64_t v44 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_70;
    }
    goto LABEL_102;
  }
LABEL_91:
  uint64_t v26 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_92;
  }
LABEL_40:
  double v27 = *((double *)this + 2);
  if (v27 == 0.0) {
    double v27 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_93;
  }
LABEL_43:
  float v28 = *((float *)this + 13);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_94;
  }
LABEL_46:
  float v30 = *((float *)this + 14);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_95;
  }
LABEL_49:
  float v32 = *((float *)this + 15);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_96;
  }
LABEL_52:
  float v34 = *((float *)this + 20);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_97;
  }
LABEL_55:
  float v36 = *((float *)this + 29);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_98;
  }
LABEL_58:
  float v38 = *((float *)this + 30);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_99;
  }
LABEL_61:
  float v40 = *((float *)this + 31);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_100;
  }
LABEL_64:
  double v42 = *((double *)this + 3);
  if (v42 == 0.0) {
    double v42 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_101;
  }
LABEL_67:
  float v43 = *((float *)this + 10);
  uint64_t v44 = LODWORD(v43);
  if (v43 == 0.0) {
    uint64_t v44 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_70:
    float v45 = *((float *)this + 11);
    uint64_t v46 = LODWORD(v45);
    if (v45 == 0.0) {
      uint64_t v46 = 0;
    }
    if ((v1 & 0x40) != 0) {
      goto LABEL_73;
    }
LABEL_103:
    uint64_t v48 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(void *)&v25 ^ v26 ^ *(void *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(void *)&v42 ^ v44 ^ v46 ^ v48;
  }
LABEL_102:
  uint64_t v46 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_103;
  }
LABEL_73:
  float v47 = *((float *)this + 12);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ *(void *)&v25 ^ v26 ^ *(void *)&v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ *(void *)&v42 ^ v44 ^ v46 ^ v48;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this)
{
  *(void *)this = off_1003A6470;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A6470;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void CMMsl::InEarAdditionalState::~InEarAdditionalState(CMMsl::InEarAdditionalState *this)
{
  *(void *)this = off_1003A6470;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6470;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = off_1003A6470;
  double v2 = (void **)((char *)this + 8);
  sub_100274A84(&v2);
  PB::Base::~Base(this);
  operator delete();
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t this, const CMMsl::InEarAdditionalState *a2)
{
  *(void *)this = off_1003A6470;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 36) = 0;
  if (*((void *)a2 + 1) != *((void *)a2 + 2)) {
    sub_1000703A4();
  }
  if (*((unsigned char *)a2 + 36))
  {
    int v2 = *((_DWORD *)a2 + 8);
    *(unsigned char *)(this + 36) |= 1u;
    *(_DWORD *)(this + 32) = v2;
  }
  return this;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, const CMMsl::InEarAdditionalState *a2)
{
  if ((const CMMsl::InEarAdditionalState *)a1 != a2)
  {
    CMMsl::InEarAdditionalState::InEarAdditionalState((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    *(void *)&long long v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v9;
    uint64_t v9 = v3;
    uint64_t v6 = off_1003A6470;
    uint64_t v10 = (void **)&v7;
    sub_100274A84(&v10);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InEarAdditionalState *a2, CMMsl::InEarAdditionalState *a3)
{
  int v3 = *(_DWORD *)(this + 36);
  *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  uint64_t v5 = *(void *)(this + 16);
  *(void *)(this + 16) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *(void *)(this + 24);
  *(void *)(this + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  LODWORD(v6) = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

uint64_t CMMsl::InEarAdditionalState::InEarAdditionalState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6470;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  sub_100274B44((void **)(a1 + 8));
  *uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarAdditionalState::InEarAdditionalState((uint64_t)&v6, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v4;
    *(void *)&long long v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v9;
    uint64_t v9 = v3;
    uint64_t v6 = off_1003A6470;
    uint64_t v10 = (void **)&v7;
    sub_100274A84(&v10);
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

uint64_t CMMsl::InEarAdditionalState::formatText(CMMsl::InEarAdditionalState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 36)) {
    PB::TextFormatter::format(a2, "lastSampleId", *((_DWORD *)this + 8));
  }
  uint64_t v5 = (uint64_t *)*((void *)this + 1);
  uint64_t v6 = (uint64_t *)*((void *)this + 2);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "slowOptical");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarAdditionalState::readFrom(CMMsl::InEarAdditionalState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 36) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v21 + 1;
            char v33 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v32;
            v26 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v21 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v26) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 8) = v26;
      }
      else
      {
        if (v20 == 1) {
          sub_100071474();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarAdditionalState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base ***)(this + 8);
  uint64_t v5 = *(const PB::Base ***)(this + 16);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    this = PB::Writer::writeSubmessage(a2, v6, 1u);
  }
  if (*(unsigned char *)(v3 + 36))
  {
    unsigned int v7 = *(_DWORD *)(v3 + 32);
    return PB::Writer::writeVarInt(a2, v7, 2u);
  }
  return this;
}

BOOL CMMsl::InEarAdditionalState::operator==(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_10007189C((uint64_t *)(a1 + 8), a2 + 8);
  if (result)
  {
    BOOL result = (*(unsigned char *)(a2 + 36) & 1) == 0;
    if (*(unsigned char *)(a1 + 36)) {
      return (*(unsigned char *)(a2 + 36) & 1) != 0 && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
    }
  }
  return result;
}

uint64_t CMMsl::InEarAdditionalState::hash_value(uint64_t **this)
{
  uint64_t v2 = sub_1000719FC((uint64_t)&v5, this + 1);
  if (*((unsigned char *)this + 36)) {
    uint64_t v3 = *((unsigned int *)this + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 ^ v2;
}

double CMMsl::InEarBaseline::InEarBaseline(CMMsl::InEarBaseline *this)
{
  *(void *)this = off_1003A64A8;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A64A8;
  *((_DWORD *)this + 13) = 0;
  *((_DWORD *)this + 15) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

void CMMsl::InEarBaseline::~InEarBaseline(CMMsl::InEarBaseline *this)
{
  *(void *)this = off_1003A64A8;
  int v4 = (void **)((char *)this + 24);
  sub_100274A84(&v4);
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarBaseline::~InEarBaseline(this);

  operator delete();
}

uint64_t CMMsl::InEarBaseline::InEarBaseline(uint64_t this, const CMMsl::InEarBaseline *a2)
{
  *(void *)this = off_1003A64A8;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + 60) = 0;
  *(void *)(this + 40) = 0;
  if (*((unsigned char *)a2 + 60))
  {
    int v3 = *((_DWORD *)a2 + 12);
    *(unsigned char *)(this + 60) = 1;
    *(_DWORD *)(this + 48) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 60) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 60) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 13);
    *(unsigned char *)(this + 60) = v2;
    *(_DWORD *)(this + 52) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3) != *((void *)a2 + 4)) {
    sub_1000703A4();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v5 = *((unsigned char *)a2 + 60);
  if ((v5 & 4) != 0)
  {
    char v6 = *((unsigned char *)a2 + 56);
    *(unsigned char *)(this + 60) |= 4u;
    *(unsigned char *)(this + 56) = v6;
    char v5 = *((unsigned char *)a2 + 60);
  }
  if ((v5 & 8) != 0)
  {
    char v7 = *((unsigned char *)a2 + 57);
    *(unsigned char *)(this + 60) |= 8u;
    *(unsigned char *)(this + 57) = v7;
  }
  return this;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, const CMMsl::InEarBaseline *a2)
{
  if ((const CMMsl::InEarBaseline *)a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v14;
    char v14 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v15;
    char v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarBaseline *a2, CMMsl::InEarBaseline *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  double result = *((double *)a2 + 6);
  uint64_t v5 = *((void *)this + 6);
  *((double *)this + 6) = result;
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 57);
  *((unsigned char *)this + 57) = *((unsigned char *)a2 + 57);
  *((unsigned char *)a2 + 57) = v10;
  return result;
}

uint64_t CMMsl::InEarBaseline::InEarBaseline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A64A8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  sub_100274B44((void **)(a1 + 24));
  *uint64_t v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v9 = *v4;
  *uint64_t v4 = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t CMMsl::InEarBaseline::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarBaseline::InEarBaseline((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v5;
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    LOBYTE(v6) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v14;
    char v14 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 57);
    *(unsigned char *)(a1 + 57) = v15;
    char v15 = v6;
    CMMsl::InEarBaseline::~InEarBaseline((CMMsl::InEarBaseline *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarBaseline::formatText(CMMsl::InEarBaseline *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "conchaMinAccepted", *((unsigned char *)this + 56));
    char v5 = *((unsigned char *)this + 60);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 12));
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "newOpenLid");
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "oldOpenLid");
  }
  uint64_t v8 = (uint64_t *)*((void *)this + 3);
  uint64_t v9 = (uint64_t *)*((void *)this + 4);
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "optical");
  }
  char v11 = *((unsigned char *)this + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 13));
    char v11 = *((unsigned char *)this + 60);
  }
  if ((v11 & 8) != 0) {
    PB::TextFormatter::format(a2, "tragusMinAccepted", *((unsigned char *)this + 57));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaseline::readFrom(CMMsl::InEarBaseline *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 60) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_66;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_51:
            LODWORD(v25) = 0;
            goto LABEL_66;
          }
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v47 = v20 + 1;
              char v48 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v47;
              v25 |= (unint64_t)(v48 & 0x7F) << v45;
              if (v48 < 0)
              {
                v45 += 7;
                unint64_t v20 = v47;
                BOOL v14 = v46++ > 8;
                if (v14) {
                  goto LABEL_51;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_66:
          *((_DWORD *)this + 12) = v25;
          goto LABEL_71;
        case 2u:
          *((unsigned char *)this + 60) |= 2u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_70;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v34) = 0;
            goto LABEL_70;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          sub_100071474();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *((unsigned char *)this + 60) |= 4u;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 >= *((void *)a2 + 2))
          {
            BOOL v40 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v38 = v37 + 1;
            int v39 = *(unsigned __int8 *)(*(void *)a2 + v37);
            *((void *)a2 + 1) = v38;
            BOOL v40 = v39 != 0;
          }
          *((unsigned char *)this + 56) = v40;
          goto LABEL_71;
        case 7u:
          *((unsigned char *)this + 60) |= 8u;
          unint64_t v41 = *((void *)a2 + 1);
          if (v41 >= *((void *)a2 + 2))
          {
            BOOL v44 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v42 = v41 + 1;
            int v43 = *(unsigned __int8 *)(*(void *)a2 + v41);
            *((void *)a2 + 1) = v42;
            BOOL v44 = v43 != 0;
          }
          *((unsigned char *)this + 57) = v44;
          goto LABEL_71;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_71;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_70;
        }
        unint64_t v51 = v29 + 1;
        char v52 = *(unsigned char *)(v31 + v29);
        *((void *)a2 + 1) = v51;
        v34 |= (unint64_t)(v52 & 0x7F) << v49;
        if ((v52 & 0x80) == 0) {
          break;
        }
        v49 += 7;
        unint64_t v29 = v51;
        BOOL v14 = v50++ > 8;
        if (v14) {
          goto LABEL_58;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v34) = 0;
      }
LABEL_70:
      *((_DWORD *)this + 13) = v34;
LABEL_71:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarBaseline::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 48), 1u);
    char v4 = *(unsigned char *)(v3 + 60);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 2u);
  }
  char v5 = *(const PB::Base ***)(v3 + 24);
  uint64_t v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 16);
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8, 4u);
  }
  char v9 = *(const PB::Base **)(v3 + 8);
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9, 5u);
  }
  char v10 = *(unsigned char *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 6u);
    char v10 = *(unsigned char *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
  {
    char v11 = *(unsigned char *)(v3 + 57);
    return PB::Writer::write(a2, v11, 7u);
  }
  return this;
}

BOOL CMMsl::InEarBaseline::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 2) == 0 || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  BOOL result = sub_10007189C((uint64_t *)(a1 + 24), a2 + 24);
  if (!result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v5)
  {
    if (!v6 || !CMMsl::ClefMeasurement::operator==(v5, v6)) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if (v7)
  {
    if (!v8 || !CMMsl::ClefMeasurement::operator==(v7, v8)) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 4) == 0 || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  BOOL result = (*(unsigned char *)(a2 + 60) & 8) == 0;
  if ((*(unsigned char *)(a1 + 60) & 8) == 0) {
    return result;
  }
  return (*(unsigned char *)(a2 + 60) & 8) != 0 && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57);
}

uint64_t CMMsl::InEarBaseline::hash_value(CMMsl::InEarBaseline *this)
{
  if (*((unsigned char *)this + 60))
  {
    uint64_t v2 = *((unsigned int *)this + 12);
    if ((*((unsigned char *)this + 60) & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 60) & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 13);
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  uint64_t v4 = sub_1000719FC((uint64_t)&v26, (uint64_t **)this + 3);
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    char v6 = *(unsigned char *)(v5 + 16);
    float v7 = *(float *)(v5 + 8);
    float v8 = *(float *)(v5 + 12);
    BOOL v9 = v7 == 0.0 || (v6 & 1) == 0;
    uint64_t v10 = LODWORD(v7);
    if (v9) {
      uint64_t v10 = 0;
    }
    int v11 = v6 & 2;
    BOOL v12 = v8 == 0.0 || v11 == 0;
    uint64_t v13 = LODWORD(v8);
    if (v12) {
      uint64_t v13 = 0;
    }
    uint64_t v5 = v13 ^ v10;
  }
  uint64_t v14 = *((void *)this + 1);
  if (v14)
  {
    char v15 = *(unsigned char *)(v14 + 16);
    float v16 = *(float *)(v14 + 8);
    float v17 = *(float *)(v14 + 12);
    BOOL v18 = v16 == 0.0 || (v15 & 1) == 0;
    uint64_t v19 = LODWORD(v16);
    if (v18) {
      uint64_t v19 = 0;
    }
    int v20 = v15 & 2;
    BOOL v21 = v17 == 0.0 || v20 == 0;
    uint64_t v22 = LODWORD(v17);
    if (v21) {
      uint64_t v22 = 0;
    }
    uint64_t v14 = v22 ^ v19;
  }
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
    uint64_t v23 = *((unsigned __int8 *)this + 56);
    if ((*((unsigned char *)this + 60) & 8) != 0) {
      goto LABEL_32;
    }
LABEL_34:
    uint64_t v24 = 0;
    return v3 ^ v2 ^ v5 ^ v4 ^ v14 ^ v23 ^ v24;
  }
  uint64_t v23 = 0;
  if ((*((unsigned char *)this + 60) & 8) == 0) {
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v24 = *((unsigned __int8 *)this + 57);
  return v3 ^ v2 ^ v5 ^ v4 ^ v14 ^ v23 ^ v24;
}

uint64_t CMMsl::InEarBaseline::makeOldOpenLid(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarBaseline::makeNewOpenLid(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t this)
{
  *(_DWORD *)(this + 56) = 0;
  *(void *)this = off_1003A64E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 56) = 0;
  *(void *)this = off_1003A64E0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarBaselining::~InEarBaselining(CMMsl::InEarBaselining *this)
{
  *(void *)this = off_1003A64E0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarBaselining::~InEarBaselining(this);

  operator delete();
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t this, const CMMsl::InEarBaselining *a2)
{
  *(void *)this = off_1003A64E0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    uint64_t v3 = *((void *)a2 + 4);
    *(unsigned char *)(this + 56) = 1;
    *(void *)(this + 32) = v3;
    char v2 = 9;
    if ((*((unsigned char *)a2 + 56) & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 8;
  if ((*((unsigned char *)a2 + 56) & 8) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 12);
    *(unsigned char *)(this + 56) = v2;
    *(_DWORD *)(this + 48) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  char v5 = *((unsigned char *)a2 + 56);
  if ((v5 & 2) != 0)
  {
    int v7 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 56) |= 2u;
    *(_DWORD *)(this + 40) = v7;
    char v5 = *((unsigned char *)a2 + 56);
    if ((v5 & 0x10) == 0)
    {
LABEL_14:
      if ((v5 & 4) == 0) {
        return this;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)a2 + 56) & 0x10) == 0)
  {
    goto LABEL_14;
  }
  int v8 = *((_DWORD *)a2 + 13);
  *(unsigned char *)(this + 56) |= 0x10u;
  *(_DWORD *)(this + 52) = v8;
  if ((*((unsigned char *)a2 + 56) & 4) == 0) {
    return this;
  }
LABEL_15:
  int v6 = *((_DWORD *)a2 + 11);
  *(unsigned char *)(this + 56) |= 4u;
  *(_DWORD *)(this + 44) = v6;
  return this;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, const CMMsl::InEarBaselining *a2)
{
  if ((const CMMsl::InEarBaselining *)a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((uint64_t)&v11, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v3;
    int v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    int v17 = v4;
    *(void *)&long long v3 = v15;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v3;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    int v18 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v8;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarBaselining *a2, CMMsl::InEarBaselining *a3)
{
  int v3 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  float result = *((float *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((float *)a2 + 11) = result;
  return result;
}

uint64_t CMMsl::InEarBaselining::InEarBaselining(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A64E0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t CMMsl::InEarBaselining::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarBaselining::InEarBaselining((uint64_t)&v11, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v3;
    int v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v17;
    int v17 = v4;
    *(void *)&long long v3 = v15;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v3;
    int v7 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 56) = v18;
    int v18 = v7;
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v16;
    int v16 = v8;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v13;
    uint64_t v13 = v9;
    uint64_t v14 = v5;
    uint64_t v15 = v6;
    CMMsl::InEarBaselining::~InEarBaselining((CMMsl::InEarBaselining *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InEarBaselining::formatText(CMMsl::InEarBaselining *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "baseline");
  }
  char v6 = *((unsigned char *)this + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "conchaOpenResponse", *((float *)this + 10));
    char v6 = *((unsigned char *)this + 56);
  }
  if ((v6 & 4) != 0) {
    PB::TextFormatter::format(a2, "filter", *((float *)this + 11));
  }
  uint64_t v7 = *((void *)this + 2);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "lastBaseline");
  }
  if ((*((unsigned char *)this + 56) & 8) != 0) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 12));
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "minimum");
  }
  char v9 = *((unsigned char *)this + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "rho", *((float *)this + 13));
    char v9 = *((unsigned char *)this + 56);
  }
  if (v9) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarBaselining::readFrom(CMMsl::InEarBaselining *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 56) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_45;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v20);
          uint64_t v21 = *((void *)a2 + 1) + 8;
          goto LABEL_55;
        case 2u:
          *((unsigned char *)this + 56) |= 8u;
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          uint64_t v25 = *(void *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_59;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_52:
            LODWORD(v28) = 0;
            goto LABEL_59;
          }
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          *((unsigned char *)this + 56) |= 2u;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_45;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_54;
        case 7u:
          *((unsigned char *)this + 56) |= 0x10u;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)a2 + 2)) {
            goto LABEL_45;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v32);
          goto LABEL_54;
        case 8u:
          *((unsigned char *)this + 56) |= 4u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v33);
LABEL_54:
            uint64_t v21 = *((void *)a2 + 1) + 4;
LABEL_55:
            *((void *)a2 + 1) = v21;
          }
          else
          {
LABEL_45:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_60;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_60;
      }
      while (1)
      {
        if (v24 == v23)
        {
          LODWORD(v28) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_59;
        }
        unint64_t v36 = v23 + 1;
        char v37 = *(unsigned char *)(v25 + v23);
        *((void *)a2 + 1) = v36;
        v28 |= (unint64_t)(v37 & 0x7F) << v34;
        if ((v37 & 0x80) == 0) {
          break;
        }
        v34 += 7;
        unint64_t v23 = v36;
        BOOL v14 = v35++ > 8;
        if (v14) {
          goto LABEL_52;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v28) = 0;
      }
LABEL_59:
      *((_DWORD *)this + 12) = v28;
LABEL_60:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarBaselining::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 56);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 56);
  }
  if ((v4 & 8) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  char v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7, 5u);
  }
  char v8 = *(unsigned char *)(v3 + 56);
  if ((v8 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 56) & 0x10) == 0) {
      goto LABEL_13;
    }
LABEL_16:
    this = PB::Writer::write(a2, *(float *)(v3 + 52), 7u);
    if ((*(unsigned char *)(v3 + 56) & 4) == 0) {
      return this;
    }
    goto LABEL_17;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  char v8 = *(unsigned char *)(v3 + 56);
  if ((v8 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v8 & 4) == 0) {
    return this;
  }
LABEL_17:
  float v9 = *(float *)(v3 + 44);

  return PB::Writer::write(a2, v9, 8u);
}

BOOL CMMsl::InEarBaselining::operator==(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a1 + 56);
  char v5 = *(unsigned char *)(a2 + 56);
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 56) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 56))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 56) & 8) == 0 || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 56) & 8) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a2 + 16);
  if (v10)
  {
    if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 4) == 0;
  if ((v4 & 4) == 0) {
    return result;
  }
  return (v5 & 4) != 0 && *(float *)(a1 + 44) == *(float *)(a2 + 44);
}

uint64_t CMMsl::InEarBaselining::hash_value(CMMsl::InEarBaselining *this)
{
  if (*((unsigned char *)this + 56))
  {
    double v1 = *((double *)this + 4);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 56) & 8) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 56) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 12);
      goto LABEL_8;
    }
  }
  uint64_t v2 = 0;
LABEL_8:
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 16);
    float v5 = *(float *)(v3 + 8);
    float v6 = *(float *)(v3 + 12);
    BOOL v7 = v5 == 0.0 || (v4 & 1) == 0;
    uint64_t v8 = LODWORD(v5);
    if (v7) {
      uint64_t v8 = 0;
    }
    int v9 = v4 & 2;
    BOOL v10 = v6 == 0.0 || v9 == 0;
    uint64_t v11 = LODWORD(v6);
    if (v10) {
      uint64_t v11 = 0;
    }
    uint64_t v3 = v11 ^ v8;
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    char v13 = *(unsigned char *)(v12 + 16);
    float v14 = *(float *)(v12 + 8);
    float v15 = *(float *)(v12 + 12);
    BOOL v16 = v14 == 0.0 || (v13 & 1) == 0;
    uint64_t v17 = LODWORD(v14);
    if (v16) {
      uint64_t v17 = 0;
    }
    int v18 = v13 & 2;
    BOOL v19 = v15 == 0.0 || v18 == 0;
    uint64_t v20 = LODWORD(v15);
    if (v19) {
      uint64_t v20 = 0;
    }
    uint64_t v12 = v20 ^ v17;
  }
  uint64_t v21 = *((void *)this + 2);
  if (v21)
  {
    char v22 = *(unsigned char *)(v21 + 16);
    float v23 = *(float *)(v21 + 8);
    float v24 = *(float *)(v21 + 12);
    BOOL v25 = v23 == 0.0 || (v22 & 1) == 0;
    uint64_t v26 = LODWORD(v23);
    if (v25) {
      uint64_t v26 = 0;
    }
    int v27 = v22 & 2;
    BOOL v28 = v24 == 0.0 || v27 == 0;
    uint64_t v29 = LODWORD(v24);
    if (v28) {
      uint64_t v29 = 0;
    }
    uint64_t v21 = v29 ^ v26;
  }
  if ((*((unsigned char *)this + 56) & 2) != 0)
  {
    float v35 = *((float *)this + 10);
    uint64_t v30 = LODWORD(v35);
    if (v35 == 0.0) {
      uint64_t v30 = 0;
    }
    if ((*((unsigned char *)this + 56) & 0x10) != 0)
    {
LABEL_46:
      float v31 = *((float *)this + 13);
      uint64_t v32 = LODWORD(v31);
      if (v31 == 0.0) {
        uint64_t v32 = 0;
      }
      if ((*((unsigned char *)this + 56) & 4) != 0) {
        goto LABEL_49;
      }
LABEL_56:
      uint64_t v34 = 0;
      return v2 ^ *(void *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
    }
  }
  else
  {
    uint64_t v30 = 0;
    if ((*((unsigned char *)this + 56) & 0x10) != 0) {
      goto LABEL_46;
    }
  }
  uint64_t v32 = 0;
  if ((*((unsigned char *)this + 56) & 4) == 0) {
    goto LABEL_56;
  }
LABEL_49:
  float v33 = *((float *)this + 11);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ v12 ^ v21 ^ v30 ^ v32 ^ v34;
}

uint64_t CMMsl::InEarBaselining::makeMinimum(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarBaselining::makeBaseline(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarBaselining::makeLastBaseline(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t this)
{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A6518;
  return this;
}

{
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A6518;
  return this;
}

void CMMsl::InEarConstraints::~InEarConstraints(CMMsl::InEarConstraints *this)
{
  *(void *)this = off_1003A6518;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarConstraints::~InEarConstraints(this);

  operator delete();
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t this, const CMMsl::InEarConstraints *a2)
{
  *(void *)this = off_1003A6518;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(void *)(this + 16) = 0;
  __int16 v2 = *((_WORD *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 3);
    *(_WORD *)(this + 48) = 1;
    *(void *)(this + 24) = v4;
    __int16 v3 = 3;
    if ((*((_WORD *)a2 + 24) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 2;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 8);
    *(_WORD *)(this + 48) = v3;
    *(_DWORD *)(this + 32) = v5;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x80) != 0)
  {
    char v8 = *((unsigned char *)a2 + 41);
    *(_WORD *)(this + 48) |= 0x80u;
    *(unsigned char *)(this + 41) = v8;
    __int16 v6 = *((_WORD *)a2 + 24);
    if ((v6 & 0x20) == 0)
    {
LABEL_12:
      if ((v6 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_23;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_12;
  }
  char v9 = *((unsigned char *)a2 + 39);
  *(_WORD *)(this + 48) |= 0x20u;
  *(unsigned char *)(this + 39) = v9;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_13:
    if ((v6 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v10 = *((unsigned char *)a2 + 36);
  *(_WORD *)(this + 48) |= 4u;
  *(unsigned char *)(this + 36) = v10;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_14:
    if ((v6 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v11 = *((unsigned char *)a2 + 37);
  *(_WORD *)(this + 48) |= 8u;
  *(unsigned char *)(this + 37) = v11;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_15:
    if ((v6 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v12 = *((unsigned char *)a2 + 40);
  *(_WORD *)(this + 48) |= 0x40u;
  *(unsigned char *)(this + 40) = v12;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x200) == 0)
  {
LABEL_16:
    if ((v6 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v13 = *((unsigned char *)a2 + 43);
  *(_WORD *)(this + 48) |= 0x200u;
  *(unsigned char *)(this + 43) = v13;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x100) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v14 = *((unsigned char *)a2 + 42);
  *(_WORD *)(this + 48) |= 0x100u;
  *(unsigned char *)(this + 42) = v14;
  __int16 v6 = *((_WORD *)a2 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v6 & 0x400) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_28:
  char v15 = *((unsigned char *)a2 + 38);
  *(_WORD *)(this + 48) |= 0x10u;
  *(unsigned char *)(this + 38) = v15;
  if ((*((_WORD *)a2 + 24) & 0x400) == 0) {
    return this;
  }
LABEL_19:
  char v7 = *((unsigned char *)a2 + 44);
  *(_WORD *)(this + 48) |= 0x400u;
  *(unsigned char *)(this + 44) = v7;
  return this;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, const CMMsl::InEarConstraints *a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarConstraints *a2, CMMsl::InEarConstraints *a3)
{
  int v3 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 41);
  *((unsigned char *)this + 41) = *((unsigned char *)a2 + 41);
  *((unsigned char *)a2 + 41) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 39);
  *((unsigned char *)this + 39) = *((unsigned char *)a2 + 39);
  *((unsigned char *)a2 + 39) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 36);
  *((unsigned char *)this + 36) = *((unsigned char *)a2 + 36);
  *((unsigned char *)a2 + 36) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 37);
  *((unsigned char *)this + 37) = *((unsigned char *)a2 + 37);
  *((unsigned char *)a2 + 37) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 43);
  *((unsigned char *)this + 43) = *((unsigned char *)a2 + 43);
  *((unsigned char *)a2 + 43) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 42);
  *((unsigned char *)this + 42) = *((unsigned char *)a2 + 42);
  *((unsigned char *)a2 + 42) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 38);
  *((unsigned char *)this + 38) = *((unsigned char *)a2 + 38);
  *((unsigned char *)a2 + 38) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 44);
  *((unsigned char *)this + 44) = *((unsigned char *)a2 + 44);
  *((unsigned char *)a2 + 44) = v7;
  return result;
}

uint64_t CMMsl::InEarConstraints::InEarConstraints(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1003A6518;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 39) = *(unsigned char *)(a2 + 39);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

CMMsl *CMMsl::InEarConstraints::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarConstraints::InEarConstraints((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarConstraints *)v5, v3);
    CMMsl::InEarConstraints::~InEarConstraints((CMMsl::InEarConstraints *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarConstraints::formatText(CMMsl::InEarConstraints *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 24);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "above", *((unsigned char *)this + 36));
    __int16 v5 = *((_WORD *)this + 24);
  }
  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(a2, "below", *((unsigned char *)this + 37));
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "current");
  }
  __int16 v7 = *((_WORD *)this + 24);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 8));
    __int16 v7 = *((_WORD *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "moving", *((unsigned char *)this + 38));
  __int16 v7 = *((_WORD *)this + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "partialin", *((unsigned char *)this + 39));
  if ((*((_WORD *)this + 24) & 0x40) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "stable", *((unsigned char *)this + 40));
LABEL_12:
  uint64_t v8 = *((void *)this + 2);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "threshold");
  }
  __int16 v9 = *((_WORD *)this + 24);
  if (v9)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
    __int16 v9 = *((_WORD *)this + 24);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(a2, "upright", *((unsigned char *)this + 41));
  __int16 v9 = *((_WORD *)this + 24);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "upsidedown", *((unsigned char *)this + 42));
  __int16 v9 = *((_WORD *)this + 24);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "vertical", *((unsigned char *)this + 43));
  if ((*((_WORD *)this + 24) & 0x400) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "walking", *((unsigned char *)this + 44));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarConstraints::readFrom(CMMsl::InEarConstraints *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_WORD *)this + 24) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 3) = *(void *)(*(void *)a2 + v20);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_84;
        case 2u:
          *((_WORD *)this + 24) |= 2u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_83;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_60:
            LODWORD(v27) = 0;
            goto LABEL_83;
          }
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          *((_WORD *)this + 24) |= 0x80u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 >= *((void *)a2 + 2))
          {
            BOOL v33 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v31 = v30 + 1;
            int v32 = *(unsigned __int8 *)(*(void *)a2 + v30);
            *((void *)a2 + 1) = v31;
            BOOL v33 = v32 != 0;
          }
          *((unsigned char *)this + 41) = v33;
          goto LABEL_84;
        case 6u:
          *((_WORD *)this + 24) |= 0x20u;
          unint64_t v34 = *((void *)a2 + 1);
          if (v34 >= *((void *)a2 + 2))
          {
            BOOL v37 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v35 = v34 + 1;
            int v36 = *(unsigned __int8 *)(*(void *)a2 + v34);
            *((void *)a2 + 1) = v35;
            BOOL v37 = v36 != 0;
          }
          *((unsigned char *)this + 39) = v37;
          goto LABEL_84;
        case 7u:
          *((_WORD *)this + 24) |= 4u;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 >= *((void *)a2 + 2))
          {
            BOOL v41 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v39 = v38 + 1;
            int v40 = *(unsigned __int8 *)(*(void *)a2 + v38);
            *((void *)a2 + 1) = v39;
            BOOL v41 = v40 != 0;
          }
          *((unsigned char *)this + 36) = v41;
          goto LABEL_84;
        case 8u:
          *((_WORD *)this + 24) |= 8u;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 >= *((void *)a2 + 2))
          {
            BOOL v45 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v42 + 1;
            int v44 = *(unsigned __int8 *)(*(void *)a2 + v42);
            *((void *)a2 + 1) = v43;
            BOOL v45 = v44 != 0;
          }
          *((unsigned char *)this + 37) = v45;
          goto LABEL_84;
        case 9u:
          *((_WORD *)this + 24) |= 0x40u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 >= *((void *)a2 + 2))
          {
            BOOL v49 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v47 = v46 + 1;
            int v48 = *(unsigned __int8 *)(*(void *)a2 + v46);
            *((void *)a2 + 1) = v47;
            BOOL v49 = v48 != 0;
          }
          *((unsigned char *)this + 40) = v49;
          goto LABEL_84;
        case 0xAu:
          *((_WORD *)this + 24) |= 0x200u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 >= *((void *)a2 + 2))
          {
            BOOL v53 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v51 = v50 + 1;
            int v52 = *(unsigned __int8 *)(*(void *)a2 + v50);
            *((void *)a2 + 1) = v51;
            BOOL v53 = v52 != 0;
          }
          *((unsigned char *)this + 43) = v53;
          goto LABEL_84;
        case 0xBu:
          *((_WORD *)this + 24) |= 0x100u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 >= *((void *)a2 + 2))
          {
            BOOL v57 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v55 = v54 + 1;
            int v56 = *(unsigned __int8 *)(*(void *)a2 + v54);
            *((void *)a2 + 1) = v55;
            BOOL v57 = v56 != 0;
          }
          *((unsigned char *)this + 42) = v57;
          goto LABEL_84;
        case 0xCu:
          *((_WORD *)this + 24) |= 0x10u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 >= *((void *)a2 + 2))
          {
            BOOL v61 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v59 = v58 + 1;
            int v60 = *(unsigned __int8 *)(*(void *)a2 + v58);
            *((void *)a2 + 1) = v59;
            BOOL v61 = v60 != 0;
          }
          *((unsigned char *)this + 38) = v61;
          goto LABEL_84;
        case 0xDu:
          *((_WORD *)this + 24) |= 0x400u;
          unint64_t v62 = *((void *)a2 + 1);
          if (v62 >= *((void *)a2 + 2))
          {
            BOOL v65 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v63 = v62 + 1;
            int v64 = *(unsigned __int8 *)(*(void *)a2 + v62);
            *((void *)a2 + 1) = v63;
            BOOL v65 = v64 != 0;
          }
          *((unsigned char *)this + 44) = v65;
          goto LABEL_84;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_84;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_83;
        }
        unint64_t v68 = v22 + 1;
        char v69 = *(unsigned char *)(v24 + v22);
        *((void *)a2 + 1) = v68;
        v27 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0) {
          break;
        }
        v66 += 7;
        unint64_t v22 = v68;
        BOOL v14 = v67++ > 8;
        if (v14) {
          goto LABEL_60;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v27) = 0;
      }
LABEL_83:
      *((_DWORD *)this + 8) = v27;
LABEL_84:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarConstraints::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 48);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 2u);
  }
  __int16 v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 16);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 41), 5u);
    __int16 v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 39), 6u);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 36), 7u);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 37), 8u);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 9u);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 43), 0xAu);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0) {
      goto LABEL_17;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 38), 0xCu);
    if ((*(_WORD *)(v3 + 48) & 0x400) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 42), 0xBu);
  __int16 v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) != 0) {
    goto LABEL_26;
  }
LABEL_17:
  if ((v7 & 0x400) == 0) {
    return this;
  }
LABEL_27:
  char v8 = *(unsigned char *)(v3 + 44);

  return PB::Writer::write(a2, v8, 0xDu);
}

BOOL CMMsl::InEarConstraints::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a1 + 48);
  __int16 v5 = *(_WORD *)(a2 + 48);
  if (v4)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v4 & 2) != 0)
  {
    if ((v5 & 2) == 0 || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v5 & 2) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x80) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)) {
      return 0;
    }
  }
  else if ((v5 & 0x80) != 0)
  {
    return 0;
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 0x20) == 0 || *(unsigned __int8 *)(a1 + 39) != *(unsigned __int8 *)(a2 + 39)) {
      return 0;
    }
  }
  else if ((v5 & 0x20) != 0)
  {
    return 0;
  }
  if ((v4 & 4) != 0)
  {
    if ((v5 & 4) == 0 || *(unsigned __int8 *)(a1 + 36) != *(unsigned __int8 *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v5 & 4) != 0)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(unsigned __int8 *)(a1 + 37) != *(unsigned __int8 *)(a2 + 37)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  if ((v4 & 0x40) != 0)
  {
    if ((v5 & 0x40) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v5 & 0x40) != 0)
  {
    return 0;
  }
  if ((v4 & 0x200) != 0)
  {
    if ((v5 & 0x200) == 0 || *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(a2 + 43)) {
      return 0;
    }
  }
  else if ((v5 & 0x200) != 0)
  {
    return 0;
  }
  if ((v4 & 0x100) != 0)
  {
    if ((v5 & 0x100) == 0 || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(a2 + 42)) {
      return 0;
    }
  }
  else if ((v5 & 0x100) != 0)
  {
    return 0;
  }
  if ((v4 & 0x10) != 0)
  {
    if ((v5 & 0x10) == 0 || *(unsigned __int8 *)(a1 + 38) != *(unsigned __int8 *)(a2 + 38)) {
      return 0;
    }
  }
  else if ((v5 & 0x10) != 0)
  {
    return 0;
  }
  BOOL result = (v5 & 0x400) == 0;
  if ((v4 & 0x400) == 0) {
    return result;
  }
  return (v5 & 0x400) != 0 && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
}

uint64_t CMMsl::InEarConstraints::hash_value(CMMsl::InEarConstraints *this)
{
  __int16 v1 = *((_WORD *)this + 24);
  if (v1)
  {
    double v2 = *((double *)this + 3);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 8);
      goto LABEL_8;
    }
  }
  uint64_t v3 = 0;
LABEL_8:
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    char v5 = *(unsigned char *)(v4 + 16);
    float v6 = *(float *)(v4 + 8);
    float v7 = *(float *)(v4 + 12);
    BOOL v8 = v6 == 0.0 || (v5 & 1) == 0;
    uint64_t v9 = LODWORD(v6);
    if (v8) {
      uint64_t v9 = 0;
    }
    int v10 = v5 & 2;
    BOOL v11 = v7 == 0.0 || v10 == 0;
    uint64_t v12 = LODWORD(v7);
    if (v11) {
      uint64_t v12 = 0;
    }
    uint64_t v4 = v12 ^ v9;
  }
  uint64_t v13 = *((void *)this + 2);
  if (v13)
  {
    char v14 = *(unsigned char *)(v13 + 16);
    float v15 = *(float *)(v13 + 8);
    float v16 = *(float *)(v13 + 12);
    BOOL v17 = v15 == 0.0 || (v14 & 1) == 0;
    uint64_t v18 = LODWORD(v15);
    if (v17) {
      uint64_t v18 = 0;
    }
    int v19 = v14 & 2;
    BOOL v20 = v16 == 0.0 || v19 == 0;
    uint64_t v21 = LODWORD(v16);
    if (v20) {
      uint64_t v21 = 0;
    }
    uint64_t v13 = v21 ^ v18;
  }
  if ((v1 & 0x80) != 0)
  {
    uint64_t v22 = *((unsigned __int8 *)this + 41);
    if ((v1 & 0x20) != 0)
    {
LABEL_34:
      uint64_t v23 = *((unsigned __int8 *)this + 39);
      if ((v1 & 4) != 0) {
        goto LABEL_35;
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v22 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_34;
    }
  }
  uint64_t v23 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_35:
    uint64_t v24 = *((unsigned __int8 *)this + 36);
    if ((v1 & 8) != 0) {
      goto LABEL_36;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v24 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_36:
    uint64_t v25 = *((unsigned __int8 *)this + 37);
    if ((v1 & 0x40) != 0) {
      goto LABEL_37;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v25 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_37:
    uint64_t v26 = *((unsigned __int8 *)this + 40);
    if ((*((_WORD *)this + 24) & 0x200) != 0) {
      goto LABEL_38;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v26 = 0;
  if ((*((_WORD *)this + 24) & 0x200) != 0)
  {
LABEL_38:
    uint64_t v27 = *((unsigned __int8 *)this + 43);
    if ((*((_WORD *)this + 24) & 0x100) != 0) {
      goto LABEL_39;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v27 = 0;
  if ((*((_WORD *)this + 24) & 0x100) != 0)
  {
LABEL_39:
    uint64_t v28 = *((unsigned __int8 *)this + 42);
    if ((v1 & 0x10) != 0) {
      goto LABEL_40;
    }
LABEL_49:
    uint64_t v29 = 0;
    if ((*((_WORD *)this + 24) & 0x400) != 0) {
      goto LABEL_41;
    }
LABEL_50:
    uint64_t v30 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
  }
LABEL_48:
  uint64_t v28 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_49;
  }
LABEL_40:
  uint64_t v29 = *((unsigned __int8 *)this + 38);
  if ((*((_WORD *)this + 24) & 0x400) == 0) {
    goto LABEL_50;
  }
LABEL_41:
  uint64_t v30 = *((unsigned __int8 *)this + 44);
  return v3 ^ *(void *)&v2 ^ v4 ^ v13 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30;
}

uint64_t CMMsl::InEarConstraints::makeCurrent(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarConstraints::makeThreshold(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t this)
{
  *(_DWORD *)(this + 44) = 0;
  *(void *)this = off_1003A6550;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 44) = 0;
  *(void *)this = off_1003A6550;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

void CMMsl::InEarOpenLid::~InEarOpenLid(CMMsl::InEarOpenLid *this)
{
  *(void *)this = off_1003A6550;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarOpenLid::~InEarOpenLid(this);

  operator delete();
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t this, const CMMsl::InEarOpenLid *a2)
{
  *(void *)this = off_1003A6550;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 44) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  if (*((unsigned char *)a2 + 44))
  {
    uint64_t v3 = *((void *)a2 + 4);
    *(unsigned char *)(this + 44) = 1;
    *(void *)(this + 32) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 44) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 10);
    *(unsigned char *)(this + 44) = v2;
    *(_DWORD *)(this + 40) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, const CMMsl::InEarOpenLid *a2)
{
  if ((const CMMsl::InEarOpenLid *)a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((uint64_t)&v9, a2);
    uint64_t v3 = v13;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v3;
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarOpenLid *a2, CMMsl::InEarOpenLid *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  int v5 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  return result;
}

uint64_t CMMsl::InEarOpenLid::InEarOpenLid(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6550;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t CMMsl::InEarOpenLid::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarOpenLid::InEarOpenLid((uint64_t)&v9, a2);
    uint64_t v3 = v13;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = v12;
    *(void *)(a1 + 40) = v3;
    uint64_t v12 = v4;
    uint64_t v13 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v11;
    uint64_t v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v7;
    CMMsl::InEarOpenLid::~InEarOpenLid((CMMsl::InEarOpenLid *)&v9);
  }
  return a1;
}

uint64_t CMMsl::InEarOpenLid::formatText(CMMsl::InEarOpenLid *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "current");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "last");
  }
  if ((*((unsigned char *)this + 44) & 2) != 0) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 10));
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "minimum");
  }
  if (*((unsigned char *)this + 44)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarOpenLid::readFrom(CMMsl::InEarOpenLid *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 44) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v20);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_49;
        case 2u:
          *((unsigned char *)this + 44) |= 2u;
          unint64_t v22 = *((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
          uint64_t v24 = *(void *)a2;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)a2 + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_48;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_43:
            LODWORD(v27) = 0;
            goto LABEL_48;
          }
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_49;
      }
      while (1)
      {
        if (v23 == v22)
        {
          LODWORD(v27) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_48;
        }
        unint64_t v32 = v22 + 1;
        char v33 = *(unsigned char *)(v24 + v22);
        *((void *)a2 + 1) = v32;
        v27 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0) {
          break;
        }
        v30 += 7;
        unint64_t v22 = v32;
        BOOL v14 = v31++ > 8;
        if (v14) {
          goto LABEL_43;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v27) = 0;
      }
LABEL_48:
      *((_DWORD *)this + 10) = v27;
LABEL_49:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarOpenLid::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 24);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  uint64_t v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
  {
    return PB::Writer::writeSubmessage(a2, v7, 5u);
  }
  return this;
}

BOOL CMMsl::InEarOpenLid::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  BOOL result = v8 == 0;
  if (!*(void *)(a1 + 16)) {
    return result;
  }
  return v8 && CMMsl::ClefMeasurement::operator==(*(void *)(a1 + 16), v8);
}

uint64_t CMMsl::InEarOpenLid::hash_value(CMMsl::InEarOpenLid *this)
{
  if (*((unsigned char *)this + 44))
  {
    double v1 = *((double *)this + 4);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 10);
      goto LABEL_8;
    }
  }
  uint64_t v2 = 0;
LABEL_8:
  uint64_t v3 = *((void *)this + 3);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 16);
    float v5 = *(float *)(v3 + 8);
    float v6 = *(float *)(v3 + 12);
    BOOL v7 = v5 == 0.0 || (v4 & 1) == 0;
    uint64_t v8 = LODWORD(v5);
    if (v7) {
      uint64_t v8 = 0;
    }
    int v9 = v4 & 2;
    BOOL v10 = v6 == 0.0 || v9 == 0;
    uint64_t v11 = LODWORD(v6);
    if (v10) {
      uint64_t v11 = 0;
    }
    uint64_t v3 = v11 ^ v8;
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    char v13 = *(unsigned char *)(v12 + 16);
    float v14 = *(float *)(v12 + 8);
    float v15 = *(float *)(v12 + 12);
    BOOL v16 = v14 == 0.0 || (v13 & 1) == 0;
    uint64_t v17 = LODWORD(v14);
    if (v16) {
      uint64_t v17 = 0;
    }
    int v18 = v13 & 2;
    BOOL v19 = v15 == 0.0 || v18 == 0;
    uint64_t v20 = LODWORD(v15);
    if (v19) {
      uint64_t v20 = 0;
    }
    uint64_t v12 = v20 ^ v17;
  }
  uint64_t v21 = *((void *)this + 2);
  if (v21)
  {
    char v22 = *(unsigned char *)(v21 + 16);
    float v23 = *(float *)(v21 + 8);
    float v24 = *(float *)(v21 + 12);
    BOOL v25 = v23 == 0.0 || (v22 & 1) == 0;
    uint64_t v26 = LODWORD(v23);
    if (v25) {
      uint64_t v26 = 0;
    }
    int v27 = v22 & 2;
    BOOL v28 = v24 == 0.0 || v27 == 0;
    uint64_t v29 = LODWORD(v24);
    if (v28) {
      uint64_t v29 = 0;
    }
    uint64_t v21 = v29 ^ v26;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ v12 ^ v21;
}

uint64_t CMMsl::InEarOpenLid::makeMinimum(uint64_t this)
{
  if (!*(void *)(this + 24)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarOpenLid::makeCurrent(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarOpenLid::makeLast(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

double CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this)
{
  *(void *)this = off_1003A6588;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6588;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  return result;
}

void CMMsl::InEarOptical::~InEarOptical(CMMsl::InEarOptical *this)
{
  *(void *)this = off_1003A6588;
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  float v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarOptical::~InEarOptical(this);

  operator delete();
}

CMMsl::InEarOptical *CMMsl::InEarOptical::InEarOptical(CMMsl::InEarOptical *this, const CMMsl::InEarOptical *a2)
{
  *(void *)this = off_1003A6588;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (*((unsigned char *)a2 + 108))
  {
    uint64_t v5 = *((void *)a2 + 9);
    *((unsigned char *)this + 108) = 1;
    *((void *)this + 9) = v5;
    char v4 = 9;
    if ((*((unsigned char *)a2 + 108) & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v4 = 8;
  if ((*((unsigned char *)a2 + 108) & 8) != 0)
  {
LABEL_5:
    int v6 = *((_DWORD *)a2 + 22);
    *((unsigned char *)this + 108) = v4;
    *((_DWORD *)this + 22) = v6;
  }
LABEL_6:
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (this != a2) {
    sub_100024308((char *)this + 8, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  char v7 = *((unsigned char *)a2 + 108);
  if ((v7 & 0x40) != 0)
  {
    int v13 = *((_DWORD *)a2 + 25);
    *((unsigned char *)this + 108) |= 0x40u;
    *((_DWORD *)this + 25) = v13;
    char v7 = *((unsigned char *)a2 + 108);
    if ((v7 & 0x20) == 0)
    {
LABEL_14:
      if ((v7 & 0x80) == 0) {
        goto LABEL_15;
      }
      goto LABEL_26;
    }
  }
  else if ((*((unsigned char *)a2 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  int v14 = *((_DWORD *)a2 + 24);
  *((unsigned char *)this + 108) |= 0x20u;
  *((_DWORD *)this + 24) = v14;
  char v7 = *((unsigned char *)a2 + 108);
  if ((v7 & 0x80) == 0)
  {
LABEL_15:
    if ((v7 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_26:
  char v15 = *((unsigned char *)a2 + 104);
  *((unsigned char *)this + 108) |= 0x80u;
  *((unsigned char *)this + 104) = v15;
  if ((*((unsigned char *)a2 + 108) & 0x10) != 0)
  {
LABEL_16:
    int v8 = *((_DWORD *)a2 + 23);
    *((unsigned char *)this + 108) |= 0x10u;
    *((_DWORD *)this + 23) = v8;
  }
LABEL_17:
  if (this != a2) {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v9 = *((unsigned char *)a2 + 108);
  if ((v9 & 2) != 0)
  {
    int v10 = *((_DWORD *)a2 + 20);
    *((unsigned char *)this + 108) |= 2u;
    *((_DWORD *)this + 20) = v10;
    char v9 = *((unsigned char *)a2 + 108);
  }
  if ((v9 & 4) != 0)
  {
    int v11 = *((_DWORD *)a2 + 21);
    *((unsigned char *)this + 108) |= 4u;
    *((_DWORD *)this + 21) = v11;
  }
  return this;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, const CMMsl::InEarOptical *a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarOptical::InEarOptical((CMMsl::InEarOptical *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InEarOptical *a2, CMMsl::InEarOptical *a3)
{
  int v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LOBYTE(v9) = *((unsigned char *)this + 104);
  *((unsigned char *)this + 104) = *((unsigned char *)a2 + 104);
  *((unsigned char *)a2 + 104) = v9;
  uint64_t v10 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v12;
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  float result = *((float *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((float *)a2 + 21) = result;
  return result;
}

uint64_t CMMsl::InEarOptical::InEarOptical(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6588;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_DWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_100274A30(v4, (__n128 *)(a2 + 8));
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  return a1;
}

CMMsl *CMMsl::InEarOptical::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarOptical::InEarOptical((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarOptical *)v5, v3);
    CMMsl::InEarOptical::~InEarOptical((CMMsl::InEarOptical *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarOptical::formatText(CMMsl::InEarOptical *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  uint64_t v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "acceleration", v7);
  }
  if ((*((unsigned char *)this + 108) & 2) != 0) {
    PB::TextFormatter::format(a2, "correlation", *((float *)this + 20));
  }
  uint64_t v8 = *((void *)this + 7);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "current");
  }
  if ((*((unsigned char *)this + 108) & 4) != 0) {
    PB::TextFormatter::format(a2, "deltatip", *((float *)this + 21));
  }
  uint64_t v9 = *((void *)this + 8);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "instability");
  }
  char v10 = *((unsigned char *)this + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 22));
    char v10 = *((unsigned char *)this + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((*((unsigned char *)this + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 23));
  char v10 = *((unsigned char *)this + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 24));
  char v10 = *((unsigned char *)this + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_26:
    PB::TextFormatter::format(a2, "tip", *((float *)this + 25));
    if ((*((unsigned char *)this + 108) & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  char v10 = *((unsigned char *)this + 108);
  if ((v10 & 0x40) != 0) {
    goto LABEL_26;
  }
LABEL_16:
  if ((v10 & 0x80) == 0) {
    goto LABEL_17;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "upright", *((unsigned char *)this + 104));
LABEL_17:
  uint64_t v11 = (float *)*((void *)this + 4);
  uint64_t v12 = (float *)*((void *)this + 5);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "variance", v13);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarOptical::readFrom(CMMsl::InEarOptical *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    char v10 = (void **)((char *)this + 8);
    uint64_t v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 108) |= 1u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_168;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v25);
          uint64_t v26 = *((void *)a2 + 1) + 8;
          goto LABEL_171;
        case 2u:
          *((unsigned char *)this + 108) |= 8u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          uint64_t v29 = *(void *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_148;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v18 = v31++ > 8;
            }
            while (!v18);
LABEL_113:
            LODWORD(v32) = 0;
            goto LABEL_148;
          }
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v81 = v27 + 1;
              char v82 = *(unsigned char *)(v29 + v27);
              *((void *)a2 + 1) = v81;
              v32 |= (unint64_t)(v82 & 0x7F) << v79;
              if (v82 < 0)
              {
                v79 += 7;
                unint64_t v27 = v81;
                BOOL v18 = v80++ > 8;
                if (v18) {
                  goto LABEL_113;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_148:
          *((_DWORD *)this + 22) = v32;
          goto LABEL_172;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          if (v24 != 2)
          {
            uint64_t v84 = (char *)*((void *)this + 2);
            unint64_t v83 = *((void *)this + 3);
            if ((unint64_t)v84 >= v83)
            {
              unint64_t v92 = (char *)*v10;
              uint64_t v93 = (v84 - (unsigned char *)*v10) >> 2;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62) {
LABEL_183:
              }
                sub_10000EE98();
              uint64_t v95 = v83 - (void)v92;
              if (v95 >> 1 > v94) {
                unint64_t v94 = v95 >> 1;
              }
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                char v97 = (char *)sub_100024458((uint64_t)v11, v96);
                unint64_t v92 = (char *)*((void *)this + 1);
                uint64_t v84 = (char *)*((void *)this + 2);
              }
              else
              {
                char v97 = 0;
              }
              unint64_t v104 = &v97[4 * v93];
              *(_DWORD *)unint64_t v104 = 0;
              unint64_t v85 = v104 + 4;
              while (v84 != v92)
              {
                int v105 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *((void *)this + 1) = v104;
              *((void *)this + 2) = v85;
              *((void *)this + 3) = &v97[4 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v84 = 0;
              unint64_t v85 = v84 + 4;
            }
            *((void *)this + 2) = v85;
            goto LABEL_166;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v35 = *((void *)a2 + 1);
          unint64_t v36 = *((void *)a2 + 2);
          while (v35 < v36 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v38 = (char *)*((void *)this + 2);
            unint64_t v37 = *((void *)this + 3);
            if ((unint64_t)v38 >= v37)
            {
              int v40 = (char *)*v10;
              uint64_t v41 = (v38 - (unsigned char *)*v10) >> 2;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62) {
                goto LABEL_183;
              }
              uint64_t v43 = v37 - (void)v40;
              if (v43 >> 1 > v42) {
                unint64_t v42 = v43 >> 1;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44)
              {
                BOOL v45 = (char *)sub_100024458((uint64_t)v11, v44);
                int v40 = (char *)*((void *)this + 1);
                unint64_t v38 = (char *)*((void *)this + 2);
              }
              else
              {
                BOOL v45 = 0;
              }
              unint64_t v46 = &v45[4 * v41];
              *(_DWORD *)unint64_t v46 = 0;
              unint64_t v39 = v46 + 4;
              while (v38 != v40)
              {
                int v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *((void *)this + 1) = v46;
              *((void *)this + 2) = v39;
              *((void *)this + 3) = &v45[4 * v44];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v38 = 0;
              unint64_t v39 = v38 + 4;
            }
            *((void *)this + 2) = v39;
            unint64_t v48 = *((void *)a2 + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
              goto LABEL_127;
            }
            *(v39 - 1) = *(_DWORD *)(*(void *)a2 + v48);
            unint64_t v36 = *((void *)a2 + 2);
            unint64_t v35 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v35;
          }
          goto LABEL_37;
        case 6u:
          *((unsigned char *)this + 108) |= 0x40u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_168;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_170;
        case 7u:
          *((unsigned char *)this + 108) |= 0x20u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_168;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_170;
        case 8u:
          *((unsigned char *)this + 108) |= 0x80u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 >= *((void *)a2 + 2))
          {
            BOOL v54 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v52 = v51 + 1;
            int v53 = *(unsigned __int8 *)(*(void *)a2 + v51);
            *((void *)a2 + 1) = v52;
            BOOL v54 = v53 != 0;
          }
          *((unsigned char *)this + 104) = v54;
          goto LABEL_172;
        case 9u:
          *((unsigned char *)this + 108) |= 0x10u;
          unint64_t v55 = *((void *)a2 + 1);
          unint64_t v56 = *((void *)a2 + 2);
          uint64_t v57 = *(void *)a2;
          if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
          {
            char v58 = 0;
            unsigned int v59 = 0;
            uint64_t v60 = 0;
            do
            {
              unint64_t v61 = v55 + 1;
              *((void *)a2 + 1) = v55 + 1;
              char v62 = *(unsigned char *)(v57 + v55);
              v60 |= (unint64_t)(v62 & 0x7F) << v58;
              if ((v62 & 0x80) == 0) {
                goto LABEL_151;
              }
              v58 += 7;
              unint64_t v55 = v61;
              BOOL v18 = v59++ > 8;
            }
            while (!v18);
LABEL_124:
            LODWORD(v60) = 0;
            goto LABEL_151;
          }
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v60 = 0;
          if (v56 <= v55) {
            unint64_t v56 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v56 == v55)
            {
              LODWORD(v60) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v88 = v55 + 1;
              char v89 = *(unsigned char *)(v57 + v55);
              *((void *)a2 + 1) = v88;
              v60 |= (unint64_t)(v89 & 0x7F) << v86;
              if (v89 < 0)
              {
                v86 += 7;
                unint64_t v55 = v88;
                BOOL v18 = v87++ > 8;
                if (v18) {
                  goto LABEL_124;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v60) = 0;
              }
            }
            break;
          }
LABEL_151:
          *((_DWORD *)this + 23) = v60;
          goto LABEL_172;
        case 0xAu:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v63 = *((void *)a2 + 1);
            unint64_t v64 = *((void *)a2 + 2);
            while (v63 < v64 && !*((unsigned char *)a2 + 24))
            {
              char v66 = (char *)*((void *)this + 5);
              unint64_t v65 = *((void *)this + 6);
              if ((unint64_t)v66 >= v65)
              {
                unint64_t v68 = (char *)*v8;
                uint64_t v69 = (v66 - (unsigned char *)*v8) >> 2;
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62) {
                  goto LABEL_182;
                }
                uint64_t v71 = v65 - (void)v68;
                if (v71 >> 1 > v70) {
                  unint64_t v70 = v71 >> 1;
                }
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72)
                {
                  unint64_t v73 = (char *)sub_100024458((uint64_t)v9, v72);
                  unint64_t v68 = (char *)*((void *)this + 4);
                  char v66 = (char *)*((void *)this + 5);
                }
                else
                {
                  unint64_t v73 = 0;
                }
                uint64_t v74 = &v73[4 * v69];
                *(_DWORD *)uint64_t v74 = 0;
                unsigned int v67 = v74 + 4;
                while (v66 != v68)
                {
                  int v75 = *((_DWORD *)v66 - 1);
                  v66 -= 4;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                *((void *)this + 4) = v74;
                *((void *)this + 5) = v67;
                *((void *)this + 6) = &v73[4 * v72];
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                *(_DWORD *)char v66 = 0;
                unsigned int v67 = v66 + 4;
              }
              *((void *)this + 5) = v67;
              unint64_t v76 = *((void *)a2 + 1);
              if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)a2 + 2))
              {
LABEL_127:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v67 - 1) = *(_DWORD *)(*(void *)a2 + v76);
              unint64_t v64 = *((void *)a2 + 2);
              unint64_t v63 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v63;
            }
LABEL_37:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v91 = (char *)*((void *)this + 5);
            unint64_t v90 = *((void *)this + 6);
            if ((unint64_t)v91 >= v90)
            {
              unsigned int v98 = (char *)*v8;
              uint64_t v99 = (v91 - (unsigned char *)*v8) >> 2;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62) {
LABEL_182:
              }
                sub_10000EE98();
              uint64_t v101 = v90 - (void)v98;
              if (v101 >> 1 > v100) {
                unint64_t v100 = v101 >> 1;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                unint64_t v103 = (char *)sub_100024458((uint64_t)v9, v102);
                unsigned int v98 = (char *)*((void *)this + 4);
                unint64_t v91 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v103 = 0;
              }
              unint64_t v106 = &v103[4 * v99];
              *(_DWORD *)unint64_t v106 = 0;
              unint64_t v85 = v106 + 4;
              while (v91 != v98)
              {
                int v107 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v106 - 1) = v107;
                v106 -= 4;
              }
              *((void *)this + 4) = v106;
              *((void *)this + 5) = v85;
              *((void *)this + 6) = &v103[4 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v91 = 0;
              unint64_t v85 = v91 + 4;
            }
            *((void *)this + 5) = v85;
LABEL_166:
            unint64_t v108 = *((void *)a2 + 1);
            if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *((void *)a2 + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(void *)a2 + v108);
LABEL_170:
              uint64_t v26 = *((void *)a2 + 1) + 4;
LABEL_171:
              *((void *)a2 + 1) = v26;
            }
            else
            {
LABEL_168:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_172:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0xBu:
          *((unsigned char *)this + 108) |= 2u;
          unint64_t v77 = *((void *)a2 + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)a2 + 2)) {
            goto LABEL_168;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v77);
          goto LABEL_170;
        case 0xCu:
          *((unsigned char *)this + 108) |= 4u;
          unint64_t v78 = *((void *)a2 + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)a2 + 2)) {
            goto LABEL_168;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v78);
          goto LABEL_170;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_172;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarOptical::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 108);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    char v4 = *(unsigned char *)(v3 + 108);
  }
  if ((v4 & 8) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 56);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 64);
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 5u);
  }
  char v10 = *(unsigned char *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 100), 6u);
    char v10 = *(unsigned char *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0) {
        goto LABEL_15;
      }
LABEL_26:
      this = PB::Writer::write(a2, *(unsigned char *)(v3 + 104), 8u);
      if ((*(unsigned char *)(v3 + 108) & 0x10) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 7u);
  char v10 = *(unsigned char *)(v3 + 108);
  if (v10 < 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v10 & 0x10) != 0) {
LABEL_16:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 9u);
LABEL_17:
  uint64_t v11 = *(float **)(v3 + 32);
  uint64_t v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0xAu);
  }
  char v14 = *(unsigned char *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xBu);
    char v14 = *(unsigned char *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
  {
    float v15 = *(float *)(v3 + 84);
    return PB::Writer::write(a2, v15, 0xCu);
  }
  return this;
}

BOOL CMMsl::InEarOptical::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 108);
  int v5 = *(unsigned __int8 *)(a2 + 108);
  if (v4)
  {
    if ((v5 & 1) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  if ((v4 & 8) != 0)
  {
    if ((v5 & 8) == 0 || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)) {
      return 0;
    }
  }
  else if ((v5 & 8) != 0)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v6)
  {
    if (!v7 || !CMMsl::ClefMeasurement::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a2 + 64);
  if (v8)
  {
    if (!v9 || !CMMsl::ClefMeasurement::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v11 = *(float **)(a1 + 8);
  char v10 = *(float **)(a1 + 16);
  uint64_t v12 = *(float **)(a2 + 8);
  if ((char *)v10 - (char *)v11 == *(void *)(a2 + 16) - (void)v12)
  {
    while (v11 != v10)
    {
      if (*v11 != *v12) {
        return 0;
      }
      ++v11;
      ++v12;
    }
    if ((v4 & 0x40) != 0)
    {
      if ((v5 & 0x40) == 0 || *(float *)(a1 + 100) != *(float *)(a2 + 100)) {
        return 0;
      }
    }
    else if ((v5 & 0x40) != 0)
    {
      return 0;
    }
    if ((v4 & 0x20) != 0)
    {
      if ((v5 & 0x20) == 0 || *(float *)(a1 + 96) != *(float *)(a2 + 96)) {
        return 0;
      }
    }
    else if ((v5 & 0x20) != 0)
    {
      return 0;
    }
    if ((v4 & v5 & 0x80) != 0)
    {
      if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104)) {
        return 0;
      }
    }
    else if (((v4 | v5) & 0x80) != 0)
    {
      return 0;
    }
    if ((v4 & 0x10) != 0)
    {
      if ((v5 & 0x10) == 0 || *(_DWORD *)(a1 + 92) != *(_DWORD *)(a2 + 92)) {
        return 0;
      }
    }
    else if ((v5 & 0x10) != 0)
    {
      return 0;
    }
    char v14 = *(float **)(a1 + 32);
    float v13 = *(float **)(a1 + 40);
    float v15 = *(float **)(a2 + 32);
    if ((char *)v13 - (char *)v14 == *(void *)(a2 + 40) - (void)v15)
    {
      while (v14 != v13)
      {
        if (*v14 != *v15) {
          return 0;
        }
        ++v14;
        ++v15;
      }
      if ((v4 & 2) != 0)
      {
        if ((v5 & 2) == 0 || *(float *)(a1 + 80) != *(float *)(a2 + 80)) {
          return 0;
        }
      }
      else if ((v5 & 2) != 0)
      {
        return 0;
      }
      BOOL result = (v5 & 4) == 0;
      if ((v4 & 4) == 0) {
        return result;
      }
      if ((v5 & 4) != 0 && *(float *)(a1 + 84) == *(float *)(a2 + 84)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t CMMsl::InEarOptical::hash_value(CMMsl::InEarOptical *this)
{
  if (*((unsigned char *)this + 108))
  {
    if (*((double *)this + 9) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 9);
    }
    if ((*((unsigned char *)this + 108) & 8) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 108) & 8) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 22);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = *((void *)this + 7);
  if (v4)
  {
    char v5 = *(unsigned char *)(v4 + 16);
    float v6 = *(float *)(v4 + 8);
    float v7 = *(float *)(v4 + 12);
    BOOL v8 = v6 == 0.0 || (v5 & 1) == 0;
    uint64_t v9 = LODWORD(v6);
    if (v8) {
      uint64_t v9 = 0;
    }
    int v10 = v5 & 2;
    BOOL v11 = v7 == 0.0 || v10 == 0;
    uint64_t v12 = LODWORD(v7);
    if (v11) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12 ^ v9;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *((void *)this + 8);
  if (v14)
  {
    char v15 = *(unsigned char *)(v14 + 16);
    float v16 = *(float *)(v14 + 8);
    float v17 = *(float *)(v14 + 12);
    BOOL v18 = v16 == 0.0 || (v15 & 1) == 0;
    uint64_t v19 = LODWORD(v16);
    if (v18) {
      uint64_t v19 = 0;
    }
    int v20 = v15 & 2;
    BOOL v21 = v17 == 0.0 || v20 == 0;
    uint64_t v22 = LODWORD(v17);
    if (v21) {
      uint64_t v22 = 0;
    }
    uint64_t v23 = v22 ^ v19;
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = PBHashBytes();
  if ((*((unsigned char *)this + 108) & 0x40) == 0)
  {
    uint64_t v25 = 0;
    if ((*((unsigned char *)this + 108) & 0x20) != 0) {
      goto LABEL_37;
    }
LABEL_47:
    uint64_t v27 = 0;
    if ((*((unsigned char *)this + 108) & 0x80) != 0) {
      goto LABEL_41;
    }
LABEL_48:
    uint64_t v28 = 0;
    if ((*((unsigned char *)this + 108) & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_49;
  }
  float v30 = *((float *)this + 25);
  if (v30 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v30);
  }
  if ((*((unsigned char *)this + 108) & 0x20) == 0) {
    goto LABEL_47;
  }
LABEL_37:
  float v26 = *((float *)this + 24);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((*((unsigned char *)this + 108) & 0x80) == 0) {
    goto LABEL_48;
  }
LABEL_41:
  uint64_t v28 = *((unsigned __int8 *)this + 104);
  if ((*((unsigned char *)this + 108) & 0x10) != 0)
  {
LABEL_42:
    uint64_t v29 = *((int *)this + 23);
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v29 = 0;
LABEL_50:
  uint64_t v31 = PBHashBytes();
  if ((*((unsigned char *)this + 108) & 2) != 0)
  {
    float v35 = *((float *)this + 20);
    uint64_t v32 = LODWORD(v35);
    if (v35 == 0.0) {
      uint64_t v32 = 0;
    }
    if ((*((unsigned char *)this + 108) & 4) != 0) {
      goto LABEL_52;
    }
LABEL_58:
    uint64_t v34 = 0;
    return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
  }
  uint64_t v32 = 0;
  if ((*((unsigned char *)this + 108) & 4) == 0) {
    goto LABEL_58;
  }
LABEL_52:
  float v33 = *((float *)this + 21);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  return v3 ^ v2 ^ v13 ^ v23 ^ v25 ^ v27 ^ v28 ^ v29 ^ v24 ^ v31 ^ v32 ^ v34;
}

uint64_t CMMsl::InEarOptical::makeCurrent(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarOptical::makeInstability(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A65C0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A65C0;
  return this;
}

void CMMsl::InEarSession::~InEarSession(CMMsl::InEarSession *this)
{
  *(void *)this = off_1003A65C0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarSession::~InEarSession(this);

  operator delete();
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t this, const CMMsl::InEarSession *a2)
{
  *(void *)this = off_1003A65C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 32))
  {
    int v3 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 32) = 1;
    *(_DWORD *)(this + 24) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 32) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 7);
    *(unsigned char *)(this + 32) = v2;
    *(_DWORD *)(this + 28) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, const CMMsl::InEarSession *a2)
{
  if ((const CMMsl::InEarSession *)a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarSession *a2, CMMsl::InEarSession *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  double result = *((double *)a2 + 3);
  uint64_t v5 = *((void *)this + 3);
  *((double *)this + 3) = result;
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  return result;
}

uint64_t CMMsl::InEarSession::InEarSession(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_1003A65C0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v8 = *v4;
  *uint64_t v4 = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t CMMsl::InEarSession::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarSession::InEarSession((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    CMMsl::InEarSession::~InEarSession((CMMsl::InEarSession *)v7);
  }
  return a1;
}

uint64_t CMMsl::InEarSession::formatText(CMMsl::InEarSession *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 32)) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  }
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "maximum");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "minimum");
  }
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 7));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarSession::readFrom(CMMsl::InEarSession *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_57;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_46:
            LODWORD(v25) = 0;
            goto LABEL_57;
          }
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v39 = v20 + 1;
              char v40 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v39;
              v25 |= (unint64_t)(v40 & 0x7F) << v37;
              if (v40 < 0)
              {
                v37 += 7;
                unint64_t v20 = v39;
                BOOL v14 = v38++ > 8;
                if (v14) {
                  goto LABEL_46;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_57:
          *((_DWORD *)this + 6) = v25;
          goto LABEL_62;
        case 2u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_61;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_53:
            LODWORD(v34) = 0;
            goto LABEL_61;
          }
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_62;
      }
      while (1)
      {
        if (v30 == v29)
        {
          LODWORD(v34) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_61;
        }
        unint64_t v43 = v29 + 1;
        char v44 = *(unsigned char *)(v31 + v29);
        *((void *)a2 + 1) = v43;
        v34 |= (unint64_t)(v44 & 0x7F) << v41;
        if ((v44 & 0x80) == 0) {
          break;
        }
        v41 += 7;
        unint64_t v29 = v43;
        BOOL v14 = v42++ > 8;
        if (v14) {
          goto LABEL_53;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v34) = 0;
      }
LABEL_61:
      *((_DWORD *)this + 7) = v34;
LABEL_62:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarSession::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  uint64_t v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
  {
    return PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  return this;
}

BOOL CMMsl::InEarSession::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (v4)
  {
    if (!v5 || !CMMsl::ClefMeasurement::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL result = v6 == 0;
  if (!*(void *)(a1 + 8)) {
    return result;
  }
  return v6 && CMMsl::ClefMeasurement::operator==(*(void *)(a1 + 8), v6);
}

uint64_t CMMsl::InEarSession::hash_value(CMMsl::InEarSession *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 7);
      goto LABEL_6;
    }
  }
  uint64_t v2 = 0;
LABEL_6:
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    char v4 = *(unsigned char *)(v3 + 16);
    float v5 = *(float *)(v3 + 8);
    float v6 = *(float *)(v3 + 12);
    BOOL v7 = v5 == 0.0 || (v4 & 1) == 0;
    uint64_t v8 = LODWORD(v5);
    if (v7) {
      uint64_t v8 = 0;
    }
    int v9 = v4 & 2;
    BOOL v10 = v6 == 0.0 || v9 == 0;
    uint64_t v11 = LODWORD(v6);
    if (v10) {
      uint64_t v11 = 0;
    }
    uint64_t v3 = v11 ^ v8;
  }
  uint64_t v12 = *((void *)this + 1);
  if (v12)
  {
    char v13 = *(unsigned char *)(v12 + 16);
    float v14 = *(float *)(v12 + 8);
    float v15 = *(float *)(v12 + 12);
    BOOL v16 = v14 == 0.0 || (v13 & 1) == 0;
    uint64_t v17 = LODWORD(v14);
    if (v16) {
      uint64_t v17 = 0;
    }
    int v18 = v13 & 2;
    BOOL v19 = v15 == 0.0 || v18 == 0;
    uint64_t v20 = LODWORD(v15);
    if (v19) {
      uint64_t v20 = 0;
    }
    uint64_t v12 = v20 ^ v17;
  }
  return v2 ^ v1 ^ v3 ^ v12;
}

uint64_t CMMsl::InEarSession::makeMinimum(uint64_t this)
{
  if (!*(void *)(this + 16)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarSession::makeMaximum(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

double CMMsl::InEarTransition::InEarTransition(CMMsl::InEarTransition *this)
{
  *(void *)this = off_1003A65F8;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *(void *)((char *)this + 28) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A65F8;
  double result = 0.0;
  *((void *)this + 2) = 0;
  *(void *)((char *)this + 28) = 0;
  return result;
}

void CMMsl::InEarTransition::~InEarTransition(CMMsl::InEarTransition *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::InEarTransition::InEarTransition(uint64_t this, const CMMsl::InEarTransition *a2)
{
  *(void *)this = off_1003A65F8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 28) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 7);
      *(unsigned char *)(this + 32) = v3 | 0x10;
      *(_DWORD *)(this + 28) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, const CMMsl::InEarTransition *a2)
{
  if ((const CMMsl::InEarTransition *)a1 != a2)
  {
    CMMsl::InEarTransition::InEarTransition((uint64_t)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v9;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransition *a2, CMMsl::InEarTransition *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  double result = *((double *)a2 + 2);
  uint64_t v7 = *((void *)this + 2);
  *((double *)this + 2) = result;
  *((void *)a2 + 2) = v7;
  int v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  return result;
}

double CMMsl::InEarTransition::InEarTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A65F8;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A65F8;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return result;
}

uint64_t CMMsl::InEarTransition::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A65F8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 16) = v7;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::InEarTransition::formatText(CMMsl::InEarTransition *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "eventTag", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "from", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "to", *((_DWORD *)this + 7));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InEarTransition::readFrom(CMMsl::InEarTransition *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_87;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_88;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *((_DWORD *)this + 6) = v25;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 4) = v37;
              goto LABEL_104;
            case 5u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 7) = v43;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::InEarTransition::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 32) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 28);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

BOOL CMMsl::InEarTransition::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if ((*(unsigned char *)(a2 + 32) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 8) == 0 || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 4) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 32) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 32) & 2) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 32) & 0x10) == 0;
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0) {
    return (*(unsigned char *)(a2 + 32) & 0x10) != 0 && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  }
  return v2;
}

uint64_t CMMsl::InEarTransition::hash_value(CMMsl::InEarTransition *this)
{
  if (*((unsigned char *)this + 32))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 5);
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t v4 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_13:
    uint64_t v5 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v4 = *((int *)this + 4);
  if ((*((unsigned char *)this + 32) & 0x10) == 0) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v5 = *((int *)this + 7);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5;
}

double CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  *(void *)this = off_1003A6630;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6630;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void CMMsl::InEarTransitionEntry::~InEarTransitionEntry(CMMsl::InEarTransitionEntry *this)
{
  *(void *)this = off_1003A6630;
  long long v6 = (void **)((char *)this + 96);
  sub_100274A84(&v6);
  long long v6 = (void **)((char *)this + 72);
  sub_100274A84(&v6);
  uint64_t v2 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InEarTransitionEntry::~InEarTransitionEntry(this);

  operator delete();
}

CMMsl::InEarTransitionEntry *CMMsl::InEarTransitionEntry::InEarTransitionEntry(CMMsl::InEarTransitionEntry *this, const CMMsl::InEarTransitionEntry *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(void *)this = off_1003A6630;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 31) = 0;
  *((_DWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (*((unsigned char *)a2 + 132))
  {
    int v6 = *((_DWORD *)a2 + 30);
    *((unsigned char *)this + 132) = 1;
    *((_DWORD *)this + 30) = v6;
    char v5 = 3;
    if ((*((unsigned char *)a2 + 132) & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 2;
  if ((*((unsigned char *)a2 + 132) & 2) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 31);
    *((unsigned char *)this + 132) = v5;
    *((_DWORD *)this + 31) = v7;
  }
LABEL_6:
  if (*((void *)a2 + 9) != *((void *)a2 + 10)) {
    sub_1000703A4();
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  char v8 = *((unsigned char *)a2 + 132);
  if ((v8 & 8) != 0)
  {
    char v9 = *((unsigned char *)a2 + 129);
    *((unsigned char *)this + 132) |= 8u;
    *((unsigned char *)this + 129) = v9;
    char v8 = *((unsigned char *)a2 + 132);
  }
  if ((v8 & 4) != 0)
  {
    char v10 = *((unsigned char *)a2 + 128);
    *((unsigned char *)this + 132) |= 4u;
    *((unsigned char *)this + 128) = v10;
  }
  if (*((void *)a2 + 12) != *((void *)a2 + 13)) {
    sub_1001075F8();
  }
  return this;
}

void sub_1001075F8()
{
}

void sub_1001076FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, const CMMsl::InEarTransitionEntry *a2)
{
  if (a1 != a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InEarTransitionEntry *a2, CMMsl::InEarTransitionEntry *a3)
{
  int v3 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  double result = *((double *)a2 + 15);
  uint64_t v5 = *((void *)this + 15);
  *((double *)this + 15) = result;
  *((void *)a2 + 15) = v5;
  uint64_t v6 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 129);
  *((unsigned char *)this + 129) = *((unsigned char *)a2 + 129);
  *((unsigned char *)a2 + 129) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 128);
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  *((unsigned char *)a2 + 128) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v18;
  uint64_t v19 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v19;
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::InEarTransitionEntry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6630;
  uint64_t v4 = a1 + 32;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v6 = (_OWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  sub_100274B44((void **)(a1 + 72));
  *uint64_t v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  __n128 v7 = sub_100274A30(v5, (__n128 *)(a2 + 8));
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  if (v9) {
    (*(void (**)(uint64_t, __n128))(*(void *)v9 + 8))(v9, v7);
  }
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  if (v11) {
    (*(void (**)(uint64_t, __n128))(*(void *)v11 + 8))(v11, v7);
  }
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  sub_100274B44((void **)(a1 + 96));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

CMMsl *CMMsl::InEarTransitionEntry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InEarTransitionEntry::InEarTransitionEntry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InEarTransitionEntry *)v5, v3);
    CMMsl::InEarTransitionEntry::~InEarTransitionEntry((CMMsl::InEarTransitionEntry *)v5);
  }
  return a1;
}

uint64_t CMMsl::InEarTransitionEntry::formatText(CMMsl::InEarTransitionEntry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "baseline");
  }
  if (*((unsigned char *)this + 132)) {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 30));
  }
  uint64_t v6 = *((void *)this + 8);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "minimum");
  }
  __n128 v7 = (uint64_t *)*((void *)this + 9);
  uint64_t v8 = (uint64_t *)*((void *)this + 10);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "optical");
  }
  char v10 = *((unsigned char *)this + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "ringBufferUpdated", *((unsigned char *)this + 128));
    char v10 = *((unsigned char *)this + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(a2, "runningMinAccepted", *((unsigned char *)this + 129));
  if ((*((unsigned char *)this + 132) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 31));
LABEL_13:
  uint64_t v11 = (uint64_t *)*((void *)this + 12);
  uint64_t v12 = (uint64_t *)*((void *)this + 13);
  while (v11 != v12)
  {
    uint64_t v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "temp");
  }
  uint64_t v14 = (float *)*((void *)this + 1);
  uint64_t v15 = (float *)*((void *)this + 2);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "tilt", v16);
  }
  uint64_t v17 = (float *)*((void *)this + 4);
  uint64_t v18 = (float *)*((void *)this + 5);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(a2, "tip", v19);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InEarTransitionEntry::readFrom(CMMsl::InEarTransitionEntry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    char v10 = (void **)((char *)this + 32);
    uint64_t v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 132) |= 1u;
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          uint64_t v27 = *(void *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)a2 + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_144;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v30) = 0;
            goto LABEL_144;
          }
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v80 = v25 + 1;
              char v81 = *(unsigned char *)(v27 + v25);
              *((void *)a2 + 1) = v80;
              v30 |= (unint64_t)(v81 & 0x7F) << v78;
              if (v81 < 0)
              {
                v78 += 7;
                unint64_t v25 = v80;
                BOOL v18 = v79++ > 8;
                if (v18) {
                  goto LABEL_107;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v30) = 0;
              }
            }
            break;
          }
LABEL_144:
          *((_DWORD *)this + 30) = v30;
          goto LABEL_96;
        case 2u:
          *((unsigned char *)this + 132) |= 2u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v34 = *((void *)a2 + 2);
          uint64_t v35 = *(void *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_147;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v18 = v37++ > 8;
            }
            while (!v18);
LABEL_114:
            LODWORD(v38) = 0;
            goto LABEL_147;
          }
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v84 = v33 + 1;
              char v85 = *(unsigned char *)(v35 + v33);
              *((void *)a2 + 1) = v84;
              v38 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                unint64_t v33 = v84;
                BOOL v18 = v83++ > 8;
                if (v18) {
                  goto LABEL_114;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_147:
          *((_DWORD *)this + 31) = v38;
          goto LABEL_96;
        case 3u:
          sub_100071474();
        case 4u:
          if (v24 != 2)
          {
            unsigned int v87 = (char *)*((void *)this + 5);
            unint64_t v86 = *((void *)this + 6);
            if ((unint64_t)v87 >= v86)
            {
              unint64_t v91 = (char *)*v10;
              uint64_t v92 = (v87 - (unsigned char *)*v10) >> 2;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
LABEL_171:
              }
                sub_10000EE98();
              uint64_t v94 = v86 - (void)v91;
              if (v94 >> 1 > v93) {
                unint64_t v93 = v94 >> 1;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                unint64_t v96 = (char *)sub_100024458((uint64_t)v11, v95);
                unint64_t v91 = (char *)*((void *)this + 4);
                unsigned int v87 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v96 = 0;
              }
              unint64_t v103 = &v96[4 * v92];
              *(_DWORD *)unint64_t v103 = 0;
              unint64_t v88 = v103 + 4;
              while (v87 != v91)
              {
                int v104 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v103 - 1) = v104;
                v103 -= 4;
              }
              *((void *)this + 4) = v103;
              *((void *)this + 5) = v88;
              *((void *)this + 6) = &v96[4 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v87 = 0;
              unint64_t v88 = v87 + 4;
            }
            *((void *)this + 5) = v88;
            goto LABEL_162;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          while (v41 < v42 && !*((unsigned char *)a2 + 24))
          {
            char v44 = (char *)*((void *)this + 5);
            unint64_t v43 = *((void *)this + 6);
            if ((unint64_t)v44 >= v43)
            {
              unsigned int v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
                goto LABEL_171;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_100024458((uint64_t)v11, v50);
                unsigned int v46 = (char *)*((void *)this + 4);
                char v44 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v51 = 0;
              }
              char v52 = &v51[4 * v47];
              *(_DWORD *)char v52 = 0;
              char v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *((void *)this + 4) = v52;
              *((void *)this + 5) = v45;
              *((void *)this + 6) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)char v44 = 0;
              char v45 = v44 + 4;
            }
            *((void *)this + 5) = v45;
            unint64_t v54 = *((void *)a2 + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2)) {
              goto LABEL_123;
            }
            *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
            unint64_t v42 = *((void *)a2 + 2);
            unint64_t v41 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v41;
          }
          goto LABEL_95;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)a2 + 1);
            unint64_t v56 = *((void *)a2 + 2);
            while (v55 < v56 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v58 = (char *)*((void *)this + 2);
              unint64_t v57 = *((void *)this + 3);
              if ((unint64_t)v58 >= v57)
              {
                char v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 2;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62) {
                  goto LABEL_172;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 1 > v62) {
                  unint64_t v62 = v63 >> 1;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  unint64_t v65 = (char *)sub_100024458((uint64_t)v9, v64);
                  char v60 = (char *)*((void *)this + 1);
                  unsigned int v58 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v65 = 0;
                }
                char v66 = &v65[4 * v61];
                *(_DWORD *)char v66 = 0;
                unint64_t v59 = v66 + 4;
                while (v58 != v60)
                {
                  int v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *((void *)this + 1) = v66;
                *((void *)this + 2) = v59;
                *((void *)this + 3) = &v65[4 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v58 = 0;
                unint64_t v59 = v58 + 4;
              }
              *((void *)this + 2) = v59;
              unint64_t v68 = *((void *)a2 + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)a2 + 2))
              {
LABEL_123:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(void *)a2 + v68);
              unint64_t v56 = *((void *)a2 + 2);
              unint64_t v55 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v55;
            }
LABEL_95:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v90 = (char *)*((void *)this + 2);
            unint64_t v89 = *((void *)this + 3);
            if ((unint64_t)v90 >= v89)
            {
              char v97 = (char *)*v8;
              uint64_t v98 = (v90 - (unsigned char *)*v8) >> 2;
              unint64_t v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 62) {
LABEL_172:
              }
                sub_10000EE98();
              uint64_t v100 = v89 - (void)v97;
              if (v100 >> 1 > v99) {
                unint64_t v99 = v100 >> 1;
              }
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v99;
              }
              if (v101)
              {
                unint64_t v102 = (char *)sub_100024458((uint64_t)v9, v101);
                char v97 = (char *)*((void *)this + 1);
                unint64_t v90 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v102 = 0;
              }
              int v105 = &v102[4 * v98];
              *(_DWORD *)int v105 = 0;
              unint64_t v88 = v105 + 4;
              while (v90 != v97)
              {
                int v106 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v105 - 1) = v106;
                v105 -= 4;
              }
              *((void *)this + 1) = v105;
              *((void *)this + 2) = v88;
              *((void *)this + 3) = &v102[4 * v101];
              if (v97) {
                operator delete(v97);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v90 = 0;
              unint64_t v88 = v90 + 4;
            }
            *((void *)this + 2) = v88;
LABEL_162:
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((void *)a2 + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(void *)a2 + v107);
              *((void *)a2 + 1) += 4;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          *((unsigned char *)this + 132) |= 8u;
          unint64_t v69 = *((void *)a2 + 1);
          if (v69 >= *((void *)a2 + 2))
          {
            BOOL v72 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v70 = v69 + 1;
            int v71 = *(unsigned __int8 *)(*(void *)a2 + v69);
            *((void *)a2 + 1) = v70;
            BOOL v72 = v71 != 0;
          }
          *((unsigned char *)this + 129) = v72;
          goto LABEL_96;
        case 9u:
          *((unsigned char *)this + 132) |= 4u;
          unint64_t v73 = *((void *)a2 + 1);
          if (v73 >= *((void *)a2 + 2))
          {
            BOOL v76 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v74 = v73 + 1;
            int v75 = *(unsigned __int8 *)(*(void *)a2 + v73);
            *((void *)a2 + 1) = v74;
            BOOL v76 = v75 != 0;
          }
          *((unsigned char *)this + 128) = v76;
          goto LABEL_96;
        case 0xAu:
          sub_1001085E8();
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

void sub_1001085E8()
{
}

void sub_100108700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100274DD4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CMMsl::InEarTransitionEntry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 132);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 120), 1u);
    char v4 = *(unsigned char *)(v3 + 132);
  }
  if ((v4 & 2) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 2u);
  }
  uint64_t v5 = *(const PB::Base ***)(v3 + 72);
  uint64_t v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    __n128 v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7, 3u);
  }
  uint64_t v8 = *(float **)(v3 + 32);
  uint64_t v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 4u);
  }
  uint64_t v11 = *(float **)(v3 + 8);
  uint64_t v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 5u);
  }
  unsigned int v14 = *(const PB::Base **)(v3 + 64);
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14, 6u);
  }
  unint64_t v15 = *(const PB::Base **)(v3 + 56);
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15, 7u);
  }
  char v16 = *(unsigned char *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 129), 8u);
    char v16 = *(unsigned char *)(v3 + 132);
  }
  if ((v16 & 4) != 0) {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 128), 9u);
  }
  BOOL v18 = *(const PB::Base ***)(v3 + 96);
  char v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    char v19 = *v18++;
    this = PB::Writer::writeSubmessage(a2, v19, 0xAu);
  }
  return this;
}

BOOL CMMsl::InEarTransitionEntry::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 132))
  {
    if ((*(unsigned char *)(a2 + 132) & 1) == 0 || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 132))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 132) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 132) & 2) == 0 || *(_DWORD *)(a1 + 124) != *(_DWORD *)(a2 + 124)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 132) & 2) != 0)
  {
    return 0;
  }
  if (!sub_10007189C((uint64_t *)(a1 + 72), a2 + 72)) {
    return 0;
  }
  uint64_t v5 = *(float **)(a1 + 32);
  char v4 = *(float **)(a1 + 40);
  uint64_t v6 = *(float **)(a2 + 32);
  if ((char *)v4 - (char *)v5 != *(void *)(a2 + 40) - (void)v6) {
    return 0;
  }
  while (v5 != v4)
  {
    if (*v5 != *v6) {
      return 0;
    }
    ++v5;
    ++v6;
  }
  uint64_t v8 = *(float **)(a1 + 8);
  __n128 v7 = *(float **)(a1 + 16);
  uint64_t v9 = *(float **)(a2 + 8);
  if ((char *)v7 - (char *)v8 != *(void *)(a2 + 16) - (void)v9) {
    return 0;
  }
  while (v8 != v7)
  {
    if (*v8 != *v9) {
      return 0;
    }
    ++v8;
    ++v9;
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  if (v10)
  {
    if (!v11 || !CMMsl::ClefMeasurement::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a2 + 56);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_30;
    }
    return 0;
  }
  if (!v13 || !CMMsl::ClefMeasurement::operator==(v12, v13)) {
    return 0;
  }
LABEL_30:
  if ((*(unsigned char *)(a1 + 132) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 132) & 8) == 0 || *(unsigned __int8 *)(a1 + 129) != *(unsigned __int8 *)(a2 + 129)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 132) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 132) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 132) & 4) == 0 || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(a2 + 128)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 132) & 4) != 0)
  {
    return 0;
  }

  return sub_100108A1C((uint64_t *)(a1 + 96), a2 + 96);
}

BOOL sub_100108A1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = CMMsl::ClefTemperature::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::hash_value(CMMsl::InEarTransitionEntry *this)
{
  if (*((unsigned char *)this + 132))
  {
    uint64_t v2 = *((unsigned int *)this + 30);
    if ((*((unsigned char *)this + 132) & 2) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 132) & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 31);
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
LABEL_6:
  uint64_t v4 = sub_1000719FC((uint64_t)&v29, (uint64_t **)this + 9);
  uint64_t v5 = PBHashBytes();
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = *((void *)this + 8);
  if (v7)
  {
    char v8 = *(unsigned char *)(v7 + 16);
    float v9 = *(float *)(v7 + 8);
    float v10 = *(float *)(v7 + 12);
    BOOL v11 = v9 == 0.0 || (v8 & 1) == 0;
    uint64_t v12 = LODWORD(v9);
    if (v11) {
      uint64_t v12 = 0;
    }
    int v13 = v8 & 2;
    BOOL v14 = v10 == 0.0 || v13 == 0;
    uint64_t v15 = LODWORD(v10);
    if (v14) {
      uint64_t v15 = 0;
    }
    uint64_t v7 = v15 ^ v12;
  }
  uint64_t v16 = *((void *)this + 7);
  if (v16)
  {
    char v17 = *(unsigned char *)(v16 + 16);
    float v18 = *(float *)(v16 + 8);
    float v19 = *(float *)(v16 + 12);
    BOOL v20 = v18 == 0.0 || (v17 & 1) == 0;
    uint64_t v21 = LODWORD(v18);
    if (v20) {
      uint64_t v21 = 0;
    }
    int v22 = v17 & 2;
    BOOL v23 = v19 == 0.0 || v22 == 0;
    uint64_t v24 = LODWORD(v19);
    if (v23) {
      uint64_t v24 = 0;
    }
    uint64_t v16 = v24 ^ v21;
  }
  if ((*((unsigned char *)this + 132) & 8) != 0)
  {
    uint64_t v25 = *((unsigned __int8 *)this + 129);
    if ((*((unsigned char *)this + 132) & 4) != 0) {
      goto LABEL_32;
    }
LABEL_34:
    uint64_t v26 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v16 ^ v25 ^ v26 ^ sub_100108BE4((uint64_t)&v28, (uint64_t **)this + 12);
  }
  uint64_t v25 = 0;
  if ((*((unsigned char *)this + 132) & 4) == 0) {
    goto LABEL_34;
  }
LABEL_32:
  uint64_t v26 = *((unsigned __int8 *)this + 128);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v16 ^ v25 ^ v26 ^ sub_100108BE4((uint64_t)&v28, (uint64_t **)this + 12);
}

uint64_t sub_100108BE4(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v5 = *v2++;
    char v6 = *(unsigned char *)(v5 + 16);
    uint64_t v8 = *(int *)(v5 + 8);
    uint64_t v7 = *(int *)(v5 + 12);
    if ((v6 & 1) == 0) {
      uint64_t v8 = 0;
    }
    if ((v6 & 2) == 0) {
      uint64_t v7 = 0;
    }
    result ^= v8 ^ v7;
  }
  while (v2 != v3);
  return result;
}

uint64_t CMMsl::InEarTransitionEntry::makeMinimum(uint64_t this)
{
  if (!*(void *)(this + 64)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InEarTransitionEntry::makeBaseline(uint64_t this)
{
  if (!*(void *)(this + 56)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this)
{
  *(void *)this = off_1003A6668;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A6668;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void CMMsl::InertialOdometry::~InertialOdometry(CMMsl::InertialOdometry *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::InertialOdometry::InertialOdometry(uint64_t this, const CMMsl::InertialOdometry *a2)
{
  *(void *)this = off_1003A6668;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 20) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 24) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v10 = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v11 = *((_DWORD *)a2 + 11);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v12 = *((_DWORD *)a2 + 12);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v13 = *((_DWORD *)a2 + 13);
  v3 |= 0x400u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v13;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v14 = *((_DWORD *)a2 + 10);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v14;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v15 = *((_DWORD *)a2 + 14);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v15;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return this;
    }
LABEL_30:
    char v17 = *((unsigned char *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x2000;
    *(unsigned char *)(this + 64) = v17;
    return this;
  }
LABEL_29:
  int v16 = *((_DWORD *)a2 + 15);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v16;
  if ((*((_WORD *)a2 + 34) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return this;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *a1, const CMMsl::InertialOdometry *a2)
{
  if (a1 != a2)
  {
    CMMsl::InertialOdometry::InertialOdometry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InertialOdometry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::InertialOdometry *a2, CMMsl::InertialOdometry *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  int v6 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  int v7 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v7;
  return result;
}

float CMMsl::InertialOdometry::InertialOdometry(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6668;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::InertialOdometry::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::InertialOdometry::InertialOdometry((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::InertialOdometry *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::InertialOdometry::formatText(CMMsl::InertialOdometry *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "deltaPositionX", *((float *)this + 4));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaPositionY", *((float *)this + 5));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "deltaPositionZ", *((float *)this + 6));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "deltaVelocityX", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "deltaVelocityY", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "deltaVelocityZ", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "isBIO", *((unsigned char *)this + 64));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quaternionW", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "quaternionX", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "quaternionY", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "quaternionZ", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "referenceFrame", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "staticFlag", *((_DWORD *)this + 15));
  if (*((_WORD *)this + 34)) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InertialOdometry::readFrom(CMMsl::InertialOdometry *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_91;
            case 2u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 3u:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 4u:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 5u:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 6u:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 7u:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 8u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 9u:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_56;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_90;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_90:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_91:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_56:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_102;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x800u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_95;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *((_DWORD *)this + 14) = v25;
              goto LABEL_102;
            case 0xDu:
              *((_WORD *)this + 34) |= 0x1000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_100;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *((_DWORD *)this + 15) = v31;
LABEL_102:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *((_WORD *)this + 34) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 64) = v34;
              goto LABEL_102;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_102;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::InertialOdometry::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0xDu);
    if ((*(_WORD *)(v3 + 68) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  char v5 = *(unsigned char *)(v3 + 64);

  return PB::Writer::write(a2, v5, 0xEu);
}

BOOL CMMsl::InertialOdometry::operator==(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 68);
  __int16 v3 = *(_WORD *)(a2 + 68);
  if (v2)
  {
    if ((v3 & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (v3)
  {
    return 0;
  }
  if ((v2 & 2) != 0)
  {
    if ((v3 & 2) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((v3 & 2) != 0)
  {
    return 0;
  }
  if ((v2 & 4) != 0)
  {
    if ((v3 & 4) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20)) {
      return 0;
    }
  }
  else if ((v3 & 4) != 0)
  {
    return 0;
  }
  if ((v2 & 8) != 0)
  {
    if ((v3 & 8) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((v3 & 8) != 0)
  {
    return 0;
  }
  if ((v2 & 0x10) != 0)
  {
    if ((v3 & 0x10) == 0 || *(float *)(a1 + 28) != *(float *)(a2 + 28)) {
      return 0;
    }
  }
  else if ((v3 & 0x10) != 0)
  {
    return 0;
  }
  if ((v2 & 0x20) != 0)
  {
    if ((v3 & 0x20) == 0 || *(float *)(a1 + 32) != *(float *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((v3 & 0x20) != 0)
  {
    return 0;
  }
  if ((v2 & 0x40) != 0)
  {
    if ((v3 & 0x40) == 0 || *(float *)(a1 + 36) != *(float *)(a2 + 36)) {
      return 0;
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x100) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x100) == 0 || *(float *)(a1 + 44) != *(float *)(a2 + 44)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x100) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x200) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x200) == 0 || *(float *)(a1 + 48) != *(float *)(a2 + 48)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x400) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x400) == 0 || *(float *)(a1 + 52) != *(float *)(a2 + 52)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x400) != 0)
  {
    return 0;
  }
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0 || *(float *)(a1 + 40) != *(float *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x800) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x800) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x800) != 0)
  {
    return 0;
  }
  if ((*(_WORD *)(a1 + 68) & 0x1000) != 0)
  {
    if ((*(_WORD *)(a2 + 68) & 0x1000) == 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60)) {
      return 0;
    }
  }
  else if ((*(_WORD *)(a2 + 68) & 0x1000) != 0)
  {
    return 0;
  }
  BOOL v4 = (v3 & 0x2000) == 0;
  if ((*(_WORD *)(a1 + 68) & 0x2000) != 0) {
    return (*(_WORD *)(a2 + 68) & 0x2000) != 0 && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64);
  }
  return v4;
}

uint64_t CMMsl::InertialOdometry::hash_value(CMMsl::InertialOdometry *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_39:
    uint64_t v4 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_40:
    uint64_t v6 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_9;
    }
LABEL_41:
    uint64_t v8 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_42:
    uint64_t v10 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_43:
    uint64_t v12 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_18;
    }
LABEL_44:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_21;
    }
LABEL_45:
    uint64_t v16 = 0;
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_24;
    }
LABEL_46:
    uint64_t v18 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0) {
      goto LABEL_27;
    }
LABEL_47:
    uint64_t v20 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_30;
    }
LABEL_48:
    uint64_t v22 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0) {
      goto LABEL_33;
    }
    goto LABEL_49;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_39;
  }
LABEL_3:
  float v3 = *((float *)this + 4);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_40;
  }
LABEL_6:
  float v5 = *((float *)this + 5);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_41;
  }
LABEL_9:
  float v7 = *((float *)this + 6);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_42;
  }
LABEL_12:
  float v9 = *((float *)this + 7);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_43;
  }
LABEL_15:
  float v11 = *((float *)this + 8);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_44;
  }
LABEL_18:
  float v13 = *((float *)this + 9);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_45;
  }
LABEL_21:
  float v15 = *((float *)this + 11);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_46;
  }
LABEL_24:
  float v17 = *((float *)this + 12);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x400) == 0) {
    goto LABEL_47;
  }
LABEL_27:
  float v19 = *((float *)this + 13);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_48;
  }
LABEL_30:
  float v21 = *((float *)this + 10);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x800) != 0)
  {
LABEL_33:
    uint64_t v23 = *((unsigned int *)this + 14);
    if ((*((_WORD *)this + 34) & 0x1000) != 0) {
      goto LABEL_34;
    }
LABEL_50:
    uint64_t v24 = 0;
    if ((*((_WORD *)this + 34) & 0x2000) != 0) {
      goto LABEL_35;
    }
LABEL_51:
    uint64_t v25 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
  }
LABEL_49:
  uint64_t v23 = 0;
  if ((*((_WORD *)this + 34) & 0x1000) == 0) {
    goto LABEL_50;
  }
LABEL_34:
  uint64_t v24 = *((unsigned int *)this + 15);
  if ((*((_WORD *)this + 34) & 0x2000) == 0) {
    goto LABEL_51;
  }
LABEL_35:
  uint64_t v25 = *((unsigned __int8 *)this + 64);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25;
}

double CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  *(void *)this = off_1003A66A0;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A66A0;
  *((_DWORD *)this + 22) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

void CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  *(void *)this = off_1003A66A0;
  double v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure(this);

  operator delete();
}

CMMsl::InitialHistoricalMeanSeaLevelPressure *CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, const CMMsl::InitialHistoricalMeanSeaLevelPressure *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  float v5 = (char *)this + 56;
  *(void *)this = off_1003A66A0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  if (*((unsigned char *)a2 + 88))
  {
    uint64_t v6 = *((void *)a2 + 10);
    *((unsigned char *)this + 88) |= 1u;
    *((void *)this + 10) = v6;
  }
  return this;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, const CMMsl::InitialHistoricalMeanSeaLevelPressure *a2)
{
  if ((const CMMsl::InitialHistoricalMeanSeaLevelPressure *)a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v7;
    uint64_t v8 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v8;
    uint64_t v9 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::InitialHistoricalMeanSeaLevelPressure *a2, CMMsl::InitialHistoricalMeanSeaLevelPressure *a3)
{
  int v3 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v5;
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v10;
  uint64_t v11 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v11;
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v12;
  double result = *((double *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((double *)a2 + 10) = result;
  return result;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A66A0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 88) = 0;
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::InitialHistoricalMeanSeaLevelPressure::InitialHistoricalMeanSeaLevelPressure((uint64_t)&v11, a2);
    int v3 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 88) = v18;
    int v18 = v3;
    long long v4 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v14;
    long long v14 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v12;
    long long v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v15;
    long long v15 = v7;
    uint64_t v8 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v16;
    uint64_t v16 = v8;
    uint64_t v9 = *(void *)(a1 + 80);
    *(void *)(a1 + 80) = v17;
    uint64_t v17 = v9;
    CMMsl::InitialHistoricalMeanSeaLevelPressure::~InitialHistoricalMeanSeaLevelPressure((CMMsl::InitialHistoricalMeanSeaLevelPressure *)&v11);
  }
  return a1;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::formatText(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "historicalMeanSeaLevelPressure", v7);
  }
  uint64_t v8 = (double *)*((void *)this + 4);
  uint64_t v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "historicalTimestamp", v10);
  }
  uint64_t v11 = (double *)*((void *)this + 7);
  long long v12 = (double *)*((void *)this + 8);
  while (v11 != v12)
  {
    double v13 = *v11++;
    PB::TextFormatter::format(a2, "historicalUncertainty", v13);
  }
  if (*((unsigned char *)this + 88)) {
    PB::TextFormatter::format(a2, "refreshTime", *((double *)this + 10));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::readFrom(CMMsl::InitialHistoricalMeanSeaLevelPressure *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 56);
    unint64_t v102 = (char *)this + 72;
    uint64_t v9 = (void **)((char *)this + 8);
    double v10 = (char *)this + 24;
    uint64_t v11 = (void **)((char *)this + 32);
    long long v12 = (char *)this + 48;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v25 != 2)
          {
            unint64_t v70 = (char *)*((void *)this + 5);
            unint64_t v69 = *((void *)this + 6);
            if ((unint64_t)v70 >= v69)
            {
              BOOL v76 = (char *)*v11;
              uint64_t v77 = (v70 - (unsigned char *)*v11) >> 3;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 61) {
LABEL_166:
              }
                sub_10000EE98();
              uint64_t v79 = v69 - (void)v76;
              if (v79 >> 2 > v78) {
                unint64_t v78 = v79 >> 2;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                char v81 = (char *)sub_10000EEB0((uint64_t)v12, v80);
                BOOL v76 = (char *)*((void *)this + 4);
                unint64_t v70 = (char *)*((void *)this + 5);
              }
              else
              {
                char v81 = 0;
              }
              uint64_t v94 = &v81[8 * v77];
              *(void *)uint64_t v94 = 0;
              int v71 = v94 + 8;
              while (v70 != v76)
              {
                uint64_t v95 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v94 - 1) = v95;
                v94 -= 8;
              }
              *((void *)this + 4) = v94;
              *((void *)this + 5) = v71;
              *((void *)this + 6) = &v81[8 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(void *)unint64_t v70 = 0;
              int v71 = v70 + 8;
            }
            *((void *)this + 5) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)a2 + 1);
          unint64_t v27 = *((void *)a2 + 2);
          while (v26 < v27 && !*((unsigned char *)a2 + 24))
          {
            char v29 = (char *)*((void *)this + 5);
            unint64_t v28 = *((void *)this + 6);
            if ((unint64_t)v29 >= v28)
            {
              uint64_t v31 = (char *)*v11;
              uint64_t v32 = (v29 - (unsigned char *)*v11) >> 3;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61) {
                goto LABEL_166;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 2 > v33) {
                unint64_t v33 = v34 >> 2;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                unsigned int v36 = (char *)sub_10000EEB0((uint64_t)v12, v35);
                uint64_t v31 = (char *)*((void *)this + 4);
                char v29 = (char *)*((void *)this + 5);
              }
              else
              {
                unsigned int v36 = 0;
              }
              unint64_t v37 = &v36[8 * v32];
              *(void *)unint64_t v37 = 0;
              unsigned int v30 = v37 + 8;
              while (v29 != v31)
              {
                uint64_t v38 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v37 - 1) = v38;
                v37 -= 8;
              }
              *((void *)this + 4) = v37;
              *((void *)this + 5) = v30;
              *((void *)this + 6) = &v36[8 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)char v29 = 0;
              unsigned int v30 = v29 + 8;
            }
            *((void *)this + 5) = v30;
            unint64_t v39 = *((void *)a2 + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
              goto LABEL_106;
            }
            *(v30 - 1) = *(void *)(*(void *)a2 + v39);
            unint64_t v27 = *((void *)a2 + 2);
            unint64_t v26 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v26;
          }
          goto LABEL_107;
        case 2u:
          if (v25 != 2)
          {
            unint64_t v73 = (char *)*((void *)this + 2);
            unint64_t v72 = *((void *)this + 3);
            if ((unint64_t)v73 >= v72)
            {
              char v82 = (char *)*v9;
              uint64_t v83 = (v73 - (unsigned char *)*v9) >> 3;
              unint64_t v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 61) {
LABEL_167:
              }
                sub_10000EE98();
              uint64_t v85 = v72 - (void)v82;
              if (v85 >> 2 > v84) {
                unint64_t v84 = v85 >> 2;
              }
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v84;
              }
              if (v86)
              {
                unsigned int v87 = (char *)sub_10000EEB0((uint64_t)v10, v86);
                char v82 = (char *)*((void *)this + 1);
                unint64_t v73 = (char *)*((void *)this + 2);
              }
              else
              {
                unsigned int v87 = 0;
              }
              unint64_t v96 = &v87[8 * v83];
              *(void *)unint64_t v96 = 0;
              int v71 = v96 + 8;
              while (v73 != v82)
              {
                uint64_t v97 = *((void *)v73 - 1);
                v73 -= 8;
                *((void *)v96 - 1) = v97;
                v96 -= 8;
              }
              *((void *)this + 1) = v96;
              *((void *)this + 2) = v71;
              *((void *)this + 3) = &v87[8 * v86];
              if (v82) {
                operator delete(v82);
              }
            }
            else
            {
              *(void *)unint64_t v73 = 0;
              int v71 = v73 + 8;
            }
            *((void *)this + 2) = v71;
            goto LABEL_153;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v40 = *((void *)a2 + 1);
          unint64_t v41 = *((void *)a2 + 2);
          while (v40 < v41 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v43 = (char *)*((void *)this + 2);
            unint64_t v42 = *((void *)this + 3);
            if ((unint64_t)v43 >= v42)
            {
              char v45 = (char *)*v9;
              uint64_t v46 = (v43 - (unsigned char *)*v9) >> 3;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61) {
                goto LABEL_167;
              }
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 2 > v47) {
                unint64_t v47 = v48 >> 2;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v50 = (char *)sub_10000EEB0((uint64_t)v10, v49);
                char v45 = (char *)*((void *)this + 1);
                unint64_t v43 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v50 = 0;
              }
              unint64_t v51 = &v50[8 * v46];
              *(void *)unint64_t v51 = 0;
              char v44 = v51 + 8;
              while (v43 != v45)
              {
                uint64_t v52 = *((void *)v43 - 1);
                v43 -= 8;
                *((void *)v51 - 1) = v52;
                v51 -= 8;
              }
              *((void *)this + 1) = v51;
              *((void *)this + 2) = v44;
              *((void *)this + 3) = &v50[8 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)unint64_t v43 = 0;
              char v44 = v43 + 8;
            }
            *((void *)this + 2) = v44;
            unint64_t v53 = *((void *)a2 + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
              goto LABEL_106;
            }
            *(v44 - 1) = *(void *)(*(void *)a2 + v53);
            unint64_t v41 = *((void *)a2 + 2);
            unint64_t v40 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v40;
          }
          goto LABEL_107;
        case 3u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v54 = *((void *)a2 + 1);
            unint64_t v55 = *((void *)a2 + 2);
            while (v54 < v55 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v57 = (char *)*((void *)this + 8);
              unint64_t v56 = *((void *)this + 9);
              if ((unint64_t)v57 >= v56)
              {
                unint64_t v59 = (char *)*v8;
                uint64_t v60 = (v57 - (unsigned char *)*v8) >> 3;
                unint64_t v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61) {
                  goto LABEL_168;
                }
                uint64_t v62 = v56 - (void)v59;
                if (v62 >> 2 > v61) {
                  unint64_t v61 = v62 >> 2;
                }
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v63 = v61;
                }
                if (v63)
                {
                  unint64_t v64 = (char *)sub_10000EEB0((uint64_t)v102, v63);
                  unint64_t v59 = (char *)*((void *)this + 7);
                  unint64_t v57 = (char *)*((void *)this + 8);
                }
                else
                {
                  unint64_t v64 = 0;
                }
                unint64_t v65 = &v64[8 * v60];
                *(void *)unint64_t v65 = 0;
                unsigned int v58 = v65 + 8;
                while (v57 != v59)
                {
                  uint64_t v66 = *((void *)v57 - 1);
                  v57 -= 8;
                  *((void *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *((void *)this + 7) = v65;
                *((void *)this + 8) = v58;
                *((void *)this + 9) = &v64[8 * v63];
                if (v59) {
                  operator delete(v59);
                }
              }
              else
              {
                *(void *)unint64_t v57 = 0;
                unsigned int v58 = v57 + 8;
              }
              *((void *)this + 8) = v58;
              unint64_t v67 = *((void *)a2 + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((void *)a2 + 2))
              {
LABEL_106:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v58 - 1) = *(void *)(*(void *)a2 + v67);
              unint64_t v55 = *((void *)a2 + 2);
              unint64_t v54 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v54;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            int v75 = (char *)*((void *)this + 8);
            unint64_t v74 = *((void *)this + 9);
            if ((unint64_t)v75 >= v74)
            {
              unint64_t v88 = (char *)*v8;
              uint64_t v89 = (v75 - (unsigned char *)*v8) >> 3;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 61) {
LABEL_168:
              }
                sub_10000EE98();
              uint64_t v91 = v74 - (void)v88;
              if (v91 >> 2 > v90) {
                unint64_t v90 = v91 >> 2;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                unint64_t v93 = (char *)sub_10000EEB0((uint64_t)v102, v92);
                unint64_t v88 = (char *)*((void *)this + 7);
                int v75 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v93 = 0;
              }
              uint64_t v98 = &v93[8 * v89];
              *(void *)uint64_t v98 = 0;
              int v71 = v98 + 8;
              while (v75 != v88)
              {
                uint64_t v99 = *((void *)v75 - 1);
                v75 -= 8;
                *((void *)v98 - 1) = v99;
                v98 -= 8;
              }
              *((void *)this + 7) = v98;
              *((void *)this + 8) = v71;
              *((void *)this + 9) = &v93[8 * v92];
              if (v88) {
                operator delete(v88);
              }
            }
            else
            {
              *(void *)int v75 = 0;
              int v71 = v75 + 8;
            }
            *((void *)this + 8) = v71;
LABEL_153:
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFF7 && v100 + 8 <= *((void *)a2 + 2))
            {
              *(v71 - 1) = *(void *)(*(void *)a2 + v100);
LABEL_157:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_155:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_158:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 88) |= 1u;
          unint64_t v68 = *((void *)a2 + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)a2 + 2)) {
            goto LABEL_155;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v68);
          goto LABEL_157;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_158;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 32);
  long long v5 = *(double **)(this + 40);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  double v7 = *(double **)(v3 + 8);
  uint64_t v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    double v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  double v10 = *(double **)(v3 + 56);
  uint64_t v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  if (*(unsigned char *)(v3 + 88))
  {
    double v13 = *(double *)(v3 + 80);
    return PB::Writer::write(a2, v13, 4u);
  }
  return this;
}

BOOL CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(double **)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  int v4 = *(double **)(a2 + 32);
  if ((char *)v2 - (char *)v3 != *(void *)(a2 + 40) - (void)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*v3 != *v4) {
      return 0;
    }
    ++v3;
    ++v4;
  }
  double v6 = *(double **)(a1 + 8);
  long long v5 = *(double **)(a1 + 16);
  double v7 = *(double **)(a2 + 8);
  if ((char *)v5 - (char *)v6 != *(void *)(a2 + 16) - (void)v7) {
    return 0;
  }
  while (v6 != v5)
  {
    if (*v6 != *v7) {
      return 0;
    }
    ++v6;
    ++v7;
  }
  double v9 = *(double **)(a1 + 56);
  uint64_t v8 = *(double **)(a1 + 64);
  double v10 = *(double **)(a2 + 56);
  if ((char *)v8 - (char *)v9 != *(void *)(a2 + 64) - (void)v10) {
    return 0;
  }
  while (v9 != v8)
  {
    if (*v9 != *v10) {
      return 0;
    }
    ++v9;
    ++v10;
  }
  BOOL v11 = (*(unsigned char *)(a2 + 88) & 1) == 0;
  if (*(unsigned char *)(a1 + 88)) {
    return (*(unsigned char *)(a2 + 88) & 1) != 0 && *(double *)(a1 + 80) == *(double *)(a2 + 80);
  }
  return v11;
}

uint64_t CMMsl::InitialHistoricalMeanSeaLevelPressure::hash_value(CMMsl::InitialHistoricalMeanSeaLevelPressure *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 88))
  {
    double v5 = *((double *)this + 10);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ v4 ^ *(void *)&v5;
}

void *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(void *this)
{
  *this = off_1003A66D8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A66D8;
  this[1] = 0;
  return this;
}

void CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel(CMMsl::InterpolatedAccessoryAccel *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A66D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel(this);

  operator delete();
}

void *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(void *this, const CMMsl::InterpolatedAccessoryAccel *a2)
{
  *this = off_1003A66D8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::InterpolatedAccessoryAccel *CMMsl::InterpolatedAccessoryAccel::operator=(const CMMsl::InterpolatedAccessoryAccel *a1, const CMMsl::InterpolatedAccessoryAccel *a2)
{
  if (a1 != a2)
  {
    CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel((CMMsl::InterpolatedAccessoryAccel *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::InterpolatedAccessoryAccel *a2, CMMsl::InterpolatedAccessoryAccel *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::InterpolatedAccessoryAccel::InterpolatedAccessoryAccel(void *a1, uint64_t a2)
{
  *a1 = off_1003A66D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A66D8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A66D8;
    v6[1] = v4;
    CMMsl::InterpolatedAccessoryAccel::~InterpolatedAccessoryAccel((CMMsl::InterpolatedAccessoryAccel *)v6);
  }
  return a1;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::formatText(CMMsl::InterpolatedAccessoryAccel *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::InterpolatedAccessoryAccel::readFrom(CMMsl::InterpolatedAccessoryAccel *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

BOOL CMMsl::InterpolatedAccessoryAccel::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  BOOL result = v3 == 0;
  if (v2) {
    return v3 && CMMsl::AccessoryAccel::operator==(v2, v3);
  }
  return result;
}

CMMsl::AccessoryAccel *CMMsl::InterpolatedAccessoryAccel::hash_value(CMMsl::InterpolatedAccessoryAccel *this)
{
  BOOL result = (CMMsl::AccessoryAccel *)*((void *)this + 1);
  if (result) {
    return (CMMsl::AccessoryAccel *)CMMsl::AccessoryAccel::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::InterpolatedAccessoryAccel::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(void *this)
{
  *this = off_1003A6710;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A6710;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(CMMsl::IntersiloNSCodingData *this)
{
  *(void *)this = off_1003A6710;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v2 = (void *)((char *)this + 24);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    sub_100012E84((uint64_t)this + 16, v5);
  }
  sub_100274BC4((void ***)this + 1, 0);

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData(this);

  operator delete();
}

void *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(void *this, const CMMsl::IntersiloNSCodingData *a2)
{
  *this = off_1003A6710;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, const CMMsl::IntersiloNSCodingData *a2)
{
  if ((const CMMsl::IntersiloNSCodingData *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::IntersiloNSCodingData *a2, CMMsl::IntersiloNSCodingData *a3)
{
  uint64_t v3 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v3;
  uint64_t v4 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  return this;
}

void *CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(void *a1, void *a2)
{
  *a1 = off_1003A6710;
  a1[1] = 0;
  uint64_t v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  uint64_t v5 = a1 + 2;
  a1[3] = 0;
  uint64_t v6 = a1 + 3;
  uint64_t v7 = a2[2];
  a2[2] = 0;
  uint64_t v8 = *v5;
  *uint64_t v5 = v7;
  if (v8) {
    sub_100012E84((uint64_t)v5, v8);
  }
  uint64_t v9 = a2[3];
  a2[3] = 0;
  uint64_t v10 = *v6;
  *uint64_t v6 = v9;
  if (v10) {
    sub_100012E84((uint64_t)(a1 + 3), v10);
  }
  unint64_t v11 = (void **)a2[1];
  a2[1] = 0;
  sub_100274BC4(v4, v11);
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::operator=(uint64_t a1, void *a2)
{
  if ((void *)a1 != a2)
  {
    CMMsl::IntersiloNSCodingData::IntersiloNSCodingData(&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    CMMsl::IntersiloNSCodingData::~IntersiloNSCodingData((CMMsl::IntersiloNSCodingData *)&v6);
  }
  return a1;
}

uint64_t CMMsl::IntersiloNSCodingData::formatText(CMMsl::IntersiloNSCodingData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 2)) {
    PB::TextFormatter::format();
  }
  if (*((void *)this + 3)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::IntersiloNSCodingData::readFrom(CMMsl::IntersiloNSCodingData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 4) {
        operator new();
      }
      if (v19 == 3) {
        operator new();
      }
      if (v19 == 2) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v19, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::IntersiloNSCodingData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 16)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 24)) {
    this = PB::Writer::write();
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return this;
}

BOOL CMMsl::IntersiloNSCodingData::operator==(void *a1, void *a2)
{
  int v4 = (unsigned __int8 *)a1[2];
  uint64_t v5 = (unsigned __int8 **)a2[2];
  if (v4)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (unsigned __int8 *)v4[23];
    }
    else {
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
    }
    char v8 = (unsigned __int8 *)*((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((char)v8 < 0) {
      char v8 = v5[1];
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 >= 0) {
      unint64_t v10 = (unsigned __int8 *)a2[2];
    }
    else {
      unint64_t v10 = *v5;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
        return 0;
      }
    }
    else if (v4[23])
    {
      while (*v4 == *v10)
      {
        ++v4;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
LABEL_18:
  unint64_t v11 = (unsigned __int8 *)a1[3];
  char v12 = (unsigned __int8 **)a2[3];
  if (!v11)
  {
    if (!v12) {
      goto LABEL_35;
    }
    return 0;
  }
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v11[23];
  if ((v13 & 0x80u) == 0) {
    char v14 = (unsigned __int8 *)v11[23];
  }
  else {
    char v14 = (unsigned __int8 *)*((void *)v11 + 1);
  }
  unsigned int v15 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
  int v16 = (char)v15;
  if ((char)v15 < 0) {
    unsigned int v15 = v12[1];
  }
  if (v14 != v15) {
    return 0;
  }
  if (v16 >= 0) {
    char v17 = (unsigned __int8 *)a2[3];
  }
  else {
    char v17 = *v12;
  }
  if ((v13 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
      goto LABEL_35;
    }
    return 0;
  }
  if (v11[23])
  {
    while (*v11 == *v17)
    {
      ++v11;
      ++v17;
      if (!--v13) {
        goto LABEL_35;
      }
    }
    return 0;
  }
LABEL_35:
  if (a1[1])
  {
    if (!a2[1]) {
      return 0;
    }
    if (PB::Data::operator==()) {
      return 1;
    }
    if (a1[1]) {
      return 0;
    }
  }
  return a2[1] == 0;
}

unint64_t CMMsl::IntersiloNSCodingData::hash_value(CMMsl::IntersiloNSCodingData *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v8, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    unint64_t v5 = sub_100012EE0((uint64_t)&v9, v4);
  }
  else {
    unint64_t v5 = 0;
  }
  if (*((void *)this + 1)) {
    uint64_t v6 = PBHashBytes();
  }
  else {
    uint64_t v6 = 0;
  }
  return v5 ^ v3 ^ v6;
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this)
{
  *(void *)this = off_1003A6748;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

{
  *(void *)this = off_1003A6748;
  bzero((char *)this + 8, 0x260uLL);
  bzero((char *)this + 624, 0xBB4uLL);
  return this;
}

void CMMsl::Item::~Item(CMMsl::Item *this)
{
  *(void *)this = off_1003A6748;
  uint64_t v2 = *((void *)this + 451);
  *((void *)this + 451) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 450);
  *((void *)this + 450) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 449);
  *((void *)this + 449) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 448);
  *((void *)this + 448) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 447);
  *((void *)this + 447) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 446);
  *((void *)this + 446) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 445);
  *((void *)this + 445) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 443);
  *((void *)this + 443) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 442);
  *((void *)this + 442) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 441);
  *((void *)this + 441) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 440);
  *((void *)this + 440) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 439);
  *((void *)this + 439) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 438);
  *((void *)this + 438) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 437);
  *((void *)this + 437) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 436);
  *((void *)this + 436) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 435);
  *((void *)this + 435) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 434);
  *((void *)this + 434) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)this + 433);
  *((void *)this + 433) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 432);
  *((void *)this + 432) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 431);
  *((void *)this + 431) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 430);
  *((void *)this + 430) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 429);
  *((void *)this + 429) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 428);
  *((void *)this + 428) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 427);
  *((void *)this + 427) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *((void *)this + 426);
  *((void *)this + 426) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *((void *)this + 425);
  *((void *)this + 425) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *((void *)this + 424);
  *((void *)this + 424) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *((void *)this + 423);
  *((void *)this + 423) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *((void *)this + 422);
  *((void *)this + 422) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *((void *)this + 421);
  *((void *)this + 421) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *((void *)this + 420);
  *((void *)this + 420) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *((void *)this + 419);
  *((void *)this + 419) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *((void *)this + 418);
  *((void *)this + 418) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *((void *)this + 417);
  *((void *)this + 417) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *((void *)this + 416);
  *((void *)this + 416) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *((void *)this + 415);
  *((void *)this + 415) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *((void *)this + 414);
  *((void *)this + 414) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *((void *)this + 413);
  *((void *)this + 413) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *((void *)this + 412);
  *((void *)this + 412) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *((void *)this + 411);
  *((void *)this + 411) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *((void *)this + 410);
  *((void *)this + 410) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *((void *)this + 409);
  *((void *)this + 409) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *((void *)this + 408);
  *((void *)this + 408) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *((void *)this + 407);
  *((void *)this + 407) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *((void *)this + 406);
  *((void *)this + 406) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *((void *)this + 405);
  *((void *)this + 405) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = *((void *)this + 404);
  *((void *)this + 404) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = *((void *)this + 403);
  *((void *)this + 403) = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *((void *)this + 402);
  *((void *)this + 402) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *((void *)this + 401);
  *((void *)this + 401) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = *((void *)this + 400);
  *((void *)this + 400) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *((void *)this + 399);
  *((void *)this + 399) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *((void *)this + 398);
  *((void *)this + 398) = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *((void *)this + 397);
  *((void *)this + 397) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = *((void *)this + 396);
  *((void *)this + 396) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = *((void *)this + 395);
  *((void *)this + 395) = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *((void *)this + 394);
  *((void *)this + 394) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *((void *)this + 393);
  *((void *)this + 393) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *((void *)this + 392);
  *((void *)this + 392) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *((void *)this + 391);
  *((void *)this + 391) = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  uint64_t v63 = *((void *)this + 390);
  *((void *)this + 390) = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  uint64_t v64 = *((void *)this + 389);
  *((void *)this + 389) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *((void *)this + 388);
  *((void *)this + 388) = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = *((void *)this + 387);
  *((void *)this + 387) = 0;
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  uint64_t v67 = *((void *)this + 386);
  *((void *)this + 386) = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  uint64_t v68 = *((void *)this + 385);
  *((void *)this + 385) = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  uint64_t v69 = *((void *)this + 384);
  *((void *)this + 384) = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = *((void *)this + 383);
  *((void *)this + 383) = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  uint64_t v71 = *((void *)this + 382);
  *((void *)this + 382) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  uint64_t v72 = *((void *)this + 381);
  *((void *)this + 381) = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  uint64_t v73 = *((void *)this + 380);
  *((void *)this + 380) = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  uint64_t v74 = *((void *)this + 379);
  *((void *)this + 379) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  uint64_t v75 = *((void *)this + 378);
  *((void *)this + 378) = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  uint64_t v76 = *((void *)this + 377);
  *((void *)this + 377) = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  uint64_t v77 = *((void *)this + 376);
  *((void *)this + 376) = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  uint64_t v78 = *((void *)this + 375);
  *((void *)this + 375) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  uint64_t v79 = *((void *)this + 374);
  *((void *)this + 374) = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  uint64_t v80 = *((void *)this + 373);
  *((void *)this + 373) = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  uint64_t v81 = *((void *)this + 372);
  *((void *)this + 372) = 0;
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  uint64_t v82 = *((void *)this + 371);
  *((void *)this + 371) = 0;
  if (v82) {
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
  }
  uint64_t v83 = *((void *)this + 370);
  *((void *)this + 370) = 0;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  uint64_t v84 = *((void *)this + 369);
  *((void *)this + 369) = 0;
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  uint64_t v85 = *((void *)this + 368);
  *((void *)this + 368) = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  uint64_t v86 = *((void *)this + 367);
  *((void *)this + 367) = 0;
  if (v86) {
    (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
  }
  uint64_t v87 = *((void *)this + 366);
  *((void *)this + 366) = 0;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  uint64_t v88 = *((void *)this + 365);
  *((void *)this + 365) = 0;
  if (v88) {
    (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
  }
  uint64_t v89 = *((void *)this + 364);
  *((void *)this + 364) = 0;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  }
  uint64_t v90 = *((void *)this + 363);
  *((void *)this + 363) = 0;
  if (v90) {
    (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
  }
  uint64_t v91 = *((void *)this + 362);
  *((void *)this + 362) = 0;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
  }
  uint64_t v92 = *((void *)this + 361);
  *((void *)this + 361) = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
  }
  uint64_t v93 = *((void *)this + 360);
  *((void *)this + 360) = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  uint64_t v94 = *((void *)this + 359);
  *((void *)this + 359) = 0;
  if (v94) {
    (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
  }
  uint64_t v95 = *((void *)this + 358);
  *((void *)this + 358) = 0;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  uint64_t v96 = *((void *)this + 357);
  *((void *)this + 357) = 0;
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
  }
  uint64_t v97 = *((void *)this + 356);
  *((void *)this + 356) = 0;
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
  }
  uint64_t v98 = *((void *)this + 355);
  *((void *)this + 355) = 0;
  if (v98) {
    (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
  }
  uint64_t v99 = *((void *)this + 354);
  *((void *)this + 354) = 0;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
  }
  uint64_t v100 = *((void *)this + 353);
  *((void *)this + 353) = 0;
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
  }
  uint64_t v101 = *((void *)this + 352);
  *((void *)this + 352) = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  uint64_t v102 = *((void *)this + 351);
  *((void *)this + 351) = 0;
  if (v102) {
    (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
  }
  uint64_t v103 = *((void *)this + 350);
  *((void *)this + 350) = 0;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
  }
  uint64_t v104 = *((void *)this + 349);
  *((void *)this + 349) = 0;
  if (v104) {
    (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
  }
  uint64_t v105 = *((void *)this + 348);
  *((void *)this + 348) = 0;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  uint64_t v106 = *((void *)this + 347);
  *((void *)this + 347) = 0;
  if (v106) {
    (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
  }
  uint64_t v107 = *((void *)this + 346);
  *((void *)this + 346) = 0;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  uint64_t v108 = *((void *)this + 345);
  *((void *)this + 345) = 0;
  if (v108) {
    (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
  }
  uint64_t v109 = *((void *)this + 344);
  *((void *)this + 344) = 0;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
  }
  uint64_t v110 = *((void *)this + 343);
  *((void *)this + 343) = 0;
  if (v110) {
    (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
  }
  uint64_t v111 = *((void *)this + 342);
  *((void *)this + 342) = 0;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
  }
  uint64_t v112 = *((void *)this + 341);
  *((void *)this + 341) = 0;
  if (v112) {
    (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
  }
  uint64_t v113 = *((void *)this + 340);
  *((void *)this + 340) = 0;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
  }
  uint64_t v114 = *((void *)this + 339);
  *((void *)this + 339) = 0;
  if (v114) {
    (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
  }
  uint64_t v115 = *((void *)this + 338);
  *((void *)this + 338) = 0;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
  }
  uint64_t v116 = *((void *)this + 337);
  *((void *)this + 337) = 0;
  if (v116) {
    (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
  }
  uint64_t v117 = *((void *)this + 336);
  *((void *)this + 336) = 0;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  uint64_t v118 = *((void *)this + 335);
  *((void *)this + 335) = 0;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
  }
  uint64_t v119 = *((void *)this + 334);
  *((void *)this + 334) = 0;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
  }
  uint64_t v120 = *((void *)this + 333);
  *((void *)this + 333) = 0;
  if (v120) {
    (*(void (**)(uint64_t))(*(void *)v120 + 8))(v120);
  }
  uint64_t v121 = *((void *)this + 332);
  *((void *)this + 332) = 0;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
  }
  uint64_t v122 = *((void *)this + 331);
  *((void *)this + 331) = 0;
  if (v122) {
    (*(void (**)(uint64_t))(*(void *)v122 + 8))(v122);
  }
  uint64_t v123 = *((void *)this + 330);
  *((void *)this + 330) = 0;
  if (v123) {
    (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
  }
  uint64_t v124 = *((void *)this + 329);
  *((void *)this + 329) = 0;
  if (v124) {
    (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
  }
  uint64_t v125 = *((void *)this + 328);
  *((void *)this + 328) = 0;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  uint64_t v126 = *((void *)this + 327);
  *((void *)this + 327) = 0;
  if (v126) {
    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
  }
  uint64_t v127 = *((void *)this + 326);
  *((void *)this + 326) = 0;
  if (v127) {
    (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
  }
  uint64_t v128 = *((void *)this + 325);
  *((void *)this + 325) = 0;
  if (v128) {
    (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
  }
  uint64_t v129 = *((void *)this + 324);
  *((void *)this + 324) = 0;
  if (v129) {
    (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
  }
  uint64_t v130 = *((void *)this + 323);
  *((void *)this + 323) = 0;
  if (v130) {
    (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
  }
  uint64_t v131 = *((void *)this + 322);
  *((void *)this + 322) = 0;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
  }
  uint64_t v132 = *((void *)this + 321);
  *((void *)this + 321) = 0;
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
  }
  uint64_t v133 = *((void *)this + 320);
  *((void *)this + 320) = 0;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  uint64_t v134 = *((void *)this + 319);
  *((void *)this + 319) = 0;
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  uint64_t v135 = *((void *)this + 318);
  *((void *)this + 318) = 0;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
  }
  uint64_t v136 = *((void *)this + 317);
  *((void *)this + 317) = 0;
  if (v136) {
    (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
  }
  uint64_t v137 = *((void *)this + 316);
  *((void *)this + 316) = 0;
  if (v137) {
    (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
  }
  uint64_t v138 = *((void *)this + 315);
  *((void *)this + 315) = 0;
  if (v138) {
    (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
  }
  uint64_t v139 = *((void *)this + 314);
  *((void *)this + 314) = 0;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
  }
  uint64_t v140 = *((void *)this + 313);
  *((void *)this + 313) = 0;
  if (v140) {
    (*(void (**)(uint64_t))(*(void *)v140 + 8))(v140);
  }
  uint64_t v141 = *((void *)this + 312);
  *((void *)this + 312) = 0;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
  }
  uint64_t v142 = *((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v142) {
    (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
  }
  uint64_t v143 = *((void *)this + 310);
  *((void *)this + 310) = 0;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
  }
  uint64_t v144 = *((void *)this + 309);
  *((void *)this + 309) = 0;
  if (v144) {
    (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
  }
  uint64_t v145 = *((void *)this + 308);
  *((void *)this + 308) = 0;
  if (v145) {
    (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
  }
  uint64_t v146 = *((void *)this + 307);
  *((void *)this + 307) = 0;
  if (v146) {
    (*(void (**)(uint64_t))(*(void *)v146 + 8))(v146);
  }
  uint64_t v147 = *((void *)this + 306);
  *((void *)this + 306) = 0;
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
  }
  uint64_t v148 = *((void *)this + 305);
  *((void *)this + 305) = 0;
  if (v148) {
    (*(void (**)(uint64_t))(*(void *)v148 + 8))(v148);
  }
  uint64_t v149 = *((void *)this + 304);
  *((void *)this + 304) = 0;
  if (v149) {
    (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
  }
  uint64_t v150 = *((void *)this + 303);
  *((void *)this + 303) = 0;
  if (v150) {
    (*(void (**)(uint64_t))(*(void *)v150 + 8))(v150);
  }
  uint64_t v151 = *((void *)this + 302);
  *((void *)this + 302) = 0;
  if (v151) {
    (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
  }
  uint64_t v152 = *((void *)this + 301);
  *((void *)this + 301) = 0;
  if (v152) {
    (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
  }
  uint64_t v153 = *((void *)this + 300);
  *((void *)this + 300) = 0;
  if (v153) {
    (*(void (**)(uint64_t))(*(void *)v153 + 8))(v153);
  }
  uint64_t v154 = *((void *)this + 299);
  *((void *)this + 299) = 0;
  if (v154) {
    (*(void (**)(uint64_t))(*(void *)v154 + 8))(v154);
  }
  uint64_t v155 = *((void *)this + 298);
  *((void *)this + 298) = 0;
  if (v155) {
    (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
  }
  uint64_t v156 = *((void *)this + 297);
  *((void *)this + 297) = 0;
  if (v156) {
    (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
  }
  uint64_t v157 = *((void *)this + 296);
  *((void *)this + 296) = 0;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
  }
  uint64_t v158 = *((void *)this + 295);
  *((void *)this + 295) = 0;
  if (v158) {
    (*(void (**)(uint64_t))(*(void *)v158 + 8))(v158);
  }
  uint64_t v159 = *((void *)this + 294);
  *((void *)this + 294) = 0;
  if (v159) {
    (*(void (**)(uint64_t))(*(void *)v159 + 8))(v159);
  }
  uint64_t v160 = *((void *)this + 293);
  *((void *)this + 293) = 0;
  if (v160) {
    (*(void (**)(uint64_t))(*(void *)v160 + 8))(v160);
  }
  uint64_t v161 = *((void *)this + 292);
  *((void *)this + 292) = 0;
  if (v161) {
    (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
  }
  uint64_t v162 = *((void *)this + 291);
  *((void *)this + 291) = 0;
  if (v162) {
    (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
  }
  uint64_t v163 = *((void *)this + 290);
  *((void *)this + 290) = 0;
  if (v163) {
    (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
  }
  uint64_t v164 = *((void *)this + 289);
  *((void *)this + 289) = 0;
  if (v164) {
    (*(void (**)(uint64_t))(*(void *)v164 + 8))(v164);
  }
  uint64_t v165 = *((void *)this + 288);
  *((void *)this + 288) = 0;
  if (v165) {
    (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
  }
  uint64_t v166 = *((void *)this + 287);
  *((void *)this + 287) = 0;
  if (v166) {
    (*(void (**)(uint64_t))(*(void *)v166 + 8))(v166);
  }
  uint64_t v167 = *((void *)this + 286);
  *((void *)this + 286) = 0;
  if (v167) {
    (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
  }
  uint64_t v168 = *((void *)this + 285);
  *((void *)this + 285) = 0;
  if (v168) {
    (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
  }
  uint64_t v169 = *((void *)this + 284);
  *((void *)this + 284) = 0;
  if (v169) {
    (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
  }
  uint64_t v170 = *((void *)this + 283);
  *((void *)this + 283) = 0;
  if (v170) {
    (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
  }
  uint64_t v171 = *((void *)this + 282);
  *((void *)this + 282) = 0;
  if (v171) {
    (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
  }
  uint64_t v172 = *((void *)this + 281);
  *((void *)this + 281) = 0;
  if (v172) {
    (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
  }
  uint64_t v173 = *((void *)this + 280);
  *((void *)this + 280) = 0;
  if (v173) {
    (*(void (**)(uint64_t))(*(void *)v173 + 8))(v173);
  }
  uint64_t v174 = *((void *)this + 279);
  *((void *)this + 279) = 0;
  if (v174) {
    (*(void (**)(uint64_t))(*(void *)v174 + 8))(v174);
  }
  uint64_t v175 = *((void *)this + 278);
  *((void *)this + 278) = 0;
  if (v175) {
    (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
  }
  uint64_t v176 = *((void *)this + 277);
  *((void *)this + 277) = 0;
  if (v176) {
    (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
  }
  uint64_t v177 = *((void *)this + 276);
  *((void *)this + 276) = 0;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
  }
  uint64_t v178 = *((void *)this + 275);
  *((void *)this + 275) = 0;
  if (v178) {
    (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
  }
  uint64_t v179 = *((void *)this + 274);
  *((void *)this + 274) = 0;
  if (v179) {
    (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
  }
  uint64_t v180 = *((void *)this + 273);
  *((void *)this + 273) = 0;
  if (v180) {
    (*(void (**)(uint64_t))(*(void *)v180 + 8))(v180);
  }
  uint64_t v181 = *((void *)this + 272);
  *((void *)this + 272) = 0;
  if (v181) {
    (*(void (**)(uint64_t))(*(void *)v181 + 8))(v181);
  }
  uint64_t v182 = *((void *)this + 271);
  *((void *)this + 271) = 0;
  if (v182) {
    (*(void (**)(uint64_t))(*(void *)v182 + 8))(v182);
  }
  uint64_t v183 = *((void *)this + 270);
  *((void *)this + 270) = 0;
  if (v183) {
    (*(void (**)(uint64_t))(*(void *)v183 + 8))(v183);
  }
  uint64_t v184 = *((void *)this + 269);
  *((void *)this + 269) = 0;
  if (v184) {
    (*(void (**)(uint64_t))(*(void *)v184 + 8))(v184);
  }
  uint64_t v185 = *((void *)this + 268);
  *((void *)this + 268) = 0;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
  }
  uint64_t v186 = *((void *)this + 267);
  *((void *)this + 267) = 0;
  if (v186) {
    (*(void (**)(uint64_t))(*(void *)v186 + 8))(v186);
  }
  uint64_t v187 = *((void *)this + 266);
  *((void *)this + 266) = 0;
  if (v187) {
    (*(void (**)(uint64_t))(*(void *)v187 + 8))(v187);
  }
  uint64_t v188 = *((void *)this + 265);
  *((void *)this + 265) = 0;
  if (v188) {
    (*(void (**)(uint64_t))(*(void *)v188 + 8))(v188);
  }
  uint64_t v189 = *((void *)this + 264);
  *((void *)this + 264) = 0;
  if (v189) {
    (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
  }
  uint64_t v190 = *((void *)this + 263);
  *((void *)this + 263) = 0;
  if (v190) {
    (*(void (**)(uint64_t))(*(void *)v190 + 8))(v190);
  }
  uint64_t v191 = *((void *)this + 262);
  *((void *)this + 262) = 0;
  if (v191) {
    (*(void (**)(uint64_t))(*(void *)v191 + 8))(v191);
  }
  uint64_t v192 = *((void *)this + 261);
  *((void *)this + 261) = 0;
  if (v192) {
    (*(void (**)(uint64_t))(*(void *)v192 + 8))(v192);
  }
  uint64_t v193 = *((void *)this + 260);
  *((void *)this + 260) = 0;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
  }
  uint64_t v194 = *((void *)this + 259);
  *((void *)this + 259) = 0;
  if (v194) {
    (*(void (**)(uint64_t))(*(void *)v194 + 8))(v194);
  }
  uint64_t v195 = *((void *)this + 258);
  *((void *)this + 258) = 0;
  if (v195) {
    (*(void (**)(uint64_t))(*(void *)v195 + 8))(v195);
  }
  uint64_t v196 = *((void *)this + 257);
  *((void *)this + 257) = 0;
  if (v196) {
    (*(void (**)(uint64_t))(*(void *)v196 + 8))(v196);
  }
  uint64_t v197 = *((void *)this + 256);
  *((void *)this + 256) = 0;
  if (v197) {
    (*(void (**)(uint64_t))(*(void *)v197 + 8))(v197);
  }
  uint64_t v198 = *((void *)this + 255);
  *((void *)this + 255) = 0;
  if (v198) {
    (*(void (**)(uint64_t))(*(void *)v198 + 8))(v198);
  }
  uint64_t v199 = *((void *)this + 254);
  *((void *)this + 254) = 0;
  if (v199) {
    (*(void (**)(uint64_t))(*(void *)v199 + 8))(v199);
  }
  uint64_t v200 = *((void *)this + 253);
  *((void *)this + 253) = 0;
  if (v200) {
    (*(void (**)(uint64_t))(*(void *)v200 + 8))(v200);
  }
  uint64_t v201 = *((void *)this + 252);
  *((void *)this + 252) = 0;
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
  }
  uint64_t v202 = *((void *)this + 251);
  *((void *)this + 251) = 0;
  if (v202) {
    (*(void (**)(uint64_t))(*(void *)v202 + 8))(v202);
  }
  uint64_t v203 = *((void *)this + 250);
  *((void *)this + 250) = 0;
  if (v203) {
    (*(void (**)(uint64_t))(*(void *)v203 + 8))(v203);
  }
  uint64_t v204 = *((void *)this + 249);
  *((void *)this + 249) = 0;
  if (v204) {
    (*(void (**)(uint64_t))(*(void *)v204 + 8))(v204);
  }
  uint64_t v205 = *((void *)this + 248);
  *((void *)this + 248) = 0;
  if (v205) {
    (*(void (**)(uint64_t))(*(void *)v205 + 8))(v205);
  }
  uint64_t v206 = *((void *)this + 247);
  *((void *)this + 247) = 0;
  if (v206) {
    (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
  }
  uint64_t v207 = *((void *)this + 246);
  *((void *)this + 246) = 0;
  if (v207) {
    (*(void (**)(uint64_t))(*(void *)v207 + 8))(v207);
  }
  uint64_t v208 = *((void *)this + 245);
  *((void *)this + 245) = 0;
  if (v208) {
    (*(void (**)(uint64_t))(*(void *)v208 + 8))(v208);
  }
  uint64_t v209 = *((void *)this + 244);
  *((void *)this + 244) = 0;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
  }
  uint64_t v210 = *((void *)this + 243);
  *((void *)this + 243) = 0;
  if (v210) {
    (*(void (**)(uint64_t))(*(void *)v210 + 8))(v210);
  }
  uint64_t v211 = *((void *)this + 242);
  *((void *)this + 242) = 0;
  if (v211) {
    (*(void (**)(uint64_t))(*(void *)v211 + 8))(v211);
  }
  uint64_t v212 = *((void *)this + 241);
  *((void *)this + 241) = 0;
  if (v212) {
    (*(void (**)(uint64_t))(*(void *)v212 + 8))(v212);
  }
  uint64_t v213 = *((void *)this + 240);
  *((void *)this + 240) = 0;
  if (v213) {
    (*(void (**)(uint64_t))(*(void *)v213 + 8))(v213);
  }
  uint64_t v214 = *((void *)this + 239);
  *((void *)this + 239) = 0;
  if (v214) {
    (*(void (**)(uint64_t))(*(void *)v214 + 8))(v214);
  }
  uint64_t v215 = *((void *)this + 238);
  *((void *)this + 238) = 0;
  if (v215) {
    (*(void (**)(uint64_t))(*(void *)v215 + 8))(v215);
  }
  uint64_t v216 = *((void *)this + 237);
  *((void *)this + 237) = 0;
  if (v216) {
    (*(void (**)(uint64_t))(*(void *)v216 + 8))(v216);
  }
  uint64_t v217 = *((void *)this + 236);
  *((void *)this + 236) = 0;
  if (v217) {
    (*(void (**)(uint64_t))(*(void *)v217 + 8))(v217);
  }
  uint64_t v218 = *((void *)this + 235);
  *((void *)this + 235) = 0;
  if (v218) {
    (*(void (**)(uint64_t))(*(void *)v218 + 8))(v218);
  }
  uint64_t v219 = *((void *)this + 234);
  *((void *)this + 234) = 0;
  if (v219) {
    (*(void (**)(uint64_t))(*(void *)v219 + 8))(v219);
  }
  uint64_t v220 = *((void *)this + 233);
  *((void *)this + 233) = 0;
  if (v220) {
    (*(void (**)(uint64_t))(*(void *)v220 + 8))(v220);
  }
  uint64_t v221 = *((void *)this + 232);
  *((void *)this + 232) = 0;
  if (v221) {
    (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
  }
  uint64_t v222 = *((void *)this + 231);
  *((void *)this + 231) = 0;
  if (v222) {
    (*(void (**)(uint64_t))(*(void *)v222 + 8))(v222);
  }
  uint64_t v223 = *((void *)this + 230);
  *((void *)this + 230) = 0;
  if (v223) {
    (*(void (**)(uint64_t))(*(void *)v223 + 8))(v223);
  }
  uint64_t v224 = *((void *)this + 229);
  *((void *)this + 229) = 0;
  if (v224) {
    (*(void (**)(uint64_t))(*(void *)v224 + 8))(v224);
  }
  uint64_t v225 = *((void *)this + 228);
  *((void *)this + 228) = 0;
  if (v225) {
    (*(void (**)(uint64_t))(*(void *)v225 + 8))(v225);
  }
  uint64_t v226 = *((void *)this + 227);
  *((void *)this + 227) = 0;
  if (v226) {
    (*(void (**)(uint64_t))(*(void *)v226 + 8))(v226);
  }
  uint64_t v227 = *((void *)this + 226);
  *((void *)this + 226) = 0;
  if (v227) {
    (*(void (**)(uint64_t))(*(void *)v227 + 8))(v227);
  }
  uint64_t v228 = *((void *)this + 225);
  *((void *)this + 225) = 0;
  if (v228) {
    (*(void (**)(uint64_t))(*(void *)v228 + 8))(v228);
  }
  uint64_t v229 = *((void *)this + 224);
  *((void *)this + 224) = 0;
  if (v229) {
    (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
  }
  uint64_t v230 = *((void *)this + 223);
  *((void *)this + 223) = 0;
  if (v230) {
    (*(void (**)(uint64_t))(*(void *)v230 + 8))(v230);
  }
  uint64_t v231 = *((void *)this + 222);
  *((void *)this + 222) = 0;
  if (v231) {
    (*(void (**)(uint64_t))(*(void *)v231 + 8))(v231);
  }
  uint64_t v232 = *((void *)this + 221);
  *((void *)this + 221) = 0;
  if (v232) {
    (*(void (**)(uint64_t))(*(void *)v232 + 8))(v232);
  }
  uint64_t v233 = *((void *)this + 220);
  *((void *)this + 220) = 0;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 8))(v233);
  }
  uint64_t v234 = *((void *)this + 219);
  *((void *)this + 219) = 0;
  if (v234) {
    (*(void (**)(uint64_t))(*(void *)v234 + 8))(v234);
  }
  uint64_t v235 = *((void *)this + 218);
  *((void *)this + 218) = 0;
  if (v235) {
    (*(void (**)(uint64_t))(*(void *)v235 + 8))(v235);
  }
  uint64_t v236 = *((void *)this + 217);
  *((void *)this + 217) = 0;
  if (v236) {
    (*(void (**)(uint64_t))(*(void *)v236 + 8))(v236);
  }
  uint64_t v237 = *((void *)this + 216);
  *((void *)this + 216) = 0;
  if (v237) {
    (*(void (**)(uint64_t))(*(void *)v237 + 8))(v237);
  }
  uint64_t v238 = *((void *)this + 215);
  *((void *)this + 215) = 0;
  if (v238) {
    (*(void (**)(uint64_t))(*(void *)v238 + 8))(v238);
  }
  uint64_t v239 = *((void *)this + 214);
  *((void *)this + 214) = 0;
  if (v239) {
    (*(void (**)(uint64_t))(*(void *)v239 + 8))(v239);
  }
  uint64_t v240 = *((void *)this + 213);
  *((void *)this + 213) = 0;
  if (v240) {
    (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
  }
  uint64_t v241 = *((void *)this + 212);
  *((void *)this + 212) = 0;
  if (v241) {
    (*(void (**)(uint64_t))(*(void *)v241 + 8))(v241);
  }
  uint64_t v242 = *((void *)this + 211);
  *((void *)this + 211) = 0;
  if (v242) {
    (*(void (**)(uint64_t))(*(void *)v242 + 8))(v242);
  }
  uint64_t v243 = *((void *)this + 210);
  *((void *)this + 210) = 0;
  if (v243) {
    (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
  }
  uint64_t v244 = *((void *)this + 209);
  *((void *)this + 209) = 0;
  if (v244) {
    (*(void (**)(uint64_t))(*(void *)v244 + 8))(v244);
  }
  uint64_t v245 = *((void *)this + 208);
  *((void *)this + 208) = 0;
  if (v245) {
    (*(void (**)(uint64_t))(*(void *)v245 + 8))(v245);
  }
  uint64_t v246 = *((void *)this + 207);
  *((void *)this + 207) = 0;
  if (v246) {
    (*(void (**)(uint64_t))(*(void *)v246 + 8))(v246);
  }
  uint64_t v247 = *((void *)this + 206);
  *((void *)this + 206) = 0;
  if (v247) {
    (*(void (**)(uint64_t))(*(void *)v247 + 8))(v247);
  }
  uint64_t v248 = *((void *)this + 205);
  *((void *)this + 205) = 0;
  if (v248) {
    (*(void (**)(uint64_t))(*(void *)v248 + 8))(v248);
  }
  uint64_t v249 = *((void *)this + 204);
  *((void *)this + 204) = 0;
  if (v249) {
    (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
  }
  uint64_t v250 = *((void *)this + 203);
  *((void *)this + 203) = 0;
  if (v250) {
    (*(void (**)(uint64_t))(*(void *)v250 + 8))(v250);
  }
  uint64_t v251 = *((void *)this + 202);
  *((void *)this + 202) = 0;
  if (v251) {
    (*(void (**)(uint64_t))(*(void *)v251 + 8))(v251);
  }
  uint64_t v252 = *((void *)this + 201);
  *((void *)this + 201) = 0;
  if (v252) {
    (*(void (**)(uint64_t))(*(void *)v252 + 8))(v252);
  }
  uint64_t v253 = *((void *)this + 200);
  *((void *)this + 200) = 0;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8))(v253);
  }
  uint64_t v254 = *((void *)this + 199);
  *((void *)this + 199) = 0;
  if (v254) {
    (*(void (**)(uint64_t))(*(void *)v254 + 8))(v254);
  }
  uint64_t v255 = *((void *)this + 198);
  *((void *)this + 198) = 0;
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8))(v255);
  }
  uint64_t v256 = *((void *)this + 197);
  *((void *)this + 197) = 0;
  if (v256) {
    (*(void (**)(uint64_t))(*(void *)v256 + 8))(v256);
  }
  uint64_t v257 = *((void *)this + 196);
  *((void *)this + 196) = 0;
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8))(v257);
  }
  uint64_t v258 = *((void *)this + 195);
  *((void *)this + 195) = 0;
  if (v258) {
    (*(void (**)(uint64_t))(*(void *)v258 + 8))(v258);
  }
  uint64_t v259 = *((void *)this + 194);
  *((void *)this + 194) = 0;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  }
  uint64_t v260 = *((void *)this + 193);
  *((void *)this + 193) = 0;
  if (v260) {
    (*(void (**)(uint64_t))(*(void *)v260 + 8))(v260);
  }
  uint64_t v261 = *((void *)this + 192);
  *((void *)this + 192) = 0;
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
  }
  uint64_t v262 = *((void *)this + 191);
  *((void *)this + 191) = 0;
  if (v262) {
    (*(void (**)(uint64_t))(*(void *)v262 + 8))(v262);
  }
  uint64_t v263 = *((void *)this + 190);
  *((void *)this + 190) = 0;
  if (v263) {
    (*(void (**)(uint64_t))(*(void *)v263 + 8))(v263);
  }
  uint64_t v264 = *((void *)this + 189);
  *((void *)this + 189) = 0;
  if (v264) {
    (*(void (**)(uint64_t))(*(void *)v264 + 8))(v264);
  }
  uint64_t v265 = *((void *)this + 188);
  *((void *)this + 188) = 0;
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8))(v265);
  }
  uint64_t v266 = *((void *)this + 187);
  *((void *)this + 187) = 0;
  if (v266) {
    (*(void (**)(uint64_t))(*(void *)v266 + 8))(v266);
  }
  uint64_t v267 = *((void *)this + 186);
  *((void *)this + 186) = 0;
  if (v267) {
    (*(void (**)(uint64_t))(*(void *)v267 + 8))(v267);
  }
  uint64_t v268 = *((void *)this + 185);
  *((void *)this + 185) = 0;
  if (v268) {
    (*(void (**)(uint64_t))(*(void *)v268 + 8))(v268);
  }
  uint64_t v269 = *((void *)this + 184);
  *((void *)this + 184) = 0;
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8))(v269);
  }
  uint64_t v270 = *((void *)this + 183);
  *((void *)this + 183) = 0;
  if (v270) {
    (*(void (**)(uint64_t))(*(void *)v270 + 8))(v270);
  }
  uint64_t v271 = *((void *)this + 182);
  *((void *)this + 182) = 0;
  if (v271) {
    (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
  }
  uint64_t v272 = *((void *)this + 181);
  *((void *)this + 181) = 0;
  if (v272) {
    (*(void (**)(uint64_t))(*(void *)v272 + 8))(v272);
  }
  uint64_t v273 = *((void *)this + 180);
  *((void *)this + 180) = 0;
  if (v273) {
    (*(void (**)(uint64_t))(*(void *)v273 + 8))(v273);
  }
  uint64_t v274 = *((void *)this + 179);
  *((void *)this + 179) = 0;
  if (v274) {
    (*(void (**)(uint64_t))(*(void *)v274 + 8))(v274);
  }
  uint64_t v275 = *((void *)this + 178);
  *((void *)this + 178) = 0;
  if (v275) {
    (*(void (**)(uint64_t))(*(void *)v275 + 8))(v275);
  }
  uint64_t v276 = *((void *)this + 177);
  *((void *)this + 177) = 0;
  if (v276) {
    (*(void (**)(uint64_t))(*(void *)v276 + 8))(v276);
  }
  uint64_t v277 = *((void *)this + 176);
  *((void *)this + 176) = 0;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
  }
  uint64_t v278 = *((void *)this + 175);
  *((void *)this + 175) = 0;
  if (v278) {
    (*(void (**)(uint64_t))(*(void *)v278 + 8))(v278);
  }
  uint64_t v279 = *((void *)this + 174);
  *((void *)this + 174) = 0;
  if (v279) {
    (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
  }
  uint64_t v280 = *((void *)this + 173);
  *((void *)this + 173) = 0;
  if (v280) {
    (*(void (**)(uint64_t))(*(void *)v280 + 8))(v280);
  }
  uint64_t v281 = *((void *)this + 172);
  *((void *)this + 172) = 0;
  if (v281) {
    (*(void (**)(uint64_t))(*(void *)v281 + 8))(v281);
  }
  uint64_t v282 = *((void *)this + 171);
  *((void *)this + 171) = 0;
  if (v282) {
    (*(void (**)(uint64_t))(*(void *)v282 + 8))(v282);
  }
  uint64_t v283 = *((void *)this + 170);
  *((void *)this + 170) = 0;
  if (v283) {
    (*(void (**)(uint64_t))(*(void *)v283 + 8))(v283);
  }
  uint64_t v284 = *((void *)this + 169);
  *((void *)this + 169) = 0;
  if (v284) {
    (*(void (**)(uint64_t))(*(void *)v284 + 8))(v284);
  }
  uint64_t v285 = *((void *)this + 168);
  *((void *)this + 168) = 0;
  if (v285) {
    (*(void (**)(uint64_t))(*(void *)v285 + 8))(v285);
  }
  uint64_t v286 = *((void *)this + 167);
  *((void *)this + 167) = 0;
  if (v286) {
    (*(void (**)(uint64_t))(*(void *)v286 + 8))(v286);
  }
  uint64_t v287 = *((void *)this + 166);
  *((void *)this + 166) = 0;
  if (v287) {
    (*(void (**)(uint64_t))(*(void *)v287 + 8))(v287);
  }
  uint64_t v288 = *((void *)this + 165);
  *((void *)this + 165) = 0;
  if (v288) {
    (*(void (**)(uint64_t))(*(void *)v288 + 8))(v288);
  }
  uint64_t v289 = *((void *)this + 164);
  *((void *)this + 164) = 0;
  if (v289) {
    (*(void (**)(uint64_t))(*(void *)v289 + 8))(v289);
  }
  uint64_t v290 = *((void *)this + 163);
  *((void *)this + 163) = 0;
  if (v290) {
    (*(void (**)(uint64_t))(*(void *)v290 + 8))(v290);
  }
  uint64_t v291 = *((void *)this + 162);
  *((void *)this + 162) = 0;
  if (v291) {
    (*(void (**)(uint64_t))(*(void *)v291 + 8))(v291);
  }
  uint64_t v292 = *((void *)this + 161);
  *((void *)this + 161) = 0;
  if (v292) {
    (*(void (**)(uint64_t))(*(void *)v292 + 8))(v292);
  }
  uint64_t v293 = *((void *)this + 160);
  *((void *)this + 160) = 0;
  if (v293) {
    (*(void (**)(uint64_t))(*(void *)v293 + 8))(v293);
  }
  uint64_t v294 = *((void *)this + 159);
  *((void *)this + 159) = 0;
  if (v294) {
    (*(void (**)(uint64_t))(*(void *)v294 + 8))(v294);
  }
  uint64_t v295 = *((void *)this + 158);
  *((void *)this + 158) = 0;
  if (v295) {
    (*(void (**)(uint64_t))(*(void *)v295 + 8))(v295);
  }
  uint64_t v296 = *((void *)this + 157);
  *((void *)this + 157) = 0;
  if (v296) {
    (*(void (**)(uint64_t))(*(void *)v296 + 8))(v296);
  }
  uint64_t v297 = *((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v297) {
    (*(void (**)(uint64_t))(*(void *)v297 + 8))(v297);
  }
  uint64_t v298 = *((void *)this + 155);
  *((void *)this + 155) = 0;
  if (v298) {
    (*(void (**)(uint64_t))(*(void *)v298 + 8))(v298);
  }
  uint64_t v299 = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (v299) {
    (*(void (**)(uint64_t))(*(void *)v299 + 8))(v299);
  }
  uint64_t v300 = *((void *)this + 153);
  *((void *)this + 153) = 0;
  if (v300) {
    (*(void (**)(uint64_t))(*(void *)v300 + 8))(v300);
  }
  uint64_t v301 = *((void *)this + 152);
  *((void *)this + 152) = 0;
  if (v301) {
    (*(void (**)(uint64_t))(*(void *)v301 + 8))(v301);
  }
  uint64_t v302 = *((void *)this + 151);
  *((void *)this + 151) = 0;
  if (v302) {
    (*(void (**)(uint64_t))(*(void *)v302 + 8))(v302);
  }
  uint64_t v303 = *((void *)this + 150);
  *((void *)this + 150) = 0;
  if (v303) {
    (*(void (**)(uint64_t))(*(void *)v303 + 8))(v303);
  }
  uint64_t v304 = *((void *)this + 149);
  *((void *)this + 149) = 0;
  if (v304) {
    (*(void (**)(uint64_t))(*(void *)v304 + 8))(v304);
  }
  uint64_t v305 = *((void *)this + 148);
  *((void *)this + 148) = 0;
  if (v305) {
    (*(void (**)(uint64_t))(*(void *)v305 + 8))(v305);
  }
  uint64_t v306 = *((void *)this + 147);
  *((void *)this + 147) = 0;
  if (v306) {
    (*(void (**)(uint64_t))(*(void *)v306 + 8))(v306);
  }
  uint64_t v307 = *((void *)this + 146);
  *((void *)this + 146) = 0;
  if (v307) {
    (*(void (**)(uint64_t))(*(void *)v307 + 8))(v307);
  }
  uint64_t v308 = *((void *)this + 145);
  *((void *)this + 145) = 0;
  if (v308) {
    (*(void (**)(uint64_t))(*(void *)v308 + 8))(v308);
  }
  uint64_t v309 = *((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v309) {
    (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
  }
  uint64_t v310 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v310) {
    (*(void (**)(uint64_t))(*(void *)v310 + 8))(v310);
  }
  uint64_t v311 = *((void *)this + 142);
  *((void *)this + 142) = 0;
  if (v311) {
    (*(void (**)(uint64_t))(*(void *)v311 + 8))(v311);
  }
  uint64_t v312 = *((void *)this + 141);
  *((void *)this + 141) = 0;
  if (v312) {
    (*(void (**)(uint64_t))(*(void *)v312 + 8))(v312);
  }
  uint64_t v313 = *((void *)this + 140);
  *((void *)this + 140) = 0;
  if (v313) {
    (*(void (**)(uint64_t))(*(void *)v313 + 8))(v313);
  }
  uint64_t v314 = *((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v314) {
    (*(void (**)(uint64_t))(*(void *)v314 + 8))(v314);
  }
  uint64_t v315 = *((void *)this + 138);
  *((void *)this + 138) = 0;
  if (v315) {
    (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
  }
  uint64_t v316 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v316) {
    (*(void (**)(uint64_t))(*(void *)v316 + 8))(v316);
  }
  uint64_t v317 = *((void *)this + 136);
  *((void *)this + 136) = 0;
  if (v317) {
    (*(void (**)(uint64_t))(*(void *)v317 + 8))(v317);
  }
  uint64_t v318 = *((void *)this + 135);
  *((void *)this + 135) = 0;
  if (v318) {
    (*(void (**)(uint64_t))(*(void *)v318 + 8))(v318);
  }
  uint64_t v319 = *((void *)this + 134);
  *((void *)this + 134) = 0;
  if (v319) {
    (*(void (**)(uint64_t))(*(void *)v319 + 8))(v319);
  }
  uint64_t v320 = *((void *)this + 133);
  *((void *)this + 133) = 0;
  if (v320) {
    (*(void (**)(uint64_t))(*(void *)v320 + 8))(v320);
  }
  uint64_t v321 = *((void *)this + 132);
  *((void *)this + 132) = 0;
  if (v321) {
    (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
  }
  uint64_t v322 = *((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v322) {
    (*(void (**)(uint64_t))(*(void *)v322 + 8))(v322);
  }
  uint64_t v323 = *((void *)this + 130);
  *((void *)this + 130) = 0;
  if (v323) {
    (*(void (**)(uint64_t))(*(void *)v323 + 8))(v323);
  }
  uint64_t v324 = *((void *)this + 129);
  *((void *)this + 129) = 0;
  if (v324) {
    (*(void (**)(uint64_t))(*(void *)v324 + 8))(v324);
  }
  uint64_t v325 = *((void *)this + 128);
  *((void *)this + 128) = 0;
  if (v325) {
    (*(void (**)(uint64_t))(*(void *)v325 + 8))(v325);
  }
  uint64_t v326 = *((void *)this + 127);
  *((void *)this + 127) = 0;
  if (v326) {
    (*(void (**)(uint64_t))(*(void *)v326 + 8))(v326);
  }
  uint64_t v327 = *((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v327) {
    (*(void (**)(uint64_t))(*(void *)v327 + 8))(v327);
  }
  uint64_t v328 = *((void *)this + 125);
  *((void *)this + 125) = 0;
  if (v328) {
    (*(void (**)(uint64_t))(*(void *)v328 + 8))(v328);
  }
  uint64_t v329 = *((void *)this + 124);
  *((void *)this + 124) = 0;
  if (v329) {
    (*(void (**)(uint64_t))(*(void *)v329 + 8))(v329);
  }
  uint64_t v330 = *((void *)this + 123);
  *((void *)this + 123) = 0;
  if (v330) {
    (*(void (**)(uint64_t))(*(void *)v330 + 8))(v330);
  }
  uint64_t v331 = *((void *)this + 122);
  *((void *)this + 122) = 0;
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 8))(v331);
  }
  uint64_t v332 = *((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v332) {
    (*(void (**)(uint64_t))(*(void *)v332 + 8))(v332);
  }
  uint64_t v333 = *((void *)this + 120);
  *((void *)this + 120) = 0;
  if (v333) {
    (*(void (**)(uint64_t))(*(void *)v333 + 8))(v333);
  }
  uint64_t v334 = *((void *)this + 119);
  *((void *)this + 119) = 0;
  if (v334) {
    (*(void (**)(uint64_t))(*(void *)v334 + 8))(v334);
  }
  uint64_t v335 = *((void *)this + 118);
  *((void *)this + 118) = 0;
  if (v335) {
    (*(void (**)(uint64_t))(*(void *)v335 + 8))(v335);
  }
  uint64_t v336 = *((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v336) {
    (*(void (**)(uint64_t))(*(void *)v336 + 8))(v336);
  }
  uint64_t v337 = *((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v337) {
    (*(void (**)(uint64_t))(*(void *)v337 + 8))(v337);
  }
  uint64_t v338 = *((void *)this + 115);
  *((void *)this + 115) = 0;
  if (v338) {
    (*(void (**)(uint64_t))(*(void *)v338 + 8))(v338);
  }
  uint64_t v339 = *((void *)this + 114);
  *((void *)this + 114) = 0;
  if (v339) {
    (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
  }
  uint64_t v340 = *((void *)this + 113);
  *((void *)this + 113) = 0;
  if (v340) {
    (*(void (**)(uint64_t))(*(void *)v340 + 8))(v340);
  }
  uint64_t v341 = *((void *)this + 112);
  *((void *)this + 112) = 0;
  if (v341) {
    (*(void (**)(uint64_t))(*(void *)v341 + 8))(v341);
  }
  uint64_t v342 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v342) {
    (*(void (**)(uint64_t))(*(void *)v342 + 8))(v342);
  }
  uint64_t v343 = *((void *)this + 110);
  *((void *)this + 110) = 0;
  if (v343) {
    (*(void (**)(uint64_t))(*(void *)v343 + 8))(v343);
  }
  uint64_t v344 = *((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v344) {
    (*(void (**)(uint64_t))(*(void *)v344 + 8))(v344);
  }
  uint64_t v345 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v345) {
    (*(void (**)(uint64_t))(*(void *)v345 + 8))(v345);
  }
  uint64_t v346 = *((void *)this + 107);
  *((void *)this + 107) = 0;
  if (v346) {
    (*(void (**)(uint64_t))(*(void *)v346 + 8))(v346);
  }
  uint64_t v347 = *((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v347) {
    (*(void (**)(uint64_t))(*(void *)v347 + 8))(v347);
  }
  uint64_t v348 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v348) {
    (*(void (**)(uint64_t))(*(void *)v348 + 8))(v348);
  }
  uint64_t v349 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v349) {
    (*(void (**)(uint64_t))(*(void *)v349 + 8))(v349);
  }
  uint64_t v350 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v350) {
    (*(void (**)(uint64_t))(*(void *)v350 + 8))(v350);
  }
  uint64_t v351 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v351) {
    (*(void (**)(uint64_t))(*(void *)v351 + 8))(v351);
  }
  uint64_t v352 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v352) {
    (*(void (**)(uint64_t))(*(void *)v352 + 8))(v352);
  }
  uint64_t v353 = *((void *)this + 100);
  *((void *)this + 100) = 0;
  if (v353) {
    (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
  }
  uint64_t v354 = *((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v354) {
    (*(void (**)(uint64_t))(*(void *)v354 + 8))(v354);
  }
  uint64_t v355 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v355) {
    (*(void (**)(uint64_t))(*(void *)v355 + 8))(v355);
  }
  uint64_t v356 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v356) {
    (*(void (**)(uint64_t))(*(void *)v356 + 8))(v356);
  }
  uint64_t v357 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v357) {
    (*(void (**)(uint64_t))(*(void *)v357 + 8))(v357);
  }
  uint64_t v358 = *((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v358) {
    (*(void (**)(uint64_t))(*(void *)v358 + 8))(v358);
  }
  uint64_t v359 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8))(v359);
  }
  uint64_t v360 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v360) {
    (*(void (**)(uint64_t))(*(void *)v360 + 8))(v360);
  }
  uint64_t v361 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v361) {
    (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
  }
  uint64_t v362 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v362) {
    (*(void (**)(uint64_t))(*(void *)v362 + 8))(v362);
  }
  uint64_t v363 = *((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v363) {
    (*(void (**)(uint64_t))(*(void *)v363 + 8))(v363);
  }
  uint64_t v364 = *((void *)this + 89);
  *((void *)this + 89) = 0;
  if (v364) {
    (*(void (**)(uint64_t))(*(void *)v364 + 8))(v364);
  }
  uint64_t v365 = *((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8))(v365);
  }
  uint64_t v366 = *((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v366) {
    (*(void (**)(uint64_t))(*(void *)v366 + 8))(v366);
  }
  uint64_t v367 = *((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8))(v367);
  }
  uint64_t v368 = *((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v368) {
    (*(void (**)(uint64_t))(*(void *)v368 + 8))(v368);
  }
  uint64_t v369 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v369) {
    (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
  }
  uint64_t v370 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v370) {
    (*(void (**)(uint64_t))(*(void *)v370 + 8))(v370);
  }
  uint64_t v371 = *((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v371) {
    (*(void (**)(uint64_t))(*(void *)v371 + 8))(v371);
  }
  uint64_t v372 = *((void *)this + 81);
  *((void *)this + 81) = 0;
  if (v372) {
    (*(void (**)(uint64_t))(*(void *)v372 + 8))(v372);
  }
  uint64_t v373 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8))(v373);
  }
  uint64_t v374 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v374) {
    (*(void (**)(uint64_t))(*(void *)v374 + 8))(v374);
  }
  uint64_t v375 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v375) {
    (*(void (**)(uint64_t))(*(void *)v375 + 8))(v375);
  }
  uint64_t v376 = *((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v376) {
    (*(void (**)(uint64_t))(*(void *)v376 + 8))(v376);
  }
  uint64_t v377 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v377) {
    (*(void (**)(uint64_t))(*(void *)v377 + 8))(v377);
  }
  uint64_t v378 = *((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v378) {
    (*(void (**)(uint64_t))(*(void *)v378 + 8))(v378);
  }
  uint64_t v379 = *((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v379) {
    (*(void (**)(uint64_t))(*(void *)v379 + 8))(v379);
  }
  uint64_t v380 = *((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v380) {
    (*(void (**)(uint64_t))(*(void *)v380 + 8))(v380);
  }
  uint64_t v381 = *((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v381) {
    (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
  }
  uint64_t v382 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v382) {
    (*(void (**)(uint64_t))(*(void *)v382 + 8))(v382);
  }
  uint64_t v383 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v383) {
    (*(void (**)(uint64_t))(*(void *)v383 + 8))(v383);
  }
  uint64_t v384 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v384) {
    (*(void (**)(uint64_t))(*(void *)v384 + 8))(v384);
  }
  uint64_t v385 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v385) {
    (*(void (**)(uint64_t))(*(void *)v385 + 8))(v385);
  }
  uint64_t v386 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v386) {
    (*(void (**)(uint64_t))(*(void *)v386 + 8))(v386);
  }
  uint64_t v387 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v387) {
    (*(void (**)(uint64_t))(*(void *)v387 + 8))(v387);
  }
  uint64_t v388 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v388) {
    (*(void (**)(uint64_t))(*(void *)v388 + 8))(v388);
  }
  uint64_t v389 = *((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v389) {
    (*(void (**)(uint64_t))(*(void *)v389 + 8))(v389);
  }
  uint64_t v390 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v390) {
    (*(void (**)(uint64_t))(*(void *)v390 + 8))(v390);
  }
  uint64_t v391 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v391) {
    (*(void (**)(uint64_t))(*(void *)v391 + 8))(v391);
  }
  uint64_t v392 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v392) {
    (*(void (**)(uint64_t))(*(void *)v392 + 8))(v392);
  }
  uint64_t v393 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v393) {
    (*(void (**)(uint64_t))(*(void *)v393 + 8))(v393);
  }
  uint64_t v394 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v394) {
    (*(void (**)(uint64_t))(*(void *)v394 + 8))(v394);
  }
  uint64_t v395 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v395) {
    (*(void (**)(uint64_t))(*(void *)v395 + 8))(v395);
  }
  uint64_t v396 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v396) {
    (*(void (**)(uint64_t))(*(void *)v396 + 8))(v396);
  }
  uint64_t v397 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v397) {
    (*(void (**)(uint64_t))(*(void *)v397 + 8))(v397);
  }
  uint64_t v398 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v398) {
    (*(void (**)(uint64_t))(*(void *)v398 + 8))(v398);
  }
  uint64_t v399 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v399) {
    (*(void (**)(uint64_t))(*(void *)v399 + 8))(v399);
  }
  uint64_t v400 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v400) {
    (*(void (**)(uint64_t))(*(void *)v400 + 8))(v400);
  }
  uint64_t v401 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v401) {
    (*(void (**)(uint64_t))(*(void *)v401 + 8))(v401);
  }
  uint64_t v402 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v402) {
    (*(void (**)(uint64_t))(*(void *)v402 + 8))(v402);
  }
  uint64_t v403 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v403) {
    (*(void (**)(uint64_t))(*(void *)v403 + 8))(v403);
  }
  uint64_t v404 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v404) {
    (*(void (**)(uint64_t))(*(void *)v404 + 8))(v404);
  }
  uint64_t v405 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v405) {
    (*(void (**)(uint64_t))(*(void *)v405 + 8))(v405);
  }
  uint64_t v406 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v406) {
    (*(void (**)(uint64_t))(*(void *)v406 + 8))(v406);
  }
  uint64_t v407 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v407) {
    (*(void (**)(uint64_t))(*(void *)v407 + 8))(v407);
  }
  uint64_t v408 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v408) {
    (*(void (**)(uint64_t))(*(void *)v408 + 8))(v408);
  }
  uint64_t v409 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8))(v409);
  }
  uint64_t v410 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v410) {
    (*(void (**)(uint64_t))(*(void *)v410 + 8))(v410);
  }
  uint64_t v411 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8))(v411);
  }
  uint64_t v412 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v412) {
    (*(void (**)(uint64_t))(*(void *)v412 + 8))(v412);
  }
  uint64_t v413 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v413) {
    (*(void (**)(uint64_t))(*(void *)v413 + 8))(v413);
  }
  uint64_t v414 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v414) {
    (*(void (**)(uint64_t))(*(void *)v414 + 8))(v414);
  }
  uint64_t v415 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v415) {
    (*(void (**)(uint64_t))(*(void *)v415 + 8))(v415);
  }
  uint64_t v416 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v416) {
    (*(void (**)(uint64_t))(*(void *)v416 + 8))(v416);
  }
  uint64_t v417 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v417) {
    (*(void (**)(uint64_t))(*(void *)v417 + 8))(v417);
  }
  uint64_t v418 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v418) {
    (*(void (**)(uint64_t))(*(void *)v418 + 8))(v418);
  }
  uint64_t v419 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v419) {
    (*(void (**)(uint64_t))(*(void *)v419 + 8))(v419);
  }
  uint64_t v420 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v420) {
    (*(void (**)(uint64_t))(*(void *)v420 + 8))(v420);
  }
  uint64_t v421 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v421) {
    (*(void (**)(uint64_t))(*(void *)v421 + 8))(v421);
  }
  uint64_t v422 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v422) {
    (*(void (**)(uint64_t))(*(void *)v422 + 8))(v422);
  }
  uint64_t v423 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v423) {
    (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
  }
  uint64_t v424 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v424) {
    (*(void (**)(uint64_t))(*(void *)v424 + 8))(v424);
  }
  uint64_t v425 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v425) {
    (*(void (**)(uint64_t))(*(void *)v425 + 8))(v425);
  }
  uint64_t v426 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v426) {
    (*(void (**)(uint64_t))(*(void *)v426 + 8))(v426);
  }
  uint64_t v427 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v427) {
    (*(void (**)(uint64_t))(*(void *)v427 + 8))(v427);
  }
  uint64_t v428 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v428) {
    (*(void (**)(uint64_t))(*(void *)v428 + 8))(v428);
  }
  uint64_t v429 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v429) {
    (*(void (**)(uint64_t))(*(void *)v429 + 8))(v429);
  }
  uint64_t v430 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v430) {
    (*(void (**)(uint64_t))(*(void *)v430 + 8))(v430);
  }
  uint64_t v431 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v431) {
    (*(void (**)(uint64_t))(*(void *)v431 + 8))(v431);
  }
  uint64_t v432 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v432) {
    (*(void (**)(uint64_t))(*(void *)v432 + 8))(v432);
  }
  uint64_t v433 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v433) {
    (*(void (**)(uint64_t))(*(void *)v433 + 8))(v433);
  }
  uint64_t v434 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v434) {
    (*(void (**)(uint64_t))(*(void *)v434 + 8))(v434);
  }
  uint64_t v435 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v435) {
    (*(void (**)(uint64_t))(*(void *)v435 + 8))(v435);
  }
  uint64_t v436 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v436) {
    (*(void (**)(uint64_t))(*(void *)v436 + 8))(v436);
  }
  uint64_t v437 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v437) {
    (*(void (**)(uint64_t))(*(void *)v437 + 8))(v437);
  }
  uint64_t v438 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v438) {
    (*(void (**)(uint64_t))(*(void *)v438 + 8))(v438);
  }
  uint64_t v439 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v439) {
    (*(void (**)(uint64_t))(*(void *)v439 + 8))(v439);
  }
  uint64_t v440 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v440) {
    (*(void (**)(uint64_t))(*(void *)v440 + 8))(v440);
  }
  uint64_t v441 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v441) {
    (*(void (**)(uint64_t))(*(void *)v441 + 8))(v441);
  }
  uint64_t v442 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v442) {
    (*(void (**)(uint64_t))(*(void *)v442 + 8))(v442);
  }
  uint64_t v443 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v443) {
    (*(void (**)(uint64_t))(*(void *)v443 + 8))(v443);
  }
  uint64_t v444 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v444) {
    (*(void (**)(uint64_t))(*(void *)v444 + 8))(v444);
  }
  uint64_t v445 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v445) {
    (*(void (**)(uint64_t))(*(void *)v445 + 8))(v445);
  }
  uint64_t v446 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v446) {
    (*(void (**)(uint64_t))(*(void *)v446 + 8))(v446);
  }
  uint64_t v447 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v447) {
    (*(void (**)(uint64_t))(*(void *)v447 + 8))(v447);
  }
  uint64_t v448 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v448) {
    (*(void (**)(uint64_t))(*(void *)v448 + 8))(v448);
  }
  uint64_t v449 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v449) {
    (*(void (**)(uint64_t))(*(void *)v449 + 8))(v449);
  }
  uint64_t v450 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v450) {
    (*(void (**)(uint64_t))(*(void *)v450 + 8))(v450);
  }
  uint64_t v451 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v451) {
    (*(void (**)(uint64_t))(*(void *)v451 + 8))(v451);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::Item::~Item(this);

  operator delete();
}

CMMsl::Item *CMMsl::Item::Item(CMMsl::Item *this, const CMMsl::Item *a2)
{
  *(void *)this = off_1003A6748;
  uint64_t v4 = (char *)this + 624;
  bzero((char *)this + 8, 0x260uLL);
  bzero(v4, 0xBB4uLL);
  if (*((unsigned char *)a2 + 3616))
  {
    uint64_t v5 = *((void *)a2 + 77);
    *((unsigned char *)this + 3616) = 1;
    *((void *)this + 77) = v5;
  }
  if (*((void *)a2 + 146)) {
    operator new();
  }
  if (*((void *)a2 + 145)) {
    operator new();
  }
  if (*((void *)a2 + 142)) {
    operator new();
  }
  if (*((void *)a2 + 141)) {
    operator new();
  }
  if (*((void *)a2 + 85)) {
    operator new();
  }
  if (*((void *)a2 + 84)) {
    operator new();
  }
  if (*((void *)a2 + 91)) {
    operator new();
  }
  if (*((void *)a2 + 90)) {
    operator new();
  }
  if (*((void *)a2 + 180)) {
    operator new();
  }
  if (*((void *)a2 + 95)) {
    operator new();
  }
  if (*((void *)a2 + 11)) {
    operator new();
  }
  if (*((void *)a2 + 18)) {
    operator new();
  }
  if (*((void *)a2 + 27)) {
    operator new();
  }
  if (*((void *)a2 + 431)) {
    operator new();
  }
  if (*((void *)a2 + 434)) {
    operator new();
  }
  if (*((void *)a2 + 436)) {
    operator new();
  }
  if (*((void *)a2 + 440)) {
    operator new();
  }
  if (*((void *)a2 + 444)) {
    operator new();
  }
  if (*((void *)a2 + 442)) {
    operator new();
  }
  if (*((void *)a2 + 448)) {
    operator new();
  }
  if (*((void *)a2 + 415)) {
    operator new();
  }
  if (*((void *)a2 + 68)) {
    operator new();
  }
  if (*((void *)a2 + 69)) {
    operator new();
  }
  if (*((void *)a2 + 70)) {
    operator new();
  }
  if (*((void *)a2 + 67)) {
    operator new();
  }
  if (*((void *)a2 + 71)) {
    operator new();
  }
  if (*((void *)a2 + 439)) {
    operator new();
  }
  if (*((void *)a2 + 288)) {
    operator new();
  }
  if (*((void *)a2 + 340)) {
    operator new();
  }
  if (*((void *)a2 + 446)) {
    operator new();
  }
  if (*((void *)a2 + 425)) {
    operator new();
  }
  if (*((void *)a2 + 76)) {
    operator new();
  }
  if (*((void *)a2 + 427)) {
    operator new();
  }
  if (*((void *)a2 + 176)) {
    operator new();
  }
  if (*((void *)a2 + 174)) {
    operator new();
  }
  if (*((void *)a2 + 169)) {
    operator new();
  }
  if (*((void *)a2 + 28)) {
    operator new();
  }
  if (*((void *)a2 + 29)) {
    operator new();
  }
  if (*((void *)a2 + 34)) {
    operator new();
  }
  if (*((void *)a2 + 114)) {
    operator new();
  }
  if (*((void *)a2 + 447)) {
    operator new();
  }
  if (*((void *)a2 + 443)) {
    operator new();
  }
  if (*((void *)a2 + 168)) {
    operator new();
  }
  if (*((void *)a2 + 16)) {
    operator new();
  }
  if (*((void *)a2 + 410)) {
    operator new();
  }
  if (*((void *)a2 + 44)) {
    operator new();
  }
  if (*((void *)a2 + 407)) {
    operator new();
  }
  if (*((void *)a2 + 235)) {
    operator new();
  }
  if (*((void *)a2 + 125)) {
    operator new();
  }
  if (*((void *)a2 + 10)) {
    operator new();
  }
  if (*((void *)a2 + 259)) {
    operator new();
  }
  if (*((void *)a2 + 379)) {
    operator new();
  }
  if (*((void *)a2 + 245)) {
    operator new();
  }
  if (*((void *)a2 + 89)) {
    operator new();
  }
  if (*((void *)a2 + 408)) {
    operator new();
  }
  if (*((void *)a2 + 356)) {
    operator new();
  }
  if (*((void *)a2 + 409)) {
    operator new();
  }
  if (*((void *)a2 + 414)) {
    operator new();
  }
  if (*((void *)a2 + 219)) {
    operator new();
  }
  if (*((void *)a2 + 194)) {
    operator new();
  }
  if (*((void *)a2 + 166)) {
    operator new();
  }
  if (*((void *)a2 + 215)) {
    operator new();
  }
  if (*((void *)a2 + 397)) {
    operator new();
  }
  if (*((void *)a2 + 210)) {
    operator new();
  }
  if (*((void *)a2 + 398)) {
    operator new();
  }
  if (*((void *)a2 + 47)) {
    operator new();
  }
  if (*((void *)a2 + 391)) {
    operator new();
  }
  if (*((void *)a2 + 46)) {
    operator new();
  }
  if (*((void *)a2 + 392)) {
    operator new();
  }
  if (*((void *)a2 + 432)) {
    operator new();
  }
  if (*((void *)a2 + 37)) {
    operator new();
  }
  if (*((void *)a2 + 430)) {
    operator new();
  }
  if (*((void *)a2 + 411)) {
    operator new();
  }
  if (*((void *)a2 + 155)) {
    operator new();
  }
  if (*((void *)a2 + 367)) {
    operator new();
  }
  if (*((void *)a2 + 131)) {
    operator new();
  }
  if (*((void *)a2 + 109)) {
    operator new();
  }
  if (*((void *)a2 + 4)) {
    operator new();
  }
  if (*((void *)a2 + 253)) {
    operator new();
  }
  if (*((void *)a2 + 248)) {
    operator new();
  }
  if (*((void *)a2 + 62)) {
    operator new();
  }
  if (*((void *)a2 + 217)) {
    operator new();
  }
  if (*((void *)a2 + 333)) {
    operator new();
  }
  if (*((void *)a2 + 183)) {
    operator new();
  }
  if (*((void *)a2 + 88)) {
    operator new();
  }
  if (*((void *)a2 + 151)) {
    operator new();
  }
  if (*((void *)a2 + 152)) {
    operator new();
  }
  if (*((void *)a2 + 150)) {
    operator new();
  }
  if (*((void *)a2 + 149)) {
    operator new();
  }
  if (*((void *)a2 + 59)) {
    operator new();
  }
  if (*((void *)a2 + 132)) {
    operator new();
  }
  if (*((void *)a2 + 247)) {
    operator new();
  }
  if (*((void *)a2 + 236)) {
    operator new();
  }
  if (*((void *)a2 + 304)) {
    operator new();
  }
  if (*((void *)a2 + 305)) {
    operator new();
  }
  if (*((void *)a2 + 63)) {
    operator new();
  }
  if (*((void *)a2 + 184)) {
    operator new();
  }
  if (*((void *)a2 + 87)) {
    operator new();
  }
  if (*((void *)a2 + 318)) {
    operator new();
  }
  if (*((void *)a2 + 416)) {
    operator new();
  }
  if (*((void *)a2 + 238)) {
    operator new();
  }
  if (*((void *)a2 + 239)) {
    operator new();
  }
  if (*((void *)a2 + 317)) {
    operator new();
  }
  if (*((void *)a2 + 441)) {
    operator new();
  }
  if (*((void *)a2 + 435)) {
    operator new();
  }
  if (*((void *)a2 + 332)) {
    operator new();
  }
  if (*((void *)a2 + 73)) {
    operator new();
  }
  if (*((void *)a2 + 60)) {
    operator new();
  }
  if (*((void *)a2 + 61)) {
    operator new();
  }
  if (*((void *)a2 + 266)) {
    operator new();
  }
  if (*((void *)a2 + 299)) {
    operator new();
  }
  if (*((void *)a2 + 300)) {
    operator new();
  }
  if (*((void *)a2 + 48)) {
    operator new();
  }
  if (*((void *)a2 + 393)) {
    operator new();
  }
  if (*((void *)a2 + 43)) {
    operator new();
  }
  if (*((void *)a2 + 58)) {
    operator new();
  }
  if (*((void *)a2 + 64)) {
    operator new();
  }
  if (*((void *)a2 + 420)) {
    operator new();
  }
  if (*((void *)a2 + 375)) {
    operator new();
  }
  if (*((void *)a2 + 370)) {
    operator new();
  }
  if (*((void *)a2 + 373)) {
    operator new();
  }
  if (*((void *)a2 + 372)) {
    operator new();
  }
  if (*((void *)a2 + 376)) {
    operator new();
  }
  if (*((void *)a2 + 377)) {
    operator new();
  }
  if (*((void *)a2 + 371)) {
    operator new();
  }
  if (*((void *)a2 + 242)) {
    operator new();
  }
  if (*((void *)a2 + 445)) {
    operator new();
  }
  if (*((void *)a2 + 230)) {
    operator new();
  }
  if (*((void *)a2 + 24)) {
    operator new();
  }
  if (*((void *)a2 + 380)) {
    operator new();
  }
  if (*((void *)a2 + 381)) {
    operator new();
  }
  if (*((void *)a2 + 363)) {
    operator new();
  }
  if (*((void *)a2 + 92)) {
    operator new();
  }
  if (*((void *)a2 + 111)) {
    operator new();
  }
  if (*((void *)a2 + 57)) {
    operator new();
  }
  if (*((void *)a2 + 234)) {
    operator new();
  }
  if (*((void *)a2 + 56)) {
    operator new();
  }
  if (*((void *)a2 + 308)) {
    operator new();
  }
  if (*((void *)a2 + 130)) {
    operator new();
  }
  if (*((void *)a2 + 98)) {
    operator new();
  }
  if (*((void *)a2 + 1)) {
    operator new();
  }
  if (*((void *)a2 + 2)) {
    operator new();
  }
  if (*((void *)a2 + 40)) {
    operator new();
  }
  if (*((void *)a2 + 231)) {
    operator new();
  }
  if (*((void *)a2 + 406)) {
    operator new();
  }
  if (*((void *)a2 + 343)) {
    operator new();
  }
  if (*((void *)a2 + 450)) {
    operator new();
  }
  if (*((void *)a2 + 449)) {
    operator new();
  }
  if (*((void *)a2 + 45)) {
    operator new();
  }
  if (*((void *)a2 + 281)) {
    operator new();
  }
  if (*((void *)a2 + 303)) {
    operator new();
  }
  if (*((void *)a2 + 229)) {
    operator new();
  }
  if (*((void *)a2 + 232)) {
    operator new();
  }
  if (*((void *)a2 + 344)) {
    operator new();
  }
  if (*((void *)a2 + 51)) {
    operator new();
  }
  if (*((void *)a2 + 52)) {
    operator new();
  }
  if (*((void *)a2 + 250)) {
    operator new();
  }
  if (*((void *)a2 + 269)) {
    operator new();
  }
  if (*((void *)a2 + 9)) {
    operator new();
  }
  if (*((void *)a2 + 104)) {
    operator new();
  }
  if (*((void *)a2 + 282)) {
    operator new();
  }
  if (*((void *)a2 + 136)) {
    operator new();
  }
  if (*((void *)a2 + 137)) {
    operator new();
  }
  if (*((void *)a2 + 135)) {
    operator new();
  }
  if (*((void *)a2 + 112)) {
    operator new();
  }
  if (*((void *)a2 + 433)) {
    operator new();
  }
  if (*((void *)a2 + 386)) {
    operator new();
  }
  if (*((void *)a2 + 346)) {
    operator new();
  }
  if (*((void *)a2 + 327)) {
    operator new();
  }
  if (*((void *)a2 + 224)) {
    operator new();
  }
  if (*((void *)a2 + 225)) {
    operator new();
  }
  if (*((void *)a2 + 38)) {
    operator new();
  }
  if (*((void *)a2 + 223)) {
    operator new();
  }
  if (*((void *)a2 + 417)) {
    operator new();
  }
  if (*((void *)a2 + 325)) {
    operator new();
  }
  if (*((void *)a2 + 54)) {
    operator new();
  }
  if (*((void *)a2 + 339)) {
    operator new();
  }
  if (*((void *)a2 + 226)) {
    operator new();
  }
  if (*((void *)a2 + 222)) {
    operator new();
  }
  if (*((void *)a2 + 50)) {
    operator new();
  }
  if (*((void *)a2 + 55)) {
    operator new();
  }
  if (*((void *)a2 + 165)) {
    operator new();
  }
  if (*((void *)a2 + 362)) {
    operator new();
  }
  if (*((void *)a2 + 365)) {
    operator new();
  }
  if (*((void *)a2 + 364)) {
    operator new();
  }
  if (*((void *)a2 + 129)) {
    operator new();
  }
  if (*((void *)a2 + 424)) {
    operator new();
  }
  if (*((void *)a2 + 115)) {
    operator new();
  }
  if (*((void *)a2 + 421)) {
    operator new();
  }
  if (*((void *)a2 + 422)) {
    operator new();
  }
  if (*((void *)a2 + 395)) {
    operator new();
  }
  if (*((void *)a2 + 139)) {
    operator new();
  }
  if (*((void *)a2 + 140)) {
    operator new();
  }
  if (*((void *)a2 + 243)) {
    operator new();
  }
  if (*((void *)a2 + 128)) {
    operator new();
  }
  if (*((void *)a2 + 438)) {
    operator new();
  }
  if (*((void *)a2 + 14)) {
    operator new();
  }
  if (*((void *)a2 + 291)) {
    operator new();
  }
  if (*((void *)a2 + 177)) {
    operator new();
  }
  if (*((void *)a2 + 301)) {
    operator new();
  }
  if (*((void *)a2 + 302)) {
    operator new();
  }
  if (*((void *)a2 + 290)) {
    operator new();
  }
  if (*((void *)a2 + 108)) {
    operator new();
  }
  if (*((void *)a2 + 178)) {
    operator new();
  }
  if (*((void *)a2 + 428)) {
    operator new();
  }
  if (*((void *)a2 + 294)) {
    operator new();
  }
  if (*((void *)a2 + 297)) {
    operator new();
  }
  if (*((void *)a2 + 159)) {
    operator new();
  }
  if (*((void *)a2 + 374)) {
    operator new();
  }
  if (*((void *)a2 + 296)) {
    operator new();
  }
  if (*((void *)a2 + 246)) {
    operator new();
  }
  if (*((void *)a2 + 423)) {
    operator new();
  }
  if (*((void *)a2 + 22)) {
    operator new();
  }
  if (*((void *)a2 + 26)) {
    operator new();
  }
  if (*((void *)a2 + 254)) {
    operator new();
  }
  if (*((void *)a2 + 97)) {
    operator new();
  }
  if (*((void *)a2 + 306)) {
    operator new();
  }
  if (*((void *)a2 + 307)) {
    operator new();
  }
  if (*((void *)a2 + 167)) {
    operator new();
  }
  if (*((void *)a2 + 437)) {
    operator new();
  }
  if (*((void *)a2 + 384)) {
    operator new();
  }
  if (*((void *)a2 + 396)) {
    operator new();
  }
  if (*((void *)a2 + 3)) {
    operator new();
  }
  if (*((void *)a2 + 5)) {
    operator new();
  }
  if (*((void *)a2 + 8)) {
    operator new();
  }
  if (*((void *)a2 + 6)) {
    operator new();
  }
  if (*((void *)a2 + 143)) {
    operator new();
  }
  if (*((void *)a2 + 157)) {
    operator new();
  }
  if (*((void *)a2 + 158)) {
    operator new();
  }
  if (*((void *)a2 + 144)) {
    operator new();
  }
  if (*((void *)a2 + 148)) {
    operator new();
  }
  if (*((void *)a2 + 154)) {
    operator new();
  }
  if (*((void *)a2 + 240)) {
    operator new();
  }
  if (*((void *)a2 + 80)) {
    operator new();
  }
  if (*((void *)a2 + 81)) {
    operator new();
  }
  if (*((void *)a2 + 153)) {
    operator new();
  }
  if (*((void *)a2 + 82)) {
    operator new();
  }
  if (*((void *)a2 + 316)) {
    operator new();
  }
  if (*((void *)a2 + 323)) {
    operator new();
  }
  if (*((void *)a2 + 319)) {
    operator new();
  }
  if (*((void *)a2 + 324)) {
    operator new();
  }
  if (*((void *)a2 + 394)) {
    operator new();
  }
  if (*((void *)a2 + 93)) {
    operator new();
  }
  if (*((void *)a2 + 256)) {
    operator new();
  }
  if (*((void *)a2 + 7)) {
    operator new();
  }
  if (*((void *)a2 + 156)) {
    operator new();
  }
  if (*((void *)a2 + 322)) {
    operator new();
  }
  if (*((void *)a2 + 49)) {
    operator new();
  }
  if (*((void *)a2 + 355)) {
    operator new();
  }
  if (*((void *)a2 + 233)) {
    operator new();
  }
  if (*((void *)a2 + 252)) {
    operator new();
  }
  if (*((void *)a2 + 110)) {
    operator new();
  }
  if (*((void *)a2 + 263)) {
    operator new();
  }
  if (*((void *)a2 + 262)) {
    operator new();
  }
  if (*((void *)a2 + 66)) {
    operator new();
  }
  if (*((void *)a2 + 429)) {
    operator new();
  }
  if (*((void *)a2 + 267)) {
    operator new();
  }
  if (*((void *)a2 + 383)) {
    operator new();
  }
  if (*((void *)a2 + 106)) {
    operator new();
  }
  if (*((void *)a2 + 79)) {
    operator new();
  }
  if (*((void *)a2 + 251)) {
    operator new();
  }
  if (*((void *)a2 + 258)) {
    operator new();
  }
  if (*((void *)a2 + 385)) {
    operator new();
  }
  if (*((void *)a2 + 75)) {
    operator new();
  }
  if (*((void *)a2 + 264)) {
    operator new();
  }
  if (*((void *)a2 + 244)) {
    operator new();
  }
  if (*((void *)a2 + 126)) {
    operator new();
  }
  if (*((void *)a2 + 53)) {
    operator new();
  }
  if (*((void *)a2 + 402)) {
    operator new();
  }
  if (*((void *)a2 + 378)) {
    operator new();
  }
  if (*((void *)a2 + 426)) {
    operator new();
  }
  if (*((void *)a2 + 257)) {
    operator new();
  }
  if (*((void *)a2 + 255)) {
    operator new();
  }
  if (*((void *)a2 + 265)) {
    operator new();
  }
  if (*((void *)a2 + 321)) {
    operator new();
  }
  if (*((void *)a2 + 175)) {
    operator new();
  }
  if (*((void *)a2 + 78)) {
    operator new();
  }
  if (*((void *)a2 + 36)) {
    operator new();
  }
  if (*((void *)a2 + 173)) {
    operator new();
  }
  if (*((void *)a2 + 171)) {
    operator new();
  }
  if (*((void *)a2 + 172)) {
    operator new();
  }
  if (*((void *)a2 + 170)) {
    operator new();
  }
  if (*((void *)a2 + 15)) {
    operator new();
  }
  if (*((void *)a2 + 12)) {
    operator new();
  }
  if (*((void *)a2 + 30)) {
    operator new();
  }
  if (*((void *)a2 + 390)) {
    operator new();
  }
  if (*((void *)a2 + 389)) {
    operator new();
  }
  if (*((void *)a2 + 105)) {
    operator new();
  }
  if (*((void *)a2 + 35)) {
    operator new();
  }
  if (*((void *)a2 + 138)) {
    operator new();
  }
  if (*((void *)a2 + 336)) {
    operator new();
  }
  if (*((void *)a2 + 338)) {
    operator new();
  }
  if (*((void *)a2 + 337)) {
    operator new();
  }
  if (*((void *)a2 + 451)) {
    operator new();
  }
  if (*((void *)a2 + 41)) {
    operator new();
  }
  if (*((void *)a2 + 315)) {
    operator new();
  }
  if (*((void *)a2 + 261)) {
    operator new();
  }
  if (*((void *)a2 + 260)) {
    operator new();
  }
  if (*((void *)a2 + 65)) {
    operator new();
  }
  if (*((void *)a2 + 20)) {
    operator new();
  }
  if (*((void *)a2 + 21)) {
    operator new();
  }
  if (*((void *)a2 + 19)) {
    operator new();
  }
  if (*((void *)a2 + 133)) {
    operator new();
  }
  if (*((void *)a2 + 134)) {
    operator new();
  }
  if (*((void *)a2 + 83)) {
    operator new();
  }
  if (*((void *)a2 + 413)) {
    operator new();
  }
  if (*((void *)a2 + 412)) {
    operator new();
  }
  if (*((void *)a2 + 25)) {
    operator new();
  }
  if (*((void *)a2 + 119)) {
    operator new();
  }
  if (*((void *)a2 + 120)) {
    operator new();
  }
  if (*((void *)a2 + 121)) {
    operator new();
  }
  if (*((void *)a2 + 117)) {
    operator new();
  }
  if (*((void *)a2 + 124)) {
    operator new();
  }
  if (*((void *)a2 + 17)) {
    operator new();
  }
  if (*((void *)a2 + 335)) {
    operator new();
  }
  if (*((void *)a2 + 334)) {
    operator new();
  }
  if (*((void *)a2 + 94)) {
    operator new();
  }
  if (*((void *)a2 + 118)) {
    operator new();
  }
  if (*((void *)a2 + 419)) {
    operator new();
  }
  if (*((void *)a2 + 23)) {
    operator new();
  }
  if (*((void *)a2 + 122)) {
    operator new();
  }
  if (*((void *)a2 + 147)) {
    operator new();
  }
  if (*((void *)a2 + 382)) {
    operator new();
  }
  if (*((void *)a2 + 127)) {
    operator new();
  }
  if (*((void *)a2 + 33)) {
    operator new();
  }
  if (*((void *)a2 + 358)) {
    operator new();
  }
  if (*((void *)a2 + 361)) {
    operator new();
  }
  if (*((void *)a2 + 359)) {
    operator new();
  }
  if (*((void *)a2 + 360)) {
    operator new();
  }
  if (*((void *)a2 + 366)) {
    operator new();
  }
  if (*((void *)a2 + 123)) {
    operator new();
  }
  if (*((void *)a2 + 182)) {
    operator new();
  }
  if (*((void *)a2 + 320)) {
    operator new();
  }
  if (*((void *)a2 + 249)) {
    operator new();
  }
  if (*((void *)a2 + 116)) {
    operator new();
  }
  if (*((void *)a2 + 228)) {
    operator new();
  }
  if (*((void *)a2 + 102)) {
    operator new();
  }
  if (*((void *)a2 + 100)) {
    operator new();
  }
  if (*((void *)a2 + 101)) {
    operator new();
  }
  if (*((void *)a2 + 99)) {
    operator new();
  }
  if (*((void *)a2 + 268)) {
    operator new();
  }
  if (*((void *)a2 + 191)) {
    operator new();
  }
  if (*((void *)a2 + 192)) {
    operator new();
  }
  if (*((void *)a2 + 195)) {
    operator new();
  }
  if (*((void *)a2 + 206)) {
    operator new();
  }
  if (*((void *)a2 + 221)) {
    operator new();
  }
  if (*((void *)a2 + 220)) {
    operator new();
  }
  if (*((void *)a2 + 204)) {
    operator new();
  }
  if (*((void *)a2 + 164)) {
    operator new();
  }
  if (*((void *)a2 + 163)) {
    operator new();
  }
  if (*((void *)a2 + 190)) {
    operator new();
  }
  if (*((void *)a2 + 193)) {
    operator new();
  }
  if (*((void *)a2 + 207)) {
    operator new();
  }
  if (*((void *)a2 + 208)) {
    operator new();
  }
  if (*((void *)a2 + 212)) {
    operator new();
  }
  if (*((void *)a2 + 200)) {
    operator new();
  }
  if (*((void *)a2 + 198)) {
    operator new();
  }
  if (*((void *)a2 + 213)) {
    operator new();
  }
  if (*((void *)a2 + 199)) {
    operator new();
  }
  if (*((void *)a2 + 209)) {
    operator new();
  }
  if (*((void *)a2 + 96)) {
    operator new();
  }
  if (*((void *)a2 + 403)) {
    operator new();
  }
  if (*((void *)a2 + 162)) {
    operator new();
  }
  if (*((void *)a2 + 404)) {
    operator new();
  }
  if (*((void *)a2 + 405)) {
    operator new();
  }
  if (*((void *)a2 + 341)) {
    operator new();
  }
  if (*((void *)a2 + 342)) {
    operator new();
  }
  if (*((void *)a2 + 345)) {
    operator new();
  }
  if (*((void *)a2 + 350)) {
    operator new();
  }
  if (*((void *)a2 + 348)) {
    operator new();
  }
  if (*((void *)a2 + 214)) {
    operator new();
  }
  if (*((void *)a2 + 203)) {
    operator new();
  }
  if (*((void *)a2 + 347)) {
    operator new();
  }
  if (*((void *)a2 + 181)) {
    operator new();
  }
  if (*((void *)a2 + 197)) {
    operator new();
  }
  if (*((void *)a2 + 205)) {
    operator new();
  }
  if (*((void *)a2 + 160)) {
    operator new();
  }
  if (*((void *)a2 + 74)) {
    operator new();
  }
  if (*((void *)a2 + 292)) {
    operator new();
  }
  if (*((void *)a2 + 86)) {
    operator new();
  }
  if (*((void *)a2 + 107)) {
    operator new();
  }
  if (*((void *)a2 + 400)) {
    operator new();
  }
  if (*((void *)a2 + 326)) {
    operator new();
  }
  if (*((void *)a2 + 216)) {
    operator new();
  }
  if (*((void *)a2 + 418)) {
    operator new();
  }
  if (*((void *)a2 + 196)) {
    operator new();
  }
  if (*((void *)a2 + 349)) {
    operator new();
  }
  if (*((void *)a2 + 387)) {
    operator new();
  }
  if (*((void *)a2 + 289)) {
    operator new();
  }
  if (*((void *)a2 + 237)) {
    operator new();
  }
  if (*((void *)a2 + 283)) {
    operator new();
  }
  if (*((void *)a2 + 284)) {
    operator new();
  }
  if (*((void *)a2 + 285)) {
    operator new();
  }
  if (*((void *)a2 + 270)) {
    operator new();
  }
  if (*((void *)a2 + 287)) {
    operator new();
  }
  if (*((void *)a2 + 227)) {
    operator new();
  }
  if (*((void *)a2 + 401)) {
    operator new();
  }
  if (*((void *)a2 + 279)) {
    operator new();
  }
  if (*((void *)a2 + 280)) {
    operator new();
  }
  if (*((void *)a2 + 399)) {
    operator new();
  }
  if (*((void *)a2 + 388)) {
    operator new();
  }
  if (*((void *)a2 + 103)) {
    operator new();
  }
  if (*((void *)a2 + 218)) {
    operator new();
  }
  if (*((void *)a2 + 357)) {
    operator new();
  }
  if (*((void *)a2 + 278)) {
    operator new();
  }
  if (*((void *)a2 + 272)) {
    operator new();
  }
  if (*((void *)a2 + 271)) {
    operator new();
  }
  if (*((void *)a2 + 275)) {
    operator new();
  }
  if (*((void *)a2 + 13)) {
    operator new();
  }
  if (*((void *)a2 + 286)) {
    operator new();
  }
  if (*((void *)a2 + 309)) {
    operator new();
  }
  if (*((void *)a2 + 312)) {
    operator new();
  }
  if (*((void *)a2 + 211)) {
    operator new();
  }
  if (*((void *)a2 + 313)) {
    operator new();
  }
  if (*((void *)a2 + 310)) {
    operator new();
  }
  if (*((void *)a2 + 277)) {
    operator new();
  }
  if (*((void *)a2 + 72)) {
    operator new();
  }
  if (*((void *)a2 + 276)) {
    operator new();
  }
  if (*((void *)a2 + 293)) {
    operator new();
  }
  if (*((void *)a2 + 241)) {
    operator new();
  }
  if (*((void *)a2 + 188)) {
    operator new();
  }
  if (*((void *)a2 + 189)) {
    operator new();
  }
  if (*((void *)a2 + 311)) {
    operator new();
  }
  if (*((void *)a2 + 274)) {
    operator new();
  }
  if (*((void *)a2 + 273)) {
    operator new();
  }
  if (*((void *)a2 + 202)) {
    operator new();
  }
  if (*((void *)a2 + 201)) {
    operator new();
  }
  if (*((void *)a2 + 314)) {
    operator new();
  }
  if (*((void *)a2 + 39)) {
    operator new();
  }
  if (*((void *)a2 + 113)) {
    operator new();
  }
  if (*((void *)a2 + 295)) {
    operator new();
  }
  if (*((void *)a2 + 298)) {
    operator new();
  }
  if (*((void *)a2 + 32)) {
    operator new();
  }
  if (*((void *)a2 + 31)) {
    operator new();
  }
  if (*((void *)a2 + 352)) {
    operator new();
  }
  if (*((void *)a2 + 351)) {
    operator new();
  }
  if (*((void *)a2 + 328)) {
    operator new();
  }
  if (*((void *)a2 + 329)) {
    operator new();
  }
  if (*((void *)a2 + 331)) {
    operator new();
  }
  if (*((void *)a2 + 161)) {
    operator new();
  }
  if (*((void *)a2 + 330)) {
    operator new();
  }
  if (*((void *)a2 + 42)) {
    operator new();
  }
  if (*((void *)a2 + 185)) {
    operator new();
  }
  if (*((void *)a2 + 186)) {
    operator new();
  }
  if (*((void *)a2 + 187)) {
    operator new();
  }
  if (*((void *)a2 + 353)) {
    operator new();
  }
  if (*((void *)a2 + 354)) {
    operator new();
  }
  if (*((void *)a2 + 368)) {
    operator new();
  }
  if (*((void *)a2 + 369)) {
    operator new();
  }
  if (*((void *)a2 + 179)) {
    operator new();
  }
  return this;
}

float CMMsl::MovementStats::MovementStats(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7858;
  *(_DWORD *)(a1 + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    float result = *(float *)(a2 + 8);
    *(unsigned char *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7858;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7858;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::SignalEnvironment::SignalEnvironment(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A8F50;
  *(void *)(result + 8) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A8F50;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A8F50;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A73F8;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    char v2 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(unsigned char *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A73F8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A73F8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A7318;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    char v2 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(unsigned char *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A7318;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A7318;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A83F0;
  *(_DWORD *)(result + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 16) = 1;
    *(void *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A83F0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A83F0;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A7A88;
  *(void *)(result + 8) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    int v2 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A7A88;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A7A88;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A9B20;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    char v2 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(unsigned char *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A9B20;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A9B20;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A77E8;
  *(_DWORD *)(result + 12) = 0;
  if (*(unsigned char *)(a2 + 12))
  {
    char v2 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(result + 12) = 1;
    *(unsigned char *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A77E8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A77E8;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t result, uint64_t a2)
{
  *(void *)float result = off_1003A7008;
  *(_DWORD *)(result + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 16) = 1;
    *(void *)(result + 8) = v2;
  }
  return result;
}

{
  *(void *)float result = off_1003A7008;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

{
  *(void *)float result = off_1003A7008;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, const CMMsl::Item *a2)
{
  if (a1 != a2)
  {
    CMMsl::Item::Item((CMMsl::Item *)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Item *a2, CMMsl::Item *a3)
{
  int v3 = *((_DWORD *)this + 904);
  *((_DWORD *)this + 904) = *((_DWORD *)a2 + 904);
  *((_DWORD *)a2 + 904) = v3;
  double result = *((double *)this + 77);
  *((void *)this + 77) = *((void *)a2 + 77);
  *((double *)a2 + 77) = result;
  uint64_t v5 = *((void *)this + 146);
  *((void *)this + 146) = *((void *)a2 + 146);
  *((void *)a2 + 146) = v5;
  uint64_t v6 = *((void *)this + 145);
  *((void *)this + 145) = *((void *)a2 + 145);
  *((void *)a2 + 145) = v6;
  uint64_t v7 = *((void *)this + 142);
  *((void *)this + 142) = *((void *)a2 + 142);
  *((void *)a2 + 142) = v7;
  uint64_t v8 = *((void *)this + 141);
  *((void *)this + 141) = *((void *)a2 + 141);
  *((void *)a2 + 141) = v8;
  uint64_t v9 = *((void *)this + 85);
  *((void *)this + 85) = *((void *)a2 + 85);
  *((void *)a2 + 85) = v9;
  uint64_t v10 = *((void *)this + 84);
  *((void *)this + 84) = *((void *)a2 + 84);
  *((void *)a2 + 84) = v10;
  uint64_t v11 = *((void *)this + 91);
  *((void *)this + 91) = *((void *)a2 + 91);
  *((void *)a2 + 91) = v11;
  uint64_t v12 = *((void *)this + 90);
  *((void *)this + 90) = *((void *)a2 + 90);
  *((void *)a2 + 90) = v12;
  uint64_t v13 = *((void *)this + 180);
  *((void *)this + 180) = *((void *)a2 + 180);
  *((void *)a2 + 180) = v13;
  uint64_t v14 = *((void *)this + 95);
  *((void *)this + 95) = *((void *)a2 + 95);
  *((void *)a2 + 95) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  uint64_t v16 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v16;
  uint64_t v17 = *((void *)this + 27);
  *((void *)this + 27) = *((void *)a2 + 27);
  *((void *)a2 + 27) = v17;
  uint64_t v18 = *((void *)this + 431);
  *((void *)this + 431) = *((void *)a2 + 431);
  *((void *)a2 + 431) = v18;
  uint64_t v19 = *((void *)this + 434);
  *((void *)this + 434) = *((void *)a2 + 434);
  *((void *)a2 + 434) = v19;
  uint64_t v20 = *((void *)this + 436);
  *((void *)this + 436) = *((void *)a2 + 436);
  *((void *)a2 + 436) = v20;
  uint64_t v21 = *((void *)this + 440);
  *((void *)this + 440) = *((void *)a2 + 440);
  *((void *)a2 + 440) = v21;
  uint64_t v22 = *((void *)this + 444);
  *((void *)this + 444) = *((void *)a2 + 444);
  *((void *)a2 + 444) = v22;
  uint64_t v23 = *((void *)this + 442);
  *((void *)this + 442) = *((void *)a2 + 442);
  *((void *)a2 + 442) = v23;
  uint64_t v24 = *((void *)this + 448);
  *((void *)this + 448) = *((void *)a2 + 448);
  *((void *)a2 + 448) = v24;
  uint64_t v25 = *((void *)this + 415);
  *((void *)this + 415) = *((void *)a2 + 415);
  *((void *)a2 + 415) = v25;
  uint64_t v26 = *((void *)this + 68);
  *((void *)this + 68) = *((void *)a2 + 68);
  *((void *)a2 + 68) = v26;
  uint64_t v27 = *((void *)this + 69);
  *((void *)this + 69) = *((void *)a2 + 69);
  *((void *)a2 + 69) = v27;
  uint64_t v28 = *((void *)this + 70);
  *((void *)this + 70) = *((void *)a2 + 70);
  *((void *)a2 + 70) = v28;
  uint64_t v29 = *((void *)this + 67);
  *((void *)this + 67) = *((void *)a2 + 67);
  *((void *)a2 + 67) = v29;
  uint64_t v30 = *((void *)this + 71);
  *((void *)this + 71) = *((void *)a2 + 71);
  *((void *)a2 + 71) = v30;
  uint64_t v31 = *((void *)this + 439);
  *((void *)this + 439) = *((void *)a2 + 439);
  *((void *)a2 + 439) = v31;
  uint64_t v32 = *((void *)this + 288);
  *((void *)this + 288) = *((void *)a2 + 288);
  *((void *)a2 + 288) = v32;
  uint64_t v33 = *((void *)this + 340);
  *((void *)this + 340) = *((void *)a2 + 340);
  *((void *)a2 + 340) = v33;
  uint64_t v34 = *((void *)this + 446);
  *((void *)this + 446) = *((void *)a2 + 446);
  *((void *)a2 + 446) = v34;
  uint64_t v35 = *((void *)this + 425);
  *((void *)this + 425) = *((void *)a2 + 425);
  *((void *)a2 + 425) = v35;
  uint64_t v36 = *((void *)this + 76);
  *((void *)this + 76) = *((void *)a2 + 76);
  *((void *)a2 + 76) = v36;
  uint64_t v37 = *((void *)this + 427);
  *((void *)this + 427) = *((void *)a2 + 427);
  *((void *)a2 + 427) = v37;
  uint64_t v38 = *((void *)this + 176);
  *((void *)this + 176) = *((void *)a2 + 176);
  *((void *)a2 + 176) = v38;
  uint64_t v39 = *((void *)this + 174);
  *((void *)this + 174) = *((void *)a2 + 174);
  *((void *)a2 + 174) = v39;
  uint64_t v40 = *((void *)this + 169);
  *((void *)this + 169) = *((void *)a2 + 169);
  *((void *)a2 + 169) = v40;
  uint64_t v41 = *((void *)this + 28);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((void *)a2 + 28) = v41;
  uint64_t v42 = *((void *)this + 29);
  *((void *)this + 29) = *((void *)a2 + 29);
  *((void *)a2 + 29) = v42;
  uint64_t v43 = *((void *)this + 34);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)a2 + 34) = v43;
  uint64_t v44 = *((void *)this + 114);
  *((void *)this + 114) = *((void *)a2 + 114);
  *((void *)a2 + 114) = v44;
  uint64_t v45 = *((void *)this + 447);
  *((void *)this + 447) = *((void *)a2 + 447);
  *((void *)a2 + 447) = v45;
  uint64_t v46 = *((void *)this + 443);
  *((void *)this + 443) = *((void *)a2 + 443);
  *((void *)a2 + 443) = v46;
  uint64_t v47 = *((void *)this + 168);
  *((void *)this + 168) = *((void *)a2 + 168);
  *((void *)a2 + 168) = v47;
  uint64_t v48 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v48;
  uint64_t v49 = *((void *)this + 410);
  *((void *)this + 410) = *((void *)a2 + 410);
  *((void *)a2 + 410) = v49;
  uint64_t v50 = *((void *)this + 44);
  *((void *)this + 44) = *((void *)a2 + 44);
  *((void *)a2 + 44) = v50;
  uint64_t v51 = *((void *)this + 407);
  *((void *)this + 407) = *((void *)a2 + 407);
  *((void *)a2 + 407) = v51;
  uint64_t v52 = *((void *)this + 235);
  *((void *)this + 235) = *((void *)a2 + 235);
  *((void *)a2 + 235) = v52;
  uint64_t v53 = *((void *)this + 125);
  *((void *)this + 125) = *((void *)a2 + 125);
  *((void *)a2 + 125) = v53;
  uint64_t v54 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v54;
  uint64_t v55 = *((void *)this + 259);
  *((void *)this + 259) = *((void *)a2 + 259);
  *((void *)a2 + 259) = v55;
  uint64_t v56 = *((void *)this + 379);
  *((void *)this + 379) = *((void *)a2 + 379);
  *((void *)a2 + 379) = v56;
  uint64_t v57 = *((void *)this + 245);
  *((void *)this + 245) = *((void *)a2 + 245);
  *((void *)a2 + 245) = v57;
  uint64_t v58 = *((void *)this + 89);
  *((void *)this + 89) = *((void *)a2 + 89);
  *((void *)a2 + 89) = v58;
  uint64_t v59 = *((void *)this + 408);
  *((void *)this + 408) = *((void *)a2 + 408);
  *((void *)a2 + 408) = v59;
  uint64_t v60 = *((void *)this + 356);
  *((void *)this + 356) = *((void *)a2 + 356);
  *((void *)a2 + 356) = v60;
  uint64_t v61 = *((void *)this + 409);
  *((void *)this + 409) = *((void *)a2 + 409);
  *((void *)a2 + 409) = v61;
  uint64_t v62 = *((void *)this + 414);
  *((void *)this + 414) = *((void *)a2 + 414);
  *((void *)a2 + 414) = v62;
  uint64_t v63 = *((void *)this + 219);
  *((void *)this + 219) = *((void *)a2 + 219);
  *((void *)a2 + 219) = v63;
  uint64_t v64 = *((void *)this + 194);
  *((void *)this + 194) = *((void *)a2 + 194);
  *((void *)a2 + 194) = v64;
  uint64_t v65 = *((void *)this + 166);
  *((void *)this + 166) = *((void *)a2 + 166);
  *((void *)a2 + 166) = v65;
  uint64_t v66 = *((void *)this + 215);
  *((void *)this + 215) = *((void *)a2 + 215);
  *((void *)a2 + 215) = v66;
  uint64_t v67 = *((void *)this + 397);
  *((void *)this + 397) = *((void *)a2 + 397);
  *((void *)a2 + 397) = v67;
  uint64_t v68 = *((void *)this + 210);
  *((void *)this + 210) = *((void *)a2 + 210);
  *((void *)a2 + 210) = v68;
  uint64_t v69 = *((void *)this + 398);
  *((void *)this + 398) = *((void *)a2 + 398);
  *((void *)a2 + 398) = v69;
  uint64_t v70 = *((void *)this + 47);
  *((void *)this + 47) = *((void *)a2 + 47);
  *((void *)a2 + 47) = v70;
  uint64_t v71 = *((void *)this + 391);
  *((void *)this + 391) = *((void *)a2 + 391);
  *((void *)a2 + 391) = v71;
  uint64_t v72 = *((void *)this + 46);
  *((void *)this + 46) = *((void *)a2 + 46);
  *((void *)a2 + 46) = v72;
  uint64_t v73 = *((void *)this + 392);
  *((void *)this + 392) = *((void *)a2 + 392);
  *((void *)a2 + 392) = v73;
  uint64_t v74 = *((void *)this + 432);
  *((void *)this + 432) = *((void *)a2 + 432);
  *((void *)a2 + 432) = v74;
  uint64_t v75 = *((void *)this + 37);
  *((void *)this + 37) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v75;
  uint64_t v76 = *((void *)this + 430);
  *((void *)this + 430) = *((void *)a2 + 430);
  *((void *)a2 + 430) = v76;
  uint64_t v77 = *((void *)this + 411);
  *((void *)this + 411) = *((void *)a2 + 411);
  *((void *)a2 + 411) = v77;
  uint64_t v78 = *((void *)this + 155);
  *((void *)this + 155) = *((void *)a2 + 155);
  *((void *)a2 + 155) = v78;
  uint64_t v79 = *((void *)this + 367);
  *((void *)this + 367) = *((void *)a2 + 367);
  *((void *)a2 + 367) = v79;
  uint64_t v80 = *((void *)this + 131);
  *((void *)this + 131) = *((void *)a2 + 131);
  *((void *)a2 + 131) = v80;
  uint64_t v81 = *((void *)this + 109);
  *((void *)this + 109) = *((void *)a2 + 109);
  *((void *)a2 + 109) = v81;
  uint64_t v82 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v82;
  uint64_t v83 = *((void *)this + 253);
  *((void *)this + 253) = *((void *)a2 + 253);
  *((void *)a2 + 253) = v83;
  uint64_t v84 = *((void *)this + 248);
  *((void *)this + 248) = *((void *)a2 + 248);
  *((void *)a2 + 248) = v84;
  uint64_t v85 = *((void *)this + 62);
  *((void *)this + 62) = *((void *)a2 + 62);
  *((void *)a2 + 62) = v85;
  uint64_t v86 = *((void *)this + 217);
  *((void *)this + 217) = *((void *)a2 + 217);
  *((void *)a2 + 217) = v86;
  uint64_t v87 = *((void *)this + 333);
  *((void *)this + 333) = *((void *)a2 + 333);
  *((void *)a2 + 333) = v87;
  uint64_t v88 = *((void *)this + 183);
  *((void *)this + 183) = *((void *)a2 + 183);
  *((void *)a2 + 183) = v88;
  uint64_t v89 = *((void *)this + 88);
  *((void *)this + 88) = *((void *)a2 + 88);
  *((void *)a2 + 88) = v89;
  uint64_t v90 = *((void *)this + 151);
  *((void *)this + 151) = *((void *)a2 + 151);
  *((void *)a2 + 151) = v90;
  uint64_t v91 = *((void *)this + 152);
  *((void *)this + 152) = *((void *)a2 + 152);
  *((void *)a2 + 152) = v91;
  uint64_t v92 = *((void *)this + 150);
  *((void *)this + 150) = *((void *)a2 + 150);
  *((void *)a2 + 150) = v92;
  uint64_t v93 = *((void *)this + 149);
  *((void *)this + 149) = *((void *)a2 + 149);
  *((void *)a2 + 149) = v93;
  uint64_t v94 = *((void *)this + 59);
  *((void *)this + 59) = *((void *)a2 + 59);
  *((void *)a2 + 59) = v94;
  uint64_t v95 = *((void *)this + 132);
  *((void *)this + 132) = *((void *)a2 + 132);
  *((void *)a2 + 132) = v95;
  uint64_t v96 = *((void *)this + 247);
  *((void *)this + 247) = *((void *)a2 + 247);
  *((void *)a2 + 247) = v96;
  uint64_t v97 = *((void *)this + 236);
  *((void *)this + 236) = *((void *)a2 + 236);
  *((void *)a2 + 236) = v97;
  uint64_t v98 = *((void *)this + 304);
  *((void *)this + 304) = *((void *)a2 + 304);
  *((void *)a2 + 304) = v98;
  uint64_t v99 = *((void *)this + 305);
  *((void *)this + 305) = *((void *)a2 + 305);
  *((void *)a2 + 305) = v99;
  uint64_t v100 = *((void *)this + 63);
  *((void *)this + 63) = *((void *)a2 + 63);
  *((void *)a2 + 63) = v100;
  uint64_t v101 = *((void *)this + 184);
  *((void *)this + 184) = *((void *)a2 + 184);
  *((void *)a2 + 184) = v101;
  uint64_t v102 = *((void *)this + 87);
  *((void *)this + 87) = *((void *)a2 + 87);
  *((void *)a2 + 87) = v102;
  uint64_t v103 = *((void *)this + 318);
  *((void *)this + 318) = *((void *)a2 + 318);
  *((void *)a2 + 318) = v103;
  uint64_t v104 = *((void *)this + 416);
  *((void *)this + 416) = *((void *)a2 + 416);
  *((void *)a2 + 416) = v104;
  uint64_t v105 = *((void *)this + 238);
  *((void *)this + 238) = *((void *)a2 + 238);
  *((void *)a2 + 238) = v105;
  uint64_t v106 = *((void *)this + 239);
  *((void *)this + 239) = *((void *)a2 + 239);
  *((void *)a2 + 239) = v106;
  uint64_t v107 = *((void *)this + 317);
  *((void *)this + 317) = *((void *)a2 + 317);
  *((void *)a2 + 317) = v107;
  uint64_t v108 = *((void *)this + 441);
  *((void *)this + 441) = *((void *)a2 + 441);
  *((void *)a2 + 441) = v108;
  uint64_t v109 = *((void *)this + 435);
  *((void *)this + 435) = *((void *)a2 + 435);
  *((void *)a2 + 435) = v109;
  uint64_t v110 = *((void *)this + 332);
  *((void *)this + 332) = *((void *)a2 + 332);
  *((void *)a2 + 332) = v110;
  uint64_t v111 = *((void *)this + 73);
  *((void *)this + 73) = *((void *)a2 + 73);
  *((void *)a2 + 73) = v111;
  uint64_t v112 = *((void *)this + 60);
  *((void *)this + 60) = *((void *)a2 + 60);
  *((void *)a2 + 60) = v112;
  uint64_t v113 = *((void *)this + 61);
  *((void *)this + 61) = *((void *)a2 + 61);
  *((void *)a2 + 61) = v113;
  uint64_t v114 = *((void *)this + 266);
  *((void *)this + 266) = *((void *)a2 + 266);
  *((void *)a2 + 266) = v114;
  uint64_t v115 = *((void *)this + 299);
  *((void *)this + 299) = *((void *)a2 + 299);
  *((void *)a2 + 299) = v115;
  uint64_t v116 = *((void *)this + 300);
  *((void *)this + 300) = *((void *)a2 + 300);
  *((void *)a2 + 300) = v116;
  uint64_t v117 = *((void *)this + 48);
  *((void *)this + 48) = *((void *)a2 + 48);
  *((void *)a2 + 48) = v117;
  uint64_t v118 = *((void *)this + 393);
  *((void *)this + 393) = *((void *)a2 + 393);
  *((void *)a2 + 393) = v118;
  uint64_t v119 = *((void *)this + 43);
  *((void *)this + 43) = *((void *)a2 + 43);
  *((void *)a2 + 43) = v119;
  uint64_t v120 = *((void *)this + 58);
  *((void *)this + 58) = *((void *)a2 + 58);
  *((void *)a2 + 58) = v120;
  uint64_t v121 = *((void *)this + 64);
  *((void *)this + 64) = *((void *)a2 + 64);
  *((void *)a2 + 64) = v121;
  uint64_t v122 = *((void *)this + 420);
  *((void *)this + 420) = *((void *)a2 + 420);
  *((void *)a2 + 420) = v122;
  uint64_t v123 = *((void *)this + 375);
  *((void *)this + 375) = *((void *)a2 + 375);
  *((void *)a2 + 375) = v123;
  uint64_t v124 = *((void *)this + 370);
  *((void *)this + 370) = *((void *)a2 + 370);
  *((void *)a2 + 370) = v124;
  uint64_t v125 = *((void *)this + 373);
  *((void *)this + 373) = *((void *)a2 + 373);
  *((void *)a2 + 373) = v125;
  uint64_t v126 = *((void *)this + 372);
  *((void *)this + 372) = *((void *)a2 + 372);
  *((void *)a2 + 372) = v126;
  uint64_t v127 = *((void *)this + 376);
  *((void *)this + 376) = *((void *)a2 + 376);
  *((void *)a2 + 376) = v127;
  uint64_t v128 = *((void *)this + 377);
  *((void *)this + 377) = *((void *)a2 + 377);
  *((void *)a2 + 377) = v128;
  uint64_t v129 = *((void *)this + 371);
  *((void *)this + 371) = *((void *)a2 + 371);
  *((void *)a2 + 371) = v129;
  uint64_t v130 = *((void *)this + 242);
  *((void *)this + 242) = *((void *)a2 + 242);
  *((void *)a2 + 242) = v130;
  uint64_t v131 = *((void *)this + 445);
  *((void *)this + 445) = *((void *)a2 + 445);
  *((void *)a2 + 445) = v131;
  uint64_t v132 = *((void *)this + 230);
  *((void *)this + 230) = *((void *)a2 + 230);
  *((void *)a2 + 230) = v132;
  uint64_t v133 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v133;
  uint64_t v134 = *((void *)this + 380);
  *((void *)this + 380) = *((void *)a2 + 380);
  *((void *)a2 + 380) = v134;
  uint64_t v135 = *((void *)this + 381);
  *((void *)this + 381) = *((void *)a2 + 381);
  *((void *)a2 + 381) = v135;
  uint64_t v136 = *((void *)this + 363);
  *((void *)this + 363) = *((void *)a2 + 363);
  *((void *)a2 + 363) = v136;
  uint64_t v137 = *((void *)this + 92);
  *((void *)this + 92) = *((void *)a2 + 92);
  *((void *)a2 + 92) = v137;
  uint64_t v138 = *((void *)this + 111);
  *((void *)this + 111) = *((void *)a2 + 111);
  *((void *)a2 + 111) = v138;
  uint64_t v139 = *((void *)this + 57);
  *((void *)this + 57) = *((void *)a2 + 57);
  *((void *)a2 + 57) = v139;
  uint64_t v140 = *((void *)this + 234);
  *((void *)this + 234) = *((void *)a2 + 234);
  *((void *)a2 + 234) = v140;
  uint64_t v141 = *((void *)this + 56);
  *((void *)this + 56) = *((void *)a2 + 56);
  *((void *)a2 + 56) = v141;
  uint64_t v142 = *((void *)this + 308);
  *((void *)this + 308) = *((void *)a2 + 308);
  *((void *)a2 + 308) = v142;
  uint64_t v143 = *((void *)this + 130);
  *((void *)this + 130) = *((void *)a2 + 130);
  *((void *)a2 + 130) = v143;
  uint64_t v144 = *((void *)this + 98);
  *((void *)this + 98) = *((void *)a2 + 98);
  *((void *)a2 + 98) = v144;
  uint64_t v145 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v145;
  uint64_t v146 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v146;
  uint64_t v147 = *((void *)this + 40);
  *((void *)this + 40) = *((void *)a2 + 40);
  *((void *)a2 + 40) = v147;
  uint64_t v148 = *((void *)this + 231);
  *((void *)this + 231) = *((void *)a2 + 231);
  *((void *)a2 + 231) = v148;
  uint64_t v149 = *((void *)this + 406);
  *((void *)this + 406) = *((void *)a2 + 406);
  *((void *)a2 + 406) = v149;
  uint64_t v150 = *((void *)this + 343);
  *((void *)this + 343) = *((void *)a2 + 343);
  *((void *)a2 + 343) = v150;
  uint64_t v151 = *((void *)this + 450);
  *((void *)this + 450) = *((void *)a2 + 450);
  *((void *)a2 + 450) = v151;
  uint64_t v152 = *((void *)this + 449);
  *((void *)this + 449) = *((void *)a2 + 449);
  *((void *)a2 + 449) = v152;
  uint64_t v153 = *((void *)this + 45);
  *((void *)this + 45) = *((void *)a2 + 45);
  *((void *)a2 + 45) = v153;
  uint64_t v154 = *((void *)this + 281);
  *((void *)this + 281) = *((void *)a2 + 281);
  *((void *)a2 + 281) = v154;
  uint64_t v155 = *((void *)this + 303);
  *((void *)this + 303) = *((void *)a2 + 303);
  *((void *)a2 + 303) = v155;
  uint64_t v156 = *((void *)this + 229);
  *((void *)this + 229) = *((void *)a2 + 229);
  *((void *)a2 + 229) = v156;
  uint64_t v157 = *((void *)this + 232);
  *((void *)this + 232) = *((void *)a2 + 232);
  *((void *)a2 + 232) = v157;
  uint64_t v158 = *((void *)this + 344);
  *((void *)this + 344) = *((void *)a2 + 344);
  *((void *)a2 + 344) = v158;
  uint64_t v159 = *((void *)this + 51);
  *((void *)this + 51) = *((void *)a2 + 51);
  *((void *)a2 + 51) = v159;
  uint64_t v160 = *((void *)this + 52);
  *((void *)this + 52) = *((void *)a2 + 52);
  *((void *)a2 + 52) = v160;
  uint64_t v161 = *((void *)this + 250);
  *((void *)this + 250) = *((void *)a2 + 250);
  *((void *)a2 + 250) = v161;
  uint64_t v162 = *((void *)this + 269);
  *((void *)this + 269) = *((void *)a2 + 269);
  *((void *)a2 + 269) = v162;
  uint64_t v163 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v163;
  uint64_t v164 = *((void *)this + 104);
  *((void *)this + 104) = *((void *)a2 + 104);
  *((void *)a2 + 104) = v164;
  uint64_t v165 = *((void *)this + 282);
  *((void *)this + 282) = *((void *)a2 + 282);
  *((void *)a2 + 282) = v165;
  uint64_t v166 = *((void *)this + 136);
  *((void *)this + 136) = *((void *)a2 + 136);
  *((void *)a2 + 136) = v166;
  uint64_t v167 = *((void *)this + 137);
  *((void *)this + 137) = *((void *)a2 + 137);
  *((void *)a2 + 137) = v167;
  uint64_t v168 = *((void *)this + 135);
  *((void *)this + 135) = *((void *)a2 + 135);
  *((void *)a2 + 135) = v168;
  uint64_t v169 = *((void *)this + 112);
  *((void *)this + 112) = *((void *)a2 + 112);
  *((void *)a2 + 112) = v169;
  uint64_t v170 = *((void *)this + 433);
  *((void *)this + 433) = *((void *)a2 + 433);
  *((void *)a2 + 433) = v170;
  uint64_t v171 = *((void *)this + 386);
  *((void *)this + 386) = *((void *)a2 + 386);
  *((void *)a2 + 386) = v171;
  uint64_t v172 = *((void *)this + 346);
  *((void *)this + 346) = *((void *)a2 + 346);
  *((void *)a2 + 346) = v172;
  uint64_t v173 = *((void *)this + 327);
  *((void *)this + 327) = *((void *)a2 + 327);
  *((void *)a2 + 327) = v173;
  uint64_t v174 = *((void *)this + 224);
  *((void *)this + 224) = *((void *)a2 + 224);
  *((void *)a2 + 224) = v174;
  uint64_t v175 = *((void *)this + 225);
  *((void *)this + 225) = *((void *)a2 + 225);
  *((void *)a2 + 225) = v175;
  uint64_t v176 = *((void *)this + 38);
  *((void *)this + 38) = *((void *)a2 + 38);
  *((void *)a2 + 38) = v176;
  uint64_t v177 = *((void *)this + 223);
  *((void *)this + 223) = *((void *)a2 + 223);
  *((void *)a2 + 223) = v177;
  uint64_t v178 = *((void *)this + 417);
  *((void *)this + 417) = *((void *)a2 + 417);
  *((void *)a2 + 417) = v178;
  uint64_t v179 = *((void *)this + 325);
  *((void *)this + 325) = *((void *)a2 + 325);
  *((void *)a2 + 325) = v179;
  uint64_t v180 = *((void *)this + 54);
  *((void *)this + 54) = *((void *)a2 + 54);
  *((void *)a2 + 54) = v180;
  uint64_t v181 = *((void *)this + 339);
  *((void *)this + 339) = *((void *)a2 + 339);
  *((void *)a2 + 339) = v181;
  uint64_t v182 = *((void *)this + 226);
  *((void *)this + 226) = *((void *)a2 + 226);
  *((void *)a2 + 226) = v182;
  uint64_t v183 = *((void *)this + 222);
  *((void *)this + 222) = *((void *)a2 + 222);
  *((void *)a2 + 222) = v183;
  uint64_t v184 = *((void *)this + 50);
  *((void *)this + 50) = *((void *)a2 + 50);
  *((void *)a2 + 50) = v184;
  uint64_t v185 = *((void *)this + 55);
  *((void *)this + 55) = *((void *)a2 + 55);
  *((void *)a2 + 55) = v185;
  uint64_t v186 = *((void *)this + 165);
  *((void *)this + 165) = *((void *)a2 + 165);
  *((void *)a2 + 165) = v186;
  uint64_t v187 = *((void *)this + 362);
  *((void *)this + 362) = *((void *)a2 + 362);
  *((void *)a2 + 362) = v187;
  uint64_t v188 = *((void *)this + 365);
  *((void *)this + 365) = *((void *)a2 + 365);
  *((void *)a2 + 365) = v188;
  uint64_t v189 = *((void *)this + 364);
  *((void *)this + 364) = *((void *)a2 + 364);
  *((void *)a2 + 364) = v189;
  uint64_t v190 = *((void *)this + 129);
  *((void *)this + 129) = *((void *)a2 + 129);
  *((void *)a2 + 129) = v190;
  uint64_t v191 = *((void *)this + 424);
  *((void *)this + 424) = *((void *)a2 + 424);
  *((void *)a2 + 424) = v191;
  uint64_t v192 = *((void *)this + 115);
  *((void *)this + 115) = *((void *)a2 + 115);
  *((void *)a2 + 115) = v192;
  uint64_t v193 = *((void *)this + 421);
  *((void *)this + 421) = *((void *)a2 + 421);
  *((void *)a2 + 421) = v193;
  uint64_t v194 = *((void *)this + 422);
  *((void *)this + 422) = *((void *)a2 + 422);
  *((void *)a2 + 422) = v194;
  uint64_t v195 = *((void *)this + 395);
  *((void *)this + 395) = *((void *)a2 + 395);
  *((void *)a2 + 395) = v195;
  uint64_t v196 = *((void *)this + 139);
  *((void *)this + 139) = *((void *)a2 + 139);
  *((void *)a2 + 139) = v196;
  uint64_t v197 = *((void *)this + 140);
  *((void *)this + 140) = *((void *)a2 + 140);
  *((void *)a2 + 140) = v197;
  uint64_t v198 = *((void *)this + 243);
  *((void *)this + 243) = *((void *)a2 + 243);
  *((void *)a2 + 243) = v198;
  uint64_t v199 = *((void *)this + 128);
  *((void *)this + 128) = *((void *)a2 + 128);
  *((void *)a2 + 128) = v199;
  uint64_t v200 = *((void *)this + 438);
  *((void *)this + 438) = *((void *)a2 + 438);
  *((void *)a2 + 438) = v200;
  uint64_t v201 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v201;
  uint64_t v202 = *((void *)this + 291);
  *((void *)this + 291) = *((void *)a2 + 291);
  *((void *)a2 + 291) = v202;
  uint64_t v203 = *((void *)this + 177);
  *((void *)this + 177) = *((void *)a2 + 177);
  *((void *)a2 + 177) = v203;
  uint64_t v204 = *((void *)this + 301);
  *((void *)this + 301) = *((void *)a2 + 301);
  *((void *)a2 + 301) = v204;
  uint64_t v205 = *((void *)this + 302);
  *((void *)this + 302) = *((void *)a2 + 302);
  *((void *)a2 + 302) = v205;
  uint64_t v206 = *((void *)this + 290);
  *((void *)this + 290) = *((void *)a2 + 290);
  *((void *)a2 + 290) = v206;
  uint64_t v207 = *((void *)this + 108);
  *((void *)this + 108) = *((void *)a2 + 108);
  *((void *)a2 + 108) = v207;
  uint64_t v208 = *((void *)this + 178);
  *((void *)this + 178) = *((void *)a2 + 178);
  *((void *)a2 + 178) = v208;
  uint64_t v209 = *((void *)this + 428);
  *((void *)this + 428) = *((void *)a2 + 428);
  *((void *)a2 + 428) = v209;
  uint64_t v210 = *((void *)this + 294);
  *((void *)this + 294) = *((void *)a2 + 294);
  *((void *)a2 + 294) = v210;
  uint64_t v211 = *((void *)this + 297);
  *((void *)this + 297) = *((void *)a2 + 297);
  *((void *)a2 + 297) = v211;
  uint64_t v212 = *((void *)this + 159);
  *((void *)this + 159) = *((void *)a2 + 159);
  *((void *)a2 + 159) = v212;
  uint64_t v213 = *((void *)this + 374);
  *((void *)this + 374) = *((void *)a2 + 374);
  *((void *)a2 + 374) = v213;
  uint64_t v214 = *((void *)this + 296);
  *((void *)this + 296) = *((void *)a2 + 296);
  *((void *)a2 + 296) = v214;
  uint64_t v215 = *((void *)this + 246);
  *((void *)this + 246) = *((void *)a2 + 246);
  *((void *)a2 + 246) = v215;
  uint64_t v216 = *((void *)this + 423);
  *((void *)this + 423) = *((void *)a2 + 423);
  *((void *)a2 + 423) = v216;
  uint64_t v217 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v217;
  uint64_t v218 = *((void *)this + 26);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((void *)a2 + 26) = v218;
  uint64_t v219 = *((void *)this + 254);
  *((void *)this + 254) = *((void *)a2 + 254);
  *((void *)a2 + 254) = v219;
  uint64_t v220 = *((void *)this + 97);
  *((void *)this + 97) = *((void *)a2 + 97);
  *((void *)a2 + 97) = v220;
  uint64_t v221 = *((void *)this + 306);
  *((void *)this + 306) = *((void *)a2 + 306);
  *((void *)a2 + 306) = v221;
  uint64_t v222 = *((void *)this + 307);
  *((void *)this + 307) = *((void *)a2 + 307);
  *((void *)a2 + 307) = v222;
  uint64_t v223 = *((void *)this + 167);
  *((void *)this + 167) = *((void *)a2 + 167);
  *((void *)a2 + 167) = v223;
  uint64_t v224 = *((void *)this + 437);
  *((void *)this + 437) = *((void *)a2 + 437);
  *((void *)a2 + 437) = v224;
  uint64_t v225 = *((void *)this + 384);
  *((void *)this + 384) = *((void *)a2 + 384);
  *((void *)a2 + 384) = v225;
  uint64_t v226 = *((void *)this + 396);
  *((void *)this + 396) = *((void *)a2 + 396);
  *((void *)a2 + 396) = v226;
  uint64_t v227 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v227;
  uint64_t v228 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v228;
  uint64_t v229 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v229;
  uint64_t v230 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v230;
  uint64_t v231 = *((void *)this + 143);
  *((void *)this + 143) = *((void *)a2 + 143);
  *((void *)a2 + 143) = v231;
  uint64_t v232 = *((void *)this + 157);
  *((void *)this + 157) = *((void *)a2 + 157);
  *((void *)a2 + 157) = v232;
  uint64_t v233 = *((void *)this + 158);
  *((void *)this + 158) = *((void *)a2 + 158);
  *((void *)a2 + 158) = v233;
  uint64_t v234 = *((void *)this + 144);
  *((void *)this + 144) = *((void *)a2 + 144);
  *((void *)a2 + 144) = v234;
  uint64_t v235 = *((void *)this + 148);
  *((void *)this + 148) = *((void *)a2 + 148);
  *((void *)a2 + 148) = v235;
  uint64_t v236 = *((void *)this + 154);
  *((void *)this + 154) = *((void *)a2 + 154);
  *((void *)a2 + 154) = v236;
  uint64_t v237 = *((void *)this + 240);
  *((void *)this + 240) = *((void *)a2 + 240);
  *((void *)a2 + 240) = v237;
  uint64_t v238 = *((void *)this + 80);
  *((void *)this + 80) = *((void *)a2 + 80);
  *((void *)a2 + 80) = v238;
  uint64_t v239 = *((void *)this + 81);
  *((void *)this + 81) = *((void *)a2 + 81);
  *((void *)a2 + 81) = v239;
  uint64_t v240 = *((void *)this + 153);
  *((void *)this + 153) = *((void *)a2 + 153);
  *((void *)a2 + 153) = v240;
  uint64_t v241 = *((void *)this + 82);
  *((void *)this + 82) = *((void *)a2 + 82);
  *((void *)a2 + 82) = v241;
  uint64_t v242 = *((void *)this + 316);
  *((void *)this + 316) = *((void *)a2 + 316);
  *((void *)a2 + 316) = v242;
  uint64_t v243 = *((void *)this + 323);
  *((void *)this + 323) = *((void *)a2 + 323);
  *((void *)a2 + 323) = v243;
  uint64_t v244 = *((void *)this + 319);
  *((void *)this + 319) = *((void *)a2 + 319);
  *((void *)a2 + 319) = v244;
  uint64_t v245 = *((void *)this + 324);
  *((void *)this + 324) = *((void *)a2 + 324);
  *((void *)a2 + 324) = v245;
  uint64_t v246 = *((void *)this + 394);
  *((void *)this + 394) = *((void *)a2 + 394);
  *((void *)a2 + 394) = v246;
  uint64_t v247 = *((void *)this + 93);
  *((void *)this + 93) = *((void *)a2 + 93);
  *((void *)a2 + 93) = v247;
  uint64_t v248 = *((void *)this + 256);
  *((void *)this + 256) = *((void *)a2 + 256);
  *((void *)a2 + 256) = v248;
  uint64_t v249 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v249;
  uint64_t v250 = *((void *)this + 156);
  *((void *)this + 156) = *((void *)a2 + 156);
  *((void *)a2 + 156) = v250;
  uint64_t v251 = *((void *)this + 322);
  *((void *)this + 322) = *((void *)a2 + 322);
  *((void *)a2 + 322) = v251;
  uint64_t v252 = *((void *)this + 49);
  *((void *)this + 49) = *((void *)a2 + 49);
  *((void *)a2 + 49) = v252;
  uint64_t v253 = *((void *)this + 355);
  *((void *)this + 355) = *((void *)a2 + 355);
  *((void *)a2 + 355) = v253;
  uint64_t v254 = *((void *)this + 233);
  *((void *)this + 233) = *((void *)a2 + 233);
  *((void *)a2 + 233) = v254;
  uint64_t v255 = *((void *)this + 252);
  *((void *)this + 252) = *((void *)a2 + 252);
  *((void *)a2 + 252) = v255;
  uint64_t v256 = *((void *)this + 110);
  *((void *)this + 110) = *((void *)a2 + 110);
  *((void *)a2 + 110) = v256;
  uint64_t v257 = *((void *)this + 263);
  *((void *)this + 263) = *((void *)a2 + 263);
  *((void *)a2 + 263) = v257;
  uint64_t v258 = *((void *)this + 262);
  *((void *)this + 262) = *((void *)a2 + 262);
  *((void *)a2 + 262) = v258;
  uint64_t v259 = *((void *)this + 66);
  *((void *)this + 66) = *((void *)a2 + 66);
  *((void *)a2 + 66) = v259;
  uint64_t v260 = *((void *)this + 429);
  *((void *)this + 429) = *((void *)a2 + 429);
  *((void *)a2 + 429) = v260;
  uint64_t v261 = *((void *)this + 267);
  *((void *)this + 267) = *((void *)a2 + 267);
  *((void *)a2 + 267) = v261;
  uint64_t v262 = *((void *)this + 383);
  *((void *)this + 383) = *((void *)a2 + 383);
  *((void *)a2 + 383) = v262;
  uint64_t v263 = *((void *)this + 106);
  *((void *)this + 106) = *((void *)a2 + 106);
  *((void *)a2 + 106) = v263;
  uint64_t v264 = *((void *)this + 79);
  *((void *)this + 79) = *((void *)a2 + 79);
  *((void *)a2 + 79) = v264;
  uint64_t v265 = *((void *)this + 251);
  *((void *)this + 251) = *((void *)a2 + 251);
  *((void *)a2 + 251) = v265;
  uint64_t v266 = *((void *)this + 258);
  *((void *)this + 258) = *((void *)a2 + 258);
  *((void *)a2 + 258) = v266;
  uint64_t v267 = *((void *)this + 385);
  *((void *)this + 385) = *((void *)a2 + 385);
  *((void *)a2 + 385) = v267;
  uint64_t v268 = *((void *)this + 75);
  *((void *)this + 75) = *((void *)a2 + 75);
  *((void *)a2 + 75) = v268;
  uint64_t v269 = *((void *)this + 264);
  *((void *)this + 264) = *((void *)a2 + 264);
  *((void *)a2 + 264) = v269;
  uint64_t v270 = *((void *)this + 244);
  *((void *)this + 244) = *((void *)a2 + 244);
  *((void *)a2 + 244) = v270;
  uint64_t v271 = *((void *)this + 126);
  *((void *)this + 126) = *((void *)a2 + 126);
  *((void *)a2 + 126) = v271;
  uint64_t v272 = *((void *)this + 53);
  *((void *)this + 53) = *((void *)a2 + 53);
  *((void *)a2 + 53) = v272;
  uint64_t v273 = *((void *)this + 402);
  *((void *)this + 402) = *((void *)a2 + 402);
  *((void *)a2 + 402) = v273;
  uint64_t v274 = *((void *)this + 378);
  *((void *)this + 378) = *((void *)a2 + 378);
  *((void *)a2 + 378) = v274;
  uint64_t v275 = *((void *)this + 426);
  *((void *)this + 426) = *((void *)a2 + 426);
  *((void *)a2 + 426) = v275;
  uint64_t v276 = *((void *)this + 257);
  *((void *)this + 257) = *((void *)a2 + 257);
  *((void *)a2 + 257) = v276;
  uint64_t v277 = *((void *)this + 255);
  *((void *)this + 255) = *((void *)a2 + 255);
  *((void *)a2 + 255) = v277;
  uint64_t v278 = *((void *)this + 265);
  *((void *)this + 265) = *((void *)a2 + 265);
  *((void *)a2 + 265) = v278;
  uint64_t v279 = *((void *)this + 321);
  *((void *)this + 321) = *((void *)a2 + 321);
  *((void *)a2 + 321) = v279;
  uint64_t v280 = *((void *)this + 175);
  *((void *)this + 175) = *((void *)a2 + 175);
  *((void *)a2 + 175) = v280;
  uint64_t v281 = *((void *)this + 78);
  *((void *)this + 78) = *((void *)a2 + 78);
  *((void *)a2 + 78) = v281;
  uint64_t v282 = *((void *)this + 36);
  *((void *)this + 36) = *((void *)a2 + 36);
  *((void *)a2 + 36) = v282;
  uint64_t v283 = *((void *)this + 173);
  *((void *)this + 173) = *((void *)a2 + 173);
  *((void *)a2 + 173) = v283;
  uint64_t v284 = *((void *)this + 171);
  *((void *)this + 171) = *((void *)a2 + 171);
  *((void *)a2 + 171) = v284;
  uint64_t v285 = *((void *)this + 172);
  *((void *)this + 172) = *((void *)a2 + 172);
  *((void *)a2 + 172) = v285;
  uint64_t v286 = *((void *)this + 170);
  *((void *)this + 170) = *((void *)a2 + 170);
  *((void *)a2 + 170) = v286;
  uint64_t v287 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v287;
  uint64_t v288 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v288;
  uint64_t v289 = *((void *)this + 30);
  *((void *)this + 30) = *((void *)a2 + 30);
  *((void *)a2 + 30) = v289;
  uint64_t v290 = *((void *)this + 390);
  *((void *)this + 390) = *((void *)a2 + 390);
  *((void *)a2 + 390) = v290;
  uint64_t v291 = *((void *)this + 389);
  *((void *)this + 389) = *((void *)a2 + 389);
  *((void *)a2 + 389) = v291;
  uint64_t v292 = *((void *)this + 105);
  *((void *)this + 105) = *((void *)a2 + 105);
  *((void *)a2 + 105) = v292;
  uint64_t v293 = *((void *)this + 35);
  *((void *)this + 35) = *((void *)a2 + 35);
  *((void *)a2 + 35) = v293;
  uint64_t v294 = *((void *)this + 138);
  *((void *)this + 138) = *((void *)a2 + 138);
  *((void *)a2 + 138) = v294;
  uint64_t v295 = *((void *)this + 336);
  *((void *)this + 336) = *((void *)a2 + 336);
  *((void *)a2 + 336) = v295;
  uint64_t v296 = *((void *)this + 338);
  *((void *)this + 338) = *((void *)a2 + 338);
  *((void *)a2 + 338) = v296;
  uint64_t v297 = *((void *)this + 337);
  *((void *)this + 337) = *((void *)a2 + 337);
  *((void *)a2 + 337) = v297;
  uint64_t v298 = *((void *)this + 451);
  *((void *)this + 451) = *((void *)a2 + 451);
  *((void *)a2 + 451) = v298;
  uint64_t v299 = *((void *)this + 41);
  *((void *)this + 41) = *((void *)a2 + 41);
  *((void *)a2 + 41) = v299;
  uint64_t v300 = *((void *)this + 315);
  *((void *)this + 315) = *((void *)a2 + 315);
  *((void *)a2 + 315) = v300;
  uint64_t v301 = *((void *)this + 261);
  *((void *)this + 261) = *((void *)a2 + 261);
  *((void *)a2 + 261) = v301;
  uint64_t v302 = *((void *)this + 260);
  *((void *)this + 260) = *((void *)a2 + 260);
  *((void *)a2 + 260) = v302;
  uint64_t v303 = *((void *)this + 65);
  *((void *)this + 65) = *((void *)a2 + 65);
  *((void *)a2 + 65) = v303;
  uint64_t v304 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v304;
  uint64_t v305 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v305;
  uint64_t v306 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v306;
  uint64_t v307 = *((void *)this + 133);
  *((void *)this + 133) = *((void *)a2 + 133);
  *((void *)a2 + 133) = v307;
  uint64_t v308 = *((void *)this + 134);
  *((void *)this + 134) = *((void *)a2 + 134);
  *((void *)a2 + 134) = v308;
  uint64_t v309 = *((void *)this + 83);
  *((void *)this + 83) = *((void *)a2 + 83);
  *((void *)a2 + 83) = v309;
  uint64_t v310 = *((void *)this + 413);
  *((void *)this + 413) = *((void *)a2 + 413);
  *((void *)a2 + 413) = v310;
  uint64_t v311 = *((void *)this + 412);
  *((void *)this + 412) = *((void *)a2 + 412);
  *((void *)a2 + 412) = v311;
  uint64_t v312 = *((void *)this + 25);
  *((void *)this + 25) = *((void *)a2 + 25);
  *((void *)a2 + 25) = v312;
  uint64_t v313 = *((void *)this + 119);
  *((void *)this + 119) = *((void *)a2 + 119);
  *((void *)a2 + 119) = v313;
  uint64_t v314 = *((void *)this + 120);
  *((void *)this + 120) = *((void *)a2 + 120);
  *((void *)a2 + 120) = v314;
  uint64_t v315 = *((void *)this + 121);
  *((void *)this + 121) = *((void *)a2 + 121);
  *((void *)a2 + 121) = v315;
  uint64_t v316 = *((void *)this + 117);
  *((void *)this + 117) = *((void *)a2 + 117);
  *((void *)a2 + 117) = v316;
  uint64_t v317 = *((void *)this + 124);
  *((void *)this + 124) = *((void *)a2 + 124);
  *((void *)a2 + 124) = v317;
  uint64_t v318 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v318;
  uint64_t v319 = *((void *)this + 335);
  *((void *)this + 335) = *((void *)a2 + 335);
  *((void *)a2 + 335) = v319;
  uint64_t v320 = *((void *)this + 334);
  *((void *)this + 334) = *((void *)a2 + 334);
  *((void *)a2 + 334) = v320;
  uint64_t v321 = *((void *)this + 94);
  *((void *)this + 94) = *((void *)a2 + 94);
  *((void *)a2 + 94) = v321;
  uint64_t v322 = *((void *)this + 118);
  *((void *)this + 118) = *((void *)a2 + 118);
  *((void *)a2 + 118) = v322;
  uint64_t v323 = *((void *)this + 419);
  *((void *)this + 419) = *((void *)a2 + 419);
  *((void *)a2 + 419) = v323;
  uint64_t v324 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v324;
  uint64_t v325 = *((void *)this + 122);
  *((void *)this + 122) = *((void *)a2 + 122);
  *((void *)a2 + 122) = v325;
  uint64_t v326 = *((void *)this + 147);
  *((void *)this + 147) = *((void *)a2 + 147);
  *((void *)a2 + 147) = v326;
  uint64_t v327 = *((void *)this + 382);
  *((void *)this + 382) = *((void *)a2 + 382);
  *((void *)a2 + 382) = v327;
  uint64_t v328 = *((void *)this + 127);
  *((void *)this + 127) = *((void *)a2 + 127);
  *((void *)a2 + 127) = v328;
  uint64_t v329 = *((void *)this + 33);
  *((void *)this + 33) = *((void *)a2 + 33);
  *((void *)a2 + 33) = v329;
  uint64_t v330 = *((void *)this + 358);
  *((void *)this + 358) = *((void *)a2 + 358);
  *((void *)a2 + 358) = v330;
  uint64_t v331 = *((void *)this + 361);
  *((void *)this + 361) = *((void *)a2 + 361);
  *((void *)a2 + 361) = v331;
  uint64_t v332 = *((void *)this + 359);
  *((void *)this + 359) = *((void *)a2 + 359);
  *((void *)a2 + 359) = v332;
  uint64_t v333 = *((void *)this + 360);
  *((void *)this + 360) = *((void *)a2 + 360);
  *((void *)a2 + 360) = v333;
  uint64_t v334 = *((void *)this + 366);
  *((void *)this + 366) = *((void *)a2 + 366);
  *((void *)a2 + 366) = v334;
  uint64_t v335 = *((void *)this + 123);
  *((void *)this + 123) = *((void *)a2 + 123);
  *((void *)a2 + 123) = v335;
  uint64_t v336 = *((void *)this + 182);
  *((void *)this + 182) = *((void *)a2 + 182);
  *((void *)a2 + 182) = v336;
  uint64_t v337 = *((void *)this + 320);
  *((void *)this + 320) = *((void *)a2 + 320);
  *((void *)a2 + 320) = v337;
  uint64_t v338 = *((void *)this + 249);
  *((void *)this + 249) = *((void *)a2 + 249);
  *((void *)a2 + 249) = v338;
  uint64_t v339 = *((void *)this + 116);
  *((void *)this + 116) = *((void *)a2 + 116);
  *((void *)a2 + 116) = v339;
  uint64_t v340 = *((void *)this + 228);
  *((void *)this + 228) = *((void *)a2 + 228);
  *((void *)a2 + 228) = v340;
  uint64_t v341 = *((void *)this + 102);
  *((void *)this + 102) = *((void *)a2 + 102);
  *((void *)a2 + 102) = v341;
  uint64_t v342 = *((void *)this + 100);
  *((void *)this + 100) = *((void *)a2 + 100);
  *((void *)a2 + 100) = v342;
  uint64_t v343 = *((void *)this + 101);
  *((void *)this + 101) = *((void *)a2 + 101);
  *((void *)a2 + 101) = v343;
  uint64_t v344 = *((void *)this + 99);
  *((void *)this + 99) = *((void *)a2 + 99);
  *((void *)a2 + 99) = v344;
  uint64_t v345 = *((void *)this + 268);
  *((void *)this + 268) = *((void *)a2 + 268);
  *((void *)a2 + 268) = v345;
  uint64_t v346 = *((void *)this + 191);
  *((void *)this + 191) = *((void *)a2 + 191);
  *((void *)a2 + 191) = v346;
  uint64_t v347 = *((void *)this + 192);
  *((void *)this + 192) = *((void *)a2 + 192);
  *((void *)a2 + 192) = v347;
  uint64_t v348 = *((void *)this + 195);
  *((void *)this + 195) = *((void *)a2 + 195);
  *((void *)a2 + 195) = v348;
  uint64_t v349 = *((void *)this + 206);
  *((void *)this + 206) = *((void *)a2 + 206);
  *((void *)a2 + 206) = v349;
  uint64_t v350 = *((void *)this + 221);
  *((void *)this + 221) = *((void *)a2 + 221);
  *((void *)a2 + 221) = v350;
  uint64_t v351 = *((void *)this + 220);
  *((void *)this + 220) = *((void *)a2 + 220);
  *((void *)a2 + 220) = v351;
  uint64_t v352 = *((void *)this + 204);
  *((void *)this + 204) = *((void *)a2 + 204);
  *((void *)a2 + 204) = v352;
  uint64_t v353 = *((void *)this + 164);
  *((void *)this + 164) = *((void *)a2 + 164);
  *((void *)a2 + 164) = v353;
  uint64_t v354 = *((void *)this + 163);
  *((void *)this + 163) = *((void *)a2 + 163);
  *((void *)a2 + 163) = v354;
  uint64_t v355 = *((void *)this + 190);
  *((void *)this + 190) = *((void *)a2 + 190);
  *((void *)a2 + 190) = v355;
  uint64_t v356 = *((void *)this + 193);
  *((void *)this + 193) = *((void *)a2 + 193);
  *((void *)a2 + 193) = v356;
  uint64_t v357 = *((void *)this + 207);
  *((void *)this + 207) = *((void *)a2 + 207);
  *((void *)a2 + 207) = v357;
  uint64_t v358 = *((void *)this + 208);
  *((void *)this + 208) = *((void *)a2 + 208);
  *((void *)a2 + 208) = v358;
  uint64_t v359 = *((void *)this + 212);
  *((void *)this + 212) = *((void *)a2 + 212);
  *((void *)a2 + 212) = v359;
  uint64_t v360 = *((void *)this + 200);
  *((void *)this + 200) = *((void *)a2 + 200);
  *((void *)a2 + 200) = v360;
  uint64_t v361 = *((void *)this + 198);
  *((void *)this + 198) = *((void *)a2 + 198);
  *((void *)a2 + 198) = v361;
  uint64_t v362 = *((void *)this + 213);
  *((void *)this + 213) = *((void *)a2 + 213);
  *((void *)a2 + 213) = v362;
  uint64_t v363 = *((void *)this + 199);
  *((void *)this + 199) = *((void *)a2 + 199);
  *((void *)a2 + 199) = v363;
  uint64_t v364 = *((void *)this + 209);
  *((void *)this + 209) = *((void *)a2 + 209);
  *((void *)a2 + 209) = v364;
  uint64_t v365 = *((void *)this + 96);
  *((void *)this + 96) = *((void *)a2 + 96);
  *((void *)a2 + 96) = v365;
  uint64_t v366 = *((void *)this + 403);
  *((void *)this + 403) = *((void *)a2 + 403);
  *((void *)a2 + 403) = v366;
  uint64_t v367 = *((void *)this + 162);
  *((void *)this + 162) = *((void *)a2 + 162);
  *((void *)a2 + 162) = v367;
  uint64_t v368 = *((void *)this + 404);
  *((void *)this + 404) = *((void *)a2 + 404);
  *((void *)a2 + 404) = v368;
  uint64_t v369 = *((void *)this + 405);
  *((void *)this + 405) = *((void *)a2 + 405);
  *((void *)a2 + 405) = v369;
  uint64_t v370 = *((void *)this + 341);
  *((void *)this + 341) = *((void *)a2 + 341);
  *((void *)a2 + 341) = v370;
  uint64_t v371 = *((void *)this + 342);
  *((void *)this + 342) = *((void *)a2 + 342);
  *((void *)a2 + 342) = v371;
  uint64_t v372 = *((void *)this + 345);
  *((void *)this + 345) = *((void *)a2 + 345);
  *((void *)a2 + 345) = v372;
  uint64_t v373 = *((void *)this + 350);
  *((void *)this + 350) = *((void *)a2 + 350);
  *((void *)a2 + 350) = v373;
  uint64_t v374 = *((void *)this + 348);
  *((void *)this + 348) = *((void *)a2 + 348);
  *((void *)a2 + 348) = v374;
  uint64_t v375 = *((void *)this + 214);
  *((void *)this + 214) = *((void *)a2 + 214);
  *((void *)a2 + 214) = v375;
  uint64_t v376 = *((void *)this + 203);
  *((void *)this + 203) = *((void *)a2 + 203);
  *((void *)a2 + 203) = v376;
  uint64_t v377 = *((void *)this + 347);
  *((void *)this + 347) = *((void *)a2 + 347);
  *((void *)a2 + 347) = v377;
  uint64_t v378 = *((void *)this + 181);
  *((void *)this + 181) = *((void *)a2 + 181);
  *((void *)a2 + 181) = v378;
  uint64_t v379 = *((void *)this + 197);
  *((void *)this + 197) = *((void *)a2 + 197);
  *((void *)a2 + 197) = v379;
  uint64_t v380 = *((void *)this + 205);
  *((void *)this + 205) = *((void *)a2 + 205);
  *((void *)a2 + 205) = v380;
  uint64_t v381 = *((void *)this + 160);
  *((void *)this + 160) = *((void *)a2 + 160);
  *((void *)a2 + 160) = v381;
  uint64_t v382 = *((void *)this + 74);
  *((void *)this + 74) = *((void *)a2 + 74);
  *((void *)a2 + 74) = v382;
  uint64_t v383 = *((void *)this + 292);
  *((void *)this + 292) = *((void *)a2 + 292);
  *((void *)a2 + 292) = v383;
  uint64_t v384 = *((void *)this + 86);
  *((void *)this + 86) = *((void *)a2 + 86);
  *((void *)a2 + 86) = v384;
  uint64_t v385 = *((void *)this + 107);
  *((void *)this + 107) = *((void *)a2 + 107);
  *((void *)a2 + 107) = v385;
  uint64_t v386 = *((void *)this + 400);
  *((void *)this + 400) = *((void *)a2 + 400);
  *((void *)a2 + 400) = v386;
  uint64_t v387 = *((void *)this + 326);
  *((void *)this + 326) = *((void *)a2 + 326);
  *((void *)a2 + 326) = v387;
  uint64_t v388 = *((void *)this + 216);
  *((void *)this + 216) = *((void *)a2 + 216);
  *((void *)a2 + 216) = v388;
  uint64_t v389 = *((void *)this + 418);
  *((void *)this + 418) = *((void *)a2 + 418);
  *((void *)a2 + 418) = v389;
  uint64_t v390 = *((void *)this + 196);
  *((void *)this + 196) = *((void *)a2 + 196);
  *((void *)a2 + 196) = v390;
  uint64_t v391 = *((void *)this + 349);
  *((void *)this + 349) = *((void *)a2 + 349);
  *((void *)a2 + 349) = v391;
  uint64_t v392 = *((void *)this + 387);
  *((void *)this + 387) = *((void *)a2 + 387);
  *((void *)a2 + 387) = v392;
  uint64_t v393 = *((void *)this + 289);
  *((void *)this + 289) = *((void *)a2 + 289);
  *((void *)a2 + 289) = v393;
  uint64_t v394 = *((void *)this + 237);
  *((void *)this + 237) = *((void *)a2 + 237);
  *((void *)a2 + 237) = v394;
  uint64_t v395 = *((void *)this + 283);
  *((void *)this + 283) = *((void *)a2 + 283);
  *((void *)a2 + 283) = v395;
  uint64_t v396 = *((void *)this + 284);
  *((void *)this + 284) = *((void *)a2 + 284);
  *((void *)a2 + 284) = v396;
  uint64_t v397 = *((void *)this + 285);
  *((void *)this + 285) = *((void *)a2 + 285);
  *((void *)a2 + 285) = v397;
  uint64_t v398 = *((void *)this + 270);
  *((void *)this + 270) = *((void *)a2 + 270);
  *((void *)a2 + 270) = v398;
  uint64_t v399 = *((void *)this + 287);
  *((void *)this + 287) = *((void *)a2 + 287);
  *((void *)a2 + 287) = v399;
  uint64_t v400 = *((void *)this + 227);
  *((void *)this + 227) = *((void *)a2 + 227);
  *((void *)a2 + 227) = v400;
  uint64_t v401 = *((void *)this + 401);
  *((void *)this + 401) = *((void *)a2 + 401);
  *((void *)a2 + 401) = v401;
  uint64_t v402 = *((void *)this + 279);
  *((void *)this + 279) = *((void *)a2 + 279);
  *((void *)a2 + 279) = v402;
  uint64_t v403 = *((void *)this + 280);
  *((void *)this + 280) = *((void *)a2 + 280);
  *((void *)a2 + 280) = v403;
  uint64_t v404 = *((void *)this + 399);
  *((void *)this + 399) = *((void *)a2 + 399);
  *((void *)a2 + 399) = v404;
  uint64_t v405 = *((void *)this + 388);
  *((void *)this + 388) = *((void *)a2 + 388);
  *((void *)a2 + 388) = v405;
  uint64_t v406 = *((void *)this + 103);
  *((void *)this + 103) = *((void *)a2 + 103);
  *((void *)a2 + 103) = v406;
  uint64_t v407 = *((void *)this + 218);
  *((void *)this + 218) = *((void *)a2 + 218);
  *((void *)a2 + 218) = v407;
  uint64_t v408 = *((void *)this + 357);
  *((void *)this + 357) = *((void *)a2 + 357);
  *((void *)a2 + 357) = v408;
  uint64_t v409 = *((void *)this + 278);
  *((void *)this + 278) = *((void *)a2 + 278);
  *((void *)a2 + 278) = v409;
  uint64_t v410 = *((void *)this + 272);
  *((void *)this + 272) = *((void *)a2 + 272);
  *((void *)a2 + 272) = v410;
  uint64_t v411 = *((void *)this + 271);
  *((void *)this + 271) = *((void *)a2 + 271);
  *((void *)a2 + 271) = v411;
  uint64_t v412 = *((void *)this + 275);
  *((void *)this + 275) = *((void *)a2 + 275);
  *((void *)a2 + 275) = v412;
  uint64_t v413 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v413;
  uint64_t v414 = *((void *)this + 286);
  *((void *)this + 286) = *((void *)a2 + 286);
  *((void *)a2 + 286) = v414;
  uint64_t v415 = *((void *)this + 309);
  *((void *)this + 309) = *((void *)a2 + 309);
  *((void *)a2 + 309) = v415;
  uint64_t v416 = *((void *)this + 312);
  *((void *)this + 312) = *((void *)a2 + 312);
  *((void *)a2 + 312) = v416;
  uint64_t v417 = *((void *)this + 211);
  *((void *)this + 211) = *((void *)a2 + 211);
  *((void *)a2 + 211) = v417;
  uint64_t v418 = *((void *)this + 313);
  *((void *)this + 313) = *((void *)a2 + 313);
  *((void *)a2 + 313) = v418;
  uint64_t v419 = *((void *)this + 310);
  *((void *)this + 310) = *((void *)a2 + 310);
  *((void *)a2 + 310) = v419;
  uint64_t v420 = *((void *)this + 277);
  *((void *)this + 277) = *((void *)a2 + 277);
  *((void *)a2 + 277) = v420;
  uint64_t v421 = *((void *)this + 72);
  *((void *)this + 72) = *((void *)a2 + 72);
  *((void *)a2 + 72) = v421;
  uint64_t v422 = *((void *)this + 276);
  *((void *)this + 276) = *((void *)a2 + 276);
  *((void *)a2 + 276) = v422;
  uint64_t v423 = *((void *)this + 293);
  *((void *)this + 293) = *((void *)a2 + 293);
  *((void *)a2 + 293) = v423;
  uint64_t v424 = *((void *)this + 241);
  *((void *)this + 241) = *((void *)a2 + 241);
  *((void *)a2 + 241) = v424;
  uint64_t v425 = *((void *)this + 188);
  *((void *)this + 188) = *((void *)a2 + 188);
  *((void *)a2 + 188) = v425;
  uint64_t v426 = *((void *)this + 189);
  *((void *)this + 189) = *((void *)a2 + 189);
  *((void *)a2 + 189) = v426;
  uint64_t v427 = *((void *)this + 311);
  *((void *)this + 311) = *((void *)a2 + 311);
  *((void *)a2 + 311) = v427;
  uint64_t v428 = *((void *)this + 274);
  *((void *)this + 274) = *((void *)a2 + 274);
  *((void *)a2 + 274) = v428;
  uint64_t v429 = *((void *)this + 273);
  *((void *)this + 273) = *((void *)a2 + 273);
  *((void *)a2 + 273) = v429;
  uint64_t v430 = *((void *)this + 202);
  *((void *)this + 202) = *((void *)a2 + 202);
  *((void *)a2 + 202) = v430;
  uint64_t v431 = *((void *)this + 201);
  *((void *)this + 201) = *((void *)a2 + 201);
  *((void *)a2 + 201) = v431;
  uint64_t v432 = *((void *)this + 314);
  *((void *)this + 314) = *((void *)a2 + 314);
  *((void *)a2 + 314) = v432;
  uint64_t v433 = *((void *)this + 39);
  *((void *)this + 39) = *((void *)a2 + 39);
  *((void *)a2 + 39) = v433;
  uint64_t v434 = *((void *)this + 113);
  *((void *)this + 113) = *((void *)a2 + 113);
  *((void *)a2 + 113) = v434;
  uint64_t v435 = *((void *)this + 295);
  *((void *)this + 295) = *((void *)a2 + 295);
  *((void *)a2 + 295) = v435;
  uint64_t v436 = *((void *)this + 298);
  *((void *)this + 298) = *((void *)a2 + 298);
  *((void *)a2 + 298) = v436;
  uint64_t v437 = *((void *)this + 32);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((void *)a2 + 32) = v437;
  uint64_t v438 = *((void *)this + 31);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((void *)a2 + 31) = v438;
  uint64_t v439 = *((void *)this + 352);
  *((void *)this + 352) = *((void *)a2 + 352);
  *((void *)a2 + 352) = v439;
  uint64_t v440 = *((void *)this + 351);
  *((void *)this + 351) = *((void *)a2 + 351);
  *((void *)a2 + 351) = v440;
  uint64_t v441 = *((void *)this + 328);
  *((void *)this + 328) = *((void *)a2 + 328);
  *((void *)a2 + 328) = v441;
  uint64_t v442 = *((void *)this + 329);
  *((void *)this + 329) = *((void *)a2 + 329);
  *((void *)a2 + 329) = v442;
  uint64_t v443 = *((void *)this + 331);
  *((void *)this + 331) = *((void *)a2 + 331);
  *((void *)a2 + 331) = v443;
  uint64_t v444 = *((void *)this + 161);
  *((void *)this + 161) = *((void *)a2 + 161);
  *((void *)a2 + 161) = v444;
  uint64_t v445 = *((void *)this + 330);
  *((void *)this + 330) = *((void *)a2 + 330);
  *((void *)a2 + 330) = v445;
  uint64_t v446 = *((void *)this + 42);
  *((void *)this + 42) = *((void *)a2 + 42);
  *((void *)a2 + 42) = v446;
  uint64_t v447 = *((void *)this + 185);
  *((void *)this + 185) = *((void *)a2 + 185);
  *((void *)a2 + 185) = v447;
  uint64_t v448 = *((void *)this + 186);
  *((void *)this + 186) = *((void *)a2 + 186);
  *((void *)a2 + 186) = v448;
  uint64_t v449 = *((void *)this + 187);
  *((void *)this + 187) = *((void *)a2 + 187);
  *((void *)a2 + 187) = v449;
  uint64_t v450 = *((void *)this + 353);
  *((void *)this + 353) = *((void *)a2 + 353);
  *((void *)a2 + 353) = v450;
  uint64_t v451 = *((void *)this + 354);
  *((void *)this + 354) = *((void *)a2 + 354);
  *((void *)a2 + 354) = v451;
  uint64_t v452 = *((void *)this + 368);
  *((void *)this + 368) = *((void *)a2 + 368);
  *((void *)a2 + 368) = v452;
  uint64_t v453 = *((void *)this + 369);
  *((void *)this + 369) = *((void *)a2 + 369);
  *((void *)a2 + 369) = v453;
  uint64_t v454 = *((void *)this + 179);
  *((void *)this + 179) = *((void *)a2 + 179);
  *((void *)a2 + 179) = v454;
  return result;
}

uint64_t CMMsl::Item::Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6748;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (uint64_t *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v5, 0xBB0uLL);
  *(_DWORD *)(a1 + 3616) = *(_DWORD *)(a2 + 3616);
  *(_DWORD *)(a2 + 3616) = 0;
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  uint64_t v6 = *(void *)(a2 + 1168);
  *(void *)(a2 + 1168) = 0;
  uint64_t v7 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = v6;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 1160);
  *(void *)(a2 + 1160) = 0;
  uint64_t v9 = *(void *)(a1 + 1160);
  *(void *)(a1 + 1160) = v8;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a2 + 1136);
  *(void *)(a2 + 1136) = 0;
  uint64_t v11 = *(void *)(a1 + 1136);
  *(void *)(a1 + 1136) = v10;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a2 + 1128);
  *(void *)(a2 + 1128) = 0;
  uint64_t v13 = *(void *)(a1 + 1128);
  *(void *)(a1 + 1128) = v12;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a2 + 680);
  *(void *)(a2 + 680) = 0;
  uint64_t v15 = *(void *)(a1 + 680);
  *(void *)(a1 + 680) = v14;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a2 + 672);
  *(void *)(a2 + 672) = 0;
  uint64_t v17 = *(void *)(a1 + 672);
  *(void *)(a1 + 672) = v16;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a2 + 728);
  *(void *)(a2 + 728) = 0;
  uint64_t v19 = *(void *)(a1 + 728);
  *(void *)(a1 + 728) = v18;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a2 + 720);
  *(void *)(a2 + 720) = 0;
  uint64_t v21 = *(void *)(a1 + 720);
  *(void *)(a1 + 720) = v20;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a2 + 1440);
  *(void *)(a2 + 1440) = 0;
  uint64_t v23 = *(void *)(a1 + 1440);
  *(void *)(a1 + 1440) = v22;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a2 + 760);
  *(void *)(a2 + 760) = 0;
  uint64_t v25 = *(void *)(a1 + 760);
  *(void *)(a1 + 760) = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = 0;
  uint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v29 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = v28;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(a2 + 216);
  *(void *)(a2 + 216) = 0;
  uint64_t v31 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v30;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *(void *)(a2 + 3448);
  *(void *)(a2 + 3448) = 0;
  uint64_t v33 = *(void *)(a1 + 3448);
  *(void *)(a1 + 3448) = v32;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(a2 + 3472);
  *(void *)(a2 + 3472) = 0;
  uint64_t v35 = *(void *)(a1 + 3472);
  *(void *)(a1 + 3472) = v34;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(a2 + 3488);
  *(void *)(a2 + 3488) = 0;
  uint64_t v37 = *(void *)(a1 + 3488);
  *(void *)(a1 + 3488) = v36;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *(void *)(a2 + 3520);
  *(void *)(a2 + 3520) = 0;
  uint64_t v39 = *(void *)(a1 + 3520);
  *(void *)(a1 + 3520) = v38;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *(void *)(a2 + 3552);
  *(void *)(a2 + 3552) = 0;
  uint64_t v41 = *(void *)(a1 + 3552);
  *(void *)(a1 + 3552) = v40;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(a2 + 3536);
  *(void *)(a2 + 3536) = 0;
  uint64_t v43 = *(void *)(a1 + 3536);
  *(void *)(a1 + 3536) = v42;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(a2 + 3584);
  *(void *)(a2 + 3584) = 0;
  uint64_t v45 = *(void *)(a1 + 3584);
  *(void *)(a1 + 3584) = v44;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *(void *)(a2 + 3320);
  *(void *)(a2 + 3320) = 0;
  uint64_t v47 = *(void *)(a1 + 3320);
  *(void *)(a1 + 3320) = v46;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  uint64_t v49 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = v48;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = *(void *)(a2 + 552);
  *(void *)(a2 + 552) = 0;
  uint64_t v51 = *(void *)(a1 + 552);
  *(void *)(a1 + 552) = v50;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *(void *)(a2 + 560);
  *(void *)(a2 + 560) = 0;
  uint64_t v53 = *(void *)(a1 + 560);
  *(void *)(a1 + 560) = v52;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *(void *)(a2 + 536);
  *(void *)(a2 + 536) = 0;
  uint64_t v55 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = v54;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  uint64_t v57 = *(void *)(a1 + 568);
  *(void *)(a1 + 568) = v56;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = *(void *)(a2 + 3512);
  *(void *)(a2 + 3512) = 0;
  uint64_t v59 = *(void *)(a1 + 3512);
  *(void *)(a1 + 3512) = v58;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *(void *)(a2 + 2304);
  *(void *)(a2 + 2304) = 0;
  uint64_t v61 = *(void *)(a1 + 2304);
  *(void *)(a1 + 2304) = v60;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *(void *)(a2 + 2720);
  *(void *)(a2 + 2720) = 0;
  uint64_t v63 = *(void *)(a1 + 2720);
  *(void *)(a1 + 2720) = v62;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  uint64_t v64 = *(void *)(a2 + 3568);
  *(void *)(a2 + 3568) = 0;
  uint64_t v65 = *(void *)(a1 + 3568);
  *(void *)(a1 + 3568) = v64;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = *(void *)(a2 + 3400);
  *(void *)(a2 + 3400) = 0;
  uint64_t v67 = *(void *)(a1 + 3400);
  *(void *)(a1 + 3400) = v66;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  uint64_t v68 = *(void *)(a2 + 608);
  *(void *)(a2 + 608) = 0;
  uint64_t v69 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = v68;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = *(void *)(a2 + 3416);
  *(void *)(a2 + 3416) = 0;
  uint64_t v71 = *(void *)(a1 + 3416);
  *(void *)(a1 + 3416) = v70;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  uint64_t v72 = *(void *)(a2 + 1408);
  *(void *)(a2 + 1408) = 0;
  uint64_t v73 = *(void *)(a1 + 1408);
  *(void *)(a1 + 1408) = v72;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  uint64_t v74 = *(void *)(a2 + 1392);
  *(void *)(a2 + 1392) = 0;
  uint64_t v75 = *(void *)(a1 + 1392);
  *(void *)(a1 + 1392) = v74;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  uint64_t v76 = *(void *)(a2 + 1352);
  *(void *)(a2 + 1352) = 0;
  uint64_t v77 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = v76;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  uint64_t v78 = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  uint64_t v79 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v78;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  uint64_t v80 = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  uint64_t v81 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = v80;
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  uint64_t v82 = *(void *)(a2 + 272);
  *(void *)(a2 + 272) = 0;
  uint64_t v83 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = v82;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  uint64_t v84 = *(void *)(a2 + 912);
  *(void *)(a2 + 912) = 0;
  uint64_t v85 = *(void *)(a1 + 912);
  *(void *)(a1 + 912) = v84;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  uint64_t v86 = *(void *)(a2 + 3576);
  *(void *)(a2 + 3576) = 0;
  uint64_t v87 = *(void *)(a1 + 3576);
  *(void *)(a1 + 3576) = v86;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  uint64_t v88 = *(void *)(a2 + 3544);
  *(void *)(a2 + 3544) = 0;
  uint64_t v89 = *(void *)(a1 + 3544);
  *(void *)(a1 + 3544) = v88;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  }
  uint64_t v90 = *(void *)(a2 + 1344);
  *(void *)(a2 + 1344) = 0;
  uint64_t v91 = *(void *)(a1 + 1344);
  *(void *)(a1 + 1344) = v90;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
  }
  uint64_t v92 = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = 0;
  uint64_t v93 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v92;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  uint64_t v94 = *(void *)(a2 + 3280);
  *(void *)(a2 + 3280) = 0;
  uint64_t v95 = *(void *)(a1 + 3280);
  *(void *)(a1 + 3280) = v94;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  uint64_t v96 = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  uint64_t v97 = *(void *)(a1 + 352);
  *(void *)(a1 + 352) = v96;
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
  }
  uint64_t v98 = *(void *)(a2 + 3256);
  *(void *)(a2 + 3256) = 0;
  uint64_t v99 = *(void *)(a1 + 3256);
  *(void *)(a1 + 3256) = v98;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
  }
  uint64_t v100 = *(void *)(a2 + 1880);
  *(void *)(a2 + 1880) = 0;
  uint64_t v101 = *(void *)(a1 + 1880);
  *(void *)(a1 + 1880) = v100;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  uint64_t v102 = *(void *)(a2 + 1000);
  *(void *)(a2 + 1000) = 0;
  uint64_t v103 = *(void *)(a1 + 1000);
  *(void *)(a1 + 1000) = v102;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
  }
  uint64_t v104 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  uint64_t v105 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v104;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  uint64_t v106 = *(void *)(a2 + 2072);
  *(void *)(a2 + 2072) = 0;
  uint64_t v107 = *(void *)(a1 + 2072);
  *(void *)(a1 + 2072) = v106;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  uint64_t v108 = *(void *)(a2 + 3032);
  *(void *)(a2 + 3032) = 0;
  uint64_t v109 = *(void *)(a1 + 3032);
  *(void *)(a1 + 3032) = v108;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
  }
  uint64_t v110 = *(void *)(a2 + 1960);
  *(void *)(a2 + 1960) = 0;
  uint64_t v111 = *(void *)(a1 + 1960);
  *(void *)(a1 + 1960) = v110;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
  }
  uint64_t v112 = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  uint64_t v113 = *(void *)(a1 + 712);
  *(void *)(a1 + 712) = v112;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
  }
  uint64_t v114 = *(void *)(a2 + 3264);
  *(void *)(a2 + 3264) = 0;
  uint64_t v115 = *(void *)(a1 + 3264);
  *(void *)(a1 + 3264) = v114;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
  }
  uint64_t v116 = *(void *)(a2 + 2848);
  *(void *)(a2 + 2848) = 0;
  uint64_t v117 = *(void *)(a1 + 2848);
  *(void *)(a1 + 2848) = v116;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  uint64_t v118 = *(void *)(a2 + 3272);
  *(void *)(a2 + 3272) = 0;
  uint64_t v119 = *(void *)(a1 + 3272);
  *(void *)(a1 + 3272) = v118;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
  }
  uint64_t v120 = *(void *)(a2 + 3312);
  *(void *)(a2 + 3312) = 0;
  uint64_t v121 = *(void *)(a1 + 3312);
  *(void *)(a1 + 3312) = v120;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
  }
  uint64_t v122 = *(void *)(a2 + 1752);
  *(void *)(a2 + 1752) = 0;
  uint64_t v123 = *(void *)(a1 + 1752);
  *(void *)(a1 + 1752) = v122;
  if (v123) {
    (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
  }
  uint64_t v124 = *(void *)(a2 + 1552);
  *(void *)(a2 + 1552) = 0;
  uint64_t v125 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = v124;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  uint64_t v126 = *(void *)(a2 + 1328);
  *(void *)(a2 + 1328) = 0;
  uint64_t v127 = *(void *)(a1 + 1328);
  *(void *)(a1 + 1328) = v126;
  if (v127) {
    (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
  }
  uint64_t v128 = *(void *)(a2 + 1720);
  *(void *)(a2 + 1720) = 0;
  uint64_t v129 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = v128;
  if (v129) {
    (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
  }
  uint64_t v130 = *(void *)(a2 + 3176);
  *(void *)(a2 + 3176) = 0;
  uint64_t v131 = *(void *)(a1 + 3176);
  *(void *)(a1 + 3176) = v130;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
  }
  uint64_t v132 = *(void *)(a2 + 1680);
  *(void *)(a2 + 1680) = 0;
  uint64_t v133 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = v132;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  uint64_t v134 = *(void *)(a2 + 3184);
  *(void *)(a2 + 3184) = 0;
  uint64_t v135 = *(void *)(a1 + 3184);
  *(void *)(a1 + 3184) = v134;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
  }
  uint64_t v136 = *(void *)(a2 + 376);
  *(void *)(a2 + 376) = 0;
  uint64_t v137 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = v136;
  if (v137) {
    (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
  }
  uint64_t v138 = *(void *)(a2 + 3128);
  *(void *)(a2 + 3128) = 0;
  uint64_t v139 = *(void *)(a1 + 3128);
  *(void *)(a1 + 3128) = v138;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
  }
  uint64_t v140 = *(void *)(a2 + 368);
  *(void *)(a2 + 368) = 0;
  uint64_t v141 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = v140;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
  }
  uint64_t v142 = *(void *)(a2 + 3136);
  *(void *)(a2 + 3136) = 0;
  uint64_t v143 = *(void *)(a1 + 3136);
  *(void *)(a1 + 3136) = v142;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
  }
  uint64_t v144 = *(void *)(a2 + 3456);
  *(void *)(a2 + 3456) = 0;
  uint64_t v145 = *(void *)(a1 + 3456);
  *(void *)(a1 + 3456) = v144;
  if (v145) {
    (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
  }
  uint64_t v146 = *(void *)(a2 + 296);
  *(void *)(a2 + 296) = 0;
  uint64_t v147 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v146;
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
  }
  uint64_t v148 = *(void *)(a2 + 3440);
  *(void *)(a2 + 3440) = 0;
  uint64_t v149 = *(void *)(a1 + 3440);
  *(void *)(a1 + 3440) = v148;
  if (v149) {
    (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
  }
  uint64_t v150 = *(void *)(a2 + 3288);
  *(void *)(a2 + 3288) = 0;
  uint64_t v151 = *(void *)(a1 + 3288);
  *(void *)(a1 + 3288) = v150;
  if (v151) {
    (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
  }
  uint64_t v152 = *(void *)(a2 + 1240);
  *(void *)(a2 + 1240) = 0;
  uint64_t v153 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = v152;
  if (v153) {
    (*(void (**)(uint64_t))(*(void *)v153 + 8))(v153);
  }
  uint64_t v154 = *(void *)(a2 + 2936);
  *(void *)(a2 + 2936) = 0;
  uint64_t v155 = *(void *)(a1 + 2936);
  *(void *)(a1 + 2936) = v154;
  if (v155) {
    (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
  }
  uint64_t v156 = *(void *)(a2 + 1048);
  *(void *)(a2 + 1048) = 0;
  uint64_t v157 = *(void *)(a1 + 1048);
  *(void *)(a1 + 1048) = v156;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
  }
  uint64_t v158 = *(void *)(a2 + 872);
  *(void *)(a2 + 872) = 0;
  uint64_t v159 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = v158;
  if (v159) {
    (*(void (**)(uint64_t))(*(void *)v159 + 8))(v159);
  }
  uint64_t v160 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v161 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v160;
  if (v161) {
    (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
  }
  uint64_t v162 = *(void *)(a2 + 2024);
  *(void *)(a2 + 2024) = 0;
  uint64_t v163 = *(void *)(a1 + 2024);
  *(void *)(a1 + 2024) = v162;
  if (v163) {
    (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
  }
  uint64_t v164 = *(void *)(a2 + 1984);
  *(void *)(a2 + 1984) = 0;
  uint64_t v165 = *(void *)(a1 + 1984);
  *(void *)(a1 + 1984) = v164;
  if (v165) {
    (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
  }
  uint64_t v166 = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  uint64_t v167 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = v166;
  if (v167) {
    (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
  }
  uint64_t v168 = *(void *)(a2 + 1736);
  *(void *)(a2 + 1736) = 0;
  uint64_t v169 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = v168;
  if (v169) {
    (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
  }
  uint64_t v170 = *(void *)(a2 + 2664);
  *(void *)(a2 + 2664) = 0;
  uint64_t v171 = *(void *)(a1 + 2664);
  *(void *)(a1 + 2664) = v170;
  if (v171) {
    (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
  }
  uint64_t v172 = *(void *)(a2 + 1464);
  *(void *)(a2 + 1464) = 0;
  uint64_t v173 = *(void *)(a1 + 1464);
  *(void *)(a1 + 1464) = v172;
  if (v173) {
    (*(void (**)(uint64_t))(*(void *)v173 + 8))(v173);
  }
  uint64_t v174 = *(void *)(a2 + 704);
  *(void *)(a2 + 704) = 0;
  uint64_t v175 = *(void *)(a1 + 704);
  *(void *)(a1 + 704) = v174;
  if (v175) {
    (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
  }
  uint64_t v176 = *(void *)(a2 + 1208);
  *(void *)(a2 + 1208) = 0;
  uint64_t v177 = *(void *)(a1 + 1208);
  *(void *)(a1 + 1208) = v176;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
  }
  uint64_t v178 = *(void *)(a2 + 1216);
  *(void *)(a2 + 1216) = 0;
  uint64_t v179 = *(void *)(a1 + 1216);
  *(void *)(a1 + 1216) = v178;
  if (v179) {
    (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
  }
  uint64_t v180 = *(void *)(a2 + 1200);
  *(void *)(a2 + 1200) = 0;
  uint64_t v181 = *(void *)(a1 + 1200);
  *(void *)(a1 + 1200) = v180;
  if (v181) {
    (*(void (**)(uint64_t))(*(void *)v181 + 8))(v181);
  }
  uint64_t v182 = *(void *)(a2 + 1192);
  *(void *)(a2 + 1192) = 0;
  uint64_t v183 = *(void *)(a1 + 1192);
  *(void *)(a1 + 1192) = v182;
  if (v183) {
    (*(void (**)(uint64_t))(*(void *)v183 + 8))(v183);
  }
  uint64_t v184 = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = 0;
  uint64_t v185 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = v184;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
  }
  uint64_t v186 = *(void *)(a2 + 1056);
  *(void *)(a2 + 1056) = 0;
  uint64_t v187 = *(void *)(a1 + 1056);
  *(void *)(a1 + 1056) = v186;
  if (v187) {
    (*(void (**)(uint64_t))(*(void *)v187 + 8))(v187);
  }
  uint64_t v188 = *(void *)(a2 + 1976);
  *(void *)(a2 + 1976) = 0;
  uint64_t v189 = *(void *)(a1 + 1976);
  *(void *)(a1 + 1976) = v188;
  if (v189) {
    (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
  }
  uint64_t v190 = *(void *)(a2 + 1888);
  *(void *)(a2 + 1888) = 0;
  uint64_t v191 = *(void *)(a1 + 1888);
  *(void *)(a1 + 1888) = v190;
  if (v191) {
    (*(void (**)(uint64_t))(*(void *)v191 + 8))(v191);
  }
  uint64_t v192 = *(void *)(a2 + 2432);
  *(void *)(a2 + 2432) = 0;
  uint64_t v193 = *(void *)(a1 + 2432);
  *(void *)(a1 + 2432) = v192;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
  }
  uint64_t v194 = *(void *)(a2 + 2440);
  *(void *)(a2 + 2440) = 0;
  uint64_t v195 = *(void *)(a1 + 2440);
  *(void *)(a1 + 2440) = v194;
  if (v195) {
    (*(void (**)(uint64_t))(*(void *)v195 + 8))(v195);
  }
  uint64_t v196 = *(void *)(a2 + 504);
  *(void *)(a2 + 504) = 0;
  uint64_t v197 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = v196;
  if (v197) {
    (*(void (**)(uint64_t))(*(void *)v197 + 8))(v197);
  }
  uint64_t v198 = *(void *)(a2 + 1472);
  *(void *)(a2 + 1472) = 0;
  uint64_t v199 = *(void *)(a1 + 1472);
  *(void *)(a1 + 1472) = v198;
  if (v199) {
    (*(void (**)(uint64_t))(*(void *)v199 + 8))(v199);
  }
  uint64_t v200 = *(void *)(a2 + 696);
  *(void *)(a2 + 696) = 0;
  uint64_t v201 = *(void *)(a1 + 696);
  *(void *)(a1 + 696) = v200;
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
  }
  uint64_t v202 = *(void *)(a2 + 2544);
  *(void *)(a2 + 2544) = 0;
  uint64_t v203 = *(void *)(a1 + 2544);
  *(void *)(a1 + 2544) = v202;
  if (v203) {
    (*(void (**)(uint64_t))(*(void *)v203 + 8))(v203);
  }
  uint64_t v204 = *(void *)(a2 + 3328);
  *(void *)(a2 + 3328) = 0;
  uint64_t v205 = *(void *)(a1 + 3328);
  *(void *)(a1 + 3328) = v204;
  if (v205) {
    (*(void (**)(uint64_t))(*(void *)v205 + 8))(v205);
  }
  uint64_t v206 = *(void *)(a2 + 1904);
  *(void *)(a2 + 1904) = 0;
  uint64_t v207 = *(void *)(a1 + 1904);
  *(void *)(a1 + 1904) = v206;
  if (v207) {
    (*(void (**)(uint64_t))(*(void *)v207 + 8))(v207);
  }
  uint64_t v208 = *(void *)(a2 + 1912);
  *(void *)(a2 + 1912) = 0;
  uint64_t v209 = *(void *)(a1 + 1912);
  *(void *)(a1 + 1912) = v208;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
  }
  uint64_t v210 = *(void *)(a2 + 2536);
  *(void *)(a2 + 2536) = 0;
  uint64_t v211 = *(void *)(a1 + 2536);
  *(void *)(a1 + 2536) = v210;
  if (v211) {
    (*(void (**)(uint64_t))(*(void *)v211 + 8))(v211);
  }
  uint64_t v212 = *(void *)(a2 + 3528);
  *(void *)(a2 + 3528) = 0;
  uint64_t v213 = *(void *)(a1 + 3528);
  *(void *)(a1 + 3528) = v212;
  if (v213) {
    (*(void (**)(uint64_t))(*(void *)v213 + 8))(v213);
  }
  uint64_t v214 = *(void *)(a2 + 3480);
  *(void *)(a2 + 3480) = 0;
  uint64_t v215 = *(void *)(a1 + 3480);
  *(void *)(a1 + 3480) = v214;
  if (v215) {
    (*(void (**)(uint64_t))(*(void *)v215 + 8))(v215);
  }
  uint64_t v216 = *(void *)(a2 + 2656);
  *(void *)(a2 + 2656) = 0;
  uint64_t v217 = *(void *)(a1 + 2656);
  *(void *)(a1 + 2656) = v216;
  if (v217) {
    (*(void (**)(uint64_t))(*(void *)v217 + 8))(v217);
  }
  uint64_t v218 = *(void *)(a2 + 584);
  *(void *)(a2 + 584) = 0;
  uint64_t v219 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = v218;
  if (v219) {
    (*(void (**)(uint64_t))(*(void *)v219 + 8))(v219);
  }
  uint64_t v220 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  uint64_t v221 = *(void *)(a1 + 480);
  *(void *)(a1 + 480) = v220;
  if (v221) {
    (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
  }
  uint64_t v222 = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0;
  uint64_t v223 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = v222;
  if (v223) {
    (*(void (**)(uint64_t))(*(void *)v223 + 8))(v223);
  }
  uint64_t v224 = *(void *)(a2 + 2128);
  *(void *)(a2 + 2128) = 0;
  uint64_t v225 = *(void *)(a1 + 2128);
  *(void *)(a1 + 2128) = v224;
  if (v225) {
    (*(void (**)(uint64_t))(*(void *)v225 + 8))(v225);
  }
  uint64_t v226 = *(void *)(a2 + 2392);
  *(void *)(a2 + 2392) = 0;
  uint64_t v227 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = v226;
  if (v227) {
    (*(void (**)(uint64_t))(*(void *)v227 + 8))(v227);
  }
  uint64_t v228 = *(void *)(a2 + 2400);
  *(void *)(a2 + 2400) = 0;
  uint64_t v229 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = v228;
  if (v229) {
    (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
  }
  uint64_t v230 = *(void *)(a2 + 384);
  *(void *)(a2 + 384) = 0;
  uint64_t v231 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = v230;
  if (v231) {
    (*(void (**)(uint64_t))(*(void *)v231 + 8))(v231);
  }
  uint64_t v232 = *(void *)(a2 + 3144);
  *(void *)(a2 + 3144) = 0;
  uint64_t v233 = *(void *)(a1 + 3144);
  *(void *)(a1 + 3144) = v232;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 8))(v233);
  }
  uint64_t v234 = *(void *)(a2 + 344);
  *(void *)(a2 + 344) = 0;
  uint64_t v235 = *(void *)(a1 + 344);
  *(void *)(a1 + 344) = v234;
  if (v235) {
    (*(void (**)(uint64_t))(*(void *)v235 + 8))(v235);
  }
  uint64_t v236 = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = 0;
  uint64_t v237 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = v236;
  if (v237) {
    (*(void (**)(uint64_t))(*(void *)v237 + 8))(v237);
  }
  uint64_t v238 = *(void *)(a2 + 512);
  *(void *)(a2 + 512) = 0;
  uint64_t v239 = *(void *)(a1 + 512);
  *(void *)(a1 + 512) = v238;
  if (v239) {
    (*(void (**)(uint64_t))(*(void *)v239 + 8))(v239);
  }
  uint64_t v240 = *(void *)(a2 + 3360);
  *(void *)(a2 + 3360) = 0;
  uint64_t v241 = *(void *)(a1 + 3360);
  *(void *)(a1 + 3360) = v240;
  if (v241) {
    (*(void (**)(uint64_t))(*(void *)v241 + 8))(v241);
  }
  uint64_t v242 = *(void *)(a2 + 3000);
  *(void *)(a2 + 3000) = 0;
  uint64_t v243 = *(void *)(a1 + 3000);
  *(void *)(a1 + 3000) = v242;
  if (v243) {
    (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
  }
  uint64_t v244 = *(void *)(a2 + 2960);
  *(void *)(a2 + 2960) = 0;
  uint64_t v245 = *(void *)(a1 + 2960);
  *(void *)(a1 + 2960) = v244;
  if (v245) {
    (*(void (**)(uint64_t))(*(void *)v245 + 8))(v245);
  }
  uint64_t v246 = *(void *)(a2 + 2984);
  *(void *)(a2 + 2984) = 0;
  uint64_t v247 = *(void *)(a1 + 2984);
  *(void *)(a1 + 2984) = v246;
  if (v247) {
    (*(void (**)(uint64_t))(*(void *)v247 + 8))(v247);
  }
  uint64_t v248 = *(void *)(a2 + 2976);
  *(void *)(a2 + 2976) = 0;
  uint64_t v249 = *(void *)(a1 + 2976);
  *(void *)(a1 + 2976) = v248;
  if (v249) {
    (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
  }
  uint64_t v250 = *(void *)(a2 + 3008);
  *(void *)(a2 + 3008) = 0;
  uint64_t v251 = *(void *)(a1 + 3008);
  *(void *)(a1 + 3008) = v250;
  if (v251) {
    (*(void (**)(uint64_t))(*(void *)v251 + 8))(v251);
  }
  uint64_t v252 = *(void *)(a2 + 3016);
  *(void *)(a2 + 3016) = 0;
  uint64_t v253 = *(void *)(a1 + 3016);
  *(void *)(a1 + 3016) = v252;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8))(v253);
  }
  uint64_t v254 = *(void *)(a2 + 2968);
  *(void *)(a2 + 2968) = 0;
  uint64_t v255 = *(void *)(a1 + 2968);
  *(void *)(a1 + 2968) = v254;
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8))(v255);
  }
  uint64_t v256 = *(void *)(a2 + 1936);
  *(void *)(a2 + 1936) = 0;
  uint64_t v257 = *(void *)(a1 + 1936);
  *(void *)(a1 + 1936) = v256;
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8))(v257);
  }
  uint64_t v258 = *(void *)(a2 + 3560);
  *(void *)(a2 + 3560) = 0;
  uint64_t v259 = *(void *)(a1 + 3560);
  *(void *)(a1 + 3560) = v258;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  }
  uint64_t v260 = *(void *)(a2 + 1840);
  *(void *)(a2 + 1840) = 0;
  uint64_t v261 = *(void *)(a1 + 1840);
  *(void *)(a1 + 1840) = v260;
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
  }
  uint64_t v262 = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  uint64_t v263 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = v262;
  if (v263) {
    (*(void (**)(uint64_t))(*(void *)v263 + 8))(v263);
  }
  uint64_t v264 = *(void *)(a2 + 3040);
  *(void *)(a2 + 3040) = 0;
  uint64_t v265 = *(void *)(a1 + 3040);
  *(void *)(a1 + 3040) = v264;
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8))(v265);
  }
  uint64_t v266 = *(void *)(a2 + 3048);
  *(void *)(a2 + 3048) = 0;
  uint64_t v267 = *(void *)(a1 + 3048);
  *(void *)(a1 + 3048) = v266;
  if (v267) {
    (*(void (**)(uint64_t))(*(void *)v267 + 8))(v267);
  }
  uint64_t v268 = *(void *)(a2 + 2904);
  *(void *)(a2 + 2904) = 0;
  uint64_t v269 = *(void *)(a1 + 2904);
  *(void *)(a1 + 2904) = v268;
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8))(v269);
  }
  uint64_t v270 = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  uint64_t v271 = *(void *)(a1 + 736);
  *(void *)(a1 + 736) = v270;
  if (v271) {
    (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
  }
  uint64_t v272 = *(void *)(a2 + 888);
  *(void *)(a2 + 888) = 0;
  uint64_t v273 = *(void *)(a1 + 888);
  *(void *)(a1 + 888) = v272;
  if (v273) {
    (*(void (**)(uint64_t))(*(void *)v273 + 8))(v273);
  }
  uint64_t v274 = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = 0;
  uint64_t v275 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = v274;
  if (v275) {
    (*(void (**)(uint64_t))(*(void *)v275 + 8))(v275);
  }
  uint64_t v276 = *(void *)(a2 + 1872);
  *(void *)(a2 + 1872) = 0;
  uint64_t v277 = *(void *)(a1 + 1872);
  *(void *)(a1 + 1872) = v276;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
  }
  uint64_t v278 = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = 0;
  uint64_t v279 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = v278;
  if (v279) {
    (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
  }
  uint64_t v280 = *(void *)(a2 + 2464);
  *(void *)(a2 + 2464) = 0;
  uint64_t v281 = *(void *)(a1 + 2464);
  *(void *)(a1 + 2464) = v280;
  if (v281) {
    (*(void (**)(uint64_t))(*(void *)v281 + 8))(v281);
  }
  uint64_t v282 = *(void *)(a2 + 1040);
  *(void *)(a2 + 1040) = 0;
  uint64_t v283 = *(void *)(a1 + 1040);
  *(void *)(a1 + 1040) = v282;
  if (v283) {
    (*(void (**)(uint64_t))(*(void *)v283 + 8))(v283);
  }
  uint64_t v284 = *(void *)(a2 + 784);
  *(void *)(a2 + 784) = 0;
  uint64_t v285 = *(void *)(a1 + 784);
  *(void *)(a1 + 784) = v284;
  if (v285) {
    (*(void (**)(uint64_t))(*(void *)v285 + 8))(v285);
  }
  uint64_t v286 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v287 = *v4;
  *uint64_t v4 = v286;
  if (v287) {
    (*(void (**)(uint64_t))(*(void *)v287 + 8))(v287);
  }
  uint64_t v288 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  uint64_t v289 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v288;
  if (v289) {
    (*(void (**)(uint64_t))(*(void *)v289 + 8))(v289);
  }
  uint64_t v290 = *(void *)(a2 + 320);
  *(void *)(a2 + 320) = 0;
  uint64_t v291 = *(void *)(a1 + 320);
  *(void *)(a1 + 320) = v290;
  if (v291) {
    (*(void (**)(uint64_t))(*(void *)v291 + 8))(v291);
  }
  uint64_t v292 = *(void *)(a2 + 1848);
  *(void *)(a2 + 1848) = 0;
  uint64_t v293 = *(void *)(a1 + 1848);
  *(void *)(a1 + 1848) = v292;
  if (v293) {
    (*(void (**)(uint64_t))(*(void *)v293 + 8))(v293);
  }
  uint64_t v294 = *(void *)(a2 + 3248);
  *(void *)(a2 + 3248) = 0;
  uint64_t v295 = *(void *)(a1 + 3248);
  *(void *)(a1 + 3248) = v294;
  if (v295) {
    (*(void (**)(uint64_t))(*(void *)v295 + 8))(v295);
  }
  uint64_t v296 = *(void *)(a2 + 2744);
  *(void *)(a2 + 2744) = 0;
  uint64_t v297 = *(void *)(a1 + 2744);
  *(void *)(a1 + 2744) = v296;
  if (v297) {
    (*(void (**)(uint64_t))(*(void *)v297 + 8))(v297);
  }
  uint64_t v298 = *(void *)(a2 + 3600);
  *(void *)(a2 + 3600) = 0;
  uint64_t v299 = *(void *)(a1 + 3600);
  *(void *)(a1 + 3600) = v298;
  if (v299) {
    (*(void (**)(uint64_t))(*(void *)v299 + 8))(v299);
  }
  uint64_t v300 = *(void *)(a2 + 3592);
  *(void *)(a2 + 3592) = 0;
  uint64_t v301 = *(void *)(a1 + 3592);
  *(void *)(a1 + 3592) = v300;
  if (v301) {
    (*(void (**)(uint64_t))(*(void *)v301 + 8))(v301);
  }
  uint64_t v302 = *(void *)(a2 + 360);
  *(void *)(a2 + 360) = 0;
  uint64_t v303 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = v302;
  if (v303) {
    (*(void (**)(uint64_t))(*(void *)v303 + 8))(v303);
  }
  uint64_t v304 = *(void *)(a2 + 2248);
  *(void *)(a2 + 2248) = 0;
  uint64_t v305 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = v304;
  if (v305) {
    (*(void (**)(uint64_t))(*(void *)v305 + 8))(v305);
  }
  uint64_t v306 = *(void *)(a2 + 2424);
  *(void *)(a2 + 2424) = 0;
  uint64_t v307 = *(void *)(a1 + 2424);
  *(void *)(a1 + 2424) = v306;
  if (v307) {
    (*(void (**)(uint64_t))(*(void *)v307 + 8))(v307);
  }
  uint64_t v308 = *(void *)(a2 + 1832);
  *(void *)(a2 + 1832) = 0;
  uint64_t v309 = *(void *)(a1 + 1832);
  *(void *)(a1 + 1832) = v308;
  if (v309) {
    (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
  }
  uint64_t v310 = *(void *)(a2 + 1856);
  *(void *)(a2 + 1856) = 0;
  uint64_t v311 = *(void *)(a1 + 1856);
  *(void *)(a1 + 1856) = v310;
  if (v311) {
    (*(void (**)(uint64_t))(*(void *)v311 + 8))(v311);
  }
  uint64_t v312 = *(void *)(a2 + 2752);
  *(void *)(a2 + 2752) = 0;
  uint64_t v313 = *(void *)(a1 + 2752);
  *(void *)(a1 + 2752) = v312;
  if (v313) {
    (*(void (**)(uint64_t))(*(void *)v313 + 8))(v313);
  }
  uint64_t v314 = *(void *)(a2 + 408);
  *(void *)(a2 + 408) = 0;
  uint64_t v315 = *(void *)(a1 + 408);
  *(void *)(a1 + 408) = v314;
  if (v315) {
    (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
  }
  uint64_t v316 = *(void *)(a2 + 416);
  *(void *)(a2 + 416) = 0;
  uint64_t v317 = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = v316;
  if (v317) {
    (*(void (**)(uint64_t))(*(void *)v317 + 8))(v317);
  }
  uint64_t v318 = *(void *)(a2 + 2000);
  *(void *)(a2 + 2000) = 0;
  uint64_t v319 = *(void *)(a1 + 2000);
  *(void *)(a1 + 2000) = v318;
  if (v319) {
    (*(void (**)(uint64_t))(*(void *)v319 + 8))(v319);
  }
  uint64_t v320 = *(void *)(a2 + 2152);
  *(void *)(a2 + 2152) = 0;
  uint64_t v321 = *(void *)(a1 + 2152);
  *(void *)(a1 + 2152) = v320;
  if (v321) {
    (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
  }
  uint64_t v322 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v323 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v322;
  if (v323) {
    (*(void (**)(uint64_t))(*(void *)v323 + 8))(v323);
  }
  uint64_t v324 = *(void *)(a2 + 832);
  *(void *)(a2 + 832) = 0;
  uint64_t v325 = *(void *)(a1 + 832);
  *(void *)(a1 + 832) = v324;
  if (v325) {
    (*(void (**)(uint64_t))(*(void *)v325 + 8))(v325);
  }
  uint64_t v326 = *(void *)(a2 + 2256);
  *(void *)(a2 + 2256) = 0;
  uint64_t v327 = *(void *)(a1 + 2256);
  *(void *)(a1 + 2256) = v326;
  if (v327) {
    (*(void (**)(uint64_t))(*(void *)v327 + 8))(v327);
  }
  uint64_t v328 = *(void *)(a2 + 1088);
  *(void *)(a2 + 1088) = 0;
  uint64_t v329 = *(void *)(a1 + 1088);
  *(void *)(a1 + 1088) = v328;
  if (v329) {
    (*(void (**)(uint64_t))(*(void *)v329 + 8))(v329);
  }
  uint64_t v330 = *(void *)(a2 + 1096);
  *(void *)(a2 + 1096) = 0;
  uint64_t v331 = *(void *)(a1 + 1096);
  *(void *)(a1 + 1096) = v330;
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 8))(v331);
  }
  uint64_t v332 = *(void *)(a2 + 1080);
  *(void *)(a2 + 1080) = 0;
  uint64_t v333 = *(void *)(a1 + 1080);
  *(void *)(a1 + 1080) = v332;
  if (v333) {
    (*(void (**)(uint64_t))(*(void *)v333 + 8))(v333);
  }
  uint64_t v334 = *(void *)(a2 + 896);
  *(void *)(a2 + 896) = 0;
  uint64_t v335 = *(void *)(a1 + 896);
  *(void *)(a1 + 896) = v334;
  if (v335) {
    (*(void (**)(uint64_t))(*(void *)v335 + 8))(v335);
  }
  uint64_t v336 = *(void *)(a2 + 3464);
  *(void *)(a2 + 3464) = 0;
  uint64_t v337 = *(void *)(a1 + 3464);
  *(void *)(a1 + 3464) = v336;
  if (v337) {
    (*(void (**)(uint64_t))(*(void *)v337 + 8))(v337);
  }
  uint64_t v338 = *(void *)(a2 + 3088);
  *(void *)(a2 + 3088) = 0;
  uint64_t v339 = *(void *)(a1 + 3088);
  *(void *)(a1 + 3088) = v338;
  if (v339) {
    (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
  }
  uint64_t v340 = *(void *)(a2 + 2768);
  *(void *)(a2 + 2768) = 0;
  uint64_t v341 = *(void *)(a1 + 2768);
  *(void *)(a1 + 2768) = v340;
  if (v341) {
    (*(void (**)(uint64_t))(*(void *)v341 + 8))(v341);
  }
  uint64_t v342 = *(void *)(a2 + 2616);
  *(void *)(a2 + 2616) = 0;
  uint64_t v343 = *(void *)(a1 + 2616);
  *(void *)(a1 + 2616) = v342;
  if (v343) {
    (*(void (**)(uint64_t))(*(void *)v343 + 8))(v343);
  }
  uint64_t v344 = *(void *)(a2 + 1792);
  *(void *)(a2 + 1792) = 0;
  uint64_t v345 = *(void *)(a1 + 1792);
  *(void *)(a1 + 1792) = v344;
  if (v345) {
    (*(void (**)(uint64_t))(*(void *)v345 + 8))(v345);
  }
  uint64_t v346 = *(void *)(a2 + 1800);
  *(void *)(a2 + 1800) = 0;
  uint64_t v347 = *(void *)(a1 + 1800);
  *(void *)(a1 + 1800) = v346;
  if (v347) {
    (*(void (**)(uint64_t))(*(void *)v347 + 8))(v347);
  }
  uint64_t v348 = *(void *)(a2 + 304);
  *(void *)(a2 + 304) = 0;
  uint64_t v349 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = v348;
  if (v349) {
    (*(void (**)(uint64_t))(*(void *)v349 + 8))(v349);
  }
  uint64_t v350 = *(void *)(a2 + 1784);
  *(void *)(a2 + 1784) = 0;
  uint64_t v351 = *(void *)(a1 + 1784);
  *(void *)(a1 + 1784) = v350;
  if (v351) {
    (*(void (**)(uint64_t))(*(void *)v351 + 8))(v351);
  }
  uint64_t v352 = *(void *)(a2 + 3336);
  *(void *)(a2 + 3336) = 0;
  uint64_t v353 = *(void *)(a1 + 3336);
  *(void *)(a1 + 3336) = v352;
  if (v353) {
    (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
  }
  uint64_t v354 = *(void *)(a2 + 2600);
  *(void *)(a2 + 2600) = 0;
  uint64_t v355 = *(void *)(a1 + 2600);
  *(void *)(a1 + 2600) = v354;
  if (v355) {
    (*(void (**)(uint64_t))(*(void *)v355 + 8))(v355);
  }
  uint64_t v356 = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  uint64_t v357 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = v356;
  if (v357) {
    (*(void (**)(uint64_t))(*(void *)v357 + 8))(v357);
  }
  uint64_t v358 = *(void *)(a2 + 2712);
  *(void *)(a2 + 2712) = 0;
  uint64_t v359 = *(void *)(a1 + 2712);
  *(void *)(a1 + 2712) = v358;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8))(v359);
  }
  uint64_t v360 = *(void *)(a2 + 1808);
  *(void *)(a2 + 1808) = 0;
  uint64_t v361 = *(void *)(a1 + 1808);
  *(void *)(a1 + 1808) = v360;
  if (v361) {
    (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
  }
  uint64_t v362 = *(void *)(a2 + 1776);
  *(void *)(a2 + 1776) = 0;
  uint64_t v363 = *(void *)(a1 + 1776);
  *(void *)(a1 + 1776) = v362;
  if (v363) {
    (*(void (**)(uint64_t))(*(void *)v363 + 8))(v363);
  }
  uint64_t v364 = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  uint64_t v365 = *(void *)(a1 + 400);
  *(void *)(a1 + 400) = v364;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8))(v365);
  }
  uint64_t v366 = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  uint64_t v367 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = v366;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8))(v367);
  }
  uint64_t v368 = *(void *)(a2 + 1320);
  *(void *)(a2 + 1320) = 0;
  uint64_t v369 = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = v368;
  if (v369) {
    (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
  }
  uint64_t v370 = *(void *)(a2 + 2896);
  *(void *)(a2 + 2896) = 0;
  uint64_t v371 = *(void *)(a1 + 2896);
  *(void *)(a1 + 2896) = v370;
  if (v371) {
    (*(void (**)(uint64_t))(*(void *)v371 + 8))(v371);
  }
  uint64_t v372 = *(void *)(a2 + 2920);
  *(void *)(a2 + 2920) = 0;
  uint64_t v373 = *(void *)(a1 + 2920);
  *(void *)(a1 + 2920) = v372;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8))(v373);
  }
  uint64_t v374 = *(void *)(a2 + 2912);
  *(void *)(a2 + 2912) = 0;
  uint64_t v375 = *(void *)(a1 + 2912);
  *(void *)(a1 + 2912) = v374;
  if (v375) {
    (*(void (**)(uint64_t))(*(void *)v375 + 8))(v375);
  }
  uint64_t v376 = *(void *)(a2 + 1032);
  *(void *)(a2 + 1032) = 0;
  uint64_t v377 = *(void *)(a1 + 1032);
  *(void *)(a1 + 1032) = v376;
  if (v377) {
    (*(void (**)(uint64_t))(*(void *)v377 + 8))(v377);
  }
  uint64_t v378 = *(void *)(a2 + 3392);
  *(void *)(a2 + 3392) = 0;
  uint64_t v379 = *(void *)(a1 + 3392);
  *(void *)(a1 + 3392) = v378;
  if (v379) {
    (*(void (**)(uint64_t))(*(void *)v379 + 8))(v379);
  }
  uint64_t v380 = *(void *)(a2 + 920);
  *(void *)(a2 + 920) = 0;
  uint64_t v381 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = v380;
  if (v381) {
    (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
  }
  uint64_t v382 = *(void *)(a2 + 3368);
  *(void *)(a2 + 3368) = 0;
  uint64_t v383 = *(void *)(a1 + 3368);
  *(void *)(a1 + 3368) = v382;
  if (v383) {
    (*(void (**)(uint64_t))(*(void *)v383 + 8))(v383);
  }
  uint64_t v384 = *(void *)(a2 + 3376);
  *(void *)(a2 + 3376) = 0;
  uint64_t v385 = *(void *)(a1 + 3376);
  *(void *)(a1 + 3376) = v384;
  if (v385) {
    (*(void (**)(uint64_t))(*(void *)v385 + 8))(v385);
  }
  uint64_t v386 = *(void *)(a2 + 3160);
  *(void *)(a2 + 3160) = 0;
  uint64_t v387 = *(void *)(a1 + 3160);
  *(void *)(a1 + 3160) = v386;
  if (v387) {
    (*(void (**)(uint64_t))(*(void *)v387 + 8))(v387);
  }
  uint64_t v388 = *(void *)(a2 + 1112);
  *(void *)(a2 + 1112) = 0;
  uint64_t v389 = *(void *)(a1 + 1112);
  *(void *)(a1 + 1112) = v388;
  if (v389) {
    (*(void (**)(uint64_t))(*(void *)v389 + 8))(v389);
  }
  uint64_t v390 = *(void *)(a2 + 1120);
  *(void *)(a2 + 1120) = 0;
  uint64_t v391 = *(void *)(a1 + 1120);
  *(void *)(a1 + 1120) = v390;
  if (v391) {
    (*(void (**)(uint64_t))(*(void *)v391 + 8))(v391);
  }
  uint64_t v392 = *(void *)(a2 + 1944);
  *(void *)(a2 + 1944) = 0;
  uint64_t v393 = *(void *)(a1 + 1944);
  *(void *)(a1 + 1944) = v392;
  if (v393) {
    (*(void (**)(uint64_t))(*(void *)v393 + 8))(v393);
  }
  uint64_t v394 = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  uint64_t v395 = *(void *)(a1 + 1024);
  *(void *)(a1 + 1024) = v394;
  if (v395) {
    (*(void (**)(uint64_t))(*(void *)v395 + 8))(v395);
  }
  uint64_t v396 = *(void *)(a2 + 3504);
  *(void *)(a2 + 3504) = 0;
  uint64_t v397 = *(void *)(a1 + 3504);
  *(void *)(a1 + 3504) = v396;
  if (v397) {
    (*(void (**)(uint64_t))(*(void *)v397 + 8))(v397);
  }
  uint64_t v398 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v399 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v398;
  if (v399) {
    (*(void (**)(uint64_t))(*(void *)v399 + 8))(v399);
  }
  uint64_t v400 = *(void *)(a2 + 2328);
  *(void *)(a2 + 2328) = 0;
  uint64_t v401 = *(void *)(a1 + 2328);
  *(void *)(a1 + 2328) = v400;
  if (v401) {
    (*(void (**)(uint64_t))(*(void *)v401 + 8))(v401);
  }
  uint64_t v402 = *(void *)(a2 + 1416);
  *(void *)(a2 + 1416) = 0;
  uint64_t v403 = *(void *)(a1 + 1416);
  *(void *)(a1 + 1416) = v402;
  if (v403) {
    (*(void (**)(uint64_t))(*(void *)v403 + 8))(v403);
  }
  uint64_t v404 = *(void *)(a2 + 2408);
  *(void *)(a2 + 2408) = 0;
  uint64_t v405 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = v404;
  if (v405) {
    (*(void (**)(uint64_t))(*(void *)v405 + 8))(v405);
  }
  uint64_t v406 = *(void *)(a2 + 2416);
  *(void *)(a2 + 2416) = 0;
  uint64_t v407 = *(void *)(a1 + 2416);
  *(void *)(a1 + 2416) = v406;
  if (v407) {
    (*(void (**)(uint64_t))(*(void *)v407 + 8))(v407);
  }
  uint64_t v408 = *(void *)(a2 + 2320);
  *(void *)(a2 + 2320) = 0;
  uint64_t v409 = *(void *)(a1 + 2320);
  *(void *)(a1 + 2320) = v408;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8))(v409);
  }
  uint64_t v410 = *(void *)(a2 + 864);
  *(void *)(a2 + 864) = 0;
  uint64_t v411 = *(void *)(a1 + 864);
  *(void *)(a1 + 864) = v410;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8))(v411);
  }
  uint64_t v412 = *(void *)(a2 + 1424);
  *(void *)(a2 + 1424) = 0;
  uint64_t v413 = *(void *)(a1 + 1424);
  *(void *)(a1 + 1424) = v412;
  if (v413) {
    (*(void (**)(uint64_t))(*(void *)v413 + 8))(v413);
  }
  uint64_t v414 = *(void *)(a2 + 3424);
  *(void *)(a2 + 3424) = 0;
  uint64_t v415 = *(void *)(a1 + 3424);
  *(void *)(a1 + 3424) = v414;
  if (v415) {
    (*(void (**)(uint64_t))(*(void *)v415 + 8))(v415);
  }
  uint64_t v416 = *(void *)(a2 + 2352);
  *(void *)(a2 + 2352) = 0;
  uint64_t v417 = *(void *)(a1 + 2352);
  *(void *)(a1 + 2352) = v416;
  if (v417) {
    (*(void (**)(uint64_t))(*(void *)v417 + 8))(v417);
  }
  uint64_t v418 = *(void *)(a2 + 2376);
  *(void *)(a2 + 2376) = 0;
  uint64_t v419 = *(void *)(a1 + 2376);
  *(void *)(a1 + 2376) = v418;
  if (v419) {
    (*(void (**)(uint64_t))(*(void *)v419 + 8))(v419);
  }
  uint64_t v420 = *(void *)(a2 + 1272);
  *(void *)(a2 + 1272) = 0;
  uint64_t v421 = *(void *)(a1 + 1272);
  *(void *)(a1 + 1272) = v420;
  if (v421) {
    (*(void (**)(uint64_t))(*(void *)v421 + 8))(v421);
  }
  uint64_t v422 = *(void *)(a2 + 2992);
  *(void *)(a2 + 2992) = 0;
  uint64_t v423 = *(void *)(a1 + 2992);
  *(void *)(a1 + 2992) = v422;
  if (v423) {
    (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
  }
  uint64_t v424 = *(void *)(a2 + 2368);
  *(void *)(a2 + 2368) = 0;
  uint64_t v425 = *(void *)(a1 + 2368);
  *(void *)(a1 + 2368) = v424;
  if (v425) {
    (*(void (**)(uint64_t))(*(void *)v425 + 8))(v425);
  }
  uint64_t v426 = *(void *)(a2 + 1968);
  *(void *)(a2 + 1968) = 0;
  uint64_t v427 = *(void *)(a1 + 1968);
  *(void *)(a1 + 1968) = v426;
  if (v427) {
    (*(void (**)(uint64_t))(*(void *)v427 + 8))(v427);
  }
  uint64_t v428 = *(void *)(a2 + 3384);
  *(void *)(a2 + 3384) = 0;
  uint64_t v429 = *(void *)(a1 + 3384);
  *(void *)(a1 + 3384) = v428;
  if (v429) {
    (*(void (**)(uint64_t))(*(void *)v429 + 8))(v429);
  }
  uint64_t v430 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  uint64_t v431 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v430;
  if (v431) {
    (*(void (**)(uint64_t))(*(void *)v431 + 8))(v431);
  }
  uint64_t v432 = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  uint64_t v433 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v432;
  if (v433) {
    (*(void (**)(uint64_t))(*(void *)v433 + 8))(v433);
  }
  uint64_t v434 = *(void *)(a2 + 2032);
  *(void *)(a2 + 2032) = 0;
  uint64_t v435 = *(void *)(a1 + 2032);
  *(void *)(a1 + 2032) = v434;
  if (v435) {
    (*(void (**)(uint64_t))(*(void *)v435 + 8))(v435);
  }
  uint64_t v436 = *(void *)(a2 + 776);
  *(void *)(a2 + 776) = 0;
  uint64_t v437 = *(void *)(a1 + 776);
  *(void *)(a1 + 776) = v436;
  if (v437) {
    (*(void (**)(uint64_t))(*(void *)v437 + 8))(v437);
  }
  uint64_t v438 = *(void *)(a2 + 2448);
  *(void *)(a2 + 2448) = 0;
  uint64_t v439 = *(void *)(a1 + 2448);
  *(void *)(a1 + 2448) = v438;
  if (v439) {
    (*(void (**)(uint64_t))(*(void *)v439 + 8))(v439);
  }
  uint64_t v440 = *(void *)(a2 + 2456);
  *(void *)(a2 + 2456) = 0;
  uint64_t v441 = *(void *)(a1 + 2456);
  *(void *)(a1 + 2456) = v440;
  if (v441) {
    (*(void (**)(uint64_t))(*(void *)v441 + 8))(v441);
  }
  uint64_t v442 = *(void *)(a2 + 1336);
  *(void *)(a2 + 1336) = 0;
  uint64_t v443 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = v442;
  if (v443) {
    (*(void (**)(uint64_t))(*(void *)v443 + 8))(v443);
  }
  uint64_t v444 = *(void *)(a2 + 3496);
  *(void *)(a2 + 3496) = 0;
  uint64_t v445 = *(void *)(a1 + 3496);
  *(void *)(a1 + 3496) = v444;
  if (v445) {
    (*(void (**)(uint64_t))(*(void *)v445 + 8))(v445);
  }
  uint64_t v446 = *(void *)(a2 + 3072);
  *(void *)(a2 + 3072) = 0;
  uint64_t v447 = *(void *)(a1 + 3072);
  *(void *)(a1 + 3072) = v446;
  if (v447) {
    (*(void (**)(uint64_t))(*(void *)v447 + 8))(v447);
  }
  uint64_t v448 = *(void *)(a2 + 3168);
  *(void *)(a2 + 3168) = 0;
  uint64_t v449 = *(void *)(a1 + 3168);
  *(void *)(a1 + 3168) = v448;
  if (v449) {
    (*(void (**)(uint64_t))(*(void *)v449 + 8))(v449);
  }
  uint64_t v450 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  uint64_t v451 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v450;
  if (v451) {
    (*(void (**)(uint64_t))(*(void *)v451 + 8))(v451);
  }
  uint64_t v452 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v453 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v452;
  if (v453) {
    (*(void (**)(uint64_t))(*(void *)v453 + 8))(v453);
  }
  uint64_t v454 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  uint64_t v455 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v454;
  if (v455) {
    (*(void (**)(uint64_t))(*(void *)v455 + 8))(v455);
  }
  uint64_t v456 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  uint64_t v457 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v456;
  if (v457) {
    (*(void (**)(uint64_t))(*(void *)v457 + 8))(v457);
  }
  uint64_t v458 = *(void *)(a2 + 1144);
  *(void *)(a2 + 1144) = 0;
  uint64_t v459 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = v458;
  if (v459) {
    (*(void (**)(uint64_t))(*(void *)v459 + 8))(v459);
  }
  uint64_t v460 = *(void *)(a2 + 1256);
  *(void *)(a2 + 1256) = 0;
  uint64_t v461 = *(void *)(a1 + 1256);
  *(void *)(a1 + 1256) = v460;
  if (v461) {
    (*(void (**)(uint64_t))(*(void *)v461 + 8))(v461);
  }
  uint64_t v462 = *(void *)(a2 + 1264);
  *(void *)(a2 + 1264) = 0;
  uint64_t v463 = *(void *)(a1 + 1264);
  *(void *)(a1 + 1264) = v462;
  if (v463) {
    (*(void (**)(uint64_t))(*(void *)v463 + 8))(v463);
  }
  uint64_t v464 = *(void *)(a2 + 1152);
  *(void *)(a2 + 1152) = 0;
  uint64_t v465 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = v464;
  if (v465) {
    (*(void (**)(uint64_t))(*(void *)v465 + 8))(v465);
  }
  uint64_t v466 = *(void *)(a2 + 1184);
  *(void *)(a2 + 1184) = 0;
  uint64_t v467 = *(void *)(a1 + 1184);
  *(void *)(a1 + 1184) = v466;
  if (v467) {
    (*(void (**)(uint64_t))(*(void *)v467 + 8))(v467);
  }
  uint64_t v468 = *(void *)(a2 + 1232);
  *(void *)(a2 + 1232) = 0;
  uint64_t v469 = *(void *)(a1 + 1232);
  *(void *)(a1 + 1232) = v468;
  if (v469) {
    (*(void (**)(uint64_t))(*(void *)v469 + 8))(v469);
  }
  uint64_t v470 = *(void *)(a2 + 1920);
  *(void *)(a2 + 1920) = 0;
  uint64_t v471 = *(void *)(a1 + 1920);
  *(void *)(a1 + 1920) = v470;
  if (v471) {
    (*(void (**)(uint64_t))(*(void *)v471 + 8))(v471);
  }
  uint64_t v472 = *(void *)(a2 + 640);
  *(void *)(a2 + 640) = 0;
  uint64_t v473 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = v472;
  if (v473) {
    (*(void (**)(uint64_t))(*(void *)v473 + 8))(v473);
  }
  uint64_t v474 = *(void *)(a2 + 648);
  *(void *)(a2 + 648) = 0;
  uint64_t v475 = *(void *)(a1 + 648);
  *(void *)(a1 + 648) = v474;
  if (v475) {
    (*(void (**)(uint64_t))(*(void *)v475 + 8))(v475);
  }
  uint64_t v476 = *(void *)(a2 + 1224);
  *(void *)(a2 + 1224) = 0;
  uint64_t v477 = *(void *)(a1 + 1224);
  *(void *)(a1 + 1224) = v476;
  if (v477) {
    (*(void (**)(uint64_t))(*(void *)v477 + 8))(v477);
  }
  uint64_t v478 = *(void *)(a2 + 656);
  *(void *)(a2 + 656) = 0;
  uint64_t v479 = *(void *)(a1 + 656);
  *(void *)(a1 + 656) = v478;
  if (v479) {
    (*(void (**)(uint64_t))(*(void *)v479 + 8))(v479);
  }
  uint64_t v480 = *(void *)(a2 + 2528);
  *(void *)(a2 + 2528) = 0;
  uint64_t v481 = *(void *)(a1 + 2528);
  *(void *)(a1 + 2528) = v480;
  if (v481) {
    (*(void (**)(uint64_t))(*(void *)v481 + 8))(v481);
  }
  uint64_t v482 = *(void *)(a2 + 2584);
  *(void *)(a2 + 2584) = 0;
  uint64_t v483 = *(void *)(a1 + 2584);
  *(void *)(a1 + 2584) = v482;
  if (v483) {
    (*(void (**)(uint64_t))(*(void *)v483 + 8))(v483);
  }
  uint64_t v484 = *(void *)(a2 + 2552);
  *(void *)(a2 + 2552) = 0;
  uint64_t v485 = *(void *)(a1 + 2552);
  *(void *)(a1 + 2552) = v484;
  if (v485) {
    (*(void (**)(uint64_t))(*(void *)v485 + 8))(v485);
  }
  uint64_t v486 = *(void *)(a2 + 2592);
  *(void *)(a2 + 2592) = 0;
  uint64_t v487 = *(void *)(a1 + 2592);
  *(void *)(a1 + 2592) = v486;
  if (v487) {
    (*(void (**)(uint64_t))(*(void *)v487 + 8))(v487);
  }
  uint64_t v488 = *(void *)(a2 + 3152);
  *(void *)(a2 + 3152) = 0;
  uint64_t v489 = *(void *)(a1 + 3152);
  *(void *)(a1 + 3152) = v488;
  if (v489) {
    (*(void (**)(uint64_t))(*(void *)v489 + 8))(v489);
  }
  uint64_t v490 = *(void *)(a2 + 744);
  *(void *)(a2 + 744) = 0;
  uint64_t v491 = *(void *)(a1 + 744);
  *(void *)(a1 + 744) = v490;
  if (v491) {
    (*(void (**)(uint64_t))(*(void *)v491 + 8))(v491);
  }
  uint64_t v492 = *(void *)(a2 + 2048);
  *(void *)(a2 + 2048) = 0;
  uint64_t v493 = *(void *)(a1 + 2048);
  *(void *)(a1 + 2048) = v492;
  if (v493) {
    (*(void (**)(uint64_t))(*(void *)v493 + 8))(v493);
  }
  uint64_t v494 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  uint64_t v495 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v494;
  if (v495) {
    (*(void (**)(uint64_t))(*(void *)v495 + 8))(v495);
  }
  uint64_t v496 = *(void *)(a2 + 1248);
  *(void *)(a2 + 1248) = 0;
  uint64_t v497 = *(void *)(a1 + 1248);
  *(void *)(a1 + 1248) = v496;
  if (v497) {
    (*(void (**)(uint64_t))(*(void *)v497 + 8))(v497);
  }
  uint64_t v498 = *(void *)(a2 + 2576);
  *(void *)(a2 + 2576) = 0;
  uint64_t v499 = *(void *)(a1 + 2576);
  *(void *)(a1 + 2576) = v498;
  if (v499) {
    (*(void (**)(uint64_t))(*(void *)v499 + 8))(v499);
  }
  uint64_t v500 = *(void *)(a2 + 392);
  *(void *)(a2 + 392) = 0;
  uint64_t v501 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = v500;
  if (v501) {
    (*(void (**)(uint64_t))(*(void *)v501 + 8))(v501);
  }
  uint64_t v502 = *(void *)(a2 + 2840);
  *(void *)(a2 + 2840) = 0;
  uint64_t v503 = *(void *)(a1 + 2840);
  *(void *)(a1 + 2840) = v502;
  if (v503) {
    (*(void (**)(uint64_t))(*(void *)v503 + 8))(v503);
  }
  uint64_t v504 = *(void *)(a2 + 1864);
  *(void *)(a2 + 1864) = 0;
  uint64_t v505 = *(void *)(a1 + 1864);
  *(void *)(a1 + 1864) = v504;
  if (v505) {
    (*(void (**)(uint64_t))(*(void *)v505 + 8))(v505);
  }
  uint64_t v506 = *(void *)(a2 + 2016);
  *(void *)(a2 + 2016) = 0;
  uint64_t v507 = *(void *)(a1 + 2016);
  *(void *)(a1 + 2016) = v506;
  if (v507) {
    (*(void (**)(uint64_t))(*(void *)v507 + 8))(v507);
  }
  uint64_t v508 = *(void *)(a2 + 880);
  *(void *)(a2 + 880) = 0;
  uint64_t v509 = *(void *)(a1 + 880);
  *(void *)(a1 + 880) = v508;
  if (v509) {
    (*(void (**)(uint64_t))(*(void *)v509 + 8))(v509);
  }
  uint64_t v510 = *(void *)(a2 + 2104);
  *(void *)(a2 + 2104) = 0;
  uint64_t v511 = *(void *)(a1 + 2104);
  *(void *)(a1 + 2104) = v510;
  if (v511) {
    (*(void (**)(uint64_t))(*(void *)v511 + 8))(v511);
  }
  uint64_t v512 = *(void *)(a2 + 2096);
  *(void *)(a2 + 2096) = 0;
  uint64_t v513 = *(void *)(a1 + 2096);
  *(void *)(a1 + 2096) = v512;
  if (v513) {
    (*(void (**)(uint64_t))(*(void *)v513 + 8))(v513);
  }
  uint64_t v514 = *(void *)(a2 + 528);
  *(void *)(a2 + 528) = 0;
  uint64_t v515 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = v514;
  if (v515) {
    (*(void (**)(uint64_t))(*(void *)v515 + 8))(v515);
  }
  uint64_t v516 = *(void *)(a2 + 3432);
  *(void *)(a2 + 3432) = 0;
  uint64_t v517 = *(void *)(a1 + 3432);
  *(void *)(a1 + 3432) = v516;
  if (v517) {
    (*(void (**)(uint64_t))(*(void *)v517 + 8))(v517);
  }
  uint64_t v518 = *(void *)(a2 + 2136);
  *(void *)(a2 + 2136) = 0;
  uint64_t v519 = *(void *)(a1 + 2136);
  *(void *)(a1 + 2136) = v518;
  if (v519) {
    (*(void (**)(uint64_t))(*(void *)v519 + 8))(v519);
  }
  uint64_t v520 = *(void *)(a2 + 3064);
  *(void *)(a2 + 3064) = 0;
  uint64_t v521 = *(void *)(a1 + 3064);
  *(void *)(a1 + 3064) = v520;
  if (v521) {
    (*(void (**)(uint64_t))(*(void *)v521 + 8))(v521);
  }
  uint64_t v522 = *(void *)(a2 + 848);
  *(void *)(a2 + 848) = 0;
  uint64_t v523 = *(void *)(a1 + 848);
  *(void *)(a1 + 848) = v522;
  if (v523) {
    (*(void (**)(uint64_t))(*(void *)v523 + 8))(v523);
  }
  uint64_t v524 = *(void *)(a2 + 632);
  *(void *)(a2 + 632) = 0;
  uint64_t v525 = *(void *)(a1 + 632);
  *(void *)(a1 + 632) = v524;
  if (v525) {
    (*(void (**)(uint64_t))(*(void *)v525 + 8))(v525);
  }
  uint64_t v526 = *(void *)(a2 + 2008);
  *(void *)(a2 + 2008) = 0;
  uint64_t v527 = *(void *)(a1 + 2008);
  *(void *)(a1 + 2008) = v526;
  if (v527) {
    (*(void (**)(uint64_t))(*(void *)v527 + 8))(v527);
  }
  uint64_t v528 = *(void *)(a2 + 2064);
  *(void *)(a2 + 2064) = 0;
  uint64_t v529 = *(void *)(a1 + 2064);
  *(void *)(a1 + 2064) = v528;
  if (v529) {
    (*(void (**)(uint64_t))(*(void *)v529 + 8))(v529);
  }
  uint64_t v530 = *(void *)(a2 + 3080);
  *(void *)(a2 + 3080) = 0;
  uint64_t v531 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v530;
  if (v531) {
    (*(void (**)(uint64_t))(*(void *)v531 + 8))(v531);
  }
  uint64_t v532 = *(void *)(a2 + 600);
  *(void *)(a2 + 600) = 0;
  uint64_t v533 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = v532;
  if (v533) {
    (*(void (**)(uint64_t))(*(void *)v533 + 8))(v533);
  }
  uint64_t v534 = *(void *)(a2 + 2112);
  *(void *)(a2 + 2112) = 0;
  uint64_t v535 = *(void *)(a1 + 2112);
  *(void *)(a1 + 2112) = v534;
  if (v535) {
    (*(void (**)(uint64_t))(*(void *)v535 + 8))(v535);
  }
  uint64_t v536 = *(void *)(a2 + 1952);
  *(void *)(a2 + 1952) = 0;
  uint64_t v537 = *(void *)(a1 + 1952);
  *(void *)(a1 + 1952) = v536;
  if (v537) {
    (*(void (**)(uint64_t))(*(void *)v537 + 8))(v537);
  }
  uint64_t v538 = *(void *)(a2 + 1008);
  *(void *)(a2 + 1008) = 0;
  uint64_t v539 = *(void *)(a1 + 1008);
  *(void *)(a1 + 1008) = v538;
  if (v539) {
    (*(void (**)(uint64_t))(*(void *)v539 + 8))(v539);
  }
  uint64_t v540 = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  uint64_t v541 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = v540;
  if (v541) {
    (*(void (**)(uint64_t))(*(void *)v541 + 8))(v541);
  }
  uint64_t v542 = *(void *)(a2 + 3216);
  *(void *)(a2 + 3216) = 0;
  uint64_t v543 = *(void *)(a1 + 3216);
  *(void *)(a1 + 3216) = v542;
  if (v543) {
    (*(void (**)(uint64_t))(*(void *)v543 + 8))(v543);
  }
  uint64_t v544 = *(void *)(a2 + 3024);
  *(void *)(a2 + 3024) = 0;
  uint64_t v545 = *(void *)(a1 + 3024);
  *(void *)(a1 + 3024) = v544;
  if (v545) {
    (*(void (**)(uint64_t))(*(void *)v545 + 8))(v545);
  }
  uint64_t v546 = *(void *)(a2 + 3408);
  *(void *)(a2 + 3408) = 0;
  uint64_t v547 = *(void *)(a1 + 3408);
  *(void *)(a1 + 3408) = v546;
  if (v547) {
    (*(void (**)(uint64_t))(*(void *)v547 + 8))(v547);
  }
  uint64_t v548 = *(void *)(a2 + 2056);
  *(void *)(a2 + 2056) = 0;
  uint64_t v549 = *(void *)(a1 + 2056);
  *(void *)(a1 + 2056) = v548;
  if (v549) {
    (*(void (**)(uint64_t))(*(void *)v549 + 8))(v549);
  }
  uint64_t v550 = *(void *)(a2 + 2040);
  *(void *)(a2 + 2040) = 0;
  uint64_t v551 = *(void *)(a1 + 2040);
  *(void *)(a1 + 2040) = v550;
  if (v551) {
    (*(void (**)(uint64_t))(*(void *)v551 + 8))(v551);
  }
  uint64_t v552 = *(void *)(a2 + 2120);
  *(void *)(a2 + 2120) = 0;
  uint64_t v553 = *(void *)(a1 + 2120);
  *(void *)(a1 + 2120) = v552;
  if (v553) {
    (*(void (**)(uint64_t))(*(void *)v553 + 8))(v553);
  }
  uint64_t v554 = *(void *)(a2 + 2568);
  *(void *)(a2 + 2568) = 0;
  uint64_t v555 = *(void *)(a1 + 2568);
  *(void *)(a1 + 2568) = v554;
  if (v555) {
    (*(void (**)(uint64_t))(*(void *)v555 + 8))(v555);
  }
  uint64_t v556 = *(void *)(a2 + 1400);
  *(void *)(a2 + 1400) = 0;
  uint64_t v557 = *(void *)(a1 + 1400);
  *(void *)(a1 + 1400) = v556;
  if (v557) {
    (*(void (**)(uint64_t))(*(void *)v557 + 8))(v557);
  }
  uint64_t v558 = *(void *)(a2 + 624);
  *(void *)(a2 + 624) = 0;
  uint64_t v559 = *v5;
  *uint64_t v5 = v558;
  if (v559) {
    (*(void (**)(uint64_t))(*(void *)v559 + 8))(v559);
  }
  uint64_t v560 = *(void *)(a2 + 288);
  *(void *)(a2 + 288) = 0;
  uint64_t v561 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v560;
  if (v561) {
    (*(void (**)(uint64_t))(*(void *)v561 + 8))(v561);
  }
  uint64_t v562 = *(void *)(a2 + 1384);
  *(void *)(a2 + 1384) = 0;
  uint64_t v563 = *(void *)(a1 + 1384);
  *(void *)(a1 + 1384) = v562;
  if (v563) {
    (*(void (**)(uint64_t))(*(void *)v563 + 8))(v563);
  }
  uint64_t v564 = *(void *)(a2 + 1368);
  *(void *)(a2 + 1368) = 0;
  uint64_t v565 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = v564;
  if (v565) {
    (*(void (**)(uint64_t))(*(void *)v565 + 8))(v565);
  }
  uint64_t v566 = *(void *)(a2 + 1376);
  *(void *)(a2 + 1376) = 0;
  uint64_t v567 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = v566;
  if (v567) {
    (*(void (**)(uint64_t))(*(void *)v567 + 8))(v567);
  }
  uint64_t v568 = *(void *)(a2 + 1360);
  *(void *)(a2 + 1360) = 0;
  uint64_t v569 = *(void *)(a1 + 1360);
  *(void *)(a1 + 1360) = v568;
  if (v569) {
    (*(void (**)(uint64_t))(*(void *)v569 + 8))(v569);
  }
  uint64_t v570 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  uint64_t v571 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v570;
  if (v571) {
    (*(void (**)(uint64_t))(*(void *)v571 + 8))(v571);
  }
  uint64_t v572 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  uint64_t v573 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v572;
  if (v573) {
    (*(void (**)(uint64_t))(*(void *)v573 + 8))(v573);
  }
  uint64_t v574 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  uint64_t v575 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v574;
  if (v575) {
    (*(void (**)(uint64_t))(*(void *)v575 + 8))(v575);
  }
  uint64_t v576 = *(void *)(a2 + 3120);
  *(void *)(a2 + 3120) = 0;
  uint64_t v577 = *(void *)(a1 + 3120);
  *(void *)(a1 + 3120) = v576;
  if (v577) {
    (*(void (**)(uint64_t))(*(void *)v577 + 8))(v577);
  }
  uint64_t v578 = *(void *)(a2 + 3112);
  *(void *)(a2 + 3112) = 0;
  uint64_t v579 = *(void *)(a1 + 3112);
  *(void *)(a1 + 3112) = v578;
  if (v579) {
    (*(void (**)(uint64_t))(*(void *)v579 + 8))(v579);
  }
  uint64_t v580 = *(void *)(a2 + 840);
  *(void *)(a2 + 840) = 0;
  uint64_t v581 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = v580;
  if (v581) {
    (*(void (**)(uint64_t))(*(void *)v581 + 8))(v581);
  }
  uint64_t v582 = *(void *)(a2 + 280);
  *(void *)(a2 + 280) = 0;
  uint64_t v583 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v582;
  if (v583) {
    (*(void (**)(uint64_t))(*(void *)v583 + 8))(v583);
  }
  uint64_t v584 = *(void *)(a2 + 1104);
  *(void *)(a2 + 1104) = 0;
  uint64_t v585 = *(void *)(a1 + 1104);
  *(void *)(a1 + 1104) = v584;
  if (v585) {
    (*(void (**)(uint64_t))(*(void *)v585 + 8))(v585);
  }
  uint64_t v586 = *(void *)(a2 + 2688);
  *(void *)(a2 + 2688) = 0;
  uint64_t v587 = *(void *)(a1 + 2688);
  *(void *)(a1 + 2688) = v586;
  if (v587) {
    (*(void (**)(uint64_t))(*(void *)v587 + 8))(v587);
  }
  uint64_t v588 = *(void *)(a2 + 2704);
  *(void *)(a2 + 2704) = 0;
  uint64_t v589 = *(void *)(a1 + 2704);
  *(void *)(a1 + 2704) = v588;
  if (v589) {
    (*(void (**)(uint64_t))(*(void *)v589 + 8))(v589);
  }
  uint64_t v590 = *(void *)(a2 + 2696);
  *(void *)(a2 + 2696) = 0;
  uint64_t v591 = *(void *)(a1 + 2696);
  *(void *)(a1 + 2696) = v590;
  if (v591) {
    (*(void (**)(uint64_t))(*(void *)v591 + 8))(v591);
  }
  uint64_t v592 = *(void *)(a2 + 3608);
  *(void *)(a2 + 3608) = 0;
  uint64_t v593 = *(void *)(a1 + 3608);
  *(void *)(a1 + 3608) = v592;
  if (v593) {
    (*(void (**)(uint64_t))(*(void *)v593 + 8))(v593);
  }
  uint64_t v594 = *(void *)(a2 + 328);
  *(void *)(a2 + 328) = 0;
  uint64_t v595 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = v594;
  if (v595) {
    (*(void (**)(uint64_t))(*(void *)v595 + 8))(v595);
  }
  uint64_t v596 = *(void *)(a2 + 2520);
  *(void *)(a2 + 2520) = 0;
  uint64_t v597 = *(void *)(a1 + 2520);
  *(void *)(a1 + 2520) = v596;
  if (v597) {
    (*(void (**)(uint64_t))(*(void *)v597 + 8))(v597);
  }
  uint64_t v598 = *(void *)(a2 + 2088);
  *(void *)(a2 + 2088) = 0;
  uint64_t v599 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = v598;
  if (v599) {
    (*(void (**)(uint64_t))(*(void *)v599 + 8))(v599);
  }
  uint64_t v600 = *(void *)(a2 + 2080);
  *(void *)(a2 + 2080) = 0;
  uint64_t v601 = *(void *)(a1 + 2080);
  *(void *)(a1 + 2080) = v600;
  if (v601) {
    (*(void (**)(uint64_t))(*(void *)v601 + 8))(v601);
  }
  uint64_t v602 = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  uint64_t v603 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = v602;
  if (v603) {
    (*(void (**)(uint64_t))(*(void *)v603 + 8))(v603);
  }
  uint64_t v604 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v605 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v604;
  if (v605) {
    (*(void (**)(uint64_t))(*(void *)v605 + 8))(v605);
  }
  uint64_t v606 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  uint64_t v607 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v606;
  if (v607) {
    (*(void (**)(uint64_t))(*(void *)v607 + 8))(v607);
  }
  uint64_t v608 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v609 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v608;
  if (v609) {
    (*(void (**)(uint64_t))(*(void *)v609 + 8))(v609);
  }
  uint64_t v610 = *(void *)(a2 + 1064);
  *(void *)(a2 + 1064) = 0;
  uint64_t v611 = *(void *)(a1 + 1064);
  *(void *)(a1 + 1064) = v610;
  if (v611) {
    (*(void (**)(uint64_t))(*(void *)v611 + 8))(v611);
  }
  uint64_t v612 = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = 0;
  uint64_t v613 = *(void *)(a1 + 1072);
  *(void *)(a1 + 1072) = v612;
  if (v613) {
    (*(void (**)(uint64_t))(*(void *)v613 + 8))(v613);
  }
  uint64_t v614 = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  uint64_t v615 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = v614;
  if (v615) {
    (*(void (**)(uint64_t))(*(void *)v615 + 8))(v615);
  }
  uint64_t v616 = *(void *)(a2 + 3304);
  *(void *)(a2 + 3304) = 0;
  uint64_t v617 = *(void *)(a1 + 3304);
  *(void *)(a1 + 3304) = v616;
  if (v617) {
    (*(void (**)(uint64_t))(*(void *)v617 + 8))(v617);
  }
  uint64_t v618 = *(void *)(a2 + 3296);
  *(void *)(a2 + 3296) = 0;
  uint64_t v619 = *(void *)(a1 + 3296);
  *(void *)(a1 + 3296) = v618;
  if (v619) {
    (*(void (**)(uint64_t))(*(void *)v619 + 8))(v619);
  }
  uint64_t v620 = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  uint64_t v621 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v620;
  if (v621) {
    (*(void (**)(uint64_t))(*(void *)v621 + 8))(v621);
  }
  uint64_t v622 = *(void *)(a2 + 952);
  *(void *)(a2 + 952) = 0;
  uint64_t v623 = *(void *)(a1 + 952);
  *(void *)(a1 + 952) = v622;
  if (v623) {
    (*(void (**)(uint64_t))(*(void *)v623 + 8))(v623);
  }
  uint64_t v624 = *(void *)(a2 + 960);
  *(void *)(a2 + 960) = 0;
  uint64_t v625 = *(void *)(a1 + 960);
  *(void *)(a1 + 960) = v624;
  if (v625) {
    (*(void (**)(uint64_t))(*(void *)v625 + 8))(v625);
  }
  uint64_t v626 = *(void *)(a2 + 968);
  *(void *)(a2 + 968) = 0;
  uint64_t v627 = *(void *)(a1 + 968);
  *(void *)(a1 + 968) = v626;
  if (v627) {
    (*(void (**)(uint64_t))(*(void *)v627 + 8))(v627);
  }
  uint64_t v628 = *(void *)(a2 + 936);
  *(void *)(a2 + 936) = 0;
  uint64_t v629 = *(void *)(a1 + 936);
  *(void *)(a1 + 936) = v628;
  if (v629) {
    (*(void (**)(uint64_t))(*(void *)v629 + 8))(v629);
  }
  uint64_t v630 = *(void *)(a2 + 992);
  *(void *)(a2 + 992) = 0;
  uint64_t v631 = *(void *)(a1 + 992);
  *(void *)(a1 + 992) = v630;
  if (v631) {
    (*(void (**)(uint64_t))(*(void *)v631 + 8))(v631);
  }
  uint64_t v632 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  uint64_t v633 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v632;
  if (v633) {
    (*(void (**)(uint64_t))(*(void *)v633 + 8))(v633);
  }
  uint64_t v634 = *(void *)(a2 + 2680);
  *(void *)(a2 + 2680) = 0;
  uint64_t v635 = *(void *)(a1 + 2680);
  *(void *)(a1 + 2680) = v634;
  if (v635) {
    (*(void (**)(uint64_t))(*(void *)v635 + 8))(v635);
  }
  uint64_t v636 = *(void *)(a2 + 2672);
  *(void *)(a2 + 2672) = 0;
  uint64_t v637 = *(void *)(a1 + 2672);
  *(void *)(a1 + 2672) = v636;
  if (v637) {
    (*(void (**)(uint64_t))(*(void *)v637 + 8))(v637);
  }
  uint64_t v638 = *(void *)(a2 + 752);
  *(void *)(a2 + 752) = 0;
  uint64_t v639 = *(void *)(a1 + 752);
  *(void *)(a1 + 752) = v638;
  if (v639) {
    (*(void (**)(uint64_t))(*(void *)v639 + 8))(v639);
  }
  uint64_t v640 = *(void *)(a2 + 944);
  *(void *)(a2 + 944) = 0;
  uint64_t v641 = *(void *)(a1 + 944);
  *(void *)(a1 + 944) = v640;
  if (v641) {
    (*(void (**)(uint64_t))(*(void *)v641 + 8))(v641);
  }
  uint64_t v642 = *(void *)(a2 + 3352);
  *(void *)(a2 + 3352) = 0;
  uint64_t v643 = *(void *)(a1 + 3352);
  *(void *)(a1 + 3352) = v642;
  if (v643) {
    (*(void (**)(uint64_t))(*(void *)v643 + 8))(v643);
  }
  uint64_t v644 = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  uint64_t v645 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v644;
  if (v645) {
    (*(void (**)(uint64_t))(*(void *)v645 + 8))(v645);
  }
  uint64_t v646 = *(void *)(a2 + 976);
  *(void *)(a2 + 976) = 0;
  uint64_t v647 = *(void *)(a1 + 976);
  *(void *)(a1 + 976) = v646;
  if (v647) {
    (*(void (**)(uint64_t))(*(void *)v647 + 8))(v647);
  }
  uint64_t v648 = *(void *)(a2 + 1176);
  *(void *)(a2 + 1176) = 0;
  uint64_t v649 = *(void *)(a1 + 1176);
  *(void *)(a1 + 1176) = v648;
  if (v649) {
    (*(void (**)(uint64_t))(*(void *)v649 + 8))(v649);
  }
  uint64_t v650 = *(void *)(a2 + 3056);
  *(void *)(a2 + 3056) = 0;
  uint64_t v651 = *(void *)(a1 + 3056);
  *(void *)(a1 + 3056) = v650;
  if (v651) {
    (*(void (**)(uint64_t))(*(void *)v651 + 8))(v651);
  }
  uint64_t v652 = *(void *)(a2 + 1016);
  *(void *)(a2 + 1016) = 0;
  uint64_t v653 = *(void *)(a1 + 1016);
  *(void *)(a1 + 1016) = v652;
  if (v653) {
    (*(void (**)(uint64_t))(*(void *)v653 + 8))(v653);
  }
  uint64_t v654 = *(void *)(a2 + 264);
  *(void *)(a2 + 264) = 0;
  uint64_t v655 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v654;
  if (v655) {
    (*(void (**)(uint64_t))(*(void *)v655 + 8))(v655);
  }
  uint64_t v656 = *(void *)(a2 + 2864);
  *(void *)(a2 + 2864) = 0;
  uint64_t v657 = *(void *)(a1 + 2864);
  *(void *)(a1 + 2864) = v656;
  if (v657) {
    (*(void (**)(uint64_t))(*(void *)v657 + 8))(v657);
  }
  uint64_t v658 = *(void *)(a2 + 2888);
  *(void *)(a2 + 2888) = 0;
  uint64_t v659 = *(void *)(a1 + 2888);
  *(void *)(a1 + 2888) = v658;
  if (v659) {
    (*(void (**)(uint64_t))(*(void *)v659 + 8))(v659);
  }
  uint64_t v660 = *(void *)(a2 + 2872);
  *(void *)(a2 + 2872) = 0;
  uint64_t v661 = *(void *)(a1 + 2872);
  *(void *)(a1 + 2872) = v660;
  if (v661) {
    (*(void (**)(uint64_t))(*(void *)v661 + 8))(v661);
  }
  uint64_t v662 = *(void *)(a2 + 2880);
  *(void *)(a2 + 2880) = 0;
  uint64_t v663 = *(void *)(a1 + 2880);
  *(void *)(a1 + 2880) = v662;
  if (v663) {
    (*(void (**)(uint64_t))(*(void *)v663 + 8))(v663);
  }
  uint64_t v664 = *(void *)(a2 + 2928);
  *(void *)(a2 + 2928) = 0;
  uint64_t v665 = *(void *)(a1 + 2928);
  *(void *)(a1 + 2928) = v664;
  if (v665) {
    (*(void (**)(uint64_t))(*(void *)v665 + 8))(v665);
  }
  uint64_t v666 = *(void *)(a2 + 984);
  *(void *)(a2 + 984) = 0;
  uint64_t v667 = *(void *)(a1 + 984);
  *(void *)(a1 + 984) = v666;
  if (v667) {
    (*(void (**)(uint64_t))(*(void *)v667 + 8))(v667);
  }
  uint64_t v668 = *(void *)(a2 + 1456);
  *(void *)(a2 + 1456) = 0;
  uint64_t v669 = *(void *)(a1 + 1456);
  *(void *)(a1 + 1456) = v668;
  if (v669) {
    (*(void (**)(uint64_t))(*(void *)v669 + 8))(v669);
  }
  uint64_t v670 = *(void *)(a2 + 2560);
  *(void *)(a2 + 2560) = 0;
  uint64_t v671 = *(void *)(a1 + 2560);
  *(void *)(a1 + 2560) = v670;
  if (v671) {
    (*(void (**)(uint64_t))(*(void *)v671 + 8))(v671);
  }
  uint64_t v672 = *(void *)(a2 + 1992);
  *(void *)(a2 + 1992) = 0;
  uint64_t v673 = *(void *)(a1 + 1992);
  *(void *)(a1 + 1992) = v672;
  if (v673) {
    (*(void (**)(uint64_t))(*(void *)v673 + 8))(v673);
  }
  uint64_t v674 = *(void *)(a2 + 928);
  *(void *)(a2 + 928) = 0;
  uint64_t v675 = *(void *)(a1 + 928);
  *(void *)(a1 + 928) = v674;
  if (v675) {
    (*(void (**)(uint64_t))(*(void *)v675 + 8))(v675);
  }
  uint64_t v676 = *(void *)(a2 + 1824);
  *(void *)(a2 + 1824) = 0;
  uint64_t v677 = *(void *)(a1 + 1824);
  *(void *)(a1 + 1824) = v676;
  if (v677) {
    (*(void (**)(uint64_t))(*(void *)v677 + 8))(v677);
  }
  uint64_t v678 = *(void *)(a2 + 816);
  *(void *)(a2 + 816) = 0;
  uint64_t v679 = *(void *)(a1 + 816);
  *(void *)(a1 + 816) = v678;
  if (v679) {
    (*(void (**)(uint64_t))(*(void *)v679 + 8))(v679);
  }
  uint64_t v680 = *(void *)(a2 + 800);
  *(void *)(a2 + 800) = 0;
  uint64_t v681 = *(void *)(a1 + 800);
  *(void *)(a1 + 800) = v680;
  if (v681) {
    (*(void (**)(uint64_t))(*(void *)v681 + 8))(v681);
  }
  uint64_t v682 = *(void *)(a2 + 808);
  *(void *)(a2 + 808) = 0;
  uint64_t v683 = *(void *)(a1 + 808);
  *(void *)(a1 + 808) = v682;
  if (v683) {
    (*(void (**)(uint64_t))(*(void *)v683 + 8))(v683);
  }
  uint64_t v684 = *(void *)(a2 + 792);
  *(void *)(a2 + 792) = 0;
  uint64_t v685 = *(void *)(a1 + 792);
  *(void *)(a1 + 792) = v684;
  if (v685) {
    (*(void (**)(uint64_t))(*(void *)v685 + 8))(v685);
  }
  uint64_t v686 = *(void *)(a2 + 2144);
  *(void *)(a2 + 2144) = 0;
  uint64_t v687 = *(void *)(a1 + 2144);
  *(void *)(a1 + 2144) = v686;
  if (v687) {
    (*(void (**)(uint64_t))(*(void *)v687 + 8))(v687);
  }
  uint64_t v688 = *(void *)(a2 + 1528);
  *(void *)(a2 + 1528) = 0;
  uint64_t v689 = *(void *)(a1 + 1528);
  *(void *)(a1 + 1528) = v688;
  if (v689) {
    (*(void (**)(uint64_t))(*(void *)v689 + 8))(v689);
  }
  uint64_t v690 = *(void *)(a2 + 1536);
  *(void *)(a2 + 1536) = 0;
  uint64_t v691 = *(void *)(a1 + 1536);
  *(void *)(a1 + 1536) = v690;
  if (v691) {
    (*(void (**)(uint64_t))(*(void *)v691 + 8))(v691);
  }
  uint64_t v692 = *(void *)(a2 + 1560);
  *(void *)(a2 + 1560) = 0;
  uint64_t v693 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = v692;
  if (v693) {
    (*(void (**)(uint64_t))(*(void *)v693 + 8))(v693);
  }
  uint64_t v694 = *(void *)(a2 + 1648);
  *(void *)(a2 + 1648) = 0;
  uint64_t v695 = *(void *)(a1 + 1648);
  *(void *)(a1 + 1648) = v694;
  if (v695) {
    (*(void (**)(uint64_t))(*(void *)v695 + 8))(v695);
  }
  uint64_t v696 = *(void *)(a2 + 1768);
  *(void *)(a2 + 1768) = 0;
  uint64_t v697 = *(void *)(a1 + 1768);
  *(void *)(a1 + 1768) = v696;
  if (v697) {
    (*(void (**)(uint64_t))(*(void *)v697 + 8))(v697);
  }
  uint64_t v698 = *(void *)(a2 + 1760);
  *(void *)(a2 + 1760) = 0;
  uint64_t v699 = *(void *)(a1 + 1760);
  *(void *)(a1 + 1760) = v698;
  if (v699) {
    (*(void (**)(uint64_t))(*(void *)v699 + 8))(v699);
  }
  uint64_t v700 = *(void *)(a2 + 1632);
  *(void *)(a2 + 1632) = 0;
  uint64_t v701 = *(void *)(a1 + 1632);
  *(void *)(a1 + 1632) = v700;
  if (v701) {
    (*(void (**)(uint64_t))(*(void *)v701 + 8))(v701);
  }
  uint64_t v702 = *(void *)(a2 + 1312);
  *(void *)(a2 + 1312) = 0;
  uint64_t v703 = *(void *)(a1 + 1312);
  *(void *)(a1 + 1312) = v702;
  if (v703) {
    (*(void (**)(uint64_t))(*(void *)v703 + 8))(v703);
  }
  uint64_t v704 = *(void *)(a2 + 1304);
  *(void *)(a2 + 1304) = 0;
  uint64_t v705 = *(void *)(a1 + 1304);
  *(void *)(a1 + 1304) = v704;
  if (v705) {
    (*(void (**)(uint64_t))(*(void *)v705 + 8))(v705);
  }
  uint64_t v706 = *(void *)(a2 + 1520);
  *(void *)(a2 + 1520) = 0;
  uint64_t v707 = *(void *)(a1 + 1520);
  *(void *)(a1 + 1520) = v706;
  if (v707) {
    (*(void (**)(uint64_t))(*(void *)v707 + 8))(v707);
  }
  uint64_t v708 = *(void *)(a2 + 1544);
  *(void *)(a2 + 1544) = 0;
  uint64_t v709 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = v708;
  if (v709) {
    (*(void (**)(uint64_t))(*(void *)v709 + 8))(v709);
  }
  uint64_t v710 = *(void *)(a2 + 1656);
  *(void *)(a2 + 1656) = 0;
  uint64_t v711 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = v710;
  if (v711) {
    (*(void (**)(uint64_t))(*(void *)v711 + 8))(v711);
  }
  uint64_t v712 = *(void *)(a2 + 1664);
  *(void *)(a2 + 1664) = 0;
  uint64_t v713 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = v712;
  if (v713) {
    (*(void (**)(uint64_t))(*(void *)v713 + 8))(v713);
  }
  uint64_t v714 = *(void *)(a2 + 1696);
  *(void *)(a2 + 1696) = 0;
  uint64_t v715 = *(void *)(a1 + 1696);
  *(void *)(a1 + 1696) = v714;
  if (v715) {
    (*(void (**)(uint64_t))(*(void *)v715 + 8))(v715);
  }
  uint64_t v716 = *(void *)(a2 + 1600);
  *(void *)(a2 + 1600) = 0;
  uint64_t v717 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = v716;
  if (v717) {
    (*(void (**)(uint64_t))(*(void *)v717 + 8))(v717);
  }
  uint64_t v718 = *(void *)(a2 + 1584);
  *(void *)(a2 + 1584) = 0;
  uint64_t v719 = *(void *)(a1 + 1584);
  *(void *)(a1 + 1584) = v718;
  if (v719) {
    (*(void (**)(uint64_t))(*(void *)v719 + 8))(v719);
  }
  uint64_t v720 = *(void *)(a2 + 1704);
  *(void *)(a2 + 1704) = 0;
  uint64_t v721 = *(void *)(a1 + 1704);
  *(void *)(a1 + 1704) = v720;
  if (v721) {
    (*(void (**)(uint64_t))(*(void *)v721 + 8))(v721);
  }
  uint64_t v722 = *(void *)(a2 + 1592);
  *(void *)(a2 + 1592) = 0;
  uint64_t v723 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = v722;
  if (v723) {
    (*(void (**)(uint64_t))(*(void *)v723 + 8))(v723);
  }
  uint64_t v724 = *(void *)(a2 + 1672);
  *(void *)(a2 + 1672) = 0;
  uint64_t v725 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = v724;
  if (v725) {
    (*(void (**)(uint64_t))(*(void *)v725 + 8))(v725);
  }
  uint64_t v726 = *(void *)(a2 + 768);
  *(void *)(a2 + 768) = 0;
  uint64_t v727 = *(void *)(a1 + 768);
  *(void *)(a1 + 768) = v726;
  if (v727) {
    (*(void (**)(uint64_t))(*(void *)v727 + 8))(v727);
  }
  uint64_t v728 = *(void *)(a2 + 3224);
  *(void *)(a2 + 3224) = 0;
  uint64_t v729 = *(void *)(a1 + 3224);
  *(void *)(a1 + 3224) = v728;
  if (v729) {
    (*(void (**)(uint64_t))(*(void *)v729 + 8))(v729);
  }
  uint64_t v730 = *(void *)(a2 + 1296);
  *(void *)(a2 + 1296) = 0;
  uint64_t v731 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1296) = v730;
  if (v731) {
    (*(void (**)(uint64_t))(*(void *)v731 + 8))(v731);
  }
  uint64_t v732 = *(void *)(a2 + 3232);
  *(void *)(a2 + 3232) = 0;
  uint64_t v733 = *(void *)(a1 + 3232);
  *(void *)(a1 + 3232) = v732;
  if (v733) {
    (*(void (**)(uint64_t))(*(void *)v733 + 8))(v733);
  }
  uint64_t v734 = *(void *)(a2 + 3240);
  *(void *)(a2 + 3240) = 0;
  uint64_t v735 = *(void *)(a1 + 3240);
  *(void *)(a1 + 3240) = v734;
  if (v735) {
    (*(void (**)(uint64_t))(*(void *)v735 + 8))(v735);
  }
  uint64_t v736 = *(void *)(a2 + 2728);
  *(void *)(a2 + 2728) = 0;
  uint64_t v737 = *(void *)(a1 + 2728);
  *(void *)(a1 + 2728) = v736;
  if (v737) {
    (*(void (**)(uint64_t))(*(void *)v737 + 8))(v737);
  }
  uint64_t v738 = *(void *)(a2 + 2736);
  *(void *)(a2 + 2736) = 0;
  uint64_t v739 = *(void *)(a1 + 2736);
  *(void *)(a1 + 2736) = v738;
  if (v739) {
    (*(void (**)(uint64_t))(*(void *)v739 + 8))(v739);
  }
  uint64_t v740 = *(void *)(a2 + 2760);
  *(void *)(a2 + 2760) = 0;
  uint64_t v741 = *(void *)(a1 + 2760);
  *(void *)(a1 + 2760) = v740;
  if (v741) {
    (*(void (**)(uint64_t))(*(void *)v741 + 8))(v741);
  }
  uint64_t v742 = *(void *)(a2 + 2800);
  *(void *)(a2 + 2800) = 0;
  uint64_t v743 = *(void *)(a1 + 2800);
  *(void *)(a1 + 2800) = v742;
  if (v743) {
    (*(void (**)(uint64_t))(*(void *)v743 + 8))(v743);
  }
  uint64_t v744 = *(void *)(a2 + 2784);
  *(void *)(a2 + 2784) = 0;
  uint64_t v745 = *(void *)(a1 + 2784);
  *(void *)(a1 + 2784) = v744;
  if (v745) {
    (*(void (**)(uint64_t))(*(void *)v745 + 8))(v745);
  }
  uint64_t v746 = *(void *)(a2 + 1712);
  *(void *)(a2 + 1712) = 0;
  uint64_t v747 = *(void *)(a1 + 1712);
  *(void *)(a1 + 1712) = v746;
  if (v747) {
    (*(void (**)(uint64_t))(*(void *)v747 + 8))(v747);
  }
  uint64_t v748 = *(void *)(a2 + 1624);
  *(void *)(a2 + 1624) = 0;
  uint64_t v749 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = v748;
  if (v749) {
    (*(void (**)(uint64_t))(*(void *)v749 + 8))(v749);
  }
  uint64_t v750 = *(void *)(a2 + 2776);
  *(void *)(a2 + 2776) = 0;
  uint64_t v751 = *(void *)(a1 + 2776);
  *(void *)(a1 + 2776) = v750;
  if (v751) {
    (*(void (**)(uint64_t))(*(void *)v751 + 8))(v751);
  }
  uint64_t v752 = *(void *)(a2 + 1448);
  *(void *)(a2 + 1448) = 0;
  uint64_t v753 = *(void *)(a1 + 1448);
  *(void *)(a1 + 1448) = v752;
  if (v753) {
    (*(void (**)(uint64_t))(*(void *)v753 + 8))(v753);
  }
  uint64_t v754 = *(void *)(a2 + 1576);
  *(void *)(a2 + 1576) = 0;
  uint64_t v755 = *(void *)(a1 + 1576);
  *(void *)(a1 + 1576) = v754;
  if (v755) {
    (*(void (**)(uint64_t))(*(void *)v755 + 8))(v755);
  }
  uint64_t v756 = *(void *)(a2 + 1640);
  *(void *)(a2 + 1640) = 0;
  uint64_t v757 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = v756;
  if (v757) {
    (*(void (**)(uint64_t))(*(void *)v757 + 8))(v757);
  }
  uint64_t v758 = *(void *)(a2 + 1280);
  *(void *)(a2 + 1280) = 0;
  uint64_t v759 = *(void *)(a1 + 1280);
  *(void *)(a1 + 1280) = v758;
  if (v759) {
    (*(void (**)(uint64_t))(*(void *)v759 + 8))(v759);
  }
  uint64_t v760 = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  uint64_t v761 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = v760;
  if (v761) {
    (*(void (**)(uint64_t))(*(void *)v761 + 8))(v761);
  }
  uint64_t v762 = *(void *)(a2 + 2336);
  *(void *)(a2 + 2336) = 0;
  uint64_t v763 = *(void *)(a1 + 2336);
  *(void *)(a1 + 2336) = v762;
  if (v763) {
    (*(void (**)(uint64_t))(*(void *)v763 + 8))(v763);
  }
  uint64_t v764 = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  uint64_t v765 = *(void *)(a1 + 688);
  *(void *)(a1 + 688) = v764;
  if (v765) {
    (*(void (**)(uint64_t))(*(void *)v765 + 8))(v765);
  }
  uint64_t v766 = *(void *)(a2 + 856);
  *(void *)(a2 + 856) = 0;
  uint64_t v767 = *(void *)(a1 + 856);
  *(void *)(a1 + 856) = v766;
  if (v767) {
    (*(void (**)(uint64_t))(*(void *)v767 + 8))(v767);
  }
  uint64_t v768 = *(void *)(a2 + 3200);
  *(void *)(a2 + 3200) = 0;
  uint64_t v769 = *(void *)(a1 + 3200);
  *(void *)(a1 + 3200) = v768;
  if (v769) {
    (*(void (**)(uint64_t))(*(void *)v769 + 8))(v769);
  }
  uint64_t v770 = *(void *)(a2 + 2608);
  *(void *)(a2 + 2608) = 0;
  uint64_t v771 = *(void *)(a1 + 2608);
  *(void *)(a1 + 2608) = v770;
  if (v771) {
    (*(void (**)(uint64_t))(*(void *)v771 + 8))(v771);
  }
  uint64_t v772 = *(void *)(a2 + 1728);
  *(void *)(a2 + 1728) = 0;
  uint64_t v773 = *(void *)(a1 + 1728);
  *(void *)(a1 + 1728) = v772;
  if (v773) {
    (*(void (**)(uint64_t))(*(void *)v773 + 8))(v773);
  }
  uint64_t v774 = *(void *)(a2 + 3344);
  *(void *)(a2 + 3344) = 0;
  uint64_t v775 = *(void *)(a1 + 3344);
  *(void *)(a1 + 3344) = v774;
  if (v775) {
    (*(void (**)(uint64_t))(*(void *)v775 + 8))(v775);
  }
  uint64_t v776 = *(void *)(a2 + 1568);
  *(void *)(a2 + 1568) = 0;
  uint64_t v777 = *(void *)(a1 + 1568);
  *(void *)(a1 + 1568) = v776;
  if (v777) {
    (*(void (**)(uint64_t))(*(void *)v777 + 8))(v777);
  }
  uint64_t v778 = *(void *)(a2 + 2792);
  *(void *)(a2 + 2792) = 0;
  uint64_t v779 = *(void *)(a1 + 2792);
  *(void *)(a1 + 2792) = v778;
  if (v779) {
    (*(void (**)(uint64_t))(*(void *)v779 + 8))(v779);
  }
  uint64_t v780 = *(void *)(a2 + 3096);
  *(void *)(a2 + 3096) = 0;
  uint64_t v781 = *(void *)(a1 + 3096);
  *(void *)(a1 + 3096) = v780;
  if (v781) {
    (*(void (**)(uint64_t))(*(void *)v781 + 8))(v781);
  }
  uint64_t v782 = *(void *)(a2 + 2312);
  *(void *)(a2 + 2312) = 0;
  uint64_t v783 = *(void *)(a1 + 2312);
  *(void *)(a1 + 2312) = v782;
  if (v783) {
    (*(void (**)(uint64_t))(*(void *)v783 + 8))(v783);
  }
  uint64_t v784 = *(void *)(a2 + 1896);
  *(void *)(a2 + 1896) = 0;
  uint64_t v785 = *(void *)(a1 + 1896);
  *(void *)(a1 + 1896) = v784;
  if (v785) {
    (*(void (**)(uint64_t))(*(void *)v785 + 8))(v785);
  }
  uint64_t v786 = *(void *)(a2 + 2264);
  *(void *)(a2 + 2264) = 0;
  uint64_t v787 = *(void *)(a1 + 2264);
  *(void *)(a1 + 2264) = v786;
  if (v787) {
    (*(void (**)(uint64_t))(*(void *)v787 + 8))(v787);
  }
  uint64_t v788 = *(void *)(a2 + 2272);
  *(void *)(a2 + 2272) = 0;
  uint64_t v789 = *(void *)(a1 + 2272);
  *(void *)(a1 + 2272) = v788;
  if (v789) {
    (*(void (**)(uint64_t))(*(void *)v789 + 8))(v789);
  }
  uint64_t v790 = *(void *)(a2 + 2280);
  *(void *)(a2 + 2280) = 0;
  uint64_t v791 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = v790;
  if (v791) {
    (*(void (**)(uint64_t))(*(void *)v791 + 8))(v791);
  }
  uint64_t v792 = *(void *)(a2 + 2160);
  *(void *)(a2 + 2160) = 0;
  uint64_t v793 = *(void *)(a1 + 2160);
  *(void *)(a1 + 2160) = v792;
  if (v793) {
    (*(void (**)(uint64_t))(*(void *)v793 + 8))(v793);
  }
  uint64_t v794 = *(void *)(a2 + 2296);
  *(void *)(a2 + 2296) = 0;
  uint64_t v795 = *(void *)(a1 + 2296);
  *(void *)(a1 + 2296) = v794;
  if (v795) {
    (*(void (**)(uint64_t))(*(void *)v795 + 8))(v795);
  }
  uint64_t v796 = *(void *)(a2 + 1816);
  *(void *)(a2 + 1816) = 0;
  uint64_t v797 = *(void *)(a1 + 1816);
  *(void *)(a1 + 1816) = v796;
  if (v797) {
    (*(void (**)(uint64_t))(*(void *)v797 + 8))(v797);
  }
  uint64_t v798 = *(void *)(a2 + 3208);
  *(void *)(a2 + 3208) = 0;
  uint64_t v799 = *(void *)(a1 + 3208);
  *(void *)(a1 + 3208) = v798;
  if (v799) {
    (*(void (**)(uint64_t))(*(void *)v799 + 8))(v799);
  }
  uint64_t v800 = *(void *)(a2 + 2232);
  *(void *)(a2 + 2232) = 0;
  uint64_t v801 = *(void *)(a1 + 2232);
  *(void *)(a1 + 2232) = v800;
  if (v801) {
    (*(void (**)(uint64_t))(*(void *)v801 + 8))(v801);
  }
  uint64_t v802 = *(void *)(a2 + 2240);
  *(void *)(a2 + 2240) = 0;
  uint64_t v803 = *(void *)(a1 + 2240);
  *(void *)(a1 + 2240) = v802;
  if (v803) {
    (*(void (**)(uint64_t))(*(void *)v803 + 8))(v803);
  }
  uint64_t v804 = *(void *)(a2 + 3192);
  *(void *)(a2 + 3192) = 0;
  uint64_t v805 = *(void *)(a1 + 3192);
  *(void *)(a1 + 3192) = v804;
  if (v805) {
    (*(void (**)(uint64_t))(*(void *)v805 + 8))(v805);
  }
  uint64_t v806 = *(void *)(a2 + 3104);
  *(void *)(a2 + 3104) = 0;
  uint64_t v807 = *(void *)(a1 + 3104);
  *(void *)(a1 + 3104) = v806;
  if (v807) {
    (*(void (**)(uint64_t))(*(void *)v807 + 8))(v807);
  }
  uint64_t v808 = *(void *)(a2 + 824);
  *(void *)(a2 + 824) = 0;
  uint64_t v809 = *(void *)(a1 + 824);
  *(void *)(a1 + 824) = v808;
  if (v809) {
    (*(void (**)(uint64_t))(*(void *)v809 + 8))(v809);
  }
  uint64_t v810 = *(void *)(a2 + 1744);
  *(void *)(a2 + 1744) = 0;
  uint64_t v811 = *(void *)(a1 + 1744);
  *(void *)(a1 + 1744) = v810;
  if (v811) {
    (*(void (**)(uint64_t))(*(void *)v811 + 8))(v811);
  }
  uint64_t v812 = *(void *)(a2 + 2856);
  *(void *)(a2 + 2856) = 0;
  uint64_t v813 = *(void *)(a1 + 2856);
  *(void *)(a1 + 2856) = v812;
  if (v813) {
    (*(void (**)(uint64_t))(*(void *)v813 + 8))(v813);
  }
  uint64_t v814 = *(void *)(a2 + 2224);
  *(void *)(a2 + 2224) = 0;
  uint64_t v815 = *(void *)(a1 + 2224);
  *(void *)(a1 + 2224) = v814;
  if (v815) {
    (*(void (**)(uint64_t))(*(void *)v815 + 8))(v815);
  }
  uint64_t v816 = *(void *)(a2 + 2176);
  *(void *)(a2 + 2176) = 0;
  uint64_t v817 = *(void *)(a1 + 2176);
  *(void *)(a1 + 2176) = v816;
  if (v817) {
    (*(void (**)(uint64_t))(*(void *)v817 + 8))(v817);
  }
  uint64_t v818 = *(void *)(a2 + 2168);
  *(void *)(a2 + 2168) = 0;
  uint64_t v819 = *(void *)(a1 + 2168);
  *(void *)(a1 + 2168) = v818;
  if (v819) {
    (*(void (**)(uint64_t))(*(void *)v819 + 8))(v819);
  }
  uint64_t v820 = *(void *)(a2 + 2200);
  *(void *)(a2 + 2200) = 0;
  uint64_t v821 = *(void *)(a1 + 2200);
  *(void *)(a1 + 2200) = v820;
  if (v821) {
    (*(void (**)(uint64_t))(*(void *)v821 + 8))(v821);
  }
  uint64_t v822 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v823 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v822;
  if (v823) {
    (*(void (**)(uint64_t))(*(void *)v823 + 8))(v823);
  }
  uint64_t v824 = *(void *)(a2 + 2288);
  *(void *)(a2 + 2288) = 0;
  uint64_t v825 = *(void *)(a1 + 2288);
  *(void *)(a1 + 2288) = v824;
  if (v825) {
    (*(void (**)(uint64_t))(*(void *)v825 + 8))(v825);
  }
  uint64_t v826 = *(void *)(a2 + 2472);
  *(void *)(a2 + 2472) = 0;
  uint64_t v827 = *(void *)(a1 + 2472);
  *(void *)(a1 + 2472) = v826;
  if (v827) {
    (*(void (**)(uint64_t))(*(void *)v827 + 8))(v827);
  }
  uint64_t v828 = *(void *)(a2 + 2496);
  *(void *)(a2 + 2496) = 0;
  uint64_t v829 = *(void *)(a1 + 2496);
  *(void *)(a1 + 2496) = v828;
  if (v829) {
    (*(void (**)(uint64_t))(*(void *)v829 + 8))(v829);
  }
  uint64_t v830 = *(void *)(a2 + 1688);
  *(void *)(a2 + 1688) = 0;
  uint64_t v831 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = v830;
  if (v831) {
    (*(void (**)(uint64_t))(*(void *)v831 + 8))(v831);
  }
  uint64_t v832 = *(void *)(a2 + 2504);
  *(void *)(a2 + 2504) = 0;
  uint64_t v833 = *(void *)(a1 + 2504);
  *(void *)(a1 + 2504) = v832;
  if (v833) {
    (*(void (**)(uint64_t))(*(void *)v833 + 8))(v833);
  }
  uint64_t v834 = *(void *)(a2 + 2480);
  *(void *)(a2 + 2480) = 0;
  uint64_t v835 = *(void *)(a1 + 2480);
  *(void *)(a1 + 2480) = v834;
  if (v835) {
    (*(void (**)(uint64_t))(*(void *)v835 + 8))(v835);
  }
  uint64_t v836 = *(void *)(a2 + 2216);
  *(void *)(a2 + 2216) = 0;
  uint64_t v837 = *(void *)(a1 + 2216);
  *(void *)(a1 + 2216) = v836;
  if (v837) {
    (*(void (**)(uint64_t))(*(void *)v837 + 8))(v837);
  }
  uint64_t v838 = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  uint64_t v839 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = v838;
  if (v839) {
    (*(void (**)(uint64_t))(*(void *)v839 + 8))(v839);
  }
  uint64_t v840 = *(void *)(a2 + 2208);
  *(void *)(a2 + 2208) = 0;
  uint64_t v841 = *(void *)(a1 + 2208);
  *(void *)(a1 + 2208) = v840;
  if (v841) {
    (*(void (**)(uint64_t))(*(void *)v841 + 8))(v841);
  }
  uint64_t v842 = *(void *)(a2 + 2344);
  *(void *)(a2 + 2344) = 0;
  uint64_t v843 = *(void *)(a1 + 2344);
  *(void *)(a1 + 2344) = v842;
  if (v843) {
    (*(void (**)(uint64_t))(*(void *)v843 + 8))(v843);
  }
  uint64_t v844 = *(void *)(a2 + 1928);
  *(void *)(a2 + 1928) = 0;
  uint64_t v845 = *(void *)(a1 + 1928);
  *(void *)(a1 + 1928) = v844;
  if (v845) {
    (*(void (**)(uint64_t))(*(void *)v845 + 8))(v845);
  }
  uint64_t v846 = *(void *)(a2 + 1504);
  *(void *)(a2 + 1504) = 0;
  uint64_t v847 = *(void *)(a1 + 1504);
  *(void *)(a1 + 1504) = v846;
  if (v847) {
    (*(void (**)(uint64_t))(*(void *)v847 + 8))(v847);
  }
  uint64_t v848 = *(void *)(a2 + 1512);
  *(void *)(a2 + 1512) = 0;
  uint64_t v849 = *(void *)(a1 + 1512);
  *(void *)(a1 + 1512) = v848;
  if (v849) {
    (*(void (**)(uint64_t))(*(void *)v849 + 8))(v849);
  }
  uint64_t v850 = *(void *)(a2 + 2488);
  *(void *)(a2 + 2488) = 0;
  uint64_t v851 = *(void *)(a1 + 2488);
  *(void *)(a1 + 2488) = v850;
  if (v851) {
    (*(void (**)(uint64_t))(*(void *)v851 + 8))(v851);
  }
  uint64_t v852 = *(void *)(a2 + 2192);
  *(void *)(a2 + 2192) = 0;
  uint64_t v853 = *(void *)(a1 + 2192);
  *(void *)(a1 + 2192) = v852;
  if (v853) {
    (*(void (**)(uint64_t))(*(void *)v853 + 8))(v853);
  }
  uint64_t v854 = *(void *)(a2 + 2184);
  *(void *)(a2 + 2184) = 0;
  uint64_t v855 = *(void *)(a1 + 2184);
  *(void *)(a1 + 2184) = v854;
  if (v855) {
    (*(void (**)(uint64_t))(*(void *)v855 + 8))(v855);
  }
  uint64_t v856 = *(void *)(a2 + 1616);
  *(void *)(a2 + 1616) = 0;
  uint64_t v857 = *(void *)(a1 + 1616);
  *(void *)(a1 + 1616) = v856;
  if (v857) {
    (*(void (**)(uint64_t))(*(void *)v857 + 8))(v857);
  }
  uint64_t v858 = *(void *)(a2 + 1608);
  *(void *)(a2 + 1608) = 0;
  uint64_t v859 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1608) = v858;
  if (v859) {
    (*(void (**)(uint64_t))(*(void *)v859 + 8))(v859);
  }
  uint64_t v860 = *(void *)(a2 + 2512);
  *(void *)(a2 + 2512) = 0;
  uint64_t v861 = *(void *)(a1 + 2512);
  *(void *)(a1 + 2512) = v860;
  if (v861) {
    (*(void (**)(uint64_t))(*(void *)v861 + 8))(v861);
  }
  uint64_t v862 = *(void *)(a2 + 312);
  *(void *)(a2 + 312) = 0;
  uint64_t v863 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = v862;
  if (v863) {
    (*(void (**)(uint64_t))(*(void *)v863 + 8))(v863);
  }
  uint64_t v864 = *(void *)(a2 + 904);
  *(void *)(a2 + 904) = 0;
  uint64_t v865 = *(void *)(a1 + 904);
  *(void *)(a1 + 904) = v864;
  if (v865) {
    (*(void (**)(uint64_t))(*(void *)v865 + 8))(v865);
  }
  uint64_t v866 = *(void *)(a2 + 2360);
  *(void *)(a2 + 2360) = 0;
  uint64_t v867 = *(void *)(a1 + 2360);
  *(void *)(a1 + 2360) = v866;
  if (v867) {
    (*(void (**)(uint64_t))(*(void *)v867 + 8))(v867);
  }
  uint64_t v868 = *(void *)(a2 + 2384);
  *(void *)(a2 + 2384) = 0;
  uint64_t v869 = *(void *)(a1 + 2384);
  *(void *)(a1 + 2384) = v868;
  if (v869) {
    (*(void (**)(uint64_t))(*(void *)v869 + 8))(v869);
  }
  uint64_t v870 = *(void *)(a2 + 256);
  *(void *)(a2 + 256) = 0;
  uint64_t v871 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v870;
  if (v871) {
    (*(void (**)(uint64_t))(*(void *)v871 + 8))(v871);
  }
  uint64_t v872 = *(void *)(a2 + 248);
  *(void *)(a2 + 248) = 0;
  uint64_t v873 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v872;
  if (v873) {
    (*(void (**)(uint64_t))(*(void *)v873 + 8))(v873);
  }
  uint64_t v874 = *(void *)(a2 + 2816);
  *(void *)(a2 + 2816) = 0;
  uint64_t v875 = *(void *)(a1 + 2816);
  *(void *)(a1 + 2816) = v874;
  if (v875) {
    (*(void (**)(uint64_t))(*(void *)v875 + 8))(v875);
  }
  uint64_t v876 = *(void *)(a2 + 2808);
  *(void *)(a2 + 2808) = 0;
  uint64_t v877 = *(void *)(a1 + 2808);
  *(void *)(a1 + 2808) = v876;
  if (v877) {
    (*(void (**)(uint64_t))(*(void *)v877 + 8))(v877);
  }
  uint64_t v878 = *(void *)(a2 + 2624);
  *(void *)(a2 + 2624) = 0;
  uint64_t v879 = *(void *)(a1 + 2624);
  *(void *)(a1 + 2624) = v878;
  if (v879) {
    (*(void (**)(uint64_t))(*(void *)v879 + 8))(v879);
  }
  uint64_t v880 = *(void *)(a2 + 2632);
  *(void *)(a2 + 2632) = 0;
  uint64_t v881 = *(void *)(a1 + 2632);
  *(void *)(a1 + 2632) = v880;
  if (v881) {
    (*(void (**)(uint64_t))(*(void *)v881 + 8))(v881);
  }
  uint64_t v882 = *(void *)(a2 + 2648);
  *(void *)(a2 + 2648) = 0;
  uint64_t v883 = *(void *)(a1 + 2648);
  *(void *)(a1 + 2648) = v882;
  if (v883) {
    (*(void (**)(uint64_t))(*(void *)v883 + 8))(v883);
  }
  uint64_t v884 = *(void *)(a2 + 1288);
  *(void *)(a2 + 1288) = 0;
  uint64_t v885 = *(void *)(a1 + 1288);
  *(void *)(a1 + 1288) = v884;
  if (v885) {
    (*(void (**)(uint64_t))(*(void *)v885 + 8))(v885);
  }
  uint64_t v886 = *(void *)(a2 + 2640);
  *(void *)(a2 + 2640) = 0;
  uint64_t v887 = *(void *)(a1 + 2640);
  *(void *)(a1 + 2640) = v886;
  if (v887) {
    (*(void (**)(uint64_t))(*(void *)v887 + 8))(v887);
  }
  uint64_t v888 = *(void *)(a2 + 336);
  *(void *)(a2 + 336) = 0;
  uint64_t v889 = *(void *)(a1 + 336);
  *(void *)(a1 + 336) = v888;
  if (v889) {
    (*(void (**)(uint64_t))(*(void *)v889 + 8))(v889);
  }
  uint64_t v890 = *(void *)(a2 + 1480);
  *(void *)(a2 + 1480) = 0;
  uint64_t v891 = *(void *)(a1 + 1480);
  *(void *)(a1 + 1480) = v890;
  if (v891) {
    (*(void (**)(uint64_t))(*(void *)v891 + 8))(v891);
  }
  uint64_t v892 = *(void *)(a2 + 1488);
  *(void *)(a2 + 1488) = 0;
  uint64_t v893 = *(void *)(a1 + 1488);
  *(void *)(a1 + 1488) = v892;
  if (v893) {
    (*(void (**)(uint64_t))(*(void *)v893 + 8))(v893);
  }
  uint64_t v894 = *(void *)(a2 + 1496);
  *(void *)(a2 + 1496) = 0;
  uint64_t v895 = *(void *)(a1 + 1496);
  *(void *)(a1 + 1496) = v894;
  if (v895) {
    (*(void (**)(uint64_t))(*(void *)v895 + 8))(v895);
  }
  uint64_t v896 = *(void *)(a2 + 2824);
  *(void *)(a2 + 2824) = 0;
  uint64_t v897 = *(void *)(a1 + 2824);
  *(void *)(a1 + 2824) = v896;
  if (v897) {
    (*(void (**)(uint64_t))(*(void *)v897 + 8))(v897);
  }
  uint64_t v898 = *(void *)(a2 + 2832);
  *(void *)(a2 + 2832) = 0;
  uint64_t v899 = *(void *)(a1 + 2832);
  *(void *)(a1 + 2832) = v898;
  if (v899) {
    (*(void (**)(uint64_t))(*(void *)v899 + 8))(v899);
  }
  uint64_t v900 = *(void *)(a2 + 2944);
  *(void *)(a2 + 2944) = 0;
  uint64_t v901 = *(void *)(a1 + 2944);
  *(void *)(a1 + 2944) = v900;
  if (v901) {
    (*(void (**)(uint64_t))(*(void *)v901 + 8))(v901);
  }
  uint64_t v902 = *(void *)(a2 + 2952);
  *(void *)(a2 + 2952) = 0;
  uint64_t v903 = *(void *)(a1 + 2952);
  *(void *)(a1 + 2952) = v902;
  if (v903) {
    (*(void (**)(uint64_t))(*(void *)v903 + 8))(v903);
  }
  uint64_t v904 = *(void *)(a2 + 1432);
  *(void *)(a2 + 1432) = 0;
  uint64_t v905 = *(void *)(a1 + 1432);
  *(void *)(a1 + 1432) = v904;
  if (v905) {
    (*(void (**)(uint64_t))(*(void *)v905 + 8))(v905);
  }
  return a1;
}

CMMsl *CMMsl::Item::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Item::Item((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Item *)v5, v3);
    CMMsl::Item::~Item((CMMsl::Item *)v5);
  }
  return a1;
}

uint64_t CMMsl::Item::formatText(CMMsl::Item *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "aPSleep");
  }
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "aPWake");
  }
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, a2, "accel");
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "accel800");
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, a2, "accelBatch");
  }
  uint64_t v10 = *((void *)this + 6);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, a2, "accelGesture");
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, a2, "accelGps");
  }
  uint64_t v12 = *((void *)this + 8);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, a2, "accelOscarEmu");
  }
  uint64_t v13 = *((void *)this + 9);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, a2, "accelTNBFrame");
  }
  uint64_t v14 = *((void *)this + 10);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, a2, "accelerometerPace");
  }
  uint64_t v15 = *((void *)this + 11);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, a2, "accessoryAccel");
  }
  uint64_t v16 = *((void *)this + 12);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, a2, "accessoryAccelConfig");
  }
  uint64_t v17 = *((void *)this + 13);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, a2, "accessoryActivityAsleepConfidenceEpoch");
  }
  uint64_t v18 = *((void *)this + 14);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, a2, "accessoryActivityStateUpdate");
  }
  uint64_t v19 = *((void *)this + 15);
  if (v19) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v19 + 32))(v19, a2, "accessoryConfig");
  }
  uint64_t v20 = *((void *)this + 16);
  if (v20) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, a2, "accessoryDeviceMotion");
  }
  uint64_t v21 = *((void *)this + 17);
  if (v21) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v21 + 32))(v21, a2, "accessoryDeviceMotionConfig");
  }
  uint64_t v22 = *((void *)this + 18);
  if (v22) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v22 + 32))(v22, a2, "accessoryGyro");
  }
  uint64_t v23 = *((void *)this + 19);
  if (v23) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v23 + 32))(v23, a2, "accessoryGyroCachedBias");
  }
  uint64_t v24 = *((void *)this + 20);
  if (v24) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v24 + 32))(v24, a2, "accessoryGyroConfig");
  }
  uint64_t v25 = *((void *)this + 21);
  if (v25) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v25 + 32))(v25, a2, "accessoryGyroGYTT");
  }
  uint64_t v26 = *((void *)this + 22);
  if (v26) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v26 + 32))(v26, a2, "accessoryHeartRate");
  }
  uint64_t v27 = *((void *)this + 23);
  if (v27) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v27 + 32))(v27, a2, "accessoryInEarStatus");
  }
  uint64_t v28 = *((void *)this + 24);
  if (v28) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v28 + 32))(v28, a2, "accessoryMagnetometer");
  }
  uint64_t v29 = *((void *)this + 25);
  if (v29) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v29 + 32))(v29, a2, "accessoryMagnetometerConfig");
  }
  uint64_t v30 = *((void *)this + 26);
  if (v30) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v30 + 32))(v30, a2, "accessoryPPG");
  }
  uint64_t v31 = *((void *)this + 27);
  if (v31) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v31 + 32))(v31, a2, "accessoryProx");
  }
  uint64_t v32 = *((void *)this + 28);
  if (v32) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v32 + 32))(v32, a2, "accessoryProxSensorDrop");
  }
  uint64_t v33 = *((void *)this + 29);
  if (v33) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v33 + 32))(v33, a2, "accessoryProxTempComp");
  }
  uint64_t v34 = *((void *)this + 30);
  if (v34) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v34 + 32))(v34, a2, "accessoryProximityConfig");
  }
  uint64_t v35 = *((void *)this + 31);
  if (v35) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v35 + 32))(v35, a2, "accessorySleepStateConfidenceEpoch");
  }
  uint64_t v36 = *((void *)this + 32);
  if (v36) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v36 + 32))(v36, a2, "accessorySleepStateUpdate");
  }
  uint64_t v37 = *((void *)this + 33);
  if (v37) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v37 + 32))(v37, a2, "accessoryStepDetectorDebug");
  }
  uint64_t v38 = *((void *)this + 34);
  if (v38) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v38 + 32))(v38, a2, "accessoryWake");
  }
  uint64_t v39 = *((void *)this + 35);
  if (v39) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v39 + 32))(v39, a2, "accessoryWakeDebug");
  }
  uint64_t v40 = *((void *)this + 36);
  if (v40) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v40 + 32))(v40, a2, "airpodEvent");
  }
  uint64_t v41 = *((void *)this + 37);
  if (v41) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v41 + 32))(v41, a2, "alsData");
  }
  uint64_t v42 = *((void *)this + 38);
  if (v42) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v42 + 32))(v42, a2, "alsPhone");
  }
  uint64_t v43 = *((void *)this + 39);
  if (v43) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v43 + 32))(v43, a2, "altimeter");
  }
  uint64_t v44 = *((void *)this + 40);
  if (v44) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v44 + 32))(v44, a2, "altimeterKF");
  }
  uint64_t v45 = *((void *)this + 41);
  if (v45) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v45 + 32))(v45, a2, "anchorCorrection");
  }
  uint64_t v46 = *((void *)this + 42);
  if (v46) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v46 + 32))(v46, a2, "anchorMotionCorrespondence");
  }
  uint64_t v47 = *((void *)this + 43);
  if (v47) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v47 + 32))(v47, a2, "appleCV3DSLAMState");
  }
  uint64_t v48 = *((void *)this + 44);
  if (v48) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v48 + 32))(v48, a2, "arSessionState");
  }
  uint64_t v49 = *((void *)this + 45);
  if (v49) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v49 + 32))(v49, a2, "arkitWorldPose");
  }
  uint64_t v50 = *((void *)this + 46);
  if (v50) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v50 + 32))(v50, a2, "audioAccessoryDeviceMotion");
  }
  uint64_t v51 = *((void *)this + 47);
  if (v51) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v51 + 32))(v51, a2, "auxiliaryDeviceMotion");
  }
  uint64_t v52 = *((void *)this + 48);
  if (v52) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v52 + 32))(v52, a2, "averagedALSData");
  }
  uint64_t v53 = *((void *)this + 49);
  if (v53) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v53 + 32))(v53, a2, "bTConnection");
  }
  uint64_t v54 = *((void *)this + 50);
  if (v54) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v54 + 32))(v54, a2, "backlightState");
  }
  uint64_t v55 = *((void *)this + 51);
  if (v55) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v55 + 32))(v55, a2, "basebandCompassCoex");
  }
  uint64_t v56 = *((void *)this + 52);
  if (v56) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v56 + 32))(v56, a2, "basebandCompassCoexConstraints");
  }
  uint64_t v57 = *((void *)this + 53);
  if (v57) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v57 + 32))(v57, a2, "basebandSpeed");
  }
  uint64_t v58 = *((void *)this + 54);
  if (v58) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v58 + 32))(v58, a2, "baselineResetCheck");
  }
  uint64_t v59 = *((void *)this + 55);
  if (v59) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v59 + 32))(v59, a2, "batchedLocationFromOdometer");
  }
  uint64_t v60 = *((void *)this + 56);
  if (v60) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v60 + 32))(v60, a2, "batterySaverModeStatus");
  }
  uint64_t v61 = *((void *)this + 57);
  if (v61) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v61 + 32))(v61, a2, "batteryStatus");
  }
  uint64_t v62 = *((void *)this + 58);
  if (v62) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v62 + 32))(v62, a2, "bioMotionAnchorPose");
  }
  uint64_t v63 = *((void *)this + 59);
  if (v63) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v63 + 32))(v63, a2, "bioMotionClassification");
  }
  uint64_t v64 = *((void *)this + 60);
  if (v64) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v64 + 32))(v64, a2, "bioMotionLinkLengthFitParameters");
  }
  uint64_t v65 = *((void *)this + 61);
  if (v65) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v65 + 32))(v65, a2, "bioMotionOnlineLinkLengthUpdate");
  }
  uint64_t v66 = *((void *)this + 62);
  if (v66) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v66 + 32))(v66, a2, "bioMotionPose");
  }
  uint64_t v67 = *((void *)this + 63);
  if (v67) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v67 + 32))(v67, a2, "bioMotionPredictedPose");
  }
  uint64_t v68 = *((void *)this + 64);
  if (v68) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v68 + 32))(v68, a2, "bioMotionPropagatedAnchor");
  }
  uint64_t v69 = *((void *)this + 65);
  if (v69) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v69 + 32))(v69, a2, "bleedToZeroCorrection");
  }
  uint64_t v70 = *((void *)this + 66);
  if (v70) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v70 + 32))(v70, a2, "bodyMetrics");
  }
  uint64_t v71 = *((void *)this + 67);
  if (v71) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v71 + 32))(v71, a2, "braveHeartAccel");
  }
  uint64_t v72 = *((void *)this + 68);
  if (v72) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v72 + 32))(v72, a2, "braveHeartDeviceMotion");
  }
  uint64_t v73 = *((void *)this + 69);
  if (v73) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v73 + 32))(v73, a2, "braveHeartNatalieData");
  }
  uint64_t v74 = *((void *)this + 70);
  if (v74) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v74 + 32))(v74, a2, "braveHeartVO2MaxInput");
  }
  uint64_t v75 = *((void *)this + 71);
  if (v75) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v75 + 32))(v75, a2, "braveHeartWorkoutEvent");
  }
  uint64_t v76 = *((void *)this + 72);
  if (v76) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v76 + 32))(v76, a2, "bumpToWakeState");
  }
  uint64_t v77 = *((void *)this + 73);
  if (v77) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v77 + 32))(v77, a2, "cV3DPredictedPose");
  }
  uint64_t v78 = *((void *)this + 74);
  if (v78) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v78 + 32))(v78, a2, "calorimetryMETsConsumed");
  }
  uint64_t v79 = *((void *)this + 75);
  if (v79) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v79 + 32))(v79, a2, "calorimetryPauseEvent");
  }
  uint64_t v80 = *((void *)this + 76);
  if (v80) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v80 + 32))(v80, a2, "catherineHealthKitData");
  }
  if (*((unsigned char *)this + 3616)) {
    PB::TextFormatter::format(a2, "cftime", *((double *)this + 77));
  }
  uint64_t v81 = *((void *)this + 78);
  if (v81) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v81 + 32))(v81, a2, "clefCalibration");
  }
  uint64_t v82 = *((void *)this + 79);
  if (v82) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v82 + 32))(v82, a2, "coarseElevationChange");
  }
  uint64_t v83 = *((void *)this + 80);
  if (v83) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v83 + 32))(v83, a2, "compass");
  }
  uint64_t v84 = *((void *)this + 81);
  if (v84) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v84 + 32))(v84, a2, "compassAlignment");
  }
  uint64_t v85 = *((void *)this + 82);
  if (v85) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v85 + 32))(v85, a2, "compassCalibration");
  }
  uint64_t v86 = *((void *)this + 83);
  if (v86) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v86 + 32))(v86, a2, "compassCalibrationAttempt");
  }
  uint64_t v87 = *((void *)this + 84);
  if (v87) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v87 + 32))(v87, a2, "compassConstraints");
  }
  uint64_t v88 = *((void *)this + 85);
  if (v88) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v88 + 32))(v88, a2, "compassCorrection");
  }
  uint64_t v89 = *((void *)this + 86);
  if (v89) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v89 + 32))(v89, a2, "complexHandMotion");
  }
  uint64_t v90 = *((void *)this + 87);
  if (v90) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v90 + 32))(v90, a2, "constrainedIntegratorModelPredictedPose");
  }
  uint64_t v91 = *((void *)this + 88);
  if (v91) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v91 + 32))(v91, a2, "constrainedIntegratorPose");
  }
  uint64_t v92 = *((void *)this + 89);
  if (v92) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v92 + 32))(v92, a2, "coprocessorReplyGaitMetrics");
  }
  uint64_t v93 = *((void *)this + 90);
  if (v93) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v93 + 32))(v93, a2, "courseConstraints");
  }
  uint64_t v94 = *((void *)this + 91);
  if (v94) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v94 + 32))(v94, a2, "courseCorrection");
  }
  uint64_t v95 = *((void *)this + 92);
  if (v95) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v95 + 32))(v95, a2, "cvWatchCalories");
  }
  uint64_t v96 = *((void *)this + 93);
  if (v96) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v96 + 32))(v96, a2, "deviceMotion");
  }
  uint64_t v97 = *((void *)this + 94);
  if (v97) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v97 + 32))(v97, a2, "deviceMotionAlwaysOn");
  }
  uint64_t v98 = *((void *)this + 95);
  if (v98) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v98 + 32))(v98, a2, "deviceMotionCovariance");
  }
  uint64_t v99 = *((void *)this + 96);
  if (v99) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v99 + 32))(v99, a2, "directionOfTravelMetrics");
  }
  uint64_t v100 = *((void *)this + 97);
  if (v100) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v100 + 32))(v100, a2, "displacingState");
  }
  uint64_t v101 = *((void *)this + 98);
  if (v101) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v101 + 32))(v101, a2, "displayStatus");
  }
  uint64_t v102 = *((void *)this + 99);
  if (v102) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v102 + 32))(v102, a2, "dopplerDebugRecord");
  }
  uint64_t v103 = *((void *)this + 100);
  if (v103) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v103 + 32))(v103, a2, "dopplerProximityEvent");
  }
  uint64_t v104 = *((void *)this + 101);
  if (v104) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v104 + 32))(v104, a2, "dopplerRawDataInput");
  }
  uint64_t v105 = *((void *)this + 102);
  if (v105) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v105 + 32))(v105, a2, "dopplerSample");
  }
  uint64_t v106 = *((void *)this + 103);
  if (v106) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v106 + 32))(v106, a2, "dotEstimatorHandSwing");
  }
  uint64_t v107 = *((void *)this + 104);
  if (v107) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v107 + 32))(v107, a2, "dotEstimatorWithTNB");
  }
  uint64_t v108 = *((void *)this + 105);
  if (v108) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v108 + 32))(v108, a2, "doubleTap");
  }
  uint64_t v109 = *((void *)this + 106);
  if (v109) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v109 + 32))(v109, a2, "elevationChange");
  }
  uint64_t v110 = *((void *)this + 107);
  if (v110) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v110 + 32))(v110, a2, "elevationGradeEstimator");
  }
  uint64_t v111 = *((void *)this + 108);
  if (v111) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v111 + 32))(v111, a2, "elevationThreshold");
  }
  uint64_t v112 = *((void *)this + 109);
  if (v112) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v112 + 32))(v112, a2, "emergencyState");
  }
  uint64_t v113 = *((void *)this + 110);
  if (v113) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v113 + 32))(v113, a2, "enhancedDeviceMotion");
  }
  uint64_t v114 = *((void *)this + 111);
  if (v114) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v114 + 32))(v114, a2, "faceBlendShapeCoefficientsSample");
  }
  uint64_t v115 = *((void *)this + 112);
  if (v115) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v115 + 32))(v115, a2, "faceCovered");
  }
  uint64_t v116 = *((void *)this + 113);
  if (v116) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v116 + 32))(v116, a2, "faceDownDetection");
  }
  uint64_t v117 = *((void *)this + 114);
  if (v117) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v117 + 32))(v117, a2, "facePose");
  }
  uint64_t v118 = *((void *)this + 115);
  if (v118) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v118 + 32))(v118, a2, "facePoseSynchronized");
  }
  uint64_t v119 = *((void *)this + 116);
  if (v119) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v119 + 32))(v119, a2, "fallDetectionActivityClassifierReplay");
  }
  uint64_t v120 = *((void *)this + 117);
  if (v120) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v120 + 32))(v120, a2, "fallDetectionDetector");
  }
  uint64_t v121 = *((void *)this + 118);
  if (v121) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v121 + 32))(v121, a2, "fallDetectionGyroControllerReplay");
  }
  uint64_t v122 = *((void *)this + 119);
  if (v122) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v122 + 32))(v122, a2, "fallDetectionReferee");
  }
  uint64_t v123 = *((void *)this + 120);
  if (v123) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v123 + 32))(v123, a2, "fallDetectionReplay");
  }
  uint64_t v124 = *((void *)this + 121);
  if (v124) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v124 + 32))(v124, a2, "fallDetectionStateMachine");
  }
  uint64_t v125 = *((void *)this + 122);
  if (v125) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v125 + 32))(v125, a2, "fallDetectionWristStateReplay");
  }
  uint64_t v126 = *((void *)this + 123);
  if (v126) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v126 + 32))(v126, a2, "fallDistanceReplay");
  }
  uint64_t v127 = *((void *)this + 124);
  if (v127) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v127 + 32))(v127, a2, "fallFalsePositiveSuppressionFeatures");
  }
  uint64_t v128 = *((void *)this + 125);
  if (v128) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v128 + 32))(v128, a2, "fallSnippet");
  }
  uint64_t v129 = *((void *)this + 126);
  if (v129) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v129 + 32))(v129, a2, "fallStats");
  }
  uint64_t v130 = *((void *)this + 127);
  if (v130) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v130 + 32))(v130, a2, "firstStepFeatures");
  }
  uint64_t v131 = *((void *)this + 128);
  if (v131) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v131 + 32))(v131, a2, "fitnessMachineData");
  }
  uint64_t v132 = *((void *)this + 129);
  if (v132) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v132 + 32))(v132, a2, "fitnessMachineSample");
  }
  uint64_t v133 = *((void *)this + 130);
  if (v133) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v133 + 32))(v133, a2, "focusModes");
  }
  uint64_t v134 = *((void *)this + 131);
  if (v134) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v134 + 32))(v134, a2, "frequencyResponse");
  }
  uint64_t v135 = *((void *)this + 132);
  if (v135) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v135 + 32))(v135, a2, "fusedBioMotionClassification");
  }
  uint64_t v136 = *((void *)this + 133);
  if (v136) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v136 + 32))(v136, a2, "gaitCycleSegment");
  }
  uint64_t v137 = *((void *)this + 134);
  if (v137) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v137 + 32))(v137, a2, "gaitCycleSegmentationState");
  }
  uint64_t v138 = *((void *)this + 135);
  if (v138) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v138 + 32))(v138, a2, "gaitEventsHKResult");
  }
  uint64_t v139 = *((void *)this + 136);
  if (v139) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v139 + 32))(v139, a2, "gaitEventsModelOutput");
  }
  uint64_t v140 = *((void *)this + 137);
  if (v140) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v140 + 32))(v140, a2, "gaitEventsStrideAggregation");
  }
  uint64_t v141 = *((void *)this + 138);
  if (v141) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v141 + 32))(v141, a2, "geomagneticData");
  }
  uint64_t v142 = *((void *)this + 139);
  if (v142) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v142 + 32))(v142, a2, "gnssAvailabilityPredictorData");
  }
  uint64_t v143 = *((void *)this + 140);
  if (v143) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v143 + 32))(v143, a2, "gnssLeechLocationData");
  }
  uint64_t v144 = *((void *)this + 141);
  if (v144) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v144 + 32))(v144, a2, "gravityConstraints");
  }
  uint64_t v145 = *((void *)this + 142);
  if (v145) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v145 + 32))(v145, a2, "gravityCorrection");
  }
  uint64_t v146 = *((void *)this + 143);
  if (v146) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v146 + 32))(v146, a2, "gyro");
  }
  uint64_t v147 = *((void *)this + 144);
  if (v147) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v147 + 32))(v147, a2, "gyroBiasAndVariance");
  }
  uint64_t v148 = *((void *)this + 145);
  if (v148) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v148 + 32))(v148, a2, "gyroBiasConstraints");
  }
  uint64_t v149 = *((void *)this + 146);
  if (v149) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v149 + 32))(v149, a2, "gyroBiasCorrection");
  }
  uint64_t v150 = *((void *)this + 147);
  if (v150) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v150 + 32))(v150, a2, "gyroBiasEstimateError");
  }
  uint64_t v151 = *((void *)this + 148);
  if (v151) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v151 + 32))(v151, a2, "gyroBiasFit");
  }
  uint64_t v152 = *((void *)this + 149);
  if (v152) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v152 + 32))(v152, a2, "gyroCalibrationDataFactory");
  }
  uint64_t v153 = *((void *)this + 150);
  if (v153) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v153 + 32))(v153, a2, "gyroCalibrationDataNonlinearNonFactory");
  }
  uint64_t v154 = *((void *)this + 151);
  if (v154) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v154 + 32))(v154, a2, "gyroCalibrationSample");
  }
  uint64_t v155 = *((void *)this + 152);
  if (v155) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v155 + 32))(v155, a2, "gyroCalibrationSampleNonlinear");
  }
  uint64_t v156 = *((void *)this + 153);
  if (v156) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v156 + 32))(v156, a2, "gyroCompass");
  }
  uint64_t v157 = *((void *)this + 154);
  if (v157) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v157 + 32))(v157, a2, "gyroDt");
  }
  uint64_t v158 = *((void *)this + 155);
  if (v158) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v158 + 32))(v158, a2, "gyroFactoryCalibrationData");
  }
  uint64_t v159 = *((void *)this + 156);
  if (v159) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v159 + 32))(v159, a2, "gyroGps");
  }
  uint64_t v160 = *((void *)this + 157);
  if (v160) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v160 + 32))(v160, a2, "gyroOscarEmu");
  }
  uint64_t v161 = *((void *)this + 158);
  if (v161) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v161 + 32))(v161, a2, "gyroTemperature");
  }
  uint64_t v162 = *((void *)this + 159);
  if (v162) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v162 + 32))(v162, a2, "hapticModuleState");
  }
  uint64_t v163 = *((void *)this + 160);
  if (v163) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v163 + 32))(v163, a2, "harmonicMetrics");
  }
  uint64_t v164 = *((void *)this + 161);
  if (v164) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v164 + 32))(v164, a2, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  }
  uint64_t v165 = *((void *)this + 162);
  if (v165) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v165 + 32))(v165, a2, "headToHeadsetTransformationEstimate");
  }
  uint64_t v166 = *((void *)this + 163);
  if (v166) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v166 + 32))(v166, a2, "headTrackingBehaviorUpdate");
  }
  uint64_t v167 = *((void *)this + 164);
  if (v167) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v167 + 32))(v167, a2, "headTrackingClientModeUpdate");
  }
  uint64_t v168 = *((void *)this + 165);
  if (v168) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v168 + 32))(v168, a2, "heartRateReference");
  }
  uint64_t v169 = *((void *)this + 166);
  if (v169) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v169 + 32))(v169, a2, "hgAccel");
  }
  uint64_t v170 = *((void *)this + 167);
  if (v170) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v170 + 32))(v170, a2, "hidShower");
  }
  uint64_t v171 = *((void *)this + 168);
  if (v171) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v171 + 32))(v171, a2, "inEarAdditionalState");
  }
  uint64_t v172 = *((void *)this + 169);
  if (v172) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v172 + 32))(v172, a2, "inEarBaseline");
  }
  uint64_t v173 = *((void *)this + 170);
  if (v173) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v173 + 32))(v173, a2, "inEarBaselining");
  }
  uint64_t v174 = *((void *)this + 171);
  if (v174) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v174 + 32))(v174, a2, "inEarConstraints");
  }
  uint64_t v175 = *((void *)this + 172);
  if (v175) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v175 + 32))(v175, a2, "inEarOpenLid");
  }
  uint64_t v176 = *((void *)this + 173);
  if (v176) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v176 + 32))(v176, a2, "inEarOptical");
  }
  uint64_t v177 = *((void *)this + 174);
  if (v177) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v177 + 32))(v177, a2, "inEarSession");
  }
  uint64_t v178 = *((void *)this + 175);
  if (v178) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v178 + 32))(v178, a2, "inEarTransition");
  }
  uint64_t v179 = *((void *)this + 176);
  if (v179) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v179 + 32))(v179, a2, "inEarTransitionEntry");
  }
  uint64_t v180 = *((void *)this + 177);
  if (v180) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v180 + 32))(v180, a2, "inertialOdometry");
  }
  uint64_t v181 = *((void *)this + 178);
  if (v181) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v181 + 32))(v181, a2, "initialHistoricalMeanSeaLevelPressure");
  }
  uint64_t v182 = *((void *)this + 179);
  if (v182) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v182 + 32))(v182, a2, "interpolatedAccessoryAccel");
  }
  uint64_t v183 = *((void *)this + 180);
  if (v183) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v183 + 32))(v183, a2, "intersiloNSCodingData");
  }
  uint64_t v184 = *((void *)this + 181);
  if (v184) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v184 + 32))(v184, a2, "ispPacket");
  }
  uint64_t v185 = *((void *)this + 182);
  if (v185) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v185 + 32))(v185, a2, "jitterBufferLevel");
  }
  uint64_t v186 = *((void *)this + 183);
  if (v186) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v186 + 32))(v186, a2, "jointLinkModelPose");
  }
  uint64_t v187 = *((void *)this + 184);
  if (v187) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v187 + 32))(v187, a2, "jointLinkModelPredictedPose");
  }
  uint64_t v188 = *((void *)this + 185);
  if (v188) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v188 + 32))(v188, a2, "kData1");
  }
  uint64_t v189 = *((void *)this + 186);
  if (v189) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v189 + 32))(v189, a2, "kData2");
  }
  uint64_t v190 = *((void *)this + 187);
  if (v190) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v190 + 32))(v190, a2, "kData3");
  }
  uint64_t v191 = *((void *)this + 188);
  if (v191) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v191 + 32))(v191, a2, "kappaActivityPhone");
  }
  uint64_t v192 = *((void *)this + 189);
  if (v192) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v192 + 32))(v192, a2, "kappaActivityWatch");
  }
  uint64_t v193 = *((void *)this + 190);
  if (v193) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v193 + 32))(v193, a2, "kappaAirbagResult");
  }
  uint64_t v194 = *((void *)this + 191);
  if (v194) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v194 + 32))(v194, a2, "kappaAudioResult");
  }
  uint64_t v195 = *((void *)this + 192);
  if (v195) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v195 + 32))(v195, a2, "kappaBaroResult");
  }
  uint64_t v196 = *((void *)this + 193);
  if (v196) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v196 + 32))(v196, a2, "kappaCrashResult");
  }
  uint64_t v197 = *((void *)this + 194);
  if (v197) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v197 + 32))(v197, a2, "kappaDirectionOfTravel");
  }
  uint64_t v198 = *((void *)this + 195);
  if (v198) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v198 + 32))(v198, a2, "kappaGpsResult");
  }
  uint64_t v199 = *((void *)this + 196);
  if (v199) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v199 + 32))(v199, a2, "kappaGravityAutocorrelationResult");
  }
  uint64_t v200 = *((void *)this + 197);
  if (v200) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v200 + 32))(v200, a2, "kappaHighSpeedCrashResult");
  }
  uint64_t v201 = *((void *)this + 198);
  if (v201) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v201 + 32))(v201, a2, "kappaLackOfMotionResult");
  }
  uint64_t v202 = *((void *)this + 199);
  if (v202) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v202 + 32))(v202, a2, "kappaLocalAudioResult");
  }
  uint64_t v203 = *((void *)this + 200);
  if (v203) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v203 + 32))(v203, a2, "kappaMildImpactResult");
  }
  uint64_t v204 = *((void *)this + 201);
  if (v204) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v204 + 32))(v204, a2, "kappaPeakDetectorMapMagTimestamps");
  }
  uint64_t v205 = *((void *)this + 202);
  if (v205) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v205 + 32))(v205, a2, "kappaPeakDetectorMapResult");
  }
  uint64_t v206 = *((void *)this + 203);
  if (v206) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v206 + 32))(v206, a2, "kappaPulseDeltaV");
  }
  uint64_t v207 = *((void *)this + 204);
  if (v207) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v207 + 32))(v207, a2, "kappaPulseInertialAccel");
  }
  uint64_t v208 = *((void *)this + 205);
  if (v208) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v208 + 32))(v208, a2, "kappaPulseInertialHgAccel");
  }
  uint64_t v209 = *((void *)this + 206);
  if (v209) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v209 + 32))(v209, a2, "kappaPulseResult");
  }
  uint64_t v210 = *((void *)this + 207);
  if (v210) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v210 + 32))(v210, a2, "kappaQuiescenceResult");
  }
  uint64_t v211 = *((void *)this + 208);
  if (v211) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v211 + 32))(v211, a2, "kappaRecoveryResult");
  }
  uint64_t v212 = *((void *)this + 209);
  if (v212) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v212 + 32))(v212, a2, "kappaRemoteAudioResult");
  }
  uint64_t v213 = *((void *)this + 210);
  if (v213) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v213 + 32))(v213, a2, "kappaRoads");
  }
  uint64_t v214 = *((void *)this + 211);
  if (v214) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v214 + 32))(v214, a2, "kappaRoadsResult");
  }
  uint64_t v215 = *((void *)this + 212);
  if (v215) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v215 + 32))(v215, a2, "kappaRolloverCrashResult");
  }
  uint64_t v216 = *((void *)this + 213);
  if (v216) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v216 + 32))(v216, a2, "kappaSevereCrashResult");
  }
  uint64_t v217 = *((void *)this + 214);
  if (v217) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v217 + 32))(v217, a2, "kappaSpinResult");
  }
  uint64_t v218 = *((void *)this + 215);
  if (v218) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v218 + 32))(v218, a2, "kappaSteps");
  }
  uint64_t v219 = *((void *)this + 216);
  if (v219) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v219 + 32))(v219, a2, "kappaStepsResult");
  }
  uint64_t v220 = *((void *)this + 217);
  if (v220) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v220 + 32))(v220, a2, "kappaTrigger");
  }
  uint64_t v221 = *((void *)this + 218);
  if (v221) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v221 + 32))(v221, a2, "kappaTriggerClustersResult");
  }
  uint64_t v222 = *((void *)this + 219);
  if (v222) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v222 + 32))(v222, a2, "kappaTriggerDebug");
  }
  uint64_t v223 = *((void *)this + 220);
  if (v223) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v223 + 32))(v223, a2, "kappaZgDetected");
  }
  uint64_t v224 = *((void *)this + 221);
  if (v224) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v224 + 32))(v224, a2, "kappaZgResult");
  }
  uint64_t v225 = *((void *)this + 222);
  if (v225) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v225 + 32))(v225, a2, "keyboardAttached");
  }
  uint64_t v226 = *((void *)this + 223);
  if (v226) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v226 + 32))(v226, a2, "keyboardKeyPress");
  }
  uint64_t v227 = *((void *)this + 224);
  if (v227) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v227 + 32))(v227, a2, "keyboardMotionFeatures");
  }
  uint64_t v228 = *((void *)this + 225);
  if (v228) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v228 + 32))(v228, a2, "keyboardMotionState");
  }
  uint64_t v229 = *((void *)this + 226);
  if (v229) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v229 + 32))(v229, a2, "keyboardMotionTrackpad");
  }
  uint64_t v230 = *((void *)this + 227);
  if (v230) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v230 + 32))(v230, a2, "kmVelocityEstimatorState");
  }
  uint64_t v231 = *((void *)this + 228);
  if (v231) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v231 + 32))(v231, a2, "legacyALS5CHInput");
  }
  uint64_t v232 = *((void *)this + 229);
  if (v232) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v232 + 32))(v232, a2, "liftToWakeFeaturesNeo");
  }
  uint64_t v233 = *((void *)this + 230);
  if (v233) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v233 + 32))(v233, a2, "liftToWakeOnHeadStatus");
  }
  uint64_t v234 = *((void *)this + 231);
  if (v234) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v234 + 32))(v234, a2, "liftToWakeState");
  }
  uint64_t v235 = *((void *)this + 232);
  if (v235) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v235 + 32))(v235, a2, "liftToWakeStatusNeo");
  }
  uint64_t v236 = *((void *)this + 233);
  if (v236) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v236 + 32))(v236, a2, "locationOscarEmu");
  }
  uint64_t v237 = *((void *)this + 234);
  if (v237) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v237 + 32))(v237, a2, "lockScreenStatus");
  }
  uint64_t v238 = *((void *)this + 235);
  if (v238) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v238 + 32))(v238, a2, "lslHeadingEstimation");
  }
  uint64_t v239 = *((void *)this + 236);
  if (v239) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v239 + 32))(v239, a2, "mLBasedBioMotionClassification");
  }
  uint64_t v240 = *((void *)this + 237);
  if (v240) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v240 + 32))(v240, a2, "magicMountState");
  }
  uint64_t v241 = *((void *)this + 238);
  if (v241) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v241 + 32))(v241, a2, "magneticAccessoryType1");
  }
  uint64_t v242 = *((void *)this + 239);
  if (v242) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v242 + 32))(v242, a2, "magneticAccessoryType2");
  }
  uint64_t v243 = *((void *)this + 240);
  if (v243) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v243 + 32))(v243, a2, "magnetometer");
  }
  uint64_t v244 = *((void *)this + 241);
  if (v244) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v244 + 32))(v244, a2, "magnetometerCalibratorFilterParameters");
  }
  uint64_t v245 = *((void *)this + 242);
  if (v245) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v245 + 32))(v245, a2, "magnetometerReset");
  }
  uint64_t v246 = *((void *)this + 243);
  if (v246) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v246 + 32))(v246, a2, "mapsRouteHintData");
  }
  uint64_t v247 = *((void *)this + 244);
  if (v247) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v247 + 32))(v247, a2, "metsInfo");
  }
  uint64_t v248 = *((void *)this + 245);
  if (v248) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v248 + 32))(v248, a2, "mobilityBoutMetrics");
  }
  uint64_t v249 = *((void *)this + 246);
  if (v249) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v249 + 32))(v249, a2, "mobilitySmoothedGaitMetrics");
  }
  uint64_t v250 = *((void *)this + 247);
  if (v250) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v250 + 32))(v250, a2, "modelBasedBioMotionClassification");
  }
  uint64_t v251 = *((void *)this + 248);
  if (v251) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v251 + 32))(v251, a2, "motionActivity");
  }
  uint64_t v252 = *((void *)this + 249);
  if (v252) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v252 + 32))(v252, a2, "motionActivityReplay");
  }
  uint64_t v253 = *((void *)this + 250);
  if (v253) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v253 + 32))(v253, a2, "motionContextActivity");
  }
  uint64_t v254 = *((void *)this + 251);
  if (v254) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v254 + 32))(v254, a2, "motionGPSLocation");
  }
  uint64_t v255 = *((void *)this + 252);
  if (v255) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v255 + 32))(v255, a2, "motionHint");
  }
  uint64_t v256 = *((void *)this + 253);
  if (v256) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v256 + 32))(v256, a2, "motionLocation");
  }
  uint64_t v257 = *((void *)this + 254);
  if (v257) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v257 + 32))(v257, a2, "motionLoiAltitudeData");
  }
  uint64_t v258 = *((void *)this + 255);
  if (v258) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v258 + 32))(v258, a2, "motionLoiData");
  }
  uint64_t v259 = *((void *)this + 256);
  if (v259) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v259 + 32))(v259, a2, "motionStateUpdate");
  }
  uint64_t v260 = *((void *)this + 257);
  if (v260) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v260 + 32))(v260, a2, "motionWifiAssociation");
  }
  uint64_t v261 = *((void *)this + 258);
  if (v261) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v261 + 32))(v261, a2, "motionWifiLocation");
  }
  uint64_t v262 = *((void *)this + 259);
  if (v262) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v262 + 32))(v262, a2, "movementStats");
  }
  uint64_t v263 = *((void *)this + 260);
  if (v263) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v263 + 32))(v263, a2, "movementStatsGravityProjection");
  }
  uint64_t v264 = *((void *)this + 261);
  if (v264) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v264 + 32))(v264, a2, "movementStatsSignal");
  }
  uint64_t v265 = *((void *)this + 262);
  if (v265) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v265 + 32))(v265, a2, "natalieData");
  }
  uint64_t v266 = *((void *)this + 263);
  if (v266) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v266 + 32))(v266, a2, "nonlinearBiasFit");
  }
  uint64_t v267 = *((void *)this + 264);
  if (v267) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v267 + 32))(v267, a2, "odometer");
  }
  uint64_t v268 = *((void *)this + 265);
  if (v268) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v268 + 32))(v268, a2, "odometerWithAltitude");
  }
  uint64_t v269 = *((void *)this + 266);
  if (v269) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v269 + 32))(v269, a2, "odtPose");
  }
  uint64_t v270 = *((void *)this + 267);
  if (v270) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v270 + 32))(v270, a2, "onsetHeartRateData");
  }
  uint64_t v271 = *((void *)this + 268);
  if (v271) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v271 + 32))(v271, a2, "orientation");
  }
  uint64_t v272 = *((void *)this + 269);
  if (v272) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v272 + 32))(v272, a2, "pdrAlgType");
  }
  uint64_t v273 = *((void *)this + 270);
  if (v273) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v273 + 32))(v273, a2, "pdrDOTEstimatorState");
  }
  uint64_t v274 = *((void *)this + 271);
  if (v274) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v274 + 32))(v274, a2, "pdrDOTEstimatorStateArmSwing");
  }
  uint64_t v275 = *((void *)this + 272);
  if (v275) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v275 + 32))(v275, a2, "pdrDOTEstimatorStateBody");
  }
  uint64_t v276 = *((void *)this + 273);
  if (v276) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v276 + 32))(v276, a2, "pdrDOTEstimatorStateBodyDebug");
  }
  uint64_t v277 = *((void *)this + 274);
  if (v277) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v277 + 32))(v277, a2, "pdrDOTEstimatorStateDebug");
  }
  uint64_t v278 = *((void *)this + 275);
  if (v278) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v278 + 32))(v278, a2, "pdrDOTEstimatorStateHeading");
  }
  uint64_t v279 = *((void *)this + 276);
  if (v279) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v279 + 32))(v279, a2, "pdrDOTEstimatorUncertaintyModelOnBody");
  }
  uint64_t v280 = *((void *)this + 277);
  if (v280) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v280 + 32))(v280, a2, "pdrDOTMeasurementSelectorState");
  }
  uint64_t v281 = *((void *)this + 278);
  if (v281) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v281 + 32))(v281, a2, "pdrFeatures");
  }
  uint64_t v282 = *((void *)this + 279);
  if (v282) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v282 + 32))(v282, a2, "pdrFenceReference");
  }
  uint64_t v283 = *((void *)this + 280);
  if (v283) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v283 + 32))(v283, a2, "pdrFenceState");
  }
  uint64_t v284 = *((void *)this + 281);
  if (v284) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v284 + 32))(v284, a2, "pdrImpulse");
  }
  uint64_t v285 = *((void *)this + 282);
  if (v285) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v285 + 32))(v285, a2, "pdrMLModelOutput");
  }
  uint64_t v286 = *((void *)this + 283);
  if (v286) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v286 + 32))(v286, a2, "pdrPedestrianClassifierState");
  }
  uint64_t v287 = *((void *)this + 284);
  if (v287) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v287 + 32))(v287, a2, "pdrPlacementClassifierState");
  }
  uint64_t v288 = *((void *)this + 285);
  if (v288) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v288 + 32))(v288, a2, "pdrSpeedEstimatorState");
  }
  uint64_t v289 = *((void *)this + 286);
  if (v289) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v289 + 32))(v289, a2, "pdrSpeedEstimatorStateDebug");
  }
  uint64_t v290 = *((void *)this + 287);
  if (v290) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v290 + 32))(v290, a2, "pdrVelocityEstimatorState");
  }
  uint64_t v291 = *((void *)this + 288);
  if (v291) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v291 + 32))(v291, a2, "pearlAttitude");
  }
  uint64_t v292 = *((void *)this + 289);
  if (v292) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v292 + 32))(v292, a2, "pedOdomFusionExtendedModeSegment");
  }
  uint64_t v293 = *((void *)this + 290);
  if (v293) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v293 + 32))(v293, a2, "pedestrianCalorieModelDebugging");
  }
  uint64_t v294 = *((void *)this + 291);
  if (v294) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v294 + 32))(v294, a2, "pedestrianFenceExit");
  }
  uint64_t v295 = *((void *)this + 292);
  if (v295) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v295 + 32))(v295, a2, "pedometerPathStraightness");
  }
  uint64_t v296 = *((void *)this + 293);
  if (v296) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v296 + 32))(v296, a2, "peerState");
  }
  uint64_t v297 = *((void *)this + 294);
  if (v297) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v297 + 32))(v297, a2, "pencilDeviceMotion");
  }
  uint64_t v298 = *((void *)this + 295);
  if (v298) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v298 + 32))(v298, a2, "pencilFusionDMYawAlignmentUpdate");
  }
  uint64_t v299 = *((void *)this + 296);
  if (v299) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v299 + 32))(v299, a2, "pencilFusionReplayResult");
  }
  uint64_t v300 = *((void *)this + 297);
  if (v300) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v300 + 32))(v300, a2, "pencilFusionResult");
  }
  uint64_t v301 = *((void *)this + 298);
  if (v301) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v301 + 32))(v301, a2, "pencilFusionRingSensorTrustModelUpdate");
  }
  uint64_t v302 = *((void *)this + 299);
  if (v302) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v302 + 32))(v302, a2, "pencilTipForce");
  }
  uint64_t v303 = *((void *)this + 300);
  if (v303) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v303 + 32))(v303, a2, "pencilTouch");
  }
  uint64_t v304 = *((void *)this + 301);
  if (v304) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v304 + 32))(v304, a2, "physicalEffortInput");
  }
  uint64_t v305 = *((void *)this + 302);
  if (v305) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v305 + 32))(v305, a2, "physicalEffortSample");
  }
  uint64_t v306 = *((void *)this + 303);
  if (v306) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v306 + 32))(v306, a2, "pocketDetectionPacket");
  }
  uint64_t v307 = *((void *)this + 304);
  if (v307) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v307 + 32))(v307, a2, "pose");
  }
  uint64_t v308 = *((void *)this + 305);
  if (v308) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v308 + 32))(v308, a2, "poseState");
  }
  uint64_t v309 = *((void *)this + 306);
  if (v309) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v309 + 32))(v309, a2, "postureJoint");
  }
  uint64_t v310 = *((void *)this + 307);
  if (v310) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v310 + 32))(v310, a2, "postureSkeleton");
  }
  uint64_t v311 = *((void *)this + 308);
  if (v311) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v311 + 32))(v311, a2, "powerManagementUserActivity");
  }
  uint64_t v312 = *((void *)this + 309);
  if (v312) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v312 + 32))(v312, a2, "precisionFindingDOTEstimate");
  }
  uint64_t v313 = *((void *)this + 310);
  if (v313) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v313 + 32))(v313, a2, "precisionFindingRangeFilter");
  }
  uint64_t v314 = *((void *)this + 311);
  if (v314) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v314 + 32))(v314, a2, "precisionFindingSessionStartStop");
  }
  uint64_t v315 = *((void *)this + 312);
  if (v315) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v315 + 32))(v315, a2, "precisionFindingState");
  }
  uint64_t v316 = *((void *)this + 313);
  if (v316) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v316 + 32))(v316, a2, "precisionFindingVelocityEstimate");
  }
  uint64_t v317 = *((void *)this + 314);
  if (v317) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v317 + 32))(v317, a2, "precisionFindingVerticalState");
  }
  uint64_t v318 = *((void *)this + 315);
  if (v318) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v318 + 32))(v318, a2, "predictedRelativeDeviceMotion");
  }
  uint64_t v319 = *((void *)this + 316);
  if (v319) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v319 + 32))(v319, a2, "pressure");
  }
  uint64_t v320 = *((void *)this + 317);
  if (v320) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v320 + 32))(v320, a2, "pressureCalibration");
  }
  uint64_t v321 = *((void *)this + 318);
  if (v321) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v321 + 32))(v321, a2, "pressureCompensated");
  }
  uint64_t v322 = *((void *)this + 319);
  if (v322) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v322 + 32))(v322, a2, "pressureFiltered");
  }
  uint64_t v323 = *((void *)this + 320);
  if (v323) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v323 + 32))(v323, a2, "pressureFiltered1HzLowPass");
  }
  uint64_t v324 = *((void *)this + 321);
  if (v324) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v324 + 32))(v324, a2, "pressureFilteredNoTemperature");
  }
  uint64_t v325 = *((void *)this + 322);
  if (v325) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v325 + 32))(v325, a2, "pressureGps");
  }
  uint64_t v326 = *((void *)this + 323);
  if (v326) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v326 + 32))(v326, a2, "pressureOscarEmu");
  }
  uint64_t v327 = *((void *)this + 324);
  if (v327) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v327 + 32))(v327, a2, "prox");
  }
  uint64_t v328 = *((void *)this + 325);
  if (v328) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v328 + 32))(v328, a2, "proxBaselineEstimatorState");
  }
  uint64_t v329 = *((void *)this + 326);
  if (v329) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v329 + 32))(v329, a2, "proxCalibration");
  }
  uint64_t v330 = *((void *)this + 327);
  if (v330) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v330 + 32))(v330, a2, "proxPDP");
  }
  uint64_t v331 = *((void *)this + 328);
  if (v331) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v331 + 32))(v331, a2, "ptsConsumedGNSS");
  }
  uint64_t v332 = *((void *)this + 329);
  if (v332) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v332 + 32))(v332, a2, "ptsForwardPropagation");
  }
  uint64_t v333 = *((void *)this + 330);
  if (v333) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v333 + 32))(v333, a2, "ptsMapMatchedRoute");
  }
  uint64_t v334 = *((void *)this + 331);
  if (v334) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v334 + 32))(v334, a2, "ptsReconstructedRoute");
  }
  uint64_t v335 = *((void *)this + 332);
  if (v335) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v335 + 32))(v335, a2, "rawAudio");
  }
  uint64_t v336 = *((void *)this + 333);
  if (v336) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v336 + 32))(v336, a2, "relDMInSystemConfig");
  }
  uint64_t v337 = *((void *)this + 334);
  if (v337) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v337 + 32))(v337, a2, "relativeDeviceMotionComplexTransition");
  }
  uint64_t v338 = *((void *)this + 335);
  if (v338) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v338 + 32))(v338, a2, "relativeDeviceMotionCorrelatedMotion");
  }
  uint64_t v339 = *((void *)this + 336);
  if (v339) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v339 + 32))(v339, a2, "relativeDeviceMotionInternal");
  }
  uint64_t v340 = *((void *)this + 337);
  if (v340) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v340 + 32))(v340, a2, "relativeGravityConstraints");
  }
  uint64_t v341 = *((void *)this + 338);
  if (v341) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v341 + 32))(v341, a2, "relativeGravityCorrection");
  }
  uint64_t v342 = *((void *)this + 339);
  if (v342) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v342 + 32))(v342, a2, "rhythmicGnssOperatorStatus");
  }
  uint64_t v343 = *((void *)this + 340);
  if (v343) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v343 + 32))(v343, a2, "rotationRate");
  }
  uint64_t v344 = *((void *)this + 341);
  if (v344) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v344 + 32))(v344, a2, "runningArmSwingSignals");
  }
  uint64_t v345 = *((void *)this + 342);
  if (v345) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v345 + 32))(v345, a2, "runningCentripetalAccelSignals");
  }
  uint64_t v346 = *((void *)this + 343);
  if (v346) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v346 + 32))(v346, a2, "runningFormMetrics");
  }
  uint64_t v347 = *((void *)this + 344);
  if (v347) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v347 + 32))(v347, a2, "runningPower");
  }
  uint64_t v348 = *((void *)this + 345);
  if (v348) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v348 + 32))(v348, a2, "runningRotationAxis");
  }
  uint64_t v349 = *((void *)this + 346);
  if (v349) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v349 + 32))(v349, a2, "runningSpeedKFResult");
  }
  uint64_t v350 = *((void *)this + 347);
  if (v350) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v350 + 32))(v350, a2, "runningStrideLength");
  }
  uint64_t v351 = *((void *)this + 348);
  if (v351) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v351 + 32))(v351, a2, "runningVerticalOscillation");
  }
  uint64_t v352 = *((void *)this + 349);
  if (v352) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v352 + 32))(v352, a2, "runningVerticalOscillationGradientBoostedSignals");
  }
  uint64_t v353 = *((void *)this + 350);
  if (v353) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v353 + 32))(v353, a2, "runningVerticalOscillationSignals");
  }
  uint64_t v354 = *((void *)this + 351);
  if (v354) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v354 + 32))(v354, a2, "safetyCompanionStatus");
  }
  uint64_t v355 = *((void *)this + 352);
  if (v355) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v355 + 32))(v355, a2, "safetyHertzSample");
  }
  uint64_t v356 = *((void *)this + 353);
  if (v356) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v356 + 32))(v356, a2, "safetyRemoteSample");
  }
  uint64_t v357 = *((void *)this + 354);
  if (v357) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v357 + 32))(v357, a2, "safetyTrustedAudioResult");
  }
  uint64_t v358 = *((void *)this + 355);
  if (v358) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v358 + 32))(v358, a2, "sessionOverride");
  }
  uint64_t v359 = *((void *)this + 356);
  if (v359) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v359 + 32))(v359, a2, "signalEnvironment");
  }
  uint64_t v360 = *((void *)this + 357);
  if (v360) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v360 + 32))(v360, a2, "simActivityEvent");
  }
  uint64_t v361 = *((void *)this + 358);
  if (v361) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v361 + 32))(v361, a2, "sitStandDetectorFeatures");
  }
  uint64_t v362 = *((void *)this + 359);
  if (v362) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v362 + 32))(v362, a2, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  }
  uint64_t v363 = *((void *)this + 360);
  if (v363) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v363 + 32))(v363, a2, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  }
  uint64_t v364 = *((void *)this + 361);
  if (v364) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v364 + 32))(v364, a2, "sitStandDetectorTransitions");
  }
  uint64_t v365 = *((void *)this + 362);
  if (v365) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v365 + 32))(v365, a2, "skeleton2D");
  }
  uint64_t v366 = *((void *)this + 363);
  if (v366) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v366 + 32))(v366, a2, "skeleton3D");
  }
  uint64_t v367 = *((void *)this + 364);
  if (v367) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v367 + 32))(v367, a2, "skeleton3DLifted");
  }
  uint64_t v368 = *((void *)this + 365);
  if (v368) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v368 + 32))(v368, a2, "skeleton3DRetargeted");
  }
  uint64_t v369 = *((void *)this + 366);
  if (v369) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v369 + 32))(v369, a2, "spatialEvent");
  }
  uint64_t v370 = *((void *)this + 367);
  if (v370) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v370 + 32))(v370, a2, "spl");
  }
  uint64_t v371 = *((void *)this + 368);
  if (v371) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v371 + 32))(v371, a2, "spuPlaybackExampleDeviceMotion");
  }
  uint64_t v372 = *((void *)this + 369);
  if (v372) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v372 + 32))(v372, a2, "spuPlaybackExampleMotionStateUpdate");
  }
  uint64_t v373 = *((void *)this + 370);
  if (v373) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v373 + 32))(v373, a2, "steadinessEvent");
  }
  uint64_t v374 = *((void *)this + 371);
  if (v374) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v374 + 32))(v374, a2, "steadinessModelBalanceFeatures");
  }
  uint64_t v375 = *((void *)this + 372);
  if (v375) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v375 + 32))(v375, a2, "steadinessModelContinuousWalkingFeatures");
  }
  uint64_t v376 = *((void *)this + 373);
  if (v376) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v376 + 32))(v376, a2, "steadinessModelGaitBaselineFeatures");
  }
  uint64_t v377 = *((void *)this + 374);
  if (v377) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v377 + 32))(v377, a2, "steadinessModelHarmonicFeatures");
  }
  uint64_t v378 = *((void *)this + 375);
  if (v378) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v378 + 32))(v378, a2, "steadinessModelResult");
  }
  uint64_t v379 = *((void *)this + 376);
  if (v379) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v379 + 32))(v379, a2, "steadinessModelTemporalDispersionFeatures");
  }
  uint64_t v380 = *((void *)this + 377);
  if (v380) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v380 + 32))(v380, a2, "steadinessModelTemporalEntropyFeatures");
  }
  uint64_t v381 = *((void *)this + 378);
  if (v381) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v381 + 32))(v381, a2, "stepCadenceToStrideLengthBin");
  }
  uint64_t v382 = *((void *)this + 379);
  if (v382) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v382 + 32))(v382, a2, "stepCountEntry");
  }
  uint64_t v383 = *((void *)this + 380);
  if (v383) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v383 + 32))(v383, a2, "stepCountEntryAddition");
  }
  uint64_t v384 = *((void *)this + 381);
  if (v384) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v384 + 32))(v384, a2, "stepDistanceFusionResult");
  }
  uint64_t v385 = *((void *)this + 382);
  if (v385) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v385 + 32))(v385, a2, "stepLikelihoodFeatures");
  }
  uint64_t v386 = *((void *)this + 383);
  if (v386) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v386 + 32))(v386, a2, "streamingHeartRateData");
  }
  uint64_t v387 = *((void *)this + 384);
  if (v387) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v387 + 32))(v387, a2, "streamingHighFrequencyHeartRateData");
  }
  uint64_t v388 = *((void *)this + 385);
  if (v388) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v388 + 32))(v388, a2, "strideCalBin");
  }
  uint64_t v389 = *((void *)this + 386);
  if (v389) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v389 + 32))(v389, a2, "strideCalEntry");
  }
  uint64_t v390 = *((void *)this + 387);
  if (v390) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v390 + 32))(v390, a2, "subStats");
  }
  uint64_t v391 = *((void *)this + 388);
  if (v391) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v391 + 32))(v391, a2, "swingDoTCandidate");
  }
  uint64_t v392 = *((void *)this + 389);
  if (v392) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v392 + 32))(v392, a2, "tapAccept");
  }
  uint64_t v393 = *((void *)this + 390);
  if (v393) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v393 + 32))(v393, a2, "tapDetect");
  }
  uint64_t v394 = *((void *)this + 391);
  if (v394) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v394 + 32))(v394, a2, "tempestPoCAuxiliaryDeviceMotion");
  }
  uint64_t v395 = *((void *)this + 392);
  if (v395) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v395 + 32))(v395, a2, "tempestPoCListenerOrientation");
  }
  uint64_t v396 = *((void *)this + 393);
  if (v396) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v396 + 32))(v396, a2, "timestamp");
  }
  uint64_t v397 = *((void *)this + 394);
  if (v397) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v397 + 32))(v397, a2, "touchOscarEmu");
  }
  uint64_t v398 = *((void *)this + 395);
  if (v398) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v398 + 32))(v398, a2, "trackRunData");
  }
  uint64_t v399 = *((void *)this + 396);
  if (v399) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v399 + 32))(v399, a2, "ultraFastAccel");
  }
  uint64_t v400 = *((void *)this + 397);
  if (v400) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v400 + 32))(v400, a2, "userInteraction");
  }
  uint64_t v401 = *((void *)this + 398);
  if (v401) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v401 + 32))(v401, a2, "userStudyEvent");
  }
  uint64_t v402 = *((void *)this + 399);
  if (v402) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v402 + 32))(v402, a2, "uwbRange");
  }
  uint64_t v403 = *((void *)this + 400);
  if (v403) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v403 + 32))(v403, a2, "vO2MaxModelInput");
  }
  uint64_t v404 = *((void *)this + 401);
  if (v404) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v404 + 32))(v404, a2, "velocityEstimatorFusionState");
  }
  uint64_t v405 = *((void *)this + 402);
  if (v405) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v405 + 32))(v405, a2, "vibrationEvent");
  }
  uint64_t v406 = *((void *)this + 403);
  if (v406) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v406 + 32))(v406, a2, "viewObstructedMachineLearningDecision");
  }
  uint64_t v407 = *((void *)this + 404);
  if (v407) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v407 + 32))(v407, a2, "viewObstructedMachineLearningFeatures");
  }
  uint64_t v408 = *((void *)this + 405);
  if (v408) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v408 + 32))(v408, a2, "viewObstructedMachineLearningProbabilities");
  }
  uint64_t v409 = *((void *)this + 406);
  if (v409) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v409 + 32))(v409, a2, "viewObstructedState");
  }
  uint64_t v410 = *((void *)this + 407);
  if (v410) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v410 + 32))(v410, a2, "vioEstimation");
  }
  uint64_t v411 = *((void *)this + 408);
  if (v411) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v411 + 32))(v411, a2, "vioPose");
  }
  uint64_t v412 = *((void *)this + 409);
  if (v412) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v412 + 32))(v412, a2, "vioReplayPose");
  }
  uint64_t v413 = *((void *)this + 410);
  if (v413) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v413 + 32))(v413, a2, "visionCompassBias");
  }
  uint64_t v414 = *((void *)this + 411);
  if (v414) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v414 + 32))(v414, a2, "visualLocalization");
  }
  uint64_t v415 = *((void *)this + 412);
  if (v415) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v415 + 32))(v415, a2, "visualLocalizationAttitudeConstraints");
  }
  uint64_t v416 = *((void *)this + 413);
  if (v416) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v416 + 32))(v416, a2, "visualLocalizationAttitudeCorrection");
  }
  uint64_t v417 = *((void *)this + 414);
  if (v417) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v417 + 32))(v417, a2, "visualStateMeasurement");
  }
  uint64_t v418 = *((void *)this + 415);
  if (v418) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v418 + 32))(v418, a2, "vo2MaxInput");
  }
  uint64_t v419 = *((void *)this + 416);
  if (v419) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v419 + 32))(v419, a2, "vo2MaxOutput");
  }
  uint64_t v420 = *((void *)this + 417);
  if (v420) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v420 + 32))(v420, a2, "wakeGestureNotification");
  }
  uint64_t v421 = *((void *)this + 418);
  if (v421) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v421 + 32))(v421, a2, "wakeGestureSample");
  }
  uint64_t v422 = *((void *)this + 419);
  if (v422) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v422 + 32))(v422, a2, "walkingDetectionResult");
  }
  uint64_t v423 = *((void *)this + 420);
  if (v423) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v423 + 32))(v423, a2, "walkingSteadinessClassification");
  }
  uint64_t v424 = *((void *)this + 421);
  if (v424) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v424 + 32))(v424, a2, "watchActiveCalories");
  }
  uint64_t v425 = *((void *)this + 422);
  if (v425) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v425 + 32))(v425, a2, "watchBasalCalories");
  }
  uint64_t v426 = *((void *)this + 423);
  if (v426) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v426 + 32))(v426, a2, "watchEnclosureMaterial");
  }
  uint64_t v427 = *((void *)this + 424);
  if (v427) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v427 + 32))(v427, a2, "watchHeartRateData");
  }
  uint64_t v428 = *((void *)this + 425);
  if (v428) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v428 + 32))(v428, a2, "watchOnWristState");
  }
  uint64_t v429 = *((void *)this + 426);
  if (v429) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v429 + 32))(v429, a2, "watchOrientationSettings");
  }
  uint64_t v430 = *((void *)this + 427);
  if (v430) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v430 + 32))(v430, a2, "wifiScanResults");
  }
  uint64_t v431 = *((void *)this + 428);
  if (v431) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v431 + 32))(v431, a2, "workoutActivity");
  }
  uint64_t v432 = *((void *)this + 429);
  if (v432) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v432 + 32))(v432, a2, "workoutEvent");
  }
  uint64_t v433 = *((void *)this + 430);
  if (v433) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v433 + 32))(v433, a2, "workoutRecorderALSData");
  }
  uint64_t v434 = *((void *)this + 431);
  if (v434) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v434 + 32))(v434, a2, "workoutRecorderAccel");
  }
  uint64_t v435 = *((void *)this + 432);
  if (v435) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v435 + 32))(v435, a2, "workoutRecorderAccel800");
  }
  uint64_t v436 = *((void *)this + 433);
  if (v436) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v436 + 32))(v436, a2, "workoutRecorderAveragedALSData");
  }
  uint64_t v437 = *((void *)this + 434);
  if (v437) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v437 + 32))(v437, a2, "workoutRecorderBodyMetrics");
  }
  uint64_t v438 = *((void *)this + 435);
  if (v438) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v438 + 32))(v438, a2, "workoutRecorderCompassCalibration");
  }
  uint64_t v439 = *((void *)this + 436);
  if (v439) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v439 + 32))(v439, a2, "workoutRecorderElevation");
  }
  uint64_t v440 = *((void *)this + 437);
  if (v440) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v440 + 32))(v440, a2, "workoutRecorderFaceCovered");
  }
  uint64_t v441 = *((void *)this + 438);
  if (v441) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v441 + 32))(v441, a2, "workoutRecorderFitnessMachineData");
  }
  uint64_t v442 = *((void *)this + 439);
  if (v442) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v442 + 32))(v442, a2, "workoutRecorderHealthKitInfo");
  }
  uint64_t v443 = *((void *)this + 440);
  if (v443) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v443 + 32))(v443, a2, "workoutRecorderHeartRate");
  }
  uint64_t v444 = *((void *)this + 441);
  if (v444) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v444 + 32))(v444, a2, "workoutRecorderMagnetometer");
  }
  uint64_t v445 = *((void *)this + 442);
  if (v445) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v445 + 32))(v445, a2, "workoutRecorderOdometer");
  }
  uint64_t v446 = *((void *)this + 443);
  if (v446) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v446 + 32))(v446, a2, "workoutRecorderPressure");
  }
  uint64_t v447 = *((void *)this + 444);
  if (v447) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v447 + 32))(v447, a2, "workoutRecorderRotationRate");
  }
  uint64_t v448 = *((void *)this + 445);
  if (v448) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v448 + 32))(v448, a2, "workoutRecorderWatchOnWristStatus");
  }
  uint64_t v449 = *((void *)this + 446);
  if (v449) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v449 + 32))(v449, a2, "workoutRecorderWatchOrientationSettings");
  }
  uint64_t v450 = *((void *)this + 447);
  if (v450) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v450 + 32))(v450, a2, "workoutRecorderWifiScanResults");
  }
  uint64_t v451 = *((void *)this + 448);
  if (v451) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v451 + 32))(v451, a2, "workoutRecorderWorkoutEvent");
  }
  uint64_t v452 = *((void *)this + 449);
  if (v452) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v452 + 32))(v452, a2, "workoutRecorderWorkoutSessionPriors");
  }
  uint64_t v453 = *((void *)this + 450);
  if (v453) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v453 + 32))(v453, a2, "workoutSessionPriors");
  }
  uint64_t v454 = *((void *)this + 451);
  if (v454) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v454 + 32))(v454, a2, "zeroVelocityCorrection");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Item::readFrom(CMMsl::Item *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (1)
        {
          if (v3 == v2)
          {
            unint64_t v12 = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_24;
          }
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v9 + v2);
          *((void *)a2 + 1) = v19;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0) {
            break;
          }
          v16 += 7;
          unint64_t v2 = v19;
          BOOL v15 = v17++ > 8;
          if (v15)
          {
LABEL_19:
            unint64_t v12 = 0;
            goto LABEL_24;
          }
        }
        unint64_t v12 = *((unsigned char *)a2 + 24) ? 0 : v18;
      }
      else
      {
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          unint64_t v13 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v14 = *(unsigned char *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0) {
            break;
          }
          v10 += 7;
          unint64_t v2 = v13;
          BOOL v15 = v11++ > 8;
          if (v15) {
            goto LABEL_19;
          }
        }
      }
LABEL_24:
      int v21 = v12 & 7;
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (*((unsigned char *)a2 + 24) || v21 == 4) {
        break;
      }
      unint64_t v23 = v12 >> 3;
      if ((int)(v12 >> 3) <= 2047)
      {
        switch((int)v23)
        {
          case 1:
            *((unsigned char *)this + 3616) |= 1u;
            unint64_t v24 = *((void *)a2 + 1);
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *((void *)a2 + 2))
            {
              *((void *)this + 77) = *(void *)(*(void *)a2 + v24);
              *((void *)a2 + 1) += 8;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_491;
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            operator new();
          case 7:
            operator new();
          case 8:
            operator new();
          case 9:
            operator new();
          case 10:
            operator new();
          case 11:
            operator new();
          case 12:
          case 13:
          case 14:
          case 15:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 137:
          case 138:
          case 146:
          case 147:
          case 149:
          case 211:
          case 264:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
          case 282:
          case 283:
          case 284:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 313:
          case 314:
          case 315:
          case 316:
          case 317:
          case 318:
          case 319:
          case 320:
          case 321:
          case 322:
          case 323:
          case 324:
          case 325:
          case 326:
          case 327:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 334:
          case 335:
          case 336:
          case 337:
          case 338:
          case 339:
          case 340:
          case 341:
          case 342:
          case 343:
          case 344:
          case 345:
          case 346:
          case 347:
          case 348:
          case 349:
          case 350:
          case 351:
          case 352:
          case 353:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 366:
          case 367:
          case 368:
          case 369:
          case 370:
          case 371:
          case 372:
          case 373:
          case 374:
          case 375:
          case 376:
          case 377:
          case 378:
          case 379:
          case 380:
          case 381:
          case 382:
          case 383:
          case 384:
          case 385:
          case 386:
          case 387:
          case 388:
          case 389:
          case 390:
          case 391:
          case 392:
          case 393:
          case 394:
          case 395:
          case 396:
          case 397:
          case 398:
          case 399:
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
          case 405:
          case 406:
          case 407:
          case 408:
          case 409:
          case 410:
          case 411:
          case 412:
          case 413:
          case 414:
          case 415:
          case 416:
          case 417:
          case 418:
          case 419:
          case 420:
          case 421:
          case 422:
          case 423:
          case 424:
          case 425:
          case 426:
          case 427:
          case 428:
          case 429:
          case 430:
          case 431:
          case 432:
          case 433:
          case 434:
          case 435:
          case 436:
          case 437:
          case 438:
          case 439:
          case 440:
          case 441:
          case 442:
          case 443:
          case 444:
          case 445:
          case 446:
          case 447:
          case 448:
          case 449:
          case 450:
          case 451:
          case 452:
          case 453:
          case 454:
          case 455:
          case 456:
          case 457:
          case 458:
          case 459:
          case 460:
          case 461:
          case 462:
          case 463:
          case 464:
          case 465:
          case 466:
          case 467:
          case 468:
          case 469:
          case 470:
          case 471:
          case 472:
          case 473:
          case 474:
          case 475:
          case 476:
          case 477:
          case 478:
          case 479:
          case 480:
          case 481:
          case 482:
          case 483:
          case 484:
          case 485:
          case 486:
          case 487:
          case 488:
          case 489:
          case 490:
          case 491:
          case 492:
          case 493:
          case 494:
          case 495:
          case 496:
          case 497:
          case 498:
          case 499:
          case 500:
          case 501:
          case 502:
          case 503:
          case 504:
          case 505:
          case 506:
          case 507:
          case 508:
          case 509:
          case 510:
          case 511:
            goto LABEL_215;
          case 16:
            operator new();
          case 17:
            operator new();
          case 18:
            operator new();
          case 19:
            operator new();
          case 20:
            operator new();
          case 21:
            operator new();
          case 22:
            operator new();
          case 23:
            operator new();
          case 24:
            operator new();
          case 25:
            operator new();
          case 26:
            operator new();
          case 27:
            operator new();
          case 28:
            operator new();
          case 29:
            operator new();
          case 30:
            operator new();
          case 31:
            operator new();
          case 32:
            operator new();
          case 33:
            operator new();
          case 34:
            operator new();
          case 35:
            operator new();
          case 36:
            operator new();
          case 37:
            operator new();
          case 38:
            operator new();
          case 39:
            operator new();
          case 40:
            operator new();
          case 41:
            operator new();
          case 42:
            operator new();
          case 43:
            operator new();
          case 44:
            operator new();
          case 45:
            operator new();
          case 46:
            operator new();
          case 47:
            operator new();
          case 48:
            operator new();
          case 49:
            operator new();
          case 50:
            operator new();
          case 51:
            operator new();
          case 52:
            operator new();
          case 53:
            operator new();
          case 54:
            operator new();
          case 55:
            operator new();
          case 56:
            operator new();
          case 57:
            operator new();
          case 58:
            operator new();
          case 59:
            operator new();
          case 60:
            operator new();
          case 61:
            operator new();
          case 62:
            operator new();
          case 63:
            operator new();
          case 64:
            operator new();
          case 65:
            operator new();
          case 66:
            operator new();
          case 67:
            operator new();
          case 68:
            operator new();
          case 100:
            operator new();
          case 101:
            operator new();
          case 102:
            operator new();
          case 103:
            operator new();
          case 104:
            operator new();
          case 105:
            operator new();
          case 106:
            operator new();
          case 107:
            operator new();
          case 108:
            operator new();
          case 109:
            operator new();
          case 110:
            operator new();
          case 111:
            operator new();
          case 112:
            operator new();
          case 113:
            operator new();
          case 114:
            operator new();
          case 115:
            operator new();
          case 116:
            operator new();
          case 117:
            operator new();
          case 118:
            operator new();
          case 119:
            operator new();
          case 120:
            operator new();
          case 121:
            operator new();
          case 122:
            operator new();
          case 123:
            operator new();
          case 124:
            operator new();
          case 125:
            operator new();
          case 126:
            operator new();
          case 127:
            operator new();
          case 128:
            operator new();
          case 129:
            operator new();
          case 130:
            operator new();
          case 131:
            operator new();
          case 132:
            operator new();
          case 133:
            operator new();
          case 134:
            operator new();
          case 135:
            operator new();
          case 136:
            operator new();
          case 139:
            operator new();
          case 140:
            operator new();
          case 141:
            operator new();
          case 142:
            operator new();
          case 143:
            operator new();
          case 144:
            operator new();
          case 145:
            operator new();
          case 148:
            operator new();
          case 150:
            operator new();
          case 151:
            operator new();
          case 152:
            operator new();
          case 153:
            operator new();
          case 154:
            operator new();
          case 155:
            operator new();
          case 156:
            operator new();
          case 157:
            operator new();
          case 158:
            operator new();
          case 159:
            operator new();
          case 160:
            operator new();
          case 161:
            operator new();
          case 162:
            operator new();
          case 163:
            operator new();
          case 164:
            operator new();
          case 165:
            operator new();
          case 166:
            operator new();
          case 167:
            operator new();
          case 168:
            operator new();
          case 169:
            operator new();
          case 170:
            operator new();
          case 171:
            operator new();
          case 172:
            operator new();
          case 173:
            operator new();
          case 174:
            operator new();
          case 175:
            operator new();
          case 176:
            operator new();
          case 177:
            operator new();
          case 178:
            operator new();
          case 179:
            operator new();
          case 180:
            operator new();
          case 181:
            operator new();
          case 182:
            operator new();
          case 183:
            operator new();
          case 184:
            operator new();
          case 185:
            operator new();
          case 186:
            operator new();
          case 187:
            operator new();
          case 188:
            operator new();
          case 189:
            operator new();
          case 190:
            operator new();
          case 191:
            operator new();
          case 192:
            operator new();
          case 193:
            operator new();
          case 194:
            operator new();
          case 195:
            operator new();
          case 196:
            operator new();
          case 197:
            operator new();
          case 198:
            operator new();
          case 199:
            operator new();
          case 200:
            operator new();
          case 201:
            operator new();
          case 202:
            operator new();
          case 203:
            operator new();
          case 204:
            operator new();
          case 205:
            operator new();
          case 206:
            operator new();
          case 207:
            operator new();
          case 208:
            operator new();
          case 209:
            operator new();
          case 210:
            operator new();
          case 212:
            operator new();
          case 213:
            operator new();
          case 214:
            operator new();
          case 215:
            operator new();
          case 216:
            operator new();
          case 217:
            operator new();
          case 218:
            operator new();
          case 219:
            operator new();
          case 220:
            operator new();
          case 221:
            operator new();
          case 222:
            operator new();
          case 223:
            operator new();
          case 224:
            operator new();
          case 225:
            operator new();
          case 226:
            operator new();
          case 227:
            operator new();
          case 228:
            operator new();
          case 229:
            operator new();
          case 230:
            operator new();
          case 231:
            operator new();
          case 232:
            operator new();
          case 233:
            operator new();
          case 234:
            operator new();
          case 235:
            operator new();
          case 236:
            operator new();
          case 237:
            operator new();
          case 238:
            operator new();
          case 239:
            operator new();
          case 240:
            operator new();
          case 241:
            operator new();
          case 242:
            operator new();
          case 243:
            operator new();
          case 244:
            operator new();
          case 245:
            operator new();
          case 246:
            operator new();
          case 247:
            operator new();
          case 248:
            operator new();
          case 249:
            operator new();
          case 250:
            operator new();
          case 251:
            operator new();
          case 252:
            operator new();
          case 253:
            operator new();
          case 254:
            operator new();
          case 255:
            operator new();
          case 256:
            operator new();
          case 257:
            operator new();
          case 258:
            operator new();
          case 259:
            operator new();
          case 260:
            operator new();
          case 261:
            operator new();
          case 262:
            operator new();
          case 263:
            operator new();
          case 512:
            operator new();
          default:
            switch((int)v23)
            {
              case 1001:
                operator new();
              case 1002:
                operator new();
              case 1003:
                operator new();
              case 1004:
                operator new();
              case 1005:
                operator new();
              case 1006:
                operator new();
              case 1007:
                operator new();
              case 1008:
                operator new();
              case 1009:
                operator new();
              case 1010:
                operator new();
              case 1011:
                operator new();
              case 1012:
                operator new();
              case 1013:
                operator new();
              case 1014:
                operator new();
              case 1015:
                operator new();
              case 1016:
                operator new();
              case 1017:
                operator new();
              case 1018:
                operator new();
              case 1019:
                operator new();
              case 1020:
                operator new();
              case 1021:
                operator new();
              case 1022:
                operator new();
              case 1023:
                operator new();
              case 1024:
                operator new();
              case 1025:
                operator new();
              case 1026:
                operator new();
              case 1027:
                operator new();
              case 1028:
                operator new();
              case 1029:
                operator new();
              case 1030:
                operator new();
              case 1031:
                operator new();
              case 1032:
                operator new();
              case 1033:
                operator new();
              case 1034:
                operator new();
              case 1035:
                operator new();
              case 1036:
                operator new();
              case 1037:
                operator new();
              case 1038:
                operator new();
              case 1039:
                operator new();
              case 1040:
                operator new();
              case 1041:
                operator new();
              case 1042:
                operator new();
              case 1043:
                operator new();
              case 1044:
                operator new();
              case 1045:
                operator new();
              case 1046:
                operator new();
              case 1047:
                operator new();
              case 1048:
                operator new();
              case 1049:
                operator new();
              case 1050:
                operator new();
              case 1051:
                operator new();
              case 1052:
                operator new();
              case 1053:
                operator new();
              default:
                goto LABEL_215;
            }
            goto LABEL_215;
        }
      }
      if ((int)v23 > 29999)
      {
        switch(v23)
        {
          case 0x7530:
            operator new();
          case 0x7531:
            operator new();
          case 0x7532:
            operator new();
        }
      }
      else
      {
        switch((int)v23)
        {
          case 2048:
            operator new();
          case 2049:
            operator new();
          case 2050:
            operator new();
          case 2051:
            operator new();
          case 2052:
            operator new();
          case 2053:
            operator new();
          case 2054:
            operator new();
          case 2055:
            operator new();
          case 2056:
            operator new();
          case 2057:
            operator new();
          case 2058:
            operator new();
          case 2059:
            operator new();
          case 2060:
            operator new();
          case 2061:
            operator new();
          case 2062:
            operator new();
          case 2063:
            operator new();
          case 2064:
            operator new();
          case 2065:
            operator new();
          case 2066:
            operator new();
          case 2067:
            operator new();
          case 2068:
            operator new();
          case 2069:
            operator new();
          case 2070:
            operator new();
          case 2071:
            operator new();
          case 2072:
            operator new();
          case 2073:
            operator new();
          case 2074:
            operator new();
          case 2075:
            operator new();
          case 2076:
            operator new();
          case 2080:
            operator new();
          case 2089:
            operator new();
          case 2090:
            operator new();
          case 2091:
            operator new();
          case 2098:
            operator new();
          case 2099:
            operator new();
          case 2100:
            operator new();
          case 2101:
            operator new();
          case 2102:
            operator new();
          case 2103:
            operator new();
          case 2104:
            operator new();
          case 2105:
            operator new();
          case 2106:
            operator new();
          case 2107:
            operator new();
          case 2108:
            operator new();
          case 2109:
            operator new();
          case 2110:
            operator new();
          case 2111:
            operator new();
          case 2112:
            operator new();
          case 2113:
            operator new();
          case 2114:
            operator new();
          case 2115:
            operator new();
          case 2116:
            operator new();
          case 2117:
            operator new();
          case 2118:
            operator new();
          case 2119:
            operator new();
          case 2120:
            operator new();
          case 2121:
            operator new();
          case 2122:
            operator new();
          case 2123:
            operator new();
          case 2124:
            operator new();
          case 2125:
            operator new();
          case 2126:
            operator new();
          case 2127:
            operator new();
          case 2128:
            operator new();
          case 2129:
            operator new();
          case 2130:
            operator new();
          case 2131:
            operator new();
          case 2132:
            operator new();
          case 2133:
            operator new();
          case 2134:
            operator new();
          case 2135:
            operator new();
          case 2136:
            operator new();
          case 2137:
            operator new();
          case 2138:
            operator new();
          case 2139:
            operator new();
          case 2140:
            operator new();
          case 2141:
            operator new();
          case 2142:
            operator new();
          case 2143:
            operator new();
          case 2144:
            operator new();
          case 2145:
            operator new();
          case 2146:
            operator new();
          case 2147:
            operator new();
          case 2148:
            operator new();
          case 2149:
            operator new();
          case 2150:
            operator new();
          case 2151:
            operator new();
          case 2152:
            operator new();
          case 2153:
            operator new();
          case 2154:
            operator new();
          case 2155:
            operator new();
          case 2156:
            operator new();
          case 2157:
            operator new();
          case 2158:
            operator new();
          case 2159:
            operator new();
          case 2160:
            operator new();
          case 2161:
            operator new();
          case 2162:
            operator new();
          case 2163:
            operator new();
          case 2164:
            operator new();
          case 2165:
            operator new();
          case 2166:
            operator new();
          case 2167:
            operator new();
          case 2168:
            operator new();
          case 2169:
            operator new();
          case 2170:
            operator new();
          case 2171:
            operator new();
          case 2172:
            operator new();
          case 2173:
            operator new();
          case 2174:
            operator new();
          case 2175:
            operator new();
          case 2176:
            operator new();
          case 2177:
            operator new();
          case 2178:
            operator new();
          case 2179:
            operator new();
          case 2180:
            operator new();
          case 2181:
            operator new();
          case 2182:
            operator new();
          case 2183:
            operator new();
          case 2184:
            operator new();
          case 2185:
            operator new();
          case 2186:
            operator new();
          case 2187:
            operator new();
          case 2188:
            operator new();
          case 2189:
            operator new();
          case 2190:
            operator new();
          case 2191:
            operator new();
          case 2192:
            operator new();
          case 2193:
            operator new();
          case 2194:
            operator new();
          case 2195:
            operator new();
          case 2196:
            operator new();
          case 2197:
            operator new();
          case 2198:
            operator new();
          case 2199:
            operator new();
          case 2200:
            operator new();
          case 2201:
            operator new();
          case 2202:
            operator new();
          case 2203:
            operator new();
          case 2204:
            operator new();
          case 2205:
            operator new();
          case 2206:
            operator new();
          case 2207:
            operator new();
          case 2208:
            operator new();
          case 2209:
            operator new();
          case 2210:
            operator new();
          case 2211:
            operator new();
          case 2212:
            operator new();
          case 2213:
            operator new();
          case 2214:
            operator new();
          case 2215:
            operator new();
          case 2216:
            operator new();
          case 2217:
            operator new();
          case 2218:
            operator new();
          case 2219:
            operator new();
          case 2220:
            operator new();
          case 2221:
            operator new();
          case 2222:
            operator new();
          case 2223:
            operator new();
          case 2224:
            operator new();
          case 2225:
            operator new();
          case 2226:
            operator new();
          case 2227:
            operator new();
          case 2228:
            operator new();
          case 2229:
            operator new();
          case 2230:
            operator new();
          case 2231:
            operator new();
          case 2232:
            operator new();
          case 2233:
            operator new();
          case 2234:
            operator new();
          case 2235:
            operator new();
          case 2236:
            operator new();
          default:
            break;
        }
      }
LABEL_215:
      uint64_t result = PB::Reader::skip(a2, v23, v21, 0);
      if (!result) {
        return result;
      }
LABEL_491:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

void *CMMsl::WorkoutRecorderAccel::WorkoutRecorderAccel(void *this)
{
  *this = off_1003AA0D0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA0D0;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderBodyMetrics::WorkoutRecorderBodyMetrics(void *this)
{
  *this = off_1003AA178;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA178;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderElevation::WorkoutRecorderElevation(void *this)
{
  *this = off_1003AA1E8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA1E8;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderHeartRate::WorkoutRecorderHeartRate(void *this)
{
  *this = off_1003AA2C8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA2C8;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderRotationRate::WorkoutRecorderRotationRate(void *this)
{
  *this = off_1003AA3A8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA3A8;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderOdometer::WorkoutRecorderOdometer(void *this)
{
  *this = off_1003AA338;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA338;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutEvent::WorkoutRecorderWorkoutEvent(void *this)
{
  *this = off_1003AA488;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA488;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxInput::VO2MaxInput(uint64_t this)
{
  *(void *)this = off_1003A9A08;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = off_1003A9A08;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::WorkoutRecorderHealthKitInfo::WorkoutRecorderHealthKitInfo(uint64_t this)
{
  *(void *)this = off_1003AA290;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003AA290;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

double CMMsl::PearlAttitude::PearlAttitude(CMMsl::PearlAttitude *this)
{
  *(void *)this = off_1003A7F90;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7F90;
  *((_DWORD *)this + 31) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RotationRate::RotationRate(uint64_t this)
{
  *(void *)this = off_1003A8A48;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A8A48;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOrientationSettings::WorkoutRecorderWatchOrientationSettings(void *this)
{
  *this = off_1003AA418;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA418;
  this[1] = 0;
  return this;
}

void *CMMsl::WifiScanResults::WifiScanResults(void *this)
{
  *this = off_1003A9FB8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A9FB8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderWifiScanResults::WorkoutRecorderWifiScanResults(void *this)
{
  *this = off_1003AA450;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA450;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderPressure::WorkoutRecorderPressure(void *this)
{
  *this = off_1003AA370;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA370;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisionCompassBias::VisionCompassBias(uint64_t this)
{
  *(void *)this = off_1003A9C38;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(void *)this = off_1003A9C38;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

double CMMsl::VIOEstimation::VIOEstimation(CMMsl::VIOEstimation *this)
{
  *(void *)this = off_1003A9960;
  *((void *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9960;
  *((void *)this + 42) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

double CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  *(void *)this = off_1003A7190;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *((void *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7190;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *(void *)&double result = 0xFFFFFFFFLL;
  *((void *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  return result;
}

uint64_t CMMsl::MovementStats::MovementStats(uint64_t this)
{
  *(void *)this = off_1003A7858;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A7858;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntry::StepCountEntry(uint64_t this)
{
  *(void *)this = off_1003A9500;
  *(void *)(this + 8) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(void *)this = off_1003A9500;
  *(void *)(this + 8) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

void *CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(void *this)
{
  *this = off_1003A7548;
  this[23] = 0;
  return this;
}

{
  *this = off_1003A7548;
  this[23] = 0;
  return this;
}

uint64_t CMMsl::VIOPose::VIOPose(uint64_t this)
{
  *(void *)this = off_1003A9998;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(void *)this = off_1003A9998;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

void *CMMsl::SignalEnvironment::SignalEnvironment(void *this)
{
  *this = off_1003A8F50;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8F50;
  this[1] = 0;
  return this;
}

double CMMsl::VIOReplayPose::VIOReplayPose(CMMsl::VIOReplayPose *this)
{
  *(void *)this = off_1003A99D0;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A99D0;
  *((_DWORD *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::VisualStateMeasurement::VisualStateMeasurement(CMMsl::VisualStateMeasurement *this)
{
  *(void *)this = off_1003A9D18;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9D18;
  *((_DWORD *)this + 24) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

double CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  *(void *)this = off_1003A6FD0;
  *((_DWORD *)this + 30) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6FD0;
  *((_DWORD *)this + 30) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

double CMMsl::KappaDirectionOfTravel::KappaDirectionOfTravel(CMMsl::KappaDirectionOfTravel *this)
{
  *(void *)this = off_1003A6A58;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6A58;
  *((_DWORD *)this + 36) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this)
{
  *(void *)this = off_1003A6EF0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A6EF0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *CMMsl::SignificantUserInteraction::SignificantUserInteraction(void *this)
{
  *this = off_1003A8F88;
  this[2] = 0;
  return this;
}

{
  *this = off_1003A8F88;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::KappaRoads::KappaRoads(uint64_t this)
{
  *(void *)this = off_1003A6DD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A6DD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::UserStudyEvent::UserStudyEvent(uint64_t this)
{
  *(void *)this = off_1003A9928;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A9928;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCAuxiliaryDeviceMotion::TempestPoCAuxiliaryDeviceMotion(uint64_t this)
{
  *(void *)this = off_1003A97A0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(void *)this = off_1003A97A0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 80) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::TempestPoCListenerOrientation::TempestPoCListenerOrientation(uint64_t this)
{
  *(void *)this = off_1003A97D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = off_1003A97D8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderAccel800::WorkoutRecorderAccel800(void *this)
{
  *this = off_1003AA108;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA108;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderALSData::WorkoutRecorderALSData(void *this)
{
  *this = off_1003AA098;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA098;
  this[1] = 0;
  return this;
}

double CMMsl::VisualLocalization::VisualLocalization(CMMsl::VisualLocalization *this)
{
  *(void *)this = off_1003A9C70;
  *((_DWORD *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9C70;
  *((_DWORD *)this + 25) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::SoundPressureLevel::SoundPressureLevel(uint64_t this)
{
  *(void *)this = off_1003A9298;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A9298;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this)
{
  *(void *)this = off_1003A7708;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

{
  *(void *)this = off_1003A7708;
  *(_DWORD *)(this + 220) = 0;
  return this;
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this)
{
  *(void *)this = off_1003A75F0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(void *)this = off_1003A75F0;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

double CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this)
{
  *(void *)this = off_1003A6F60;
  *((_DWORD *)this + 53) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6F60;
  *((_DWORD *)this + 53) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

uint64_t CMMsl::RelDMInSystemConfig::RelDMInSystemConfig(uint64_t this)
{
  *(void *)this = off_1003A88C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A88C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void *CMMsl::JointLinkModelPose::JointLinkModelPose(void *this)
{
  *this = off_1003A67B8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A67B8;
  this[1] = 0;
  return this;
}

void *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(void *this)
{
  *this = off_1003A75B8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A75B8;
  this[1] = 0;
  return this;
}

void *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(void *this)
{
  *this = off_1003A7350;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A7350;
  this[1] = 0;
  return this;
}

void *CMMsl::JointLinkModelPredictedPose::JointLinkModelPredictedPose(void *this)
{
  *this = off_1003A67F0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A67F0;
  this[1] = 0;
  return this;
}

void *CMMsl::PressureCompensated::PressureCompensated(void *this)
{
  *this = off_1003A8620;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8620;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VO2MaxOutput::VO2MaxOutput(uint64_t this)
{
  *(void *)this = off_1003A9A78;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = off_1003A9A78;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t this)
{
  *(void *)this = off_1003A73C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A73C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this)
{
  *(void *)this = off_1003A73F8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A73F8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PressureCalibration::PressureCalibration(uint64_t this)
{
  *(void *)this = off_1003A85E8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A85E8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderMagnetometer::WorkoutRecorderMagnetometer(void *this)
{
  *this = off_1003AA300;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA300;
  this[1] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderCompassCalibration::WorkoutRecorderCompassCalibration(void *this)
{
  *this = off_1003AA1B0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA1B0;
  this[1] = 0;
  return this;
}

void *CMMsl::RawAudio::RawAudio(void *this)
{
  *this = off_1003A8888;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A8888;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t this)
{
  *(void *)this = off_1003A7970;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A7970;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PencilTipForce::PencilTipForce(uint64_t this)
{
  *(void *)this = off_1003A81F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A81F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PencilTouch::PencilTouch(uint64_t this)
{
  *(void *)this = off_1003A8230;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = off_1003A8230;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

void *CMMsl::Timestamp::Timestamp(void *this)
{
  *this = off_1003A9810;
  this[2] = 0;
  return this;
}

{
  *this = off_1003A9810;
  this[2] = 0;
  return this;
}

double CMMsl::WalkingSteadinessClassification::WalkingSteadinessClassification(CMMsl::WalkingSteadinessClassification *this)
{
  *(void *)this = off_1003A9DF8;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9DF8;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 61) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::SteadinessModelResult::SteadinessModelResult(uint64_t this)
{
  *(void *)this = off_1003A9420;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A9420;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::SteadinessEvent::SteadinessEvent(uint64_t this)
{
  *(void *)this = off_1003A9308;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A9308;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelGaitBaselineFeatures::SteadinessModelGaitBaselineFeatures(uint64_t this)
{
  *(void *)this = off_1003A93B0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = off_1003A93B0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelContinuousWalkingFeatures::SteadinessModelContinuousWalkingFeatures(uint64_t this)
{
  *(void *)this = off_1003A9378;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

{
  *(void *)this = off_1003A9378;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalDispersionFeatures::SteadinessModelTemporalDispersionFeatures(uint64_t this)
{
  *(void *)this = off_1003A9458;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9458;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelTemporalEntropyFeatures::SteadinessModelTemporalEntropyFeatures(uint64_t this)
{
  *(void *)this = off_1003A9490;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

{
  *(void *)this = off_1003A9490;
  *(_DWORD *)(this + 216) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelBalanceFeatures::SteadinessModelBalanceFeatures(uint64_t this)
{
  *(void *)this = off_1003A9340;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9340;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this)
{
  *(void *)this = off_1003A74A0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A74A0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderWatchOnWristStatus::WorkoutRecorderWatchOnWristStatus(void *this)
{
  *this = off_1003AA3E0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA3E0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t this)
{
  *(void *)this = off_1003A7238;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A7238;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::StepCountEntryAddition::StepCountEntryAddition(uint64_t this)
{
  *(void *)this = off_1003A9538;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

{
  *(void *)this = off_1003A9538;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

uint64_t CMMsl::StepDistanceFusionResult::StepDistanceFusionResult(uint64_t this)
{
  *(_DWORD *)(this + 100) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A9570;
  return this;
}

{
  *(_DWORD *)(this + 100) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = off_1003A9570;
  return this;
}

void *CMMsl::Skeleton3D::Skeleton3D(void *this)
{
  *this = off_1003A9180;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A9180;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this)
{
  *(void *)this = off_1003A7318;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A7318;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::PowerManagementUserActivity::PowerManagementUserActivity(uint64_t this)
{
  *(void *)this = off_1003A83F0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A83F0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeState::LiftToWakeState(uint64_t this)
{
  *(void *)this = off_1003A7270;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A7270;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedState::ViewObstructedState(uint64_t this)
{
  *(void *)this = off_1003A9C00;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(void *)this = off_1003A9C00;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

void *CMMsl::RunningFormMetrics::RunningFormMetrics(void *this)
{
  *this = off_1003A8AF0;
  this[28] = 0;
  return this;
}

{
  *this = off_1003A8AF0;
  this[28] = 0;
  return this;
}

void *CMMsl::WorkoutSessionPriors::WorkoutSessionPriors(void *this)
{
  *this = off_1003AA4F8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003AA4F8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderWorkoutSessionPriors::WorkoutRecorderWorkoutSessionPriors(void *this)
{
  *this = off_1003AA4C0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA4C0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PDRImpulse::PDRImpulse(uint64_t this)
{
  *(void *)this = off_1003A7D28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7D28;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PocketDetectionPacket::PocketDetectionPacket(uint64_t this)
{
  *(void *)this = off_1003A82D8;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(void *)this = off_1003A82D8;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t this)
{
  *(void *)this = off_1003A7200;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A7200;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this)
{
  *(void *)this = off_1003A72A8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A72A8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningPower::RunningPower(uint64_t this)
{
  *(void *)this = off_1003A8B28;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(void *)this = off_1003A8B28;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void *CMMsl::MotionContextActivity::MotionContextActivity(void *this)
{
  *this = off_1003A7660;
  this[1] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A7660;
  this[1] = 0;
  this[3] = 0;
  return this;
}

void *CMMsl::PDRAlgType::PDRAlgType(void *this)
{
  *this = off_1003A7A88;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A7A88;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PdrMLModelOutput::PdrMLModelOutput(uint64_t this)
{
  *(void *)this = off_1003A7F58;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A7F58;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderAveragedALSData::WorkoutRecorderAveragedALSData(void *this)
{
  *this = off_1003AA140;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA140;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalEntry::StrideCalEntry(uint64_t this)
{
  *(void *)this = off_1003A9688;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A9688;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::RunningSpeedKFResult::RunningSpeedKFResult(uint64_t this)
{
  *(void *)this = off_1003A8B98;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

{
  *(void *)this = off_1003A8B98;
  *(_DWORD *)(this + 188) = 0;
  return this;
}

uint64_t CMMsl::ProxPDP::ProxPDP(uint64_t this)
{
  *(void *)this = off_1003A8850;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A8850;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t this)
{
  *(void *)this = off_1003A70E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A70E8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this)
{
  *(void *)this = off_1003A7120;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7120;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this)
{
  *(void *)this = off_1003A70B0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A70B0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureNotification::WakeGestureNotification(uint64_t this)
{
  *(void *)this = off_1003A9D50;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A9D50;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::ProxBaselineEstimatorState::ProxBaselineEstimatorState(uint64_t this)
{
  *(void *)this = off_1003A87E0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

{
  *(void *)this = off_1003A87E0;
  *(_DWORD *)(this + 88) = 0;
  return this;
}

uint64_t CMMsl::RhythmicGnssOperatorStatus::RhythmicGnssOperatorStatus(uint64_t this)
{
  *(void *)this = off_1003A8A10;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8A10;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this)
{
  *(void *)this = off_1003A7158;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7158;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this)
{
  *(void *)this = off_1003A7078;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7078;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::Skeleton2D::Skeleton2D(uint64_t this)
{
  *(void *)this = off_1003A9110;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A9110;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DRetargeted::Skeleton3DRetargeted(uint64_t this)
{
  *(void *)this = off_1003A9228;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A9228;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::Skeleton3DLifted::Skeleton3DLifted(uint64_t this)
{
  *(void *)this = off_1003A91B8;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A91B8;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::WatchHeartRateData::WatchHeartRateData(uint64_t this)
{
  *(void *)this = off_1003A9ED8;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A9ED8;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::WatchActiveCalories::WatchActiveCalories(uint64_t this)
{
  *(void *)this = off_1003A9E30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A9E30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::WatchBasalCalories::WatchBasalCalories(uint64_t this)
{
  *(void *)this = off_1003A9E68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A9E68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::TrackRunData::TrackRunData(uint64_t this)
{
  *(void *)this = off_1003A9880;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9880;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this)
{
  *(void *)this = off_1003A74D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A74D8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void *CMMsl::WorkoutRecorderFitnessMachineData::WorkoutRecorderFitnessMachineData(void *this)
{
  *this = off_1003AA258;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA258;
  this[1] = 0;
  return this;
}

double CMMsl::PedestrianFenceExit::PedestrianFenceExit(CMMsl::PedestrianFenceExit *this)
{
  *(void *)this = off_1003A8038;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8038;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t CMMsl::PhysicalEffortInput::PhysicalEffortInput(uint64_t this)
{
  *(void *)this = off_1003A8268;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A8268;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::PhysicalEffortSample::PhysicalEffortSample(uint64_t this)
{
  *(void *)this = off_1003A82A0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A82A0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PedestrianCalorieModelDebugging::PedestrianCalorieModelDebugging(uint64_t this)
{
  *(void *)this = off_1003A8000;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(void *)this = off_1003A8000;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::WorkoutActivity::WorkoutActivity(uint64_t this)
{
  *(void *)this = off_1003A9FF0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A9FF0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double CMMsl::PencilDeviceMotion::PencilDeviceMotion(CMMsl::PencilDeviceMotion *this)
{
  *(void *)this = off_1003A80E0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A80E0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t CMMsl::PencilFusionResult::PencilFusionResult(uint64_t this)
{
  *(void *)this = off_1003A8188;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

{
  *(void *)this = off_1003A8188;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

uint64_t CMMsl::SteadinessModelHarmonicFeatures::SteadinessModelHarmonicFeatures(uint64_t this)
{
  *(void *)this = off_1003A93E8;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

{
  *(void *)this = off_1003A93E8;
  *(_DWORD *)(this + 248) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionReplayResult::PencilFusionReplayResult(uint64_t this)
{
  *(void *)this = off_1003A8150;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A8150;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t this)
{
  *(void *)this = off_1003A7580;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A7580;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchEnclosureMaterial::WatchEnclosureMaterial(uint64_t this)
{
  *(void *)this = off_1003A9EA0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A9EA0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  *(void *)this = off_1003A7740;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7740;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::PostureJoint::PostureJoint(CMMsl::PostureJoint *this)
{
  *(void *)this = off_1003A8380;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8380;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  return result;
}

void *CMMsl::PostureSkeleton::PostureSkeleton(void *this)
{
  *this = off_1003A83B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1003A83B8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void *CMMsl::WorkoutRecorderFaceCovered::WorkoutRecorderFaceCovered(void *this)
{
  *this = off_1003AA220;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA220;
  this[1] = 0;
  return this;
}

void *CMMsl::StreamingHighFrequencyHeartRateData::StreamingHighFrequencyHeartRateData(void *this)
{
  *this = off_1003A9618;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A9618;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::UltraFastAccel::UltraFastAccel(uint64_t this)
{
  *(void *)this = off_1003A98F0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A98F0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void *CMMsl::PressureOscarEmu::PressureOscarEmu(void *this)
{
  *this = off_1003A8738;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8738;
  this[1] = 0;
  return this;
}

void *CMMsl::PressureGps::PressureGps(void *this)
{
  *this = off_1003A8700;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8700;
  this[1] = 0;
  return this;
}

void *CMMsl::PressureFiltered::PressureFiltered(void *this)
{
  *this = off_1003A8658;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8658;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Prox::Prox(uint64_t this)
{
  *(void *)this = off_1003A87A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A87A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void *CMMsl::MotionStateUpdate::MotionStateUpdate(void *this)
{
  *this = off_1003A77B0;
  this[4] = 0;
  this[24] = 0;
  return this;
}

{
  *this = off_1003A77B0;
  this[4] = 0;
  this[24] = 0;
  return this;
}

uint64_t CMMsl::TouchOscarEmu::TouchOscarEmu(uint64_t this)
{
  *(void *)this = off_1003A9848;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A9848;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::SessionOverride::SessionOverride(uint64_t this)
{
  *(void *)this = off_1003A8F18;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A8F18;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this)
{
  *(void *)this = off_1003A76D0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A76D0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this)
{
  *(void *)this = off_1003A72E0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(void *)this = off_1003A72E0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

double CMMsl::NonlinearBiasFit::NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  *(void *)this = off_1003A7938;
  *((_DWORD *)this + 45) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7938;
  *((_DWORD *)this + 45) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((void *)this + 21) = 0;
  return result;
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this)
{
  *(void *)this = off_1003A7900;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A7900;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::WorkoutEvent::WorkoutEvent(uint64_t this)
{
  *(void *)this = off_1003AA028;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003AA028;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this)
{
  *(void *)this = off_1003A7A18;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A7A18;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

void *CMMsl::MotionWifiLocation::MotionWifiLocation(void *this)
{
  *this = off_1003A7820;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A7820;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::StrideCalBin::StrideCalBin(uint64_t this)
{
  *(void *)this = off_1003A9650;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9650;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this)
{
  *(void *)this = off_1003A79A8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(void *)this = off_1003A79A8;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::MetsInfo::MetsInfo(uint64_t this)
{
  *(void *)this = off_1003A7510;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A7510;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::VibrationEvent::VibrationEvent(uint64_t this)
{
  *(void *)this = off_1003A9B20;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A9B20;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::StepCadenceToStrideLengthBin::StepCadenceToStrideLengthBin(uint64_t this)
{
  *(void *)this = off_1003A94C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A94C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::WatchOrientationSettings::WatchOrientationSettings(uint64_t this)
{
  *(void *)this = off_1003A9F48;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A9F48;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this)
{
  *(void *)this = off_1003A77E8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = off_1003A77E8;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this)
{
  *(void *)this = off_1003A7778;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A7778;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::PressureFilteredNoTemperature::PressureFilteredNoTemperature(uint64_t this)
{
  *(void *)this = off_1003A86C8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A86C8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::TapDetect::TapDetect(CMMsl::TapDetect *this)
{
  *(void *)this = off_1003A9768;
  *((_DWORD *)this + 7) = -2;
  double result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_10033A600;
  return result;
}

{
  double result;

  *(void *)this = off_1003A9768;
  *((_DWORD *)this + 7) = -2;
  double result = NAN;
  *(_OWORD *)((char *)this + 52) = xmmword_10033A600;
  return result;
}

uint64_t CMMsl::TapAccept::TapAccept(uint64_t this)
{
  *(void *)this = off_1003A9730;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A9730;
  *(_DWORD *)(this + 36) = -1;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

double CMMsl::RelativeDeviceMotionInternal::RelativeDeviceMotionInternal(CMMsl::RelativeDeviceMotionInternal *this)
{
  *(void *)this = off_1003A8968;
  *((_DWORD *)this + 41) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8968;
  *((_DWORD *)this + 41) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::RelativeGravityCorrection::RelativeGravityCorrection(uint64_t this)
{
  *(void *)this = off_1003A89D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A89D8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::RelativeGravityConstraints::RelativeGravityConstraints(uint64_t this)
{
  *(void *)this = off_1003A89A0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A89A0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

void *CMMsl::ZeroVelocityCorrection::ZeroVelocityCorrection(void *this)
{
  *this = off_1003AA530;
  this[1] = 0;
  return this;
}

{
  *this = off_1003AA530;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::PredictedRelativeDeviceMotion::PredictedRelativeDeviceMotion(uint64_t this)
{
  *(void *)this = off_1003A8578;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A8578;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t this)
{
  *(void *)this = off_1003A78C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A78C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  *(void *)this = off_1003A7890;
  *((_DWORD *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7890;
  *((_DWORD *)this + 19) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void *CMMsl::VisualLocalizationAttitudeCorrection::VisualLocalizationAttitudeCorrection(void *this)
{
  *this = off_1003A9CE0;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A9CE0;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::VisualLocalizationAttitudeConstraints::VisualLocalizationAttitudeConstraints(uint64_t this)
{
  *(void *)this = off_1003A9CA8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A9CA8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::RelativeDeviceMotionCorrelatedMotion::RelativeDeviceMotionCorrelatedMotion(uint64_t this)
{
  *(void *)this = off_1003A8930;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

{
  *(void *)this = off_1003A8930;
  *(_DWORD *)(this + 128) = 0;
  return this;
}

void *CMMsl::RelativeDeviceMotionComplexTransition::RelativeDeviceMotionComplexTransition(void *this)
{
  *this = off_1003A88F8;
  *(void *)((char *)this + 188) = 0;
  return this;
}

{
  *this = off_1003A88F8;
  *(void *)((char *)this + 188) = 0;
  return this;
}

uint64_t CMMsl::WalkingDetectionResult::WalkingDetectionResult(uint64_t this)
{
  *(void *)this = off_1003A9DC0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A9DC0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorFeatures::SitStandDetectorFeatures(uint64_t this)
{
  *(void *)this = off_1003A9030;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A9030;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void *CMMsl::SitStandDetectorTransition::SitStandDetectorTransition(void *this)
{
  *this = off_1003A90D8;
  this[2] = 0;
  return this;
}

{
  *this = off_1003A90D8;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::SitStandDetectorPosteriorBufferStatsForSitToStand(uint64_t this)
{
  *(void *)this = off_1003A9068;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A9068;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::SitStandDetectorPosteriorBufferStatsForStandToSit(uint64_t this)
{
  *(void *)this = off_1003A90A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A90A0;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void *CMMsl::SpatialEvent::SpatialEvent(void *this)
{
  *this = off_1003A92D0;
  this[2] = 0;
  return this;
}

{
  *this = off_1003A92D0;
  this[2] = 0;
  return this;
}

uint64_t CMMsl::JitterBufferLevel::JitterBufferLevel(uint64_t this)
{
  *(void *)this = off_1003A6780;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A6780;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PressureFiltered1HzLowPass::PressureFiltered1HzLowPass(uint64_t this)
{
  *(void *)this = off_1003A8690;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8690;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this)
{
  *(void *)this = off_1003A7628;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

{
  *(void *)this = off_1003A7628;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t this)
{
  *(void *)this = off_1003A71C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A71C8;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this)
{
  *(void *)this = off_1003A7A50;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7A50;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KappaAudioResult::KappaAudioResult(uint64_t this)
{
  *(void *)this = off_1003A69B0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(void *)this = off_1003A69B0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::KappaBaroResult::KappaBaroResult(uint64_t this)
{
  *(void *)this = off_1003A69E8;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

{
  *(void *)this = off_1003A69E8;
  *(_DWORD *)(this + 152) = 0;
  return this;
}

uint64_t CMMsl::KappaGpsResult::KappaGpsResult(uint64_t this)
{
  *(void *)this = off_1003A6A90;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

{
  *(void *)this = off_1003A6A90;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseResult::KappaPulseResult(uint64_t this)
{
  *(void *)this = off_1003A6CF8;
  *(_DWORD *)(this + 324) = 0;
  *(void *)(this + 316) = 0;
  return this;
}

{
  *(void *)this = off_1003A6CF8;
  *(_DWORD *)(this + 324) = 0;
  *(void *)(this + 316) = 0;
  return this;
}

void *CMMsl::KappaZgResult::KappaZgResult(void *this)
{
  *this = off_1003A7040;
  *(void *)((char *)this + 164) = 0;
  return this;
}

{
  *this = off_1003A7040;
  *(void *)((char *)this + 164) = 0;
  return this;
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this)
{
  *(void *)this = off_1003A7008;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = off_1003A7008;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialAccel::KappaPulseInertialAccel(uint64_t this)
{
  *(void *)this = off_1003A6C88;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

{
  *(void *)this = off_1003A6C88;
  *(_DWORD *)(this + 80) = 0;
  return this;
}

uint64_t CMMsl::KappaAirbagResult::KappaAirbagResult(uint64_t this)
{
  *(void *)this = off_1003A6978;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A6978;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaCrashResult::KappaCrashResult(uint64_t this)
{
  *(void *)this = off_1003A6A20;
  *(void *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

{
  *(void *)this = off_1003A6A20;
  *(void *)(this + 280) = 0;
  *(_DWORD *)(this + 288) = 0;
  return this;
}

uint64_t CMMsl::KappaQuiescenceResult::KappaQuiescenceResult(uint64_t this)
{
  *(void *)this = off_1003A6D30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A6D30;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRecoveryResult::KappaRecoveryResult(uint64_t this)
{
  *(void *)this = off_1003A6D68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A6D68;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t this)
{
  *(void *)this = off_1003A6E48;
  *(_DWORD *)(this + 324) = 0;
  *(void *)(this + 316) = 0;
  return this;
}

{
  *(void *)this = off_1003A6E48;
  *(_DWORD *)(this + 324) = 0;
  *(void *)(this + 316) = 0;
  return this;
}

uint64_t CMMsl::KappaMildImpactResult::KappaMildImpactResult(uint64_t this)
{
  *(void *)this = off_1003A6BA8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A6BA8;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::KappaLackOfMotionResult::KappaLackOfMotionResult(uint64_t this)
{
  *(void *)this = off_1003A6B38;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A6B38;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

void *CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(void *this)
{
  *this = off_1003A6E80;
  *(void *)((char *)this + 364) = 0;
  *(void *)((char *)this + 356) = 0;
  return this;
}

{
  *this = off_1003A6E80;
  *(void *)((char *)this + 364) = 0;
  *(void *)((char *)this + 356) = 0;
  return this;
}

void *CMMsl::KappaLocalAudioResult::KappaLocalAudioResult(void *this)
{
  *this = off_1003A6B70;
  *(void *)((char *)this + 172) = 0;
  return this;
}

{
  *this = off_1003A6B70;
  *(void *)((char *)this + 172) = 0;
  return this;
}

uint64_t CMMsl::KappaRemoteAudioResult::KappaRemoteAudioResult(uint64_t this)
{
  *(void *)this = off_1003A6DA0;
  *(void *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(void *)this = off_1003A6DA0;
  *(void *)(this + 204) = 0;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningDecision::ViewObstructedMachineLearningDecision(uint64_t this)
{
  *(void *)this = off_1003A9B58;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A9B58;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningFeatures::ViewObstructedMachineLearningFeatures(uint64_t this)
{
  *(void *)this = off_1003A9B90;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

{
  *(void *)this = off_1003A9B90;
  *(_DWORD *)(this + 116) = 0;
  return this;
}

uint64_t CMMsl::ViewObstructedMachineLearningProbabilities::ViewObstructedMachineLearningProbabilities(uint64_t this)
{
  *(void *)this = off_1003A9BC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A9BC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningArmSwingSignals::RunningArmSwingSignals(uint64_t this)
{
  *(void *)this = off_1003A8A80;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A8A80;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningCentripetalAccelSignals::RunningCentripetalAccelSignals(uint64_t this)
{
  *(void *)this = off_1003A8AB8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

{
  *(void *)this = off_1003A8AB8;
  *(_DWORD *)(this + 120) = 0;
  return this;
}

uint64_t CMMsl::RunningRotationAxis::RunningRotationAxis(uint64_t this)
{
  *(void *)this = off_1003A8B60;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A8B60;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationSignals::RunningVerticalOscillationSignals(uint64_t this)
{
  *(void *)this = off_1003A8C78;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

{
  *(void *)this = off_1003A8C78;
  *(_DWORD *)(this + 208) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillation::RunningVerticalOscillation(uint64_t this)
{
  *(void *)this = off_1003A8C08;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A8C08;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  *(void *)this = off_1003A6EB8;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6EB8;
  *((_DWORD *)this + 51) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  return result;
}

uint64_t CMMsl::KappaPulseDeltaV::KappaPulseDeltaV(uint64_t this)
{
  *(void *)this = off_1003A6C50;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

{
  *(void *)this = off_1003A6C50;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

uint64_t CMMsl::RunningStrideLength::RunningStrideLength(uint64_t this)
{
  *(void *)this = off_1003A8BD0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

{
  *(void *)this = off_1003A8BD0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t CMMsl::KappaHighSpeedCrashResult::KappaHighSpeedCrashResult(uint64_t this)
{
  *(void *)this = off_1003A6B00;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A6B00;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::KappaPulseInertialHgAccel::KappaPulseInertialHgAccel(uint64_t this)
{
  *(void *)this = off_1003A6CC0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

{
  *(void *)this = off_1003A6CC0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

uint64_t CMMsl::PedometerPathStraightness::PedometerPathStraightness(uint64_t this)
{
  *(void *)this = off_1003A8070;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A8070;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::VO2MaxModelInput::VO2MaxModelInput(uint64_t this)
{
  *(void *)this = off_1003A9A40;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A9A40;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

double CMMsl::ProxCalibration::ProxCalibration(CMMsl::ProxCalibration *this)
{
  *(void *)this = off_1003A8818;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A8818;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this)
{
  *(void *)this = off_1003A6F28;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A6F28;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::WakeGestureSample::WakeGestureSample(uint64_t this)
{
  *(void *)this = off_1003A9D88;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

{
  *(void *)this = off_1003A9D88;
  *(_DWORD *)(this + 84) = 0;
  return this;
}

uint64_t CMMsl::KappaGravityAutocorrelationResult::KappaGravityAutocorrelationResult(uint64_t this)
{
  *(void *)this = off_1003A6AC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A6AC8;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::RunningVerticalOscillationGradientBoostedSignals::RunningVerticalOscillationGradientBoostedSignals(uint64_t this)
{
  *(void *)this = off_1003A8C40;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

{
  *(void *)this = off_1003A8C40;
  *(_DWORD *)(this + 212) = 0;
  return this;
}

uint64_t CMMsl::SubStats::SubStats(uint64_t this)
{
  *(void *)this = off_1003A96C0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A96C0;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::PedOdomFusionExtendedModeSegment::PedOdomFusionExtendedModeSegment(uint64_t this)
{
  *(void *)this = off_1003A7FC8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A7FC8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this)
{
  *(void *)this = off_1003A7388;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7388;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t this)
{
  *(void *)this = off_1003A7D60;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A7D60;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t this)
{
  *(void *)this = off_1003A7D98;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A7D98;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t this)
{
  *(void *)this = off_1003A7DD0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7DD0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t this)
{
  *(void *)this = off_1003A7AC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7AC0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRVelocityEstimatorState::PDRVelocityEstimatorState(uint64_t this)
{
  *(void *)this = off_1003A7E40;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_1003A7E40;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CMMsl::KMVelocityEstimatorState::KMVelocityEstimatorState(uint64_t this)
{
  *(void *)this = off_1003A68D0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A68D0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::VelocityEstimatorFusionState::VelocityEstimatorFusionState(uint64_t this)
{
  *(void *)this = off_1003A9AE8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A9AE8;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceReference::PDRFenceReference(uint64_t this)
{
  *(void *)this = off_1003A7CB8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A7CB8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this)
{
  *(void *)this = off_1003A7CF0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

{
  *(void *)this = off_1003A7CF0;
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t CMMsl::UWBRange::UWBRange(uint64_t this)
{
  *(void *)this = off_1003A98B8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

{
  *(void *)this = off_1003A98B8;
  *(_DWORD *)(this + 56) = 0;
  return this;
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this)
{
  *(void *)this = off_1003A6F98;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  *(void *)this = off_1003A6F98;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CMMsl::SimActivityEvent::SimActivityEvent(uint64_t this)
{
  *(void *)this = off_1003A8FC0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8FC0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PDRFeatures::PDRFeatures(uint64_t this)
{
  *(void *)this = off_1003A7C80;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(void *)this = off_1003A7C80;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t this)
{
  *(void *)this = off_1003A7B30;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7B30;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t this)
{
  *(void *)this = off_1003A7AF8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7AF8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t this)
{
  *(void *)this = off_1003A7BD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7BD8;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PDRSpeedEstimatorStateDebug::PDRSpeedEstimatorStateDebug(uint64_t this)
{
  *(void *)this = off_1003A7E08;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7E08;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingDOTEstimate::PrecisionFindingDOTEstimate(uint64_t this)
{
  *(void *)this = off_1003A8428;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8428;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingState::PrecisionFindingState(uint64_t this)
{
  *(void *)this = off_1003A84D0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

{
  *(void *)this = off_1003A84D0;
  *(_DWORD *)(this + 92) = 0;
  return this;
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this)
{
  *(void *)this = off_1003A6E10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A6E10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVelocityEstimate::PrecisionFindingVelocityEstimate(uint64_t this)
{
  *(void *)this = off_1003A8508;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A8508;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingRangeFilter::PrecisionFindingRangeFilter(uint64_t this)
{
  *(void *)this = off_1003A8460;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A8460;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t this)
{
  *(void *)this = off_1003A7C48;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A7C48;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t this)
{
  *(void *)this = off_1003A7C10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

{
  *(void *)this = off_1003A7C10;
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CMMsl::PeerState::PeerState(uint64_t this)
{
  *(void *)this = off_1003A80A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A80A8;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

double CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  *(void *)this = off_1003A7468;
  *((_DWORD *)this + 28) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7468;
  *((_DWORD *)this + 28) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityPhone::KappaActivityPhone(CMMsl::KappaActivityPhone *this)
{
  *(void *)this = off_1003A6908;
  *((_DWORD *)this + 35) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6908;
  *((_DWORD *)this + 35) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

double CMMsl::KappaActivityWatch::KappaActivityWatch(CMMsl::KappaActivityWatch *this)
{
  *(void *)this = off_1003A6940;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6940;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::PrecisionFindingSessionStartStop::PrecisionFindingSessionStartStop(uint64_t this)
{
  *(void *)this = off_1003A8498;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A8498;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t this)
{
  *(void *)this = off_1003A7BA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A7BA0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  *(void *)this = off_1003A7B68;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A7B68;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CMMsl::KappaPeakDetectorMapResult::KappaPeakDetectorMapResult(CMMsl::KappaPeakDetectorMapResult *this)
{
  *(void *)this = off_1003A6C18;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = off_1003A6C18;
  *((_DWORD *)this + 38) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

uint64_t CMMsl::KappaPeakDetectorMapMagTimestamps::KappaPeakDetectorMapMagTimestamps(uint64_t this)
{
  *(void *)this = off_1003A6BE0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = off_1003A6BE0;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CMMsl::PrecisionFindingVerticalState::PrecisionFindingVerticalState(uint64_t this)
{
  *(void *)this = off_1003A8540;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = off_1003A8540;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionDMYawAlignmentUpdate::PencilFusionDMYawAlignmentUpdate(uint64_t this)
{
  *(void *)this = off_1003A8118;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A8118;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CMMsl::PencilFusionRingSensorTrustModelUpdate::PencilFusionRingSensorTrustModelUpdate(uint64_t this)
{
  *(void *)this = off_1003A81C0;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = off_1003A81C0;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CMMsl::SafetyHertzSample::SafetyHertzSample(uint64_t this)
{
  *(void *)this = off_1003A8E38;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = off_1003A8E38;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CMMsl::SafetyCompanionStatus::SafetyCompanionStatus(uint64_t this)
{
  *(void *)this = off_1003A8E00;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A8E00;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void *CMMsl::PTSConsumedGNSS::PTSConsumedGNSS(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1003A7E78;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1003A7E78;
  return this;
}

uint64_t CMMsl::PTSForwardPropagation::PTSForwardPropagation(uint64_t this)
{
  *(void *)this = off_1003A7EB0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

{
  *(void *)this = off_1003A7EB0;
  *(void *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

void *CMMsl::PTSReconstructedRoute::PTSReconstructedRoute(void *this)
{
  *this = off_1003A7F20;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A7F20;
  this[1] = 0;
  return this;
}

void *CMMsl::PTSMapMatchedRoute::PTSMapMatchedRoute(void *this)
{
  *this = off_1003A7EE8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A7EE8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::KData1::KData1(uint64_t this)
{
  *(void *)this = off_1003A6828;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A6828;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::KData2::KData2(uint64_t this)
{
  *(void *)this = off_1003A6860;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(void *)this = off_1003A6860;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

uint64_t CMMsl::KData3::KData3(uint64_t this)
{
  *(void *)this = off_1003A6898;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_1003A6898;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CMMsl::SafetyRemoteSample::SafetyRemoteSample(uint64_t this)
{
  *(void *)this = off_1003A8E70;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

{
  *(void *)this = off_1003A8E70;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

void *CMMsl::SafetyTrustedAudioResult::SafetyTrustedAudioResult(void *this)
{
  *this = off_1003A8EA8;
  *(void *)((char *)this + 212) = 0;
  return this;
}

{
  *this = off_1003A8EA8;
  *(void *)((char *)this + 212) = 0;
  return this;
}

void *CMMsl::SPUPlaybackExampleDeviceMotion::SPUPlaybackExampleDeviceMotion(void *this)
{
  *this = off_1003A8D90;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8D90;
  this[1] = 0;
  return this;
}

void *CMMsl::SPUPlaybackExampleMotionStateUpdate::SPUPlaybackExampleMotionStateUpdate(void *this)
{
  *this = off_1003A8DC8;
  this[1] = 0;
  return this;
}

{
  *this = off_1003A8DC8;
  this[1] = 0;
  return this;
}

uint64_t CMMsl::Item::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 3616)) {
    this = PB::Writer::write(a2, *(double *)(this + 616), 1u);
  }
  int v4 = (const PB::Base *)v3[146];
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 2u);
  }
  uint64_t v5 = (const PB::Base *)v3[145];
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  uint64_t v6 = (const PB::Base *)v3[142];
  if (v6) {
    this = PB::Writer::writeSubmessage(a2, v6, 4u);
  }
  uint64_t v7 = (const PB::Base *)v3[141];
  if (v7) {
    this = PB::Writer::writeSubmessage(a2, v7, 5u);
  }
  uint64_t v8 = (const PB::Base *)v3[85];
  if (v8) {
    this = PB::Writer::writeSubmessage(a2, v8, 6u);
  }
  uint64_t v9 = (const PB::Base *)v3[84];
  if (v9) {
    this = PB::Writer::writeSubmessage(a2, v9, 7u);
  }
  char v10 = (const PB::Base *)v3[91];
  if (v10) {
    this = PB::Writer::writeSubmessage(a2, v10, 8u);
  }
  unsigned int v11 = (const PB::Base *)v3[90];
  if (v11) {
    this = PB::Writer::writeSubmessage(a2, v11, 9u);
  }
  unint64_t v12 = (const PB::Base *)v3[180];
  if (v12) {
    this = PB::Writer::writeSubmessage(a2, v12, 0xAu);
  }
  unint64_t v13 = (const PB::Base *)v3[95];
  if (v13) {
    this = PB::Writer::writeSubmessage(a2, v13, 0xBu);
  }
  char v14 = (const PB::Base *)v3[11];
  if (v14) {
    this = PB::Writer::writeSubmessage(a2, v14, 0x10u);
  }
  BOOL v15 = (const PB::Base *)v3[18];
  if (v15) {
    this = PB::Writer::writeSubmessage(a2, v15, 0x11u);
  }
  char v16 = (const PB::Base *)v3[27];
  if (v16) {
    this = PB::Writer::writeSubmessage(a2, v16, 0x12u);
  }
  unsigned int v17 = (const PB::Base *)v3[431];
  if (v17) {
    this = PB::Writer::writeSubmessage(a2, v17, 0x13u);
  }
  uint64_t v18 = (const PB::Base *)v3[434];
  if (v18) {
    this = PB::Writer::writeSubmessage(a2, v18, 0x14u);
  }
  unint64_t v19 = (const PB::Base *)v3[436];
  if (v19) {
    this = PB::Writer::writeSubmessage(a2, v19, 0x15u);
  }
  char v20 = (const PB::Base *)v3[440];
  if (v20) {
    this = PB::Writer::writeSubmessage(a2, v20, 0x16u);
  }
  int v21 = (const PB::Base *)v3[444];
  if (v21) {
    this = PB::Writer::writeSubmessage(a2, v21, 0x17u);
  }
  uint64_t v22 = (const PB::Base *)v3[442];
  if (v22) {
    this = PB::Writer::writeSubmessage(a2, v22, 0x18u);
  }
  unint64_t v23 = (const PB::Base *)v3[448];
  if (v23) {
    this = PB::Writer::writeSubmessage(a2, v23, 0x19u);
  }
  unint64_t v24 = (const PB::Base *)v3[415];
  if (v24) {
    this = PB::Writer::writeSubmessage(a2, v24, 0x1Au);
  }
  uint64_t v25 = (const PB::Base *)v3[68];
  if (v25) {
    this = PB::Writer::writeSubmessage(a2, v25, 0x1Bu);
  }
  uint64_t v26 = (const PB::Base *)v3[69];
  if (v26) {
    this = PB::Writer::writeSubmessage(a2, v26, 0x1Cu);
  }
  uint64_t v27 = (const PB::Base *)v3[70];
  if (v27) {
    this = PB::Writer::writeSubmessage(a2, v27, 0x1Du);
  }
  uint64_t v28 = (const PB::Base *)v3[67];
  if (v28) {
    this = PB::Writer::writeSubmessage(a2, v28, 0x1Eu);
  }
  uint64_t v29 = (const PB::Base *)v3[71];
  if (v29) {
    this = PB::Writer::writeSubmessage(a2, v29, 0x1Fu);
  }
  uint64_t v30 = (const PB::Base *)v3[439];
  if (v30) {
    this = PB::Writer::writeSubmessage(a2, v30, 0x20u);
  }
  uint64_t v31 = (const PB::Base *)v3[288];
  if (v31) {
    this = PB::Writer::writeSubmessage(a2, v31, 0x21u);
  }
  uint64_t v32 = (const PB::Base *)v3[340];
  if (v32) {
    this = PB::Writer::writeSubmessage(a2, v32, 0x22u);
  }
  uint64_t v33 = (const PB::Base *)v3[446];
  if (v33) {
    this = PB::Writer::writeSubmessage(a2, v33, 0x23u);
  }
  uint64_t v34 = (const PB::Base *)v3[425];
  if (v34) {
    this = PB::Writer::writeSubmessage(a2, v34, 0x24u);
  }
  uint64_t v35 = (const PB::Base *)v3[76];
  if (v35) {
    this = PB::Writer::writeSubmessage(a2, v35, 0x25u);
  }
  uint64_t v36 = (const PB::Base *)v3[427];
  if (v36) {
    this = PB::Writer::writeSubmessage(a2, v36, 0x26u);
  }
  uint64_t v37 = (const PB::Base *)v3[176];
  if (v37) {
    this = PB::Writer::writeSubmessage(a2, v37, 0x27u);
  }
  uint64_t v38 = (const PB::Base *)v3[174];
  if (v38) {
    this = PB::Writer::writeSubmessage(a2, v38, 0x28u);
  }
  uint64_t v39 = (const PB::Base *)v3[169];
  if (v39) {
    this = PB::Writer::writeSubmessage(a2, v39, 0x29u);
  }
  uint64_t v40 = (const PB::Base *)v3[28];
  if (v40) {
    this = PB::Writer::writeSubmessage(a2, v40, 0x2Au);
  }
  uint64_t v41 = (const PB::Base *)v3[29];
  if (v41) {
    this = PB::Writer::writeSubmessage(a2, v41, 0x2Bu);
  }
  uint64_t v42 = (const PB::Base *)v3[34];
  if (v42) {
    this = PB::Writer::writeSubmessage(a2, v42, 0x2Cu);
  }
  uint64_t v43 = (const PB::Base *)v3[114];
  if (v43) {
    this = PB::Writer::writeSubmessage(a2, v43, 0x2Du);
  }
  uint64_t v44 = (const PB::Base *)v3[447];
  if (v44) {
    this = PB::Writer::writeSubmessage(a2, v44, 0x2Eu);
  }
  uint64_t v45 = (const PB::Base *)v3[443];
  if (v45) {
    this = PB::Writer::writeSubmessage(a2, v45, 0x2Fu);
  }
  uint64_t v46 = (const PB::Base *)v3[168];
  if (v46) {
    this = PB::Writer::writeSubmessage(a2, v46, 0x30u);
  }
  uint64_t v47 = (const PB::Base *)v3[410];
  if (v47) {
    this = PB::Writer::writeSubmessage(a2, v47, 0x31u);
  }
  uint64_t v48 = (const PB::Base *)v3[44];
  if (v48) {
    this = PB::Writer::writeSubmessage(a2, v48, 0x32u);
  }
  uint64_t v49 = (const PB::Base *)v3[407];
  if (v49) {
    this = PB::Writer::writeSubmessage(a2, v49, 0x33u);
  }
  uint64_t v50 = (const PB::Base *)v3[235];
  if (v50) {
    this = PB::Writer::writeSubmessage(a2, v50, 0x34u);
  }
  uint64_t v51 = (const PB::Base *)v3[125];
  if (v51) {
    this = PB::Writer::writeSubmessage(a2, v51, 0x35u);
  }
  uint64_t v52 = (const PB::Base *)v3[10];
  if (v52) {
    this = PB::Writer::writeSubmessage(a2, v52, 0x36u);
  }
  uint64_t v53 = (const PB::Base *)v3[259];
  if (v53) {
    this = PB::Writer::writeSubmessage(a2, v53, 0x37u);
  }
  uint64_t v54 = (const PB::Base *)v3[379];
  if (v54) {
    this = PB::Writer::writeSubmessage(a2, v54, 0x38u);
  }
  uint64_t v55 = (const PB::Base *)v3[245];
  if (v55) {
    this = PB::Writer::writeSubmessage(a2, v55, 0x39u);
  }
  uint64_t v56 = (const PB::Base *)v3[89];
  if (v56) {
    this = PB::Writer::writeSubmessage(a2, v56, 0x3Au);
  }
  uint64_t v57 = (const PB::Base *)v3[408];
  if (v57) {
    this = PB::Writer::writeSubmessage(a2, v57, 0x3Bu);
  }
  uint64_t v58 = (const PB::Base *)v3[356];
  if (v58) {
    this = PB::Writer::writeSubmessage(a2, v58, 0x3Cu);
  }
  uint64_t v59 = (const PB::Base *)v3[409];
  if (v59) {
    this = PB::Writer::writeSubmessage(a2, v59, 0x3Du);
  }
  uint64_t v60 = (const PB::Base *)v3[414];
  if (v60) {
    this = PB::Writer::writeSubmessage(a2, v60, 0x3Eu);
  }
  uint64_t v61 = (const PB::Base *)v3[219];
  if (v61) {
    this = PB::Writer::writeSubmessage(a2, v61, 0x3Fu);
  }
  uint64_t v62 = (const PB::Base *)v3[194];
  if (v62) {
    this = PB::Writer::writeSubmessage(a2, v62, 0x40u);
  }
  uint64_t v63 = (const PB::Base *)v3[166];
  if (v63) {
    this = PB::Writer::writeSubmessage(a2, v63, 0x41u);
  }
  uint64_t v64 = (const PB::Base *)v3[215];
  if (v64) {
    this = PB::Writer::writeSubmessage(a2, v64, 0x42u);
  }
  uint64_t v65 = (const PB::Base *)v3[397];
  if (v65) {
    this = PB::Writer::writeSubmessage(a2, v65, 0x43u);
  }
  uint64_t v66 = (const PB::Base *)v3[210];
  if (v66) {
    this = PB::Writer::writeSubmessage(a2, v66, 0x44u);
  }
  uint64_t v67 = (const PB::Base *)v3[16];
  if (v67) {
    this = PB::Writer::writeSubmessage(a2, v67, 0x64u);
  }
  uint64_t v68 = (const PB::Base *)v3[398];
  if (v68) {
    this = PB::Writer::writeSubmessage(a2, v68, 0x65u);
  }
  uint64_t v69 = (const PB::Base *)v3[47];
  if (v69) {
    this = PB::Writer::writeSubmessage(a2, v69, 0x66u);
  }
  uint64_t v70 = (const PB::Base *)v3[391];
  if (v70) {
    this = PB::Writer::writeSubmessage(a2, v70, 0x67u);
  }
  uint64_t v71 = (const PB::Base *)v3[46];
  if (v71) {
    this = PB::Writer::writeSubmessage(a2, v71, 0x68u);
  }
  uint64_t v72 = (const PB::Base *)v3[392];
  if (v72) {
    this = PB::Writer::writeSubmessage(a2, v72, 0x69u);
  }
  uint64_t v73 = (const PB::Base *)v3[432];
  if (v73) {
    this = PB::Writer::writeSubmessage(a2, v73, 0x6Au);
  }
  uint64_t v74 = (const PB::Base *)v3[37];
  if (v74) {
    this = PB::Writer::writeSubmessage(a2, v74, 0x6Bu);
  }
  uint64_t v75 = (const PB::Base *)v3[430];
  if (v75) {
    this = PB::Writer::writeSubmessage(a2, v75, 0x6Cu);
  }
  uint64_t v76 = (const PB::Base *)v3[411];
  if (v76) {
    this = PB::Writer::writeSubmessage(a2, v76, 0x6Du);
  }
  uint64_t v77 = (const PB::Base *)v3[155];
  if (v77) {
    this = PB::Writer::writeSubmessage(a2, v77, 0x6Eu);
  }
  uint64_t v78 = (const PB::Base *)v3[367];
  if (v78) {
    this = PB::Writer::writeSubmessage(a2, v78, 0x6Fu);
  }
  uint64_t v79 = (const PB::Base *)v3[131];
  if (v79) {
    this = PB::Writer::writeSubmessage(a2, v79, 0x70u);
  }
  uint64_t v80 = (const PB::Base *)v3[109];
  if (v80) {
    this = PB::Writer::writeSubmessage(a2, v80, 0x71u);
  }
  uint64_t v81 = (const PB::Base *)v3[4];
  if (v81) {
    this = PB::Writer::writeSubmessage(a2, v81, 0x72u);
  }
  uint64_t v82 = (const PB::Base *)v3[253];
  if (v82) {
    this = PB::Writer::writeSubmessage(a2, v82, 0x73u);
  }
  uint64_t v83 = (const PB::Base *)v3[248];
  if (v83) {
    this = PB::Writer::writeSubmessage(a2, v83, 0x74u);
  }
  uint64_t v84 = (const PB::Base *)v3[62];
  if (v84) {
    this = PB::Writer::writeSubmessage(a2, v84, 0x75u);
  }
  uint64_t v85 = (const PB::Base *)v3[217];
  if (v85) {
    this = PB::Writer::writeSubmessage(a2, v85, 0x76u);
  }
  uint64_t v86 = (const PB::Base *)v3[333];
  if (v86) {
    this = PB::Writer::writeSubmessage(a2, v86, 0x77u);
  }
  uint64_t v87 = (const PB::Base *)v3[183];
  if (v87) {
    this = PB::Writer::writeSubmessage(a2, v87, 0x78u);
  }
  uint64_t v88 = (const PB::Base *)v3[88];
  if (v88) {
    this = PB::Writer::writeSubmessage(a2, v88, 0x79u);
  }
  uint64_t v89 = (const PB::Base *)v3[151];
  if (v89) {
    this = PB::Writer::writeSubmessage(a2, v89, 0x7Au);
  }
  uint64_t v90 = (const PB::Base *)v3[152];
  if (v90) {
    this = PB::Writer::writeSubmessage(a2, v90, 0x7Bu);
  }
  uint64_t v91 = (const PB::Base *)v3[150];
  if (v91) {
    this = PB::Writer::writeSubmessage(a2, v91, 0x7Cu);
  }
  uint64_t v92 = (const PB::Base *)v3[149];
  if (v92) {
    this = PB::Writer::writeSubmessage(a2, v92, 0x7Du);
  }
  uint64_t v93 = (const PB::Base *)v3[59];
  if (v93) {
    this = PB::Writer::writeSubmessage(a2, v93, 0x7Eu);
  }
  uint64_t v94 = (const PB::Base *)v3[132];
  if (v94) {
    this = PB::Writer::writeSubmessage(a2, v94, 0x7Fu);
  }
  uint64_t v95 = (const PB::Base *)v3[247];
  if (v95) {
    this = PB::Writer::writeSubmessage(a2, v95, 0x80u);
  }
  uint64_t v96 = (const PB::Base *)v3[236];
  if (v96) {
    this = PB::Writer::writeSubmessage(a2, v96, 0x81u);
  }
  uint64_t v97 = (const PB::Base *)v3[304];
  if (v97) {
    this = PB::Writer::writeSubmessage(a2, v97, 0x82u);
  }
  uint64_t v98 = (const PB::Base *)v3[305];
  if (v98) {
    this = PB::Writer::writeSubmessage(a2, v98, 0x83u);
  }
  uint64_t v99 = (const PB::Base *)v3[63];
  if (v99) {
    this = PB::Writer::writeSubmessage(a2, v99, 0x84u);
  }
  uint64_t v100 = (const PB::Base *)v3[184];
  if (v100) {
    this = PB::Writer::writeSubmessage(a2, v100, 0x85u);
  }
  uint64_t v101 = (const PB::Base *)v3[87];
  if (v101) {
    this = PB::Writer::writeSubmessage(a2, v101, 0x86u);
  }
  uint64_t v102 = (const PB::Base *)v3[318];
  if (v102) {
    this = PB::Writer::writeSubmessage(a2, v102, 0x87u);
  }
  uint64_t v103 = (const PB::Base *)v3[416];
  if (v103) {
    this = PB::Writer::writeSubmessage(a2, v103, 0x88u);
  }
  uint64_t v104 = (const PB::Base *)v3[238];
  if (v104) {
    this = PB::Writer::writeSubmessage(a2, v104, 0x8Bu);
  }
  uint64_t v105 = (const PB::Base *)v3[239];
  if (v105) {
    this = PB::Writer::writeSubmessage(a2, v105, 0x8Cu);
  }
  uint64_t v106 = (const PB::Base *)v3[317];
  if (v106) {
    this = PB::Writer::writeSubmessage(a2, v106, 0x8Du);
  }
  uint64_t v107 = (const PB::Base *)v3[441];
  if (v107) {
    this = PB::Writer::writeSubmessage(a2, v107, 0x8Eu);
  }
  uint64_t v108 = (const PB::Base *)v3[435];
  if (v108) {
    this = PB::Writer::writeSubmessage(a2, v108, 0x8Fu);
  }
  uint64_t v109 = (const PB::Base *)v3[332];
  if (v109) {
    this = PB::Writer::writeSubmessage(a2, v109, 0x90u);
  }
  uint64_t v110 = (const PB::Base *)v3[73];
  if (v110) {
    this = PB::Writer::writeSubmessage(a2, v110, 0x91u);
  }
  uint64_t v111 = (const PB::Base *)v3[60];
  if (v111) {
    this = PB::Writer::writeSubmessage(a2, v111, 0x94u);
  }
  uint64_t v112 = (const PB::Base *)v3[61];
  if (v112) {
    this = PB::Writer::writeSubmessage(a2, v112, 0x96u);
  }
  uint64_t v113 = (const PB::Base *)v3[266];
  if (v113) {
    this = PB::Writer::writeSubmessage(a2, v113, 0x97u);
  }
  uint64_t v114 = (const PB::Base *)v3[299];
  if (v114) {
    this = PB::Writer::writeSubmessage(a2, v114, 0x98u);
  }
  uint64_t v115 = (const PB::Base *)v3[300];
  if (v115) {
    this = PB::Writer::writeSubmessage(a2, v115, 0x99u);
  }
  uint64_t v116 = (const PB::Base *)v3[48];
  if (v116) {
    this = PB::Writer::writeSubmessage(a2, v116, 0x9Au);
  }
  uint64_t v117 = (const PB::Base *)v3[393];
  if (v117) {
    this = PB::Writer::writeSubmessage(a2, v117, 0x9Bu);
  }
  uint64_t v118 = (const PB::Base *)v3[43];
  if (v118) {
    this = PB::Writer::writeSubmessage(a2, v118, 0x9Cu);
  }
  uint64_t v119 = (const PB::Base *)v3[58];
  if (v119) {
    this = PB::Writer::writeSubmessage(a2, v119, 0x9Du);
  }
  uint64_t v120 = (const PB::Base *)v3[64];
  if (v120) {
    this = PB::Writer::writeSubmessage(a2, v120, 0x9Eu);
  }
  uint64_t v121 = (const PB::Base *)v3[420];
  if (v121) {
    this = PB::Writer::writeSubmessage(a2, v121, 0x9Fu);
  }
  uint64_t v122 = (const PB::Base *)v3[375];
  if (v122) {
    this = PB::Writer::writeSubmessage(a2, v122, 0xA0u);
  }
  uint64_t v123 = (const PB::Base *)v3[370];
  if (v123) {
    this = PB::Writer::writeSubmessage(a2, v123, 0xA1u);
  }
  uint64_t v124 = (const PB::Base *)v3[373];
  if (v124) {
    this = PB::Writer::writeSubmessage(a2, v124, 0xA2u);
  }
  uint64_t v125 = (const PB::Base *)v3[372];
  if (v125) {
    this = PB::Writer::writeSubmessage(a2, v125, 0xA3u);
  }
  uint64_t v126 = (const PB::Base *)v3[376];
  if (v126) {
    this = PB::Writer::writeSubmessage(a2, v126, 0xA4u);
  }
  uint64_t v127 = (const PB::Base *)v3[377];
  if (v127) {
    this = PB::Writer::writeSubmessage(a2, v127, 0xA5u);
  }
  uint64_t v128 = (const PB::Base *)v3[371];
  if (v128) {
    this = PB::Writer::writeSubmessage(a2, v128, 0xA6u);
  }
  uint64_t v129 = (const PB::Base *)v3[242];
  if (v129) {
    this = PB::Writer::writeSubmessage(a2, v129, 0xA7u);
  }
  uint64_t v130 = (const PB::Base *)v3[445];
  if (v130) {
    this = PB::Writer::writeSubmessage(a2, v130, 0xA8u);
  }
  uint64_t v131 = (const PB::Base *)v3[230];
  if (v131) {
    this = PB::Writer::writeSubmessage(a2, v131, 0xA9u);
  }
  uint64_t v132 = (const PB::Base *)v3[24];
  if (v132) {
    this = PB::Writer::writeSubmessage(a2, v132, 0xAAu);
  }
  uint64_t v133 = (const PB::Base *)v3[380];
  if (v133) {
    this = PB::Writer::writeSubmessage(a2, v133, 0xABu);
  }
  uint64_t v134 = (const PB::Base *)v3[381];
  if (v134) {
    this = PB::Writer::writeSubmessage(a2, v134, 0xACu);
  }
  uint64_t v135 = (const PB::Base *)v3[363];
  if (v135) {
    this = PB::Writer::writeSubmessage(a2, v135, 0xADu);
  }
  uint64_t v136 = (const PB::Base *)v3[92];
  if (v136) {
    this = PB::Writer::writeSubmessage(a2, v136, 0xAEu);
  }
  uint64_t v137 = (const PB::Base *)v3[111];
  if (v137) {
    this = PB::Writer::writeSubmessage(a2, v137, 0xAFu);
  }
  uint64_t v138 = (const PB::Base *)v3[57];
  if (v138) {
    this = PB::Writer::writeSubmessage(a2, v138, 0xB0u);
  }
  uint64_t v139 = (const PB::Base *)v3[234];
  if (v139) {
    this = PB::Writer::writeSubmessage(a2, v139, 0xB1u);
  }
  uint64_t v140 = (const PB::Base *)v3[56];
  if (v140) {
    this = PB::Writer::writeSubmessage(a2, v140, 0xB2u);
  }
  uint64_t v141 = (const PB::Base *)v3[308];
  if (v141) {
    this = PB::Writer::writeSubmessage(a2, v141, 0xB3u);
  }
  uint64_t v142 = (const PB::Base *)v3[130];
  if (v142) {
    this = PB::Writer::writeSubmessage(a2, v142, 0xB4u);
  }
  uint64_t v143 = (const PB::Base *)v3[98];
  if (v143) {
    this = PB::Writer::writeSubmessage(a2, v143, 0xB5u);
  }
  uint64_t v144 = (const PB::Base *)v3[1];
  if (v144) {
    this = PB::Writer::writeSubmessage(a2, v144, 0xB6u);
  }
  uint64_t v145 = (const PB::Base *)v3[2];
  if (v145) {
    this = PB::Writer::writeSubmessage(a2, v145, 0xB7u);
  }
  uint64_t v146 = (const PB::Base *)v3[40];
  if (v146) {
    this = PB::Writer::writeSubmessage(a2, v146, 0xB8u);
  }
  uint64_t v147 = (const PB::Base *)v3[231];
  if (v147) {
    this = PB::Writer::writeSubmessage(a2, v147, 0xB9u);
  }
  uint64_t v148 = (const PB::Base *)v3[406];
  if (v148) {
    this = PB::Writer::writeSubmessage(a2, v148, 0xBAu);
  }
  uint64_t v149 = (const PB::Base *)v3[343];
  if (v149) {
    this = PB::Writer::writeSubmessage(a2, v149, 0xBBu);
  }
  uint64_t v150 = (const PB::Base *)v3[450];
  if (v150) {
    this = PB::Writer::writeSubmessage(a2, v150, 0xBCu);
  }
  uint64_t v151 = (const PB::Base *)v3[449];
  if (v151) {
    this = PB::Writer::writeSubmessage(a2, v151, 0xBDu);
  }
  uint64_t v152 = (const PB::Base *)v3[45];
  if (v152) {
    this = PB::Writer::writeSubmessage(a2, v152, 0xBEu);
  }
  uint64_t v153 = (const PB::Base *)v3[281];
  if (v153) {
    this = PB::Writer::writeSubmessage(a2, v153, 0xBFu);
  }
  uint64_t v154 = (const PB::Base *)v3[303];
  if (v154) {
    this = PB::Writer::writeSubmessage(a2, v154, 0xC0u);
  }
  uint64_t v155 = (const PB::Base *)v3[229];
  if (v155) {
    this = PB::Writer::writeSubmessage(a2, v155, 0xC1u);
  }
  uint64_t v156 = (const PB::Base *)v3[232];
  if (v156) {
    this = PB::Writer::writeSubmessage(a2, v156, 0xC2u);
  }
  uint64_t v157 = (const PB::Base *)v3[344];
  if (v157) {
    this = PB::Writer::writeSubmessage(a2, v157, 0xC3u);
  }
  uint64_t v158 = (const PB::Base *)v3[51];
  if (v158) {
    this = PB::Writer::writeSubmessage(a2, v158, 0xC4u);
  }
  uint64_t v159 = (const PB::Base *)v3[52];
  if (v159) {
    this = PB::Writer::writeSubmessage(a2, v159, 0xC5u);
  }
  uint64_t v160 = (const PB::Base *)v3[250];
  if (v160) {
    this = PB::Writer::writeSubmessage(a2, v160, 0xC6u);
  }
  uint64_t v161 = (const PB::Base *)v3[269];
  if (v161) {
    this = PB::Writer::writeSubmessage(a2, v161, 0xC7u);
  }
  uint64_t v162 = (const PB::Base *)v3[9];
  if (v162) {
    this = PB::Writer::writeSubmessage(a2, v162, 0xC8u);
  }
  uint64_t v163 = (const PB::Base *)v3[104];
  if (v163) {
    this = PB::Writer::writeSubmessage(a2, v163, 0xC9u);
  }
  uint64_t v164 = (const PB::Base *)v3[282];
  if (v164) {
    this = PB::Writer::writeSubmessage(a2, v164, 0xCAu);
  }
  uint64_t v165 = (const PB::Base *)v3[136];
  if (v165) {
    this = PB::Writer::writeSubmessage(a2, v165, 0xCBu);
  }
  uint64_t v166 = (const PB::Base *)v3[137];
  if (v166) {
    this = PB::Writer::writeSubmessage(a2, v166, 0xCCu);
  }
  uint64_t v167 = (const PB::Base *)v3[135];
  if (v167) {
    this = PB::Writer::writeSubmessage(a2, v167, 0xCDu);
  }
  uint64_t v168 = (const PB::Base *)v3[112];
  if (v168) {
    this = PB::Writer::writeSubmessage(a2, v168, 0xCEu);
  }
  uint64_t v169 = (const PB::Base *)v3[433];
  if (v169) {
    this = PB::Writer::writeSubmessage(a2, v169, 0xCFu);
  }
  uint64_t v170 = (const PB::Base *)v3[386];
  if (v170) {
    this = PB::Writer::writeSubmessage(a2, v170, 0xD0u);
  }
  uint64_t v171 = (const PB::Base *)v3[346];
  if (v171) {
    this = PB::Writer::writeSubmessage(a2, v171, 0xD1u);
  }
  uint64_t v172 = (const PB::Base *)v3[327];
  if (v172) {
    this = PB::Writer::writeSubmessage(a2, v172, 0xD2u);
  }
  uint64_t v173 = (const PB::Base *)v3[224];
  if (v173) {
    this = PB::Writer::writeSubmessage(a2, v173, 0xD4u);
  }
  uint64_t v174 = (const PB::Base *)v3[225];
  if (v174) {
    this = PB::Writer::writeSubmessage(a2, v174, 0xD5u);
  }
  uint64_t v175 = (const PB::Base *)v3[38];
  if (v175) {
    this = PB::Writer::writeSubmessage(a2, v175, 0xD6u);
  }
  uint64_t v176 = (const PB::Base *)v3[223];
  if (v176) {
    this = PB::Writer::writeSubmessage(a2, v176, 0xD7u);
  }
  uint64_t v177 = (const PB::Base *)v3[417];
  if (v177) {
    this = PB::Writer::writeSubmessage(a2, v177, 0xD8u);
  }
  uint64_t v178 = (const PB::Base *)v3[325];
  if (v178) {
    this = PB::Writer::writeSubmessage(a2, v178, 0xD9u);
  }
  uint64_t v179 = (const PB::Base *)v3[54];
  if (v179) {
    this = PB::Writer::writeSubmessage(a2, v179, 0xDAu);
  }
  uint64_t v180 = (const PB::Base *)v3[339];
  if (v180) {
    this = PB::Writer::writeSubmessage(a2, v180, 0xDBu);
  }
  uint64_t v181 = (const PB::Base *)v3[226];
  if (v181) {
    this = PB::Writer::writeSubmessage(a2, v181, 0xDCu);
  }
  uint64_t v182 = (const PB::Base *)v3[222];
  if (v182) {
    this = PB::Writer::writeSubmessage(a2, v182, 0xDDu);
  }
  uint64_t v183 = (const PB::Base *)v3[50];
  if (v183) {
    this = PB::Writer::writeSubmessage(a2, v183, 0xDEu);
  }
  uint64_t v184 = (const PB::Base *)v3[55];
  if (v184) {
    this = PB::Writer::writeSubmessage(a2, v184, 0xDFu);
  }
  uint64_t v185 = (const PB::Base *)v3[165];
  if (v185) {
    this = PB::Writer::writeSubmessage(a2, v185, 0xE0u);
  }
  uint64_t v186 = (const PB::Base *)v3[362];
  if (v186) {
    this = PB::Writer::writeSubmessage(a2, v186, 0xE1u);
  }
  uint64_t v187 = (const PB::Base *)v3[365];
  if (v187) {
    this = PB::Writer::writeSubmessage(a2, v187, 0xE2u);
  }
  uint64_t v188 = (const PB::Base *)v3[364];
  if (v188) {
    this = PB::Writer::writeSubmessage(a2, v188, 0xE3u);
  }
  uint64_t v189 = (const PB::Base *)v3[129];
  if (v189) {
    this = PB::Writer::writeSubmessage(a2, v189, 0xE4u);
  }
  uint64_t v190 = (const PB::Base *)v3[424];
  if (v190) {
    this = PB::Writer::writeSubmessage(a2, v190, 0xE5u);
  }
  uint64_t v191 = (const PB::Base *)v3[115];
  if (v191) {
    this = PB::Writer::writeSubmessage(a2, v191, 0xE6u);
  }
  uint64_t v192 = (const PB::Base *)v3[421];
  if (v192) {
    this = PB::Writer::writeSubmessage(a2, v192, 0xE7u);
  }
  uint64_t v193 = (const PB::Base *)v3[422];
  if (v193) {
    this = PB::Writer::writeSubmessage(a2, v193, 0xE8u);
  }
  uint64_t v194 = (const PB::Base *)v3[395];
  if (v194) {
    this = PB::Writer::writeSubmessage(a2, v194, 0xE9u);
  }
  uint64_t v195 = (const PB::Base *)v3[139];
  if (v195) {
    this = PB::Writer::writeSubmessage(a2, v195, 0xEAu);
  }
  uint64_t v196 = (const PB::Base *)v3[140];
  if (v196) {
    this = PB::Writer::writeSubmessage(a2, v196, 0xEBu);
  }
  uint64_t v197 = (const PB::Base *)v3[243];
  if (v197) {
    this = PB::Writer::writeSubmessage(a2, v197, 0xECu);
  }
  uint64_t v198 = (const PB::Base *)v3[128];
  if (v198) {
    this = PB::Writer::writeSubmessage(a2, v198, 0xEDu);
  }
  uint64_t v199 = (const PB::Base *)v3[438];
  if (v199) {
    this = PB::Writer::writeSubmessage(a2, v199, 0xEEu);
  }
  uint64_t v200 = (const PB::Base *)v3[14];
  if (v200) {
    this = PB::Writer::writeSubmessage(a2, v200, 0xEFu);
  }
  uint64_t v201 = (const PB::Base *)v3[291];
  if (v201) {
    this = PB::Writer::writeSubmessage(a2, v201, 0xF0u);
  }
  uint64_t v202 = (const PB::Base *)v3[177];
  if (v202) {
    this = PB::Writer::writeSubmessage(a2, v202, 0xF1u);
  }
  uint64_t v203 = (const PB::Base *)v3[301];
  if (v203) {
    this = PB::Writer::writeSubmessage(a2, v203, 0xF2u);
  }
  uint64_t v204 = (const PB::Base *)v3[302];
  if (v204) {
    this = PB::Writer::writeSubmessage(a2, v204, 0xF3u);
  }
  uint64_t v205 = (const PB::Base *)v3[290];
  if (v205) {
    this = PB::Writer::writeSubmessage(a2, v205, 0xF4u);
  }
  uint64_t v206 = (const PB::Base *)v3[108];
  if (v206) {
    this = PB::Writer::writeSubmessage(a2, v206, 0xF5u);
  }
  uint64_t v207 = (const PB::Base *)v3[178];
  if (v207) {
    this = PB::Writer::writeSubmessage(a2, v207, 0xF6u);
  }
  uint64_t v208 = (const PB::Base *)v3[428];
  if (v208) {
    this = PB::Writer::writeSubmessage(a2, v208, 0xF7u);
  }
  uint64_t v209 = (const PB::Base *)v3[294];
  if (v209) {
    this = PB::Writer::writeSubmessage(a2, v209, 0xF8u);
  }
  uint64_t v210 = (const PB::Base *)v3[297];
  if (v210) {
    this = PB::Writer::writeSubmessage(a2, v210, 0xF9u);
  }
  uint64_t v211 = (const PB::Base *)v3[159];
  if (v211) {
    this = PB::Writer::writeSubmessage(a2, v211, 0xFAu);
  }
  uint64_t v212 = (const PB::Base *)v3[374];
  if (v212) {
    this = PB::Writer::writeSubmessage(a2, v212, 0xFBu);
  }
  uint64_t v213 = (const PB::Base *)v3[296];
  if (v213) {
    this = PB::Writer::writeSubmessage(a2, v213, 0xFCu);
  }
  uint64_t v214 = (const PB::Base *)v3[246];
  if (v214) {
    this = PB::Writer::writeSubmessage(a2, v214, 0xFDu);
  }
  uint64_t v215 = (const PB::Base *)v3[423];
  if (v215) {
    this = PB::Writer::writeSubmessage(a2, v215, 0xFEu);
  }
  uint64_t v216 = (const PB::Base *)v3[22];
  if (v216) {
    this = PB::Writer::writeSubmessage(a2, v216, 0xFFu);
  }
  uint64_t v217 = (const PB::Base *)v3[26];
  if (v217) {
    this = PB::Writer::writeSubmessage(a2, v217, 0x100u);
  }
  uint64_t v218 = (const PB::Base *)v3[254];
  if (v218) {
    this = PB::Writer::writeSubmessage(a2, v218, 0x101u);
  }
  uint64_t v219 = (const PB::Base *)v3[97];
  if (v219) {
    this = PB::Writer::writeSubmessage(a2, v219, 0x102u);
  }
  uint64_t v220 = (const PB::Base *)v3[306];
  if (v220) {
    this = PB::Writer::writeSubmessage(a2, v220, 0x103u);
  }
  uint64_t v221 = (const PB::Base *)v3[307];
  if (v221) {
    this = PB::Writer::writeSubmessage(a2, v221, 0x104u);
  }
  uint64_t v222 = (const PB::Base *)v3[167];
  if (v222) {
    this = PB::Writer::writeSubmessage(a2, v222, 0x105u);
  }
  uint64_t v223 = (const PB::Base *)v3[437];
  if (v223) {
    this = PB::Writer::writeSubmessage(a2, v223, 0x106u);
  }
  uint64_t v224 = (const PB::Base *)v3[384];
  if (v224) {
    this = PB::Writer::writeSubmessage(a2, v224, 0x107u);
  }
  uint64_t v225 = (const PB::Base *)v3[396];
  if (v225) {
    this = PB::Writer::writeSubmessage(a2, v225, 0x200u);
  }
  uint64_t v226 = (const PB::Base *)v3[3];
  if (v226) {
    this = PB::Writer::writeSubmessage(a2, v226, 0x3E9u);
  }
  uint64_t v227 = (const PB::Base *)v3[143];
  if (v227) {
    this = PB::Writer::writeSubmessage(a2, v227, 0x3EAu);
  }
  uint64_t v228 = (const PB::Base *)v3[240];
  if (v228) {
    this = PB::Writer::writeSubmessage(a2, v228, 0x3EBu);
  }
  uint64_t v229 = (const PB::Base *)v3[80];
  if (v229) {
    this = PB::Writer::writeSubmessage(a2, v229, 0x3ECu);
  }
  uint64_t v230 = (const PB::Base *)v3[93];
  if (v230) {
    this = PB::Writer::writeSubmessage(a2, v230, 0x3EDu);
  }
  uint64_t v231 = (const PB::Base *)v3[158];
  if (v231) {
    this = PB::Writer::writeSubmessage(a2, v231, 0x3EEu);
  }
  uint64_t v232 = (const PB::Base *)v3[7];
  if (v232) {
    this = PB::Writer::writeSubmessage(a2, v232, 0x3EFu);
  }
  uint64_t v233 = (const PB::Base *)v3[156];
  if (v233) {
    this = PB::Writer::writeSubmessage(a2, v233, 0x3F0u);
  }
  uint64_t v234 = (const PB::Base *)v3[5];
  if (v234) {
    this = PB::Writer::writeSubmessage(a2, v234, 0x3F1u);
  }
  uint64_t v235 = (const PB::Base *)v3[8];
  if (v235) {
    this = PB::Writer::writeSubmessage(a2, v235, 0x3F2u);
  }
  uint64_t v236 = (const PB::Base *)v3[81];
  if (v236) {
    this = PB::Writer::writeSubmessage(a2, v236, 0x3F3u);
  }
  uint64_t v237 = (const PB::Base *)v3[144];
  if (v237) {
    this = PB::Writer::writeSubmessage(a2, v237, 0x3F4u);
  }
  uint64_t v238 = (const PB::Base *)v3[316];
  if (v238) {
    this = PB::Writer::writeSubmessage(a2, v238, 0x3F5u);
  }
  uint64_t v239 = (const PB::Base *)v3[323];
  if (v239) {
    this = PB::Writer::writeSubmessage(a2, v239, 0x3F6u);
  }
  uint64_t v240 = (const PB::Base *)v3[322];
  if (v240) {
    this = PB::Writer::writeSubmessage(a2, v240, 0x3F7u);
  }
  uint64_t v241 = (const PB::Base *)v3[319];
  if (v241) {
    this = PB::Writer::writeSubmessage(a2, v241, 0x3F8u);
  }
  uint64_t v242 = (const PB::Base *)v3[148];
  if (v242) {
    this = PB::Writer::writeSubmessage(a2, v242, 0x3F9u);
  }
  uint64_t v243 = (const PB::Base *)v3[154];
  if (v243) {
    this = PB::Writer::writeSubmessage(a2, v243, 0x3FAu);
  }
  uint64_t v244 = (const PB::Base *)v3[324];
  if (v244) {
    this = PB::Writer::writeSubmessage(a2, v244, 0x3FBu);
  }
  uint64_t v245 = (const PB::Base *)v3[256];
  if (v245) {
    this = PB::Writer::writeSubmessage(a2, v245, 0x3FCu);
  }
  uint64_t v246 = (const PB::Base *)v3[153];
  if (v246) {
    this = PB::Writer::writeSubmessage(a2, v246, 0x3FDu);
  }
  uint64_t v247 = (const PB::Base *)v3[82];
  if (v247) {
    this = PB::Writer::writeSubmessage(a2, v247, 0x3FEu);
  }
  uint64_t v248 = (const PB::Base *)v3[157];
  if (v248) {
    this = PB::Writer::writeSubmessage(a2, v248, 0x3FFu);
  }
  uint64_t v249 = (const PB::Base *)v3[49];
  if (v249) {
    this = PB::Writer::writeSubmessage(a2, v249, 0x400u);
  }
  uint64_t v250 = (const PB::Base *)v3[394];
  if (v250) {
    this = PB::Writer::writeSubmessage(a2, v250, 0x401u);
  }
  uint64_t v251 = (const PB::Base *)v3[355];
  if (v251) {
    this = PB::Writer::writeSubmessage(a2, v251, 0x402u);
  }
  uint64_t v252 = (const PB::Base *)v3[252];
  if (v252) {
    this = PB::Writer::writeSubmessage(a2, v252, 0x403u);
  }
  uint64_t v253 = (const PB::Base *)v3[6];
  if (v253) {
    this = PB::Writer::writeSubmessage(a2, v253, 0x404u);
  }
  uint64_t v254 = (const PB::Base *)v3[233];
  if (v254) {
    this = PB::Writer::writeSubmessage(a2, v254, 0x405u);
  }
  uint64_t v255 = (const PB::Base *)v3[110];
  if (v255) {
    this = PB::Writer::writeSubmessage(a2, v255, 0x406u);
  }
  uint64_t v256 = (const PB::Base *)v3[263];
  if (v256) {
    this = PB::Writer::writeSubmessage(a2, v256, 0x407u);
  }
  uint64_t v257 = (const PB::Base *)v3[262];
  if (v257) {
    this = PB::Writer::writeSubmessage(a2, v257, 0x408u);
  }
  uint64_t v258 = (const PB::Base *)v3[66];
  if (v258) {
    this = PB::Writer::writeSubmessage(a2, v258, 0x409u);
  }
  uint64_t v259 = (const PB::Base *)v3[429];
  if (v259) {
    this = PB::Writer::writeSubmessage(a2, v259, 0x40Au);
  }
  uint64_t v260 = (const PB::Base *)v3[267];
  if (v260) {
    this = PB::Writer::writeSubmessage(a2, v260, 0x40Bu);
  }
  uint64_t v261 = (const PB::Base *)v3[383];
  if (v261) {
    this = PB::Writer::writeSubmessage(a2, v261, 0x40Cu);
  }
  uint64_t v262 = (const PB::Base *)v3[106];
  if (v262) {
    this = PB::Writer::writeSubmessage(a2, v262, 0x40Du);
  }
  uint64_t v263 = (const PB::Base *)v3[251];
  if (v263) {
    this = PB::Writer::writeSubmessage(a2, v263, 0x40Eu);
  }
  uint64_t v264 = (const PB::Base *)v3[258];
  if (v264) {
    this = PB::Writer::writeSubmessage(a2, v264, 0x40Fu);
  }
  uint64_t v265 = (const PB::Base *)v3[385];
  if (v265) {
    this = PB::Writer::writeSubmessage(a2, v265, 0x410u);
  }
  uint64_t v266 = (const PB::Base *)v3[75];
  if (v266) {
    this = PB::Writer::writeSubmessage(a2, v266, 0x411u);
  }
  uint64_t v267 = (const PB::Base *)v3[79];
  if (v267) {
    this = PB::Writer::writeSubmessage(a2, v267, 0x412u);
  }
  uint64_t v268 = (const PB::Base *)v3[264];
  if (v268) {
    this = PB::Writer::writeSubmessage(a2, v268, 0x413u);
  }
  uint64_t v269 = (const PB::Base *)v3[244];
  if (v269) {
    this = PB::Writer::writeSubmessage(a2, v269, 0x414u);
  }
  uint64_t v270 = (const PB::Base *)v3[126];
  if (v270) {
    this = PB::Writer::writeSubmessage(a2, v270, 0x415u);
  }
  uint64_t v271 = (const PB::Base *)v3[53];
  if (v271) {
    this = PB::Writer::writeSubmessage(a2, v271, 0x416u);
  }
  uint64_t v272 = (const PB::Base *)v3[402];
  if (v272) {
    this = PB::Writer::writeSubmessage(a2, v272, 0x417u);
  }
  uint64_t v273 = (const PB::Base *)v3[378];
  if (v273) {
    this = PB::Writer::writeSubmessage(a2, v273, 0x418u);
  }
  uint64_t v274 = (const PB::Base *)v3[426];
  if (v274) {
    this = PB::Writer::writeSubmessage(a2, v274, 0x419u);
  }
  uint64_t v275 = (const PB::Base *)v3[257];
  if (v275) {
    this = PB::Writer::writeSubmessage(a2, v275, 0x41Au);
  }
  uint64_t v276 = (const PB::Base *)v3[255];
  if (v276) {
    this = PB::Writer::writeSubmessage(a2, v276, 0x41Bu);
  }
  uint64_t v277 = (const PB::Base *)v3[265];
  if (v277) {
    this = PB::Writer::writeSubmessage(a2, v277, 0x41Cu);
  }
  uint64_t v278 = (const PB::Base *)v3[321];
  if (v278) {
    this = PB::Writer::writeSubmessage(a2, v278, 0x41Du);
  }
  uint64_t v279 = (const PB::Base *)v3[175];
  if (v279) {
    this = PB::Writer::writeSubmessage(a2, v279, 0x800u);
  }
  uint64_t v280 = (const PB::Base *)v3[78];
  if (v280) {
    this = PB::Writer::writeSubmessage(a2, v280, 0x801u);
  }
  uint64_t v281 = (const PB::Base *)v3[36];
  if (v281) {
    this = PB::Writer::writeSubmessage(a2, v281, 0x802u);
  }
  uint64_t v282 = (const PB::Base *)v3[173];
  if (v282) {
    this = PB::Writer::writeSubmessage(a2, v282, 0x803u);
  }
  uint64_t v283 = (const PB::Base *)v3[171];
  if (v283) {
    this = PB::Writer::writeSubmessage(a2, v283, 0x804u);
  }
  uint64_t v284 = (const PB::Base *)v3[172];
  if (v284) {
    this = PB::Writer::writeSubmessage(a2, v284, 0x805u);
  }
  uint64_t v285 = (const PB::Base *)v3[170];
  if (v285) {
    this = PB::Writer::writeSubmessage(a2, v285, 0x806u);
  }
  uint64_t v286 = (const PB::Base *)v3[15];
  if (v286) {
    this = PB::Writer::writeSubmessage(a2, v286, 0x807u);
  }
  uint64_t v287 = (const PB::Base *)v3[12];
  if (v287) {
    this = PB::Writer::writeSubmessage(a2, v287, 0x808u);
  }
  uint64_t v288 = (const PB::Base *)v3[30];
  if (v288) {
    this = PB::Writer::writeSubmessage(a2, v288, 0x809u);
  }
  uint64_t v289 = (const PB::Base *)v3[390];
  if (v289) {
    this = PB::Writer::writeSubmessage(a2, v289, 0x80Au);
  }
  uint64_t v290 = (const PB::Base *)v3[389];
  if (v290) {
    this = PB::Writer::writeSubmessage(a2, v290, 0x80Bu);
  }
  uint64_t v291 = (const PB::Base *)v3[105];
  if (v291) {
    this = PB::Writer::writeSubmessage(a2, v291, 0x80Cu);
  }
  uint64_t v292 = (const PB::Base *)v3[35];
  if (v292) {
    this = PB::Writer::writeSubmessage(a2, v292, 0x80Du);
  }
  uint64_t v293 = (const PB::Base *)v3[138];
  if (v293) {
    this = PB::Writer::writeSubmessage(a2, v293, 0x80Eu);
  }
  uint64_t v294 = (const PB::Base *)v3[336];
  if (v294) {
    this = PB::Writer::writeSubmessage(a2, v294, 0x80Fu);
  }
  uint64_t v295 = (const PB::Base *)v3[338];
  if (v295) {
    this = PB::Writer::writeSubmessage(a2, v295, 0x810u);
  }
  uint64_t v296 = (const PB::Base *)v3[337];
  if (v296) {
    this = PB::Writer::writeSubmessage(a2, v296, 0x811u);
  }
  uint64_t v297 = (const PB::Base *)v3[451];
  if (v297) {
    this = PB::Writer::writeSubmessage(a2, v297, 0x812u);
  }
  uint64_t v298 = (const PB::Base *)v3[41];
  if (v298) {
    this = PB::Writer::writeSubmessage(a2, v298, 0x813u);
  }
  uint64_t v299 = (const PB::Base *)v3[315];
  if (v299) {
    this = PB::Writer::writeSubmessage(a2, v299, 0x814u);
  }
  uint64_t v300 = (const PB::Base *)v3[261];
  if (v300) {
    this = PB::Writer::writeSubmessage(a2, v300, 0x815u);
  }
  uint64_t v301 = (const PB::Base *)v3[260];
  if (v301) {
    this = PB::Writer::writeSubmessage(a2, v301, 0x816u);
  }
  uint64_t v302 = (const PB::Base *)v3[65];
  if (v302) {
    this = PB::Writer::writeSubmessage(a2, v302, 0x817u);
  }
  uint64_t v303 = (const PB::Base *)v3[20];
  if (v303) {
    this = PB::Writer::writeSubmessage(a2, v303, 0x818u);
  }
  uint64_t v304 = (const PB::Base *)v3[21];
  if (v304) {
    this = PB::Writer::writeSubmessage(a2, v304, 0x819u);
  }
  uint64_t v305 = (const PB::Base *)v3[19];
  if (v305) {
    this = PB::Writer::writeSubmessage(a2, v305, 0x81Au);
  }
  uint64_t v306 = (const PB::Base *)v3[133];
  if (v306) {
    this = PB::Writer::writeSubmessage(a2, v306, 0x81Bu);
  }
  uint64_t v307 = (const PB::Base *)v3[134];
  if (v307) {
    this = PB::Writer::writeSubmessage(a2, v307, 0x81Cu);
  }
  uint64_t v308 = (const PB::Base *)v3[83];
  if (v308) {
    this = PB::Writer::writeSubmessage(a2, v308, 0x820u);
  }
  uint64_t v309 = (const PB::Base *)v3[413];
  if (v309) {
    this = PB::Writer::writeSubmessage(a2, v309, 0x829u);
  }
  uint64_t v310 = (const PB::Base *)v3[412];
  if (v310) {
    this = PB::Writer::writeSubmessage(a2, v310, 0x82Au);
  }
  uint64_t v311 = (const PB::Base *)v3[25];
  if (v311) {
    this = PB::Writer::writeSubmessage(a2, v311, 0x82Bu);
  }
  uint64_t v312 = (const PB::Base *)v3[119];
  if (v312) {
    this = PB::Writer::writeSubmessage(a2, v312, 0x832u);
  }
  uint64_t v313 = (const PB::Base *)v3[120];
  if (v313) {
    this = PB::Writer::writeSubmessage(a2, v313, 0x833u);
  }
  uint64_t v314 = (const PB::Base *)v3[121];
  if (v314) {
    this = PB::Writer::writeSubmessage(a2, v314, 0x834u);
  }
  uint64_t v315 = (const PB::Base *)v3[117];
  if (v315) {
    this = PB::Writer::writeSubmessage(a2, v315, 0x835u);
  }
  uint64_t v316 = (const PB::Base *)v3[124];
  if (v316) {
    this = PB::Writer::writeSubmessage(a2, v316, 0x836u);
  }
  uint64_t v317 = (const PB::Base *)v3[17];
  if (v317) {
    this = PB::Writer::writeSubmessage(a2, v317, 0x837u);
  }
  uint64_t v318 = (const PB::Base *)v3[335];
  if (v318) {
    this = PB::Writer::writeSubmessage(a2, v318, 0x838u);
  }
  uint64_t v319 = (const PB::Base *)v3[334];
  if (v319) {
    this = PB::Writer::writeSubmessage(a2, v319, 0x839u);
  }
  uint64_t v320 = (const PB::Base *)v3[94];
  if (v320) {
    this = PB::Writer::writeSubmessage(a2, v320, 0x83Au);
  }
  uint64_t v321 = (const PB::Base *)v3[118];
  if (v321) {
    this = PB::Writer::writeSubmessage(a2, v321, 0x83Bu);
  }
  uint64_t v322 = (const PB::Base *)v3[419];
  if (v322) {
    this = PB::Writer::writeSubmessage(a2, v322, 0x83Cu);
  }
  uint64_t v323 = (const PB::Base *)v3[23];
  if (v323) {
    this = PB::Writer::writeSubmessage(a2, v323, 0x83Du);
  }
  uint64_t v324 = (const PB::Base *)v3[122];
  if (v324) {
    this = PB::Writer::writeSubmessage(a2, v324, 0x83Eu);
  }
  uint64_t v325 = (const PB::Base *)v3[147];
  if (v325) {
    this = PB::Writer::writeSubmessage(a2, v325, 0x83Fu);
  }
  uint64_t v326 = (const PB::Base *)v3[382];
  if (v326) {
    this = PB::Writer::writeSubmessage(a2, v326, 0x840u);
  }
  uint64_t v327 = (const PB::Base *)v3[127];
  if (v327) {
    this = PB::Writer::writeSubmessage(a2, v327, 0x841u);
  }
  uint64_t v328 = (const PB::Base *)v3[33];
  if (v328) {
    this = PB::Writer::writeSubmessage(a2, v328, 0x842u);
  }
  uint64_t v329 = (const PB::Base *)v3[358];
  if (v329) {
    this = PB::Writer::writeSubmessage(a2, v329, 0x843u);
  }
  uint64_t v330 = (const PB::Base *)v3[361];
  if (v330) {
    this = PB::Writer::writeSubmessage(a2, v330, 0x844u);
  }
  uint64_t v331 = (const PB::Base *)v3[359];
  if (v331) {
    this = PB::Writer::writeSubmessage(a2, v331, 0x845u);
  }
  uint64_t v332 = (const PB::Base *)v3[360];
  if (v332) {
    this = PB::Writer::writeSubmessage(a2, v332, 0x846u);
  }
  uint64_t v333 = (const PB::Base *)v3[366];
  if (v333) {
    this = PB::Writer::writeSubmessage(a2, v333, 0x847u);
  }
  uint64_t v334 = (const PB::Base *)v3[123];
  if (v334) {
    this = PB::Writer::writeSubmessage(a2, v334, 0x848u);
  }
  uint64_t v335 = (const PB::Base *)v3[182];
  if (v335) {
    this = PB::Writer::writeSubmessage(a2, v335, 0x849u);
  }
  uint64_t v336 = (const PB::Base *)v3[320];
  if (v336) {
    this = PB::Writer::writeSubmessage(a2, v336, 0x84Au);
  }
  uint64_t v337 = (const PB::Base *)v3[249];
  if (v337) {
    this = PB::Writer::writeSubmessage(a2, v337, 0x84Bu);
  }
  uint64_t v338 = (const PB::Base *)v3[116];
  if (v338) {
    this = PB::Writer::writeSubmessage(a2, v338, 0x84Cu);
  }
  uint64_t v339 = (const PB::Base *)v3[228];
  if (v339) {
    this = PB::Writer::writeSubmessage(a2, v339, 0x84Du);
  }
  uint64_t v340 = (const PB::Base *)v3[102];
  if (v340) {
    this = PB::Writer::writeSubmessage(a2, v340, 0x84Eu);
  }
  uint64_t v341 = (const PB::Base *)v3[100];
  if (v341) {
    this = PB::Writer::writeSubmessage(a2, v341, 0x84Fu);
  }
  uint64_t v342 = (const PB::Base *)v3[101];
  if (v342) {
    this = PB::Writer::writeSubmessage(a2, v342, 0x850u);
  }
  uint64_t v343 = (const PB::Base *)v3[99];
  if (v343) {
    this = PB::Writer::writeSubmessage(a2, v343, 0x851u);
  }
  uint64_t v344 = (const PB::Base *)v3[268];
  if (v344) {
    this = PB::Writer::writeSubmessage(a2, v344, 0x852u);
  }
  uint64_t v345 = (const PB::Base *)v3[191];
  if (v345) {
    this = PB::Writer::writeSubmessage(a2, v345, 0x853u);
  }
  uint64_t v346 = (const PB::Base *)v3[192];
  if (v346) {
    this = PB::Writer::writeSubmessage(a2, v346, 0x854u);
  }
  uint64_t v347 = (const PB::Base *)v3[195];
  if (v347) {
    this = PB::Writer::writeSubmessage(a2, v347, 0x855u);
  }
  uint64_t v348 = (const PB::Base *)v3[206];
  if (v348) {
    this = PB::Writer::writeSubmessage(a2, v348, 0x856u);
  }
  uint64_t v349 = (const PB::Base *)v3[221];
  if (v349) {
    this = PB::Writer::writeSubmessage(a2, v349, 0x857u);
  }
  uint64_t v350 = (const PB::Base *)v3[220];
  if (v350) {
    this = PB::Writer::writeSubmessage(a2, v350, 0x858u);
  }
  uint64_t v351 = (const PB::Base *)v3[204];
  if (v351) {
    this = PB::Writer::writeSubmessage(a2, v351, 0x859u);
  }
  uint64_t v352 = (const PB::Base *)v3[164];
  if (v352) {
    this = PB::Writer::writeSubmessage(a2, v352, 0x85Au);
  }
  uint64_t v353 = (const PB::Base *)v3[163];
  if (v353) {
    this = PB::Writer::writeSubmessage(a2, v353, 0x85Bu);
  }
  uint64_t v354 = (const PB::Base *)v3[190];
  if (v354) {
    this = PB::Writer::writeSubmessage(a2, v354, 0x85Cu);
  }
  uint64_t v355 = (const PB::Base *)v3[193];
  if (v355) {
    this = PB::Writer::writeSubmessage(a2, v355, 0x85Du);
  }
  uint64_t v356 = (const PB::Base *)v3[207];
  if (v356) {
    this = PB::Writer::writeSubmessage(a2, v356, 0x85Eu);
  }
  uint64_t v357 = (const PB::Base *)v3[208];
  if (v357) {
    this = PB::Writer::writeSubmessage(a2, v357, 0x85Fu);
  }
  uint64_t v358 = (const PB::Base *)v3[212];
  if (v358) {
    this = PB::Writer::writeSubmessage(a2, v358, 0x860u);
  }
  uint64_t v359 = (const PB::Base *)v3[200];
  if (v359) {
    this = PB::Writer::writeSubmessage(a2, v359, 0x861u);
  }
  uint64_t v360 = (const PB::Base *)v3[198];
  if (v360) {
    this = PB::Writer::writeSubmessage(a2, v360, 0x862u);
  }
  uint64_t v361 = (const PB::Base *)v3[213];
  if (v361) {
    this = PB::Writer::writeSubmessage(a2, v361, 0x863u);
  }
  uint64_t v362 = (const PB::Base *)v3[199];
  if (v362) {
    this = PB::Writer::writeSubmessage(a2, v362, 0x864u);
  }
  uint64_t v363 = (const PB::Base *)v3[209];
  if (v363) {
    this = PB::Writer::writeSubmessage(a2, v363, 0x865u);
  }
  uint64_t v364 = (const PB::Base *)v3[96];
  if (v364) {
    this = PB::Writer::writeSubmessage(a2, v364, 0x866u);
  }
  uint64_t v365 = (const PB::Base *)v3[403];
  if (v365) {
    this = PB::Writer::writeSubmessage(a2, v365, 0x867u);
  }
  uint64_t v366 = (const PB::Base *)v3[162];
  if (v366) {
    this = PB::Writer::writeSubmessage(a2, v366, 0x868u);
  }
  uint64_t v367 = (const PB::Base *)v3[404];
  if (v367) {
    this = PB::Writer::writeSubmessage(a2, v367, 0x869u);
  }
  uint64_t v368 = (const PB::Base *)v3[405];
  if (v368) {
    this = PB::Writer::writeSubmessage(a2, v368, 0x86Au);
  }
  uint64_t v369 = (const PB::Base *)v3[341];
  if (v369) {
    this = PB::Writer::writeSubmessage(a2, v369, 0x86Bu);
  }
  uint64_t v370 = (const PB::Base *)v3[342];
  if (v370) {
    this = PB::Writer::writeSubmessage(a2, v370, 0x86Cu);
  }
  uint64_t v371 = (const PB::Base *)v3[345];
  if (v371) {
    this = PB::Writer::writeSubmessage(a2, v371, 0x86Du);
  }
  uint64_t v372 = (const PB::Base *)v3[350];
  if (v372) {
    this = PB::Writer::writeSubmessage(a2, v372, 0x86Eu);
  }
  uint64_t v373 = (const PB::Base *)v3[348];
  if (v373) {
    this = PB::Writer::writeSubmessage(a2, v373, 0x86Fu);
  }
  uint64_t v374 = (const PB::Base *)v3[214];
  if (v374) {
    this = PB::Writer::writeSubmessage(a2, v374, 0x870u);
  }
  uint64_t v375 = (const PB::Base *)v3[203];
  if (v375) {
    this = PB::Writer::writeSubmessage(a2, v375, 0x871u);
  }
  uint64_t v376 = (const PB::Base *)v3[347];
  if (v376) {
    this = PB::Writer::writeSubmessage(a2, v376, 0x872u);
  }
  uint64_t v377 = (const PB::Base *)v3[181];
  if (v377) {
    this = PB::Writer::writeSubmessage(a2, v377, 0x873u);
  }
  uint64_t v378 = (const PB::Base *)v3[197];
  if (v378) {
    this = PB::Writer::writeSubmessage(a2, v378, 0x874u);
  }
  uint64_t v379 = (const PB::Base *)v3[205];
  if (v379) {
    this = PB::Writer::writeSubmessage(a2, v379, 0x875u);
  }
  uint64_t v380 = (const PB::Base *)v3[160];
  if (v380) {
    this = PB::Writer::writeSubmessage(a2, v380, 0x876u);
  }
  uint64_t v381 = (const PB::Base *)v3[74];
  if (v381) {
    this = PB::Writer::writeSubmessage(a2, v381, 0x877u);
  }
  uint64_t v382 = (const PB::Base *)v3[292];
  if (v382) {
    this = PB::Writer::writeSubmessage(a2, v382, 0x878u);
  }
  uint64_t v383 = (const PB::Base *)v3[86];
  if (v383) {
    this = PB::Writer::writeSubmessage(a2, v383, 0x879u);
  }
  uint64_t v384 = (const PB::Base *)v3[107];
  if (v384) {
    this = PB::Writer::writeSubmessage(a2, v384, 0x87Au);
  }
  uint64_t v385 = (const PB::Base *)v3[400];
  if (v385) {
    this = PB::Writer::writeSubmessage(a2, v385, 0x87Bu);
  }
  uint64_t v386 = (const PB::Base *)v3[326];
  if (v386) {
    this = PB::Writer::writeSubmessage(a2, v386, 0x87Cu);
  }
  uint64_t v387 = (const PB::Base *)v3[216];
  if (v387) {
    this = PB::Writer::writeSubmessage(a2, v387, 0x87Du);
  }
  uint64_t v388 = (const PB::Base *)v3[418];
  if (v388) {
    this = PB::Writer::writeSubmessage(a2, v388, 0x87Eu);
  }
  uint64_t v389 = (const PB::Base *)v3[196];
  if (v389) {
    this = PB::Writer::writeSubmessage(a2, v389, 0x87Fu);
  }
  uint64_t v390 = (const PB::Base *)v3[349];
  if (v390) {
    this = PB::Writer::writeSubmessage(a2, v390, 0x880u);
  }
  uint64_t v391 = (const PB::Base *)v3[387];
  if (v391) {
    this = PB::Writer::writeSubmessage(a2, v391, 0x881u);
  }
  uint64_t v392 = (const PB::Base *)v3[289];
  if (v392) {
    this = PB::Writer::writeSubmessage(a2, v392, 0x882u);
  }
  uint64_t v393 = (const PB::Base *)v3[237];
  if (v393) {
    this = PB::Writer::writeSubmessage(a2, v393, 0x883u);
  }
  uint64_t v394 = (const PB::Base *)v3[283];
  if (v394) {
    this = PB::Writer::writeSubmessage(a2, v394, 0x884u);
  }
  uint64_t v395 = (const PB::Base *)v3[284];
  if (v395) {
    this = PB::Writer::writeSubmessage(a2, v395, 0x885u);
  }
  uint64_t v396 = (const PB::Base *)v3[285];
  if (v396) {
    this = PB::Writer::writeSubmessage(a2, v396, 0x886u);
  }
  uint64_t v397 = (const PB::Base *)v3[270];
  if (v397) {
    this = PB::Writer::writeSubmessage(a2, v397, 0x887u);
  }
  uint64_t v398 = (const PB::Base *)v3[287];
  if (v398) {
    this = PB::Writer::writeSubmessage(a2, v398, 0x888u);
  }
  uint64_t v399 = (const PB::Base *)v3[227];
  if (v399) {
    this = PB::Writer::writeSubmessage(a2, v399, 0x889u);
  }
  uint64_t v400 = (const PB::Base *)v3[401];
  if (v400) {
    this = PB::Writer::writeSubmessage(a2, v400, 0x88Au);
  }
  uint64_t v401 = (const PB::Base *)v3[279];
  if (v401) {
    this = PB::Writer::writeSubmessage(a2, v401, 0x88Bu);
  }
  uint64_t v402 = (const PB::Base *)v3[280];
  if (v402) {
    this = PB::Writer::writeSubmessage(a2, v402, 0x88Cu);
  }
  uint64_t v403 = (const PB::Base *)v3[399];
  if (v403) {
    this = PB::Writer::writeSubmessage(a2, v403, 0x88Du);
  }
  uint64_t v404 = (const PB::Base *)v3[388];
  if (v404) {
    this = PB::Writer::writeSubmessage(a2, v404, 0x88Eu);
  }
  uint64_t v405 = (const PB::Base *)v3[103];
  if (v405) {
    this = PB::Writer::writeSubmessage(a2, v405, 0x88Fu);
  }
  uint64_t v406 = (const PB::Base *)v3[218];
  if (v406) {
    this = PB::Writer::writeSubmessage(a2, v406, 0x890u);
  }
  uint64_t v407 = (const PB::Base *)v3[357];
  if (v407) {
    this = PB::Writer::writeSubmessage(a2, v407, 0x891u);
  }
  uint64_t v408 = (const PB::Base *)v3[278];
  if (v408) {
    this = PB::Writer::writeSubmessage(a2, v408, 0x892u);
  }
  uint64_t v409 = (const PB::Base *)v3[272];
  if (v409) {
    this = PB::Writer::writeSubmessage(a2, v409, 0x893u);
  }
  uint64_t v410 = (const PB::Base *)v3[271];
  if (v410) {
    this = PB::Writer::writeSubmessage(a2, v410, 0x894u);
  }
  uint64_t v411 = (const PB::Base *)v3[275];
  if (v411) {
    this = PB::Writer::writeSubmessage(a2, v411, 0x895u);
  }
  uint64_t v412 = (const PB::Base *)v3[13];
  if (v412) {
    this = PB::Writer::writeSubmessage(a2, v412, 0x896u);
  }
  uint64_t v413 = (const PB::Base *)v3[286];
  if (v413) {
    this = PB::Writer::writeSubmessage(a2, v413, 0x897u);
  }
  uint64_t v414 = (const PB::Base *)v3[309];
  if (v414) {
    this = PB::Writer::writeSubmessage(a2, v414, 0x898u);
  }
  uint64_t v415 = (const PB::Base *)v3[312];
  if (v415) {
    this = PB::Writer::writeSubmessage(a2, v415, 0x899u);
  }
  uint64_t v416 = (const PB::Base *)v3[211];
  if (v416) {
    this = PB::Writer::writeSubmessage(a2, v416, 0x89Au);
  }
  uint64_t v417 = (const PB::Base *)v3[313];
  if (v417) {
    this = PB::Writer::writeSubmessage(a2, v417, 0x89Bu);
  }
  uint64_t v418 = (const PB::Base *)v3[310];
  if (v418) {
    this = PB::Writer::writeSubmessage(a2, v418, 0x89Cu);
  }
  uint64_t v419 = (const PB::Base *)v3[277];
  if (v419) {
    this = PB::Writer::writeSubmessage(a2, v419, 0x89Du);
  }
  uint64_t v420 = (const PB::Base *)v3[72];
  if (v420) {
    this = PB::Writer::writeSubmessage(a2, v420, 0x89Eu);
  }
  uint64_t v421 = (const PB::Base *)v3[276];
  if (v421) {
    this = PB::Writer::writeSubmessage(a2, v421, 0x89Fu);
  }
  uint64_t v422 = (const PB::Base *)v3[293];
  if (v422) {
    this = PB::Writer::writeSubmessage(a2, v422, 0x8A0u);
  }
  uint64_t v423 = (const PB::Base *)v3[241];
  if (v423) {
    this = PB::Writer::writeSubmessage(a2, v423, 0x8A1u);
  }
  uint64_t v424 = (const PB::Base *)v3[188];
  if (v424) {
    this = PB::Writer::writeSubmessage(a2, v424, 0x8A2u);
  }
  uint64_t v425 = (const PB::Base *)v3[189];
  if (v425) {
    this = PB::Writer::writeSubmessage(a2, v425, 0x8A3u);
  }
  uint64_t v426 = (const PB::Base *)v3[311];
  if (v426) {
    this = PB::Writer::writeSubmessage(a2, v426, 0x8A4u);
  }
  uint64_t v427 = (const PB::Base *)v3[274];
  if (v427) {
    this = PB::Writer::writeSubmessage(a2, v427, 0x8A5u);
  }
  uint64_t v428 = (const PB::Base *)v3[273];
  if (v428) {
    this = PB::Writer::writeSubmessage(a2, v428, 0x8A6u);
  }
  uint64_t v429 = (const PB::Base *)v3[202];
  if (v429) {
    this = PB::Writer::writeSubmessage(a2, v429, 0x8A7u);
  }
  uint64_t v430 = (const PB::Base *)v3[201];
  if (v430) {
    this = PB::Writer::writeSubmessage(a2, v430, 0x8A8u);
  }
  uint64_t v431 = (const PB::Base *)v3[314];
  if (v431) {
    this = PB::Writer::writeSubmessage(a2, v431, 0x8A9u);
  }
  uint64_t v432 = (const PB::Base *)v3[39];
  if (v432) {
    this = PB::Writer::writeSubmessage(a2, v432, 0x8AAu);
  }
  uint64_t v433 = (const PB::Base *)v3[113];
  if (v433) {
    this = PB::Writer::writeSubmessage(a2, v433, 0x8ABu);
  }
  uint64_t v434 = (const PB::Base *)v3[295];
  if (v434) {
    this = PB::Writer::writeSubmessage(a2, v434, 0x8ACu);
  }
  uint64_t v435 = (const PB::Base *)v3[298];
  if (v435) {
    this = PB::Writer::writeSubmessage(a2, v435, 0x8ADu);
  }
  uint64_t v436 = (const PB::Base *)v3[32];
  if (v436) {
    this = PB::Writer::writeSubmessage(a2, v436, 0x8AEu);
  }
  uint64_t v437 = (const PB::Base *)v3[31];
  if (v437) {
    this = PB::Writer::writeSubmessage(a2, v437, 0x8AFu);
  }
  uint64_t v438 = (const PB::Base *)v3[352];
  if (v438) {
    this = PB::Writer::writeSubmessage(a2, v438, 0x8B0u);
  }
  uint64_t v439 = (const PB::Base *)v3[351];
  if (v439) {
    this = PB::Writer::writeSubmessage(a2, v439, 0x8B1u);
  }
  uint64_t v440 = (const PB::Base *)v3[328];
  if (v440) {
    this = PB::Writer::writeSubmessage(a2, v440, 0x8B2u);
  }
  uint64_t v441 = (const PB::Base *)v3[329];
  if (v441) {
    this = PB::Writer::writeSubmessage(a2, v441, 0x8B3u);
  }
  uint64_t v442 = (const PB::Base *)v3[331];
  if (v442) {
    this = PB::Writer::writeSubmessage(a2, v442, 0x8B4u);
  }
  uint64_t v443 = (const PB::Base *)v3[161];
  if (v443) {
    this = PB::Writer::writeSubmessage(a2, v443, 0x8B5u);
  }
  uint64_t v444 = (const PB::Base *)v3[330];
  if (v444) {
    this = PB::Writer::writeSubmessage(a2, v444, 0x8B6u);
  }
  uint64_t v445 = (const PB::Base *)v3[42];
  if (v445) {
    this = PB::Writer::writeSubmessage(a2, v445, 0x8B7u);
  }
  uint64_t v446 = (const PB::Base *)v3[185];
  if (v446) {
    this = PB::Writer::writeSubmessage(a2, v446, 0x8B8u);
  }
  uint64_t v447 = (const PB::Base *)v3[186];
  if (v447) {
    this = PB::Writer::writeSubmessage(a2, v447, 0x8B9u);
  }
  uint64_t v448 = (const PB::Base *)v3[187];
  if (v448) {
    this = PB::Writer::writeSubmessage(a2, v448, 0x8BAu);
  }
  uint64_t v449 = (const PB::Base *)v3[353];
  if (v449) {
    this = PB::Writer::writeSubmessage(a2, v449, 0x8BBu);
  }
  uint64_t v450 = (const PB::Base *)v3[354];
  if (v450) {
    this = PB::Writer::writeSubmessage(a2, v450, 0x8BCu);
  }
  uint64_t v451 = (const PB::Base *)v3[368];
  if (v451) {
    this = PB::Writer::writeSubmessage(a2, v451, 0x7530u);
  }
  uint64_t v452 = (const PB::Base *)v3[369];
  if (v452) {
    this = PB::Writer::writeSubmessage(a2, v452, 0x7531u);
  }
  uint64_t v453 = (const PB::Base *)v3[179];
  if (v453)
  {
    return PB::Writer::writeSubmessage(a2, v453, 0x7532u);
  }
  return this;
}

uint64_t CMMsl::Item::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 3616))
  {
    if ((*(unsigned char *)(a2 + 3616) & 1) == 0 || *(double *)(a1 + 616) != *(double *)(a2 + 616)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 3616))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 1168);
  uint64_t v5 = *(void *)(a2 + 1168);
  if (v4)
  {
    if (!v5 || !CMMsl::GyroBiasCorrection::operator==(v4, v5)) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 1160);
  uint64_t v7 = *(void *)(a2 + 1160);
  if (v6)
  {
    if (!v7 || !CMMsl::GyroBiasConstraints::operator==(v6, v7)) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 1136);
  uint64_t v9 = *(void *)(a2 + 1136);
  if (v8)
  {
    if (!v9 || !CMMsl::GravityCorrection::operator==(v8, v9)) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 1128);
  uint64_t v11 = *(void *)(a2 + 1128);
  if (v10)
  {
    if (!v11 || !CMMsl::GravityConstraints::operator==(v10, v11)) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 680);
  uint64_t v13 = *(void *)(a2 + 680);
  if (v12)
  {
    if (!v13) {
      return 0;
    }
    uint64_t v14 = *(void *)(v12 + 8);
    uint64_t v15 = *(void *)(v13 + 8);
    if (v14)
    {
      if (!v15 || !CMMsl::DeviceMotionCorrection::operator==(v14, v15)) {
        return 0;
      }
    }
    else if (v15)
    {
      return 0;
    }
  }
  else if (v13)
  {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 672);
  uint64_t v17 = *(void *)(a2 + 672);
  if (v16)
  {
    if (!v17 || !CMMsl::CompassConstraints::operator==(v16, v17)) {
      return 0;
    }
  }
  else if (v17)
  {
    return 0;
  }
  uint64_t v18 = *(void *)(a1 + 728);
  uint64_t v19 = *(void *)(a2 + 728);
  if (v18)
  {
    if (!v19) {
      return 0;
    }
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v19 + 8);
    if (v20)
    {
      if (!v21 || !CMMsl::DeviceMotionCorrection::operator==(v20, v21)) {
        return 0;
      }
    }
    else if (v21)
    {
      return 0;
    }
  }
  else if (v19)
  {
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 720);
  uint64_t v23 = *(void *)(a2 + 720);
  if (v22)
  {
    if (!v23 || !CMMsl::CourseConstraints::operator==(v22, v23)) {
      return 0;
    }
  }
  else if (v23)
  {
    return 0;
  }
  unint64_t v24 = *(void **)(a1 + 1440);
  uint64_t v25 = *(void **)(a2 + 1440);
  if (v24)
  {
    if (!v25 || !CMMsl::IntersiloNSCodingData::operator==(v24, v25) && *(void *)(a1 + 1440) | *(void *)(a2 + 1440)) {
      return 0;
    }
  }
  else if (v25)
  {
    return 0;
  }
  uint64_t v26 = *(void *)(a1 + 760);
  uint64_t v27 = *(void *)(a2 + 760);
  if (v26)
  {
    if (!v27 || !CMMsl::DeviceMotionCovariance::operator==(v26, v27)) {
      return 0;
    }
  }
  else if (v27)
  {
    return 0;
  }
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v29 = *(void *)(a2 + 88);
  if (v28)
  {
    if (!v29 || !CMMsl::AccessoryAccel::operator==(v28, v29)) {
      return 0;
    }
  }
  else if (v29)
  {
    return 0;
  }
  uint64_t v30 = *(void *)(a1 + 144);
  uint64_t v31 = *(void *)(a2 + 144);
  if (v30)
  {
    if (!v31 || !CMMsl::AccessoryGyro::operator==(v30, v31)) {
      return 0;
    }
  }
  else if (v31)
  {
    return 0;
  }
  uint64_t v32 = *(void *)(a1 + 216);
  uint64_t v33 = *(void *)(a2 + 216);
  if (v32)
  {
    if (!v33 || !CMMsl::AccessoryProx::operator==(v32, v33)) {
      return 0;
    }
  }
  else if (v33)
  {
    return 0;
  }
  uint64_t v34 = *(void *)(a1 + 3448);
  uint64_t v35 = *(void *)(a2 + 3448);
  if (v34)
  {
    if (!v35) {
      return 0;
    }
    uint64_t v36 = *(void *)(v34 + 8);
    uint64_t v37 = *(void *)(v35 + 8);
    if (v36)
    {
      if (!v37 || !CMMsl::Accel::operator==(v36, v37)) {
        return 0;
      }
    }
    else if (v37)
    {
      return 0;
    }
  }
  else if (v35)
  {
    return 0;
  }
  uint64_t v38 = *(void *)(a1 + 3472);
  uint64_t v39 = *(void *)(a2 + 3472);
  if (v38)
  {
    if (!v39) {
      return 0;
    }
    uint64_t v40 = *(void *)(v38 + 8);
    uint64_t v41 = *(void *)(v39 + 8);
    if (v40)
    {
      if (!v41 || !CMMsl::BodyMetrics::operator==(v40, v41)) {
        return 0;
      }
    }
    else if (v41)
    {
      return 0;
    }
  }
  else if (v39)
  {
    return 0;
  }
  uint64_t v42 = *(void *)(a1 + 3488);
  uint64_t v43 = *(void *)(a2 + 3488);
  if (v42)
  {
    if (!v43) {
      return 0;
    }
    uint64_t v44 = *(void *)(v42 + 8);
    uint64_t v45 = *(void *)(v43 + 8);
    if (v44)
    {
      if (!v45 || !CMMsl::ElevationChange::operator==(v44, v45)) {
        return 0;
      }
    }
    else if (v45)
    {
      return 0;
    }
  }
  else if (v43)
  {
    return 0;
  }
  uint64_t v46 = *(void *)(a1 + 3520);
  uint64_t v47 = *(void *)(a2 + 3520);
  if (v46)
  {
    if (!v47) {
      return 0;
    }
    uint64_t v48 = *(void *)(v46 + 8);
    uint64_t v49 = *(void *)(v47 + 8);
    if (v48)
    {
      if (!v49 || !CMMsl::OnsetHeartRateData::operator==(v48, v49)) {
        return 0;
      }
    }
    else if (v49)
    {
      return 0;
    }
  }
  else if (v47)
  {
    return 0;
  }
  uint64_t v50 = *(void *)(a1 + 3552);
  uint64_t v51 = *(void *)(a2 + 3552);
  if (v50)
  {
    if (!v51) {
      return 0;
    }
    uint64_t v52 = *(void *)(v50 + 8);
    uint64_t v53 = *(void *)(v51 + 8);
    if (v52)
    {
      if (!v53 || !CMMsl::RotationRate::operator==(v52, v53)) {
        return 0;
      }
    }
    else if (v53)
    {
      return 0;
    }
  }
  else if (v51)
  {
    return 0;
  }
  uint64_t v54 = *(void *)(a1 + 3536);
  uint64_t v55 = *(void *)(a2 + 3536);
  if (v54)
  {
    if (!v55) {
      return 0;
    }
    uint64_t v56 = *(void *)(v54 + 8);
    uint64_t v57 = *(void *)(v55 + 8);
    if (v56)
    {
      if (!v57 || !CMMsl::OdometerWithAltitude::operator==(v56, v57)) {
        return 0;
      }
    }
    else if (v57)
    {
      return 0;
    }
  }
  else if (v55)
  {
    return 0;
  }
  uint64_t v58 = *(void *)(a1 + 3584);
  uint64_t v59 = *(void *)(a2 + 3584);
  if (v58)
  {
    if (!v59) {
      return 0;
    }
    uint64_t v60 = *(void *)(v58 + 8);
    uint64_t v61 = *(void *)(v59 + 8);
    if (v60)
    {
      if (!v61 || !CMMsl::WorkoutEvent::operator==(v60, v61)) {
        return 0;
      }
    }
    else if (v61)
    {
      return 0;
    }
  }
  else if (v59)
  {
    return 0;
  }
  uint64_t v62 = *(void *)(a1 + 3320);
  uint64_t v63 = *(void *)(a2 + 3320);
  if (v62)
  {
    if (!v63 || !CMMsl::VO2MaxInput::operator==(v62, v63)) {
      return 0;
    }
  }
  else if (v63)
  {
    return 0;
  }
  uint64_t v64 = *(void *)(a1 + 544);
  uint64_t v65 = *(void *)(a2 + 544);
  if (!v64) {
    goto LABEL_152;
  }
  if (!v65) {
    return 0;
  }
  if (!sub_10008FC0C((uint64_t *)(v64 + 8), v65 + 8))
  {
    uint64_t v65 = *(void *)(a1 + 544) | *(void *)(a2 + 544);
LABEL_152:
    if (v65) {
      return 0;
    }
  }
  uint64_t v66 = *(void *)(a1 + 552);
  uint64_t v67 = *(void *)(a2 + 552);
  if (v66)
  {
    if (!v67 || !CMMsl::BraveHeartNatalieData::operator==(v66, v67)) {
      return 0;
    }
  }
  else if (v67)
  {
    return 0;
  }
  uint64_t v68 = *(void *)(a1 + 560);
  uint64_t v69 = *(void *)(a2 + 560);
  if (!v68) {
    goto LABEL_162;
  }
  if (!v69) {
    return 0;
  }
  if (!sub_10009102C((uint64_t *)(v68 + 8), v69 + 8))
  {
    uint64_t v69 = *(void *)(a1 + 560) | *(void *)(a2 + 560);
LABEL_162:
    if (v69) {
      return 0;
    }
  }
  uint64_t v70 = *(void *)(a1 + 536);
  uint64_t v71 = *(void *)(a2 + 536);
  if (!v70) {
    goto LABEL_167;
  }
  if (!v71) {
    return 0;
  }
  if (!sub_10008F1A0((uint64_t *)(v70 + 8), v71 + 8))
  {
    uint64_t v71 = *(void *)(a1 + 536) | *(void *)(a2 + 536);
LABEL_167:
    if (v71) {
      return 0;
    }
  }
  uint64_t v72 = *(void *)(a1 + 568);
  uint64_t v73 = *(void *)(a2 + 568);
  if (v72)
  {
    if (!v73 || !CMMsl::BraveHeartWorkoutEvent::operator==(v72, v73)) {
      return 0;
    }
  }
  else if (v73)
  {
    return 0;
  }
  uint64_t v74 = *(void *)(a1 + 3512);
  uint64_t v75 = *(void *)(a2 + 3512);
  if (v74)
  {
    if (!v75 || !CMMsl::WorkoutRecorderHealthKitInfo::operator==(v74, v75)) {
      return 0;
    }
  }
  else if (v75)
  {
    return 0;
  }
  uint64_t v76 = *(void *)(a1 + 2304);
  uint64_t v77 = *(void *)(a2 + 2304);
  if (v76)
  {
    if (!v77 || !CMMsl::PearlAttitude::operator==(v76, v77)) {
      return 0;
    }
  }
  else if (v77)
  {
    return 0;
  }
  uint64_t v78 = *(void *)(a1 + 2720);
  uint64_t v79 = *(void *)(a2 + 2720);
  if (v78)
  {
    if (!v79 || !CMMsl::RotationRate::operator==(v78, v79)) {
      return 0;
    }
  }
  else if (v79)
  {
    return 0;
  }
  uint64_t v80 = *(void *)(a1 + 3568);
  uint64_t v81 = *(void *)(a2 + 3568);
  if (v80)
  {
    if (!v81) {
      return 0;
    }
    uint64_t v82 = *(void *)(v80 + 8);
    uint64_t v83 = *(void *)(v81 + 8);
    if (v82)
    {
      if (!v83 || !CMMsl::WatchOrientationSettings::operator==(v82, v83)) {
        return 0;
      }
    }
    else if (v83)
    {
      return 0;
    }
  }
  else if (v81)
  {
    return 0;
  }
  uint64_t v84 = *(void *)(a1 + 3400);
  uint64_t v85 = *(void *)(a2 + 3400);
  if (v84)
  {
    if (!v85 || !CMMsl::WatchOnWristState::operator==(v84, v85)) {
      return 0;
    }
  }
  else if (v85)
  {
    return 0;
  }
  uint64_t v86 = *(void *)(a1 + 608);
  uint64_t v87 = *(void *)(a2 + 608);
  if (v86)
  {
    if (!v87 || !CMMsl::CatherineHealthKitData::operator==(v86, v87)) {
      return 0;
    }
  }
  else if (v87)
  {
    return 0;
  }
  uint64_t v88 = *(void *)(a1 + 3416);
  uint64_t v89 = *(void *)(a2 + 3416);
  if (!v88) {
    goto LABEL_211;
  }
  if (!v89) {
    return 0;
  }
  if (!sub_1002645A0((uint64_t *)(v88 + 8), v89 + 8))
  {
    uint64_t v89 = *(void *)(a1 + 3416) | *(void *)(a2 + 3416);
LABEL_211:
    if (v89) {
      return 0;
    }
  }
  uint64_t v90 = *(void *)(a1 + 1408);
  uint64_t v91 = *(void *)(a2 + 1408);
  if (v90)
  {
    if (!v91 || !CMMsl::InEarTransitionEntry::operator==(v90, v91) && *(void *)(a1 + 1408) | *(void *)(a2 + 1408)) {
      return 0;
    }
  }
  else if (v91)
  {
    return 0;
  }
  uint64_t v92 = *(void *)(a1 + 1392);
  uint64_t v93 = *(void *)(a2 + 1392);
  if (v92)
  {
    if (!v93 || !CMMsl::InEarSession::operator==(v92, v93)) {
      return 0;
    }
  }
  else if (v93)
  {
    return 0;
  }
  uint64_t v94 = *(void *)(a1 + 1352);
  uint64_t v95 = *(void *)(a2 + 1352);
  if (v94)
  {
    if (!v95 || !CMMsl::InEarBaseline::operator==(v94, v95) && *(void *)(a1 + 1352) | *(void *)(a2 + 1352)) {
      return 0;
    }
  }
  else if (v95)
  {
    return 0;
  }
  uint64_t v96 = *(void *)(a1 + 224);
  uint64_t v97 = *(void *)(a2 + 224);
  if (v96)
  {
    if (!v97 || !CMMsl::AccessoryProxSensorDrop::operator==(v96, v97) && *(void *)(a1 + 224) | *(void *)(a2 + 224)) {
      return 0;
    }
  }
  else if (v97)
  {
    return 0;
  }
  uint64_t v98 = *(void *)(a1 + 232);
  uint64_t v99 = *(void *)(a2 + 232);
  if (v98)
  {
    if (!v99 || !CMMsl::AccessoryProxTempComp::operator==(v98, v99)) {
      return 0;
    }
  }
  else if (v99)
  {
    return 0;
  }
  uint64_t v100 = *(void *)(a1 + 272);
  uint64_t v101 = *(void *)(a2 + 272);
  if (v100)
  {
    if (!v101 || !CMMsl::AccessoryWake::operator==(v100, v101) && *(void *)(a1 + 272) | *(void *)(a2 + 272)) {
      return 0;
    }
  }
  else if (v101)
  {
    return 0;
  }
  uint64_t v102 = *(void *)(a1 + 912);
  uint64_t v103 = *(void *)(a2 + 912);
  if (v102)
  {
    if (!v103 || !CMMsl::FacePose::operator==(v102, v103)) {
      return 0;
    }
  }
  else if (v103)
  {
    return 0;
  }
  uint64_t v104 = *(void *)(a1 + 3576);
  uint64_t v105 = *(void *)(a2 + 3576);
  if (v104)
  {
    if (!v105
      || !CMMsl::WorkoutRecorderWifiScanResults::operator==(v104, v105)
      && *(void *)(a1 + 3576) | *(void *)(a2 + 3576))
    {
      return 0;
    }
  }
  else if (v105)
  {
    return 0;
  }
  uint64_t v106 = *(void *)(a1 + 3544);
  uint64_t v107 = *(void *)(a2 + 3544);
  if (v106)
  {
    if (!v107) {
      return 0;
    }
    uint64_t v108 = *(void *)(v106 + 8);
    uint64_t v109 = *(void *)(v107 + 8);
    if (v108)
    {
      if (!v109 || !CMMsl::Pressure::operator==(v108, v109)) {
        return 0;
      }
    }
    else if (v109)
    {
      return 0;
    }
  }
  else if (v107)
  {
    return 0;
  }
  uint64_t v110 = *(void *)(a1 + 1344);
  uint64_t v111 = *(void *)(a2 + 1344);
  if (v110)
  {
    if (!v111
      || !CMMsl::InEarAdditionalState::operator==(v110, v111) && *(void *)(a1 + 1344) | *(void *)(a2 + 1344))
    {
      return 0;
    }
  }
  else if (v111)
  {
    return 0;
  }
  uint64_t v112 = *(void *)(a1 + 128);
  uint64_t v113 = *(void *)(a2 + 128);
  if (v112)
  {
    if (!v113 || !CMMsl::AccessoryDeviceMotion::operator==(v112, v113)) {
      return 0;
    }
  }
  else if (v113)
  {
    return 0;
  }
  uint64_t v114 = *(void *)(a1 + 3280);
  uint64_t v115 = *(void *)(a2 + 3280);
  if (v114)
  {
    if (!v115 || !CMMsl::VisionCompassBias::operator==(v114, v115)) {
      return 0;
    }
  }
  else if (v115)
  {
    return 0;
  }
  uint64_t v116 = *(void *)(a1 + 352);
  uint64_t v117 = *(void *)(a2 + 352);
  if (v116)
  {
    if (!v117) {
      return 0;
    }
    if (*(unsigned char *)(v116 + 12))
    {
      if ((*(unsigned char *)(v117 + 12) & 1) == 0 || *(_DWORD *)(v116 + 8) != *(_DWORD *)(v117 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v117 + 12))
    {
      return 0;
    }
  }
  else if (v117)
  {
    return 0;
  }
  uint64_t v118 = *(void *)(a1 + 3256);
  uint64_t v119 = *(void *)(a2 + 3256);
  if (v118)
  {
    if (!v119 || !CMMsl::VIOEstimation::operator==(v118, v119)) {
      return 0;
    }
  }
  else if (v119)
  {
    return 0;
  }
  uint64_t v120 = *(void *)(a1 + 1880);
  uint64_t v121 = *(void *)(a2 + 1880);
  if (v120)
  {
    if (!v121 || !CMMsl::LSLHeadingEstimation::operator==(v120, v121)) {
      return 0;
    }
  }
  else if (v121)
  {
    return 0;
  }
  uint64_t v122 = *(void *)(a1 + 1000);
  uint64_t v123 = *(void *)(a2 + 1000);
  if (v122)
  {
    if (!v123 || !CMMsl::FallSnippet::operator==(v122, v123)) {
      return 0;
    }
  }
  else if (v123)
  {
    return 0;
  }
  uint64_t v124 = *(void *)(a1 + 80);
  uint64_t v125 = *(void *)(a2 + 80);
  if (v124)
  {
    if (!v125 || !CMMsl::AccelerometerPace::operator==(v124, v125)) {
      return 0;
    }
  }
  else if (v125)
  {
    return 0;
  }
  uint64_t v126 = *(void *)(a1 + 2072);
  uint64_t v127 = *(void *)(a2 + 2072);
  if (v126)
  {
    if (!v127) {
      return 0;
    }
    if (*(unsigned char *)(v126 + 12))
    {
      if ((*(unsigned char *)(v127 + 12) & 1) == 0 || *(float *)(v126 + 8) != *(float *)(v127 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v127 + 12))
    {
      return 0;
    }
  }
  else if (v127)
  {
    return 0;
  }
  uint64_t v128 = *(void *)(a1 + 3032);
  uint64_t v129 = *(void *)(a2 + 3032);
  if (v128)
  {
    if (!v129 || !CMMsl::StepCountEntry::operator==(v128, v129) && *(void *)(a1 + 3032) | *(void *)(a2 + 3032)) {
      return 0;
    }
  }
  else if (v129)
  {
    return 0;
  }
  uint64_t v130 = *(void *)(a1 + 1960);
  uint64_t v131 = *(void *)(a2 + 1960);
  if (v130)
  {
    if (!v131 || !CMMsl::MobilityBoutMetrics::operator==(v130, v131)) {
      return 0;
    }
  }
  else if (v131)
  {
    return 0;
  }
  uint64_t v132 = *(void *)(a1 + 712);
  uint64_t v133 = *(void *)(a2 + 712);
  if (v132)
  {
    if (!v133 || !CMMsl::CoprocessorReplyGaitMetrics::operator==(v132, v133)) {
      return 0;
    }
  }
  else if (v133)
  {
    return 0;
  }
  uint64_t v134 = *(void *)(a1 + 3264);
  uint64_t v135 = *(void *)(a2 + 3264);
  if (v134)
  {
    if (!v135 || !CMMsl::VIOPose::operator==(v134, v135)) {
      return 0;
    }
  }
  else if (v135)
  {
    return 0;
  }
  uint64_t v136 = *(void *)(a1 + 2848);
  uint64_t v137 = *(void *)(a2 + 2848);
  if (v136)
  {
    if (!v137) {
      return 0;
    }
    if (*(unsigned char *)(v136 + 12))
    {
      if ((*(unsigned char *)(v137 + 12) & 1) == 0 || *(_DWORD *)(v136 + 8) != *(_DWORD *)(v137 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v137 + 12))
    {
      return 0;
    }
  }
  else if (v137)
  {
    return 0;
  }
  uint64_t v138 = *(void *)(a1 + 3272);
  uint64_t v139 = *(void *)(a2 + 3272);
  if (v138)
  {
    if (!v139 || !CMMsl::VIOReplayPose::operator==(v138, v139)) {
      return 0;
    }
  }
  else if (v139)
  {
    return 0;
  }
  uint64_t v140 = *(void *)(a1 + 3312);
  uint64_t v141 = *(void *)(a2 + 3312);
  if (v140)
  {
    if (!v141 || !CMMsl::VisualStateMeasurement::operator==(v140, v141)) {
      return 0;
    }
  }
  else if (v141)
  {
    return 0;
  }
  uint64_t v142 = *(void *)(a1 + 1752);
  uint64_t v143 = *(void *)(a2 + 1752);
  if (v142)
  {
    if (!v143 || !CMMsl::KappaTriggerDebug::operator==(v142, v143)) {
      return 0;
    }
  }
  else if (v143)
  {
    return 0;
  }
  uint64_t v144 = *(void *)(a1 + 1552);
  uint64_t v145 = *(void *)(a2 + 1552);
  if (v144)
  {
    if (!v145 || !CMMsl::KappaDirectionOfTravel::operator==(v144, v145)) {
      return 0;
    }
  }
  else if (v145)
  {
    return 0;
  }
  uint64_t v146 = *(void *)(a1 + 1328);
  uint64_t v147 = *(void *)(a2 + 1328);
  if (v146)
  {
    if (!v147) {
      return 0;
    }
    uint64_t v148 = *(void *)(v146 + 8);
    uint64_t v149 = *(void *)(v147 + 8);
    if (v148)
    {
      if (!v149 || !CMMsl::Accel::operator==(v148, v149)) {
        return 0;
      }
    }
    else if (v149)
    {
      return 0;
    }
  }
  else if (v147)
  {
    return 0;
  }
  uint64_t v150 = *(void *)(a1 + 1720);
  uint64_t v151 = *(void *)(a2 + 1720);
  if (v150)
  {
    if (!v151 || !CMMsl::KappaSteps::operator==(v150, v151)) {
      return 0;
    }
  }
  else if (v151)
  {
    return 0;
  }
  uint64_t v152 = *(void *)(a1 + 3176);
  uint64_t v153 = *(void *)(a2 + 3176);
  if (v152)
  {
    if (!v153 || !CMMsl::SignificantUserInteraction::operator==(v152, v153)) {
      return 0;
    }
  }
  else if (v153)
  {
    return 0;
  }
  uint64_t v154 = *(void *)(a1 + 1680);
  uint64_t v155 = *(void *)(a2 + 1680);
  if (v154)
  {
    if (!v155 || !CMMsl::KappaRoads::operator==(v154, v155)) {
      return 0;
    }
  }
  else if (v155)
  {
    return 0;
  }
  uint64_t v156 = *(void *)(a1 + 3184);
  uint64_t v157 = *(void *)(a2 + 3184);
  if (v156)
  {
    if (!v157 || (CMMsl::UserStudyEvent::operator==(v156, v157) & 1) == 0) {
      return 0;
    }
  }
  else if (v157)
  {
    return 0;
  }
  uint64_t v158 = *(void *)(a1 + 376);
  uint64_t v159 = *(void *)(a2 + 376);
  if (v158)
  {
    if (!v159 || !CMMsl::AuxiliaryDeviceMotion::operator==(v158, v159)) {
      return 0;
    }
  }
  else if (v159)
  {
    return 0;
  }
  uint64_t v160 = *(void *)(a1 + 3128);
  uint64_t v161 = *(void *)(a2 + 3128);
  if (v160)
  {
    if (!v161 || !CMMsl::TempestPoCAuxiliaryDeviceMotion::operator==(v160, v161)) {
      return 0;
    }
  }
  else if (v161)
  {
    return 0;
  }
  uint64_t v162 = *(void *)(a1 + 368);
  uint64_t v163 = *(void *)(a2 + 368);
  if (v162)
  {
    if (!v163 || !CMMsl::AudioAccessoryDeviceMotion::operator==(v162, v163)) {
      return 0;
    }
  }
  else if (v163)
  {
    return 0;
  }
  uint64_t v164 = *(void *)(a1 + 3136);
  uint64_t v165 = *(void *)(a2 + 3136);
  if (v164)
  {
    if (!v165 || !CMMsl::TempestPoCListenerOrientation::operator==(v164, v165)) {
      return 0;
    }
  }
  else if (v165)
  {
    return 0;
  }
  uint64_t v166 = *(void *)(a1 + 3456);
  uint64_t v167 = *(void *)(a2 + 3456);
  if (v166)
  {
    if (!v167) {
      return 0;
    }
    uint64_t v168 = *(void *)(v166 + 8);
    uint64_t v169 = *(void *)(v167 + 8);
    if (v168)
    {
      if (!v169 || !CMMsl::Accel::operator==(v168, v169)) {
        return 0;
      }
    }
    else if (v169)
    {
      return 0;
    }
  }
  else if (v167)
  {
    return 0;
  }
  uint64_t v170 = *(void *)(a1 + 296);
  uint64_t v171 = *(void *)(a2 + 296);
  if (v170)
  {
    if (!v171) {
      return 0;
    }
    if (*(unsigned char *)(v170 + 12))
    {
      if ((*(unsigned char *)(v171 + 12) & 1) == 0 || *(float *)(v170 + 8) != *(float *)(v171 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v171 + 12))
    {
      return 0;
    }
  }
  else if (v171)
  {
    return 0;
  }
  uint64_t v172 = *(void *)(a1 + 3440);
  uint64_t v173 = *(void *)(a2 + 3440);
  if (v172)
  {
    if (!v173 || !CMMsl::WorkoutRecorderALSData::operator==(v172, v173)) {
      return 0;
    }
  }
  else if (v173)
  {
    return 0;
  }
  uint64_t v174 = *(void *)(a1 + 3288);
  uint64_t v175 = *(void *)(a2 + 3288);
  if (v174)
  {
    if (!v175 || !CMMsl::VisualLocalization::operator==(v174, v175)) {
      return 0;
    }
  }
  else if (v175)
  {
    return 0;
  }
  uint64_t v176 = *(void *)(a1 + 1240);
  uint64_t v177 = *(void *)(a2 + 1240);
  if (v176)
  {
    if (!v177 || !CMMsl::GyroFactoryCalibrationData::operator==(v176, v177)) {
      return 0;
    }
  }
  else if (v177)
  {
    return 0;
  }
  uint64_t v178 = *(void *)(a1 + 2936);
  uint64_t v179 = *(void *)(a2 + 2936);
  if (v178)
  {
    if (!v179 || !CMMsl::SoundPressureLevel::operator==(v178, v179)) {
      return 0;
    }
  }
  else if (v179)
  {
    return 0;
  }
  uint64_t v180 = *(void *)(a1 + 1048);
  uint64_t v181 = *(void *)(a2 + 1048);
  if (v180)
  {
    if (!v181 || !CMMsl::FrequencyResponse::operator==(v180, v181)) {
      return 0;
    }
  }
  else if (v181)
  {
    return 0;
  }
  uint64_t v182 = *(void *)(a1 + 872);
  uint64_t v183 = *(void *)(a2 + 872);
  if (v182)
  {
    if (!v183) {
      return 0;
    }
    if (*(unsigned char *)(v182 + 12))
    {
      if ((*(unsigned char *)(v183 + 12) & 1) == 0 || *(_DWORD *)(v182 + 8) != *(_DWORD *)(v183 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v183 + 12))
    {
      return 0;
    }
  }
  else if (v183)
  {
    return 0;
  }
  uint64_t v184 = *(void *)(a1 + 32);
  uint64_t v185 = *(void *)(a2 + 32);
  if (v184)
  {
    if (!v185) {
      return 0;
    }
    uint64_t v186 = *(void *)(v184 + 8);
    uint64_t v187 = *(void *)(v185 + 8);
    if (v186)
    {
      if (!v187 || !CMMsl::Accel::operator==(v186, v187)) {
        return 0;
      }
    }
    else if (v187)
    {
      return 0;
    }
  }
  else if (v185)
  {
    return 0;
  }
  uint64_t v188 = *(void *)(a1 + 2024);
  uint64_t v189 = *(void *)(a2 + 2024);
  if (v188)
  {
    if (!v189 || !CMMsl::MotionLocation::operator==(v188, v189)) {
      return 0;
    }
  }
  else if (v189)
  {
    return 0;
  }
  uint64_t v190 = *(void *)(a1 + 1984);
  uint64_t v191 = *(void *)(a2 + 1984);
  if (v190)
  {
    if (!v191 || !CMMsl::MotionActivity::operator==(v190, v191)) {
      return 0;
    }
  }
  else if (v191)
  {
    return 0;
  }
  uint64_t v192 = *(void *)(a1 + 496);
  uint64_t v193 = *(void *)(a2 + 496);
  if (v192)
  {
    if (!v193 || !CMMsl::BioMotionPose::operator==(v192, v193)) {
      return 0;
    }
  }
  else if (v193)
  {
    return 0;
  }
  uint64_t v194 = *(void *)(a1 + 1736);
  uint64_t v195 = *(void *)(a2 + 1736);
  if (v194)
  {
    if (!v195 || !CMMsl::KappaTrigger::operator==(v194, v195)) {
      return 0;
    }
  }
  else if (v195)
  {
    return 0;
  }
  uint64_t v196 = *(void *)(a1 + 2664);
  uint64_t v197 = *(void *)(a2 + 2664);
  if (v196)
  {
    if (!v197 || !CMMsl::RelDMInSystemConfig::operator==(v196, v197)) {
      return 0;
    }
  }
  else if (v197)
  {
    return 0;
  }
  uint64_t v198 = *(void *)(a1 + 1464);
  uint64_t v199 = *(void *)(a2 + 1464);
  if (v198)
  {
    if (!v199) {
      return 0;
    }
    uint64_t v200 = *(void *)(v198 + 8);
    uint64_t v201 = *(void *)(v199 + 8);
    if (v200)
    {
      if (!v201 || !CMMsl::BioMotionPose::operator==(v200, v201)) {
        return 0;
      }
    }
    else if (v201)
    {
      return 0;
    }
  }
  else if (v199)
  {
    return 0;
  }
  uint64_t v202 = *(void *)(a1 + 704);
  uint64_t v203 = *(void *)(a2 + 704);
  if (v202)
  {
    if (!v203) {
      return 0;
    }
    uint64_t v204 = *(void *)(v202 + 8);
    uint64_t v205 = *(void *)(v203 + 8);
    if (v204)
    {
      if (!v205 || !CMMsl::BioMotionPose::operator==(v204, v205)) {
        return 0;
      }
    }
    else if (v205)
    {
      return 0;
    }
  }
  else if (v203)
  {
    return 0;
  }
  uint64_t v206 = *(void *)(a1 + 1208);
  uint64_t v207 = *(void *)(a2 + 1208);
  if (v206)
  {
    if (!v207 || !CMMsl::GyroCalibrationSample::operator==(v206, v207)) {
      return 0;
    }
  }
  else if (v207)
  {
    return 0;
  }
  uint64_t v208 = *(void *)(a1 + 1216);
  uint64_t v209 = *(void *)(a2 + 1216);
  if (v208)
  {
    if (!v209 || !CMMsl::GyroCalibrationSampleNonlinear::operator==(v208, v209)) {
      return 0;
    }
  }
  else if (v209)
  {
    return 0;
  }
  uint64_t v210 = *(void *)(a1 + 1200);
  uint64_t v211 = *(void *)(a2 + 1200);
  if (!v210) {
    goto LABEL_537;
  }
  if (!v211) {
    return 0;
  }
  if (!sub_1000F2FCC((uint64_t *)(v210 + 8), v211 + 8))
  {
    uint64_t v211 = *(void *)(a1 + 1200) | *(void *)(a2 + 1200);
LABEL_537:
    if (v211) {
      return 0;
    }
  }
  uint64_t v212 = *(void *)(a1 + 1192);
  uint64_t v213 = *(void *)(a2 + 1192);
  if (!v212) {
    goto LABEL_542;
  }
  if (!v213) {
    return 0;
  }
  if (!sub_1000F2560((uint64_t *)(v212 + 8), v213 + 8))
  {
    uint64_t v213 = *(void *)(a1 + 1192) | *(void *)(a2 + 1192);
LABEL_542:
    if (v213) {
      return 0;
    }
  }
  uint64_t v214 = *(void *)(a1 + 472);
  uint64_t v215 = *(void *)(a2 + 472);
  if (v214)
  {
    if (!v215 || !CMMsl::BioMotionClassification::operator==(v214, v215)) {
      return 0;
    }
  }
  else if (v215)
  {
    return 0;
  }
  uint64_t v216 = *(void *)(a1 + 1056);
  uint64_t v217 = *(void *)(a2 + 1056);
  if (v216)
  {
    if (!v217) {
      return 0;
    }
    uint64_t v218 = *(void *)(v216 + 8);
    uint64_t v219 = *(void *)(v217 + 8);
    if (v218)
    {
      if (!v219 || !CMMsl::BioMotionClassification::operator==(v218, v219)) {
        return 0;
      }
    }
    else if (v219)
    {
      return 0;
    }
  }
  else if (v217)
  {
    return 0;
  }
  uint64_t v220 = *(void *)(a1 + 1976);
  uint64_t v221 = *(void *)(a2 + 1976);
  if (v220)
  {
    if (!v221) {
      return 0;
    }
    uint64_t v222 = *(void *)(v220 + 8);
    uint64_t v223 = *(void *)(v221 + 8);
    if (v222)
    {
      if (!v223 || !CMMsl::BioMotionClassification::operator==(v222, v223)) {
        return 0;
      }
    }
    else if (v223)
    {
      return 0;
    }
  }
  else if (v221)
  {
    return 0;
  }
  uint64_t v224 = *(void *)(a1 + 1888);
  uint64_t v225 = *(void *)(a2 + 1888);
  if (v224)
  {
    if (!v225) {
      return 0;
    }
    uint64_t v226 = *(void *)(v224 + 8);
    uint64_t v227 = *(void *)(v225 + 8);
    if (v226)
    {
      if (!v227 || !CMMsl::BioMotionClassification::operator==(v226, v227)) {
        return 0;
      }
    }
    else if (v227)
    {
      return 0;
    }
  }
  else if (v225)
  {
    return 0;
  }
  uint64_t v228 = *(void *)(a1 + 2432);
  uint64_t v229 = *(void *)(a2 + 2432);
  if (v228)
  {
    if (!v229 || !CMMsl::Pose::operator==(v228, v229)) {
      return 0;
    }
  }
  else if (v229)
  {
    return 0;
  }
  uint64_t v230 = *(void *)(a1 + 2440);
  uint64_t v231 = *(void *)(a2 + 2440);
  if (v230)
  {
    if (!v231 || !CMMsl::PoseState::operator==(v230, v231)) {
      return 0;
    }
  }
  else if (v231)
  {
    return 0;
  }
  uint64_t v232 = *(void *)(a1 + 504);
  uint64_t v233 = *(void *)(a2 + 504);
  if (v232)
  {
    if (!v233 || !CMMsl::BioMotionPredictedPose::operator==(v232, v233)) {
      return 0;
    }
  }
  else if (v233)
  {
    return 0;
  }
  uint64_t v234 = *(void *)(a1 + 1472);
  uint64_t v235 = *(void *)(a2 + 1472);
  if (v234)
  {
    if (!v235) {
      return 0;
    }
    uint64_t v236 = *(void *)(v234 + 8);
    uint64_t v237 = *(void *)(v235 + 8);
    if (v236)
    {
      if (!v237 || !CMMsl::BioMotionPredictedPose::operator==(v236, v237)) {
        return 0;
      }
    }
    else if (v237)
    {
      return 0;
    }
  }
  else if (v235)
  {
    return 0;
  }
  uint64_t v238 = *(void *)(a1 + 696);
  uint64_t v239 = *(void *)(a2 + 696);
  if (v238)
  {
    if (!v239) {
      return 0;
    }
    uint64_t v240 = *(void *)(v238 + 8);
    uint64_t v241 = *(void *)(v239 + 8);
    if (v240)
    {
      if (!v241 || !CMMsl::BioMotionPredictedPose::operator==(v240, v241)) {
        return 0;
      }
    }
    else if (v241)
    {
      return 0;
    }
  }
  else if (v239)
  {
    return 0;
  }
  uint64_t v242 = *(void *)(a1 + 2544);
  uint64_t v243 = *(void *)(a2 + 2544);
  if (v242)
  {
    if (!v243) {
      return 0;
    }
    uint64_t v244 = *(void *)(v242 + 8);
    uint64_t v245 = *(void *)(v243 + 8);
    if (v244)
    {
      if (!v245 || !CMMsl::Pressure::operator==(v244, v245)) {
        return 0;
      }
    }
    else if (v245)
    {
      return 0;
    }
  }
  else if (v243)
  {
    return 0;
  }
  uint64_t v246 = *(void *)(a1 + 3328);
  uint64_t v247 = *(void *)(a2 + 3328);
  if (v246)
  {
    if (!v247 || !CMMsl::VO2MaxOutput::operator==(v246, v247)) {
      return 0;
    }
  }
  else if (v247)
  {
    return 0;
  }
  uint64_t v248 = *(void *)(a1 + 1904);
  uint64_t v249 = *(void *)(a2 + 1904);
  if (v248)
  {
    if (!v249 || !CMMsl::MagneticAccessoryType1::operator==(v248, v249)) {
      return 0;
    }
  }
  else if (v249)
  {
    return 0;
  }
  uint64_t v250 = *(void *)(a1 + 1912);
  uint64_t v251 = *(void *)(a2 + 1912);
  if (v250)
  {
    if (!v251) {
      return 0;
    }
    if (*(unsigned char *)(v250 + 12))
    {
      if ((*(unsigned char *)(v251 + 12) & 1) == 0 || *(unsigned __int8 *)(v250 + 8) != *(unsigned __int8 *)(v251 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v251 + 12))
    {
      return 0;
    }
  }
  else if (v251)
  {
    return 0;
  }
  uint64_t v252 = *(void *)(a1 + 2536);
  uint64_t v253 = *(void *)(a2 + 2536);
  if (v252)
  {
    if (!v253 || !CMMsl::PressureCalibration::operator==(v252, v253)) {
      return 0;
    }
  }
  else if (v253)
  {
    return 0;
  }
  uint64_t v254 = *(void *)(a1 + 3528);
  uint64_t v255 = *(void *)(a2 + 3528);
  if (v254)
  {
    if (!v255) {
      return 0;
    }
    uint64_t v256 = *(void *)(v254 + 8);
    uint64_t v257 = *(void *)(v255 + 8);
    if (v256)
    {
      if (!v257 || !CMMsl::Magnetometer::operator==(v256, v257)) {
        return 0;
      }
    }
    else if (v257)
    {
      return 0;
    }
  }
  else if (v255)
  {
    return 0;
  }
  uint64_t v258 = *(void *)(a1 + 3480);
  uint64_t v259 = *(void *)(a2 + 3480);
  if (v258)
  {
    if (!v259) {
      return 0;
    }
    uint64_t v260 = *(void *)(v258 + 8);
    uint64_t v261 = *(void *)(v259 + 8);
    if (v260)
    {
      if (!v261 || !CMMsl::CompassCalibration::operator==(v260, v261)) {
        return 0;
      }
    }
    else if (v261)
    {
      return 0;
    }
  }
  else if (v259)
  {
    return 0;
  }
  uint64_t v262 = *(void *)(a1 + 2656);
  uint64_t v263 = *(void *)(a2 + 2656);
  if (v262)
  {
    if (!v263 || !CMMsl::RawAudio::operator==(v262, v263)) {
      return 0;
    }
  }
  else if (v263)
  {
    return 0;
  }
  uint64_t v264 = *(void *)(a1 + 584);
  uint64_t v265 = *(void *)(a2 + 584);
  if (v264)
  {
    if (!v265 || !CMMsl::CV3DPredictedPose::operator==(v264, v265)) {
      return 0;
    }
  }
  else if (v265)
  {
    return 0;
  }
  uint64_t v266 = *(void *)(a1 + 480);
  uint64_t v267 = *(void *)(a2 + 480);
  if (v266)
  {
    if (!v267 || !CMMsl::BioMotionLinkLengthFitParameters::operator==(v266, v267)) {
      return 0;
    }
  }
  else if (v267)
  {
    return 0;
  }
  uint64_t v268 = *(void *)(a1 + 488);
  uint64_t v269 = *(void *)(a2 + 488);
  if (v268)
  {
    if (!v269 || !CMMsl::BioMotionOnlineLinkLengthUpdate::operator==(v268, v269)) {
      return 0;
    }
  }
  else if (v269)
  {
    return 0;
  }
  uint64_t v270 = *(void *)(a1 + 2128);
  uint64_t v271 = *(void *)(a2 + 2128);
  if (v270)
  {
    if (!v271 || !CMMsl::ODTPose::operator==(v270, v271)) {
      return 0;
    }
  }
  else if (v271)
  {
    return 0;
  }
  uint64_t v272 = *(void *)(a1 + 2392);
  uint64_t v273 = *(void *)(a2 + 2392);
  if (v272)
  {
    if (!v273 || !CMMsl::PencilTipForce::operator==(v272, v273)) {
      return 0;
    }
  }
  else if (v273)
  {
    return 0;
  }
  uint64_t v274 = *(void *)(a1 + 2400);
  uint64_t v275 = *(void *)(a2 + 2400);
  if (v274)
  {
    if (!v275 || !CMMsl::PencilTouch::operator==(v274, v275)) {
      return 0;
    }
  }
  else if (v275)
  {
    return 0;
  }
  uint64_t v276 = *(void *)(a1 + 384);
  uint64_t v277 = *(void *)(a2 + 384);
  if (v276)
  {
    if (!v277 || !CMMsl::AveragedALSData::operator==(v276, v277)) {
      return 0;
    }
  }
  else if (v277)
  {
    return 0;
  }
  uint64_t v278 = *(void *)(a1 + 3144);
  uint64_t v279 = *(void *)(a2 + 3144);
  if (v278)
  {
    if (!v279 || !CMMsl::Timestamp::operator==(v278, v279)) {
      return 0;
    }
  }
  else if (v279)
  {
    return 0;
  }
  uint64_t v280 = *(void *)(a1 + 344);
  uint64_t v281 = *(void *)(a2 + 344);
  if (v280)
  {
    if (!v281) {
      return 0;
    }
    uint64_t v282 = *(void *)(v280 + 8);
    uint64_t v283 = *(void *)(v281 + 8);
    if (v282)
    {
      if (!v283 || !CMMsl::CV3DSLAMState::operator==(v282, v283)) {
        return 0;
      }
    }
    else if (v283)
    {
      return 0;
    }
  }
  else if (v281)
  {
    return 0;
  }
  uint64_t v284 = *(void *)(a1 + 464);
  uint64_t v285 = *(void *)(a2 + 464);
  if (v284)
  {
    if (!v285) {
      return 0;
    }
    uint64_t v286 = *(void *)(v284 + 8);
    uint64_t v287 = *(void *)(v285 + 8);
    if (v286)
    {
      if (!v287 || !CMMsl::BioMotionAnchor::operator==(v286, v287)) {
        return 0;
      }
    }
    else if (v287)
    {
      return 0;
    }
  }
  else if (v285)
  {
    return 0;
  }
  uint64_t v288 = *(void *)(a1 + 512);
  uint64_t v289 = *(void *)(a2 + 512);
  if (v288)
  {
    if (!v289) {
      return 0;
    }
    uint64_t v290 = *(void *)(v288 + 8);
    uint64_t v291 = *(void *)(v289 + 8);
    if (v290)
    {
      if (!v291 || !CMMsl::PropagatedAnchor::operator==(v290, v291)) {
        return 0;
      }
    }
    else if (v291)
    {
      return 0;
    }
  }
  else if (v289)
  {
    return 0;
  }
  uint64_t v292 = *(void *)(a1 + 3360);
  uint64_t v293 = *(void *)(a2 + 3360);
  if (v292)
  {
    if (!v293 || !CMMsl::WalkingSteadinessClassification::operator==(v292, v293)) {
      return 0;
    }
  }
  else if (v293)
  {
    return 0;
  }
  uint64_t v294 = *(void *)(a1 + 3000);
  uint64_t v295 = *(void *)(a2 + 3000);
  if (v294)
  {
    if (!v295 || !CMMsl::SteadinessModelResult::operator==(v294, v295)) {
      return 0;
    }
  }
  else if (v295)
  {
    return 0;
  }
  uint64_t v296 = *(void *)(a1 + 2960);
  uint64_t v297 = *(void *)(a2 + 2960);
  if (v296)
  {
    if (!v297 || !CMMsl::SteadinessEvent::operator==(v296, v297)) {
      return 0;
    }
  }
  else if (v297)
  {
    return 0;
  }
  uint64_t v298 = *(void *)(a1 + 2984);
  uint64_t v299 = *(void *)(a2 + 2984);
  if (v298)
  {
    if (!v299 || !CMMsl::SteadinessModelGaitBaselineFeatures::operator==(v298, v299)) {
      return 0;
    }
  }
  else if (v299)
  {
    return 0;
  }
  uint64_t v300 = *(void *)(a1 + 2976);
  uint64_t v301 = *(void *)(a2 + 2976);
  if (v300)
  {
    if (!v301 || !CMMsl::SteadinessModelContinuousWalkingFeatures::operator==(v300, v301)) {
      return 0;
    }
  }
  else if (v301)
  {
    return 0;
  }
  uint64_t v302 = *(void *)(a1 + 3008);
  uint64_t v303 = *(void *)(a2 + 3008);
  if (v302)
  {
    if (!v303 || !CMMsl::SteadinessModelTemporalDispersionFeatures::operator==(v302, v303)) {
      return 0;
    }
  }
  else if (v303)
  {
    return 0;
  }
  uint64_t v304 = *(void *)(a1 + 3016);
  uint64_t v305 = *(void *)(a2 + 3016);
  if (v304)
  {
    if (!v305 || !CMMsl::SteadinessModelTemporalEntropyFeatures::operator==(v304, v305)) {
      return 0;
    }
  }
  else if (v305)
  {
    return 0;
  }
  uint64_t v306 = *(void *)(a1 + 2968);
  uint64_t v307 = *(void *)(a2 + 2968);
  if (v306)
  {
    if (!v307 || !CMMsl::SteadinessModelBalanceFeatures::operator==(v306, v307)) {
      return 0;
    }
  }
  else if (v307)
  {
    return 0;
  }
  uint64_t v308 = *(void *)(a1 + 1936);
  uint64_t v309 = *(void *)(a2 + 1936);
  if (v308)
  {
    if (!v309 || !CMMsl::MagnetometerReset::operator==(v308, v309)) {
      return 0;
    }
  }
  else if (v309)
  {
    return 0;
  }
  uint64_t v310 = *(void *)(a1 + 3560);
  uint64_t v311 = *(void *)(a2 + 3560);
  if (v310)
  {
    if (!v311) {
      return 0;
    }
    uint64_t v312 = *(void *)(v310 + 8);
    uint64_t v313 = *(void *)(v311 + 8);
    if (v312)
    {
      if (!v313 || !CMMsl::WatchOnWristState::operator==(v312, v313)) {
        return 0;
      }
    }
    else if (v313)
    {
      return 0;
    }
  }
  else if (v311)
  {
    return 0;
  }
  uint64_t v314 = *(void *)(a1 + 1840);
  uint64_t v315 = *(void *)(a2 + 1840);
  if (v314)
  {
    if (!v315 || !CMMsl::LiftToWakeOnHeadStatus::operator==(v314, v315)) {
      return 0;
    }
  }
  else if (v315)
  {
    return 0;
  }
  uint64_t v316 = *(void *)(a1 + 192);
  uint64_t v317 = *(void *)(a2 + 192);
  if (v316)
  {
    if (!v317 || !CMMsl::AccessoryMagnetometer::operator==(v316, v317)) {
      return 0;
    }
  }
  else if (v317)
  {
    return 0;
  }
  uint64_t v318 = *(void *)(a1 + 3040);
  uint64_t v319 = *(void *)(a2 + 3040);
  if (v318)
  {
    if (!v319 || !CMMsl::StepCountEntryAddition::operator==(v318, v319)) {
      return 0;
    }
  }
  else if (v319)
  {
    return 0;
  }
  uint64_t v320 = *(void *)(a1 + 3048);
  uint64_t v321 = *(void *)(a2 + 3048);
  if (v320)
  {
    if (!v321
      || !CMMsl::StepDistanceFusionResult::operator==(v320, v321) && *(void *)(a1 + 3048) | *(void *)(a2 + 3048))
    {
      return 0;
    }
  }
  else if (v321)
  {
    return 0;
  }
  uint64_t v322 = *(void *)(a1 + 2904);
  uint64_t v323 = *(void *)(a2 + 2904);
  if (!v322) {
    goto LABEL_810;
  }
  if (!v323) {
    return 0;
  }
  if (!sub_10022CAF8((uint64_t *)(v322 + 8), v323 + 8))
  {
    uint64_t v323 = *(void *)(a1 + 2904) | *(void *)(a2 + 2904);
LABEL_810:
    if (v323) {
      return 0;
    }
  }
  uint64_t v324 = *(void *)(a1 + 736);
  uint64_t v325 = *(void *)(a2 + 736);
  if (v324)
  {
    if (!v325 || !CMMsl::CVWatchCalories::operator==(v324, v325)) {
      return 0;
    }
  }
  else if (v325)
  {
    return 0;
  }
  uint64_t v326 = *(void *)(a1 + 888);
  uint64_t v327 = *(void *)(a2 + 888);
  if (v326)
  {
    if (!v327
      || !CMMsl::FaceBlendShapeCoefficientsSample::operator==(v326, v327)
      && *(void *)(a1 + 888) | *(void *)(a2 + 888))
    {
      return 0;
    }
  }
  else if (v327)
  {
    return 0;
  }
  uint64_t v328 = *(void *)(a1 + 456);
  uint64_t v329 = *(void *)(a2 + 456);
  if (v328)
  {
    if (!v329 || !CMMsl::BatteryStatus::operator==(v328, v329)) {
      return 0;
    }
  }
  else if (v329)
  {
    return 0;
  }
  uint64_t v330 = *(void *)(a1 + 1872);
  uint64_t v331 = *(void *)(a2 + 1872);
  if (v330)
  {
    if (!v331) {
      return 0;
    }
    if (*(unsigned char *)(v330 + 12))
    {
      if ((*(unsigned char *)(v331 + 12) & 1) == 0 || *(unsigned __int8 *)(v330 + 8) != *(unsigned __int8 *)(v331 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v331 + 12))
    {
      return 0;
    }
  }
  else if (v331)
  {
    return 0;
  }
  uint64_t v332 = *(void *)(a1 + 448);
  uint64_t v333 = *(void *)(a2 + 448);
  if (v332)
  {
    if (!v333) {
      return 0;
    }
    if (*(unsigned char *)(v332 + 12))
    {
      if ((*(unsigned char *)(v333 + 12) & 1) == 0 || *(unsigned __int8 *)(v332 + 8) != *(unsigned __int8 *)(v333 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v333 + 12))
    {
      return 0;
    }
  }
  else if (v333)
  {
    return 0;
  }
  uint64_t v334 = *(void *)(a1 + 2464);
  uint64_t v335 = *(void *)(a2 + 2464);
  if (v334)
  {
    if (!v335) {
      return 0;
    }
    if (*(unsigned char *)(v334 + 16))
    {
      if ((*(unsigned char *)(v335 + 16) & 1) == 0 || *(void *)(v334 + 8) != *(void *)(v335 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v335 + 16))
    {
      return 0;
    }
  }
  else if (v335)
  {
    return 0;
  }
  uint64_t v336 = *(void *)(a1 + 1040);
  uint64_t v337 = *(void *)(a2 + 1040);
  if (v336)
  {
    if (!v337 || !CMMsl::FocusModes::operator==(v336, v337)) {
      return 0;
    }
  }
  else if (v337)
  {
    return 0;
  }
  uint64_t v338 = *(void *)(a1 + 784);
  uint64_t v339 = *(void *)(a2 + 784);
  if (v338)
  {
    if (!v339) {
      return 0;
    }
    if (*(unsigned char *)(v338 + 12))
    {
      if ((*(unsigned char *)(v339 + 12) & 1) == 0 || *(unsigned __int8 *)(v338 + 8) != *(unsigned __int8 *)(v339 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v339 + 12))
    {
      return 0;
    }
  }
  else if (v339)
  {
    return 0;
  }
  uint64_t v340 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (!v340) {
      return 0;
    }
  }
  else if (v340)
  {
    return 0;
  }
  uint64_t v341 = *(void *)(a1 + 16);
  uint64_t v342 = *(void *)(a2 + 16);
  if (v341)
  {
    if (!v342 || (CMMsl::APWake::operator==(v341, v342) & 1) == 0) {
      return 0;
    }
  }
  else if (v342)
  {
    return 0;
  }
  uint64_t v343 = *(void *)(a1 + 320);
  uint64_t v344 = *(void *)(a2 + 320);
  if (v343)
  {
    if (!v344 || !CMMsl::AltimeterKF::operator==(v343, v344)) {
      return 0;
    }
  }
  else if (v344)
  {
    return 0;
  }
  uint64_t v345 = *(void *)(a1 + 1848);
  uint64_t v346 = *(void *)(a2 + 1848);
  if (v345)
  {
    if (!v346 || !CMMsl::LiftToWakeState::operator==(v345, v346)) {
      return 0;
    }
  }
  else if (v346)
  {
    return 0;
  }
  uint64_t v347 = *(void *)(a1 + 3248);
  uint64_t v348 = *(void *)(a2 + 3248);
  if (v347)
  {
    if (!v348 || !CMMsl::ViewObstructedState::operator==(v347, v348)) {
      return 0;
    }
  }
  else if (v348)
  {
    return 0;
  }
  uint64_t v349 = *(void *)(a1 + 2744);
  uint64_t v350 = *(void *)(a2 + 2744);
  if (v349)
  {
    if (!v350 || !CMMsl::RunningFormMetrics::operator==(v349, v350)) {
      return 0;
    }
  }
  else if (v350)
  {
    return 0;
  }
  uint64_t v351 = *(void *)(a1 + 3600);
  uint64_t v352 = *(void *)(a2 + 3600);
  if (!v351) {
    goto LABEL_901;
  }
  if (!v352) {
    return 0;
  }
  if (!sub_10026F8C0((uint64_t *)(v351 + 8), v352 + 8))
  {
    uint64_t v352 = *(void *)(a1 + 3600) | *(void *)(a2 + 3600);
LABEL_901:
    if (v352) {
      return 0;
    }
  }
  uint64_t v353 = *(void *)(a1 + 3592);
  uint64_t v354 = *(void *)(a2 + 3592);
  if (v353)
  {
    if (!v354
      || !CMMsl::WorkoutRecorderWorkoutSessionPriors::operator==(v353, v354)
      && *(void *)(a1 + 3592) | *(void *)(a2 + 3592))
    {
      return 0;
    }
  }
  else if (v354)
  {
    return 0;
  }
  uint64_t v355 = *(void *)(a1 + 360);
  uint64_t v356 = *(void *)(a2 + 360);
  if (v355)
  {
    if (!v356 || !CMMsl::ARKitWorldPose::operator==(v355, v356)) {
      return 0;
    }
  }
  else if (v356)
  {
    return 0;
  }
  uint64_t v357 = *(void *)(a1 + 2248);
  uint64_t v358 = *(void *)(a2 + 2248);
  if (v357)
  {
    if (!v358 || !CMMsl::PDRImpulse::operator==(v357, v358)) {
      return 0;
    }
  }
  else if (v358)
  {
    return 0;
  }
  uint64_t v359 = *(void *)(a1 + 2424);
  uint64_t v360 = *(void *)(a2 + 2424);
  if (v359)
  {
    if (!v360 || !CMMsl::PocketDetectionPacket::operator==(v359, v360)) {
      return 0;
    }
  }
  else if (v360)
  {
    return 0;
  }
  uint64_t v361 = *(void *)(a1 + 1832);
  uint64_t v362 = *(void *)(a2 + 1832);
  if (v361)
  {
    if (!v362 || !CMMsl::LiftToWakeFeaturesNeo::operator==(v361, v362)) {
      return 0;
    }
  }
  else if (v362)
  {
    return 0;
  }
  uint64_t v363 = *(void *)(a1 + 1856);
  uint64_t v364 = *(void *)(a2 + 1856);
  if (v363)
  {
    if (!v364 || !CMMsl::LiftToWakeStatusNeo::operator==(v363, v364)) {
      return 0;
    }
  }
  else if (v364)
  {
    return 0;
  }
  uint64_t v365 = *(void *)(a1 + 2752);
  uint64_t v366 = *(void *)(a2 + 2752);
  if (v365)
  {
    if (!v366 || !CMMsl::RunningPower::operator==(v365, v366)) {
      return 0;
    }
  }
  else if (v366)
  {
    return 0;
  }
  uint64_t v367 = *(void *)(a1 + 408);
  uint64_t v368 = *(void *)(a2 + 408);
  if (v367)
  {
    if (!v368 || !CMMsl::BasebandCompassCoex::operator==(v367, v368)) {
      return 0;
    }
  }
  else if (v368)
  {
    return 0;
  }
  uint64_t v369 = *(void *)(a1 + 416);
  uint64_t v370 = *(void *)(a2 + 416);
  if (v369)
  {
    if (!v370 || !CMMsl::BasebandCompassCoexConstraints::operator==(v369, v370)) {
      return 0;
    }
  }
  else if (v370)
  {
    return 0;
  }
  uint64_t v371 = *(void *)(a1 + 2000);
  uint64_t v372 = *(void *)(a2 + 2000);
  if (v371)
  {
    if (!v372 || !CMMsl::MotionContextActivity::operator==(v371, v372)) {
      return 0;
    }
  }
  else if (v372)
  {
    return 0;
  }
  uint64_t v373 = *(void *)(a1 + 2152);
  uint64_t v374 = *(void *)(a2 + 2152);
  if (v373)
  {
    if (!v374) {
      return 0;
    }
    if (*(unsigned char *)(v373 + 12))
    {
      if ((*(unsigned char *)(v374 + 12) & 1) == 0 || *(_DWORD *)(v373 + 8) != *(_DWORD *)(v374 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v374 + 12))
    {
      return 0;
    }
  }
  else if (v374)
  {
    return 0;
  }
  uint64_t v375 = *(void *)(a1 + 72);
  uint64_t v376 = *(void *)(a2 + 72);
  if (v375)
  {
    if (!v376 || !CMMsl::AccelTNBFrame::operator==(v375, v376)) {
      return 0;
    }
  }
  else if (v376)
  {
    return 0;
  }
  uint64_t v377 = *(void *)(a1 + 832);
  uint64_t v378 = *(void *)(a2 + 832);
  if (v377)
  {
    if (!v378 || !CMMsl::DoTEstimatorWithTNB::operator==(v377, v378)) {
      return 0;
    }
  }
  else if (v378)
  {
    return 0;
  }
  uint64_t v379 = *(void *)(a1 + 2256);
  uint64_t v380 = *(void *)(a2 + 2256);
  if (v379)
  {
    if (!v380 || !CMMsl::PdrMLModelOutput::operator==(v379, v380)) {
      return 0;
    }
  }
  else if (v380)
  {
    return 0;
  }
  uint64_t v381 = *(void *)(a1 + 1088);
  uint64_t v382 = *(void *)(a2 + 1088);
  if (v381)
  {
    if (!v382 || !CMMsl::GaitEventsModelOutput::operator==(v381, v382)) {
      return 0;
    }
  }
  else if (v382)
  {
    return 0;
  }
  uint64_t v383 = *(void *)(a1 + 1096);
  uint64_t v384 = *(void *)(a2 + 1096);
  if (v383)
  {
    if (!v384 || !CMMsl::GaitEventsStrideAggregation::operator==(v383, v384)) {
      return 0;
    }
  }
  else if (v384)
  {
    return 0;
  }
  uint64_t v385 = *(void *)(a1 + 1080);
  uint64_t v386 = *(void *)(a2 + 1080);
  if (v385)
  {
    if (!v386 || !CMMsl::GaitEventsHKResult::operator==(v385, v386)) {
      return 0;
    }
  }
  else if (v386)
  {
    return 0;
  }
  uint64_t v387 = *(void *)(a1 + 896);
  uint64_t v388 = *(void *)(a2 + 896);
  if (v387)
  {
    if (!v388 || !CMMsl::FaceCovered::operator==(v387, v388)) {
      return 0;
    }
  }
  else if (v388)
  {
    return 0;
  }
  uint64_t v389 = *(void *)(a1 + 3464);
  uint64_t v390 = *(void *)(a2 + 3464);
  if (v389)
  {
    if (!v390) {
      return 0;
    }
    uint64_t v391 = *(void *)(v389 + 8);
    uint64_t v392 = *(void *)(v390 + 8);
    if (v391)
    {
      if (!v392 || !CMMsl::AveragedALSData::operator==(v391, v392)) {
        return 0;
      }
    }
    else if (v392)
    {
      return 0;
    }
  }
  else if (v390)
  {
    return 0;
  }
  uint64_t v393 = *(void *)(a1 + 3088);
  uint64_t v394 = *(void *)(a2 + 3088);
  if (v393)
  {
    if (!v394 || !CMMsl::StrideCalEntry::operator==(v393, v394)) {
      return 0;
    }
  }
  else if (v394)
  {
    return 0;
  }
  uint64_t v395 = *(void *)(a1 + 2768);
  uint64_t v396 = *(void *)(a2 + 2768);
  if (v395)
  {
    if (!v396 || !CMMsl::RunningSpeedKFResult::operator==(v395, v396)) {
      return 0;
    }
  }
  else if (v396)
  {
    return 0;
  }
  uint64_t v397 = *(void *)(a1 + 2616);
  uint64_t v398 = *(void *)(a2 + 2616);
  if (v397)
  {
    if (!v398 || !CMMsl::ProxPDP::operator==(v397, v398)) {
      return 0;
    }
  }
  else if (v398)
  {
    return 0;
  }
  uint64_t v399 = *(void *)(a1 + 1792);
  uint64_t v400 = *(void *)(a2 + 1792);
  if (v399)
  {
    if (!v400 || !CMMsl::KeyboardMotionFeatures::operator==(v399, v400)) {
      return 0;
    }
  }
  else if (v400)
  {
    return 0;
  }
  uint64_t v401 = *(void *)(a1 + 1800);
  uint64_t v402 = *(void *)(a2 + 1800);
  if (v401)
  {
    if (!v402 || !CMMsl::KeyboardMotionState::operator==(v401, v402)) {
      return 0;
    }
  }
  else if (v402)
  {
    return 0;
  }
  uint64_t v403 = *(void *)(a1 + 304);
  uint64_t v404 = *(void *)(a2 + 304);
  if (v403)
  {
    if (!v404 || !CMMsl::ALSPhone::operator==(v403, v404)) {
      return 0;
    }
  }
  else if (v404)
  {
    return 0;
  }
  uint64_t v405 = *(void *)(a1 + 1784);
  uint64_t v406 = *(void *)(a2 + 1784);
  if (v405)
  {
    if (!v406 || !CMMsl::KeyboardKeyPress::operator==(v405, v406)) {
      return 0;
    }
  }
  else if (v406)
  {
    return 0;
  }
  uint64_t v407 = *(void *)(a1 + 3336);
  uint64_t v408 = *(void *)(a2 + 3336);
  if (v407)
  {
    if (!v408 || !CMMsl::WakeGestureNotification::operator==(v407, v408)) {
      return 0;
    }
  }
  else if (v408)
  {
    return 0;
  }
  uint64_t v409 = *(void *)(a1 + 2600);
  uint64_t v410 = *(void *)(a2 + 2600);
  if (v409)
  {
    if (!v410 || !CMMsl::ProxBaselineEstimatorState::operator==(v409, v410)) {
      return 0;
    }
  }
  else if (v410)
  {
    return 0;
  }
  uint64_t v411 = *(void *)(a1 + 432);
  uint64_t v412 = *(void *)(a2 + 432);
  if (v411)
  {
    if (!v412 || !CMMsl::BaselineResetCheck::operator==(v411, v412)) {
      return 0;
    }
  }
  else if (v412)
  {
    return 0;
  }
  uint64_t v413 = *(void *)(a1 + 2712);
  uint64_t v414 = *(void *)(a2 + 2712);
  if (v413)
  {
    if (!v414 || !CMMsl::RhythmicGnssOperatorStatus::operator==(v413, v414)) {
      return 0;
    }
  }
  else if (v414)
  {
    return 0;
  }
  uint64_t v415 = *(void *)(a1 + 1808);
  uint64_t v416 = *(void *)(a2 + 1808);
  if (v415)
  {
    if (!v416 || !CMMsl::KeyboardMotionTrackpad::operator==(v415, v416)) {
      return 0;
    }
  }
  else if (v416)
  {
    return 0;
  }
  uint64_t v417 = *(void *)(a1 + 1776);
  uint64_t v418 = *(void *)(a2 + 1776);
  if (v417)
  {
    if (!v418 || !CMMsl::KeyboardAttached::operator==(v417, v418)) {
      return 0;
    }
  }
  else if (v418)
  {
    return 0;
  }
  uint64_t v419 = *(void *)(a1 + 400);
  uint64_t v420 = *(void *)(a2 + 400);
  if (v419)
  {
    if (!v420 || (CMMsl::BacklightState::operator==(v419, v420) & 1) == 0) {
      return 0;
    }
  }
  else if (v420)
  {
    return 0;
  }
  uint64_t v421 = *(void *)(a1 + 440);
  uint64_t v422 = *(void *)(a2 + 440);
  if (v421)
  {
    if (!v422 || !CMMsl::BatchedLocationFromOdometer::operator==(v421, v422)) {
      return 0;
    }
  }
  else if (v422)
  {
    return 0;
  }
  uint64_t v423 = *(void *)(a1 + 1320);
  uint64_t v424 = *(void *)(a2 + 1320);
  if (v423)
  {
    if (!v424 || !CMMsl::HeartRateReference::operator==(v423, v424)) {
      return 0;
    }
  }
  else if (v424)
  {
    return 0;
  }
  uint64_t v425 = *(void *)(a1 + 2896);
  uint64_t v426 = *(void *)(a2 + 2896);
  if (v425)
  {
    if (!v426 || !CMMsl::Skeleton2D::operator==(v425, v426) && *(void *)(a1 + 2896) | *(void *)(a2 + 2896)) {
      return 0;
    }
  }
  else if (v426)
  {
    return 0;
  }
  uint64_t v427 = *(void *)(a1 + 2920);
  uint64_t v428 = *(void *)(a2 + 2920);
  if (v427)
  {
    if (!v428
      || !CMMsl::Skeleton3DRetargeted::operator==(v427, v428) && *(void *)(a1 + 2920) | *(void *)(a2 + 2920))
    {
      return 0;
    }
  }
  else if (v428)
  {
    return 0;
  }
  uint64_t v429 = *(void *)(a1 + 2912);
  uint64_t v430 = *(void *)(a2 + 2912);
  if (v429)
  {
    if (!v430 || !CMMsl::Skeleton3DLifted::operator==(v429, v430) && *(void *)(a1 + 2912) | *(void *)(a2 + 2912)) {
      return 0;
    }
  }
  else if (v430)
  {
    return 0;
  }
  uint64_t v431 = *(void *)(a1 + 1032);
  uint64_t v432 = *(void *)(a2 + 1032);
  if (v431)
  {
    if (!v432 || !CMMsl::FitnessMachineSample::operator==(v431, v432)) {
      return 0;
    }
  }
  else if (v432)
  {
    return 0;
  }
  uint64_t v433 = *(void *)(a1 + 3392);
  uint64_t v434 = *(void *)(a2 + 3392);
  if (v433)
  {
    if (!v434 || !CMMsl::WatchHeartRateData::operator==(v433, v434)) {
      return 0;
    }
  }
  else if (v434)
  {
    return 0;
  }
  uint64_t v435 = *(void *)(a1 + 920);
  uint64_t v436 = *(void *)(a2 + 920);
  if (v435)
  {
    if (!v436 || !CMMsl::FacePoseSynchronized::operator==(v435, v436)) {
      return 0;
    }
  }
  else if (v436)
  {
    return 0;
  }
  uint64_t v437 = *(void *)(a1 + 3368);
  uint64_t v438 = *(void *)(a2 + 3368);
  if (v437)
  {
    if (!v438 || !CMMsl::WatchActiveCalories::operator==(v437, v438)) {
      return 0;
    }
  }
  else if (v438)
  {
    return 0;
  }
  uint64_t v439 = *(void *)(a1 + 3376);
  uint64_t v440 = *(void *)(a2 + 3376);
  if (v439)
  {
    if (!v440 || !CMMsl::WatchBasalCalories::operator==(v439, v440)) {
      return 0;
    }
  }
  else if (v440)
  {
    return 0;
  }
  uint64_t v441 = *(void *)(a1 + 3160);
  uint64_t v442 = *(void *)(a2 + 3160);
  if (v441)
  {
    if (!v442 || !CMMsl::TrackRunData::operator==(v441, v442)) {
      return 0;
    }
  }
  else if (v442)
  {
    return 0;
  }
  uint64_t v443 = *(void *)(a1 + 1112);
  uint64_t v444 = *(void *)(a2 + 1112);
  if (v443)
  {
    if (!v444 || !CMMsl::GnssAvailabilityPredictorData::operator==(v443, v444)) {
      return 0;
    }
  }
  else if (v444)
  {
    return 0;
  }
  uint64_t v445 = *(void *)(a1 + 1120);
  uint64_t v446 = *(void *)(a2 + 1120);
  if (v445)
  {
    if (!v446
      || !CMMsl::GnssLeechLocationData::operator==(v445, v446) && *(void *)(a1 + 1120) | *(void *)(a2 + 1120))
    {
      return 0;
    }
  }
  else if (v446)
  {
    return 0;
  }
  uint64_t v447 = *(void *)(a1 + 1944);
  uint64_t v448 = *(void *)(a2 + 1944);
  if (v447)
  {
    if (!v448 || !CMMsl::MapsRouteHintData::operator==(v447, v448)) {
      return 0;
    }
  }
  else if (v448)
  {
    return 0;
  }
  uint64_t v449 = *(void *)(a1 + 1024);
  uint64_t v450 = *(void *)(a2 + 1024);
  if (v449)
  {
    if (!v450 || !CMMsl::FitnessMachineData::operator==(v449, v450)) {
      return 0;
    }
  }
  else if (v450)
  {
    return 0;
  }
  uint64_t v451 = *(void *)(a1 + 3504);
  uint64_t v452 = *(void *)(a2 + 3504);
  if (v451)
  {
    if (!v452) {
      return 0;
    }
    uint64_t v453 = *(void *)(v451 + 8);
    uint64_t v454 = *(void *)(v452 + 8);
    if (v453)
    {
      if (!v454 || !CMMsl::FitnessMachineData::operator==(v453, v454)) {
        return 0;
      }
    }
    else if (v454)
    {
      return 0;
    }
  }
  else if (v452)
  {
    return 0;
  }
  uint64_t v455 = *(void *)(a1 + 112);
  uint64_t v456 = *(void *)(a2 + 112);
  if (v455)
  {
    if (!v456 || !CMMsl::AccessoryActivityStateUpdate::operator==(v455, v456)) {
      return 0;
    }
  }
  else if (v456)
  {
    return 0;
  }
  uint64_t v457 = *(void *)(a1 + 2328);
  uint64_t v458 = *(void *)(a2 + 2328);
  if (v457)
  {
    if (!v458 || !CMMsl::PedestrianFenceExit::operator==(v457, v458)) {
      return 0;
    }
  }
  else if (v458)
  {
    return 0;
  }
  uint64_t v459 = *(void *)(a1 + 1416);
  uint64_t v460 = *(void *)(a2 + 1416);
  if (v459)
  {
    if (!v460 || !CMMsl::InertialOdometry::operator==(v459, v460)) {
      return 0;
    }
  }
  else if (v460)
  {
    return 0;
  }
  uint64_t v461 = *(void *)(a1 + 2408);
  uint64_t v462 = *(void *)(a2 + 2408);
  if (v461)
  {
    if (!v462 || !CMMsl::PhysicalEffortInput::operator==(v461, v462)) {
      return 0;
    }
  }
  else if (v462)
  {
    return 0;
  }
  uint64_t v463 = *(void *)(a1 + 2416);
  uint64_t v464 = *(void *)(a2 + 2416);
  if (v463)
  {
    if (!v464 || !CMMsl::PhysicalEffortSample::operator==(v463, v464)) {
      return 0;
    }
  }
  else if (v464)
  {
    return 0;
  }
  uint64_t v465 = *(void *)(a1 + 2320);
  uint64_t v466 = *(void *)(a2 + 2320);
  if (v465)
  {
    if (!v466 || !CMMsl::PedestrianCalorieModelDebugging::operator==(v465, v466)) {
      return 0;
    }
  }
  else if (v466)
  {
    return 0;
  }
  uint64_t v467 = *(void *)(a1 + 864);
  uint64_t v468 = *(void *)(a2 + 864);
  if (v467)
  {
    if (!v468 || !CMMsl::ElevationThreshold::operator==(v467, v468)) {
      return 0;
    }
  }
  else if (v468)
  {
    return 0;
  }
  uint64_t v469 = *(void *)(a1 + 1424);
  uint64_t v470 = *(void *)(a2 + 1424);
  if (v469)
  {
    if (!v470 || !CMMsl::InitialHistoricalMeanSeaLevelPressure::operator==(v469, v470)) {
      return 0;
    }
  }
  else if (v470)
  {
    return 0;
  }
  uint64_t v471 = *(void *)(a1 + 3424);
  uint64_t v472 = *(void *)(a2 + 3424);
  if (v471)
  {
    if (!v472 || !CMMsl::WorkoutActivity::operator==(v471, v472)) {
      return 0;
    }
  }
  else if (v472)
  {
    return 0;
  }
  uint64_t v473 = *(void *)(a1 + 2352);
  uint64_t v474 = *(void *)(a2 + 2352);
  if (v473)
  {
    if (!v474 || !CMMsl::PencilDeviceMotion::operator==(v473, v474)) {
      return 0;
    }
  }
  else if (v474)
  {
    return 0;
  }
  uint64_t v475 = *(void *)(a1 + 2376);
  uint64_t v476 = *(void *)(a2 + 2376);
  if (v475)
  {
    if (!v476 || !CMMsl::PencilFusionResult::operator==(v475, v476)) {
      return 0;
    }
  }
  else if (v476)
  {
    return 0;
  }
  uint64_t v477 = *(void *)(a1 + 1272);
  uint64_t v478 = *(void *)(a2 + 1272);
  if (v477)
  {
    if (!v478 || !CMMsl::HapticModuleState::operator==(v477, v478)) {
      return 0;
    }
  }
  else if (v478)
  {
    return 0;
  }
  uint64_t v479 = *(void *)(a1 + 2992);
  uint64_t v480 = *(void *)(a2 + 2992);
  if (v479)
  {
    if (!v480 || !CMMsl::SteadinessModelHarmonicFeatures::operator==(v479, v480)) {
      return 0;
    }
  }
  else if (v480)
  {
    return 0;
  }
  uint64_t v481 = *(void *)(a1 + 2368);
  uint64_t v482 = *(void *)(a2 + 2368);
  if (v481)
  {
    if (!v482 || !CMMsl::PencilFusionReplayResult::operator==(v481, v482)) {
      return 0;
    }
  }
  else if (v482)
  {
    return 0;
  }
  uint64_t v483 = *(void *)(a1 + 1968);
  uint64_t v484 = *(void *)(a2 + 1968);
  if (v483)
  {
    if (!v484 || !CMMsl::MobilitySmoothedGaitMetrics::operator==(v483, v484)) {
      return 0;
    }
  }
  else if (v484)
  {
    return 0;
  }
  uint64_t v485 = *(void *)(a1 + 3384);
  uint64_t v486 = *(void *)(a2 + 3384);
  if (v485)
  {
    if (!v486 || !CMMsl::WatchEnclosureMaterial::operator==(v485, v486)) {
      return 0;
    }
  }
  else if (v486)
  {
    return 0;
  }
  uint64_t v487 = *(void *)(a1 + 176);
  uint64_t v488 = *(void *)(a2 + 176);
  if (v487)
  {
    if (!v488 || !CMMsl::AccessoryHeartRate::operator==(v487, v488)) {
      return 0;
    }
  }
  else if (v488)
  {
    return 0;
  }
  uint64_t v489 = *(void *)(a1 + 208);
  uint64_t v490 = *(void *)(a2 + 208);
  if (v489)
  {
    if (!v490 || !CMMsl::AccessoryPPG::operator==(v489, v490) && *(void *)(a1 + 208) | *(void *)(a2 + 208)) {
      return 0;
    }
  }
  else if (v490)
  {
    return 0;
  }
  uint64_t v491 = *(void **)(a1 + 2032);
  uint64_t v492 = *(void **)(a2 + 2032);
  if (v491)
  {
    if (!v492 || !CMMsl::MotionLoiAltitudeData::operator==(v491, v492)) {
      return 0;
    }
  }
  else if (v492)
  {
    return 0;
  }
  uint64_t v493 = *(void *)(a1 + 776);
  uint64_t v494 = *(void *)(a2 + 776);
  if (v493)
  {
    if (!v494 || !CMMsl::DisplacingState::operator==(v493, v494)) {
      return 0;
    }
  }
  else if (v494)
  {
    return 0;
  }
  uint64_t v495 = *(void *)(a1 + 2448);
  uint64_t v496 = *(void *)(a2 + 2448);
  if (v495)
  {
    if (!v496 || !CMMsl::PostureJoint::operator==(v495, v496)) {
      return 0;
    }
  }
  else if (v496)
  {
    return 0;
  }
  uint64_t v497 = *(void *)(a1 + 2456);
  uint64_t v498 = *(void *)(a2 + 2456);
  if (v497)
  {
    if (!v498) {
      return 0;
    }
    if (sub_1001FBEE0((uint64_t *)(v497 + 8), v498 + 8)) {
      goto LABEL_1275;
    }
    uint64_t v498 = *(void *)(a1 + 2456) | *(void *)(a2 + 2456);
  }
  if (v498) {
    return 0;
  }
LABEL_1275:
  uint64_t v499 = *(void *)(a1 + 1336);
  uint64_t v500 = *(void *)(a2 + 1336);
  if (v499)
  {
    if (!v500 || !CMMsl::HIDShower::operator==(v499, v500)) {
      return 0;
    }
  }
  else if (v500)
  {
    return 0;
  }
  uint64_t v501 = *(void *)(a1 + 3496);
  uint64_t v502 = *(void *)(a2 + 3496);
  if (v501)
  {
    if (!v502) {
      return 0;
    }
    uint64_t v503 = *(void *)(v501 + 8);
    uint64_t v504 = *(void *)(v502 + 8);
    if (v503)
    {
      if (!v504 || !CMMsl::FaceCovered::operator==(v503, v504)) {
        return 0;
      }
    }
    else if (v504)
    {
      return 0;
    }
  }
  else if (v502)
  {
    return 0;
  }
  uint64_t v505 = *(void *)(a1 + 3072);
  uint64_t v506 = *(void *)(a2 + 3072);
  if (v505)
  {
    if (!v506) {
      return 0;
    }
    uint64_t v507 = *(void *)(v505 + 8);
    uint64_t v508 = *(void *)(v506 + 8);
    if (v507)
    {
      if (!v508 || !CMMsl::OnsetHeartRateData::operator==(v507, v508)) {
        return 0;
      }
    }
    else if (v508)
    {
      return 0;
    }
  }
  else if (v506)
  {
    return 0;
  }
  uint64_t v509 = *(void *)(a1 + 3168);
  uint64_t v510 = *(void *)(a2 + 3168);
  if (v509)
  {
    if (!v510 || !CMMsl::UltraFastAccel::operator==(v509, v510)) {
      return 0;
    }
  }
  else if (v510)
  {
    return 0;
  }
  uint64_t v511 = *(void *)(a1 + 24);
  uint64_t v512 = *(void *)(a2 + 24);
  if (v511)
  {
    if (!v512 || !CMMsl::Accel::operator==(v511, v512)) {
      return 0;
    }
  }
  else if (v512)
  {
    return 0;
  }
  uint64_t v513 = *(void *)(a1 + 40);
  uint64_t v514 = *(void *)(a2 + 40);
  if (v513)
  {
    if (!v514 || !CMMsl::AccelBatch::operator==(v513, v514)) {
      return 0;
    }
  }
  else if (v514)
  {
    return 0;
  }
  uint64_t v515 = *(void *)(a1 + 64);
  uint64_t v516 = *(void *)(a2 + 64);
  if (v515)
  {
    if (!v516) {
      return 0;
    }
    uint64_t v517 = *(void *)(v515 + 8);
    uint64_t v518 = *(void *)(v516 + 8);
    if (v517)
    {
      if (!v518 || !CMMsl::Accel::operator==(v517, v518)) {
        return 0;
      }
    }
    else if (v518)
    {
      return 0;
    }
  }
  else if (v516)
  {
    return 0;
  }
  uint64_t v519 = *(void *)(a1 + 48);
  uint64_t v520 = *(void *)(a2 + 48);
  if (v519)
  {
    if (!v520) {
      return 0;
    }
    uint64_t v521 = *(void *)(v519 + 8);
    uint64_t v522 = *(void *)(v520 + 8);
    if (v521)
    {
      if (!v522 || !CMMsl::Accel::operator==(v521, v522)) {
        return 0;
      }
    }
    else if (v522)
    {
      return 0;
    }
  }
  else if (v520)
  {
    return 0;
  }
  uint64_t v523 = *(void *)(a1 + 1144);
  uint64_t v524 = *(void *)(a2 + 1144);
  if (v523)
  {
    if (!v524 || !CMMsl::Gyro::operator==(v523, v524)) {
      return 0;
    }
  }
  else if (v524)
  {
    return 0;
  }
  uint64_t v525 = *(void *)(a1 + 1256);
  uint64_t v526 = *(void *)(a2 + 1256);
  if (v525)
  {
    if (!v526 || !CMMsl::GyroOscarEmu::operator==(v525, v526)) {
      return 0;
    }
  }
  else if (v526)
  {
    return 0;
  }
  uint64_t v527 = *(void *)(a1 + 1264);
  uint64_t v528 = *(void *)(a2 + 1264);
  if (v527)
  {
    if (!v528 || !CMMsl::GyroTemperature::operator==(v527, v528)) {
      return 0;
    }
  }
  else if (v528)
  {
    return 0;
  }
  uint64_t v529 = *(void *)(a1 + 1152);
  uint64_t v530 = *(void *)(a2 + 1152);
  if (v529)
  {
    if (!v530 || !CMMsl::GyroBiasAndVariance::operator==(v529, v530)) {
      return 0;
    }
  }
  else if (v530)
  {
    return 0;
  }
  uint64_t v531 = *(void *)(a1 + 1184);
  uint64_t v532 = *(void *)(a2 + 1184);
  if (v531)
  {
    if (!v532 || !CMMsl::GyroBiasFit::operator==(v531, v532)) {
      return 0;
    }
  }
  else if (v532)
  {
    return 0;
  }
  uint64_t v533 = *(void *)(a1 + 1232);
  uint64_t v534 = *(void *)(a2 + 1232);
  if (v533)
  {
    if (!v534) {
      return 0;
    }
    if (*(unsigned char *)(v533 + 12))
    {
      if ((*(unsigned char *)(v534 + 12) & 1) == 0 || *(float *)(v533 + 8) != *(float *)(v534 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v534 + 12))
    {
      return 0;
    }
  }
  else if (v534)
  {
    return 0;
  }
  uint64_t v535 = *(void *)(a1 + 1920);
  uint64_t v536 = *(void *)(a2 + 1920);
  if (v535)
  {
    if (!v536 || !CMMsl::Magnetometer::operator==(v535, v536)) {
      return 0;
    }
  }
  else if (v536)
  {
    return 0;
  }
  uint64_t v537 = *(void *)(a1 + 640);
  uint64_t v538 = *(void *)(a2 + 640);
  if (v537)
  {
    if (!v538 || !CMMsl::Compass::operator==(v537, v538)) {
      return 0;
    }
  }
  else if (v538)
  {
    return 0;
  }
  uint64_t v539 = *(void *)(a1 + 648);
  uint64_t v540 = *(void *)(a2 + 648);
  if (v539)
  {
    if (!v540 || !CMMsl::CompassAlignment::operator==(v539, v540)) {
      return 0;
    }
  }
  else if (v540)
  {
    return 0;
  }
  uint64_t v541 = *(void *)(a1 + 1224);
  uint64_t v542 = *(void *)(a2 + 1224);
  if (v541)
  {
    if (!v542 || !CMMsl::GyroCompass::operator==(v541, v542)) {
      return 0;
    }
  }
  else if (v542)
  {
    return 0;
  }
  uint64_t v543 = *(void *)(a1 + 656);
  uint64_t v544 = *(void *)(a2 + 656);
  if (v543)
  {
    if (!v544 || !CMMsl::CompassCalibration::operator==(v543, v544)) {
      return 0;
    }
  }
  else if (v544)
  {
    return 0;
  }
  uint64_t v545 = *(void *)(a1 + 2528);
  uint64_t v546 = *(void *)(a2 + 2528);
  if (v545)
  {
    if (!v546 || !CMMsl::Pressure::operator==(v545, v546)) {
      return 0;
    }
  }
  else if (v546)
  {
    return 0;
  }
  uint64_t v547 = *(void *)(a1 + 2584);
  uint64_t v548 = *(void *)(a2 + 2584);
  if (v547)
  {
    if (!v548) {
      return 0;
    }
    uint64_t v549 = *(void *)(v547 + 8);
    uint64_t v550 = *(void *)(v548 + 8);
    if (v549)
    {
      if (!v550 || !CMMsl::Pressure::operator==(v549, v550)) {
        return 0;
      }
    }
    else if (v550)
    {
      return 0;
    }
  }
  else if (v548)
  {
    return 0;
  }
  uint64_t v551 = *(void *)(a1 + 2552);
  uint64_t v552 = *(void *)(a2 + 2552);
  if (v551)
  {
    if (!v552) {
      return 0;
    }
    uint64_t v553 = *(void *)(v551 + 8);
    uint64_t v554 = *(void *)(v552 + 8);
    if (v553)
    {
      if (!v554 || !CMMsl::Pressure::operator==(v553, v554)) {
        return 0;
      }
    }
    else if (v554)
    {
      return 0;
    }
  }
  else if (v552)
  {
    return 0;
  }
  uint64_t v555 = *(void *)(a1 + 2592);
  uint64_t v556 = *(void *)(a2 + 2592);
  if (v555)
  {
    if (!v556 || !CMMsl::Prox::operator==(v555, v556)) {
      return 0;
    }
  }
  else if (v556)
  {
    return 0;
  }
  uint64_t v557 = *(void *)(a1 + 3152);
  uint64_t v558 = *(void *)(a2 + 3152);
  if (v557)
  {
    if (!v558 || !CMMsl::TouchOscarEmu::operator==(v557, v558)) {
      return 0;
    }
  }
  else if (v558)
  {
    return 0;
  }
  uint64_t v559 = *(void *)(a1 + 744);
  uint64_t v560 = *(void *)(a2 + 744);
  if (v559)
  {
    if (!v560 || !CMMsl::DeviceMotion::operator==(v559, v560)) {
      return 0;
    }
  }
  else if (v560)
  {
    return 0;
  }
  uint64_t v561 = *(void *)(a1 + 2048);
  uint64_t v562 = *(void *)(a2 + 2048);
  if (v561)
  {
    if (!v562 || !CMMsl::MotionStateUpdate::operator==(v561, v562)) {
      return 0;
    }
  }
  else if (v562)
  {
    return 0;
  }
  uint64_t v563 = *(void *)(a1 + 56);
  uint64_t v564 = *(void *)(a2 + 56);
  if (v563)
  {
    if (!v564 || !CMMsl::AccelGps::operator==(v563, v564)) {
      return 0;
    }
  }
  else if (v564)
  {
    return 0;
  }
  uint64_t v565 = *(void *)(a1 + 1248);
  uint64_t v566 = *(void *)(a2 + 1248);
  if (v565)
  {
    if (!v566 || !CMMsl::GyroGps::operator==(v565, v566)) {
      return 0;
    }
  }
  else if (v566)
  {
    return 0;
  }
  uint64_t v567 = *(void *)(a1 + 2576);
  uint64_t v568 = *(void *)(a2 + 2576);
  if (v567)
  {
    if (!v568) {
      return 0;
    }
    uint64_t v569 = *(void *)(v567 + 8);
    uint64_t v570 = *(void *)(v568 + 8);
    if (v569)
    {
      if (!v570 || !CMMsl::Pressure::operator==(v569, v570)) {
        return 0;
      }
    }
    else if (v570)
    {
      return 0;
    }
  }
  else if (v568)
  {
    return 0;
  }
  uint64_t v571 = *(void *)(a1 + 392);
  uint64_t v572 = *(void *)(a2 + 392);
  if (v571)
  {
    if (!v572 || !CMMsl::BTConnection::operator==(v571, v572)) {
      return 0;
    }
  }
  else if (v572)
  {
    return 0;
  }
  uint64_t v573 = *(void *)(a1 + 2840);
  uint64_t v574 = *(void *)(a2 + 2840);
  if (v573)
  {
    if (!v574 || !CMMsl::SessionOverride::operator==(v573, v574)) {
      return 0;
    }
  }
  else if (v574)
  {
    return 0;
  }
  uint64_t v575 = *(void *)(a1 + 1864);
  uint64_t v576 = *(void *)(a2 + 1864);
  if (v575)
  {
    if (!v576 || !CMMsl::LocationOscarEmu::operator==(v575, v576)) {
      return 0;
    }
  }
  else if (v576)
  {
    return 0;
  }
  uint64_t v577 = *(void *)(a1 + 2016);
  uint64_t v578 = *(void *)(a2 + 2016);
  if (v577)
  {
    if (!v578 || !CMMsl::MotionHint::operator==(v577, v578)) {
      return 0;
    }
  }
  else if (v578)
  {
    return 0;
  }
  uint64_t v579 = *(void *)(a1 + 880);
  uint64_t v580 = *(void *)(a2 + 880);
  if (v579)
  {
    if (!v580 || !CMMsl::EnhancedDeviceMotion::operator==(v579, v580)) {
      return 0;
    }
  }
  else if (v580)
  {
    return 0;
  }
  uint64_t v581 = *(void *)(a1 + 2104);
  uint64_t v582 = *(void *)(a2 + 2104);
  if (v581)
  {
    if (!v582 || !CMMsl::NonlinearBiasFit::operator==(v581, v582) && *(void *)(a1 + 2104) | *(void *)(a2 + 2104)) {
      return 0;
    }
  }
  else if (v582)
  {
    return 0;
  }
  uint64_t v583 = *(void *)(a1 + 2096);
  uint64_t v584 = *(void *)(a2 + 2096);
  if (v583)
  {
    if (!v584 || !CMMsl::NatalieData::operator==(v583, v584)) {
      return 0;
    }
  }
  else if (v584)
  {
    return 0;
  }
  uint64_t v585 = *(void *)(a1 + 528);
  uint64_t v586 = *(void *)(a2 + 528);
  if (v585)
  {
    if (!v586 || !CMMsl::BodyMetrics::operator==(v585, v586)) {
      return 0;
    }
  }
  else if (v586)
  {
    return 0;
  }
  uint64_t v587 = *(void *)(a1 + 3432);
  uint64_t v588 = *(void *)(a2 + 3432);
  if (v587)
  {
    if (!v588 || !CMMsl::WorkoutEvent::operator==(v587, v588)) {
      return 0;
    }
  }
  else if (v588)
  {
    return 0;
  }
  uint64_t v589 = *(void *)(a1 + 2136);
  uint64_t v590 = *(void *)(a2 + 2136);
  if (v589)
  {
    if (!v590 || !CMMsl::OnsetHeartRateData::operator==(v589, v590)) {
      return 0;
    }
  }
  else if (v590)
  {
    return 0;
  }
  uint64_t v591 = *(void *)(a1 + 3064);
  uint64_t v592 = *(void *)(a2 + 3064);
  if (v591)
  {
    if (!v592) {
      return 0;
    }
    uint64_t v593 = *(void *)(v591 + 8);
    uint64_t v594 = *(void *)(v592 + 8);
    if (v593)
    {
      if (!v594 || !CMMsl::OnsetHeartRateData::operator==(v593, v594)) {
        return 0;
      }
    }
    else if (v594)
    {
      return 0;
    }
  }
  else if (v592)
  {
    return 0;
  }
  uint64_t v595 = *(void *)(a1 + 848);
  uint64_t v596 = *(void *)(a2 + 848);
  if (v595)
  {
    if (!v596 || !CMMsl::ElevationChange::operator==(v595, v596)) {
      return 0;
    }
  }
  else if (v596)
  {
    return 0;
  }
  uint64_t v597 = *(void *)(a1 + 632);
  uint64_t v598 = *(void *)(a2 + 632);
  if (v597)
  {
    if (!v598 || !CMMsl::CoarseElevationChange::operator==(v597, v598)) {
      return 0;
    }
  }
  else if (v598)
  {
    return 0;
  }
  uint64_t v599 = *(void *)(a1 + 2008);
  uint64_t v600 = *(void *)(a2 + 2008);
  if (v599)
  {
    if (!v600 || !CMMsl::MotionGPSLocation::operator==(v599, v600)) {
      return 0;
    }
  }
  else if (v600)
  {
    return 0;
  }
  uint64_t v601 = *(void *)(a1 + 2064);
  uint64_t v602 = *(void *)(a2 + 2064);
  if (v601)
  {
    if (!v602) {
      return 0;
    }
    uint64_t v603 = *(void *)(v601 + 8);
    uint64_t v604 = *(void *)(v602 + 8);
    if (v603)
    {
      if (!v604 || !CMMsl::MotionGPSLocation::operator==(v603, v604)) {
        return 0;
      }
    }
    else if (v604)
    {
      return 0;
    }
  }
  else if (v602)
  {
    return 0;
  }
  uint64_t v605 = *(void *)(a1 + 3080);
  uint64_t v606 = *(void *)(a2 + 3080);
  if (v605)
  {
    if (!v606 || !CMMsl::StrideCalBin::operator==(v605, v606)) {
      return 0;
    }
  }
  else if (v606)
  {
    return 0;
  }
  uint64_t v607 = *(void *)(a1 + 600);
  uint64_t v608 = *(void *)(a2 + 600);
  if (v607)
  {
    if (!v608) {
      return 0;
    }
    if (*(unsigned char *)(v607 + 12))
    {
      if ((*(unsigned char *)(v608 + 12) & 1) == 0 || *(unsigned __int8 *)(v607 + 8) != *(unsigned __int8 *)(v608 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v608 + 12))
    {
      return 0;
    }
  }
  else if (v608)
  {
    return 0;
  }
  uint64_t v609 = *(void *)(a1 + 2112);
  uint64_t v610 = *(void *)(a2 + 2112);
  if (v609)
  {
    if (!v610 || !CMMsl::Odometer::operator==(v609, v610)) {
      return 0;
    }
  }
  else if (v610)
  {
    return 0;
  }
  uint64_t v611 = *(void *)(a1 + 1952);
  uint64_t v612 = *(void *)(a2 + 1952);
  if (v611)
  {
    if (!v612 || !CMMsl::MetsInfo::operator==(v611, v612)) {
      return 0;
    }
  }
  else if (v612)
  {
    return 0;
  }
  uint64_t v613 = *(void *)(a1 + 1008);
  uint64_t v614 = *(void *)(a2 + 1008);
  if (v613)
  {
    if (!v614 || !CMMsl::FallStats::operator==(v613, v614)) {
      return 0;
    }
  }
  else if (v614)
  {
    return 0;
  }
  uint64_t v615 = *(void *)(a1 + 424);
  uint64_t v616 = *(void *)(a2 + 424);
  if (v615)
  {
    if (!v616 || !CMMsl::BasebandSpeed::operator==(v615, v616)) {
      return 0;
    }
  }
  else if (v616)
  {
    return 0;
  }
  uint64_t v617 = *(void *)(a1 + 3216);
  uint64_t v618 = *(void *)(a2 + 3216);
  if (v617)
  {
    if (!v618) {
      return 0;
    }
    if (*(unsigned char *)(v617 + 12))
    {
      if ((*(unsigned char *)(v618 + 12) & 1) == 0 || *(unsigned __int8 *)(v617 + 8) != *(unsigned __int8 *)(v618 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v618 + 12))
    {
      return 0;
    }
  }
  else if (v618)
  {
    return 0;
  }
  uint64_t v619 = *(void *)(a1 + 3024);
  uint64_t v620 = *(void *)(a2 + 3024);
  if (v619)
  {
    if (!v620 || !CMMsl::StepCadenceToStrideLengthBin::operator==(v619, v620)) {
      return 0;
    }
  }
  else if (v620)
  {
    return 0;
  }
  uint64_t v621 = *(void *)(a1 + 3408);
  uint64_t v622 = *(void *)(a2 + 3408);
  if (v621)
  {
    if (!v622 || !CMMsl::WatchOrientationSettings::operator==(v621, v622)) {
      return 0;
    }
  }
  else if (v622)
  {
    return 0;
  }
  uint64_t v623 = *(void *)(a1 + 2056);
  uint64_t v624 = *(void *)(a2 + 2056);
  if (v623)
  {
    if (!v624) {
      return 0;
    }
    if (*(unsigned char *)(v623 + 12))
    {
      if ((*(unsigned char *)(v624 + 12) & 1) == 0 || *(unsigned __int8 *)(v623 + 8) != *(unsigned __int8 *)(v624 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v624 + 12))
    {
      return 0;
    }
  }
  else if (v624)
  {
    return 0;
  }
  uint64_t v625 = *(void *)(a1 + 2040);
  uint64_t v626 = *(void *)(a2 + 2040);
  if (v625)
  {
    if (!v626 || !CMMsl::MotionLoiData::operator==(v625, v626)) {
      return 0;
    }
  }
  else if (v626)
  {
    return 0;
  }
  uint64_t v627 = *(void *)(a1 + 2120);
  uint64_t v628 = *(void *)(a2 + 2120);
  if (v627)
  {
    if (!v628 || !CMMsl::OdometerWithAltitude::operator==(v627, v628)) {
      return 0;
    }
  }
  else if (v628)
  {
    return 0;
  }
  uint64_t v629 = *(void *)(a1 + 2568);
  uint64_t v630 = *(void *)(a2 + 2568);
  if (v629)
  {
    if (!v630 || !CMMsl::PressureFilteredNoTemperature::operator==(v629, v630)) {
      return 0;
    }
  }
  else if (v630)
  {
    return 0;
  }
  uint64_t v631 = *(void *)(a1 + 1400);
  uint64_t v632 = *(void *)(a2 + 1400);
  if (v631)
  {
    if (!v632 || !CMMsl::InEarTransition::operator==(v631, v632)) {
      return 0;
    }
  }
  else if (v632)
  {
    return 0;
  }
  uint64_t v633 = *(void *)(a1 + 624);
  uint64_t v634 = *(void *)(a2 + 624);
  if (v633)
  {
    if (!v634 || !CMMsl::ClefCalibration::operator==(v633, v634) && *(void *)(a1 + 624) | *(void *)(a2 + 624)) {
      return 0;
    }
  }
  else if (v634)
  {
    return 0;
  }
  uint64_t v635 = *(void *)(a1 + 288);
  uint64_t v636 = *(void *)(a2 + 288);
  if (v635)
  {
    if (!v636 || !CMMsl::AirpodEvent::operator==(v635, v636)) {
      return 0;
    }
  }
  else if (v636)
  {
    return 0;
  }
  uint64_t v637 = *(void *)(a1 + 1384);
  uint64_t v638 = *(void *)(a2 + 1384);
  if (v637)
  {
    if (!v638 || !CMMsl::InEarOptical::operator==(v637, v638)) {
      return 0;
    }
  }
  else if (v638)
  {
    return 0;
  }
  uint64_t v639 = *(void *)(a1 + 1368);
  uint64_t v640 = *(void *)(a2 + 1368);
  if (v639)
  {
    if (!v640 || !CMMsl::InEarConstraints::operator==(v639, v640)) {
      return 0;
    }
  }
  else if (v640)
  {
    return 0;
  }
  uint64_t v641 = *(void *)(a1 + 1376);
  uint64_t v642 = *(void *)(a2 + 1376);
  if (v641)
  {
    if (!v642 || !CMMsl::InEarOpenLid::operator==(v641, v642)) {
      return 0;
    }
  }
  else if (v642)
  {
    return 0;
  }
  uint64_t v643 = *(void *)(a1 + 1360);
  uint64_t v644 = *(void *)(a2 + 1360);
  if (v643)
  {
    if (!v644 || !CMMsl::InEarBaselining::operator==(v643, v644)) {
      return 0;
    }
  }
  else if (v644)
  {
    return 0;
  }
  uint64_t v645 = *(void *)(a1 + 120);
  uint64_t v646 = *(void *)(a2 + 120);
  if (v645)
  {
    if (!v646 || !CMMsl::AccessoryConfig::operator==(v645, v646)) {
      return 0;
    }
  }
  else if (v646)
  {
    return 0;
  }
  uint64_t v647 = *(void **)(a1 + 96);
  uint64_t v648 = *(void **)(a2 + 96);
  if (v647)
  {
    if (!v648
      || (CMMsl::AccessoryAccelConfig::operator==(v647, v648) & 1) == 0 && *(void *)(a1 + 96) | *(void *)(a2 + 96))
    {
      return 0;
    }
  }
  else if (v648)
  {
    return 0;
  }
  uint64_t v649 = *(void **)(a1 + 240);
  uint64_t v650 = *(void **)(a2 + 240);
  if (v649)
  {
    if (!v650
      || !CMMsl::AccessoryProximityConfig::operator==(v649, v650) && *(void *)(a1 + 240) | *(void *)(a2 + 240))
    {
      return 0;
    }
  }
  else if (v650)
  {
    return 0;
  }
  uint64_t v651 = *(void *)(a1 + 3120);
  uint64_t v652 = *(void *)(a2 + 3120);
  if (v651)
  {
    if (!v652 || !CMMsl::TapDetect::operator==(v651, v652)) {
      return 0;
    }
  }
  else if (v652)
  {
    return 0;
  }
  uint64_t v653 = *(void *)(a1 + 3112);
  uint64_t v654 = *(void *)(a2 + 3112);
  if (v653)
  {
    if (!v654 || !CMMsl::TapAccept::operator==(v653, v654)) {
      return 0;
    }
  }
  else if (v654)
  {
    return 0;
  }
  uint64_t v655 = *(void *)(a1 + 840);
  uint64_t v656 = *(void *)(a2 + 840);
  if (v655)
  {
    if (!v656 || !CMMsl::DoubleTap::operator==(v655, v656)) {
      return 0;
    }
  }
  else if (v656)
  {
    return 0;
  }
  uint64_t v657 = *(void *)(a1 + 280);
  uint64_t v658 = *(void *)(a2 + 280);
  if (v657)
  {
    if (!v658 || !CMMsl::AccessoryWakeDebug::operator==(v657, v658)) {
      return 0;
    }
  }
  else if (v658)
  {
    return 0;
  }
  uint64_t v659 = *(void *)(a1 + 1104);
  uint64_t v660 = *(void *)(a2 + 1104);
  if (v659)
  {
    if (!v660 || !CMMsl::GeomagneticData::operator==(v659, v660)) {
      return 0;
    }
  }
  else if (v660)
  {
    return 0;
  }
  uint64_t v661 = *(void *)(a1 + 2688);
  uint64_t v662 = *(void *)(a2 + 2688);
  if (v661)
  {
    if (!v662 || !CMMsl::RelativeDeviceMotionInternal::operator==(v661, v662)) {
      return 0;
    }
  }
  else if (v662)
  {
    return 0;
  }
  uint64_t v663 = *(void *)(a1 + 2704);
  uint64_t v664 = *(void *)(a2 + 2704);
  if (v663)
  {
    if (!v664 || !CMMsl::RelativeGravityCorrection::operator==(v663, v664)) {
      return 0;
    }
  }
  else if (v664)
  {
    return 0;
  }
  uint64_t v665 = *(void *)(a1 + 2696);
  uint64_t v666 = *(void *)(a2 + 2696);
  if (v665)
  {
    if (!v666 || !CMMsl::RelativeGravityConstraints::operator==(v665, v666)) {
      return 0;
    }
  }
  else if (v666)
  {
    return 0;
  }
  uint64_t v667 = *(void *)(a1 + 3608);
  uint64_t v668 = *(void *)(a2 + 3608);
  if (v667)
  {
    if (!v668) {
      return 0;
    }
    uint64_t v669 = *(void *)(v667 + 8);
    uint64_t v670 = *(void *)(v668 + 8);
    if (v669)
    {
      if (!v670 || !CMMsl::DeviceMotionCorrection::operator==(v669, v670)) {
        return 0;
      }
    }
    else if (v670)
    {
      return 0;
    }
  }
  else if (v668)
  {
    return 0;
  }
  uint64_t v671 = *(void *)(a1 + 328);
  uint64_t v672 = *(void *)(a2 + 328);
  if (v671)
  {
    if (!v672 || !CMMsl::AnchorCorrection::operator==(v671, v672)) {
      return 0;
    }
  }
  else if (v672)
  {
    return 0;
  }
  uint64_t v673 = *(void *)(a1 + 2520);
  uint64_t v674 = *(void *)(a2 + 2520);
  if (v673)
  {
    if (!v674 || !CMMsl::PredictedRelativeDeviceMotion::operator==(v673, v674)) {
      return 0;
    }
  }
  else if (v674)
  {
    return 0;
  }
  uint64_t v675 = *(void *)(a1 + 2088);
  uint64_t v676 = *(void *)(a2 + 2088);
  if (v675)
  {
    if (!v676 || !CMMsl::MovementStatsSignal::operator==(v675, v676)) {
      return 0;
    }
  }
  else if (v676)
  {
    return 0;
  }
  uint64_t v677 = *(void *)(a1 + 2080);
  uint64_t v678 = *(void *)(a2 + 2080);
  if (v677)
  {
    if (!v678 || !CMMsl::MovementStatsGravityProjection::operator==(v677, v678)) {
      return 0;
    }
  }
  else if (v678)
  {
    return 0;
  }
  uint64_t v679 = *(void *)(a1 + 520);
  uint64_t v680 = *(void *)(a2 + 520);
  if (v679)
  {
    if (!v680 || !CMMsl::BleedToZeroCorrection::operator==(v679, v680)) {
      return 0;
    }
  }
  else if (v680)
  {
    return 0;
  }
  uint64_t v681 = *(void *)(a1 + 160);
  uint64_t v682 = *(void *)(a2 + 160);
  if (v681)
  {
    if (!v682) {
      return 0;
    }
    uint64_t v683 = *(void *)(v681 + 8);
    uint64_t v684 = *(void *)(v682 + 8);
    if (v683)
    {
      if (!v684 || !CMMsl::AccessoryConfig::operator==(v683, v684)) {
        return 0;
      }
    }
    else if (v684)
    {
      return 0;
    }
  }
  else if (v682)
  {
    return 0;
  }
  uint64_t v685 = *(void *)(a1 + 168);
  uint64_t v686 = *(void *)(a2 + 168);
  if (v685)
  {
    if (!v686 || (CMMsl::AccessoryGyroGYTT::operator==(v685, v686) & 1) == 0) {
      return 0;
    }
  }
  else if (v686)
  {
    return 0;
  }
  uint64_t v687 = *(void *)(a1 + 152);
  uint64_t v688 = *(void *)(a2 + 152);
  if (v687)
  {
    if (!v688 || (CMMsl::AccessoryGyroCachedBias::operator==(v687, v688) & 1) == 0) {
      return 0;
    }
  }
  else if (v688)
  {
    return 0;
  }
  uint64_t v689 = *(void *)(a1 + 1064);
  uint64_t v690 = *(void *)(a2 + 1064);
  if (v689)
  {
    if (!v690 || !CMMsl::GaitCycleSegment::operator==(v689, v690)) {
      return 0;
    }
  }
  else if (v690)
  {
    return 0;
  }
  uint64_t v691 = *(void *)(a1 + 1072);
  uint64_t v692 = *(void *)(a2 + 1072);
  if (v691)
  {
    if (!v692 || !CMMsl::GaitCycleSegmentationState::operator==(v691, v692)) {
      return 0;
    }
  }
  else if (v692)
  {
    return 0;
  }
  uint64_t v693 = *(void *)(a1 + 664);
  uint64_t v694 = *(void *)(a2 + 664);
  if (v693)
  {
    if (!v694 || !CMMsl::CompassCalibrationAttempt::operator==(v693, v694)) {
      return 0;
    }
  }
  else if (v694)
  {
    return 0;
  }
  uint64_t v695 = *(void *)(a1 + 3304);
  uint64_t v696 = *(void *)(a2 + 3304);
  if (v695)
  {
    if (!v696) {
      return 0;
    }
    uint64_t v697 = *(void *)(v695 + 8);
    uint64_t v698 = *(void *)(v696 + 8);
    if (v697)
    {
      if (!v698 || !CMMsl::DeviceMotionCorrection::operator==(v697, v698)) {
        return 0;
      }
    }
    else if (v698)
    {
      return 0;
    }
  }
  else if (v696)
  {
    return 0;
  }
  uint64_t v699 = *(void *)(a1 + 3296);
  uint64_t v700 = *(void *)(a2 + 3296);
  if (v699)
  {
    if (!v700 || !CMMsl::VisualLocalizationAttitudeConstraints::operator==(v699, v700)) {
      return 0;
    }
  }
  else if (v700)
  {
    return 0;
  }
  uint64_t v701 = *(void *)(a1 + 200);
  uint64_t v702 = *(void *)(a2 + 200);
  if (v701)
  {
    if (!v702) {
      return 0;
    }
    uint64_t v703 = *(void *)(v701 + 8);
    uint64_t v704 = *(void *)(v702 + 8);
    if (v703)
    {
      if (!v704 || !CMMsl::AccessoryConfig::operator==(v703, v704)) {
        return 0;
      }
    }
    else if (v704)
    {
      return 0;
    }
  }
  else if (v702)
  {
    return 0;
  }
  uint64_t v705 = *(void *)(a1 + 952);
  uint64_t v706 = *(void *)(a2 + 952);
  if (v705)
  {
    if (!v706 || !CMMsl::FallDetectionReferee::operator==(v705, v706)) {
      return 0;
    }
  }
  else if (v706)
  {
    return 0;
  }
  uint64_t v707 = *(void *)(a1 + 960);
  uint64_t v708 = *(void *)(a2 + 960);
  if (v707)
  {
    if (!v708 || !CMMsl::FallDetectionReplay::operator==(v707, v708)) {
      return 0;
    }
  }
  else if (v708)
  {
    return 0;
  }
  uint64_t v709 = *(void *)(a1 + 968);
  uint64_t v710 = *(void *)(a2 + 968);
  if (v709)
  {
    if (!v710 || !CMMsl::FallDetectionStateMachine::operator==(v709, v710)) {
      return 0;
    }
  }
  else if (v710)
  {
    return 0;
  }
  uint64_t v711 = *(void *)(a1 + 936);
  uint64_t v712 = *(void *)(a2 + 936);
  if (v711)
  {
    if (!v712 || !CMMsl::FallDetectionDetector::operator==(v711, v712)) {
      return 0;
    }
  }
  else if (v712)
  {
    return 0;
  }
  uint64_t v713 = *(void *)(a1 + 992);
  uint64_t v714 = *(void *)(a2 + 992);
  if (v713)
  {
    if (!v714 || !CMMsl::FallFalsePositiveSuppressionFeatures::operator==(v713, v714)) {
      return 0;
    }
  }
  else if (v714)
  {
    return 0;
  }
  uint64_t v715 = *(void *)(a1 + 136);
  uint64_t v716 = *(void *)(a2 + 136);
  if (v715)
  {
    if (!v716 || !CMMsl::AccessoryDeviceMotionConfig::operator==(v715, v716)) {
      return 0;
    }
  }
  else if (v716)
  {
    return 0;
  }
  uint64_t v717 = *(void *)(a1 + 2680);
  uint64_t v718 = *(void *)(a2 + 2680);
  if (v717)
  {
    if (!v718 || !CMMsl::RelativeDeviceMotionCorrelatedMotion::operator==(v717, v718)) {
      return 0;
    }
  }
  else if (v718)
  {
    return 0;
  }
  uint64_t v719 = *(void *)(a1 + 2672);
  uint64_t v720 = *(void *)(a2 + 2672);
  if (v719)
  {
    if (!v720 || !CMMsl::RelativeDeviceMotionComplexTransition::operator==(v719, v720)) {
      return 0;
    }
  }
  else if (v720)
  {
    return 0;
  }
  uint64_t v721 = *(void *)(a1 + 752);
  uint64_t v722 = *(void *)(a2 + 752);
  if (v721)
  {
    if (!v722 || !CMMsl::DeviceMotionAlwaysOn::operator==(v721, v722)) {
      return 0;
    }
  }
  else if (v722)
  {
    return 0;
  }
  uint64_t v723 = *(void *)(a1 + 944);
  uint64_t v724 = *(void *)(a2 + 944);
  if (v723)
  {
    if (!v724 || !CMMsl::FallDetectionGyroControllerReplay::operator==(v723, v724)) {
      return 0;
    }
  }
  else if (v724)
  {
    return 0;
  }
  uint64_t v725 = *(void *)(a1 + 3352);
  uint64_t v726 = *(void *)(a2 + 3352);
  if (v725)
  {
    if (!v726 || !CMMsl::WalkingDetectionResult::operator==(v725, v726)) {
      return 0;
    }
  }
  else if (v726)
  {
    return 0;
  }
  uint64_t v727 = *(void *)(a1 + 184);
  uint64_t v728 = *(void *)(a2 + 184);
  if (v727)
  {
    if (!v728 || !CMMsl::AccessoryInEarStatus::operator==(v727, v728)) {
      return 0;
    }
  }
  else if (v728)
  {
    return 0;
  }
  uint64_t v729 = *(void *)(a1 + 976);
  uint64_t v730 = *(void *)(a2 + 976);
  if (v729)
  {
    if (!v730 || !CMMsl::FallDetectionWristStateReplay::operator==(v729, v730)) {
      return 0;
    }
  }
  else if (v730)
  {
    return 0;
  }
  uint64_t v731 = *(void *)(a1 + 1176);
  uint64_t v732 = *(void *)(a2 + 1176);
  if (v731)
  {
    if (!v732 || !CMMsl::GyroBiasEstimateError::operator==(v731, v732)) {
      return 0;
    }
  }
  else if (v732)
  {
    return 0;
  }
  uint64_t v733 = *(void *)(a1 + 3056);
  uint64_t v734 = *(void *)(a2 + 3056);
  if (v733)
  {
    if (!v734 || !CMMsl::StepLikelihoodFeatures::operator==(v733, v734)) {
      return 0;
    }
  }
  else if (v734)
  {
    return 0;
  }
  uint64_t v735 = *(void *)(a1 + 1016);
  uint64_t v736 = *(void *)(a2 + 1016);
  if (v735)
  {
    if (!v736 || !CMMsl::FirstStepFeatures::operator==(v735, v736)) {
      return 0;
    }
  }
  else if (v736)
  {
    return 0;
  }
  uint64_t v737 = *(void *)(a1 + 264);
  uint64_t v738 = *(void *)(a2 + 264);
  if (v737)
  {
    if (!v738 || !CMMsl::AccessoryStepDetectorDebug::operator==(v737, v738)) {
      return 0;
    }
  }
  else if (v738)
  {
    return 0;
  }
  uint64_t v739 = *(void *)(a1 + 2864);
  uint64_t v740 = *(void *)(a2 + 2864);
  if (v739)
  {
    if (!v740 || !CMMsl::SitStandDetectorFeatures::operator==(v739, v740)) {
      return 0;
    }
  }
  else if (v740)
  {
    return 0;
  }
  uint64_t v741 = *(void *)(a1 + 2888);
  uint64_t v742 = *(void *)(a2 + 2888);
  if (v741)
  {
    if (!v742 || !CMMsl::SitStandDetectorTransition::operator==(v741, v742)) {
      return 0;
    }
  }
  else if (v742)
  {
    return 0;
  }
  uint64_t v743 = *(void *)(a1 + 2872);
  uint64_t v744 = *(void *)(a2 + 2872);
  if (v743)
  {
    if (!v744 || !CMMsl::SitStandDetectorPosteriorBufferStatsForSitToStand::operator==(v743, v744)) {
      return 0;
    }
  }
  else if (v744)
  {
    return 0;
  }
  uint64_t v745 = *(void *)(a1 + 2880);
  uint64_t v746 = *(void *)(a2 + 2880);
  if (v745)
  {
    if (!v746 || !CMMsl::SitStandDetectorPosteriorBufferStatsForStandToSit::operator==(v745, v746)) {
      return 0;
    }
  }
  else if (v746)
  {
    return 0;
  }
  uint64_t v747 = *(void *)(a1 + 2928);
  uint64_t v748 = *(void *)(a2 + 2928);
  if (v747)
  {
    if (!v748 || !CMMsl::SpatialEvent::operator==(v747, v748)) {
      return 0;
    }
  }
  else if (v748)
  {
    return 0;
  }
  uint64_t v749 = *(void *)(a1 + 984);
  uint64_t v750 = *(void *)(a2 + 984);
  if (v749)
  {
    if (!v750 || !CMMsl::FallDistanceReplay::operator==(v749, v750)) {
      return 0;
    }
  }
  else if (v750)
  {
    return 0;
  }
  uint64_t v751 = *(void *)(a1 + 1456);
  uint64_t v752 = *(void *)(a2 + 1456);
  if (v751)
  {
    if (!v752 || !CMMsl::JitterBufferLevel::operator==(v751, v752)) {
      return 0;
    }
  }
  else if (v752)
  {
    return 0;
  }
  uint64_t v753 = *(void *)(a1 + 2560);
  uint64_t v754 = *(void *)(a2 + 2560);
  if (v753)
  {
    if (!v754 || !CMMsl::PressureFiltered1HzLowPass::operator==(v753, v754)) {
      return 0;
    }
  }
  else if (v754)
  {
    return 0;
  }
  uint64_t v755 = *(void *)(a1 + 1992);
  uint64_t v756 = *(void *)(a2 + 1992);
  if (v755)
  {
    if (!v756 || !CMMsl::MotionActivityReplay::operator==(v755, v756)) {
      return 0;
    }
  }
  else if (v756)
  {
    return 0;
  }
  uint64_t v757 = *(void *)(a1 + 928);
  uint64_t v758 = *(void *)(a2 + 928);
  if (v757)
  {
    if (!v758 || !CMMsl::FallDetectionActivityClassifierReplay::operator==(v757, v758)) {
      return 0;
    }
  }
  else if (v758)
  {
    return 0;
  }
  uint64_t v759 = *(void *)(a1 + 1824);
  uint64_t v760 = *(void *)(a2 + 1824);
  if (v759)
  {
    if (!v760 || !CMMsl::LegacyALS5CHInput::operator==(v759, v760)) {
      return 0;
    }
  }
  else if (v760)
  {
    return 0;
  }
  uint64_t v761 = *(void *)(a1 + 816);
  uint64_t v762 = *(void *)(a2 + 816);
  if (v761)
  {
    if (!v762 || !CMMsl::DopplerSample::operator==(v761, v762)) {
      return 0;
    }
  }
  else if (v762)
  {
    return 0;
  }
  uint64_t v763 = *(void *)(a1 + 800);
  uint64_t v764 = *(void *)(a2 + 800);
  if (v763)
  {
    if (!v764 || !CMMsl::DopplerProximityEvent::operator==(v763, v764)) {
      return 0;
    }
  }
  else if (v764)
  {
    return 0;
  }
  uint64_t v765 = *(void *)(a1 + 808);
  uint64_t v766 = *(void *)(a2 + 808);
  if (v765)
  {
    if (!v766 || !CMMsl::DopplerRawDataInput::operator==(v765, v766)) {
      return 0;
    }
  }
  else if (v766)
  {
    return 0;
  }
  uint64_t v767 = *(void *)(a1 + 792);
  uint64_t v768 = *(void *)(a2 + 792);
  if (v767)
  {
    if (!v768 || !CMMsl::DopplerDebugRecord::operator==(v767, v768)) {
      return 0;
    }
  }
  else if (v768)
  {
    return 0;
  }
  uint64_t v769 = *(void *)(a1 + 2144);
  uint64_t v770 = *(void *)(a2 + 2144);
  if (v769)
  {
    if (!v770 || !CMMsl::Orientation::operator==(v769, v770)) {
      return 0;
    }
  }
  else if (v770)
  {
    return 0;
  }
  uint64_t v771 = *(void *)(a1 + 1528);
  uint64_t v772 = *(void *)(a2 + 1528);
  if (v771)
  {
    if (!v772 || !CMMsl::KappaAudioResult::operator==(v771, v772)) {
      return 0;
    }
  }
  else if (v772)
  {
    return 0;
  }
  uint64_t v773 = *(void *)(a1 + 1536);
  uint64_t v774 = *(void *)(a2 + 1536);
  if (v773)
  {
    if (!v774 || !CMMsl::KappaBaroResult::operator==(v773, v774)) {
      return 0;
    }
  }
  else if (v774)
  {
    return 0;
  }
  uint64_t v775 = *(void *)(a1 + 1560);
  uint64_t v776 = *(void *)(a2 + 1560);
  if (v775)
  {
    if (!v776 || !CMMsl::KappaGpsResult::operator==(v775, v776)) {
      return 0;
    }
  }
  else if (v776)
  {
    return 0;
  }
  uint64_t v777 = *(void *)(a1 + 1648);
  uint64_t v778 = *(void *)(a2 + 1648);
  if (v777)
  {
    if (!v778 || !CMMsl::KappaPulseResult::operator==(v777, v778)) {
      return 0;
    }
  }
  else if (v778)
  {
    return 0;
  }
  uint64_t v779 = *(void *)(a1 + 1768);
  uint64_t v780 = *(void *)(a2 + 1768);
  if (v779)
  {
    if (!v780 || !CMMsl::KappaZgResult::operator==(v779, v780)) {
      return 0;
    }
  }
  else if (v780)
  {
    return 0;
  }
  uint64_t v781 = *(void *)(a1 + 1760);
  uint64_t v782 = *(void *)(a2 + 1760);
  if (v781)
  {
    if (!v782) {
      return 0;
    }
    if (*(unsigned char *)(v781 + 16))
    {
      if ((*(unsigned char *)(v782 + 16) & 1) == 0 || *(void *)(v781 + 8) != *(void *)(v782 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v782 + 16))
    {
      return 0;
    }
  }
  else if (v782)
  {
    return 0;
  }
  uint64_t v783 = *(void *)(a1 + 1632);
  uint64_t v784 = *(void *)(a2 + 1632);
  if (v783)
  {
    if (!v784 || !CMMsl::KappaPulseInertialAccel::operator==(v783, v784)) {
      return 0;
    }
  }
  else if (v784)
  {
    return 0;
  }
  uint64_t v785 = *(void *)(a1 + 1312);
  uint64_t v786 = *(void *)(a2 + 1312);
  if (v785)
  {
    if (!v786) {
      return 0;
    }
    if (*(unsigned char *)(v785 + 12))
    {
      if ((*(unsigned char *)(v786 + 12) & 1) == 0 || *(_DWORD *)(v785 + 8) != *(_DWORD *)(v786 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v786 + 12))
    {
      return 0;
    }
  }
  else if (v786)
  {
    return 0;
  }
  uint64_t v787 = *(void *)(a1 + 1304);
  uint64_t v788 = *(void *)(a2 + 1304);
  if (v787)
  {
    if (!v788) {
      return 0;
    }
    if (*(unsigned char *)(v787 + 12))
    {
      if ((*(unsigned char *)(v788 + 12) & 1) == 0 || *(_DWORD *)(v787 + 8) != *(_DWORD *)(v788 + 8)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(v788 + 12))
    {
      return 0;
    }
  }
  else if (v788)
  {
    return 0;
  }
  uint64_t v789 = *(void *)(a1 + 1520);
  uint64_t v790 = *(void *)(a2 + 1520);
  if (v789)
  {
    if (!v790 || !CMMsl::KappaAirbagResult::operator==(v789, v790)) {
      return 0;
    }
  }
  else if (v790)
  {
    return 0;
  }
  uint64_t v791 = *(void *)(a1 + 1544);
  uint64_t v792 = *(void *)(a2 + 1544);
  if (v791)
  {
    if (!v792 || !CMMsl::KappaCrashResult::operator==(v791, v792)) {
      return 0;
    }
  }
  else if (v792)
  {
    return 0;
  }
  uint64_t v793 = *(void *)(a1 + 1656);
  uint64_t v794 = *(void *)(a2 + 1656);
  if (v793)
  {
    if (!v794 || !CMMsl::KappaQuiescenceResult::operator==(v793, v794)) {
      return 0;
    }
  }
  else if (v794)
  {
    return 0;
  }
  uint64_t v795 = *(void *)(a1 + 1664);
  uint64_t v796 = *(void *)(a2 + 1664);
  if (v795)
  {
    if (!v796 || !CMMsl::KappaRecoveryResult::operator==(v795, v796)) {
      return 0;
    }
  }
  else if (v796)
  {
    return 0;
  }
  uint64_t v797 = *(void *)(a1 + 1696);
  uint64_t v798 = *(void *)(a2 + 1696);
  if (v797)
  {
    if (!v798 || !CMMsl::KappaRolloverCrashResult::operator==(v797, v798)) {
      return 0;
    }
  }
  else if (v798)
  {
    return 0;
  }
  uint64_t v799 = *(void *)(a1 + 1600);
  uint64_t v800 = *(void *)(a2 + 1600);
  if (v799)
  {
    if (!v800 || !CMMsl::KappaMildImpactResult::operator==(v799, v800)) {
      return 0;
    }
  }
  else if (v800)
  {
    return 0;
  }
  uint64_t v801 = *(void *)(a1 + 1584);
  uint64_t v802 = *(void *)(a2 + 1584);
  if (v801)
  {
    if (!v802 || !CMMsl::KappaLackOfMotionResult::operator==(v801, v802)) {
      return 0;
    }
  }
  else if (v802)
  {
    return 0;
  }
  uint64_t v803 = *(void *)(a1 + 1704);
  uint64_t v804 = *(void *)(a2 + 1704);
  if (v803)
  {
    if (!v804 || !CMMsl::KappaSevereCrashResult::operator==(v803, v804)) {
      return 0;
    }
  }
  else if (v804)
  {
    return 0;
  }
  uint64_t v805 = *(void *)(a1 + 1592);
  uint64_t v806 = *(void *)(a2 + 1592);
  if (v805)
  {
    if (!v806 || !CMMsl::KappaLocalAudioResult::operator==(v805, v806)) {
      return 0;
    }
  }
  else if (v806)
  {
    return 0;
  }
  uint64_t v807 = *(void *)(a1 + 1672);
  uint64_t v808 = *(void *)(a2 + 1672);
  if (v807)
  {
    if (!v808 || !CMMsl::KappaRemoteAudioResult::operator==(v807, v808)) {
      return 0;
    }
  }
  else if (v808)
  {
    return 0;
  }
  uint64_t v809 = *(void *)(a1 + 768);
  uint64_t v810 = *(void *)(a2 + 768);
  if (v809)
  {
    if (!v810 || !CMMsl::DirectionOfTravelMetrics::operator==(v809, v810)) {
      return 0;
    }
  }
  else if (v810)
  {
    return 0;
  }
  uint64_t v811 = *(void *)(a1 + 3224);
  uint64_t v812 = *(void *)(a2 + 3224);
  if (v811)
  {
    if (!v812 || !CMMsl::ViewObstructedMachineLearningDecision::operator==(v811, v812)) {
      return 0;
    }
  }
  else if (v812)
  {
    return 0;
  }
  uint64_t v813 = *(void *)(a1 + 1296);
  uint64_t v814 = *(void *)(a2 + 1296);
  if (v813)
  {
    if (!v814 || !CMMsl::HeadToHeadsetTransformationEstimate::operator==(v813, v814)) {
      return 0;
    }
  }
  else if (v814)
  {
    return 0;
  }
  uint64_t v815 = *(void *)(a1 + 3232);
  uint64_t v816 = *(void *)(a2 + 3232);
  if (v815)
  {
    if (!v816 || !CMMsl::ViewObstructedMachineLearningFeatures::operator==(v815, v816)) {
      return 0;
    }
  }
  else if (v816)
  {
    return 0;
  }
  uint64_t v817 = *(void *)(a1 + 3240);
  uint64_t v818 = *(void *)(a2 + 3240);
  if (v817)
  {
    if (!v818 || !CMMsl::ViewObstructedMachineLearningProbabilities::operator==(v817, v818)) {
      return 0;
    }
  }
  else if (v818)
  {
    return 0;
  }
  uint64_t v819 = *(void *)(a1 + 2728);
  uint64_t v820 = *(void *)(a2 + 2728);
  if (v819)
  {
    if (!v820 || !CMMsl::RunningArmSwingSignals::operator==(v819, v820)) {
      return 0;
    }
  }
  else if (v820)
  {
    return 0;
  }
  uint64_t v821 = *(void *)(a1 + 2736);
  uint64_t v822 = *(void *)(a2 + 2736);
  if (v821)
  {
    if (!v822 || !CMMsl::RunningCentripetalAccelSignals::operator==(v821, v822)) {
      return 0;
    }
  }
  else if (v822)
  {
    return 0;
  }
  uint64_t v823 = *(void *)(a1 + 2760);
  uint64_t v824 = *(void *)(a2 + 2760);
  if (v823)
  {
    if (!v824 || !CMMsl::RunningRotationAxis::operator==(v823, v824)) {
      return 0;
    }
  }
  else if (v824)
  {
    return 0;
  }
  uint64_t v825 = *(void *)(a1 + 2800);
  uint64_t v826 = *(void *)(a2 + 2800);
  if (v825)
  {
    if (!v826 || !CMMsl::RunningVerticalOscillationSignals::operator==(v825, v826)) {
      return 0;
    }
  }
  else if (v826)
  {
    return 0;
  }
  uint64_t v827 = *(void *)(a1 + 2784);
  uint64_t v828 = *(void *)(a2 + 2784);
  if (v827)
  {
    if (!v828 || !CMMsl::RunningVerticalOscillation::operator==(v827, v828)) {
      return 0;
    }
  }
  else if (v828)
  {
    return 0;
  }
  uint64_t v829 = *(void *)(a1 + 1712);
  uint64_t v830 = *(void *)(a2 + 1712);
  if (v829)
  {
    if (!v830 || !CMMsl::KappaSpinResult::operator==(v829, v830) && *(void *)(a1 + 1712) | *(void *)(a2 + 1712)) {
      return 0;
    }
  }
  else if (v830)
  {
    return 0;
  }
  uint64_t v831 = *(void *)(a1 + 1624);
  uint64_t v832 = *(void *)(a2 + 1624);
  if (v831)
  {
    if (!v832 || !CMMsl::KappaPulseDeltaV::operator==(v831, v832)) {
      return 0;
    }
  }
  else if (v832)
  {
    return 0;
  }
  uint64_t v833 = *(void *)(a1 + 2776);
  uint64_t v834 = *(void *)(a2 + 2776);
  if (v833)
  {
    if (!v834 || !CMMsl::RunningStrideLength::operator==(v833, v834)) {
      return 0;
    }
  }
  else if (v834)
  {
    return 0;
  }
  uint64_t v835 = *(void *)(a1 + 1448);
  uint64_t v836 = *(void *)(a2 + 1448);
  if (v835)
  {
    if (!v836 || !CMMsl::ISPPacket::operator==(v835, v836)) {
      return 0;
    }
  }
  else if (v836)
  {
    return 0;
  }
  uint64_t v837 = *(void *)(a1 + 1576);
  uint64_t v838 = *(void *)(a2 + 1576);
  if (v837)
  {
    if (!v838 || !CMMsl::KappaHighSpeedCrashResult::operator==(v837, v838)) {
      return 0;
    }
  }
  else if (v838)
  {
    return 0;
  }
  uint64_t v839 = *(void *)(a1 + 1640);
  uint64_t v840 = *(void *)(a2 + 1640);
  if (v839)
  {
    if (!v840 || !CMMsl::KappaPulseInertialHgAccel::operator==(v839, v840)) {
      return 0;
    }
  }
  else if (v840)
  {
    return 0;
  }
  uint64_t v841 = *(void *)(a1 + 1280);
  uint64_t v842 = *(void *)(a2 + 1280);
  if (v841)
  {
    if (!v842 || !CMMsl::HarmonicMetrics::operator==(v841, v842)) {
      return 0;
    }
  }
  else if (v842)
  {
    return 0;
  }
  uint64_t v843 = *(void *)(a1 + 592);
  uint64_t v844 = *(void *)(a2 + 592);
  if (v843)
  {
    if (!v844 || !CMMsl::CalorieControllerMETsConsumed::operator==(v843, v844)) {
      return 0;
    }
  }
  else if (v844)
  {
    return 0;
  }
  uint64_t v845 = *(void *)(a1 + 2336);
  uint64_t v846 = *(void *)(a2 + 2336);
  if (v845)
  {
    if (!v846 || !CMMsl::PedometerPathStraightness::operator==(v845, v846)) {
      return 0;
    }
  }
  else if (v846)
  {
    return 0;
  }
  uint64_t v847 = *(void *)(a1 + 688);
  uint64_t v848 = *(void *)(a2 + 688);
  if (v847)
  {
    if (!v848 || !CMMsl::ComplexHandMotion::operator==(v847, v848)) {
      return 0;
    }
  }
  else if (v848)
  {
    return 0;
  }
  uint64_t v849 = *(void *)(a1 + 856);
  uint64_t v850 = *(void *)(a2 + 856);
  if (v849)
  {
    if (!v850 || !CMMsl::ElevationGradeEstimator::operator==(v849, v850)) {
      return 0;
    }
  }
  else if (v850)
  {
    return 0;
  }
  uint64_t v851 = *(void *)(a1 + 3200);
  uint64_t v852 = *(void *)(a2 + 3200);
  if (v851)
  {
    if (!v852 || !CMMsl::VO2MaxModelInput::operator==(v851, v852)) {
      return 0;
    }
  }
  else if (v852)
  {
    return 0;
  }
  uint64_t v853 = *(void *)(a1 + 2608);
  uint64_t v854 = *(void *)(a2 + 2608);
  if (v853)
  {
    if (!v854 || !CMMsl::ProxCalibration::operator==(v853, v854)) {
      return 0;
    }
  }
  else if (v854)
  {
    return 0;
  }
  uint64_t v855 = *(void *)(a1 + 1728);
  uint64_t v856 = *(void *)(a2 + 1728);
  if (v855)
  {
    if (!v856 || !CMMsl::KappaStepsResult::operator==(v855, v856)) {
      return 0;
    }
  }
  else if (v856)
  {
    return 0;
  }
  uint64_t v857 = *(void *)(a1 + 3344);
  uint64_t v858 = *(void *)(a2 + 3344);
  if (v857)
  {
    if (!v858 || !CMMsl::WakeGestureSample::operator==(v857, v858)) {
      return 0;
    }
  }
  else if (v858)
  {
    return 0;
  }
  uint64_t v859 = *(void *)(a1 + 1568);
  uint64_t v860 = *(void *)(a2 + 1568);
  if (v859)
  {
    if (!v860 || !CMMsl::KappaGravityAutocorrelationResult::operator==(v859, v860)) {
      return 0;
    }
  }
  else if (v860)
  {
    return 0;
  }
  uint64_t v861 = *(void *)(a1 + 2792);
  uint64_t v862 = *(void *)(a2 + 2792);
  if (v861)
  {
    if (!v862 || !CMMsl::RunningVerticalOscillationGradientBoostedSignals::operator==(v861, v862)) {
      return 0;
    }
  }
  else if (v862)
  {
    return 0;
  }
  uint64_t v863 = *(void *)(a1 + 3096);
  uint64_t v864 = *(void *)(a2 + 3096);
  if (v863)
  {
    if (!v864 || !CMMsl::SubStats::operator==(v863, v864)) {
      return 0;
    }
  }
  else if (v864)
  {
    return 0;
  }
  uint64_t v865 = *(void *)(a1 + 2312);
  uint64_t v866 = *(void *)(a2 + 2312);
  if (v865)
  {
    if (!v866 || !CMMsl::PedOdomFusionExtendedModeSegment::operator==(v865, v866)) {
      return 0;
    }
  }
  else if (v866)
  {
    return 0;
  }
  uint64_t v867 = *(void *)(a1 + 1896);
  uint64_t v868 = *(void *)(a2 + 1896);
  if (v867)
  {
    if (!v868 || !CMMsl::MagicMountState::operator==(v867, v868)) {
      return 0;
    }
  }
  else if (v868)
  {
    return 0;
  }
  uint64_t v869 = *(void *)(a1 + 2264);
  uint64_t v870 = *(void *)(a2 + 2264);
  if (v869)
  {
    if (!v870 || !CMMsl::PDRPedestrianClassifierState::operator==(v869, v870)) {
      return 0;
    }
  }
  else if (v870)
  {
    return 0;
  }
  uint64_t v871 = *(void *)(a1 + 2272);
  uint64_t v872 = *(void *)(a2 + 2272);
  if (v871)
  {
    if (!v872 || !CMMsl::PDRPlacementClassifierState::operator==(v871, v872)) {
      return 0;
    }
  }
  else if (v872)
  {
    return 0;
  }
  uint64_t v873 = *(void *)(a1 + 2280);
  uint64_t v874 = *(void *)(a2 + 2280);
  if (v873)
  {
    if (!v874 || !CMMsl::PDRSpeedEstimatorState::operator==(v873, v874)) {
      return 0;
    }
  }
  else if (v874)
  {
    return 0;
  }
  uint64_t v875 = *(void *)(a1 + 2160);
  uint64_t v876 = *(void *)(a2 + 2160);
  if (v875)
  {
    if (!v876 || !CMMsl::PDRDOTEstimatorState::operator==(v875, v876)) {
      return 0;
    }
  }
  else if (v876)
  {
    return 0;
  }
  uint64_t v877 = *(void *)(a1 + 2296);
  uint64_t v878 = *(void *)(a2 + 2296);
  if (v877)
  {
    if (!v878 || !CMMsl::PDRVelocityEstimatorState::operator==(v877, v878)) {
      return 0;
    }
  }
  else if (v878)
  {
    return 0;
  }
  uint64_t v879 = *(void *)(a1 + 1816);
  uint64_t v880 = *(void *)(a2 + 1816);
  if (v879)
  {
    if (!v880 || !CMMsl::KMVelocityEstimatorState::operator==(v879, v880)) {
      return 0;
    }
  }
  else if (v880)
  {
    return 0;
  }
  uint64_t v881 = *(void *)(a1 + 3208);
  uint64_t v882 = *(void *)(a2 + 3208);
  if (v881)
  {
    if (!v882 || !CMMsl::VelocityEstimatorFusionState::operator==(v881, v882)) {
      return 0;
    }
  }
  else if (v882)
  {
    return 0;
  }
  uint64_t v883 = *(void *)(a1 + 2232);
  uint64_t v884 = *(void *)(a2 + 2232);
  if (v883)
  {
    if (!v884 || !CMMsl::PDRFenceReference::operator==(v883, v884)) {
      return 0;
    }
  }
  else if (v884)
  {
    return 0;
  }
  uint64_t v885 = *(void *)(a1 + 2240);
  uint64_t v886 = *(void *)(a2 + 2240);
  if (v885)
  {
    if (!v886 || !CMMsl::PDRFenceState::operator==(v885, v886)) {
      return 0;
    }
  }
  else if (v886)
  {
    return 0;
  }
  uint64_t v887 = *(void *)(a1 + 3192);
  uint64_t v888 = *(void *)(a2 + 3192);
  if (v887)
  {
    if (!v888 || !CMMsl::UWBRange::operator==(v887, v888)) {
      return 0;
    }
  }
  else if (v888)
  {
    return 0;
  }
  uint64_t v889 = *(void *)(a1 + 3104);
  uint64_t v890 = *(void *)(a2 + 3104);
  if (v889)
  {
    if (!v890 || !CMMsl::SwingDoTCandidate::operator==(v889, v890)) {
      return 0;
    }
  }
  else if (v890)
  {
    return 0;
  }
  uint64_t v891 = *(void *)(a1 + 824);
  uint64_t v892 = *(void *)(a2 + 824);
  if (v891)
  {
    if (!v892 || !CMMsl::DoTEstimatorHandSwing::operator==(v891, v892)) {
      return 0;
    }
  }
  else if (v892)
  {
    return 0;
  }
  uint64_t v893 = *(void *)(a1 + 1744);
  uint64_t v894 = *(void *)(a2 + 1744);
  if (v893)
  {
    if (!v894 || !CMMsl::KappaTriggerClustersResult::operator==(v893, v894)) {
      return 0;
    }
  }
  else if (v894)
  {
    return 0;
  }
  uint64_t v895 = *(void *)(a1 + 2856);
  uint64_t v896 = *(void *)(a2 + 2856);
  if (v895)
  {
    if (!v896 || !CMMsl::SimActivityEvent::operator==(v895, v896)) {
      return 0;
    }
  }
  else if (v896)
  {
    return 0;
  }
  uint64_t v897 = *(void *)(a1 + 2224);
  uint64_t v898 = *(void *)(a2 + 2224);
  if (v897)
  {
    if (!v898 || !CMMsl::PDRFeatures::operator==(v897, v898)) {
      return 0;
    }
  }
  else if (v898)
  {
    return 0;
  }
  uint64_t v899 = *(void *)(a1 + 2176);
  uint64_t v900 = *(void *)(a2 + 2176);
  if (v899)
  {
    if (!v900 || !CMMsl::PDRDOTEstimatorStateBody::operator==(v899, v900)) {
      return 0;
    }
  }
  else if (v900)
  {
    return 0;
  }
  uint64_t v901 = *(void *)(a1 + 2168);
  uint64_t v902 = *(void *)(a2 + 2168);
  if (v901)
  {
    if (!v902 || !CMMsl::PDRDOTEstimatorStateArmSwing::operator==(v901, v902)) {
      return 0;
    }
  }
  else if (v902)
  {
    return 0;
  }
  uint64_t v903 = *(void *)(a1 + 2200);
  uint64_t v904 = *(void *)(a2 + 2200);
  if (v903)
  {
    if (!v904 || !CMMsl::PDRDOTEstimatorStateHeading::operator==(v903, v904)) {
      return 0;
    }
  }
  else if (v904)
  {
    return 0;
  }
  uint64_t v905 = *(void *)(a1 + 104);
  uint64_t v906 = *(void *)(a2 + 104);
  if (v905)
  {
    if (!v906 || !CMMsl::AccessoryActivityAlseepConfidenceEpoch::operator==(v905, v906)) {
      return 0;
    }
  }
  else if (v906)
  {
    return 0;
  }
  uint64_t v907 = *(void *)(a1 + 2288);
  uint64_t v908 = *(void *)(a2 + 2288);
  if (v907)
  {
    if (!v908 || !CMMsl::PDRSpeedEstimatorStateDebug::operator==(v907, v908)) {
      return 0;
    }
  }
  else if (v908)
  {
    return 0;
  }
  uint64_t v909 = *(void *)(a1 + 2472);
  uint64_t v910 = *(void *)(a2 + 2472);
  if (v909)
  {
    if (!v910 || !CMMsl::PrecisionFindingDOTEstimate::operator==(v909, v910)) {
      return 0;
    }
  }
  else if (v910)
  {
    return 0;
  }
  uint64_t v911 = *(void *)(a1 + 2496);
  uint64_t v912 = *(void *)(a2 + 2496);
  if (v911)
  {
    if (!v912 || !CMMsl::PrecisionFindingState::operator==(v911, v912)) {
      return 0;
    }
  }
  else if (v912)
  {
    return 0;
  }
  uint64_t v913 = *(void *)(a1 + 1688);
  uint64_t v914 = *(void *)(a2 + 1688);
  if (v913)
  {
    if (!v914 || !CMMsl::KappaRoadsResult::operator==(v913, v914)) {
      return 0;
    }
  }
  else if (v914)
  {
    return 0;
  }
  uint64_t v915 = *(void *)(a1 + 2504);
  uint64_t v916 = *(void *)(a2 + 2504);
  if (v915)
  {
    if (!v916 || !CMMsl::PrecisionFindingVelocityEstimate::operator==(v915, v916)) {
      return 0;
    }
  }
  else if (v916)
  {
    return 0;
  }
  uint64_t v917 = *(void *)(a1 + 2480);
  uint64_t v918 = *(void *)(a2 + 2480);
  if (v917)
  {
    if (!v918 || !CMMsl::PrecisionFindingRangeFilter::operator==(v917, v918)) {
      return 0;
    }
  }
  else if (v918)
  {
    return 0;
  }
  uint64_t v919 = *(void *)(a1 + 2216);
  uint64_t v920 = *(void *)(a2 + 2216);
  if (v919)
  {
    if (!v920 || !CMMsl::PDRDOTMeasurementSelectorState::operator==(v919, v920)) {
      return 0;
    }
  }
  else if (v920)
  {
    return 0;
  }
  uint64_t v921 = *(void *)(a1 + 576);
  uint64_t v922 = *(void *)(a2 + 576);
  if (v921)
  {
    if (!v922 || !CMMsl::BumpToWakeState::operator==(v921, v922)) {
      return 0;
    }
  }
  else if (v922)
  {
    return 0;
  }
  uint64_t v923 = *(void *)(a1 + 2208);
  uint64_t v924 = *(void *)(a2 + 2208);
  if (v923)
  {
    if (!v924 || !CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator==(v923, v924)) {
      return 0;
    }
  }
  else if (v924)
  {
    return 0;
  }
  uint64_t v925 = *(void *)(a1 + 2344);
  uint64_t v926 = *(void *)(a2 + 2344);
  if (v925)
  {
    if (!v926 || !CMMsl::PeerState::operator==(v925, v926)) {
      return 0;
    }
  }
  else if (v926)
  {
    return 0;
  }
  uint64_t v927 = *(void *)(a1 + 1928);
  uint64_t v928 = *(void *)(a2 + 1928);
  if (v927)
  {
    if (!v928 || !CMMsl::MagnetometerCalibratorFilterParameters::operator==(v927, v928)) {
      return 0;
    }
  }
  else if (v928)
  {
    return 0;
  }
  uint64_t v929 = *(void *)(a1 + 1504);
  uint64_t v930 = *(void *)(a2 + 1504);
  if (v929)
  {
    if (!v930 || !CMMsl::KappaActivityPhone::operator==(v929, v930) && *(void *)(a1 + 1504) | *(void *)(a2 + 1504)) {
      return 0;
    }
  }
  else if (v930)
  {
    return 0;
  }
  uint64_t v931 = *(void *)(a1 + 1512);
  uint64_t v932 = *(void *)(a2 + 1512);
  if (v931)
  {
    if (!v932 || !CMMsl::KappaActivityWatch::operator==(v931, v932) && *(void *)(a1 + 1512) | *(void *)(a2 + 1512)) {
      return 0;
    }
  }
  else if (v932)
  {
    return 0;
  }
  uint64_t v933 = *(void *)(a1 + 2488);
  uint64_t v934 = *(void *)(a2 + 2488);
  if (v933)
  {
    if (!v934 || !CMMsl::PrecisionFindingSessionStartStop::operator==(v933, v934)) {
      return 0;
    }
  }
  else if (v934)
  {
    return 0;
  }
  uint64_t v935 = *(void *)(a1 + 2192);
  uint64_t v936 = *(void *)(a2 + 2192);
  if (v935)
  {
    if (!v936 || !CMMsl::PDRDOTEstimatorStateDebug::operator==(v935, v936)) {
      return 0;
    }
  }
  else if (v936)
  {
    return 0;
  }
  uint64_t v937 = *(void *)(a1 + 2184);
  uint64_t v938 = *(void *)(a2 + 2184);
  if (v937)
  {
    if (!v938 || !CMMsl::PDRDOTEstimatorStateBodyDebug::operator==(v937, v938)) {
      return 0;
    }
  }
  else if (v938)
  {
    return 0;
  }
  uint64_t v939 = *(void *)(a1 + 1616);
  uint64_t v940 = *(void *)(a2 + 1616);
  if (v939)
  {
    if (!v940
      || !CMMsl::KappaPeakDetectorMapResult::operator==(v939, v940) && *(void *)(a1 + 1616) | *(void *)(a2 + 1616))
    {
      return 0;
    }
  }
  else if (v940)
  {
    return 0;
  }
  uint64_t v941 = *(void *)(a1 + 1608);
  uint64_t v942 = *(void *)(a2 + 1608);
  if (v941)
  {
    if (!v942 || !CMMsl::KappaPeakDetectorMapMagTimestamps::operator==(v941, v942)) {
      return 0;
    }
  }
  else if (v942)
  {
    return 0;
  }
  uint64_t v943 = *(void *)(a1 + 2512);
  uint64_t v944 = *(void *)(a2 + 2512);
  if (v943)
  {
    if (!v944 || !CMMsl::PrecisionFindingVerticalState::operator==(v943, v944)) {
      return 0;
    }
  }
  else if (v944)
  {
    return 0;
  }
  uint64_t v945 = *(void *)(a1 + 312);
  uint64_t v946 = *(void *)(a2 + 312);
  if (v945)
  {
    if (!v946 || !CMMsl::Altimeter::operator==(v945, v946)) {
      return 0;
    }
  }
  else if (v946)
  {
    return 0;
  }
  uint64_t v947 = *(void *)(a1 + 904);
  uint64_t v948 = *(void *)(a2 + 904);
  if (v947)
  {
    if (!v948 || !CMMsl::FaceDownDetection::operator==(v947, v948)) {
      return 0;
    }
  }
  else if (v948)
  {
    return 0;
  }
  uint64_t v949 = *(void *)(a1 + 2360);
  uint64_t v950 = *(void *)(a2 + 2360);
  if (v949)
  {
    if (!v950 || !CMMsl::PencilFusionDMYawAlignmentUpdate::operator==(v949, v950)) {
      return 0;
    }
  }
  else if (v950)
  {
    return 0;
  }
  uint64_t v951 = *(void *)(a1 + 2384);
  uint64_t v952 = *(void *)(a2 + 2384);
  if (v951)
  {
    if (!v952 || !CMMsl::PencilFusionRingSensorTrustModelUpdate::operator==(v951, v952)) {
      return 0;
    }
  }
  else if (v952)
  {
    return 0;
  }
  uint64_t v953 = *(void *)(a1 + 256);
  uint64_t v954 = *(void *)(a2 + 256);
  if (v953)
  {
    if (!v954 || !CMMsl::AccessorySleepStateUpdate::operator==(v953, v954)) {
      return 0;
    }
  }
  else if (v954)
  {
    return 0;
  }
  uint64_t v955 = *(void *)(a1 + 248);
  uint64_t v956 = *(void *)(a2 + 248);
  if (v955)
  {
    if (!v956 || !CMMsl::AccessorySleepStateConfidenceEpoch::operator==(v955, v956)) {
      return 0;
    }
  }
  else if (v956)
  {
    return 0;
  }
  uint64_t v957 = *(void *)(a1 + 2816);
  uint64_t v958 = *(void *)(a2 + 2816);
  if (v957)
  {
    if (!v958 || !CMMsl::SafetyHertzSample::operator==(v957, v958)) {
      return 0;
    }
  }
  else if (v958)
  {
    return 0;
  }
  uint64_t v959 = *(void *)(a1 + 2808);
  uint64_t v960 = *(void *)(a2 + 2808);
  if (v959)
  {
    if (!v960 || !CMMsl::SafetyCompanionStatus::operator==(v959, v960)) {
      return 0;
    }
  }
  else if (v960)
  {
    return 0;
  }
  uint64_t v961 = *(void *)(a1 + 2624);
  uint64_t v962 = *(void *)(a2 + 2624);
  if (v961)
  {
    if (!v962 || !CMMsl::PTSConsumedGNSS::operator==(v961, v962)) {
      return 0;
    }
  }
  else if (v962)
  {
    return 0;
  }
  uint64_t v963 = *(void *)(a1 + 2632);
  uint64_t v964 = *(void *)(a2 + 2632);
  if (v963)
  {
    if (!v964 || !CMMsl::PTSForwardPropagation::operator==(v963, v964)) {
      return 0;
    }
  }
  else if (v964)
  {
    return 0;
  }
  uint64_t v965 = *(void *)(a1 + 2648);
  uint64_t v966 = *(void *)(a2 + 2648);
  if (v965)
  {
    if (!v966) {
      return 0;
    }
    uint64_t v967 = *(void *)(v965 + 8);
    uint64_t v968 = *(void *)(v966 + 8);
    if (v967)
    {
      if (!v968 || !CMMsl::PTSForwardPropagation::operator==(v967, v968)) {
        return 0;
      }
    }
    else if (v968)
    {
      return 0;
    }
  }
  else if (v966)
  {
    return 0;
  }
  uint64_t v969 = *(void *)(a1 + 1288);
  uint64_t v970 = *(void *)(a2 + 1288);
  if (v969)
  {
    if (!v970 || !CMMsl::HeadToHeadsetAttitudeEstimatorMeasurementUpdate::operator==(v969, v970)) {
      return 0;
    }
  }
  else if (v970)
  {
    return 0;
  }
  uint64_t v971 = *(void *)(a1 + 2640);
  uint64_t v972 = *(void *)(a2 + 2640);
  if (v971)
  {
    if (!v972) {
      return 0;
    }
    uint64_t v973 = *(void *)(v971 + 8);
    uint64_t v974 = *(void *)(v972 + 8);
    if (v973)
    {
      if (!v974 || !CMMsl::PTSForwardPropagation::operator==(v973, v974)) {
        return 0;
      }
    }
    else if (v974)
    {
      return 0;
    }
  }
  else if (v972)
  {
    return 0;
  }
  uint64_t v975 = *(void *)(a1 + 336);
  uint64_t v976 = *(void *)(a2 + 336);
  if (v975)
  {
    if (!v976 || !CMMsl::AnchorMotionCorrespondence::operator==(v975, v976)) {
      return 0;
    }
  }
  else if (v976)
  {
    return 0;
  }
  uint64_t v977 = *(void *)(a1 + 1480);
  uint64_t v978 = *(void *)(a2 + 1480);
  if (v977)
  {
    if (!v978 || !CMMsl::KData1::operator==(v977, v978)) {
      return 0;
    }
  }
  else if (v978)
  {
    return 0;
  }
  uint64_t v979 = *(void *)(a1 + 1488);
  uint64_t v980 = *(void *)(a2 + 1488);
  if (v979)
  {
    if (!v980 || !CMMsl::KData2::operator==(v979, v980)) {
      return 0;
    }
  }
  else if (v980)
  {
    return 0;
  }
  uint64_t v981 = *(void *)(a1 + 1496);
  uint64_t v982 = *(void *)(a2 + 1496);
  if (v981)
  {
    if (!v982 || !CMMsl::KData3::operator==(v981, v982)) {
      return 0;
    }
  }
  else if (v982)
  {
    return 0;
  }
  uint64_t v983 = *(void *)(a1 + 2824);
  uint64_t v984 = *(void *)(a2 + 2824);
  if (v983)
  {
    if (!v984 || !CMMsl::SafetyRemoteSample::operator==(v983, v984)) {
      return 0;
    }
  }
  else if (v984)
  {
    return 0;
  }
  uint64_t v985 = *(void *)(a1 + 2832);
  uint64_t v986 = *(void *)(a2 + 2832);
  if (v985)
  {
    if (!v986 || !CMMsl::SafetyTrustedAudioResult::operator==(v985, v986)) {
      return 0;
    }
  }
  else if (v986)
  {
    return 0;
  }
  uint64_t v987 = *(void *)(a1 + 2944);
  uint64_t v988 = *(void *)(a2 + 2944);
  if (v987)
  {
    if (!v988) {
      return 0;
    }
    uint64_t v989 = *(void *)(v987 + 8);
    uint64_t v990 = *(void *)(v988 + 8);
    if (v989)
    {
      if (!v990 || !CMMsl::DeviceMotion::operator==(v989, v990)) {
        return 0;
      }
    }
    else if (v990)
    {
      return 0;
    }
  }
  else if (v988)
  {
    return 0;
  }
  uint64_t v991 = *(void *)(a1 + 2952);
  uint64_t v992 = *(void *)(a2 + 2952);
  if (v991)
  {
    if (!v992) {
      return 0;
    }
    uint64_t v993 = *(void *)(v991 + 8);
    uint64_t v994 = *(void *)(v992 + 8);
    if (v993)
    {
      if (!v994 || !CMMsl::MotionStateUpdate::operator==(v993, v994)) {
        return 0;
      }
    }
    else if (v994)
    {
      return 0;
    }
  }
  else if (v992)
  {
    return 0;
  }
  uint64_t v995 = *(void *)(a1 + 1432);
  uint64_t v996 = *(void *)(a2 + 1432);
  uint64_t result = v996 == 0;
  if (!v995) {
    return result;
  }
  if (v996)
  {
    uint64_t v998 = *(void *)(v995 + 8);
    uint64_t v999 = *(void *)(v996 + 8);
    if (v998) {
      return v999 && CMMsl::AccessoryAccel::operator==(v998, v999);
    }
    if (!v999) {
      return 1;
    }
  }
  return 0;
}