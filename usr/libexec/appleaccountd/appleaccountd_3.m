uint64_t sub_10022B500(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  long long v38;
  long long v39;
  uint64_t v40;

  v3 = v2;
  v5 = *v2;
  sub_100009F04(&qword_10032DB18);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  v8 = 1 << *(unsigned char *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64) {
    v9 = ~(-1 << v8);
  }
  else {
    v9 = -1;
  }
  v10 = v9 & *(void *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    v22 = (void *)(v5 + 64);
    v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        v14 = v24;
      }
    }
LABEL_21:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      v26 = *(_OWORD *)v25;
      v27 = *(_OWORD *)(v25 + 16);
      v40 = *(void *)(v25 + 32);
      v38 = v26;
      v39 = v27;
      sub_100009F48((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100135F74(v25, (uint64_t)&v38);
      sub_100047DD4(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    v28 = -1 << *(unsigned char *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32) {
          v30 = 0;
        }
        v31 |= v33;
        v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(void *)(v7 + 48) + 40 * v15;
    v17 = v38;
    v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    result = (uint64_t)sub_100009F48(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_10022B818(uint64_t a1, int a2)
{
  v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100009F04(&qword_10032DBE0);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v6;
  v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    sub_10022FF54((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  v3 = v41;
  v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v13;
  return result;
}

uint64_t sub_10022BC3C(uint64_t a1, int a2)
{
  v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100009F04((uint64_t *)&unk_10032DAE8);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  v54 = v9;
  v44 = v2;
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v46 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v45 = (unint64_t)(v13 + 63) >> 6;
  int v47 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v48 = v6;
  uint64_t v49 = v10;
  uint64_t v55 = v5;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v45) {
      break;
    }
    int64_t v25 = v46;
    unint64_t v26 = v46[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v26 = v46[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v45)
        {
LABEL_34:
          swift_release();
          v3 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v46[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v26 = v46[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v50)
    {
      (*v51)(v54, v29, v55);
      unint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 32 * v23);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = v30[3];
      uint64_t v52 = v30[2];
      uint64_t v53 = v31;
    }
    else
    {
      (*v47)(v54, v29, v55);
      unint64_t v34 = (uint64_t *)(*(void *)(v10 + 56) + 32 * v23);
      uint64_t v35 = *v34;
      uint64_t v32 = v34[1];
      uint64_t v33 = v34[3];
      uint64_t v52 = v34[2];
      uint64_t v53 = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_10022FF54((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v51)(*(void *)(v12 + 48) + v28 * v20, v54, v55);
    int64_t v21 = (void *)(*(void *)(v12 + 56) + 32 * v20);
    *int64_t v21 = v53;
    v21[1] = v32;
    v21[2] = v52;
    v21[3] = v33;
    ++*(void *)(v12 + 16);
    uint64_t v6 = v48;
    uint64_t v10 = v49;
  }
  swift_release();
  v3 = v44;
  int64_t v25 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v25, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v12;
  return result;
}

void sub_10022C0A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10022C0AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001358B8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10022CE80();
LABEL_7:
    v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_errorRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100229B98(v15, a4 & 1);
  unint64_t v21 = sub_1001358B8(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10022C21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1001358B8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10022D038();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_100013198(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100229EB0(v17, a5 & 1);
  unint64_t v23 = sub_1001358B8(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  BOOL v25 = (uint64_t *)(v20[6] + 16 * v14);
  *BOOL v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10022C3A4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1001358B8(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10022D200();
      goto LABEL_7;
    }
    sub_10022A1C0(v15, a4 & 1);
    unint64_t v21 = sub_1001358B8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100008EA8((uint64_t)v19);
    return sub_100009F48(a1, v19);
  }
LABEL_13:
  sub_10022CB08(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_10022C4F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_10022C504(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1001358B8(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10022D878(a5);
LABEL_7:
    unint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10022ABDC(v17, a4 & 1, a5);
  unint64_t v22 = sub_1001358B8(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  unint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v24 = (uint64_t *)(v20[6] + 16 * v14);
  *char v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

void sub_10022C68C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_10022C698(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_10022C6A4(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001358B8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10022DA24();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10022AEE8(result, a4 & 1);
  uint64_t result = sub_1001358B8(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1 & 1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10022C810(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1001358B8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10022DBD0();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      *(unsigned char *)(v18[7] + v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_10022B1F4(result, a4 & 1);
  uint64_t result = sub_1001358B8(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v20 = a2;
  v20[1] = a3;
  *(unsigned char *)(v18[7] + v12) = a1;
  uint64_t v21 = v18[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v23;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_10022C974(_OWORD *a1, uint64_t a2, char a3)
{
  v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100135A98(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10022DD7C();
      goto LABEL_7;
    }
    sub_10022B500(v13, a3 & 1);
    unint64_t v19 = sub_100135A98(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_100135F74(a2, (uint64_t)v21);
      return sub_10022CB74(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_100008EA8((uint64_t)v17);

  return sub_100009F48(a1, v17);
}

unint64_t sub_10022CAC0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *sub_10022CB08(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100009F48(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_10022CB74(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100009F48(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_10022CBF0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v14 = a7[6];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14 + *(void *)(*(void *)(v15 - 8) + 72) * a1, a2, v15);
  uint64_t v17 = (void *)(a7[7] + 32 * a1);
  *uint64_t v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  uint64_t v18 = a7[2];
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    a7[2] = v20;
  }
  return result;
}

void *sub_10022CCC4()
{
  v1 = v0;
  sub_100009F04(&qword_10032DB50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022CE80()
{
  v1 = v0;
  sub_100009F04((uint64_t *)&unk_10032DAC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_errorRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022D038()
{
  v1 = v0;
  sub_100009F04(&qword_10032DB10);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)sub_100013140(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022D200()
{
  v1 = v0;
  sub_100009F04(&qword_10032C6C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100047DD4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    sub_100009F48(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10022D3E8()
{
  return sub_10022D878(&qword_10032DB40);
}

id sub_10022D3F4()
{
  v1 = v0;
  sub_100009F04((uint64_t *)&unk_10032DBA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_10022D59C()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v2);
  char v39 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F04(&qword_10032DC28);
  unint64_t v34 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v42 = v5;
  if (!v6)
  {
    id result = (char *)swift_release();
    uint64_t v32 = v42;
    uint64_t v31 = v34;
LABEL_25:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v7 = v5;
  id result = (char *)(v5 + 64);
  int64_t v9 = (char *)(v4 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  uint64_t v35 = v4 + 64;
  if (v7 != v4 || result >= &v9[8 * v10])
  {
    id result = (char *)memmove(result, v9, 8 * v10);
    uint64_t v7 = v42;
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = v4;
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  uint64_t v38 = v1 + 16;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v1 + 32;
  uint64_t v16 = v39;
  uint64_t v15 = v40;
  uint64_t v17 = v42;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v11 << 6);
      uint64_t v20 = v41;
      goto LABEL_9;
    }
    int64_t v28 = v11 + 1;
    uint64_t v20 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v11;
    if (!v29)
    {
      int64_t v11 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v11);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v29 - 1) & v29;
    unint64_t v19 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(void *)(v20 + 48) + v21, v15);
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v23 = 16 * v19;
    int64_t v24 = (uint64_t *)(v22 + 16 * v19);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v17 + 48) + v21, v16, v15);
    int64_t v27 = (uint64_t *)(*(void *)(v17 + 56) + v23);
    *int64_t v27 = v25;
    v27[1] = v26;
    id result = (char *)sub_100013140(v25, v26);
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v42;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v11 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v11 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v11);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10022D878(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100009F04(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022DA24()
{
  uint64_t v1 = v0;
  sub_100009F04(&qword_100328488);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022DBD0()
{
  uint64_t v1 = v0;
  sub_100009F04(&qword_10032DC08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10022DD7C()
{
  uint64_t v1 = v0;
  sub_100009F04(&qword_10032DB18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100135F74(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100047DD4(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100009F48(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10022DF64()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F04(&qword_10032DBE0);
  unint64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *unint64_t v24 = v8;
    return result;
  }
  id result = (id)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v28 = v2 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    long long v19 = *(void **)(*(void *)(v6 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

char *sub_10022E1FC()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v1);
  char v39 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F04((uint64_t *)&unk_10032DAE8);
  unint64_t v34 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v43 = v4;
  if (!v5)
  {
    id result = (char *)swift_release();
    uint64_t v33 = v43;
    uint64_t v32 = v34;
LABEL_25:
    *uint64_t v32 = v33;
    return result;
  }
  uint64_t v6 = v4;
  id result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v35 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    id result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v43;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v41 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = v43;
  uint64_t v38 = v42 + 16;
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v37 = v42 + 32;
  uint64_t v15 = v42;
  unint64_t v16 = v39;
  uint64_t v17 = v40;
  while (1)
  {
    if (v13)
    {
      uint64_t v44 = (v13 - 1) & v13;
      int64_t v45 = v10;
      unint64_t v18 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v19 = v41;
      goto LABEL_9;
    }
    int64_t v28 = v10 + 1;
    uint64_t v19 = v41;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    int64_t v30 = v10 + 1;
    if (!v29)
    {
      int64_t v30 = v10 + 2;
      if (v10 + 2 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v30);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    uint64_t v44 = (v29 - 1) & v29;
    int64_t v45 = v30;
    unint64_t v18 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v15 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v16, *(void *)(v19 + 48) + v20, v17);
    uint64_t v21 = 32 * v18;
    int64_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 32 * v18);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(void *)(v14 + 48) + v20, v16, v17);
    uint64_t v27 = (void *)(*(void *)(v14 + 56) + v21);
    *uint64_t v27 = v23;
    v27[1] = v24;
    v27[2] = v25;
    v27[3] = v26;
    swift_bridgeObjectRetain();
    id result = (char *)swift_bridgeObjectRetain();
    unint64_t v13 = v44;
    int64_t v10 = v45;
  }
  uint64_t v31 = v10 + 3;
  if (v10 + 3 >= v36)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v32 = v34;
    uint64_t v33 = v43;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v10 + 3;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10022E500(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v67 = a2;
  uint64_t v9 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v66 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v66 + 64);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v58 - v16;
  __chkstk_darwin(v15, v18);
  unint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a3;
  v21[3] = a4;
  uint64_t v64 = a4;
  v21[4] = a5;
  uint64_t v22 = swift_allocObject();
  v61 = (void *)a3;
  swift_retain();
  uint64_t v65 = a5;
  swift_retain();
  uint64_t v23 = _swiftEmptyArrayStorage;
  *(void *)(v22 + 16) = sub_100220B90((uint64_t)_swiftEmptyArrayStorage);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  v62 = v21;
  uint64_t v63 = v22;
  if (v24)
  {
    uint64_t v59 = v10;
    v60 = v17;
    unint64_t v25 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v26 = *(void *)(v66 + 72);
    uint64_t v58 = a1;
    uint64_t v27 = a1 + v25;
    int64_t v28 = _swiftEmptyArrayStorage;
    do
    {
      sub_10022EF40(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      if (*(void *)&v20[*(int *)(v9 + 32)] == 4)
      {
        sub_10022EED8((uint64_t)v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002288E8(0, v28[2] + 1, 1);
        }
        int64_t v28 = (void *)aBlock[0];
        unint64_t v30 = *(void *)(aBlock[0] + 16);
        unint64_t v29 = *(void *)(aBlock[0] + 24);
        if (v30 >= v29 >> 1)
        {
          sub_1002288E8(v29 > 1, v30 + 1, 1);
          int64_t v28 = (void *)aBlock[0];
        }
        v28[2] = v30 + 1;
        sub_10022EED8((uint64_t)v13, (uint64_t)v28 + v25 + v30 * v26, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      }
      else
      {
        sub_10022F3A8((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      }
      v27 += v26;
      --v24;
    }
    while (v24);
    uint64_t v31 = v67;
    uint64_t v23 = (void *)aBlock[0];
    uint64_t v21 = v62;
    uint64_t v32 = v59;
    uint64_t v17 = v60;
  }
  else
  {
    uint64_t v31 = v67;
    uint64_t v32 = v10;
  }
  swift_bridgeObjectRelease();
  if (v23[2])
  {
    uint64_t v33 = (uint64_t)v17;
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E808);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 134217984;
      aBlock[0] = v23[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%ld declined record(s) found, starting cleanup", v37, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    uint64_t v42 = v23[2];
    uint64_t v43 = &unk_10032D000;
    if (v42)
    {
      uint64_t v44 = *(unsigned __int8 *)(v66 + 80);
      uint64_t v45 = (uint64_t)v23 + ((v44 + 32) & ~v44);
      uint64_t v46 = *(char **)&v31[OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_queue];
      uint64_t v66 = *(void *)(v66 + 72);
      v67 = v46;
      uint64_t v64 = v44 | 7;
      uint64_t v65 = (v44 + 16) & ~v44;
      unint64_t v47 = (v32 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
      v61 = v23;
      swift_retain();
      uint64_t v48 = v63;
      do
      {
        sub_10022EF40(v45, v33, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        uint64_t v49 = swift_allocObject();
        sub_10022EED8(v33, v49 + v65, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        *(void *)(v49 + v47) = v31;
        *(void *)(v49 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8)) = v48;
        int v50 = (objc_class *)type metadata accessor for AsyncOperation();
        v51 = objc_allocWithZone(v50);
        v51[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
        uint64_t v52 = (uint64_t (**)(uint64_t, uint64_t))&v51[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
        *uint64_t v52 = sub_10022EDC4;
        v52[1] = (uint64_t (*)(uint64_t, uint64_t))v49;
        v69.receiver = v51;
        v69.super_class = v50;
        swift_retain();
        swift_retain();
        id v53 = [super init];
        [v67 addOperation:v53];

        v45 += v66;
        --v42;
      }
      while (v42);
      swift_release_n();
      uint64_t v21 = v62;
      uint64_t v43 = (void *)&unk_10032D000;
    }
    else
    {
      swift_release();
    }
    v54 = *(void **)&v31[v43[249]];
    uint64_t v55 = (void *)swift_allocObject();
    v55[2] = v63;
    v55[3] = sub_10022EC0C;
    v55[4] = v21;
    aBlock[4] = sub_10022EE80;
    aBlock[5] = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100007244;
    aBlock[3] = &unk_100301CA8;
    v56 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    [v54 addBarrierBlock:v56];
    _Block_release(v56);
  }
  else
  {
    swift_release();
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E808);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "No declined records found. Aborting cleanup.", v41, 2u);
      swift_slowDealloc();
    }

    sub_100024820((uint64_t)v61, v64, v65);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_10022EC0C(uint64_t a1)
{
  return sub_10001B118(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10022EC18()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022EC50()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_10022EDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100225BF8(a1, a2, v2 + v6, v8, v9);
}

void sub_10022EE80()
{
  sub_1002262E8(*(void *)(v0 + 16), *(void (**))(v0 + 24));
}

uint64_t sub_10022EE8C()
{
  return sub_10022F280((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10022EEB8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1002260E0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(uint64_t (**)(uint64_t))(v3 + 40));
}

uint64_t sub_10022EECC(uint64_t a1)
{
  return sub_100226668(a1, *(void (**)(uint64_t, void, void))(v1 + 16), *(void (**)(uint64_t, void, void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10022EED8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10022EF40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10022EFA8()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_10022F1A8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = (uint64_t *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  sub_100226B14(a1, v6, v7, v9, v10);
}

uint64_t sub_10022F254()
{
  return sub_10022F280((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_10022F280(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));
  swift_release();

  return _swift_deallocObject(v2, 56, 7);
}

uint64_t sub_10022F2E0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100025248;
  return sub_100227344(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10022F3A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10022F408()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022F440()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_10022F630(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void *)v1[3];
  uint64_t v6 = (uint64_t (*)(void *, void, void))v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100226E18(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10022F6A8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  v48._countAndFlagsBits = a5;
  v48._object = a6;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  unint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  if (a4) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v47 = v11;
  unint64_t v12 = 0xE000000000000000;
  if (a4) {
    unint64_t v12 = a4;
  }
  int64_t v45 = v10;
  uint64_t v46 = (void *)v12;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; ; uint64_t i = v51)
  {
    if (v9)
    {
      uint64_t v50 = (v9 - 1) & v9;
      int64_t v51 = i;
      unint64_t v15 = __clz(__rbit64(v9)) | (i << 6);
    }
    else
    {
      int64_t v16 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_43;
      }
      if (v16 >= v45) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v44 + 8 * v16);
      int64_t v18 = i + 1;
      if (!v17)
      {
        int64_t v18 = i + 2;
        if (i + 2 >= v45) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v44 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = i + 3;
          if (i + 3 >= v45) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v44 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = i + 4;
            if (i + 4 >= v45) {
              return swift_release();
            }
            unint64_t v17 = *(void *)(v44 + 8 * v18);
            if (!v17)
            {
              uint64_t v19 = i + 5;
              if (i + 5 >= v45) {
                return swift_release();
              }
              unint64_t v17 = *(void *)(v44 + 8 * v19);
              if (!v17)
              {
                while (1)
                {
                  int64_t v18 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_44;
                  }
                  if (v18 >= v45) {
                    return swift_release();
                  }
                  unint64_t v17 = *(void *)(v44 + 8 * v18);
                  ++v19;
                  if (v17) {
                    goto LABEL_28;
                  }
                }
              }
              int64_t v18 = i + 5;
            }
          }
        }
      }
LABEL_28:
      uint64_t v50 = (v17 - 1) & v17;
      int64_t v51 = v18;
      unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    }
    unint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
    uint64_t v22 = *v20;
    uint64_t v21 = (void *)v20[1];
    uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8 * v15);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = v47;
    v24._object = v46;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 58;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    String.append(_:)(v48);
    v26._countAndFlagsBits = 59;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27._countAndFlagsBits = v22;
    v27._object = v21;
    String.append(_:)(v27);
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v29 = (void *)*a2;
    uint64_t v52 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v31 = sub_1001358B8(0, 0xE000000000000000);
    uint64_t v32 = v29[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      break;
    }
    char v35 = v30;
    if (v29[3] >= v34)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v38 = v52;
        if (v30) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_10022CE80();
        uint64_t v38 = v52;
        if (v35) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      sub_100229B98(v34, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = sub_1001358B8(0, 0xE000000000000000);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_45;
      }
      unint64_t v31 = v36;
      uint64_t v38 = v52;
      if (v35)
      {
LABEL_9:
        uint64_t v14 = v38[7];
        swift_errorRelease();
        *(void *)(v14 + 8 * v31) = v23;
        goto LABEL_10;
      }
    }
    v38[(v31 >> 6) + 8] |= 1 << v31;
    char v39 = (void *)(v38[6] + 16 * v31);
    *char v39 = 0;
    v39[1] = 0xE000000000000000;
    *(void *)(v38[7] + 8 * v31) = v23;
    uint64_t v40 = v38[2];
    BOOL v41 = __OFADD__(v40, 1);
    uint64_t v42 = v40 + 1;
    if (v41) {
      goto LABEL_42;
    }
    v38[2] = v42;
    swift_bridgeObjectRetain();
LABEL_10:
    *a2 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    unint64_t v9 = v50;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10022FA5C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, const char *a6)
{
  if (a1)
  {
    id v9 = a1;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v9 setObject:isa forKeyedSubscript:kAAFDidSucceed];

    if (a3) {
      a3 = (void *)_convertErrorToNSError(_:)();
    }
    [v9 populateUnderlyingErrorsStartingWithRootError:a3];

    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E808);
    id v12 = v9;
    swift_retain();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v32 = v29;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v30 = a5;
      uint64_t v17 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
      unint64_t v16 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
      swift_bridgeObjectRetain();
      sub_100135190(v17, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      id v18 = [v12 debugDescription];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      sub_100135190(v19, v21, &v32);
      a5 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - Reporting Record Cleaning Event %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    [*(id *)(a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_analyticsReporter) sendEvent:v12, v29];
    sub_100227164(a5, a6);
  }
  else
  {
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E808);
    swift_retain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      Swift::String v26 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v27 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
      unint64_t v28 = *(void *)(a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
      swift_bridgeObjectRetain();
      sub_100135190(v27, v28, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - Event is nil: %@", (uint8_t *)v25, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_100227164(a5, a6);
  }
}

uint64_t sub_10022FF54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022FFA4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd27PostInstallActivityProvider__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100230050()
{
  return type metadata accessor for PostInstallActivityProvider();
}

uint64_t type metadata accessor for PostInstallActivityProvider()
{
  uint64_t result = qword_10032DCA0;
  if (!qword_10032DCA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002300A4()
{
  sub_1000A7C50();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100230144(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100009F04(&qword_10032C4E0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100009F04(&qword_10032C4E0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_1002301B4(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E700);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v21 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v21;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to fetch family circle: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a3(a2, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (a1)
    {
      id v10 = [a1 members];
      sub_100230630();
      static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    sub_100009F04(&qword_10032DE28);
    uint64_t v11 = Optional._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v22 = (void *)v11;
    sub_100009F04(&qword_10032C4D8);
    if (swift_dynamicCast())
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100007288(v12, (uint64_t)qword_10033E700);
      unint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "All family members fetched.", v15, 2u);
        swift_slowDealloc();
      }

      a3(v20, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_100007288(v16, (uint64_t)qword_10033E700);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "No family members returned.", v19, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10004A318();
      _BridgedStoredNSError.init(_:userInfo:)();
      a3((uint64_t)v22, 1);
    }
  }
}

uint64_t type metadata accessor for DaemonFamilyRequester()
{
  return self;
}

unint64_t sub_100230630()
{
  unint64_t result = qword_10032DE30;
  if (!qword_10032DE30)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032DE30);
  }
  return result;
}

uint64_t type metadata accessor for InheritanceInviteAnalyticsEvent()
{
  uint64_t result = qword_10032DE38;
  if (!qword_10032DE38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002306BC()
{
  return swift_initClassMetadata2();
}

void sub_1002306FC()
{
}

id sub_10023072C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceInviteAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_100230768()
{
  return type metadata accessor for InheritanceInviteAnalyticsEvent();
}

void sub_100230770(void (*a1)(id, uint64_t), uint64_t a2)
{
  uint64_t v5 = sub_100008EF8((void *)(v2 + 56), *(void *)(v2 + 80));
  uint64_t v6 = *v5;
  os_log_type_t v7 = *(void **)(*v5 + 16);
  id v8 = [v7 aa_primaryAppleAccount];
  if (v8
    && (id v9 = v8,
        id v10 = objc_msgSend(v8, "aa_altDSID"),
        id v11 = objc_msgSend(v7, "aa_authKitAccountForAltDSID:", v10),
        v9,
        v10,
        v11)
    && (unsigned int v12 = [*(id *)(v6 + 24) canBeCustodianForAccount:v11], v11, v12))
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    id v13 = sub_10028CC20(qword_10033EA08, unk_10033EA10);
    os_log_type_t v14 = (void *)swift_allocObject();
    v14[2] = a1;
    v14[3] = a2;
    aBlock[4] = sub_1000F0598;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10004DAE8;
    aBlock[3] = &unk_100301E28;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v13 accountInfoWithCompletionHandler:v15];
    _Block_release(v15);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E748);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Account is ineligible to be a custodian", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    a1(aBlock[0], 1);
  }
}

uint64_t type metadata accessor for CustodianAutoAcceptValidator()
{
  return self;
}

uint64_t sub_100230AA8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100230AE4()
{
  return 0;
}

ValueMetadata *type metadata accessor for DeviceInfoProvider()
{
  return &type metadata for DeviceInfoProvider;
}

id sub_100230B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100230CF4(a1, a2, a3, (SEL *)&selRef_addKeychainItem_error_);
}

id sub_100230BDC(uint64_t a1)
{
  return sub_100230C00(a1);
}

id sub_100230C00(uint64_t a1)
{
  id v4 = 0;
  id v2 = [v1 keychainItemForDescriptor:a1 error:&v4];
  if (v4)
  {
    v4;

    swift_willThrow();
  }
  return v2;
}

id sub_100230CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100230CF4(a1, a2, a3, (SEL *)&selRef_deleteKeychainItemsForDescriptor_error_);
}

id sub_100230CF4(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *v4;
  id v8 = 0;
  id result = [v6 *a4:a1:&v8];
  if (v8)
  {
    v8;
    return (id)swift_willThrow();
  }
  return result;
}

void sub_100230D7C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
}

void sub_100230D94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
}

void sub_100230DAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, void (*a6)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v12 = sub_100009F04(&qword_1003229D0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (uint64_t *)((char *)&v40 - v18);
  sub_100019730(a1, (uint64_t)&v40 - v18, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E7A8);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Cloud record deleted from CloudKitStorage.", v31, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    a6(a3, (void (*)(void))a4, a5);
    uint64_t v32 = (uint64_t)v19;
    goto LABEL_19;
  }
  uint64_t v46 = v12;
  uint64_t v20 = *v19;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100007288(v21, (uint64_t)qword_10033E7A8);
  swift_errorRetain();
  uint64_t v43 = v22;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v44 = a3;
  int64_t v45 = a6;
  if (v25)
  {
    uint64_t v42 = a5;
    Swift::String v26 = (uint8_t *)swift_slowAlloc();
    BOOL v41 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v26 = 138412290;
    uint64_t v27 = _convertErrorToNSError(_:)();
    uint64_t v49 = (void *)v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v27;
    a5 = v42;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Cloud delete failed with error: %@", v26, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  swift_getErrorValue();
  uint64_t v33 = sub_1001A84EC(v50);
  if (!v33)
  {
LABEL_18:
    *uint64_t v16 = v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v16);
    swift_errorRelease();
    uint64_t v32 = (uint64_t)v16;
LABEL_19:
    sub_100006574(v32, &qword_1003229D0);
    return;
  }
  uint64_t v34 = (void *)v33;
  type metadata accessor for CKError(0);
  uint64_t v48 = 11;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000071B4((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  char v35 = v49;
  uint64_t v47 = v49;
  _BridgedStoredNSError.code.getter();

  unint64_t v36 = (void *)sub_1001A8B9C(v48, v34);
  if (!v36)
  {

    goto LABEL_18;
  }
  char v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Delete error is CK Unknown Item", v39, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  v45(v44, (void (*)(void))a4, a5);
  swift_errorRelease();
}

void sub_1002312C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
}

void sub_1002312E0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
}

void sub_1002312F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v12 = sub_100009F04(&qword_1003229D0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (uint64_t *)((char *)&v40 - v18);
  sub_100019730(a1, (uint64_t)&v40 - v18, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E7A8);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Cloud record deleted from CloudKitStorage.", v33, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    a6(a3, a4, a5);
    uint64_t v34 = (uint64_t)v19;
    goto LABEL_19;
  }
  uint64_t v46 = a2;
  uint64_t v20 = *v19;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100007288(v21, (uint64_t)qword_10033E7A8);
  swift_errorRetain();
  uint64_t v45 = v22;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v43 = a4;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v44 = a5;
    Swift::String v26 = (uint8_t *)v25;
    BOOL v41 = (void *)swift_slowAlloc();
    uint64_t v42 = a3;
    *(_DWORD *)Swift::String v26 = 138412290;
    uint64_t v27 = v20;
    uint64_t v28 = a6;
    uint64_t v29 = _convertErrorToNSError(_:)();
    uint64_t v47 = v29;
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v29;
    a6 = v28;
    uint64_t v20 = v27;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Cloud delete failed with error: %@", v26, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    a3 = v42;
    swift_slowDealloc();
    a5 = v44;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  swift_getErrorValue();
  char v35 = (void *)sub_1001A84EC(v48);
  if (!v35)
  {
LABEL_18:
    *uint64_t v16 = v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v16);
    swift_errorRelease();
    uint64_t v34 = (uint64_t)v16;
LABEL_19:
    sub_100006574(v34, &qword_1003229D0);
    return;
  }
  unint64_t v36 = v35;
  if (!sub_1001A84E4(v35))
  {

    goto LABEL_18;
  }
  char v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Delete error is CK Unknown Item", v39, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v46 + 16), *(void *)(v46 + 40));
  a6(a3, a4, a5);
  swift_errorRelease();
}

void sub_100231788(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void (*a6)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v12 = sub_100009F04(&qword_1003229D0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (uint64_t *)((char *)&v40 - v18);
  sub_100019730(a1, (uint64_t)&v40 - v18, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E7A8);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Cloud record deleted from CloudKitStorage.", v33, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    a6(a3, a4, a5);
    uint64_t v34 = (uint64_t)v19;
    goto LABEL_19;
  }
  uint64_t v46 = a2;
  uint64_t v20 = *v19;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100007288(v21, (uint64_t)qword_10033E7A8);
  swift_errorRetain();
  uint64_t v45 = v22;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v43 = a4;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v44 = a5;
    Swift::String v26 = (uint8_t *)v25;
    BOOL v41 = (void *)swift_slowAlloc();
    uint64_t v42 = a3;
    *(_DWORD *)Swift::String v26 = 138412290;
    uint64_t v27 = v20;
    uint64_t v28 = a6;
    uint64_t v29 = _convertErrorToNSError(_:)();
    uint64_t v47 = v29;
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v29;
    a6 = v28;
    uint64_t v20 = v27;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Cloud delete failed with error: %@", v26, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    a3 = v42;
    swift_slowDealloc();
    a5 = v44;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  swift_getErrorValue();
  char v35 = (void *)sub_1001A84EC(v48);
  if (!v35)
  {
LABEL_18:
    *uint64_t v16 = v20;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v16);
    swift_errorRelease();
    uint64_t v34 = (uint64_t)v16;
LABEL_19:
    sub_100006574(v34, &qword_1003229D0);
    return;
  }
  unint64_t v36 = v35;
  if (!sub_1001A84E4(v35))
  {

    goto LABEL_18;
  }
  char v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Delete error is CK Unknown Item", v39, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v46 + 16), *(void *)(v46 + 40));
  a6(a3, a4, a5);
  swift_errorRelease();
}

uint64_t sub_100231C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100244378;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1003025B0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_100231F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_1002441E4;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100302560;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_100232300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100243FC8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100302510;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_100232674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100243E54;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1003024C0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_1002329E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianHealthRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_1002439C8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100302420;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_100232D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100243800;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1003023D0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_1002330D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v27 = *(void *)(v3 + 32);
  sub_100241844(a1, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = swift_allocObject();
  sub_100242154((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v20 = (void *)(v19 + ((v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100243CA0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100302470;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v28);
  return swift_release();
}

uint64_t sub_100233444(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v3, v4);
  uint64_t v46 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v43 - v20;
  id v22 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v14, v9);
  uint64_t v45 = v3;
  uint64_t v24 = v50 + *(int *)(v3 + 36);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v23(v21, v9);
  id v52 = 0;
  LODWORD(v21) = [v22 removeItemAtURL:v27 error:&v52];

  id v28 = v52;
  if (v21)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v24, v29);
    swift_storeEnumTagMultiPayload();
    v49(v8);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v8;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v46;
    sub_100241844(v50, v46, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v52 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_100135190(v38, v39, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v51 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v49;
    uint64_t v8 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v8);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v8, &qword_1003229D0);
}

uint64_t sub_100233A70(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v3, v4);
  uint64_t v46 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v43 - v20;
  id v22 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v14, v9);
  uint64_t v45 = v3;
  uint64_t v24 = v50 + *(int *)(v3 + 32);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v23(v21, v9);
  id v52 = 0;
  LODWORD(v21) = [v22 removeItemAtURL:v27 error:&v52];

  id v28 = v52;
  if (v21)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v24, v29);
    swift_storeEnumTagMultiPayload();
    v49(v8);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v8;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v46;
    sub_100241844(v50, v46, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v52 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_100135190(v38, v39, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v51 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v49;
    uint64_t v8 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v8);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v8, &qword_1003229D0);
}

uint64_t sub_10023409C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v3, v4);
  uint64_t v46 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v43 - v20;
  id v22 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v14, v9);
  uint64_t v45 = v3;
  uint64_t v24 = v50 + *(int *)(v3 + 28);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v23(v21, v9);
  id v52 = 0;
  LODWORD(v21) = [v22 removeItemAtURL:v27 error:&v52];

  id v28 = v52;
  if (v21)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v24, v29);
    swift_storeEnumTagMultiPayload();
    v49(v8);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v8;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v46;
    sub_100241844(v50, v46, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v52 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_100135190(v38, v39, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v51 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v49;
    uint64_t v8 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v8);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v8, &qword_1003229D0);
}

uint64_t sub_1002346C8(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  uint64_t v50 = a1;
  uint64_t v3 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v3, v4);
  uint64_t v46 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v43 - v20;
  id v22 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v14, v9);
  uint64_t v45 = v3;
  uint64_t v24 = v50 + *(int *)(v3 + 28);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v23(v21, v9);
  id v52 = 0;
  LODWORD(v21) = [v22 removeItemAtURL:v27 error:&v52];

  id v28 = v52;
  if (v21)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v8, v24, v29);
    swift_storeEnumTagMultiPayload();
    v49(v8);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v8;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v46;
    sub_100241844(v50, v46, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v52 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v51 = sub_100135190(v38, v39, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v51 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v49;
    uint64_t v8 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v8);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v8, &qword_1003229D0);
}

uint64_t sub_100234CF4(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v46 = a2;
  uint64_t v4 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17, v20);
  id v22 = (char *)&v43 - v21;
  id v23 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v15, v10);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v24(v19, v10);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v24(v22, v10);
  id v50 = 0;
  LODWORD(v22) = [v23 removeItemAtURL:v27 error:&v50];

  id v28 = v50;
  if (v22)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v9, a1, v29);
    swift_storeEnumTagMultiPayload();
    v46(v9);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v9;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v45;
    sub_100241844(a1, v45, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v50 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_100135190(v38, v39, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v49 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v46;
    uint64_t v9 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v9);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v9, &qword_1003229D0);
}

uint64_t sub_100235308(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v46 = a2;
  uint64_t v4 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17, v20);
  id v22 = (char *)&v43 - v21;
  id v23 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v15, v10);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v24(v19, v10);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v24(v22, v10);
  id v50 = 0;
  LODWORD(v22) = [v23 removeItemAtURL:v27 error:&v50];

  id v28 = v50;
  if (v22)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v9, a1, v29);
    swift_storeEnumTagMultiPayload();
    v46(v9);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v9;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v45;
    sub_100241844(a1, v45, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v50 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_100135190(v38, v39, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v49 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v46;
    uint64_t v9 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v9);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v9, &qword_1003229D0);
}

uint64_t sub_10023591C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v46 = a2;
  uint64_t v4 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v45 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v47, v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17, v20);
  id v22 = (char *)&v43 - v21;
  id v23 = [self defaultManager];
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v15, v10);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v24(v19, v10);
  URL._bridgeToObjectiveC()(v25);
  uint64_t v27 = v26;
  v24(v22, v10);
  id v50 = 0;
  LODWORD(v22) = [v23 removeItemAtURL:v27 error:&v50];

  id v28 = v50;
  if (v22)
  {
    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v9, a1, v29);
    swift_storeEnumTagMultiPayload();
    v46(v9);
  }
  else
  {
    uint64_t v30 = v28;
    uint64_t v44 = (uint64_t *)v9;
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E7A8);
    uint64_t v33 = v45;
    sub_100241844(a1, v45, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      char v37 = (void *)swift_slowAlloc();
      id v50 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      type metadata accessor for UUID();
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = sub_100135190(v38, v39, (uint64_t *)&v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v36 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v49 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v37 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error deleting %s from LocalCache: %@", (uint8_t *)v36, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1002417E4(v33, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    BOOL v41 = v46;
    uint64_t v9 = (char *)v44;
    uint64_t *v44 = v31;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v41(v9);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v9, &qword_1003229D0);
}

uint64_t sub_100235F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(NSObject **), uint64_t a6)
{
  uint64_t v85 = a6;
  v86 = a5;
  uint64_t v78 = a3;
  uint64_t v81 = a2;
  uint64_t v82 = a1;
  uint64_t v76 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v76, v7);
  v75 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v9 - 8, v10);
  v80 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianHealthRecord();
  uint64_t v77 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v79 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  id v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v24 - 8, v25);
  uint64_t v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for CustodianRecord();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  uint64_t v32 = (char *)&v72 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v84, v33);
  v83 = (NSObject **)((char *)&v72 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(a4 + 16))
  {
    type metadata accessor for AAError(0);
    uint64_t v87 = -4408;
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v36;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = a4;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_1000071B4((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    char v37 = v88;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E748);
    unint64_t v39 = v37;
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 138412290;
      uint64_t v44 = _convertErrorToNSError(_:)();
      v88 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v43 = v44;

      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to fetch all custodianship records: %@", v42, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v40 = v39;
    }

    id v50 = v83;
    *v83 = v39;
    swift_storeEnumTagMultiPayload();
    uint64_t v51 = v39;
    v86(v50);

    uint64_t v52 = (uint64_t)v50;
    return sub_100006574(v52, (uint64_t *)&unk_100322960);
  }
  uint64_t v45 = v79;
  v74 = v19;
  uint64_t v73 = v12;
  uint64_t v46 = (uint64_t)v80;
  uint64_t v47 = v81;
  sub_100019730(v82, (uint64_t)v27, &qword_100328480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    uint64_t v48 = &qword_100328480;
    uint64_t v49 = (uint64_t)v27;
LABEL_14:
    sub_100006574(v49, v48);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100007288(v57, (uint64_t)qword_10033E748);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to fetch all custodianship records.", v60, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v87 = -7003;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    v61 = v83;
    *v83 = v88;
    swift_storeEnumTagMultiPayload();
    v86(v61);
    uint64_t v52 = (uint64_t)v61;
    return sub_100006574(v52, (uint64_t *)&unk_100322960);
  }
  uint64_t v53 = (uint64_t)v27;
  uint64_t v54 = (uint64_t)v32;
  sub_100242154(v53, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v55 = (uint64_t)v74;
  sub_100019730(v47, (uint64_t)v74, &qword_100323598);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v55, 1, v20) == 1)
  {
    sub_1002417E4(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v48 = &qword_100323598;
    uint64_t v49 = v55;
    goto LABEL_14;
  }
  uint64_t v56 = (uint64_t)v23;
  sub_100242154(v55, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100019730(v78, v46, (uint64_t *)&unk_10032E120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v46, 1, v73) == 1)
  {
    sub_1002417E4((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_1002417E4(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v48 = (uint64_t *)&unk_10032E120;
    uint64_t v49 = v46;
    goto LABEL_14;
  }
  uint64_t v63 = (uint64_t)v15;
  sub_100242154(v46, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  sub_100007288(v64, (uint64_t)qword_10033E748);
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.info.getter();
  BOOL v67 = os_log_type_enabled(v65, v66);
  uint64_t v68 = (uint64_t)v75;
  uint64_t v69 = v76;
  if (v67)
  {
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Custodianship records fetched successfully.", v70, 2u);
    swift_slowDealloc();
  }

  sub_100241844(v54, v68, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_100241844(v56, v68 + *(int *)(v69 + 20), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100241844(v63, v68 + *(int *)(v69 + 24), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  v71 = v83;
  sub_100241844(v68, (uint64_t)v83, type metadata accessor for CustodianshipRecords);
  swift_storeEnumTagMultiPayload();
  v86(v71);
  sub_100006574((uint64_t)v71, (uint64_t *)&unk_100322960);
  sub_1002417E4(v68, type metadata accessor for CustodianshipRecords);
  sub_1002417E4(v63, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_1002417E4(v56, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_1002417E4(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_1002369EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4, v5);
  v71 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for DispatchQoS();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v7);
  uint64_t v69 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v63 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E748);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v66 = a1;
  v18(v16, a1, v12);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = (void *)sub_100135190(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetching custodianship owner records with ID: %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }

  uint64_t v24 = dispatch_group_create();
  sub_100009F04(&qword_100328480);
  uint64_t v25 = swift_allocBox();
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for CustodianRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
  sub_100009F04(&qword_100323598);
  uint64_t v29 = swift_allocBox();
  uint64_t v31 = v30;
  uint64_t v32 = type metadata accessor for CustodianRecoveryInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  sub_100009F04((uint64_t *)&unk_10032E120);
  uint64_t v33 = swift_allocBox();
  uint64_t v35 = v34;
  uint64_t v36 = type metadata accessor for CustodianHealthRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = 0;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = 0;
  dispatch_group_enter(v24);
  uint64_t v40 = (void *)swift_allocObject();
  uint64_t v76 = v25;
  v40[2] = v25;
  v40[3] = v37;
  v40[4] = v24;
  swift_retain();
  swift_retain();
  os_log_type_t v41 = v24;
  uint64_t v42 = v66;
  sub_10023B75C(v66, (uint64_t)sub_1002429D4, (uint64_t)v40);
  swift_release();
  dispatch_group_enter(v41);
  uint64_t v43 = (void *)swift_allocObject();
  uint64_t v75 = v29;
  v43[2] = v29;
  v43[3] = v38;
  v43[4] = v41;
  uint64_t v44 = v41;
  swift_retain();
  swift_retain();
  sub_100239384(v42, (uint64_t)sub_1002429E4, (uint64_t)v43);
  swift_release();
  dispatch_group_enter(v44);
  uint64_t v45 = (void *)swift_allocObject();
  v45[2] = v33;
  v45[3] = v39;
  v45[4] = v44;
  v62 = v44;
  swift_retain();
  swift_retain();
  sub_10023DA54(v42, (uint64_t)sub_100242A3C, (uint64_t)v45);
  swift_release();
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  uint64_t v47 = v64;
  uint64_t v46 = v65;
  uint64_t v48 = v63;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for DispatchQoS.QoSClass.default(_:), v65);
  uint64_t v49 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  id v50 = (void *)swift_allocObject();
  v50[2] = v37;
  v50[3] = v38;
  uint64_t v51 = v67;
  uint64_t v52 = v68;
  v50[4] = v39;
  v50[5] = v51;
  uint64_t v54 = v75;
  uint64_t v53 = v76;
  v50[6] = v52;
  v50[7] = v53;
  v50[8] = v54;
  v50[9] = v33;
  v61[1] = v33;
  aBlock[4] = (uint64_t)sub_100242AB0;
  aBlock[5] = (uint64_t)v50;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100007244;
  aBlock[3] = (uint64_t)&unk_100302218;
  uint64_t v55 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v56 = v69;
  static DispatchQoS.unspecified.getter();
  uint64_t v77 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v57 = v71;
  uint64_t v58 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  os_log_type_t v59 = v62;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v55);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v58);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v72);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100237314(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (void *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = swift_projectBox();
  sub_100019730(a1, (uint64_t)v14, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = *v14;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)(a3 + 16);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v23 = _convertErrorToNSError(_:)();
      v25[1] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch custodian record: %@", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v17 = v16;
    swift_errorRelease();
  }
  else
  {
    sub_100242154((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v24 = type metadata accessor for CustodianRecord();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 0, 1, v24);
    swift_beginAccess();
    sub_100242AC4((uint64_t)v10, v15, &qword_100328480);
  }
  dispatch_group_leave(a4);
}

void sub_10023763C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (void *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = swift_projectBox();
  sub_100019730(a1, (uint64_t)v14, &qword_1003235A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = *v14;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)(a3 + 16);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v23 = _convertErrorToNSError(_:)();
      v25[1] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch custodianship record: %@", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v17 = v16;
    swift_errorRelease();
  }
  else
  {
    sub_100242154((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v24 = type metadata accessor for CustodianRecoveryInfoRecord();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 0, 1, v24);
    swift_beginAccess();
    sub_100242AC4((uint64_t)v10, v15, &qword_100323598);
  }
  dispatch_group_leave(a4);
}

void sub_100237964(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (void *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = swift_projectBox();
  sub_100019730(a1, (uint64_t)v14, &qword_100323580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = *v14;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)(a3 + 16);
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      uint64_t v23 = _convertErrorToNSError(_:)();
      v25[1] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch health record: %@", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v17 = v16;
    swift_errorRelease();
  }
  else
  {
    sub_100242154((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v24 = type metadata accessor for CustodianHealthRecord();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 0, 1, v24);
    swift_beginAccess();
    sub_100242AC4((uint64_t)v10, v15, (uint64_t *)&unk_10032E120);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_100237C8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, char *, void *), uint64_t a5)
{
  v33[1] = a5;
  uint64_t v34 = a4;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v20 = (uint64_t *)(a2 + 16);
  uint64_t v21 = swift_projectBox();
  uint64_t v22 = swift_projectBox();
  v33[0] = swift_projectBox();
  swift_beginAccess();
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = &_swiftEmptyDictionarySingleton;
  if (v23)
  {
    swift_errorRetain();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = &_swiftEmptyDictionarySingleton;
    sub_10022C0AC(v23, 0xD000000000000013, 0x80000001002A0C90, isUniquelyReferenced_nonNull_native);
    uint64_t v24 = v37;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  uint64_t v26 = (uint64_t *)(a3 + 16);
  swift_beginAccess();
  uint64_t v27 = *v20;
  if (v27)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = v24;
    sub_10022C0AC(v27, 0xD000000000000016, 0x80000001002A0C70, v28);
    uint64_t v24 = v36;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v29 = *v26;
  if (v29)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v35 = v24;
    sub_10022C0AC(v29, 0xD00000000000001FLL, 0x80000001002A0C50, v30);
    uint64_t v24 = v35;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  sub_100019730(v21, (uint64_t)v19, &qword_100328480);
  swift_beginAccess();
  sub_100019730(v22, (uint64_t)v15, &qword_100323598);
  uint64_t v31 = v33[0];
  swift_beginAccess();
  sub_100019730(v31, (uint64_t)v11, (uint64_t *)&unk_10032E120);
  v34(v19, v15, v11, v24);
  swift_bridgeObjectRelease();
  sub_100006574((uint64_t)v11, (uint64_t *)&unk_10032E120);
  sub_100006574((uint64_t)v15, &qword_100323598);
  return sub_100006574((uint64_t)v19, &qword_100328480);
}

uint64_t sub_100238028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[7] = sub_100009F04(&qword_100325510);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for CustodianRecoveryRecords(0);
  v7[10] = swift_task_alloc();
  v7[11] = type metadata accessor for CustodianHealthRecord();
  v7[12] = swift_task_alloc();
  type metadata accessor for CustodianRecoveryInfoRecord();
  v7[13] = swift_task_alloc();
  v7[14] = type metadata accessor for CustodianshipInfoRecord();
  v7[15] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v7[16] = v8;
  v7[17] = *(void *)(v8 - 8);
  v7[18] = swift_task_alloc();
  v7[19] = swift_task_alloc();
  return _swift_task_switch(sub_1002381EC, 0, 0);
}

uint64_t sub_1002381EC()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 136) + 16);
  v1(*(void *)(v0 + 152), *(void *)(v0 + 24), *(void *)(v0 + 128));
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 160) = sub_100007288(v5, (uint64_t)qword_10033E748);
  v1(v2, v3, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 128);
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = sub_100135190(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching recovery records with ID: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(*(void *)(v0 + 144), *(void *)(v0 + 128));
  }

  *(void *)(v0 + 168) = v15;
  uint64_t v16 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 176) = v16;
  v16[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1002384FC;
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 120);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v18, 0, 0, 0xD00000000000001DLL, 0x800000010029EB40, sub_10018FEFC, v16, v19);
}

uint64_t sub_1002384FC()
{
  uint64_t v2 = (void *)*v1;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10023878C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[25] = v3;
    void *v3 = v2;
    v3[1] = sub_100238678;
    uint64_t v4 = v2[13];
    uint64_t v5 = v2[3];
    return sub_10023A26C(v4, v5);
  }
}

uint64_t sub_100238678()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100238E38;
  }
  else {
    uint64_t v2 = sub_1002388AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023878C()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = *(void (**)(void *))(v0 + 40);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  void *v2 = v1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v3(v2);
  swift_errorRelease();
  sub_100006574((uint64_t)v2, &qword_100325510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1002388AC()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t RecoveryRecordsRequest = type metadata accessor for FetchRecoveryRecordsRequest(0);
  if (*(unsigned char *)(v1 + *(int *)(RecoveryRecordsRequest + 24)) == 1)
  {
    uint64_t v6 = RecoveryRecordsRequest;
    uint64_t v7 = v0[3];
    sub_10000850C(0, (unint64_t *)&qword_100329940);
    uint64_t v8 = *(int *)(v6 + 32);
    uint64_t v9 = (uint64_t *)(v7 + *(int *)(v6 + 28));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v7 + v8;
    uint64_t v13 = *(void *)(v7 + v8);
    uint64_t v14 = *(void *)(v12 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = sub_100225978(v2, v4, v10, v11, v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = 0;
  }
  v0[27] = v15;
  uint64_t v16 = v0[19];
  uint64_t v17 = v0[4];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v19 = swift_task_alloc();
  v0[28] = v19;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v16;
  os_log_type_t v20 = (void *)swift_task_alloc();
  v0[29] = v20;
  *os_log_type_t v20 = v0;
  v20[1] = sub_100238A5C;
  uint64_t v21 = v0[12];
  return sub_100169DF0(v21, (uint64_t)v15, (int *)&unk_10032E0F8, v19, ObjectType);
}

uint64_t sub_100238A5C()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100238F6C;
  }
  else {
    uint64_t v2 = sub_100238B8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100238B8C()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  sub_100241844(v0[15], v3, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100241844(v1, v3 + *(int *)(v4 + 20), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100241844(v2, v3 + *(int *)(v4 + 24), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Custodianship records fetched successfully.", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = (void *)v0[27];
  uint64_t v18 = v0[19];
  uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v17 = v0[16];
  uint64_t v16 = v0[15];
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[8];
  uint64_t v13 = (void (*)(uint64_t))v0[5];

  sub_100241844(v11, v12, type metadata accessor for CustodianRecoveryRecords);
  swift_storeEnumTagMultiPayload();
  v13(v12);

  sub_100006574(v12, &qword_100325510);
  sub_1002417E4(v11, type metadata accessor for CustodianRecoveryRecords);
  sub_1002417E4(v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_1002417E4(v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_1002417E4(v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  v19(v18, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100238E38()
{
  sub_1002417E4(*(void *)(v0 + 120), (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = *(void (**)(void *))(v0 + 40);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  void *v2 = v1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v3(v2);
  swift_errorRelease();
  sub_100006574((uint64_t)v2, &qword_100325510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100238F6C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 104);

  sub_1002417E4(v2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_1002417E4(v1, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void **)(v0 + 64);
  uint64_t v5 = *(void (**)(void *))(v0 + 40);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 152), *(void *)(v0 + 128));
  void *v4 = v3;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v5(v4);
  swift_errorRelease();
  sub_100006574((uint64_t)v4, &qword_100325510);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1002390CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1002390F0, 0, 0);
}

uint64_t sub_1002390F0()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = type metadata accessor for CustodianHealthRecord();
  void *v2 = v0;
  v2[1] = sub_1002391E4;
  uint64_t v4 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000021, 0x800000010029FD90, sub_1001F19F4, v1, v3);
}

uint64_t sub_1002391E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100239320, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100239320()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100239384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v44 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v45 = (char *)&v35 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v35 - v16;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39(v17, a1, v10);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = a1;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v48 = v36;
    uint64_t v38 = v4;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v35 = v22 + 4;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = sub_100135190(v23, v24, &v48);
    uint64_t v4 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetching recovery info with ID: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v37;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  uint64_t v25 = v40;
  v39(v40, a1, v10);
  unint64_t v26 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v27 + v26, v25, v10);
  char v28 = (void *)(v27 + ((v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v29 = v43;
  *char v28 = v41;
  v28[1] = v29;
  char v30 = sub_100008EF8((void *)(v42 + 16), *(void *)(v42 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  uint64_t v31 = v44;
  sub_10000A280();
  uint64_t v32 = (uint64_t)v45;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v46 + 8);
  v33(v31, v4);
  sub_100008EF8((void *)(*v30 + 16), *(void *)(*v30 + 40));
  sub_1000B3794(v32, (uint64_t)sub_1002428F4, v27);
  v33((char *)v32, v4);
  return swift_release();
}

uint64_t sub_100239844(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v84 = a5;
  uint64_t v83 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v83, v9);
  uint64_t v11 = (uint64_t *)&v73[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = &v73[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v17);
  uint64_t v19 = &v73[-v18];
  uint64_t v20 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  unint64_t v26 = &v73[-v25];
  uint64_t v28 = __chkstk_darwin(v24, v27);
  char v30 = &v73[-v29];
  __chkstk_darwin(v28, v31);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      id v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      uint64_t v51 = _convertErrorToNSError(_:)();
      v86 = (void *)v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v50 = v51;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error fetching recovery info records: %@", v49, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v11);
    sub_100007844(a1, 1);
    return sub_100006574((uint64_t)v11, &qword_1003235A0);
  }
  uint64_t v79 = v11;
  v80 = a4;
  uint64_t v35 = *(void *)(a1 + 16);
  if (!v35)
  {
LABEL_7:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E748);
    uint64_t v39 = v81;
    uint64_t v40 = v82;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v81 + 16))(v19, a3, v82);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v86 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = sub_100135190(v44, v45, (uint64_t *)&v86);
      uint64_t v11 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "No recovery info with id %s found.", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
    }

    uint64_t v52 = v80;
    type metadata accessor for AACustodianError(0);
    uint64_t v85 = -7062;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v53 = v86;
    *uint64_t v11 = (uint64_t)v86;
    swift_storeEnumTagMultiPayload();
    id v54 = v53;
    v52(v11);

    return sub_100006574((uint64_t)v11, &qword_1003235A0);
  }
  uint64_t v77 = v34;
  uint64_t v78 = &v73[-v33];
  uint64_t v36 = a1 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
  uint64_t v37 = *(void *)(v32 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100241844(v36, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    if (static UUID.== infix(_:_:)()) {
      break;
    }
    sub_1002417E4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    v36 += v37;
    if (!--v35)
    {
      sub_100007844(a1, 0);
      uint64_t v11 = v79;
      goto LABEL_7;
    }
  }
  sub_100007844(a1, 0);
  sub_100242154((uint64_t)v26, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v56 = v78;
  sub_100242154((uint64_t)v30, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_100007288(v57, (uint64_t)qword_10033E748);
  uint64_t v58 = v81;
  uint64_t v59 = v82;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v81 + 16))(v16, a3, v82);
  uint64_t v60 = (uint64_t)v56;
  uint64_t v61 = v77;
  sub_100241844(v60, v77, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  int v64 = v63;
  BOOL v65 = os_log_type_enabled(v62, v63);
  uint64_t v66 = (uint64_t)v79;
  if (v65)
  {
    uint64_t v67 = swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    v86 = (void *)v76;
    *(_DWORD *)uint64_t v67 = 136315394;
    os_log_t v75 = v62;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v74 = v64;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_100135190(v68, v69, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v16, v59);
    *(_WORD *)(v67 + 12) = 2080;
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_100135190(v70, v71, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002417E4(v61, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    v62 = v75;
    _os_log_impl((void *)&_mh_execute_header, v75, (os_log_type_t)v74, "Found recovery info for id %s: %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v16, v59);
    sub_1002417E4(v61, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }

  uint64_t v72 = v78;
  sub_100241844((uint64_t)v78, v66, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_storeEnumTagMultiPayload();
  v80((uint64_t *)v66);
  sub_100006574(v66, &qword_1003235A0);
  return sub_1002417E4((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_10023A26C(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v3[9] = type metadata accessor for FetchRecoveryRecordsRequest(0);
  v3[10] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[11] = v6;
  *uint64_t v6 = v3;
  v6[3] = v2;
  v6[4] = a2;
  v6[1] = sub_10023A35C;
  v6[2] = a1;
  return _swift_task_switch(sub_10023ABF8, 0, 0);
}

uint64_t sub_10023A35C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_10023A498, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_10023A498()
{
  v0[2] = v0[12];
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for AACustodianError(0);
  if (swift_dynamicCast())
  {
    uint64_t v1 = v0[10];
    uint64_t v2 = v0[7];
    swift_errorRelease();
    uint64_t v3 = v0[3];
    v0[5] = v3;
    v0[13] = v3;
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.code.getter();
    uint64_t v4 = v0[4];
    sub_100241844(v2, v1, type metadata accessor for FetchRecoveryRecordsRequest);
    uint64_t v5 = v0[10];
    if (v4 == -7062)
    {
      char v6 = *(unsigned char *)(v5 + *(int *)(v0[9] + 20));
      sub_1002417E4(v5, type metadata accessor for FetchRecoveryRecordsRequest);
      if (v6)
      {
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        v0[14] = sub_100007288(v7, (uint64_t)qword_10033E748);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "Recovery Info record not found. Fetching the record from cloud.", v10, 2u);
          swift_slowDealloc();
        }

        uint64_t v11 = swift_task_alloc();
        v0[15] = v11;
        *(void *)uint64_t v11 = v0;
        *(void *)(v11 + 8) = sub_10023A7AC;
        *(_OWORD *)(v11 + 24) = *(_OWORD *)(v0 + 7);
        return _swift_task_switch(sub_10023B1E4, 0, 0);
      }
    }
    else
    {
      sub_1002417E4(v5, type metadata accessor for FetchRecoveryRecordsRequest);
    }
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_willThrow();
  }
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10023A7AC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10023A8A8, 0, 0);
}

uint64_t sub_10023A8A8()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Recovery Info record not found. Fetching the record from cloud.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 128) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_10023A9D8;
  uint64_t v5 = *(void *)(v0 + 48);
  *(int8x16_t *)(v4 + 24) = vextq_s8(*(int8x16_t *)(v0 + 56), *(int8x16_t *)(v0 + 56), 8uLL);
  *(void *)(v4 + 16) = v5;
  return _swift_task_switch(sub_10023ABF8, 0, 0);
}

uint64_t sub_10023A9D8()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10023AB60;
  }
  else {
    os_log_type_t v2 = sub_10023AAEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023AAEC()
{
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023AB60()
{
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023ABD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10023ABF8, 0, 0);
}

uint64_t sub_10023ABF8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t RecoveryRecordsRequest = type metadata accessor for FetchRecoveryRecordsRequest(0);
  if (*(unsigned char *)(v1 + *(int *)(RecoveryRecordsRequest + 24)) == 1)
  {
    uint64_t v6 = RecoveryRecordsRequest;
    uint64_t v7 = *(void *)(v0 + 32);
    sub_10000850C(0, (unint64_t *)&qword_100329940);
    uint64_t v8 = *(int *)(v6 + 32);
    os_log_type_t v9 = (uint64_t *)(v7 + *(int *)(v6 + 28));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v7 + v8;
    uint64_t v13 = *(void *)(v7 + v8);
    uint64_t v14 = *(void *)(v12 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = sub_100225978(v2, v4, v10, v11, v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = 0;
  }
  *(void *)(v0 + 40) = v15;
  uint64_t v16 = swift_task_alloc();
  *(void *)(v0 + 48) = v16;
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v16 + 32) = v15;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v17;
  uint64_t v18 = type metadata accessor for CustodianRecoveryInfoRecord();
  *uint64_t v17 = v0;
  v17[1] = sub_10023ADBC;
  uint64_t v19 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v19, 0, 0, 0xD00000000000001CLL, 0x80000001002A0C30, sub_100242734, v16, v18);
}

uint64_t sub_10023ADBC()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10023AF3C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10023AED8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023AED8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023AF3C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10023AFA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = a4;
  uint64_t v7 = sub_100009F04(&qword_10032E158);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  uint64_t v11 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v23;
  *(void *)(v18 + 16) = v23;
  *(void *)(v18 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  id v20 = v19;
  swift_retain();
  sub_100239384((uint64_t)v16, (uint64_t)sub_10024281C, v18);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_10023B1C4(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_10023B1E4, 0, 0);
}

uint64_t sub_10023B1E4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t RecoveryRecordsRequest = type metadata accessor for FetchRecoveryRecordsRequest(0);
  if (*(unsigned char *)(v1 + *(int *)(RecoveryRecordsRequest + 24)) == 1)
  {
    uint64_t v6 = RecoveryRecordsRequest;
    uint64_t v7 = v0[3];
    sub_10000850C(0, (unint64_t *)&qword_100329940);
    uint64_t v8 = *(int *)(v6 + 32);
    uint64_t v9 = (uint64_t *)(v7 + *(int *)(v6 + 28));
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v7 + v8;
    uint64_t v13 = *(void *)(v7 + v8);
    uint64_t v14 = *(void *)(v12 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = sub_100225978(v2, v4, v10, v11, v13, v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v15 = 0;
  }
  v0[5] = v15;
  sub_100008EF8((void *)(v0[4] + 16), *(void *)(v0[4] + 40));
  uint64_t v16 = (void *)swift_task_alloc();
  v0[6] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10023B34C;
  return sub_10010F38C();
}

uint64_t sub_10023B34C()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10023B4FC;
  }
  else {
    uint64_t v2 = sub_10023B460;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10023B460()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    [v1 updateTaskResultWithError:0];
    uint64_t v2 = *(void **)(v0 + 40);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_getObjectType();
  sub_100169BA4((uint64_t)v2);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10023B4FC()
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching recovery info from cloud %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = (void *)v0[5];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    [v8 updateTaskResultWithError:v9];
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }
  uint64_t v10 = (void *)v0[5];
  swift_getObjectType();
  sub_100169BA4((uint64_t)v10);

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10023B75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a2;
  uint64_t v47 = a3;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v46 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  os_log_type_t v48 = (char *)&v37 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  os_log_type_t v42 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v37 - v17;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E748);
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v43 = a1;
  uint64_t v41 = v20;
  v20(v18, a1, v11);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v40 = v4;
    uint64_t v24 = (uint8_t *)v23;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v50 = v38;
    uint64_t v39 = v5;
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v37 = v24 + 4;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v49 = sub_100135190(v25, v26, &v50);
    uint64_t v5 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetching custodian with ID: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v40;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }

  uint64_t v27 = v42;
  v41(v42, v43, v11);
  unint64_t v28 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v29 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v29 + v28, v27, v11);
  char v30 = (void *)(v29 + ((v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v31 = v47;
  *char v30 = v44;
  v30[1] = v31;
  uint64_t v32 = sub_100008EF8((void *)(v45 + 16), *(void *)(v45 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  uint64_t v33 = v46;
  sub_10000A280();
  uint64_t v34 = (uint64_t)v48;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
  v35(v33, v4);
  sub_100008EF8((void *)(*v32 + 16), *(void *)(*v32 + 40));
  sub_1000B3744(v34, (uint64_t)sub_10024271C, v29);
  v35((char *)v34, v4);
  return swift_release();
}

uint64_t sub_10023BC24(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v52 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v52, v10);
  uint64_t v53 = (void *)((char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v12 - 8);
  uint64_t v51 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecord();
  uint64_t v18 = __chkstk_darwin(v16, v17);
  id v20 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)v49 - v23;
  __chkstk_darwin(v22, v25);
  unint64_t v28 = (char *)v49 - v27;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 138412290;
      uint64_t v45 = _convertErrorToNSError(_:)();
      uint64_t v55 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v44 = v45;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error fetching custodian records: %@", v43, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    uint64_t v46 = v53;
    *uint64_t v53 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v46);
    sub_100007844(a1, 1);
    return sub_100006574((uint64_t)v46, &qword_10032E140);
  }
  v49[0] = a4;
  v49[1] = a5;
  uint64_t v29 = *(void *)(a1 + 16);
  if (!v29)
  {
LABEL_7:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E748);
    uint64_t v34 = v50;
    uint64_t v33 = v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v15, a3, v51);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = sub_100135190(v38, v39, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      a4 = (void (*)(uint64_t *))v49[0];
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v33);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No custodian with id %s found.", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v33);
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v54 = -7063;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v46 = v53;
    *uint64_t v53 = v55;
    swift_storeEnumTagMultiPayload();
    a4(v46);
    return sub_100006574((uint64_t)v46, &qword_10032E140);
  }
  uint64_t v30 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  uint64_t v31 = *(void *)(v26 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100241844(v30, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (static UUID.== infix(_:_:)()) {
      break;
    }
    sub_1002417E4((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    v30 += v31;
    if (!--v29)
    {
      sub_100007844(a1, 0);
      a4 = (void (*)(uint64_t *))v49[0];
      goto LABEL_7;
    }
  }
  sub_100007844(a1, 0);
  sub_100242154((uint64_t)v20, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_100242154((uint64_t)v24, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  os_log_type_t v48 = v53;
  sub_100241844((uint64_t)v28, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload();
  ((void (*)(uint64_t *))v49[0])(v48);
  sub_100006574((uint64_t)v48, &qword_10032E140);
  return sub_1002417E4((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10023C384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v41 = a2;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v44 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v45 = (char *)&v35 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v35 - v16;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39(v17, a1, v10);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v37 = a1;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v48 = v36;
    uint64_t v38 = v4;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v35 = v22 + 4;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v47 = sub_100135190(v23, v24, &v48);
    uint64_t v4 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Fetching custodianship info with ID: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v37;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  uint64_t v25 = v40;
  v39(v40, a1, v10);
  unint64_t v26 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v27 + v26, v25, v10);
  unint64_t v28 = (void *)(v27 + ((v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v29 = v43;
  *unint64_t v28 = v41;
  v28[1] = v29;
  uint64_t v30 = sub_100008EF8((void *)(v42 + 16), *(void *)(v42 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  uint64_t v31 = v44;
  sub_10000A280();
  uint64_t v32 = (uint64_t)v45;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v46 + 8);
  v33(v31, v4);
  sub_100008EF8((void *)(*v30 + 16), *(void *)(*v30 + 40));
  sub_1000B3370(v32, (uint64_t)sub_100242700, v27);
  v33((char *)v32, v4);
  return swift_release();
}

uint64_t sub_10023C844(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v83 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v83, v10);
  uint64_t v84 = (uint64_t *)&v74[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = &v74[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v17);
  uint64_t v19 = &v74[-v18];
  uint64_t v20 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  unint64_t v26 = &v74[-v25];
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v30 = &v74[-v29];
  __chkstk_darwin(v28, v31);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      uint64_t v51 = _convertErrorToNSError(_:)();
      uint64_t v86 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v50 = v51;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error fetching custodianship info records: %@", v49, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    uint64_t v52 = v84;
    *uint64_t v84 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v52);
    sub_100007844(a1, 1);
    uint64_t v53 = (uint64_t)v52;
    return sub_100006574(v53, (uint64_t *)&unk_100324590);
  }
  uint64_t v79 = a5;
  v80 = a4;
  uint64_t v35 = *(void *)(a1 + 16);
  if (!v35)
  {
LABEL_7:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E748);
    uint64_t v39 = v81;
    uint64_t v40 = v82;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v81 + 16))(v19, a3, v82);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = sub_100135190(v44, v45, &v86);
      a4 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "No custodian with id %s found.", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v19, v40);
    }

    uint64_t v54 = v84;
    type metadata accessor for AACustodianError(0);
    uint64_t v85 = -7059;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t *v54 = v86;
    swift_storeEnumTagMultiPayload();
    a4(v54);
    uint64_t v53 = (uint64_t)v54;
    return sub_100006574(v53, (uint64_t *)&unk_100324590);
  }
  uint64_t v77 = v34;
  uint64_t v78 = &v74[-v33];
  uint64_t v36 = a1 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
  uint64_t v37 = *(void *)(v32 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100241844(v36, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    if (static UUID.== infix(_:_:)()) {
      break;
    }
    sub_1002417E4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    v36 += v37;
    if (!--v35)
    {
      sub_100007844(a1, 0);
      a4 = v80;
      goto LABEL_7;
    }
  }
  sub_100007844(a1, 0);
  sub_100242154((uint64_t)v26, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v56 = v78;
  sub_100242154((uint64_t)v30, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_100007288(v57, (uint64_t)qword_10033E748);
  uint64_t v58 = v81;
  uint64_t v59 = v82;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v81 + 16))(v16, a3, v82);
  uint64_t v60 = (uint64_t)v56;
  uint64_t v61 = v77;
  sub_100241844(v60, v77, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  int v64 = v63;
  BOOL v65 = os_log_type_enabled(v62, v63);
  uint64_t v66 = v80;
  if (v65)
  {
    uint64_t v67 = swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    uint64_t v86 = v76;
    *(_DWORD *)uint64_t v67 = 136315394;
    sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v75 = v64;
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_100135190(v68, v69, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v16, v59);
    *(_WORD *)(v67 + 12) = 2080;
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_100135190(v70, v71, &v86);
    uint64_t v66 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1002417E4(v61, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v75, "Found custodian for id %s: %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v16, v59);
    sub_1002417E4(v61, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }

  uint64_t v72 = v84;
  uint64_t v73 = v78;
  sub_100241844((uint64_t)v78, (uint64_t)v84, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  swift_storeEnumTagMultiPayload();
  v66(v72);
  sub_100006574((uint64_t)v72, (uint64_t *)&unk_100324590);
  return sub_1002417E4((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_10023D270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = sub_100009F04((uint64_t *)&unk_10032E110);
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v7);
  uint64_t v37 = v8;
  uint64_t v38 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v10);
  uint64_t v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t RecoveryRecordsRequest = type metadata accessor for FetchRecoveryRecordsRequest(0);
  if (*(unsigned char *)(a3 + *(int *)(RecoveryRecordsRequest + 24)) == 1)
  {
    uint64_t v17 = RecoveryRecordsRequest;
    v34[1] = sub_10000850C(0, (unint64_t *)&qword_100329940);
    uint64_t v35 = a1;
    uint64_t v18 = *(int *)(v17 + 32);
    uint64_t v19 = (uint64_t *)(a3 + *(int *)(v17 + 28));
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v36 = a2;
    uint64_t v22 = *(void *)(a3 + v18);
    uint64_t v23 = *(void *)(a3 + v18 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = v20;
    uint64_t v25 = v23;
    a1 = v35;
    a2 = v36;
    id v26 = sub_100225978(v13, v15, v21, v24, v22, v25);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v26 = 0;
  }
  uint64_t v27 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v40);
  uint64_t v29 = v38;
  uint64_t v28 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v38, a1, v39);
  unint64_t v30 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v26;
  *(void *)(v31 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v31 + v30, v29, v28);
  id v32 = v26;
  swift_retain();
  sub_10023C384((uint64_t)v12, (uint64_t)sub_100242118, v31);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v27);
}

uint64_t sub_10023D550(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t *a6, uint64_t (*a7)(void), uint64_t *a8)
{
  uint64_t v27 = a7;
  uint64_t v28 = a4;
  uint64_t v12 = a5(0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = sub_100009F04(a6);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (uint64_t *)((char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v26 - v22;
  if (a2)
  {
    sub_100019730(a1, (uint64_t)&v26 - v22, a6);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = (void *)_convertErrorToNSError(_:)();
      [a2 updateTaskResultWithError:v24];

      swift_errorRelease();
    }
    else
    {
      sub_100006574((uint64_t)v23, a6);
      [a2 updateTaskResultWithError:0];
    }
  }
  swift_getObjectType();
  sub_100169BA4((uint64_t)a2);
  sub_100019730(a1, (uint64_t)v20, a6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = *v20;
    sub_100009F04(a8);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100242154((uint64_t)v20, (uint64_t)v15, v27);
    sub_100009F04(a8);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10023D764(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v24 - 8);
  uint64_t v6 = __chkstk_darwin(v24, v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_10032E160);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v18 = sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v20 = v8;
  uint64_t v21 = v24;
  v19(v20, v24);
  sub_100008EF8((void *)(*v18 + 16), *(void *)(*v18 + 40));
  sub_1000B3744((uint64_t)v11, (uint64_t)sub_100242B34, v17);
  v19(v11, v21);
  return swift_release();
}

uint64_t sub_10023D9E4(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_10032E160);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_10032E160);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10023DA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v29 - 8);
  uint64_t v7 = __chkstk_darwin(v29, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v19 = (void *)(v18 + ((v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v20 = v28;
  *uint64_t v19 = v27;
  v19[1] = v20;
  uint64_t v21 = sub_100008EF8((void *)(v3 + 16), *(void *)(v3 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v23 = v9;
  uint64_t v24 = v29;
  v22(v23, v29);
  sub_100008EF8((void *)(*v21 + 16), *(void *)(*v21 + 40));
  sub_1000B37BC((uint64_t)v12, (uint64_t)sub_1002426E4, v18);
  v22(v12, v24);
  return swift_release();
}

uint64_t sub_10023DCE8(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v88 = a5;
  v89 = a4;
  uint64_t v87 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v87, v8);
  uint64_t v10 = (uint64_t *)&v76[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v84 = &v76[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v15);
  unint64_t v17 = &v76[-v16];
  uint64_t v18 = type metadata accessor for CustodianHealthRecord();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v82 = &v76[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = &v76[-v25];
  __chkstk_darwin(v24, v27);
  uint64_t v83 = &v76[-v28];
  uint64_t v29 = sub_100009F04((uint64_t *)&unk_10032E120);
  uint64_t v31 = __chkstk_darwin(v29 - 8, v30);
  uint64_t v33 = &v76[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (uint64_t *)&v76[-v35];
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100007288(v41, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      unint64_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 138412290;
      uint64_t v46 = _convertErrorToNSError(_:)();
      v91 = (void *)v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v45 = v46;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error fetching health records: %@", v44, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    *uint64_t v10 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v89(v10);
    sub_100007844(a1, 1);
    uint64_t v47 = &qword_100323580;
    os_log_type_t v48 = v10;
  }
  else
  {
    v80 = v10;
    uint64_t v81 = (uint64_t *)&v76[-v35];
    uint64_t v37 = *(void *)(a1 + 16);
    if (v37)
    {
      uint64_t v38 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v39 = *(void *)(v19 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100241844(v38, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_1002417E4((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        v38 += v39;
        if (!--v37)
        {
          sub_100007844(a1, 0);
          uint64_t v40 = 1;
          uint64_t v36 = v81;
          goto LABEL_15;
        }
      }
      sub_100007844(a1, 0);
      uint64_t v36 = v81;
      sub_100242154((uint64_t)v26, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      uint64_t v40 = 0;
    }
    else
    {
      uint64_t v40 = 1;
    }
LABEL_15:
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v36, v40, 1, v18);
    sub_100019730((uint64_t)v36, (uint64_t)v33, (uint64_t *)&unk_10032E120);
    int v49 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 48))(v33, 1, v18);
    uint64_t v50 = v80;
    uint64_t v52 = v84;
    uint64_t v51 = v85;
    if (v49 == 1)
    {
      sub_100006574((uint64_t)v33, (uint64_t *)&unk_10032E120);
      uint64_t v53 = v86;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_100007288(v54, (uint64_t)qword_10033E748);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v51 + 16))(v17, a3, v53);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        v91 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v84 = v57 + 4;
        sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v90 = sub_100135190(v58, v59, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v17, v53);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Couldn't find health check record for %s", v57, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v17, v53);
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v90 = -7060;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v73 = v91;
      *uint64_t v50 = (uint64_t)v91;
      swift_storeEnumTagMultiPayload();
      id v74 = v73;
      v89(v50);

      sub_100006574((uint64_t)v50, &qword_100323580);
      uint64_t v47 = (uint64_t *)&unk_10032E120;
      os_log_type_t v48 = v81;
    }
    else
    {
      uint64_t v60 = v83;
      sub_100242154((uint64_t)v33, (uint64_t)v83, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      uint64_t v61 = v86;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_100007288(v62, (uint64_t)qword_10033E748);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v51 + 16))(v52, a3, v61);
      os_log_type_t v63 = v82;
      sub_100241844((uint64_t)v60, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      int v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      int v66 = v65;
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v67 = swift_slowAlloc();
        uint64_t v79 = swift_slowAlloc();
        v91 = (void *)v79;
        *(_DWORD *)uint64_t v67 = 136315394;
        os_log_t v78 = v64;
        sub_1000071B4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        int v77 = v66;
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v90 = sub_100135190(v68, v69, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v52, v61);
        *(_WORD *)(v67 + 12) = 2080;
        uint64_t v70 = v82;
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v90 = sub_100135190(v71, v72, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1002417E4((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        int v64 = v78;
        _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v77, "Found health check record for %s: %s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v60 = v83;
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v51 + 8))(v52, v61);
        sub_1002417E4((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      }

      sub_100241844((uint64_t)v60, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      swift_storeEnumTagMultiPayload();
      v89(v50);
      sub_100006574((uint64_t)v50, &qword_100323580);
      sub_1002417E4((uint64_t)v60, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      uint64_t v47 = (uint64_t *)&unk_10032E120;
      os_log_type_t v48 = v36;
    }
  }
  return sub_100006574((uint64_t)v48, v47);
}

uint64_t sub_10023E80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_10032E100);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_10023DA54(a3, (uint64_t)sub_100242098, v10);
  return swift_release();
}

uint64_t sub_10023E954(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (void *)((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v9, &qword_100323580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11[1] = *v9;
    sub_100009F04((uint64_t *)&unk_10032E100);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100242154((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_100009F04((uint64_t *)&unk_10032E100);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10023EAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  unint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  uint64_t v19 = sub_100008EF8((void *)(v4 + 16), *(void *)(v4 + 40));
  type metadata accessor for LocalCache();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v14, v9);
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  sub_1000B37E4((uint64_t)v17, (uint64_t)sub_1002426D0, (uint64_t)v18);
  v20(v17, v9);
  return swift_release();
}

uint64_t sub_10023EC74(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v56 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v56, v12);
  uint64_t v57 = (void *)((char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v54 = (uint64_t)v53 - v21;
  uint64_t v22 = sub_100009F04((uint64_t *)&unk_100329970);
  uint64_t v24 = __chkstk_darwin(v22 - 8, v23);
  uint64_t v26 = (char *)v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  uint64_t v55 = (uint64_t)v53 - v28;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v59 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v40;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error fetching recovery session records: %@", v38, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    uint64_t v41 = v57;
    *uint64_t v57 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a5(v41);
    sub_100007844(a1, 1);
    os_log_type_t v42 = &qword_100322C00;
    uint64_t v43 = (uint64_t)v41;
  }
  else
  {
    v53[1] = a6;
    uint64_t v29 = *(void *)(a1 + 16);
    if (v29)
    {
      v53[0] = a5;
      uint64_t v30 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      uint64_t v31 = *(void *)(v15 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100241844(v30, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
        uint64_t v32 = &v19[*(int *)(v14 + 28)];
        BOOL v33 = *(void *)v32 == a3 && *((void *)v32 + 1) == a4;
        if (v33 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        sub_1002417E4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
        v30 += v31;
        if (!--v29)
        {
          sub_100007844(a1, 0);
          uint64_t v34 = 1;
          a5 = (void (*)(uint64_t *))v53[0];
          goto LABEL_19;
        }
      }
      sub_100007844(a1, 0);
      uint64_t v44 = v55;
      sub_100242154((uint64_t)v19, v55, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
      uint64_t v34 = 0;
      a5 = (void (*)(uint64_t *))v53[0];
    }
    else
    {
      uint64_t v34 = 1;
LABEL_19:
      uint64_t v44 = v55;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v44, v34, 1, v14);
    sub_100019730(v44, (uint64_t)v26, (uint64_t *)&unk_100329970);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v26, 1, v14) == 1)
    {
      sub_100006574((uint64_t)v26, (uint64_t *)&unk_100329970);
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100007288(v45, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v48 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_100135190(a3, a4, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Couldn't find recovery session record for %s", v48, 0xCu);
        swift_arrayDestroy();
        uint64_t v44 = v55;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for AACustodianError(0);
      uint64_t v58 = -7061;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v51 = v57;
      *uint64_t v57 = v59;
      swift_storeEnumTagMultiPayload();
      a5(v51);
      sub_100006574((uint64_t)v51, &qword_100322C00);
    }
    else
    {
      uint64_t v49 = v54;
      sub_100242154((uint64_t)v26, v54, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
      uint64_t v50 = v57;
      sub_100241844(v49, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
      swift_storeEnumTagMultiPayload();
      a5(v50);
      sub_100006574((uint64_t)v50, &qword_100322C00);
      sub_1002417E4(v49, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    }
    os_log_type_t v42 = (uint64_t *)&unk_100329970;
    uint64_t v43 = v44;
  }
  return sub_100006574(v43, v42);
}

uint64_t sub_10023F408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v71 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v5);
  uint64_t v70 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v69 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v11 = v10 - 8;
  uint64_t v66 = *(void *)(v10 - 8);
  uint64_t v65 = *(void *)(v66 + 64);
  __chkstk_darwin(v10, v12);
  uint64_t v64 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v62 = *(void *)(v14 - 8);
  uint64_t v63 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v61 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v60 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v24 - 8, v25);
  uint64_t v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = dispatch_group_create();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = 0;
  uint64_t v75 = swift_allocObject();
  *(void *)(v75 + 16) = 0;
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = 0;
  dispatch_group_enter(v28);
  uint64_t v58 = v3;
  sub_100008EF8(&v3[2].isa, (uint64_t)v3[5].isa);
  sub_100241844(a1, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v30 = swift_allocObject();
  uint64_t v59 = v29;
  *(void *)(v30 + 16) = v29;
  *(void *)(v30 + 24) = v28;
  swift_retain();
  uint64_t v31 = v28;
  sub_1002692BC((uint64_t)v27, (uint64_t)sub_100242218, v30);
  swift_release();
  sub_1002417E4((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  dispatch_group_enter(v31);
  uint64_t v32 = v58;
  sub_100008EF8(&v3[2].isa, (uint64_t)v58[5].isa);
  uint64_t v33 = a1;
  sub_100241844(a1 + *(int *)(v11 + 28), (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v75;
  *(void *)(v34 + 24) = v31;
  uint64_t v35 = v31;
  swift_retain();
  sub_1002690F0((uint64_t)v23, (uint64_t)sub_100242248, v34);
  swift_release();
  sub_1002417E4((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  dispatch_group_enter(v35);
  sub_100008EF8(&v3[2].isa, (uint64_t)v32[5].isa);
  uint64_t v36 = a1 + *(int *)(v11 + 32);
  uint64_t v37 = v60;
  sub_100241844(v36, v60, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v57;
  *(void *)(v38 + 16) = v57;
  *(void *)(v38 + 24) = v35;
  uint64_t v58 = v35;
  swift_retain();
  sub_100268F24(v37, (uint64_t)sub_100242278, v38);
  swift_release();
  sub_1002417E4(v37, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  uint64_t v41 = v62;
  uint64_t v40 = v63;
  os_log_type_t v42 = v61;
  (*(void (**)(char *, void, uint64_t))(v62 + 104))(v61, enum case for DispatchQoS.QoSClass.default(_:), v63);
  uint64_t v43 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
  uint64_t v44 = v64;
  sub_100241844(v33, v64, type metadata accessor for CustodianshipRecords);
  unint64_t v45 = (*(unsigned __int8 *)(v66 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v75;
  v46[2] = v59;
  v46[3] = v47;
  uint64_t v48 = v67;
  uint64_t v49 = v68;
  v46[4] = v39;
  v46[5] = v48;
  v46[6] = v49;
  sub_100242154(v44, (uint64_t)v46 + v45, type metadata accessor for CustodianshipRecords);
  aBlock[4] = sub_100242664;
  aBlock[5] = v46;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100302060;
  uint64_t v50 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v51 = v69;
  static DispatchQoS.unspecified.getter();
  uint64_t v76 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v53 = v70;
  uint64_t v52 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v54 = v58;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v50);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v52);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v73);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10023FC48(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t *a4, const char *a5)
{
  uint64_t v10 = sub_100009F04(a4);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (uint64_t *)((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v13, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = (void *)(a2 + 16);
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v22[0] = a5;
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412290;
      uint64_t v21 = (const char *)_convertErrorToNSError(_:)();
      v22[1] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v21;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v22[0], v19, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_beginAccess();
    *uint64_t v15 = v14;
    swift_errorRelease();
  }
  else
  {
    sub_100006574((uint64_t)v13, a4);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10023FE9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (NSObject **)((char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = &_swiftEmptyDictionarySingleton;
  if (v16)
  {
    swift_errorRetain();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = &_swiftEmptyDictionarySingleton;
    sub_10022C0AC(v16, 0xD000000000000018, 0x80000001002A0C10, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = v43;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  uint64_t v19 = (uint64_t *)(a3 + 16);
  swift_beginAccess();
  uint64_t v20 = *v15;
  if (v20)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    os_log_type_t v42 = v17;
    sub_10022C0AC(v20, 0xD00000000000001BLL, 0x80000001002A0BF0, v21);
    uint64_t v17 = v42;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v22 = *v19;
  if (v22)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = v17;
    sub_10022C0AC(v22, 0xD000000000000015, 0x80000001002A0BD0, v23);
    uint64_t v17 = v41;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  if (v17[2])
  {
    type metadata accessor for AAError(0);
    v40[12] = -4408;
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v25;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v17;
    sub_100220CAC(inited);
    sub_1000071B4((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v41;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    uint64_t v28 = v26;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      v40[1] = v11;
      *(_DWORD *)uint64_t v31 = 138412290;
      uint64_t v32 = a4;
      uint64_t v33 = _convertErrorToNSError(_:)();
      uint64_t v41 = (void *)v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v40[0] = v33;
      a4 = v32;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to save all custodianship records: %@", v31, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v29 = v28;
    }

    *uint64_t v14 = v28;
    swift_storeEnumTagMultiPayload();
    uint64_t v38 = v28;
    a4(v14);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E748);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Custodianship records saved successfully.", v37, 2u);
      swift_slowDealloc();
    }

    [self postRecoveryContactChangedNotification];
    sub_100241844(a6, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload();
    a4(v14);
  }
  return sub_100006574((uint64_t)v14, (uint64_t *)&unk_100322960);
}

uint64_t sub_100240450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *), uint64_t a6, uint64_t a7)
{
  uint64_t v47 = a7;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v8 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v20 - 8, v21);
  char v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CustodianRecord();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v23, &qword_100328480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_100006574((uint64_t)v23, &qword_100328480);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "CustodianRecord not found. Aborting Delete.", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v50 = -7063;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071B4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v11 = v51;
    swift_storeEnumTagMultiPayload();
    v48(v11);
    return sub_100006574((uint64_t)v11, &qword_1003229D0);
  }
  else
  {
    sub_100242154((uint64_t)v23, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E748);
    uint64_t v35 = v45;
    sub_100019730(v45, (uint64_t)v19, &qword_100323598);
    uint64_t v36 = v46;
    sub_100019730(v46, (uint64_t)v15, (uint64_t *)&unk_10032E120);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 67109376;
      uint64_t v40 = type metadata accessor for CustodianRecoveryInfoRecord();
      BOOL v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v19, 1, v40) != 1;
      sub_100006574((uint64_t)v19, &qword_100323598);
      LODWORD(v51) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 8) = 1024;
      uint64_t v42 = type metadata accessor for CustodianHealthRecord();
      BOOL v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v15, 1, v42) != 1;
      sub_100006574((uint64_t)v15, (uint64_t *)&unk_10032E120);
      LODWORD(v51) = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "RecoveryInfoRecord found?: %{BOOL}d. HealthRecord found? %{BOOL}d. Continuing to delete", (uint8_t *)v39, 0xEu);
      swift_slowDealloc();
    }
    else
    {
      sub_100006574((uint64_t)v15, (uint64_t *)&unk_10032E120);
      sub_100006574((uint64_t)v19, &qword_100323598);
    }

    sub_100240A40((uint64_t)v28, v35, v36, (uint64_t)v48, v49);
    return sub_1002417E4((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
}

uint64_t sub_100240A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v116 = a4;
  uint64_t v117 = a5;
  uint64_t v109 = a3;
  uint64_t v103 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v122 = *(void *)(v7 - 8);
  uint64_t v123 = v7;
  __chkstk_darwin(v7, v8);
  v120 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for DispatchQoS();
  uint64_t v119 = *(void *)(v121 - 8);
  __chkstk_darwin(v121, v10);
  v118 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v12);
  v112 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v106 = (uint64_t)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for CustodianHealthRecord();
  uint64_t v107 = *(void *)(v104 - 8);
  uint64_t v18 = __chkstk_darwin(v104, v17);
  uint64_t v98 = (uint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = v19;
  __chkstk_darwin(v18, v20);
  uint64_t v99 = (uint64_t)&v93 - v21;
  uint64_t v22 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v22 - 8, v23);
  uint64_t v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v100 = *(void *)(v101 - 8);
  uint64_t v27 = __chkstk_darwin(v101, v26);
  uint64_t v95 = (uint64_t)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = v28;
  __chkstk_darwin(v27, v29);
  uint64_t v96 = (uint64_t)&v93 - v30;
  uint64_t v31 = type metadata accessor for CustodianRecord();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void *)(v32 + 64);
  __chkstk_darwin(v31 - 8, v34);
  uint64_t v35 = dispatch_group_create();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = 0;
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = 0;
  uint64_t v127 = swift_allocObject();
  *(void *)(v127 + 16) = 0;
  dispatch_group_enter(v35);
  uint64_t v126 = v5;
  uint64_t v37 = *(void *)(v5 + 40);
  v124 = (void *)(v5 + 16);
  os_log_type_t v38 = sub_100008EF8((void *)(v5 + 16), v37);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v36;
  *(void *)(v39 + 24) = v35;
  uint64_t v40 = *v38;
  sub_100241844(a1, (uint64_t)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v41 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v42 = (v41 + 24) & ~v41;
  uint64_t v128 = v41;
  uint64_t v110 = v33;
  uint64_t v105 = v41 | 7;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v40;
  uint64_t v111 = (uint64_t)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v100;
  sub_100242154(v111, v43 + v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v45 = (void (**)(uint64_t))(v43 + ((v33 + v42 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v45 = sub_100242BBC;
  v45[1] = (void (*)(uint64_t))v39;
  uint64_t v114 = v36;
  swift_retain();
  uint64_t v46 = v35;
  swift_retain();
  swift_retain();
  uint64_t v108 = a1;
  sub_1001D2130(a1, (uint64_t)sub_100242DF0, v43);
  swift_release();
  swift_release();
  sub_100019730(v103, (uint64_t)v25, &qword_100323598);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v25, 1, v101) == 1)
  {
    uint64_t v47 = v46;
    sub_100006574((uint64_t)v25, &qword_100323598);
  }
  else
  {
    uint64_t v48 = v96;
    sub_100242154((uint64_t)v25, v96, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    dispatch_group_enter(v46);
    uint64_t v49 = sub_100008EF8(v124, *(void *)(v126 + 40));
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = v125;
    *(void *)(v50 + 24) = v46;
    uint64_t v51 = *v49;
    uint64_t v52 = v95;
    sub_100241844(v48, v95, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v53 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v54 = (v94 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v51;
    sub_100242154(v52, v55 + v53, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v56 = (void (**)(uint64_t))(v55 + v54);
    unsigned char *v56 = sub_100243314;
    v56[1] = (void (*)(uint64_t))v50;
    uint64_t v47 = v46;
    uint64_t v57 = v46;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001D2700(v48, (uint64_t)sub_100243538, v55);
    swift_release();
    swift_release();
    sub_1002417E4(v48, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
  uint64_t v58 = v126;
  uint64_t v59 = v124;
  uint64_t v60 = ~v128;
  uint64_t v61 = v106;
  sub_100019730(v109, v106, (uint64_t *)&unk_10032E120);
  uint64_t v62 = v107;
  int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v61, 1, v104);
  uint64_t v64 = v127;
  v102 = v47;
  if (v63 == 1)
  {
    sub_100006574(v61, (uint64_t *)&unk_10032E120);
  }
  else
  {
    uint64_t v65 = v99;
    sub_100242154(v61, v99, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v66 = v47;
    dispatch_group_enter(v47);
    uint64_t v67 = sub_100008EF8(v59, *(void *)(v58 + 40));
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v64;
    *(void *)(v68 + 24) = v47;
    uint64_t v69 = *v67;
    uint64_t v70 = v98;
    sub_100241844(v65, v98, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    unint64_t v71 = (*(unsigned __int8 *)(v62 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
    unint64_t v72 = (v97 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = v69;
    uint64_t v74 = v73 + v71;
    uint64_t v64 = v127;
    sub_100242154(v70, v74, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v75 = (void (**)(uint64_t))(v73 + v72);
    char *v75 = sub_1002430D4;
    v75[1] = (void (*)(uint64_t))v68;
    uint64_t v76 = v66;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001D2418(v65, (uint64_t)sub_1002432A4, v73);
    swift_release();
    swift_release();
    sub_1002417E4(v65, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  uint64_t v77 = v113;
  os_log_t v78 = v112;
  uint64_t v79 = v115;
  (*(void (**)(char *, void, uint64_t))(v113 + 104))(v112, enum case for DispatchQoS.QoSClass.default(_:), v115);
  v80 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
  uint64_t v81 = v111;
  sub_100241844(v108, v111, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v82 = (v128 + 56) & v60;
  uint64_t v83 = (void *)swift_allocObject();
  uint64_t v84 = v125;
  v83[2] = v114;
  v83[3] = v84;
  uint64_t v85 = v116;
  uint64_t v86 = v117;
  v83[4] = v64;
  v83[5] = v85;
  v83[6] = v86;
  sub_100242154(v81, (uint64_t)v83 + v82, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  aBlock[4] = sub_10024301C;
  aBlock[5] = v83;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1003022E0;
  uint64_t v87 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v88 = v118;
  static DispatchQoS.unspecified.getter();
  v129 = _swiftEmptyArrayStorage;
  sub_1000071B4((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  v89 = v120;
  uint64_t v90 = v123;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v91 = v102;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v87);

  (*(void (**)(char *, uint64_t))(v122 + 8))(v89, v90);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v88, v121);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10024168C()
{
  sub_100008EA8(v0 + 16);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianStorageController()
{
  return self;
}

uint64_t type metadata accessor for CustodianRecoveryRecords(uint64_t a1)
{
  return sub_10000698C(a1, qword_10032E260);
}

uint64_t type metadata accessor for FetchRecoveryRecordsRequest(uint64_t a1)
{
  return sub_10000698C(a1, qword_10032E2F8);
}

uint64_t sub_100241730(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100025248;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1002390F0, 0, 0);
}

uint64_t sub_1002417E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100241844(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002418AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(NSObject **), uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a5;
  uint64_t v11 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v11, v12);
  unint64_t v53 = (NSObject **)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t v15 = (uint64_t *)(a2 + 16);
  uint64_t v16 = &_swiftEmptyDictionarySingleton;
  uint64_t v61 = &_swiftEmptyDictionarySingleton;
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    swift_errorRetain();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v60 = &_swiftEmptyDictionarySingleton;
    sub_10022C0AC(v17, 0xD000000000000014, 0x800000010029A960, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v60;
    uint64_t v61 = v60;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  uint64_t v19 = (uint64_t *)(a3 + 16);
  swift_beginAccess();
  uint64_t v20 = *v15;
  if (*v15)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v59 = v16;
    sub_10022C0AC(v20, 0xD000000000000017, 0x800000010029A910, v21);
    uint64_t v16 = v59;
    uint64_t v61 = v59;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v22 = *v19;
  if (*v19)
  {
    swift_errorRetain();
    swift_errorRetain();
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v58 = v61;
    sub_10022C0AC(v22, 0xD000000000000020, 0x800000010029A930, v23);
    uint64_t v16 = v58;
    uint64_t v61 = v58;
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  if (!*v14)
  {
    swift_beginAccess();
    if (*v15 || (swift_beginAccess(), *v19))
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E748);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v36, v37)) {
        goto LABEL_19;
      }
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      v56[0] = v52;
      uint64_t v51 = v38;
      *(_DWORD *)os_log_type_t v38 = 136315138;
      uint64_t v50 = v38 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v39 = Dictionary.description.getter();
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_100135190(v39, v41, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Custodianship records deleted with partial errors %s. But, since CustodianRecord was deleted successfully.", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_100007288(v47, (uint64_t)qword_10033E748);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v36, v48)) {
        goto LABEL_19;
      }
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v48, "Custodianship records deleted successfully", v49, 2u);
    }
    swift_slowDealloc();
LABEL_19:

    uint64_t v42 = v53;
    [self postRecoveryContactChangedNotification];
    uint64_t v43 = a6 + *(int *)(type metadata accessor for CustodianRecord() + 20);
    uint64_t v44 = type metadata accessor for UUID();
    (*(void (**)(NSObject **, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(v42, v43, v44);
    swift_storeEnumTagMultiPayload();
    a4(v42);
    goto LABEL_22;
  }
  uint64_t v52 = v11;
  type metadata accessor for AAError(0);
  v56[1] = -4408;
  sub_100009F04((uint64_t *)&unk_10032E130);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v25;
  *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
  *(void *)(inited + 48) = v16;
  swift_bridgeObjectRetain();
  sub_100220CAC(inited);
  sub_1000071B4((unint64_t *)&qword_100321140, type metadata accessor for AAError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v26 = v57;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E748);
  uint64_t v28 = v26;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 138412290;
    uint64_t v33 = a4;
    uint64_t v34 = _convertErrorToNSError(_:)();
    uint64_t v57 = (void *)v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v34;
    a4 = v33;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to delete custodianship records: %@", v31, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v29 = v28;
  }
  uint64_t v42 = v53;

  *uint64_t v42 = v28;
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = v28;
  a4(v42);

LABEL_22:
  sub_100006574((uint64_t)v42, &qword_1003229D0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10024208C()
{
  return sub_1001FE7D0((uint64_t *)&unk_10032E100);
}

uint64_t sub_100242098(uint64_t a1)
{
  sub_100009F04((uint64_t *)&unk_10032E100);

  return sub_10023E954(a1);
}

uint64_t sub_10024210C()
{
  return sub_10024274C((uint64_t *)&unk_10032E110);
}

uint64_t sub_100242118(uint64_t a1)
{
  return sub_100242858(a1, (uint64_t *)&unk_10032E110, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t *)&unk_100324590, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100242154(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for CustodianshipRecords(uint64_t a1)
{
  return sub_10000698C(a1, qword_10032E1C8);
}

uint64_t sub_1002421DC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100242218(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_10032E140, "Failed to save custodian record: %@");
}

void sub_100242248(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1003235A0, "Failed to save custodianship record: %@");
}

void sub_100242278(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_100323580, "Failed to save health record: %@");
}

uint64_t sub_1002422A4()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = (v26 + 56) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  uint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));

  return _swift_deallocObject(v0, v25 + v24, v26 | 7);
}

uint64_t sub_100242664()
{
  return sub_100243048(type metadata accessor for CustodianshipRecords, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10023FE9C);
}

uint64_t sub_100242690()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002426D0(uint64_t a1, char a2)
{
  return sub_10023EC74(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1002426E4(uint64_t a1, char a2)
{
  return sub_10024290C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10023DCE8);
}

uint64_t sub_100242700(uint64_t a1, char a2)
{
  return sub_10024290C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10023C844);
}

uint64_t sub_10024271C(uint64_t a1, char a2)
{
  return sub_10024290C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10023BC24);
}

uint64_t sub_100242734(uint64_t a1)
{
  return sub_10023AFA8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100242740()
{
  return sub_10024274C(&qword_10032E158);
}

uint64_t sub_10024274C(uint64_t *a1)
{
  uint64_t v2 = sub_100009F04(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10024281C(uint64_t a1)
{
  return sub_100242858(a1, &qword_10032E158, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, &qword_1003235A0, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_100242858(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v11 = *(void *)(sub_100009F04(a2) - 8);
  return sub_10023D550(a1, *(void **)(v5 + 16), *(void *)(v5 + 24), v5 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), a3, a4, a5, a2);
}

uint64_t sub_1002428F4(uint64_t a1, char a2)
{
  return sub_10024290C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100239844);
}

uint64_t sub_10024290C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a2 & 1;
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v3 + v7;
  uint64_t v9 = (uint64_t *)(v3 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a3(a1, v5, v8, v10, v11);
}

void sub_1002429D4(uint64_t a1)
{
  sub_100237314(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

void sub_1002429E4(uint64_t a1)
{
  sub_10023763C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1002429F4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100242A3C(uint64_t a1)
{
  sub_100237964(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_100242A48()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100242AB0()
{
  return sub_100237C8C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(char *, char *, char *, void *))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100242AC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100009F04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100242B28()
{
  return sub_1001FE7D0((uint64_t *)&unk_10032E160);
}

uint64_t sub_100242B34(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_100009F04((uint64_t *)&unk_10032E160);

  return sub_10023D9E4(a1, v3);
}

void sub_100242BBC(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1003229D0, "Custodian record delete failed: %@");
}

uint64_t sub_100242BE8()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_100242DF0(uint64_t a1)
{
}

uint64_t sub_100242E1C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10024301C()
{
  return sub_100243048((uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1002418AC);
}

uint64_t sub_100243048(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v9 = (char *)v2 + ((*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5, v6, v7, v8, v9);
}

void sub_1002430D4(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1003229D0, "Health record delete failed: %@");
}

uint64_t sub_100243100()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_1002432A4(uint64_t a1)
{
}

uint64_t sub_1002432D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100243314(uint64_t a1)
{
  sub_10023FC48(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_1003229D0, "Recovery info record delete failed: %@");
}

uint64_t sub_100243340()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_100243538(uint64_t a1)
{
}

void sub_100243564(uint64_t a1, uint64_t (*a2)(void), void (*a3)(uint64_t, void (*)(void), uint64_t))
{
  uint64_t v6 = *(void *)(a2(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100231788(a1, *(void *)(v3 + 16), v3 + v7, *(void (**)(void))(v3 + v8), *(void *)(v3 + v8 + 8), a3);
}

uint64_t sub_100243610()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  unint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100243800()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100235308);
}

uint64_t sub_10024382C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1002439C8()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100234CF4);
}

uint64_t sub_1002439F4(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v2 + v4;
  uint64_t v6 = (uint64_t *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return a2(v5, v7, v8);
}

uint64_t sub_100243AA0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100243CA0()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10023591C);
}

uint64_t sub_100243CCC()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100243E54()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1002346C8);
}

uint64_t sub_100243E80()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100243FC8()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10023409C);
}

uint64_t sub_100243FF4()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1002441E4()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100233A70);
}

uint64_t sub_100244210()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100244378()
{
  return sub_1002439F4((uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100233444);
}

char *sub_1002443A4(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v105 = *(void *)(v6 - 8);
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
    v7(a1, a2, v6);
    uint64_t v8 = (int *)type metadata accessor for CustodianRecord();
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    uint64_t v9 = v8[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *((void *)v11 + 1);
    *(void *)uint64_t v10 = *(void *)v11;
    *((void *)v10 + 1) = v12;
    uint64_t v13 = v8[7];
    unint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)unint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = v8[8];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *((void *)v19 + 1);
    *(void *)uint64_t v18 = *(void *)v19;
    *((void *)v18 + 1) = v20;
    *(void *)&a1[v8[9]] = *(void *)&a2[v8[9]];
    uint64_t v21 = v8[10];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = (uint64_t *)&a2[v21];
    unint64_t v24 = *(void *)&a2[v21 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v26 = *v23;
      sub_100013140(*v23, v24);
      *(void *)uint64_t v22 = v26;
      *((void *)v22 + 1) = v24;
    }
    uint64_t v27 = v8[11];
    uint64_t v28 = (uint64_t *)&a1[v27];
    uint64_t v29 = (uint64_t *)&a2[v27];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    sub_100013140(*v29, v31);
    *uint64_t v28 = v30;
    v28[1] = v31;
    a1[v8[12]] = a2[v8[12]];
    uint64_t v32 = v8[13];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = v8[14];
    os_log_type_t v37 = &a1[v36];
    os_log_type_t v38 = &a2[v36];
    uint64_t v39 = *((void *)v38 + 1);
    *(void *)os_log_type_t v37 = *(void *)v38;
    *((void *)v37 + 1) = v39;
    uint64_t v40 = v8[15];
    unint64_t v41 = &a1[v40];
    uint64_t v42 = &a2[v40];
    *(void *)unint64_t v41 = *(void *)v42;
    v41[8] = v42[8];
    uint64_t v43 = v8[16];
    uint64_t v44 = &a1[v43];
    uint64_t v45 = &a2[v43];
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v47 = v46;
    if (v46(v45, 1, v6))
    {
      uint64_t v48 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      v7(v44, v45, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v44, 0, 1, v6);
    }
    uint64_t v49 = *(int *)(a3 + 20);
    uint64_t v50 = &a1[v49];
    uint64_t v51 = &a2[v49];
    v7(&a1[v49], &a2[v49], v6);
    uint64_t v52 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
    uint64_t v104 = v7;
    v7(&v50[v52[5]], &v51[v52[5]], v6);
    uint64_t v53 = v52[6];
    uint64_t v54 = &v50[v53];
    uint64_t v55 = &v51[v53];
    uint64_t v56 = *((void *)v55 + 1);
    *(void *)uint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    uint64_t v57 = v52[7];
    uint64_t v58 = (uint64_t *)&v50[v57];
    uint64_t v59 = (uint64_t *)&v51[v57];
    uint64_t v60 = *v59;
    unint64_t v61 = v59[1];
    swift_bridgeObjectRetain();
    sub_100013140(v60, v61);
    *uint64_t v58 = v60;
    v58[1] = v61;
    uint64_t v62 = v52[8];
    int v63 = &v50[v62];
    uint64_t v64 = &v51[v62];
    unint64_t v65 = *((void *)v64 + 1);
    if (v65 >> 60 == 15)
    {
      *(_OWORD *)int v63 = *(_OWORD *)v64;
    }
    else
    {
      uint64_t v66 = *(void *)v64;
      sub_100013140(*(void *)v64, *((void *)v64 + 1));
      *(void *)int v63 = v66;
      *((void *)v63 + 1) = v65;
    }
    uint64_t v67 = v52[9];
    uint64_t v68 = (uint64_t *)&v50[v67];
    uint64_t v69 = (uint64_t *)&v51[v67];
    uint64_t v70 = *v69;
    unint64_t v71 = v69[1];
    sub_100013140(*v69, v71);
    *uint64_t v68 = v70;
    v68[1] = v71;
    v50[v52[10]] = v51[v52[10]];
    uint64_t v72 = v52[11];
    uint64_t v73 = &v50[v72];
    uint64_t v74 = &v51[v72];
    if (v47(&v51[v72], 1, v6))
    {
      uint64_t v75 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
      uint64_t v76 = v104;
    }
    else
    {
      uint64_t v77 = v74;
      uint64_t v76 = v104;
      v104(v73, v77, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v73, 0, 1, v6);
    }
    uint64_t v78 = v52[12];
    uint64_t v79 = &v50[v78];
    v80 = &v51[v78];
    uint64_t v81 = *((void *)v80 + 1);
    *(void *)uint64_t v79 = *(void *)v80;
    *((void *)v79 + 1) = v81;
    uint64_t v82 = *(int *)(a3 + 24);
    uint64_t v83 = &a1[v82];
    uint64_t v84 = &a2[v82];
    swift_bridgeObjectRetain();
    v76(v83, v84, v6);
    uint64_t v85 = (int *)type metadata accessor for CustodianHealthRecord();
    v76(&v83[v85[5]], &v84[v85[5]], v6);
    uint64_t v86 = v85[6];
    uint64_t v87 = &v83[v86];
    uint64_t v88 = &v84[v86];
    uint64_t v89 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16))(v87, v88, v89);
    uint64_t v90 = v85[7];
    v91 = &v83[v90];
    v92 = &v84[v90];
    unint64_t v93 = *((void *)v92 + 1);
    if (v93 >> 60 == 15)
    {
      *(_OWORD *)v91 = *(_OWORD *)v92;
    }
    else
    {
      uint64_t v94 = *(void *)v92;
      sub_100013140(*(void *)v92, *((void *)v92 + 1));
      *(void *)v91 = v94;
      *((void *)v91 + 1) = v93;
    }
    uint64_t v95 = v85[8];
    uint64_t v96 = (uint64_t *)&v83[v95];
    uint64_t v97 = (uint64_t *)&v84[v95];
    uint64_t v98 = *v97;
    unint64_t v99 = v97[1];
    sub_100013140(*v97, v99);
    *uint64_t v96 = v98;
    v96[1] = v99;
    v83[v85[9]] = v84[v85[9]];
    uint64_t v100 = v85[10];
    uint64_t v101 = &v83[v100];
    v102 = &v84[v100];
    *(void *)uint64_t v101 = *(void *)v102;
    v101[8] = v102[8];
  }
  return a1;
}

uint64_t sub_100244970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = (int *)type metadata accessor for CustodianRecord();
  v6(a1 + v7[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(a1 + v7[10]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(a1 + v7[11]), *(void *)(a1 + v7[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + v7[16];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v11(v10, 1, v4)) {
    v6(v10, v4);
  }
  uint64_t v12 = a1 + *(int *)(a2 + 20);
  v6(v12, v4);
  uint64_t v13 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v6(v12 + v13[5], v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v12 + v13[7]), *(void *)(v12 + v13[7] + 8));
  unint64_t v14 = (uint64_t *)(v12 + v13[8]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_100013198(*v14, v15);
  }
  sub_100013198(*(void *)(v12 + v13[9]), *(void *)(v12 + v13[9] + 8));
  uint64_t v16 = v12 + v13[11];
  if (!v11(v16, 1, v4)) {
    v6(v16, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = a1 + *(int *)(a2 + 24);
  v6(v17, v4);
  uint64_t v18 = (int *)type metadata accessor for CustodianHealthRecord();
  v6(v17 + v18[5], v4);
  uint64_t v19 = v17 + v18[6];
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = (uint64_t *)(v17 + v18[7]);
  unint64_t v22 = v21[1];
  if (v22 >> 60 != 15) {
    sub_100013198(*v21, v22);
  }
  uint64_t v23 = (uint64_t *)(v17 + v18[8]);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];

  return sub_100013198(v24, v25);
}

uint64_t sub_100244C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v103 = *(void *)(v5 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16);
  v6(a1, a2, v5);
  uint64_t v7 = (int *)type metadata accessor for CustodianRecord();
  v6(a1 + v7[5], a2 + v7[5], v5);
  uint64_t v8 = v7[6];
  unint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = v7[7];
  uint64_t v13 = (void *)(a1 + v12);
  unint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v7[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
  uint64_t v20 = v7[10];
  uint64_t v21 = a1 + v20;
  unint64_t v22 = (uint64_t *)(a2 + v20);
  unint64_t v23 = *(void *)(a2 + v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = *v22;
    sub_100013140(*v22, v23);
    *(void *)uint64_t v21 = v24;
    *(void *)(v21 + 8) = v23;
  }
  uint64_t v25 = v7[11];
  uint64_t v26 = (uint64_t *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v28 = *v27;
  unint64_t v29 = v27[1];
  sub_100013140(*v27, v29);
  uint64_t *v26 = v28;
  v26[1] = v29;
  *(unsigned char *)(a1 + v7[12]) = *(unsigned char *)(a2 + v7[12]);
  uint64_t v30 = v7[13];
  unint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  uint64_t v33 = v32[1];
  *unint64_t v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = v7[14];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  uint64_t v38 = v7[15];
  uint64_t v39 = a1 + v38;
  uint64_t v40 = a2 + v38;
  *(void *)uint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v41 = v7[16];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (const void *)(a2 + v41);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v101 = v44;
  if (v44((uint64_t)v43, 1, v5))
  {
    uint64_t v45 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v42, (uint64_t)v43, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v42, 0, 1, v5);
  }
  uint64_t v46 = *(int *)(a3 + 20);
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  v6(a1 + v46, a2 + v46, v5);
  uint64_t v49 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v102 = v6;
  v6(v47 + v49[5], v48 + v49[5], v5);
  uint64_t v50 = v49[6];
  uint64_t v51 = (void *)(v47 + v50);
  uint64_t v52 = (void *)(v48 + v50);
  uint64_t v53 = v52[1];
  void *v51 = *v52;
  v51[1] = v53;
  uint64_t v54 = v49[7];
  uint64_t v55 = (uint64_t *)(v47 + v54);
  uint64_t v56 = (uint64_t *)(v48 + v54);
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  swift_bridgeObjectRetain();
  sub_100013140(v57, v58);
  *uint64_t v55 = v57;
  v55[1] = v58;
  uint64_t v59 = v49[8];
  uint64_t v60 = v47 + v59;
  unint64_t v61 = (uint64_t *)(v48 + v59);
  unint64_t v62 = v61[1];
  if (v62 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
  }
  else
  {
    uint64_t v63 = *v61;
    sub_100013140(*v61, v61[1]);
    *(void *)uint64_t v60 = v63;
    *(void *)(v60 + 8) = v62;
  }
  uint64_t v64 = v49[9];
  unint64_t v65 = (uint64_t *)(v47 + v64);
  uint64_t v66 = (uint64_t *)(v48 + v64);
  uint64_t v67 = *v66;
  unint64_t v68 = v66[1];
  sub_100013140(*v66, v68);
  *unint64_t v65 = v67;
  v65[1] = v68;
  *(unsigned char *)(v47 + v49[10]) = *(unsigned char *)(v48 + v49[10]);
  uint64_t v69 = v49[11];
  uint64_t v70 = (void *)(v47 + v69);
  unint64_t v71 = (const void *)(v48 + v69);
  if (v101(v48 + v69, 1, v5))
  {
    uint64_t v72 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64));
    uint64_t v73 = v102;
  }
  else
  {
    uint64_t v74 = (uint64_t)v71;
    uint64_t v73 = v102;
    v102((uint64_t)v70, v74, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v103 + 56))(v70, 0, 1, v5);
  }
  uint64_t v75 = v49[12];
  uint64_t v76 = (void *)(v47 + v75);
  uint64_t v77 = (void *)(v48 + v75);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  v76[1] = v78;
  uint64_t v79 = *(int *)(a3 + 24);
  uint64_t v80 = a1 + v79;
  uint64_t v81 = a2 + v79;
  swift_bridgeObjectRetain();
  v73(v80, v81, v5);
  uint64_t v82 = (int *)type metadata accessor for CustodianHealthRecord();
  v73(v80 + v82[5], v81 + v82[5], v5);
  uint64_t v83 = v82[6];
  uint64_t v84 = v80 + v83;
  uint64_t v85 = v81 + v83;
  uint64_t v86 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(v84, v85, v86);
  uint64_t v87 = v82[7];
  uint64_t v88 = v80 + v87;
  uint64_t v89 = (uint64_t *)(v81 + v87);
  unint64_t v90 = v89[1];
  if (v90 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
  }
  else
  {
    uint64_t v91 = *v89;
    sub_100013140(*v89, v89[1]);
    *(void *)uint64_t v88 = v91;
    *(void *)(v88 + 8) = v90;
  }
  uint64_t v92 = v82[8];
  unint64_t v93 = (uint64_t *)(v80 + v92);
  uint64_t v94 = (uint64_t *)(v81 + v92);
  uint64_t v95 = *v94;
  unint64_t v96 = v94[1];
  sub_100013140(*v94, v96);
  *unint64_t v93 = v95;
  v93[1] = v96;
  *(unsigned char *)(v80 + v82[9]) = *(unsigned char *)(v81 + v82[9]);
  uint64_t v97 = v82[10];
  uint64_t v98 = v80 + v97;
  uint64_t v99 = v81 + v97;
  *(void *)uint64_t v98 = *(void *)v99;
  *(unsigned char *)(v98 + 8) = *(unsigned char *)(v99 + 8);
  return a1;
}

uint64_t sub_10024520C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v122 = v7;
  v7(a1 + v8[5], a2 + v8[5], v5);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = v8[7];
  uint64_t v13 = (void *)(a1 + v12);
  unint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = v8[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v18 = v8[10];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a2 + v18 + 8);
  uint64_t v119 = v6;
  if (*(void *)(a1 + v18 + 8) >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v20;
      sub_100013140(*v20, v21);
      *uint64_t v19 = v22;
      v19[1] = v21;
      uint64_t v6 = v119;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v19);
LABEL_6:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_8;
  }
  uint64_t v23 = *v20;
  sub_100013140(*v20, v21);
  uint64_t v24 = *v19;
  unint64_t v25 = v19[1];
  *uint64_t v19 = v23;
  v19[1] = v21;
  uint64_t v6 = v119;
  sub_100013198(v24, v25);
LABEL_8:
  uint64_t v26 = v8[11];
  uint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_100013140(*v28, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *uint64_t v27 = v29;
  v27[1] = v30;
  sub_100013198(v31, v32);
  *(unsigned char *)(a1 + v8[12]) = *(unsigned char *)(a2 + v8[12]);
  uint64_t v33 = v8[13];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = v8[14];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = v8[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = v8[16];
  uint64_t v44 = (void *)(a1 + v43);
  uint64_t v45 = (const void *)(a2 + v43);
  uint64_t v46 = v6;
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v30) = v47(a1 + v43, 1, v5);
  v120 = v47;
  int v48 = v47((uint64_t)v45, 1, v5);
  if (v30)
  {
    uint64_t v49 = v122;
    if (!v48)
    {
      (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v44, v45, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v44, 0, 1, v5);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v49 = v122;
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v46 + 8))(v44, v5);
LABEL_13:
    uint64_t v50 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_14;
  }
  v122((uint64_t)v44, (uint64_t)v45, v5);
LABEL_14:
  uint64_t v51 = *(int *)(a3 + 20);
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  v49(a1 + v51, a2 + v51, v5);
  uint64_t v54 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v49(v52 + v54[5], v53 + v54[5], v5);
  uint64_t v55 = v54[6];
  uint64_t v56 = (void *)(v52 + v55);
  uint64_t v57 = (void *)(v53 + v55);
  void *v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = v54[7];
  uint64_t v59 = (uint64_t *)(v52 + v58);
  uint64_t v60 = (uint64_t *)(v53 + v58);
  uint64_t v61 = *v60;
  unint64_t v62 = v60[1];
  sub_100013140(*v60, v62);
  uint64_t v63 = *v59;
  unint64_t v64 = v59[1];
  *uint64_t v59 = v61;
  v59[1] = v62;
  sub_100013198(v63, v64);
  uint64_t v65 = v54[8];
  uint64_t v66 = (uint64_t *)(v52 + v65);
  uint64_t v67 = (uint64_t *)(v53 + v65);
  unint64_t v68 = *(void *)(v53 + v65 + 8);
  if (*(void *)(v52 + v65 + 8) >> 60 == 15)
  {
    if (v68 >> 60 != 15)
    {
      uint64_t v69 = *v67;
      sub_100013140(v69, v68);
      *uint64_t v66 = v69;
      v66[1] = v68;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v68 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v66);
LABEL_19:
    *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
    goto LABEL_21;
  }
  uint64_t v70 = *v67;
  sub_100013140(v70, v68);
  uint64_t v71 = *v66;
  unint64_t v72 = v66[1];
  *uint64_t v66 = v70;
  v66[1] = v68;
  sub_100013198(v71, v72);
LABEL_21:
  uint64_t v73 = v54[9];
  uint64_t v74 = (uint64_t *)(v52 + v73);
  uint64_t v75 = (uint64_t *)(v53 + v73);
  uint64_t v76 = *v75;
  unint64_t v77 = v75[1];
  sub_100013140(*v75, v77);
  uint64_t v78 = *v74;
  unint64_t v79 = v74[1];
  uint64_t *v74 = v76;
  v74[1] = v77;
  sub_100013198(v78, v79);
  *(unsigned char *)(v52 + v54[10]) = *(unsigned char *)(v53 + v54[10]);
  uint64_t v80 = v54[11];
  uint64_t v81 = (void *)(v52 + v80);
  uint64_t v82 = (const void *)(v53 + v80);
  LODWORD(v74) = v120(v52 + v80, 1, v5);
  int v83 = v120((uint64_t)v82, 1, v5);
  if (v74)
  {
    if (v83)
    {
      uint64_t v84 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v81, v82, *(void *)(*(void *)(v84 - 8) + 64));
      uint64_t v85 = v122;
      goto LABEL_30;
    }
    (*(void (**)(void *, const void *, uint64_t))(v119 + 16))(v81, v82, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v119 + 56))(v81, 0, 1, v5);
    goto LABEL_27;
  }
  if (v83)
  {
    (*(void (**)(void *, uint64_t))(v119 + 8))(v81, v5);
    uint64_t v86 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v81, v82, *(void *)(*(void *)(v86 - 8) + 64));
LABEL_27:
    uint64_t v85 = v122;
    goto LABEL_30;
  }
  uint64_t v87 = (uint64_t)v81;
  uint64_t v85 = v122;
  v122(v87, (uint64_t)v82, v5);
LABEL_30:
  uint64_t v88 = v54[12];
  uint64_t v89 = (void *)(v52 + v88);
  unint64_t v90 = (void *)(v53 + v88);
  void *v89 = *v90;
  v89[1] = v90[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = *(int *)(a3 + 24);
  uint64_t v92 = a1 + v91;
  uint64_t v93 = a2 + v91;
  v85(a1 + v91, v93, v5);
  uint64_t v94 = (int *)type metadata accessor for CustodianHealthRecord();
  v85(v92 + v94[5], v93 + v94[5], v5);
  uint64_t v95 = v94[6];
  uint64_t v96 = v92 + v95;
  uint64_t v97 = v93 + v95;
  uint64_t v98 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 24))(v96, v97, v98);
  uint64_t v99 = v94[7];
  uint64_t v100 = (uint64_t *)(v92 + v99);
  uint64_t v101 = (uint64_t *)(v93 + v99);
  unint64_t v102 = *(void *)(v93 + v99 + 8);
  if (*(void *)(v92 + v99 + 8) >> 60 != 15)
  {
    if (v102 >> 60 != 15)
    {
      uint64_t v104 = *v101;
      sub_100013140(v104, v102);
      uint64_t v105 = *v100;
      unint64_t v106 = v100[1];
      *uint64_t v100 = v104;
      v100[1] = v102;
      sub_100013198(v105, v106);
      goto LABEL_37;
    }
    sub_1000AD378((uint64_t)v100);
    goto LABEL_35;
  }
  if (v102 >> 60 == 15)
  {
LABEL_35:
    *(_OWORD *)uint64_t v100 = *(_OWORD *)v101;
    goto LABEL_37;
  }
  uint64_t v103 = *v101;
  sub_100013140(v103, v102);
  *uint64_t v100 = v103;
  v100[1] = v102;
LABEL_37:
  uint64_t v107 = v94[8];
  uint64_t v108 = (uint64_t *)(v92 + v107);
  uint64_t v109 = (uint64_t *)(v93 + v107);
  uint64_t v110 = *v109;
  unint64_t v111 = v109[1];
  sub_100013140(*v109, v111);
  uint64_t v112 = *v108;
  unint64_t v113 = v108[1];
  *uint64_t v108 = v110;
  v108[1] = v111;
  sub_100013198(v112, v113);
  *(unsigned char *)(v92 + v94[9]) = *(unsigned char *)(v93 + v94[9]);
  uint64_t v114 = v94[10];
  uint64_t v115 = v92 + v114;
  uint64_t v116 = (uint64_t *)(v93 + v114);
  uint64_t v117 = *v116;
  *(unsigned char *)(v115 + 8) = *((unsigned char *)v116 + 8);
  *(void *)uint64_t v115 = v117;
  return a1;
}

char *sub_100245A20(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for CustodianRecord();
  v8(&a1[v9[5]], &a2[v9[5]], v6);
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  *(_OWORD *)&a1[v9[8]] = *(_OWORD *)&a2[v9[8]];
  *(void *)&a1[v9[9]] = *(void *)&a2[v9[9]];
  *(_OWORD *)&a1[v9[10]] = *(_OWORD *)&a2[v9[10]];
  *(_OWORD *)&a1[v9[11]] = *(_OWORD *)&a2[v9[11]];
  a1[v9[12]] = a2[v9[12]];
  *(_OWORD *)&a1[v9[13]] = *(_OWORD *)&a2[v9[13]];
  *(_OWORD *)&a1[v9[14]] = *(_OWORD *)&a2[v9[14]];
  uint64_t v10 = v9[15];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  uint64_t v13 = v9[16];
  unint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v38 = v7;
  if (v39(&a2[v13], 1, v6))
  {
    uint64_t v16 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v40 = a3;
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  v8(&a1[v17], &a2[v17], v6);
  uint64_t v20 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v8(&v18[v20[5]], &v19[v20[5]], v6);
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  *(_OWORD *)&v18[v20[8]] = *(_OWORD *)&v19[v20[8]];
  *(_OWORD *)&v18[v20[9]] = *(_OWORD *)&v19[v20[9]];
  v18[v20[10]] = v19[v20[10]];
  uint64_t v21 = v20[11];
  uint64_t v22 = &v18[v21];
  uint64_t v23 = v8;
  uint64_t v24 = &v19[v21];
  if (v39(&v19[v21], 1, v6))
  {
    uint64_t v25 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v22, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    v23(v22, v24, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v22, 0, 1, v6);
  }
  *(_OWORD *)&v18[v20[12]] = *(_OWORD *)&v19[v20[12]];
  uint64_t v26 = *(int *)(v40 + 24);
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  v23(&a1[v26], v28, v6);
  uint64_t v29 = (int *)type metadata accessor for CustodianHealthRecord();
  v23(&v27[v29[5]], &v28[v29[5]], v6);
  uint64_t v30 = v29[6];
  uint64_t v31 = &v27[v30];
  unint64_t v32 = &v28[v30];
  uint64_t v33 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
  *(_OWORD *)&v27[v29[8]] = *(_OWORD *)&v28[v29[8]];
  v27[v29[9]] = v28[v29[9]];
  uint64_t v34 = v29[10];
  uint64_t v35 = &v27[v34];
  uint64_t v36 = &v28[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  return a1;
}

uint64_t sub_100245E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for CustodianRecord();
  v7(a1 + v8[5], a2 + v8[5], v5);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = v8[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = v8[8];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[9]) = *(void *)(a2 + v8[9]);
  uint64_t v24 = v8[10];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  unint64_t v27 = *(void *)(a1 + v24 + 8);
  if (v27 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v28 = *(void *)(v26 + 8);
  if (v28 >> 60 == 15)
  {
    sub_1000AD378(v25);
LABEL_4:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    goto LABEL_6;
  }
  uint64_t v29 = *(void *)v25;
  *(void *)uint64_t v25 = *(void *)v26;
  *(void *)(v25 + 8) = v28;
  sub_100013198(v29, v27);
LABEL_6:
  uint64_t v30 = v8[11];
  uint64_t v31 = *(void *)(a1 + v30);
  unint64_t v32 = *(void *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  sub_100013198(v31, v32);
  *(unsigned char *)(a1 + v8[12]) = *(unsigned char *)(a2 + v8[12]);
  uint64_t v33 = v8[13];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = v8[14];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = v8[15];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = a2 + v43;
  *(void *)uint64_t v44 = *(void *)v45;
  *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
  uint64_t v46 = v8[16];
  uint64_t v47 = (void *)(a1 + v46);
  int v48 = (const void *)(a2 + v46);
  uint64_t v110 = v6;
  uint64_t v49 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  int v50 = v49((const void *)(a1 + v46), 1, v5);
  unint64_t v111 = v49;
  int v51 = v49(v48, 1, v5);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, const void *, uint64_t))(v110 + 32))(v47, v48, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v47, 0, 1, v5);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v110 + 8))(v47, v5);
LABEL_11:
    uint64_t v52 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_12;
  }
  v7((uint64_t)v47, (uint64_t)v48, v5);
LABEL_12:
  uint64_t v53 = *(int *)(a3 + 20);
  uint64_t v54 = a1 + v53;
  uint64_t v55 = a2 + v53;
  v7(a1 + v53, a2 + v53, v5);
  uint64_t v56 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v112 = v7;
  v7(v54 + v56[5], v55 + v56[5], v5);
  uint64_t v57 = v56[6];
  uint64_t v58 = (void *)(v54 + v57);
  uint64_t v59 = (uint64_t *)(v55 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = v56[7];
  uint64_t v63 = *(void *)(v54 + v62);
  unint64_t v64 = *(void *)(v54 + v62 + 8);
  *(_OWORD *)(v54 + v62) = *(_OWORD *)(v55 + v62);
  sub_100013198(v63, v64);
  uint64_t v65 = v56[8];
  uint64_t v66 = v54 + v65;
  uint64_t v67 = v55 + v65;
  unint64_t v68 = *(void *)(v54 + v65 + 8);
  if (v68 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
    goto LABEL_17;
  }
  unint64_t v69 = *(void *)(v67 + 8);
  if (v69 >> 60 == 15)
  {
    sub_1000AD378(v66);
    goto LABEL_15;
  }
  uint64_t v70 = *(void *)v66;
  *(void *)uint64_t v66 = *(void *)v67;
  *(void *)(v66 + 8) = v69;
  sub_100013198(v70, v68);
LABEL_17:
  uint64_t v71 = v56[9];
  uint64_t v72 = *(void *)(v54 + v71);
  unint64_t v73 = *(void *)(v54 + v71 + 8);
  *(_OWORD *)(v54 + v71) = *(_OWORD *)(v55 + v71);
  sub_100013198(v72, v73);
  *(unsigned char *)(v54 + v56[10]) = *(unsigned char *)(v55 + v56[10]);
  uint64_t v74 = v56[11];
  uint64_t v75 = (void *)(v54 + v74);
  uint64_t v76 = (const void *)(v55 + v74);
  int v77 = v49((const void *)(v54 + v74), 1, v5);
  int v78 = v111(v76, 1, v5);
  if (v77)
  {
    uint64_t v79 = a3;
    if (v78)
    {
      uint64_t v80 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v75, v76, *(void *)(*(void *)(v80 - 8) + 64));
      uint64_t v81 = v112;
      goto LABEL_26;
    }
    (*(void (**)(void *, const void *, uint64_t))(v110 + 32))(v75, v76, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v75, 0, 1, v5);
    goto LABEL_23;
  }
  uint64_t v79 = a3;
  if (v78)
  {
    (*(void (**)(void *, uint64_t))(v110 + 8))(v75, v5);
    uint64_t v82 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v75, v76, *(void *)(*(void *)(v82 - 8) + 64));
LABEL_23:
    uint64_t v81 = v112;
    goto LABEL_26;
  }
  uint64_t v83 = (uint64_t)v75;
  uint64_t v81 = v112;
  v112(v83, (uint64_t)v76, v5);
LABEL_26:
  uint64_t v84 = v56[12];
  uint64_t v85 = (void *)(v54 + v84);
  uint64_t v86 = (uint64_t *)(v55 + v84);
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  *uint64_t v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = *(int *)(v79 + 24);
  uint64_t v90 = a1 + v89;
  uint64_t v91 = a2 + v89;
  v81(a1 + v89, v91, v5);
  uint64_t v92 = (int *)type metadata accessor for CustodianHealthRecord();
  v81(v90 + v92[5], v91 + v92[5], v5);
  uint64_t v93 = v92[6];
  uint64_t v94 = v90 + v93;
  uint64_t v95 = v91 + v93;
  uint64_t v96 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 40))(v94, v95, v96);
  uint64_t v97 = v92[7];
  uint64_t v98 = (uint64_t *)(v90 + v97);
  uint64_t v99 = (uint64_t *)(v91 + v97);
  unint64_t v100 = *(void *)(v90 + v97 + 8);
  if (v100 >> 60 != 15)
  {
    unint64_t v101 = v99[1];
    if (v101 >> 60 != 15)
    {
      uint64_t v102 = *v98;
      *uint64_t v98 = *v99;
      v98[1] = v101;
      sub_100013198(v102, v100);
      goto LABEL_31;
    }
    sub_1000AD378((uint64_t)v98);
  }
  *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
LABEL_31:
  uint64_t v103 = v92[8];
  uint64_t v104 = *(void *)(v90 + v103);
  unint64_t v105 = *(void *)(v90 + v103 + 8);
  *(_OWORD *)(v90 + v103) = *(_OWORD *)(v91 + v103);
  sub_100013198(v104, v105);
  *(unsigned char *)(v90 + v92[9]) = *(unsigned char *)(v91 + v92[9]);
  uint64_t v106 = v92[10];
  uint64_t v107 = v90 + v106;
  uint64_t v108 = v91 + v106;
  *(void *)uint64_t v107 = *(void *)v108;
  *(unsigned char *)(v107 + 8) = *(unsigned char *)(v108 + 8);
  return a1;
}

uint64_t sub_100246504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100246518);
}

uint64_t sub_100246518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100247D84(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_100246530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100246544);
}

uint64_t sub_100246544(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100247F00(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10024655C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100248074(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for CustodianRecord);
}

char *sub_100246574(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v36 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v75 = *(void *)(v7 - 8);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    v8(a1, a2, v7);
    uint64_t v9 = (int *)type metadata accessor for CustodianshipInfoRecord();
    v8(&a1[v9[5]], &a2[v9[5]], v7);
    uint64_t v10 = v9[6];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    *(void *)&a1[v9[7]] = *(void *)&a2[v9[7]];
    uint64_t v14 = v9[8];
    uint64_t v15 = (uint64_t *)&a1[v14];
    uint64_t v16 = (uint64_t *)&a2[v14];
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_100013140(v17, v18);
    *uint64_t v15 = v17;
    v15[1] = v18;
    a1[v9[9]] = a2[v9[9]];
    uint64_t v76 = a3;
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    v8(&a1[v19], &a2[v19], v7);
    uint64_t v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
    int v77 = v8;
    v8(&v20[v22[5]], &v21[v22[5]], v7);
    uint64_t v23 = v22[6];
    uint64_t v24 = &v20[v23];
    uint64_t v25 = &v21[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    uint64_t v27 = v22[7];
    unint64_t v28 = (uint64_t *)&v20[v27];
    uint64_t v29 = (uint64_t *)&v21[v27];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    swift_bridgeObjectRetain();
    sub_100013140(v30, v31);
    *unint64_t v28 = v30;
    v28[1] = v31;
    uint64_t v32 = v22[8];
    uint64_t v33 = &v20[v32];
    uint64_t v34 = &v21[v32];
    unint64_t v35 = *((void *)v34 + 1);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
    }
    else
    {
      uint64_t v37 = *(void *)v34;
      sub_100013140(*(void *)v34, *((void *)v34 + 1));
      *(void *)uint64_t v33 = v37;
      *((void *)v33 + 1) = v35;
    }
    uint64_t v38 = v22[9];
    uint64_t v39 = (uint64_t *)&v20[v38];
    uint64_t v40 = (uint64_t *)&v21[v38];
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    sub_100013140(*v40, v42);
    *uint64_t v39 = v41;
    v39[1] = v42;
    v20[v22[10]] = v21[v22[10]];
    uint64_t v43 = v22[11];
    uint64_t v44 = &v20[v43];
    uint64_t v45 = &v21[v43];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(&v21[v43], 1, v7))
    {
      uint64_t v46 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      uint64_t v47 = v77;
    }
    else
    {
      int v48 = v45;
      uint64_t v47 = v77;
      v77(v44, v48, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v44, 0, 1, v7);
    }
    uint64_t v49 = v22[12];
    int v50 = &v20[v49];
    int v51 = &v21[v49];
    uint64_t v52 = *((void *)v51 + 1);
    *(void *)int v50 = *(void *)v51;
    *((void *)v50 + 1) = v52;
    uint64_t v53 = *(int *)(v76 + 24);
    uint64_t v54 = &a1[v53];
    uint64_t v55 = &a2[v53];
    swift_bridgeObjectRetain();
    v47(v54, v55, v7);
    uint64_t v56 = (int *)type metadata accessor for CustodianHealthRecord();
    v47(&v54[v56[5]], &v55[v56[5]], v7);
    uint64_t v57 = v56[6];
    uint64_t v58 = &v54[v57];
    uint64_t v59 = &v55[v57];
    uint64_t v60 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
    uint64_t v61 = v56[7];
    uint64_t v62 = &v54[v61];
    uint64_t v63 = &v55[v61];
    unint64_t v64 = *((void *)v63 + 1);
    if (v64 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
    }
    else
    {
      uint64_t v65 = *(void *)v63;
      sub_100013140(*(void *)v63, *((void *)v63 + 1));
      *(void *)uint64_t v62 = v65;
      *((void *)v62 + 1) = v64;
    }
    uint64_t v66 = v56[8];
    uint64_t v67 = (uint64_t *)&v54[v66];
    unint64_t v68 = (uint64_t *)&v55[v66];
    uint64_t v69 = *v68;
    unint64_t v70 = v68[1];
    sub_100013140(*v68, v70);
    uint64_t *v67 = v69;
    v67[1] = v70;
    v54[v56[9]] = v55[v56[9]];
    uint64_t v71 = v56[10];
    uint64_t v72 = &v54[v71];
    unint64_t v73 = &v55[v71];
    *(void *)uint64_t v72 = *(void *)v73;
    v72[8] = v73[8];
  }
  return a1;
}

uint64_t sub_1002469C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = type metadata accessor for CustodianshipInfoRecord();
  v6(a1 + *(int *)(v7 + 20), v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(a1 + *(int *)(v7 + 32)), *(void *)(a1 + *(int *)(v7 + 32) + 8));
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  v6(v8, v4);
  uint64_t v9 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v6(v8 + v9[5], v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v8 + v9[7]), *(void *)(v8 + v9[7] + 8));
  uint64_t v10 = (uint64_t *)(v8 + v9[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100013198(*v10, v11);
  }
  sub_100013198(*(void *)(v8 + v9[9]), *(void *)(v8 + v9[9] + 8));
  uint64_t v12 = v8 + v9[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4)) {
    v6(v12, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = a1 + *(int *)(a2 + 24);
  v6(v13, v4);
  uint64_t v14 = (int *)type metadata accessor for CustodianHealthRecord();
  v6(v13 + v14[5], v4);
  uint64_t v15 = v13 + v14[6];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = (uint64_t *)(v13 + v14[7]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100013198(*v17, v18);
  }
  uint64_t v19 = (uint64_t *)(v13 + v14[8]);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];

  return sub_100013198(v20, v21);
}

uint64_t sub_100246C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for CustodianshipInfoRecord();
  v7(a1 + v8[5], a2 + v8[5], v6);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  unint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  uint64_t v13 = v8[8];
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  sub_100013140(v16, v17);
  *uint64_t v14 = v16;
  v14[1] = v17;
  *(unsigned char *)(a1 + v8[9]) = *(unsigned char *)(a2 + v8[9]);
  uint64_t v74 = a3;
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v7(a1 + v18, a2 + v18, v6);
  unint64_t v21 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v75 = v7;
  v7(v19 + v21[5], v20 + v21[5], v6);
  uint64_t v22 = v21[6];
  uint64_t v23 = (void *)(v19 + v22);
  uint64_t v24 = (void *)(v20 + v22);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = v21[7];
  uint64_t v27 = (uint64_t *)(v19 + v26);
  unint64_t v28 = (uint64_t *)(v20 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  swift_bridgeObjectRetain();
  sub_100013140(v29, v30);
  *uint64_t v27 = v29;
  v27[1] = v30;
  uint64_t v31 = v21[8];
  uint64_t v32 = v19 + v31;
  uint64_t v33 = (uint64_t *)(v20 + v31);
  unint64_t v34 = v33[1];
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  else
  {
    uint64_t v35 = *v33;
    sub_100013140(*v33, v33[1]);
    *(void *)uint64_t v32 = v35;
    *(void *)(v32 + 8) = v34;
  }
  uint64_t v36 = v21[9];
  uint64_t v37 = (uint64_t *)(v19 + v36);
  uint64_t v38 = (uint64_t *)(v20 + v36);
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  sub_100013140(*v38, v40);
  *uint64_t v37 = v39;
  v37[1] = v40;
  *(unsigned char *)(v19 + v21[10]) = *(unsigned char *)(v20 + v21[10]);
  uint64_t v41 = v21[11];
  unint64_t v42 = (void *)(v19 + v41);
  uint64_t v43 = (const void *)(v20 + v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v20 + v41, 1, v6))
  {
    uint64_t v44 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
    uint64_t v45 = v75;
  }
  else
  {
    uint64_t v46 = (uint64_t)v43;
    uint64_t v45 = v75;
    v75((uint64_t)v42, v46, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v42, 0, 1, v6);
  }
  uint64_t v47 = v21[12];
  int v48 = (void *)(v19 + v47);
  uint64_t v49 = (void *)(v20 + v47);
  uint64_t v50 = v49[1];
  *int v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = *(int *)(v74 + 24);
  uint64_t v52 = a1 + v51;
  uint64_t v53 = a2 + v51;
  swift_bridgeObjectRetain();
  v45(v52, v53, v6);
  uint64_t v54 = (int *)type metadata accessor for CustodianHealthRecord();
  v45(v52 + v54[5], v53 + v54[5], v6);
  uint64_t v55 = v54[6];
  uint64_t v56 = v52 + v55;
  uint64_t v57 = v53 + v55;
  uint64_t v58 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(v56, v57, v58);
  uint64_t v59 = v54[7];
  uint64_t v60 = v52 + v59;
  uint64_t v61 = (uint64_t *)(v53 + v59);
  unint64_t v62 = v61[1];
  if (v62 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
  }
  else
  {
    uint64_t v63 = *v61;
    sub_100013140(*v61, v61[1]);
    *(void *)uint64_t v60 = v63;
    *(void *)(v60 + 8) = v62;
  }
  uint64_t v64 = v54[8];
  uint64_t v65 = (uint64_t *)(v52 + v64);
  uint64_t v66 = (uint64_t *)(v53 + v64);
  uint64_t v67 = *v66;
  unint64_t v68 = v66[1];
  sub_100013140(*v66, v68);
  *uint64_t v65 = v67;
  v65[1] = v68;
  *(unsigned char *)(v52 + v54[9]) = *(unsigned char *)(v53 + v54[9]);
  uint64_t v69 = v54[10];
  uint64_t v70 = v52 + v69;
  uint64_t v71 = v53 + v69;
  *(void *)uint64_t v70 = *(void *)v71;
  *(unsigned char *)(v70 + 8) = *(unsigned char *)(v71 + 8);
  return a1;
}

uint64_t sub_100247054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v88 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for CustodianshipInfoRecord();
  v7(a1 + v8[5], a2 + v8[5], v6);
  uint64_t v9 = v8[6];
  uint64_t v10 = (void *)(a1 + v9);
  unint64_t v11 = (void *)(a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  uint64_t v12 = v8[8];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100013140(*v14, v16);
  uint64_t v17 = *v13;
  unint64_t v18 = v13[1];
  *uint64_t v13 = v15;
  v13[1] = v16;
  sub_100013198(v17, v18);
  *(unsigned char *)(a1 + v8[9]) = *(unsigned char *)(a2 + v8[9]);
  uint64_t v86 = a3;
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v87 = a1;
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  v7(a1 + v19, a2 + v19, v6);
  uint64_t v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v7(v20 + v22[5], v21 + v22[5], v6);
  uint64_t v23 = v22[6];
  uint64_t v24 = (void *)(v20 + v23);
  uint64_t v25 = (void *)(v21 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v22[7];
  uint64_t v27 = (uint64_t *)(v20 + v26);
  unint64_t v28 = (uint64_t *)(v21 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_100013140(*v28, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *uint64_t v27 = v29;
  v27[1] = v30;
  sub_100013198(v31, v32);
  uint64_t v33 = v22[8];
  unint64_t v34 = (uint64_t *)(v20 + v33);
  uint64_t v35 = (uint64_t *)(v21 + v33);
  unint64_t v36 = *(void *)(v21 + v33 + 8);
  if (*(void *)(v20 + v33 + 8) >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v35;
      sub_100013140(v37, v36);
      *unint64_t v34 = v37;
      v34[1] = v36;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v36 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v34);
LABEL_6:
    *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
    goto LABEL_8;
  }
  uint64_t v38 = *v35;
  sub_100013140(v38, v36);
  uint64_t v39 = *v34;
  unint64_t v40 = v34[1];
  *unint64_t v34 = v38;
  v34[1] = v36;
  sub_100013198(v39, v40);
LABEL_8:
  uint64_t v41 = v22[9];
  unint64_t v42 = (uint64_t *)(v20 + v41);
  uint64_t v43 = (uint64_t *)(v21 + v41);
  uint64_t v44 = *v43;
  unint64_t v45 = v43[1];
  sub_100013140(*v43, v45);
  uint64_t v46 = *v42;
  unint64_t v47 = v42[1];
  *unint64_t v42 = v44;
  v42[1] = v45;
  sub_100013198(v46, v47);
  *(unsigned char *)(v20 + v22[10]) = *(unsigned char *)(v21 + v22[10]);
  uint64_t v48 = v22[11];
  uint64_t v49 = (void *)(v20 + v48);
  uint64_t v50 = (const void *)(v21 + v48);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  LODWORD(v42) = v51(v20 + v48, 1, v6);
  int v52 = v51((uint64_t)v50, 1, v6);
  if (v42)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(v88 + 16))(v49, v50, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v88 + 56))(v49, 0, 1, v6);
LABEL_14:
      uint64_t v54 = v7;
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v53 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    goto LABEL_14;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v88 + 8))(v49, v6);
    goto LABEL_13;
  }
  uint64_t v54 = v7;
  v7((uint64_t)v49, (uint64_t)v50, v6);
LABEL_15:
  uint64_t v55 = v22[12];
  uint64_t v56 = (void *)(v20 + v55);
  uint64_t v57 = (void *)(v21 + v55);
  void *v56 = *v57;
  v56[1] = v57[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = *(int *)(v86 + 24);
  uint64_t v59 = v87 + v58;
  uint64_t v60 = a2 + v58;
  v54(v87 + v58, v60, v6);
  uint64_t v61 = (int *)type metadata accessor for CustodianHealthRecord();
  v54(v59 + v61[5], v60 + v61[5], v6);
  uint64_t v62 = v61[6];
  uint64_t v63 = v59 + v62;
  uint64_t v64 = v60 + v62;
  uint64_t v65 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 24))(v63, v64, v65);
  uint64_t v66 = v61[7];
  uint64_t v67 = (uint64_t *)(v59 + v66);
  unint64_t v68 = (uint64_t *)(v60 + v66);
  unint64_t v69 = *(void *)(v60 + v66 + 8);
  if (*(void *)(v59 + v66 + 8) >> 60 != 15)
  {
    if (v69 >> 60 != 15)
    {
      uint64_t v71 = *v68;
      sub_100013140(v71, v69);
      uint64_t v72 = *v67;
      unint64_t v73 = v67[1];
      uint64_t *v67 = v71;
      v67[1] = v69;
      sub_100013198(v72, v73);
      goto LABEL_22;
    }
    sub_1000AD378((uint64_t)v67);
    goto LABEL_20;
  }
  if (v69 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
    goto LABEL_22;
  }
  uint64_t v70 = *v68;
  sub_100013140(v70, v69);
  uint64_t *v67 = v70;
  v67[1] = v69;
LABEL_22:
  uint64_t v74 = v61[8];
  uint64_t v75 = (uint64_t *)(v59 + v74);
  uint64_t v76 = (uint64_t *)(v60 + v74);
  uint64_t v77 = *v76;
  unint64_t v78 = v76[1];
  sub_100013140(*v76, v78);
  uint64_t v79 = *v75;
  unint64_t v80 = v75[1];
  uint64_t *v75 = v77;
  v75[1] = v78;
  sub_100013198(v79, v80);
  *(unsigned char *)(v59 + v61[9]) = *(unsigned char *)(v60 + v61[9]);
  uint64_t v81 = v61[10];
  uint64_t v82 = v59 + v81;
  uint64_t v83 = (uint64_t *)(v60 + v81);
  uint64_t v84 = *v83;
  *(unsigned char *)(v82 + 8) = *((unsigned char *)v83 + 8);
  *(void *)uint64_t v82 = v84;
  return v87;
}

char *sub_1002475A8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v30 + 32);
  v7(a1, a2, v6);
  uint64_t v8 = (int *)type metadata accessor for CustodianshipInfoRecord();
  v7(&a1[v8[5]], &a2[v8[5]], v6);
  *(_OWORD *)&a1[v8[6]] = *(_OWORD *)&a2[v8[6]];
  *(void *)&a1[v8[7]] = *(void *)&a2[v8[7]];
  *(_OWORD *)&a1[v8[8]] = *(_OWORD *)&a2[v8[8]];
  a1[v8[9]] = a2[v8[9]];
  uint64_t v29 = a3;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  unint64_t v11 = &a2[v9];
  v7(&a1[v9], &a2[v9], v6);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v7(&v10[v12[5]], &v11[v12[5]], v6);
  *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
  *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
  *(_OWORD *)&v10[v12[8]] = *(_OWORD *)&v11[v12[8]];
  *(_OWORD *)&v10[v12[9]] = *(_OWORD *)&v11[v12[9]];
  v10[v12[10]] = v11[v12[10]];
  uint64_t v13 = v12[11];
  uint64_t v14 = &v10[v13];
  uint64_t v15 = &v11[v13];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(&v11[v13], 1, v6))
  {
    uint64_t v16 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v7(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v6);
  }
  *(_OWORD *)&v10[v12[12]] = *(_OWORD *)&v11[v12[12]];
  uint64_t v17 = *(int *)(v29 + 24);
  unint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  v7(&a1[v17], v19, v6);
  uint64_t v20 = (int *)type metadata accessor for CustodianHealthRecord();
  v7(&v18[v20[5]], &v19[v20[5]], v6);
  uint64_t v21 = v20[6];
  uint64_t v22 = &v18[v21];
  uint64_t v23 = &v19[v21];
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  *(_OWORD *)&v18[v20[8]] = *(_OWORD *)&v19[v20[8]];
  v18[v20[9]] = v19[v20[9]];
  uint64_t v25 = v20[10];
  uint64_t v26 = &v18[v25];
  uint64_t v27 = &v19[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  v26[8] = v27[8];
  return a1;
}

uint64_t sub_1002478CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for CustodianshipInfoRecord();
  v8(a1 + v9[5], a2 + v9[5], v6);
  uint64_t v10 = v9[6];
  unint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *unint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  *(void *)(a1 + v9[7]) = *(void *)(a2 + v9[7]);
  uint64_t v15 = v9[8];
  uint64_t v16 = *(void *)(a1 + v15);
  unint64_t v17 = *(void *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_100013198(v16, v17);
  *(unsigned char *)(a1 + v9[9]) = *(unsigned char *)(a2 + v9[9]);
  uint64_t v76 = a3;
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  v8(a1 + v18, a2 + v18, v6);
  uint64_t v21 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v8(v19 + v21[5], v20 + v21[5], v6);
  uint64_t v22 = v21[6];
  uint64_t v23 = (void *)(v19 + v22);
  uint64_t v24 = (uint64_t *)(v20 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = v21[7];
  uint64_t v28 = *(void *)(v19 + v27);
  unint64_t v29 = *(void *)(v19 + v27 + 8);
  *(_OWORD *)(v19 + v27) = *(_OWORD *)(v20 + v27);
  sub_100013198(v28, v29);
  uint64_t v30 = v21[8];
  uint64_t v31 = v19 + v30;
  uint64_t v32 = v20 + v30;
  unint64_t v33 = *(void *)(v19 + v30 + 8);
  uint64_t v77 = a1;
  if (v33 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v34 = *(void *)(v32 + 8);
  if (v34 >> 60 == 15)
  {
    sub_1000AD378(v31);
LABEL_4:
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    goto LABEL_6;
  }
  uint64_t v35 = *(void *)v31;
  *(void *)uint64_t v31 = *(void *)v32;
  *(void *)(v31 + 8) = v34;
  sub_100013198(v35, v33);
LABEL_6:
  uint64_t v36 = v21[9];
  uint64_t v37 = *(void *)(v19 + v36);
  unint64_t v38 = *(void *)(v19 + v36 + 8);
  *(_OWORD *)(v19 + v36) = *(_OWORD *)(v20 + v36);
  sub_100013198(v37, v38);
  *(unsigned char *)(v19 + v21[10]) = *(unsigned char *)(v20 + v21[10]);
  uint64_t v39 = v21[11];
  unint64_t v40 = (void *)(v19 + v39);
  uint64_t v41 = (const void *)(v20 + v39);
  uint64_t v75 = v7;
  unint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v43 = v42(v19 + v39, 1, v6);
  int v44 = v42((uint64_t)v41, 1, v6);
  if (v43)
  {
    uint64_t v45 = v77;
    if (!v44)
    {
      (*(void (**)(void *, const void *, uint64_t))(v75 + 32))(v40, v41, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v75 + 56))(v40, 0, 1, v6);
LABEL_12:
      unint64_t v47 = v8;
      goto LABEL_13;
    }
LABEL_11:
    uint64_t v46 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v40, v41, *(void *)(*(void *)(v46 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v45 = v77;
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v75 + 8))(v40, v6);
    goto LABEL_11;
  }
  uint64_t v74 = (uint64_t)v40;
  unint64_t v47 = v8;
  v8(v74, (uint64_t)v41, v6);
LABEL_13:
  uint64_t v48 = v21[12];
  uint64_t v49 = (void *)(v19 + v48);
  uint64_t v50 = (uint64_t *)(v20 + v48);
  uint64_t v52 = *v50;
  uint64_t v51 = v50[1];
  *uint64_t v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = *(int *)(v76 + 24);
  uint64_t v54 = v45 + v53;
  uint64_t v55 = a2 + v53;
  v47(v45 + v53, v55, v6);
  uint64_t v56 = (int *)type metadata accessor for CustodianHealthRecord();
  v47(v54 + v56[5], v55 + v56[5], v6);
  uint64_t v57 = v56[6];
  uint64_t v58 = v54 + v57;
  uint64_t v59 = v55 + v57;
  uint64_t v60 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 40))(v58, v59, v60);
  uint64_t v61 = v56[7];
  uint64_t v62 = (uint64_t *)(v54 + v61);
  uint64_t v63 = (uint64_t *)(v55 + v61);
  unint64_t v64 = *(void *)(v54 + v61 + 8);
  if (v64 >> 60 != 15)
  {
    unint64_t v65 = v63[1];
    if (v65 >> 60 != 15)
    {
      uint64_t v66 = *v62;
      uint64_t *v62 = *v63;
      v62[1] = v65;
      sub_100013198(v66, v64);
      goto LABEL_18;
    }
    sub_1000AD378((uint64_t)v62);
  }
  *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
LABEL_18:
  uint64_t v67 = v56[8];
  uint64_t v68 = *(void *)(v54 + v67);
  unint64_t v69 = *(void *)(v54 + v67 + 8);
  *(_OWORD *)(v54 + v67) = *(_OWORD *)(v55 + v67);
  sub_100013198(v68, v69);
  *(unsigned char *)(v54 + v56[9]) = *(unsigned char *)(v55 + v56[9]);
  uint64_t v70 = v56[10];
  uint64_t v71 = v54 + v70;
  uint64_t v72 = v55 + v70;
  *(void *)uint64_t v71 = *(void *)v72;
  *(unsigned char *)(v71 + 8) = *(unsigned char *)(v72 + 8);
  return v45;
}

uint64_t sub_100247D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100247D6C);
}

uint64_t sub_100247D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100247D84(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100247D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v11 = a1;
LABEL_5:
    return v10(v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v13 + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    goto LABEL_5;
  }
  uint64_t v15 = type metadata accessor for CustodianHealthRecord();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + *(int *)(a3 + 24);

  return v16(v18, a2, v17);
}

uint64_t sub_100247ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100247EE8);
}

uint64_t sub_100247EE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100247F00(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100247F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9 = a5(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    uint64_t v11 = v9;
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    uint64_t v13 = a1;
LABEL_5:
    return v12(v13, a2, a2, v11);
  }
  uint64_t v14 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v15 + 84) == a3)
  {
    uint64_t v11 = v14;
    uint64_t v13 = a1 + *(int *)(a4 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    goto LABEL_5;
  }
  uint64_t v17 = type metadata accessor for CustodianHealthRecord();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + *(int *)(a4 + 24);

  return v18(v20, a2, a2, v19);
}

uint64_t sub_10024805C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100248074(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100248074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CustodianRecoveryInfoRecord();
    if (v6 <= 0x3F)
    {
      uint64_t result = type metadata accessor for CustodianHealthRecord();
      if (v7 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *sub_10024817C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (void *)((char *)a1 + v10);
    uint64_t v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100248280(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100248308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002483BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10024849C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100248534(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  void *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1002485F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100248604);
}

uint64_t sub_100248604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_1002486D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002486E8);
}

uint64_t sub_1002486E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t sub_1002487A8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FetchRecoveryRecordsRequest.CachePolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100248918);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRecoveryRecordsRequest.CachePolicy()
{
  return &type metadata for FetchRecoveryRecordsRequest.CachePolicy;
}

unint64_t sub_100248954()
{
  unint64_t result = qword_10032E340;
  if (!qword_10032E340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E340);
  }
  return result;
}

uint64_t sub_1002489F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v49 = a1;
  uint64_t v48 = type metadata accessor for InheritanceInvitationMessage();
  __chkstk_darwin(v48, v11);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler__accountStore, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  uint64_t v19 = sub_100008EF8(v52, v52[3]);
  uint64_t v20 = *v19;
  uint64_t v21 = *(void **)(*v19 + 16);
  id v22 = [v21 aa_primaryAppleAccount];
  if (v22
    && (uint64_t v23 = v22,
        id v24 = objc_msgSend(v22, "aa_altDSID"),
        id v25 = objc_msgSend(v21, "aa_authKitAccountForAltDSID:", v24),
        v23,
        v24,
        v25)
    && (unsigned int v26 = [*(id *)(v20 + 24) canBeBeneficiaryForAccount:v25], v25, v26))
  {
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = a4;
    v28[3] = a5;
    v28[4] = v27;
    sub_100011D2C(a4);
    swift_retain();
    sub_10024955C(v49, a2, a3, (uint64_t)sub_10024C004, (uint64_t)v28);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v47 = v6;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E760);
    sub_10024C264(v49, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = v48;
    if (v32)
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v46 = a3;
      uint64_t v35 = (uint8_t *)v34;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v45 = a5;
      uint64_t v51 = v36;
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v44 = a4;
      type metadata accessor for UUID();
      sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = v48;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = sub_100135190(v37, v38, &v51);
      a4 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10024C2CC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "User is not eligible to be a beneficiary, replying rejected for beneficiaryID: %s", v35, 0xCu);
      swift_arrayDestroy();
      a5 = v45;
      swift_slowDealloc();
      a3 = v46;
      swift_slowDealloc();
    }
    else
    {
      sub_10024C2CC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    }

    uint64_t v39 = sub_100008EF8((void *)(v47 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger), *(void *)(v47 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger + 24));
    uint64_t v40 = v49 + *(int *)(v33 + 20);
    uint64_t v41 = *v39;
    sub_100011D2C(a4);
    sub_10019C740(a2, a3, v40, 0, v41, a4, a5);
    sub_100011358(a4);
  }
  return sub_100008EA8((uint64_t)v52);
}

uint64_t sub_100248F08(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)v47 - v14;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (void *)((char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001AF608(a1, (uint64_t)v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v49 = a3;
      id v25 = (uint8_t *)v24;
      v50[0] = swift_slowAlloc();
      *(_DWORD *)id v25 = 136315138;
      uint64_t v51 = v20;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v51 = sub_100135190(v26, v27, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to persist BenefactorInfoRecord: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    swift_errorRetain();
    a2(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  sub_10024C1FC((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = sub_100007288(v28, (uint64_t)qword_10033E760);
  sub_10024C264((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    v47[1] = a4;
    uint64_t v33 = (uint8_t *)v32;
    uint64_t v34 = swift_slowAlloc();
    v47[0] = v29;
    uint64_t v49 = a3;
    v50[0] = v34;
    uint64_t v48 = a2;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v35 = sub_1001BFF58();
    uint64_t v51 = sub_100135190(v35, v36, v50);
    a2 = v48;
    a3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10024C2CC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Saved Benefactor to storage - %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10024C2CC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  if (*(void *)&v15[*(int *)(v8 + 24)] == 2)
  {
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Status is accepted. Responding to invitation.", v40, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_100008A94(Strong + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger, (uint64_t)v50);
      swift_release();
      unint64_t v42 = sub_100008EF8(v50, v50[3]);
      uint64_t v43 = &v15[*(int *)(v8 + 20)];
      uint64_t v44 = *(void *)v43;
      uint64_t v45 = *((void *)v43 + 1);
      uint64_t v46 = *v42;
      sub_100011D2C((uint64_t)a2);
      swift_bridgeObjectRetain();
      sub_10019C740(v44, v45, v15, 1, v46, a2, a3);
      sub_100011358((uint64_t)a2);
      swift_bridgeObjectRelease();
      sub_10024C2CC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      return sub_100008EA8((uint64_t)v50);
    }
  }
  else if (a2)
  {
    a2(0);
  }
  return sub_10024C2CC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_10024955C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v52 = a5;
  uint64_t v49 = a4;
  uint64_t v50 = a3;
  uint64_t v48 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v51 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v46 + 64);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v47 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v41 - v17;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E760);
  sub_10024C264(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v44 = v12;
    os_log_type_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v41 = v5;
    uint64_t v54 = v24;
    uint64_t v42 = a1;
    uint64_t v43 = v9;
    *(_DWORD *)os_log_type_t v23 = 136315138;
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v53 = sub_100135190(v25, v26, &v54);
    a1 = v42;
    uint64_t v9 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10024C2CC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Checking for existing BenefactorInfoRecord with beneficiaryID - %s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v41;
    swift_slowDealloc();
    uint64_t v12 = v44;
    swift_slowDealloc();
  }
  else
  {
    sub_10024C2CC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  }

  sub_100008EF8((void *)(v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(void *)(v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
  uint64_t v27 = a1 + *(int *)(v12 + 20);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v29 = (uint64_t)v51;
  uint64_t v45 = v8;
  v28(v51, v27, v8);
  uint64_t v30 = swift_allocObject();
  swift_weakInit();
  uint64_t v31 = v47;
  sub_10024C264(a1, v47, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  unint64_t v32 = (*(unsigned __int8 *)(v46 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  unint64_t v33 = (v13 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = v30;
  sub_10024C1FC(v31, v35 + v32, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  unint64_t v36 = (void *)(v35 + v33);
  uint64_t v37 = v50;
  *unint64_t v36 = v48;
  v36[1] = v37;
  unint64_t v38 = (void *)(v35 + v34);
  uint64_t v39 = v52;
  *unint64_t v38 = v49;
  v38[1] = v39;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000EAD74(v29, (uint64_t)sub_10024C148, v35);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v29, v45);
  return swift_release();
}

uint64_t sub_100249A2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messageUtil);

  return swift_deallocClassInstance();
}

uint64_t sub_100249B10()
{
  return type metadata accessor for InheritanceInvitationHandler();
}

uint64_t type metadata accessor for InheritanceInvitationHandler()
{
  uint64_t result = qword_10032E3A0;
  if (!qword_10032E3A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100249B64()
{
  sub_1000A7C50();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100249C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void), uint64_t a7)
{
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v61 = a3;
  uint64_t v11 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v58 - v17;
  uint64_t v19 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v60 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v60 + 64);
  __chkstk_darwin(v19 - 8, v21);
  uint64_t v22 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  unint64_t v65 = (void *)((char *)v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (void *)((char *)v58 - v28);
  sub_1001AF608(a1, (uint64_t)v58 - v28);
  uint64_t v64 = v23;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v66[0] = *v29;
    uint64_t v30 = v66[0];
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      v58[1] = a2;
      uint64_t v59 = a7;
      uint64_t v31 = a6;
      unint64_t v32 = (void *)v68;
      v66[0] = v68;
      uint64_t v67 = 3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v33 = (void *)v68;
      uint64_t v67 = v68;
      char v34 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v34)
      {
        uint64_t v35 = v32;
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        sub_100007288(v36, (uint64_t)qword_10033E760);
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "No existing record found.", v39, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        if (swift_weakLoadStrong())
        {
          uint64_t v40 = swift_allocObject();
          swift_weakInit();
          sub_10024C264(v61, (uint64_t)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
          unint64_t v41 = (*(unsigned __int8 *)(v60 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
          uint64_t v42 = (void *)swift_allocObject();
          v42[2] = v40;
          v42[3] = v31;
          uint64_t v43 = v62;
          v42[4] = v59;
          v42[5] = v43;
          v42[6] = v63;
          sub_10024C1FC((uint64_t)v22, (uint64_t)v42 + v41, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1000F02FC((uint64_t)sub_10024C440, (uint64_t)v42);
          swift_release();
          swift_release();
          swift_errorRelease();
          swift_release();
        }
        else
        {
          swift_errorRelease();
        }

        return;
      }

      a6 = v31;
    }
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100007288(v51, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v68 = v30;
      swift_errorRetain();
      uint64_t v55 = String.init<A>(describing:)();
      uint64_t v68 = sub_100135190(v55, v56, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to fetch BenefactorInfoRecord: %s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v57 = v65;
    *unint64_t v65 = v30;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a6(v57);
    swift_errorRelease();
    sub_100006574((uint64_t)v57, (uint64_t *)&unk_100325860);
  }
  else
  {
    sub_10024C1FC((uint64_t)v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100007288(v44, (uint64_t)qword_10033E760);
    sub_10024C264((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v63 = a6;
      uint64_t v48 = sub_1001BFF58();
      uint64_t v68 = sub_100135190(v48, v49, v66);
      a6 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10024C2CC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Found an existing BenefactorInfoRecord - %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10024C2CC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }

    uint64_t v50 = v65;
    sub_10024C264((uint64_t)v18, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload();
    a6(v50);
    sub_100006574((uint64_t)v50, (uint64_t *)&unk_100325860);
    sub_10024C2CC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_10024A49C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), void (*a5)(uint64_t *), uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v100 = a8;
  unint64_t v102 = a7;
  uint64_t v103 = a6;
  uint64_t v96 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v93 = *(void *)(v96 - 8);
  uint64_t v12 = *(void *)(v93 + 64);
  uint64_t v14 = __chkstk_darwin(v96, v13);
  uint64_t v94 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v95 = (uint64_t)&v88 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v92 = (uint64_t)&v88 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v101 = (uint64_t)&v88 - v22;
  uint64_t v23 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v90 = *(void *)(v23 - 8);
  uint64_t v24 = *(void *)(v90 + 64);
  __chkstk_darwin(v23, v25);
  uint64_t v91 = (uint64_t)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (uint64_t *)((char *)&v88 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    type metadata accessor for InheritanceError(0);
    uint64_t v107 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v29 = v104[0];
    swift_storeEnumTagMultiPayload();
    a4(v29);
    return sub_100006574((uint64_t)v29, (uint64_t *)&unk_100325860);
  }
  uint64_t v97 = Strong;
  uint64_t v98 = a4;
  uint64_t v99 = a5;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      uint64_t v107 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v43 = String.init<A>(describing:)();
      uint64_t v107 = sub_100135190(v43, v44, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to fetch checkManateeStorageAvailability: %s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    *uint64_t v29 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v98(v29);
    sub_100080A98(a1, 1);
    swift_release();
    return sub_100006574((uint64_t)v29, (uint64_t *)&unk_100325860);
  }
  uint64_t v31 = a1 & 1;
  unsigned __int8 v32 = [self isLCInviteAcceptanceEnabled];
  uint64_t v89 = v31;
  if (v32)
  {
    unint64_t v33 = v102;
    uint64_t v34 = v103;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v107 = sub_100135190(v34, v33, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "LCInvite: Feature flag is enabled. Checking if handle:%s is a family member.", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v67 = v91;
    sub_10024C264(v100, v91, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    unint64_t v68 = (*(unsigned __int8 *)(v90 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
    unint64_t v69 = (v24 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v70 = (v69 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = v89;
    sub_10024C1FC(v67, v71 + v68, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    uint64_t v72 = (uint64_t *)(v71 + v69);
    *uint64_t v72 = v34;
    v72[1] = v33;
    uint64_t v74 = v97;
    unint64_t v73 = v98;
    *(void *)(v71 + v70) = v97;
    uint64_t v75 = (void (**)(uint64_t *))(v71 + ((v70 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v76 = v99;
    uint64_t *v75 = v73;
    v75[1] = v76;
    sub_100008A94(v74 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager, (uint64_t)v104);
    uint64_t v77 = v105;
    uint64_t v78 = v106;
    sub_100008EF8(v104, v105);
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = sub_10024C61C;
    *(void *)(v79 + 24) = v71;
    unint64_t v80 = v33;
    uint64_t v81 = *(void (**)(uint64_t, unint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t))(v78 + 8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v81(v103, v80, sub_10024C714, v79, v77, v78);
    swift_release();
    sub_100008EA8((uint64_t)v104);
    swift_release();
    return swift_release();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    uint64_t v91 = sub_100007288(v45, (uint64_t)qword_10033E760);
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "LCInvite: Feature flag not enabled", v48, 2u);
      swift_slowDealloc();
    }

    if (v31) {
      uint64_t v49 = 2;
    }
    else {
      uint64_t v49 = 1;
    }
    uint64_t v50 = v101;
    uint64_t v51 = v100 + *(int *)(v23 + 20);
    uint64_t v52 = (int *)v96;
    uint64_t v53 = v101 + *(int *)(v96 + 28);
    uint64_t v54 = type metadata accessor for UUID();
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16);
    v55(v53, v51, v54);
    v55(v50, v53, v54);
    unint64_t v56 = (uint64_t *)(v50 + v52[5]);
    unint64_t v57 = v102;
    uint64_t *v56 = v103;
    v56[1] = v57;
    *(void *)(v50 + v52[6]) = v49;
    *(_OWORD *)(v50 + v52[8]) = xmmword_1002A9C60;
    *(unsigned char *)(v50 + v52[9]) = v31;
    uint64_t v58 = v92;
    sub_10024C264(v50, v92, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v59 = v95;
    sub_10024C264(v50, v95, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_bridgeObjectRetain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      v104[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315650;
      uint64_t v63 = sub_1001BFF58();
      uint64_t v107 = sub_100135190(v63, v64, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10024C2CC(v58, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v62 + 12) = 1024;
      LODWORD(v107) = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v62 + 18) = 2048;
      uint64_t v65 = *(void *)(v95 + *(int *)(v96 + 24));
      sub_10024C2CC(v95, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      uint64_t v107 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Saving BenefactorInfoRecord %s in manatee? %{BOOL}d with status %ld", (uint8_t *)v62, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10024C2CC(v59, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      sub_10024C2CC(v58, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }

    uint64_t v83 = v97;
    uint64_t v82 = v98;
    sub_100008EF8((void *)(v97 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(void *)(v97 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
    uint64_t v84 = v101;
    uint64_t v85 = v94;
    sub_10024C264(v101, v94, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    unint64_t v86 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
    uint64_t v87 = swift_allocObject();
    *(void *)(v87 + 16) = v82;
    *(void *)(v87 + 24) = v99;
    sub_10024C1FC(v85, v87 + v86, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(void *)(v87 + ((v12 + v86 + 7) & 0xFFFFFFFFFFFFFFF8)) = v83;
    swift_retain();
    swift_retain();
    sub_1000EB800(v84, (uint64_t)sub_10024C4D0, v87);
    swift_release();
    swift_release();
    return sub_10024C2CC(v84, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_10024B0C8(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  uint64_t v64 = a6;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v11 = (int *)type metadata accessor for BenefactorInfoRecord();
  uint64_t v59 = *((void *)v11 - 1);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v61 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v58 = (uint64_t)&v52 - v21;
  uint64_t v60 = v22;
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v52 - v24;
  int v55 = a1;
  if (a2 & a1) {
    uint64_t v26 = 2;
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = a3 + *(int *)(type metadata accessor for InheritanceInvitationMessage() + 20);
  uint64_t v28 = &v25[v11[7]];
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
  v30(v28, v27, v29);
  v30(v25, (uint64_t)v28, v29);
  uint64_t v31 = &v25[v11[5]];
  uint64_t v32 = v57;
  *(void *)uint64_t v31 = v56;
  *((void *)v31 + 1) = v32;
  *(void *)&v25[v11[6]] = v26;
  *(_OWORD *)&v25[v11[8]] = xmmword_1002A9C60;
  uint64_t v33 = v11[9];
  LODWORD(v56) = a2;
  v25[v33] = a2;
  uint64_t v34 = qword_100320B90;
  swift_bridgeObjectRetain();
  if (v34 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100007288(v35, (uint64_t)qword_10033E760);
  uint64_t v36 = v58;
  sub_10024C264((uint64_t)v25, v58, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_10024C264((uint64_t)v25, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  int v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v40 = swift_slowAlloc();
    int v54 = v39;
    uint64_t v41 = v40;
    uint64_t v57 = swift_slowAlloc();
    uint64_t v66 = v57;
    *(_DWORD *)uint64_t v41 = 136315906;
    os_log_t v53 = v37;
    uint64_t v42 = sub_1001BFF58();
    uint64_t v65 = sub_100135190(v42, v43, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10024C2CC(v36, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v41 + 12) = 1024;
    LODWORD(v65) = v56 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 18) = 1024;
    LODWORD(v65) = v55 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 24) = 2048;
    uint64_t v44 = *(void *)&v18[v11[6]];
    sub_10024C2CC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v65 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v37 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "Saving BenefactorInfoRecord %s in manatee? %{BOOL}d isFamilyMember? %{BOOL}d with status %ld", (uint8_t *)v41, 0x22u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10024C2CC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10024C2CC(v36, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  uint64_t v45 = v64;
  sub_100008EF8((void *)(v64 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(void *)(v64 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
  uint64_t v46 = v61;
  sub_10024C264((uint64_t)v25, v61, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v47 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v48 = (v60 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = v63;
  *(void *)(v49 + 16) = v62;
  *(void *)(v49 + 24) = v50;
  sub_10024C1FC(v46, v49 + v47, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *(void *)(v49 + v48) = v45;
  swift_retain();
  swift_retain();
  sub_1000EB800((uint64_t)v25, (uint64_t)sub_10024C4D0, v49);
  swift_release();
  return sub_10024C2CC((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_10024B600(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t v15 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v15;
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to fetch family circle: %@", v13, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
    }

    a3(0);
    return sub_100080A98(a1, 1);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Family circle fetch successful.", v8, 2u);
      swift_slowDealloc();
    }

    return a3(a1 & 1);
  }
}

uint64_t sub_10024B898(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a5;
  uint64_t v61 = a4;
  uint64_t v8 = sub_100009F04(&qword_1003235E8);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v59 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)v51 - v18;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v24 = (void *)((char *)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (void *)((char *)v51 - v26);
  sub_1001AF608(a1, (uint64_t)v51 - v26);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10024C1FC((uint64_t)v27, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10024C264((uint64_t)v19, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload();
    a2(v24);
    sub_100006574((uint64_t)v24, (uint64_t *)&unk_100325860);
    return sub_10024C2CC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  uint64_t v28 = *v27;
  swift_getErrorValue();
  if ((sub_1001A8740(v63[7]) & 1) == 0) {
    goto LABEL_11;
  }
  swift_getErrorValue();
  uint64_t v29 = (void *)sub_1001A84EC(v63[3]);
  if (!v29) {
    goto LABEL_11;
  }
  uint64_t v30 = v29;
  if (!sub_1001A85C8(v29))
  {

LABEL_11:
    *uint64_t v24 = v28;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v24);
    swift_errorRelease();
    return sub_100006574((uint64_t)v24, (uint64_t *)&unk_100325860);
  }
  uint64_t v57 = v30;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100007288(v31, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v56 = v32;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  int v35 = v34;
  BOOL v36 = os_log_type_enabled(v33, v34);
  uint64_t v58 = a2;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    int v53 = v35;
    os_log_type_t v38 = (uint8_t *)v37;
    uint64_t v54 = swift_slowAlloc();
    uint64_t v62 = v28;
    v63[0] = v54;
    uint64_t v52 = v38;
    *(_DWORD *)os_log_type_t v38 = 136315138;
    v51[1] = v38 + 4;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v39 = String.init<A>(describing:)();
    int v55 = v33;
    uint64_t v62 = sub_100135190(v39, v40, v63);
    a2 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v53, "Conflict while saving BenefactorInfoRecord : %s", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Trying to grab Server Record from returned Error", v44, 2u);
    a2 = v58;
    swift_slowDealloc();
  }

  uint64_t v45 = v57;
  uint64_t v46 = (void *)sub_1001A85D0(v57);
  if (v46)
  {
    int v47 = *(unsigned __int8 *)(v61 + *(int *)(v12 + 36));
    int v55 = v46;
    sub_1001BE70C(v55, v47, (uint64_t)v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v11, 0, 1, v12);
    sub_10024C1FC((uint64_t)v11, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10024C264((uint64_t)v16, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload();
    v58(v24);

    swift_errorRelease();
    sub_100006574((uint64_t)v24, (uint64_t *)&unk_100325860);
    return sub_10024C2CC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  else
  {
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Trying to fetch BenefactorInfoRecord from Server", v50, 2u);
      a2 = v58;
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(v60 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(void *)(v60 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
    sub_1000E9AEC(v61, (uint64_t)a2, a3);

    return swift_errorRelease();
  }
}

uint64_t sub_10024BF84()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10024BFBC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10024C004(uint64_t a1)
{
  return sub_100248F08(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10024C010()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

void sub_10024C148(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void (**)(void))(v1 + v5 + 8);
  uint64_t v10 = v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(void))v10;
  uint64_t v12 = *(void *)(v10 + 8);

  sub_100249C04(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_10024C1FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10024C264(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10024C2CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10024C32C()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10024C440(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for InheritanceInvitationMessage() - 8);
  uint64_t v6 = v2[2];
  uint64_t v7 = (void (*)(uint64_t *))v2[3];
  uint64_t v8 = (void (*)(uint64_t *))v2[4];
  uint64_t v9 = v2[5];
  unint64_t v10 = v2[6];
  uint64_t v11 = (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10024A49C(a1, v4, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10024C4D4()
{
  uint64_t v1 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)(v1 - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10024C61C(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  int v7 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v8 = v1 + v4;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v5);
  uint64_t v11 = *(void *)(v1 + v5 + 8);
  uint64_t v12 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];

  return sub_10024B0C8(a1, v7, v8, v10, v11, v9, v13, v14);
}

uint64_t sub_10024C6DC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10024C714(uint64_t a1, char a2)
{
  return sub_10024B600(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10024C724()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10024C870(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(void (**)(uint64_t *))(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10024B898(a1, v5, v6, v1 + v4, v7);
}

char *sub_10024C910(char a1)
{
  uint64_t v1 = (char *)0xD000000000000013;
  switch(a1)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_10;
    case 5:
      goto LABEL_12;
    case 6:
      goto LABEL_14;
    case 7:
      uint64_t v1 = (char *)kPCSServiceSafari;
      if (!kPCSServiceSafari)
      {
        __break(1u);
        JUMPOUT(0x10024CA4CLL);
      }
      goto LABEL_18;
    case 8:
      return v1;
    case 9:
      goto LABEL_16;
    default:
      uint64_t v1 = (char *)kPCSServiceBladerunner;
      if (kPCSServiceBladerunner) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_4:
      uint64_t v1 = (char *)kPCSServiceHyperion;
      if (kPCSServiceHyperion) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_6:
      uint64_t v1 = (char *)kPCSServiceLiverpool;
      if (kPCSServiceLiverpool) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_8:
      uint64_t v1 = (char *)kPCSServicePianoMover;
      if (kPCSServicePianoMover) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_10:
      uint64_t v1 = (char *)kPCSServiceNotes;
      if (kPCSServiceNotes) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_12:
      uint64_t v1 = (char *)kPCSServiceNews;
      if (kPCSServiceNews) {
        goto LABEL_18;
      }
      __break(1u);
LABEL_14:
      uint64_t v1 = (char *)kPCSServiceSharing;
      if (kPCSServiceSharing)
      {
LABEL_18:
        uint64_t v2 = v1;
        uint64_t v1 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        __break(1u);
LABEL_16:
        v1 += 4;
      }
      return v1;
  }
}

Swift::Int sub_10024CA74()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10024CABC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10024CB00(char a1)
{
  uint64_t v1 = 0;
  switch(a1)
  {
    case 6:
      return v1;
    case 9:
      uint64_t v7 = self;
      NSString v3 = String._bridgeToObjectiveC()();
      id v4 = [v7 confettiWebAccessNotificationTextForKey:v3];
      goto LABEL_3;
    default:
      uint64_t v2 = self;
      NSString v3 = String._bridgeToObjectiveC()();
      id v4 = [v2 webAccessNotificationTextForKey:v3];
LABEL_3:
      id v5 = v4;

      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      break;
  }
  return v1;
}

BOOL sub_10024CD38(char *a1, char *a2)
{
  return qword_1002B2358[*a1] == qword_1002B2358[*a2];
}

Swift::Int sub_10024CD5C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B2358[v1]);
  return Hasher._finalize()();
}

void sub_10024CDAC()
{
  Hasher._combine(_:)(qword_1002B2358[*v0]);
}

Swift::Int sub_10024CDE4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B2358[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10024CE30@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10024CE74(*a1);
  *a2 = result;
  return result;
}

void sub_10024CE5C(void *a1@<X8>)
{
  *a1 = qword_1002B2358[*v1];
}

uint64_t sub_10024CE74(uint64_t a1)
{
  uint64_t v1 = a1 - 2;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 5:
      uint64_t result = 3;
      break;
    case 7:
      uint64_t result = 4;
      break;
    case 9:
      uint64_t result = 5;
      break;
    case 10:
      uint64_t result = 6;
      break;
    case 20:
      uint64_t result = 7;
      break;
    default:
      uint64_t result = 10;
      break;
  }
  return result;
}

uint64_t sub_10024CF58(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v5 = sub_10024CE74(a1);
  unint64_t v6 = 0xEB0000000072656ELL;
  unint64_t v7 = 0x6E75726564616C42;
  switch(v5)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (a2 == 0x6E6F697265707948) {
        goto LABEL_18;
      }
      goto LABEL_21;
    case 2:
      unint64_t v6 = 0xE90000000000006CLL;
      if (a2 != 0x6F6F70726576694CLL) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 3:
      unint64_t v6 = 0xEA00000000007265;
      if (a2 != 0x766F4D6F6E616950) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (a2 != 0x7365746F4ELL) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (a2 != 0x72617073646C6546) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE700000000000000;
      if (a2 != 0x676E6972616853) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 7:
      unint64_t v6 = 0xE600000000000000;
      if (a2 != 0x697261666153) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 8:
      unint64_t v6 = 0x80000001002A0220;
      unint64_t v7 = 0xD000000000000013;
      goto LABEL_17;
    case 9:
      unint64_t v6 = 0x80000001002A0200;
      if (a2 != 0xD000000000000017) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 10:
      goto LABEL_23;
    default:
LABEL_17:
      if (v7 != a2) {
        goto LABEL_21;
      }
LABEL_18:
      if (v6 == a3)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      else
      {
LABEL_21:
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9)
        {
          return 1;
        }
        else
        {
LABEL_23:
          if (qword_100320B70 != -1) {
            swift_once();
          }
          uint64_t v10 = type metadata accessor for Logger();
          sub_100007288(v10, (uint64_t)qword_10033E700);
          swift_bridgeObjectRetain_n();
          uint64_t v11 = Logger.logObject.getter();
          os_log_type_t v12 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v11, v12))
          {
            uint64_t v13 = swift_slowAlloc();
            uint64_t v14 = swift_slowAlloc();
            *(_DWORD *)uint64_t v13 = 134218242;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v13 + 12) = 2080;
            swift_bridgeObjectRetain();
            sub_100135190(a2, a3, &v14);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v11, v12, "Requested PCS identity (%ld, %s) is not allowed.", (uint8_t *)v13, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          return 0;
        }
      }
  }
}

uint64_t getEnumTagSinglePayload for PCSServiceIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PCSServiceIdentifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10024D458);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCSServiceIdentifier()
{
  return &type metadata for PCSServiceIdentifier;
}

ValueMetadata *type metadata accessor for PCSServiceOption()
{
  return &type metadata for PCSServiceOption;
}

unint64_t sub_10024D4A4()
{
  unint64_t result = qword_10032E4B0;
  if (!qword_10032E4B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E4B0);
  }
  return result;
}

unint64_t sub_10024D4FC()
{
  unint64_t result = qword_10032E4B8;
  if (!qword_10032E4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E4B8);
  }
  return result;
}

unint64_t sub_10024D554()
{
  unint64_t result = qword_10032E4C0;
  if (!qword_10032E4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E4C0);
  }
  return result;
}

unint64_t sub_10024D5AC()
{
  unint64_t result = qword_10032E4C8;
  if (!qword_10032E4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E4C8);
  }
  return result;
}

unint64_t sub_10024D604()
{
  unint64_t result = qword_10032E4D0;
  if (!qword_10032E4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E4D0);
  }
  return result;
}

uint64_t type metadata accessor for InheritanceMigrationAnalyticsEvent()
{
  uint64_t result = qword_10032E4D8;
  if (!qword_10032E4D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10024D6A4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10024D6E4()
{
  uint64_t result = AAUnderTest.getter();
  if ((result & 1) == 0)
  {
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    *(void *)(inited + 32) = 0xD000000000000012;
    *(void *)(inited + 40) = 0x800000010029D830;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(void *)(inited + 56) = 0xD000000000000012;
    *(void *)(inited + 64) = 0x800000010029D850;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10024D7C8()
{
}

id sub_10024D7F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceMigrationAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_10024D834()
{
  return type metadata accessor for InheritanceMigrationAnalyticsEvent();
}

uint64_t type metadata accessor for InheritanceRecoveryAnalyticsEvent()
{
  uint64_t result = qword_10032E528;
  if (!qword_10032E528) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10024D888()
{
  return swift_initClassMetadata2();
}

void sub_10024D8C8()
{
}

id sub_10024D8F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceRecoveryAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_10024D934()
{
  return type metadata accessor for InheritanceRecoveryAnalyticsEvent();
}

uint64_t sub_10024D93C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100009F48(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100009F48(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100009F48(v36, v37);
    sub_100009F48(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100009F48(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10024DD04(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    *(void *)&v36[0] = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    uint64_t v17 = *(void **)&v36[0];
    type metadata accessor for AAFollowUpUserInfo(0);
    id v18 = v17;
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100009F48(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100009F48(v35, v36);
    sub_100009F48(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100009F48(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10024E0B8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    *(void *)&v36[0] = *(void *)(*(void *)(a1 + 48) + 8 * v12);
    uint64_t v17 = *(void **)&v36[0];
    type metadata accessor for AAFollowUpUserInfo(0);
    id v18 = v17;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100009F04((uint64_t *)&unk_100328450);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100009F48(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100009F48(v35, v36);
    sub_100009F48(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100009F48(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10024E480(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100009F48(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100009F48(v35, v36);
    sub_100009F48(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100009F48(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10024E840(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v12 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v28) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v12);
    int64_t v14 = v30 + 1;
    if (!v13)
    {
      int64_t v14 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v13 = *(void *)(v29 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v30 = v14;
LABEL_28:
    int64_t v16 = *(void **)(*(void *)(a1 + 48) + 8 * v11);
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v11);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    type metadata accessor for AAFollowUpUserInfo(0);
    id v20 = v16;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    *(void *)&v39[0] = v19;
    *((void *)&v39[0] + 1) = v18;
    swift_dynamicCast();
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
    sub_100009F48(&v34, v38);
    long long v31 = v35;
    long long v32 = v36;
    uint64_t v33 = v37;
    sub_100009F48(v38, v39);
    sub_100009F48(v39, &v35);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v21 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v23];
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    uint64_t v9 = v2[6] + 40 * v8;
    *(_OWORD *)uint64_t v9 = v31;
    *(_OWORD *)(v9 + 16) = v32;
    *(void *)(v9 + 32) = v33;
    uint64_t result = (uint64_t)sub_100009F48(&v35, (_OWORD *)(v2[7] + 32 * v8));
    ++v2[2];
  }
  int64_t v15 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10024EC08(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB40);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v11 >= v27) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v11);
  int64_t v13 = i + 1;
  if (!v12)
  {
    int64_t v13 = i + 2;
    if (i + 2 >= v27) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v13);
    if (!v12)
    {
      int64_t v13 = i + 3;
      if (i + 3 >= v27) {
        goto LABEL_32;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = i + 4;
        if (i + 4 >= v27) {
          goto LABEL_32;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v13);
        if (!v12)
        {
          int64_t v14 = i + 5;
          if (i + 5 < v27)
          {
            unint64_t v12 = *(void *)(v28 + 8 * v14);
            if (v12)
            {
              int64_t v13 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_36;
              }
              if (v13 >= v27) {
                break;
              }
              unint64_t v12 = *(void *)(v28 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10018FE4C();
          return;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v12 - 1) & v12;
  unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
  for (i = v13; ; unint64_t v10 = v9 | (i << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v19 = v18;
    unint64_t v20 = sub_1001358B8(v17, v16);
    unint64_t v21 = v20;
    if (v22)
    {
      BOOL v7 = (uint64_t *)(v2[6] + 16 * v20);
      swift_bridgeObjectRelease();
      *BOOL v7 = v17;
      v7[1] = v16;
      uint64_t v8 = v2[7];

      *(void *)(v8 + 8 * v21) = v19;
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v20;
    unint64_t v23 = (uint64_t *)(v2[6] + 16 * v20);
    *unint64_t v23 = v17;
    v23[1] = v16;
    *(void *)(v2[7] + 8 * v20) = v19;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_34;
    }
    v2[2] = v26;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10024EEAC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032DB18);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100009F48(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100009F48(v35, v36);
    sub_100009F48(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100009F48(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10018FE4C();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_10024F258(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100009F04(&qword_10032C6C0);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  unsigned int v6 = &v37;
  BOOL v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = (char *)&type metadata for Any + 8;
  unint64_t v11 = &type metadata for String;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_10018FE4C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    BOOL v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100009F48(v6, v7);
    sub_100009F48(v7, v40);
    sub_100009F48(v40, &v38);
    unint64_t result = sub_1001358B8(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      unint64_t v12 = v7;
      int64_t v13 = v6;
      uint64_t v14 = v1;
      int64_t v15 = v11;
      int64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      unint64_t v11 = v15;
      uint64_t v1 = v14;
      unsigned int v6 = v13;
      BOOL v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_100008EA8((uint64_t)v18);
      unint64_t result = (unint64_t)sub_100009F48(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_100009F48(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10024F5C4(long long *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100009F04(&qword_100325870);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v56 = (void *)((char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100007288(v12, (uint64_t)qword_10033E700);
  sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v52 = v8;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v53 = v3;
    *(void *)&long long v58 = v18;
    id v55 = (id)a3;
    *(_DWORD *)uint64_t v17 = 136315138;
    v51[0] = v17 + 4;
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    uint64_t v19 = sub_10025169C();
    v51[1] = v13;
    uint64_t v20 = v9;
    unint64_t v22 = v21;
    uint64_t v54 = a2;
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    v57[0] = sub_100135190(v19, v22, (uint64_t *)&v58);
    a3 = (uint64_t)v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v9 = v20;
    swift_bridgeObjectRelease();
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    a2 = v54;
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Posting User notification : %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v53;
    swift_slowDealloc();
    uint64_t v8 = v52;
    swift_slowDealloc();
  }
  else
  {
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  }

  sub_100251EF0(a1, &v58);
  switch(v62)
  {
    case 1:
      uint64_t v56 = (void *)*((void *)&v58 + 1);
      uint64_t v34 = (void *)v58;
      uint64_t v35 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController + 32);
      sub_100008EF8((void *)(v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController), *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController + 24));
      uint64_t v36 = swift_allocObject();
      sub_100251EF0(a1, (_OWORD *)(v36 + 16));
      *(void *)(v36 + 64) = a2;
      *(void *)(v36 + 72) = a3;
      uint64_t v37 = *(void (**)(void))(v35 + 8);
      sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      sub_100011D2C((uint64_t)a2);
      id v38 = v34;
      v37();

      swift_release();
      break;
    case 2:
      long long v39 = v58;
      uint64_t v40 = v4;
      uint64_t v41 = v59;
      uint64_t v42 = v60;
      uint64_t v43 = v61;
      sub_100008EF8((void *)(v40 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController), *(void *)(v40 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController + 24));
      sub_100219DD8(v39, *((uint64_t *)&v39 + 1), v41, v42, v43, (uint64_t)a2, a3);
      break;
    case 3:
      sub_1002520D0(v58, *((void **)&v58 + 1), v59, v60, v61);
      if (a2) {
        a2(0);
      }
      break;
    default:
      long long v23 = v58;
      BOOL v24 = v56;
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v56, v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager__accountStore, v8);
      id v55 = (id)v23;
      Dependency.wrappedValue.getter();
      (*(void (**)(void *, uint64_t))(v9 + 8))(v24, v8);
      id v25 = [*(id *)(*sub_100008EF8(v57, v57[3]) + 16) aa_primaryAppleAccount];
      sub_100008EA8((uint64_t)v57);
      if (v25)
      {
        char v26 = (void *)(v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
        uint64_t v27 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController + 24);
        uint64_t v28 = v26[4];
        uint64_t v56 = sub_100008EF8(v26, v27);
        uint64_t v29 = sub_10024E840(*((uint64_t *)&v23 + 1));
        uint64_t v30 = swift_allocObject();
        sub_100251EF0(a1, (_OWORD *)(v30 + 16));
        *(void *)(v30 + 64) = a2;
        *(void *)(v30 + 72) = a3;
        *(void *)(v30 + 80) = v25;
        int64_t v31 = *(void (**)(id, id, uint64_t, void (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v28 + 16);
        sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
        sub_100011D2C((uint64_t)a2);
        id v32 = v25;
        int64_t v33 = v55;
        v31(v55, v32, v29, sub_1002526C0, v30, v27, v28);

        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        uint64_t v44 = v55;
        uint64_t v45 = Logger.logObject.getter();
        uint64_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, (os_log_type_t)v46))
        {
          int v47 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "Primary account found nil while preparing to post CFU, exiting.", v47, 2u);
          swift_slowDealloc();
        }

        if (a2)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v48 = objc_allocWithZone((Class)NSError);
          NSString v49 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v50 = [v48 initWithDomain:v49 code:-4404 userInfo:0];

          a2(v50);
        }
      }
      break;
  }
}

void sub_10024FCB8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E700);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      uint64_t v13 = sub_10025169C();
      uint64_t v30 = a4;
      unint64_t v15 = v14;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100135190(v13, v15, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      *(_WORD *)(v12 + 12) = 2080;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v16 = String.init<A>(describing:)();
      sub_100135190(v16, v17, &v32);
      a4 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error occurred while posting FollowUp %s - Error: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v30) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      swift_errorRelease();
      swift_errorRelease();

      if (!a4)
      {
LABEL_14:
        swift_errorRelease();
        return;
      }
    }
    swift_errorRetain();
    a4(a2);
    swift_errorRelease();
    goto LABEL_14;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E700);
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  id v20 = a6;
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  id v21 = v20;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v22, v23))
  {
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);

    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v24 = swift_slowAlloc();
  id v25 = (void *)swift_slowAlloc();
  uint64_t v32 = swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 136315394;
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  uint64_t v26 = sub_10025169C();
  int64_t v31 = a4;
  unint64_t v28 = v27;
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  sub_100135190(v26, v28, &v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  *(_WORD *)(v24 + 12) = 2112;
  id v29 = v21;
  a4 = v31;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *id v25 = v21;

  _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully posted Follow Up - %s on account: %@", (uint8_t *)v24, 0x16u);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v31) {
LABEL_16:
  }
    a4(0);
}

void sub_1002502A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E700);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      uint64_t v11 = sub_10025169C();
      os_log_type_t v23 = a4;
      unint64_t v13 = v12;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100135190(v11, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      *(_WORD *)(v10 + 12) = 2080;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v14 = String.init<A>(describing:)();
      sub_100135190(v14, v15, &v24);
      a4 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error occurred while posting FollowUp %s - Error: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v23) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      swift_errorRelease();
      swift_errorRelease();

      if (!a4)
      {
LABEL_14:
        swift_errorRelease();
        return;
      }
    }
    swift_errorRetain();
    a4(a2);
    swift_errorRelease();
    goto LABEL_14;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E700);
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v17, v18))
  {
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);

    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  uint64_t v24 = swift_slowAlloc();
  *(_DWORD *)uint64_t v19 = 136315138;
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  uint64_t v20 = sub_10025169C();
  unint64_t v22 = v21;
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  sub_100135190(v20, v22, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully posted Follow Up - %s", v19, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (a4) {
LABEL_16:
  }
    a4(0);
}

void sub_1002507F0(long long *a1)
{
  uint64_t v2 = v1;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(void *)&v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    uint64_t v8 = sub_10025169C();
    unint64_t v10 = v9;
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100135190(v8, v10, (uint64_t *)v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dismissing User notification: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  }

  sub_100251EF0(a1, v28);
  switch(v30)
  {
    case 2:
      uint64_t v16 = v29;
      if (*(void *)(v29 + 16))
      {
        unint64_t v17 = sub_1001358B8(0xD000000000000010, 0x800000010029B9C0);
        if (v18)
        {
          uint64_t v19 = (uint64_t *)(*(void *)(v16 + 56) + 16 * v17);
          uint64_t v21 = *v19;
          uint64_t v20 = v19[1];
          unint64_t v22 = *(void **)(*sub_100008EF8((void *)(v2+ OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController), *(void *)(v2+ OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController+ 24))+ OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter);
          sub_100009F04(&qword_10032DAE0);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = xmmword_1002A9C00;
          *(void *)(v23 + 32) = v21;
          *(void *)(v23 + 40) = v20;
          swift_bridgeObjectRetain_n();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v22 removePendingNotificationRequestsWithIdentifiers:isa];
          swift_bridgeObjectRelease();
        }
      }
      break;
    case 3:
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Dismissing system alert is not supported.", v27, 2u);
        swift_slowDealloc();
      }

      break;
    default:
      uint64_t v11 = *(void **)&v28[0];
      uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController + 32);
      sub_100008EF8((void *)(v2 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController), *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController + 24));
      uint64_t v13 = swift_allocObject();
      sub_100251EF0(a1, (_OWORD *)(v13 + 16));
      uint64_t v14 = *(void (**)(void))(v12 + 24);
      sub_100251EB0((uint64_t)a1, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      id v15 = v11;
      v14();

      swift_release();
      break;
  }
}

void sub_100250CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E700);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315394;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      uint64_t v7 = sub_10025169C();
      unint64_t v9 = v8;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100135190(v7, v9, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      *(_WORD *)(v6 + 12) = 2080;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v10 = String.init<A>(describing:)();
      sub_100135190(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Error occured while dismissing FollowUp %s - Error: %s", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E700);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
    oslog = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_100251E0C);
      uint64_t v15 = sub_10025169C();
      unint64_t v17 = v16;
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100135190(v15, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Successfully dismissed Follow Up - %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
    sub_100251EB0(a3, (void (*)(void, void, void, void, void, void))sub_10004CFA8);
  }
}

void sub_100251214(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E700);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "User dismissed system alert", v13, 2u);
      swift_slowDealloc();
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E700);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Alternate response pressed for system alert", v5, 2u);
      swift_slowDealloc();
    }

    id v6 = [self defaultWorkspace];
    if (v6)
    {
      unint64_t v8 = v6;
      URL._bridgeToObjectiveC()(v7);
      uint64_t v10 = v9;
      sub_100220CAC((uint64_t)_swiftEmptyArrayStorage);
      os_log_t oslog = (os_log_t)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v8 openSensitiveURL:v10 withOptions:oslog];

LABEL_14:
    }
  }
}

void sub_100251470(uint64_t a1, void *a2, uint64_t a3)
{
  os_log_type_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1002514E8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);

  return swift_deallocClassInstance();
}

uint64_t sub_1002515AC()
{
  return type metadata accessor for UserNotificationManager();
}

uint64_t type metadata accessor for UserNotificationManager()
{
  uint64_t result = qword_10032E5B8;
  if (!qword_10032E5B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100251600()
{
  sub_1000A7C50();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_10025169C()
{
  uint64_t v12 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v1);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)&v20 + 1) = &type metadata for UserNotificationType;
  uint64_t v18 = swift_allocObject();
  sub_100251EF0(v0, (_OWORD *)(v18 + 16));
  sub_100251EB0((uint64_t)v0, (void (*)(void, void, void, void, void, void))sub_100251E0C);
  Mirror.init(reflecting:)();
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  uint64_t v10 = v3;
  Mirror.children.getter();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (v21)
  {
    os_log_type_t v13 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v5 = v18;
      os_log_type_t v4 = v19;
      v16[0] = v18;
      v16[1] = v19;
      sub_100009F48(&v20, v17);
      v14._countAndFlagsBits = v5;
      v14._object = v4;
      sub_100047DD4((uint64_t)v17, (uint64_t)v15);
      if (v4)
      {
        swift_bridgeObjectRetain();
        sub_100008EA8((uint64_t)v15);
        v14._countAndFlagsBits = 0;
        v14._object = (void *)0xE000000000000000;
        v6._countAndFlagsBits = v5;
        v6._object = v4;
        String.append(_:)(v6);
        swift_bridgeObjectRelease();
        v7._countAndFlagsBits = 8250;
        v7._object = (void *)0xE200000000000000;
        String.append(_:)(v7);
      }
      else
      {
        sub_100008EA8((uint64_t)v15);
        v14._countAndFlagsBits = 0;
        v14._object = (void *)0xE000000000000000;
      }
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      sub_100006574((uint64_t)v16, &qword_10032E658);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (v21);
  }
  swift_release_n();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v12);
  return v22;
}

uint64_t sub_100251958()
{
  sub_100251EF0(v0, v2);
  return sub_10025169C();
}

uint64_t sub_100251990(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v25) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v25) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v25) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v25) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    Swift::String v14 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    id v18 = v14;
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_100135930((uint64_t)v18);
    char v21 = v20;

    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v22 = (void *)(*(void *)(a2 + 56) + 16 * v19);
    if (*v22 == v17 && v22[1] == v16)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v25) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v25) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100251BA0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v27) {
            return 1;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    id v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1001358B8(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    char v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100251DC0(long long *a1, long long *a2)
{
  sub_100251EF0(a1, v4);
  sub_100251EF0(a2, v5);
  return sub_100251F08(v4, v5) & 1;
}

void *sub_100251E0C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      id v7 = result;
      goto LABEL_4;
    case 2:
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      uint64_t result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100251EB0(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

_OWORD *sub_100251EF0(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_100251F08(long long *a1, long long *a2)
{
  sub_100251EF0(a1, &v28);
  if (v32 != 2)
  {
    if (!v32)
    {
      long long v3 = v28;
      sub_100251EF0(a2, &v23);
      if (!v27)
      {
        long long v4 = v23;
        uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v6;
        if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
        {
          id v9 = (id)v3;
          id v10 = (id)v4;
          swift_bridgeObjectRelease_n();
LABEL_15:
          char v18 = sub_100251990(*((uint64_t *)&v3 + 1), *((uint64_t *)&v4 + 1));

          return v18 & 1;
        }
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        id v20 = (id)v3;
        id v21 = (id)v4;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_15;
        }
      }
    }
LABEL_17:
    char v18 = 0;
    return v18 & 1;
  }
  long long v11 = v28;
  uint64_t v12 = v29;
  uint64_t v13 = v30;
  uint64_t v14 = v31;
  sub_100251EF0(a2, &v23);
  if (v27 != 2) {
    goto LABEL_17;
  }
  uint64_t v15 = v24;
  uint64_t v16 = v25;
  uint64_t v17 = v26;
  if (v11 == v23 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (v12 == v15 && v13 == v16 || (char v18 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      char v18 = sub_100251BA0(v14, v17);
    }
  }
  return v18 & 1;
}

void sub_1002520D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v48 = a2;
  uint64_t v8 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v8 - 8, v9);
  long long v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  id v20 = (char *)v43 - v19;
  if (*(void *)(a5 + 16))
  {
    sub_1001358B8(0xD000000000000010, 0x800000010029B9E0);
    if (v21)
    {
      uint64_t v47 = a3;
      swift_bridgeObjectRetain();
      URL.init(string:)();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        uint64_t v26 = *(void (**)(unint64_t, char *, uint64_t))(v13 + 32);
        uint64_t v45 = v13 + 32;
        uint64_t v46 = v26;
        v26((unint64_t)v20, v11, v12);
        sub_1002526D4();
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        long long v28 = self;
        id v29 = [v28 bundleForClass:ObjCClassFromMetadata];
        v43[2] = a4;
        id v30 = v29;
        v50._countAndFlagsBits = 0xD000000000000032;
        v50._object = (void *)0x80000001002A0F90;
        v31._countAndFlagsBits = 0x53474E4954544553;
        v31._object = (void *)0xE800000000000000;
        v32._countAndFlagsBits = 0;
        v32._object = (void *)0xE000000000000000;
        v43[1] = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v50)._countAndFlagsBits;

        id v33 = [v28 bundleForClass:ObjCClassFromMetadata];
        v51._countAndFlagsBits = 0xD00000000000001ALL;
        v51._object = (void *)0x80000001002A0FD0;
        v34._countAndFlagsBits = 19279;
        v34._object = (void *)0xE200000000000000;
        v35._countAndFlagsBits = 0;
        v35._object = (void *)0xE000000000000000;
        NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v35, v51);

        id v44 = self;
        NSString v48 = String._bridgeToObjectiveC()();
        NSString v36 = String._bridgeToObjectiveC()();
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v12);
        unint64_t v39 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        uint64_t v40 = swift_allocObject();
        v46(v40 + v39, v17, v12);
        aBlock[4] = sub_1002527A4;
        aBlock[5] = v40;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100251470;
        aBlock[3] = &unk_100302940;
        uint64_t v41 = _Block_copy(aBlock);
        swift_release();
        uint64_t v42 = v48;
        [v44 showUserNotificationWithTitle:v48 message:v36 cancelButtonTitle:v37 otherButtonTitle:v38 withCompletionBlock:v41];
        _Block_release(v41);

        (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
        return;
      }
      sub_100006574((uint64_t)v11, &qword_10032D4E0);
    }
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100007288(v22, (uint64_t)qword_10033E700);
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to post system alert, action URL is missing.", v25, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100252604()
{
  sub_10004CFA8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  if (*(void *)(v0 + 64)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 80, 7);
}

void sub_100252658(uint64_t a1, uint64_t a2)
{
  sub_1002502A0(a1, a2, v2 + 16, *(void (**)(void))(v2 + 64));
}

uint64_t sub_100252664()
{
  sub_10004CFA8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));
  if (*(void *)(v0 + 64)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 88, 7);
}

void sub_1002526C0(uint64_t a1, uint64_t a2)
{
  sub_10024FCB8(a1, a2, v2 + 16, *(void (**)(void))(v2 + 64), *(void *)(v2 + 72), *(void **)(v2 + 80));
}

unint64_t sub_1002526D4()
{
  unint64_t result = qword_10032E660;
  if (!qword_10032E660)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032E660);
  }
  return result;
}

uint64_t sub_100252714()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1002527A4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL();

  sub_100251214(a1, a2);
}

void sub_100252828(uint64_t a1, uint64_t a2)
{
  sub_100250CF8(a1, a2, v2 + 16);
}

uint64_t sub_100252848()
{
  sub_10004CFA8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return _swift_deallocObject(v0, 57, 7);
}

void *destroy for UserNotificationType(uint64_t a1)
{
  return sub_10004CFA8(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t initializeWithCopy for UserNotificationType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_100251E0C(*(void **)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for UserNotificationType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_100251E0C(*(void **)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_10004CFA8(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for UserNotificationType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UserNotificationType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_10004CFA8(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotificationType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UserNotificationType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100252AA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_100252AB0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationType()
{
  return &type metadata for UserNotificationType;
}

uint64_t type metadata accessor for SubscriptionManager()
{
  return self;
}

uint64_t destroy for CustodianMegadomePerson()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CustodianMegadomePerson(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CustodianMegadomePerson(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CustodianMegadomePerson(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustodianMegadomePerson(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustodianMegadomePerson(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianMegadomePerson()
{
  return &type metadata for CustodianMegadomePerson;
}

uint64_t type metadata accessor for CustodianInvitationActionAnalyticsEvent()
{
  uint64_t result = qword_10032E730;
  if (!qword_10032E730) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100252D60()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100252DC8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB00000000656461;
  uint64_t v3 = 0x7267707532617368;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7267707532617368;
  unint64_t v6 = 0xEB00000000656461;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6961706552706463;
      unint64_t v6 = 0xE900000000000072;
      break;
    case 2:
      uint64_t v5 = 0x684368746C616568;
      unint64_t v6 = 0xEB000000006B6365;
      break;
    case 3:
      uint64_t v5 = 0x7267694D74736F70;
      unint64_t v6 = 0xED00006E6F697461;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE900000000000072;
      if (v5 == 0x6961706552706463) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x684368746C616568;
      unint64_t v2 = 0xEB000000006B6365;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xED00006E6F697461;
      if (v5 == 0x7267694D74736F70) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100252F98(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006F74;
  unint64_t v3 = 0x7541747065636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7541747065636361;
  unint64_t v6 = 0xEA00000000006F74;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x614D747065636361;
      unint64_t v6 = 0xEC0000006C61756ELL;
      break;
    case 2:
      unint64_t v6 = 0x8000000100299BF0;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000013;
      char v7 = "declineBeforeAccept";
      goto LABEL_6;
    case 4:
      unint64_t v5 = 0xD000000000000012;
      char v7 = "declineAfterAccept";
LABEL_6:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0x614D747065636361;
      unint64_t v2 = 0xEC0000006C61756ELL;
      break;
    case 2:
      unint64_t v2 = 0x8000000100299BF0;
      unint64_t v3 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v3 = 0xD000000000000013;
      uint64_t v8 = "declineBeforeAccept";
      goto LABEL_12;
    case 4:
      unint64_t v3 = 0xD000000000000012;
      uint64_t v8 = "declineAfterAccept";
LABEL_12:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100253168(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006F74;
  unint64_t v3 = 0x7541747065636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7541747065636361;
  unint64_t v6 = 0xEA00000000006F74;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x614D747065636361;
      unint64_t v6 = 0xEC0000006C61756ELL;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000011;
      char v7 = "declineIneligible";
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xD000000000000013;
      char v7 = "declineBeforeAccept";
      goto LABEL_9;
    case 4:
      unint64_t v5 = 0xD000000000000012;
      char v7 = "declineAfterAccept";
      goto LABEL_9;
    case 5:
      uint64_t v8 = "pendingNonFamily";
      goto LABEL_11;
    case 6:
      unint64_t v5 = 0x45676E69646E6570;
      unint64_t v6 = 0xEC000000726F7272;
      break;
    case 7:
      unint64_t v5 = 0xD000000000000011;
      char v7 = "pendingIneligible";
LABEL_9:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 8:
      uint64_t v8 = "pendingNoManatee";
LABEL_11:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v9 = 0x614D747065636361;
      uint64_t v10 = 1818326382;
      goto LABEL_19;
    case 2:
      unint64_t v3 = 0xD000000000000011;
      char v11 = "declineIneligible";
      goto LABEL_22;
    case 3:
      unint64_t v3 = 0xD000000000000013;
      char v11 = "declineBeforeAccept";
      goto LABEL_22;
    case 4:
      unint64_t v3 = 0xD000000000000012;
      char v11 = "declineAfterAccept";
      goto LABEL_22;
    case 5:
      uint64_t v12 = "pendingNonFamily";
      goto LABEL_27;
    case 6:
      uint64_t v9 = 0x45676E69646E6570;
      uint64_t v10 = 1919906418;
LABEL_19:
      unint64_t v2 = v10 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v5 != v9) {
        goto LABEL_28;
      }
      goto LABEL_24;
    case 7:
      unint64_t v3 = 0xD000000000000011;
      char v11 = "pendingIneligible";
LABEL_22:
      unint64_t v2 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      goto LABEL_23;
    case 8:
      uint64_t v12 = "pendingNoManatee";
LABEL_27:
      unint64_t v2 = (unint64_t)(v12 - 32) | 0x8000000000000000;
      if (v5 != 0xD000000000000010) {
        goto LABEL_28;
      }
      goto LABEL_24;
    default:
LABEL_23:
      if (v5 != v3) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 == v2) {
        char v13 = 1;
      }
      else {
LABEL_28:
      }
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v13 & 1;
  }
}

uint64_t sub_1002533F8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x676542656B617073;
  unint64_t v3 = 0xEA00000000006E69;
  uint64_t v4 = a1;
  unint64_t v5 = 0x676542656B617073;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v3 = 0x8000000100299C80;
      break;
    case 2:
      unint64_t v3 = 0x8000000100299CA0;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v5 = 0x6E6946656B617073;
      unint64_t v3 = 0xEA00000000006C61;
      break;
    case 4:
      unint64_t v5 = 0x6D6F43656B617073;
      unint64_t v3 = 0xED00006574656C70;
      break;
    case 5:
      unint64_t v5 = 0x727245656B617073;
      unint64_t v3 = 0xEA0000000000726FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xEA00000000006E69;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x8000000100299C80;
      if (v5 == 0xD000000000000015) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0x8000000100299CA0;
      if (v5 != 0xD000000000000011) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xEA00000000006C61;
      if (v5 != 0x6E6946656B617073) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x6D6F43656B617073;
      unint64_t v6 = 0xED00006574656C70;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEA0000000000726FLL;
      if (v5 != 0x727245656B617073) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100253648(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6465766F72707061;
    }
    else {
      uint64_t v3 = 0x6E776F6E6B6E75;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE700000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6465766F72707061;
      }
      else {
        uint64_t v6 = 0x6E776F6E6B6E75;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE700000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x64657469766E69;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x64657469766E69)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100253764(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6E69747563657865;
    }
    else {
      uint64_t v3 = 0x64656873696E6966;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000067;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6E69747563657865;
      }
      else {
        uint64_t v6 = 0x64656873696E6966;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000067;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x7964616572;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x7964616572)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100253880(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v3 = 0x7974696C697475;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEB0000000065636ELL;
  }
  if (a2) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475;
  }
  if (a2) {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100253930()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100253A2C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100253B94()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_100253CBC(char a1)
{
  unint64_t result = 0x7541747065636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614D747065636361;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x45676E69646E6570;
      break;
    case 7:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100253DF0(unsigned __int8 *a1, char *a2)
{
  return sub_100253168(*a1, *a2);
}

Swift::Int sub_100253DFC()
{
  return Hasher._finalize()();
}

uint64_t sub_100253E44()
{
  return sub_100253A2C();
}

Swift::Int sub_100253E4C()
{
  return Hasher._finalize()();
}

unint64_t sub_100253E90@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100254A18(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100253EC0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100253CBC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100253EEC()
{
  *(void *)(v0 + qword_10032E710) = 2;
  *(unsigned char *)(v0 + qword_10032E718) = 9;
  *(void *)(v0 + qword_10032E720) = -1;
  *(void *)(v0 + qword_10032E728) = _swiftEmptyArrayStorage;
  sub_100009F04(&qword_100324668);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x800000010029F700;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  sub_10022175C(inited);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

void sub_100253FD0(uint64_t a1, void *a2)
{
  if (AAUnderTest.getter()) {
    return;
  }
  unint64_t v39 = sub_10022175C((uint64_t)_swiftEmptyArrayStorage);
  if (*(unsigned char *)(v2 + qword_10032E718) != 9)
  {
    String.init<A>(describing:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10022C68C((uint64_t)v6, 0x6341657469766E69, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  char v8 = (uint64_t *)(v2 + qword_10032E728);
  swift_beginAccess();
  if ((unint64_t)*v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35 < 2) {
      goto LABEL_23;
    }
  }
  else if (*(uint64_t *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_23;
  }
  uint64_t v9 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v36 < 3) {
        goto LABEL_23;
      }
      goto LABEL_12;
    }
    id v10 = *(id *)(v9 + 40);
  }
  [v10 code];
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v3 = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0xD000000000000014, 0x800000010029C400, v12);
  swift_bridgeObjectRelease();
  swift_endAccess();
  unint64_t v4 = &off_10031D000;
  id v13 = [v10 domain];
  if (!v13)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v14 = (uint64_t)v13;
  swift_beginAccess();
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v38 = v39;
  sub_10022C68C(v14, 0xD000000000000016, 0x800000010029C420, v15);
  swift_bridgeObjectRelease();
  swift_endAccess();

  if ((unint64_t)*v8 >> 62) {
    goto LABEL_31;
  }
  if (*(uint64_t *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3) {
    goto LABEL_23;
  }
LABEL_12:
  uint64_t v16 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v37 < 4) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
    id v17 = *(id *)(v16 + 48);
  }
  [v17 code:v38];
  Class v18 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10022C68C((uint64_t)v18, 0xD000000000000014, 0x800000010029C440, v19);
  swift_bridgeObjectRelease();
  swift_endAccess();
  id v20 = [v17 v4[182]];
  if (!v20)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v21 = (uint64_t)v20;
  swift_beginAccess();
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v38 = v39;
  unint64_t v3 = 0xD000000000000014;
  sub_10022C68C(v21, 0xD000000000000016, 0x800000010029C460, v22);
  swift_bridgeObjectRelease();
  swift_endAccess();

  if ((unint64_t)*v8 >> 62) {
    goto LABEL_35;
  }
  if (*(uint64_t *)((*v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4)
  {
LABEL_18:
    uint64_t v23 = *v8;
    if ((*v8 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
LABEL_21:
      [v24 code:v38];
      Class v25 = Int._bridgeToObjectiveC()().super.super.isa;
      swift_beginAccess();
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      sub_10022C68C((uint64_t)v25, 0xD000000000000014, 0x800000010029C480, v26);
      swift_bridgeObjectRelease();
      swift_endAccess();
      id v27 = [v24 v4[182]];
      if (v27)
      {
        uint64_t v28 = (uint64_t)v27;
        swift_beginAccess();
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        sub_10022C68C(v28, v3 + 2, 0x800000010029C4A0, v29);
        swift_bridgeObjectRelease();
        swift_endAccess();

        goto LABEL_23;
      }
LABEL_41:
      __break(1u);
      return;
    }
    if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      id v24 = *(id *)(v23 + 56);
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_23:
  Class v30 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  sub_10022C68C((uint64_t)v30, 0x6C6552664F6D756ELL, 0xED00006E6F697461, v31);
  swift_bridgeObjectRelease();
  swift_endAccess();
  Class v32 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_10022C68C((uint64_t)v32, 0x6E6F6973726576, 0xE700000000000000, v33);
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (a2)
  {
    id v34 = a2;
    a2 = (void *)sub_10016B5B0();
  }
  swift_bridgeObjectRetain();
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

void sub_100254740()
{
}

uint64_t sub_100254770()
{
  return swift_bridgeObjectRelease();
}

id sub_100254780()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_1002547B8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002547C8()
{
  return type metadata accessor for CustodianInvitationActionAnalyticsEvent();
}

uint64_t getEnumTagSinglePayload for CustodianAnalyticsInviteAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CustodianAnalyticsInviteAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10025492CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianAnalyticsInviteAction()
{
  return &type metadata for CustodianAnalyticsInviteAction;
}

unint64_t sub_100254968()
{
  unint64_t result = qword_10032E780;
  if (!qword_10032E780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032E780);
  }
  return result;
}

uint64_t (*sub_1002549BC())()
{
  return j__swift_endAccess;
}

unint64_t sub_100254A18(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4438, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t *sub_100254A64(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  unint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      char v29 = (unint64_t *)&_swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_100228924(0, v7, 0);
      unint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_100009F04(&qword_100326D20);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_1002A9C00;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        unint64_t v18 = v17;
        char v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_100228924(v19 > 1, v20 + 1, 1);
          unint64_t v3 = v29;
        }
        v3[2] = v20 + 1;
        uint64_t v21 = &v3[2 * v20];
        v21[4] = v2;
        v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100254E08(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for SHA256();
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SHA256Digest();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  char v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10025B1C8((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v21 = v10;
      if (a2 >> 32 < (int)a2) {
        __break(1u);
      }
      uint64_t v20 = 0;
      sub_100013140(a2, a3);
      sub_1002565D4((int)a2, a2 >> 32);
      sub_100013198(a2, a3);
      uint64_t v10 = v21;
      goto LABEL_9;
    case 2uLL:
      uint64_t v20 = 0;
      uint64_t v21 = v10;
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 24);
      sub_100013140(a2, a3);
      swift_retain();
      swift_retain();
      uint64_t v16 = v15;
      uint64_t v10 = v21;
      sub_1002565D4(v16, v14);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v24, 0, 14);
      goto LABEL_7;
    default:
      v24[0] = a2;
      LOWORD(v24[1]) = a3;
      BYTE2(v24[1]) = BYTE2(a3);
      BYTE3(v24[1]) = BYTE3(a3);
      BYTE4(v24[1]) = BYTE4(a3);
      BYTE5(v24[1]) = BYTE5(a3);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_8:
      sub_100013198(a2, a3);
LABEL_9:
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v5);
      uint64_t v25 = v9;
      uint64_t v26 = sub_10025B1C8(&qword_10032E838, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      unint64_t v17 = sub_10003584C(v24);
      (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v17, v13, v9);
      sub_100008EF8(v24, v25);
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      uint64_t v18 = v23;
      sub_100008EA8((uint64_t)v24);
      return v18;
  }
}

uint64_t sub_100255248(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10025B3D0(a1, a2, a3, a5, a6, a7);

  return swift_unknownObjectRelease();
}

void sub_10025528C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  char v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v35 - v15;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      unint64_t v38 = a3;
      uint64_t v21 = v20;
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v40 = (void *)v37;
      *(_DWORD *)uint64_t v21 = 136315394;
      sub_10025B1C8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v35 = v18;
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v22, v23, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      *(_WORD *)(v21 + 12) = 2112;
      swift_errorRetain();
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v39 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v36 = v24;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v18 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, v19, "   checkInheritanceKey failed for beneficiaryID %s    error: %@", (uint8_t *)v21, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v38;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      swift_errorRelease();
      swift_errorRelease();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v39 = 2109;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    Class v32 = v40;
    char v33 = (void *)_convertErrorToNSError(_:)();

    a3(v33);
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E778);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a2, v8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      __int16 v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      unint64_t v38 = a3;
      uint64_t v40 = (void *)v29;
      *(_DWORD *)__int16 v28 = 136315138;
      uint64_t v37 = a4;
      sub_10025B1C8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v30, v31, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "   checkInheritanceKey succeeded for beneficiaryID %s", v28, 0xCu);
      swift_arrayDestroy();
      a3 = v38;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v39 = 2101;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v34 = v40;
    char v33 = (void *)_convertErrorToNSError(_:)();

    a3(v33);
  }
}

void sub_10025592C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  if (!*(void *)(*a1 + 16)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_1001358B8(0x69636966656E6562, 0xEF64697555797261);
  if ((v17 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  swift_bridgeObjectRetain();
  uint64_t v72 = v19;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    if (*(void *)(v15 + 16) && (unint64_t v25 = sub_1001358B8(0x646F436D69616C63, 0xED00006873614865), (v26 & 1) != 0))
    {
      os_log_type_t v27 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v25);
      uint64_t v28 = v27[1];
      uint64_t v71 = *v27;
      uint64_t v73 = v28;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v71 = 0;
      uint64_t v73 = 0;
    }
    unint64_t v69 = a2;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v30 = sub_100007288(v29, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    uint64_t v75 = v30;
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    unint64_t v74 = v20;
    uint64_t v67 = v11;
    uint64_t v68 = v3;
    unint64_t v70 = v14;
    if (v33)
    {
      id v34 = (uint8_t *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)id v34 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v77 = sub_100135190(v72, v74, v76);
      unint64_t v20 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Beneficiary UUID: %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = v73;
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 136315138;
      v76[0] = v71;
      v76[1] = v73;
      swift_bridgeObjectRetain();
      sub_100009F04(&qword_100321678);
      uint64_t v39 = String.init<A>(describing:)();
      v76[0] = sub_100135190(v39, v40, &v77);
      uint64_t v35 = v73;
      unint64_t v20 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Claim code hash: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      if (*(void *)(v15 + 16) && (unint64_t v44 = sub_1001358B8(0x4B64657070617277, 0xEA00000000007965), (v45 & 1) != 0))
      {
        uint64_t v46 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v44);
        uint64_t v48 = *v46;
        unint64_t v47 = v46[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v48 = 0;
        unint64_t v47 = 0xE000000000000000;
      }
      uint64_t v77 = sub_100135190(v48, v47, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Wrapped Key: %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v20 = v74;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    NSString v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      Swift::String v51 = (uint8_t *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String v51 = 136315138;
      if (*(void *)(v15 + 16) && (unint64_t v52 = sub_1001358B8(0x4B64657070617277, 0xEE00687361487965), (v53 & 1) != 0))
      {
        uint64_t v54 = (uint64_t *)(*(void *)(v15 + 56) + 16 * v52);
        uint64_t v56 = *v54;
        unint64_t v55 = v54[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v56 = 0;
        unint64_t v55 = 0xE000000000000000;
      }
      uint64_t v77 = sub_100135190(v56, v55, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Wrapped Key Hash: %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v20 = v74;
      uint64_t v57 = v69;
      uint64_t v58 = (uint64_t)v70;
      if (!v35) {
        goto LABEL_37;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v57 = v69;
      uint64_t v58 = (uint64_t)v70;
      if (!v35)
      {
LABEL_37:
        swift_bridgeObjectRetain();
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          v76[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v77 = sub_100135190(v72, v20, v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Claim code is nil for uuid: %s", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        goto LABEL_41;
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v76[0] = *v57;
    *uint64_t v57 = 0x8000000000000000;
    uint64_t v60 = sub_1002563F8(v72, v20, v71, v35, v58, isUniquelyReferenced_nonNull_native);
    uint64_t v62 = v61;
    *uint64_t v57 = v76[0];
    swift_bridgeObjectRelease();
    sub_10025B210(v60, v62);
LABEL_41:
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v58, v10);
    return;
  }
  swift_bridgeObjectRelease();
  sub_1000833BC((uint64_t)v9);
LABEL_5:
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E778);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "💥 Failure to parse beneficiaryInfo.", v24, 2u);
    swift_slowDealloc();
  }
}

uint64_t type metadata accessor for BeneficiaryInfoVerifier()
{
  return self;
}

unsigned char *sub_100256380@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)sub_1002566B4(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)sub_100256778((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = (unsigned char *)sub_1002567F4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1002563F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = (void *)*v6;
  unint64_t v18 = sub_1001359C4(a5);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v22 = v17;
  uint64_t v23 = v16[3];
  if (v23 >= v21 && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v24 = *v7;
    if (v22)
    {
LABEL_8:
      unint64_t v25 = (uint64_t *)(v24[7] + 32 * v18);
      uint64_t result = *v25;
      uint64_t v27 = v32;
      *unint64_t v25 = a1;
      v25[1] = v27;
      uint64_t v28 = v34;
      _OWORD v25[2] = v33;
      v25[3] = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a6 & 1) == 0)
  {
    sub_10022E1FC();
    goto LABEL_7;
  }
  sub_10022BC3C(v21, a6 & 1);
  unint64_t v29 = sub_1001359C4(a5);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v29;
  uint64_t v24 = *v7;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a5, v11);
  sub_10022CBF0(v18, (uint64_t)v15, a1, v32, v33, v34, v24);
  return 0;
}

uint64_t sub_1002565D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_10025B1C8((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002566B4(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100256778(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1002567F4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_100256878(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E778);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = a1;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Claim code hash missing on idMS.... Checking if keys state on OT...", v15, 2u);
    a1 = v22;
    swift_slowDealloc();
  }

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v19 = (void *)(v18 + ((v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = a3;
  v19[1] = a4;
  aBlock[4] = sub_10025B128;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025ED44;
  aBlock[3] = &unk_100302C88;
  BOOL v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [a2 checkInheritanceKeyForBeneficiaryID:isa completion:v20];
  _Block_release(v20);
}

uint64_t sub_100256B34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(void), uint64_t a10, void *a11)
{
  uint64_t v132 = a6;
  uint64_t v126 = a5;
  uint64_t v127 = a2;
  uint64_t v121 = a3;
  uint64_t v115 = type metadata accessor for SHA256();
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v15);
  unint64_t v113 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v17 - 8);
  uint64_t v120 = v17;
  __chkstk_darwin(v17, v18);
  v118 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = a7;
  uint64_t v24[3] = a8;
  uint64_t v117 = a9;
  v24[4] = a9;
  v24[5] = a10;
  v24[6] = a11;
  unint64_t v25 = (void *)swift_allocObject();
  char v26 = v126;
  _OWORD v25[2] = a4;
  v25[3] = v26;
  uint64_t v27 = v132;
  void v25[4] = v132;
  v25[5] = sub_10025B2CC;
  uint64_t v122 = v25;
  v25[6] = v24;
  unint64_t v125 = sub_10025AFD8();
  uint64_t v130 = a1;
  sub_100018ABC(a1, (uint64_t)v23);
  uint64_t v131 = a7;
  swift_retain_n();
  id v28 = a8;
  uint64_t v129 = a10;
  swift_retain_n();
  id v29 = a11;
  id v30 = v28;
  id v31 = v29;
  id v32 = v30;
  id v128 = v31;
  uint64_t v124 = a4;
  swift_errorRetain();
  id v123 = v26;
  uint64_t v33 = v27;
  swift_retain();
  uint64_t v126 = v24;
  swift_retain();
  id v34 = sub_100018B7C((uint64_t)v23);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = sub_100007288(v35, (uint64_t)qword_10033E778);
  os_log_type_t v37 = v34;
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    id v116 = v32;
    uint64_t v41 = (uint8_t *)v40;
    os_log_type_t v42 = (void *)swift_slowAlloc();
    unint64_t v125 = v36;
    *(_DWORD *)uint64_t v41 = 138412290;
    v135[0] = (uint64_t)v37;
    uint64_t v43 = v37;
    uint64_t v33 = v132;
    uint64_t v44 = v129;
    uint64_t v36 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v42 = v37;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "BeneficiaryInfo: %@", v41, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v32 = v116;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v38 = v37;
    uint64_t v44 = v129;
  }

  uint64_t v45 = v127;
  if (*(void *)(v127 + 16) && (unint64_t v46 = sub_1001359C4(v130), (v47 & 1) != 0))
  {
    uint64_t v48 = v128;
    uint64_t v49 = v33;
    uint64_t v50 = *(void *)(v45 + 56) + 32 * v46;
    uint64_t v51 = *(void *)(v50 + 16);
    unint64_t v52 = *(void *)(v50 + 24);
    swift_bridgeObjectRetain();
    id v53 = [v37 accessKey];
    uint64_t v112 = v37;
    if (!v53
      || (uint64_t v54 = v53,
          id v55 = [v53 claimTokenString],
          v54,
          !v55))
    {
      uint64_t v82 = v49;
      swift_bridgeObjectRelease();
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Claim code hash was not found in local CK record.", v85, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v133 = 2102;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v86 = (void *)v135[0];
      uint64_t v87 = (void *)_convertErrorToNSError(_:)();

      uint64_t v88 = v131;
      swift_retain();
      id v89 = v32;
      swift_retain();
      id v90 = v48;
      uint64_t v91 = v123;
      sub_100025620(v87, v124, v123, v82, v88, v89, v117, v44, (uint64_t)v90);
      goto LABEL_26;
    }
    uint64_t v127 = v51;
    unint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;

    uint64_t v59 = sub_100211BA8(v56, v58);
    unint64_t v61 = v60;
    uint64_t v62 = (uint64_t)v113;
    SHA256.init()();
    uint64_t v63 = sub_100254E08(v62, v59, v61);
    unint64_t v125 = v36;
    uint64_t v64 = v63;
    unint64_t v66 = v65;
    sub_100013198(v59, v61);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v62, v115);
    v135[0] = (uint64_t)sub_100254A64(v64, v66);
    sub_100009F04((uint64_t *)&unk_100328450);
    sub_100098EA8();
    uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    sub_100013198(v64, v66);
    swift_bridgeObjectRetain_n();
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    id v116 = v32;
    uint64_t v130 = v67;
    if (v72)
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v133 = sub_100135190(v67, v69, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "localClaimCodeHash: %s", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v95 = v127;
      uint64_t v133 = sub_100135190(v127, v52, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "idMS ClaimCode Hash: %s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v128;
      uint64_t v96 = v129;
      id v32 = v116;
      uint64_t v97 = v130;
      uint64_t v98 = v131;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v48 = v128;
      uint64_t v96 = v129;
      id v32 = v116;
      uint64_t v97 = v130;
      uint64_t v98 = v131;
      uint64_t v95 = v127;
    }
    v135[0] = v97;
    v135[1] = v69;
    uint64_t v133 = v95;
    unint64_t v134 = v52;
    sub_100080C64();
    uint64_t v99 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.debug.getter();
    BOOL v102 = os_log_type_enabled(v100, v101);
    if (v99)
    {
      uint64_t v103 = v124;
      if (v102)
      {
        uint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v104 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "🌧️ Claim code does not match.", v104, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v133 = 2100;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v105 = (void *)v135[0];
      uint64_t v87 = (void *)_convertErrorToNSError(_:)();

      swift_retain();
      id v89 = v32;
      swift_retain();
      id v90 = v48;
      uint64_t v91 = v123;
      sub_100025620(v87, v103, v123, v132, v98, v89, v117, v96, (uint64_t)v90);
LABEL_26:
      swift_release();

      swift_release();
      swift_release();

      swift_errorRelease();
      swift_release();
      swift_release();

      goto LABEL_27;
    }
    uint64_t v107 = v124;
    if (v102)
    {
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "🌈 Claim code matches!", v108, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    id v109 = v32;
    swift_retain();
    id v110 = v48;
    unint64_t v111 = v123;
    sub_100025620(0, v107, v123, v132, v98, v109, v117, v96, (uint64_t)v110);
    swift_release();

    swift_release();
    swift_release();

    swift_errorRelease();
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Claim code hash was not found in idMS response.", v76, 2u);
      swift_slowDealloc();
    }

    uint64_t v78 = (uint64_t)v118;
    uint64_t v77 = v119;
    uint64_t v79 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v130, v120);
    uint64_t v80 = swift_allocObject();
    uint64_t v81 = v122;
    *(void *)(v80 + 16) = sub_10025AFD4;
    *(void *)(v80 + 24) = v81;
    swift_retain();
    sub_100256878(v78, v121, (uint64_t)sub_10025BF84, v80);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v79);
    swift_release();
    swift_errorRelease();
    swift_release();
    swift_release();

    uint64_t v48 = v128;
  }
LABEL_27:

  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1002578F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(void), uint64_t a10, void *a11)
{
  uint64_t v132 = a6;
  uint64_t v126 = a5;
  uint64_t v127 = a2;
  uint64_t v121 = a3;
  uint64_t v115 = type metadata accessor for SHA256();
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v15);
  unint64_t v113 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v119 = *(void *)(v17 - 8);
  uint64_t v120 = v17;
  __chkstk_darwin(v17, v18);
  v118 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = a7;
  uint64_t v24[3] = a8;
  uint64_t v117 = a9;
  v24[4] = a9;
  v24[5] = a10;
  v24[6] = a11;
  unint64_t v25 = (void *)swift_allocObject();
  char v26 = v126;
  _OWORD v25[2] = a4;
  v25[3] = v26;
  uint64_t v27 = v132;
  void v25[4] = v132;
  v25[5] = sub_10025B33C;
  uint64_t v122 = v25;
  v25[6] = v24;
  unint64_t v125 = sub_10025AFD8();
  uint64_t v130 = a1;
  sub_100018ABC(a1, (uint64_t)v23);
  uint64_t v131 = a7;
  swift_retain_n();
  id v28 = a8;
  uint64_t v129 = a10;
  swift_retain_n();
  id v29 = a11;
  id v30 = v28;
  id v31 = v29;
  id v32 = v30;
  id v128 = v31;
  uint64_t v124 = a4;
  swift_errorRetain();
  id v123 = v26;
  uint64_t v33 = v27;
  swift_retain();
  uint64_t v126 = v24;
  swift_retain();
  id v34 = sub_100018B7C((uint64_t)v23);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = sub_100007288(v35, (uint64_t)qword_10033E778);
  os_log_type_t v37 = v34;
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    id v116 = v32;
    uint64_t v41 = (uint8_t *)v40;
    os_log_type_t v42 = (void *)swift_slowAlloc();
    unint64_t v125 = v36;
    *(_DWORD *)uint64_t v41 = 138412290;
    v135[0] = (uint64_t)v37;
    uint64_t v43 = v37;
    uint64_t v33 = v132;
    uint64_t v44 = v129;
    uint64_t v36 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v42 = v37;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "BeneficiaryInfo: %@", v41, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v32 = v116;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v38 = v37;
    uint64_t v44 = v129;
  }

  uint64_t v45 = v127;
  if (*(void *)(v127 + 16) && (unint64_t v46 = sub_1001359C4(v130), (v47 & 1) != 0))
  {
    uint64_t v48 = v128;
    uint64_t v49 = v33;
    uint64_t v50 = *(void *)(v45 + 56) + 32 * v46;
    uint64_t v51 = *(void *)(v50 + 16);
    unint64_t v52 = *(void *)(v50 + 24);
    swift_bridgeObjectRetain();
    id v53 = [v37 accessKey];
    uint64_t v112 = v37;
    if (!v53
      || (uint64_t v54 = v53,
          id v55 = [v53 claimTokenString],
          v54,
          !v55))
    {
      uint64_t v82 = v49;
      swift_bridgeObjectRelease();
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Claim code hash was not found in local CK record.", v85, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v133 = 2102;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v86 = (void *)v135[0];
      uint64_t v87 = (void *)_convertErrorToNSError(_:)();

      uint64_t v88 = v131;
      swift_retain();
      id v89 = v32;
      swift_retain();
      id v90 = v48;
      uint64_t v91 = v123;
      sub_100025650(v87, v124, v123, v82, v88, v89, v117, v44, (uint64_t)v90);
      goto LABEL_26;
    }
    uint64_t v127 = v51;
    unint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v58 = v57;

    uint64_t v59 = sub_100211BA8(v56, v58);
    unint64_t v61 = v60;
    uint64_t v62 = (uint64_t)v113;
    SHA256.init()();
    uint64_t v63 = sub_100254E08(v62, v59, v61);
    unint64_t v125 = v36;
    uint64_t v64 = v63;
    unint64_t v66 = v65;
    sub_100013198(v59, v61);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v62, v115);
    v135[0] = (uint64_t)sub_100254A64(v64, v66);
    sub_100009F04((uint64_t *)&unk_100328450);
    sub_100098EA8();
    uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    sub_100013198(v64, v66);
    swift_bridgeObjectRetain_n();
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    id v116 = v32;
    uint64_t v130 = v67;
    if (v72)
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v133 = sub_100135190(v67, v69, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "localClaimCodeHash: %s", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc();
      v135[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v95 = v127;
      uint64_t v133 = sub_100135190(v127, v52, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "idMS ClaimCode Hash: %s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v48 = v128;
      uint64_t v96 = v129;
      id v32 = v116;
      uint64_t v97 = v130;
      uint64_t v98 = v131;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v48 = v128;
      uint64_t v96 = v129;
      id v32 = v116;
      uint64_t v97 = v130;
      uint64_t v98 = v131;
      uint64_t v95 = v127;
    }
    v135[0] = v97;
    v135[1] = v69;
    uint64_t v133 = v95;
    unint64_t v134 = v52;
    sub_100080C64();
    uint64_t v99 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.debug.getter();
    BOOL v102 = os_log_type_enabled(v100, v101);
    if (v99)
    {
      uint64_t v103 = v124;
      if (v102)
      {
        uint64_t v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v104 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "🌧️ Claim code does not match.", v104, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v133 = 2100;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v105 = (void *)v135[0];
      uint64_t v87 = (void *)_convertErrorToNSError(_:)();

      swift_retain();
      id v89 = v32;
      swift_retain();
      id v90 = v48;
      uint64_t v91 = v123;
      sub_100025650(v87, v103, v123, v132, v98, v89, v117, v96, (uint64_t)v90);
LABEL_26:
      swift_release();

      swift_release();
      swift_release();

      swift_errorRelease();
      swift_release();
      swift_release();

      goto LABEL_27;
    }
    uint64_t v107 = v124;
    if (v102)
    {
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "🌈 Claim code matches!", v108, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    id v109 = v32;
    swift_retain();
    id v110 = v48;
    unint64_t v111 = v123;
    sub_100025650(0, v107, v123, v132, v98, v109, v117, v96, (uint64_t)v110);
    swift_release();

    swift_release();
    swift_release();

    swift_errorRelease();
    swift_release();
    swift_release();
  }
  else
  {
    unint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Claim code hash was not found in idMS response.", v76, 2u);
      swift_slowDealloc();
    }

    uint64_t v78 = (uint64_t)v118;
    uint64_t v77 = v119;
    uint64_t v79 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v130, v120);
    uint64_t v80 = swift_allocObject();
    uint64_t v81 = v122;
    *(void *)(v80 + 16) = sub_10025AFD4;
    *(void *)(v80 + 24) = v81;
    swift_retain();
    sub_100256878(v78, v121, (uint64_t)sub_10025BF84, v80);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v79);
    swift_release();
    swift_errorRelease();
    swift_release();
    swift_release();

    uint64_t v48 = v128;
  }
LABEL_27:

  swift_release_n();
  return swift_release_n();
}

uint64_t sub_1002586AC(uint64_t a1, uint64_t a2, NSObject *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(void), uint64_t a10, uint64_t a11)
{
  uint64_t v131 = (void *)a5;
  uint64_t v132 = a2;
  unint64_t v125 = a3;
  uint64_t v16 = a11;
  uint64_t v117 = type metadata accessor for SHA256();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117, v17);
  uint64_t v115 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v123 = *(void *)(v19 - 8);
  uint64_t v124 = v19;
  __chkstk_darwin(v19, v20);
  uint64_t v122 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v22 - 8, v23);
  unint64_t v25 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = (void *)swift_allocObject();
  _OWORD v26[2] = a7;
  v26[3] = a8;
  uint64_t v120 = a9;
  v26[4] = a9;
  v26[5] = a10;
  v26[6] = a11;
  uint64_t v27 = (void *)swift_allocObject();
  id v28 = v131;
  v27[2] = a4;
  v27[3] = v28;
  v27[4] = a6;
  v27[5] = sub_10025B2A4;
  uint64_t v126 = v27;
  v27[6] = v26;
  unint64_t v130 = sub_10025AFD8();
  uint64_t v134 = a1;
  uint64_t v29 = a1;
  uint64_t v30 = a7;
  sub_100018ABC(v29, (uint64_t)v25);
  swift_retain();
  id v31 = a8;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  id v32 = v31;
  swift_retain();
  swift_errorRetain();
  swift_retain();
  id v128 = v32;
  uint64_t v133 = a10;
  swift_retain();
  swift_errorRetain();
  swift_errorRetain();
  id v127 = v28;
  uint64_t v131 = (void *)a6;
  swift_retain();
  uint64_t v129 = v26;
  swift_retain();
  id v33 = sub_100018B7C((uint64_t)v25);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = sub_100007288(v34, (uint64_t)qword_10033E778);
  uint64_t v36 = v33;
  os_log_type_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v121 = v35;
    uint64_t v39 = swift_slowAlloc();
    uint64_t v118 = a11;
    uint64_t v119 = v30;
    uint64_t v40 = (uint8_t *)v39;
    uint64_t v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 138412290;
    v137[0] = (uint64_t)v36;
    os_log_type_t v42 = v36;
    unint64_t v130 = a4;
    uint64_t v43 = v42;
    uint64_t v35 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v41 = v36;

    a4 = v130;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "BeneficiaryInfo: %@", v40, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v30 = v119;
    uint64_t v16 = v118;
    swift_slowDealloc();
  }
  else
  {

    os_log_type_t v37 = v36;
  }

  uint64_t v44 = v132;
  if (*(void *)(v132 + 16) && (unint64_t v45 = sub_1001359C4(v134), (v46 & 1) != 0))
  {
    unint64_t v130 = a4;
    uint64_t v47 = *(void *)(v44 + 56) + 32 * v45;
    uint64_t v48 = *(void *)(v47 + 16);
    unint64_t v49 = *(void *)(v47 + 24);
    swift_bridgeObjectRetain();
    id v50 = [v36 accessKey];
    if (v50
      && (uint64_t v51 = v50,
          id v52 = [v50 claimTokenString],
          v51,
          v52))
    {
      uint64_t v132 = v48;
      unint64_t v125 = v36;
      uint64_t v118 = v16;
      unint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v55 = v54;

      uint64_t v56 = sub_100211BA8(v53, v55);
      unint64_t v58 = v57;
      uint64_t v59 = (uint64_t)v115;
      SHA256.init()();
      uint64_t v60 = sub_100254E08(v59, v56, v58);
      uint64_t v121 = v35;
      unint64_t v62 = v61;
      sub_100013198(v56, v58);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v59, v117);
      v137[0] = (uint64_t)sub_100254A64(v60, v62);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v63 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v65 = v64;
      swift_bridgeObjectRelease();
      sub_100013198(v60, v62);
      swift_bridgeObjectRetain_n();
      unint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      BOOL v68 = os_log_type_enabled(v66, v67);
      uint64_t v119 = v30;
      uint64_t v134 = v63;
      if (v68)
      {
        unint64_t v69 = (uint8_t *)swift_slowAlloc();
        v137[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v69 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_100135190(v63, v65, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "localClaimCodeHash: %s", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRetain_n();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v87, v88))
      {
        id v89 = (uint8_t *)swift_slowAlloc();
        v137[0] = swift_slowAlloc();
        *(_DWORD *)id v89 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v90 = v132;
        uint64_t v135 = sub_100135190(v132, v49, v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "idMS ClaimCode Hash: %s", v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v91 = v119;
        uint64_t v92 = v134;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v91 = v119;
        uint64_t v92 = v134;
        uint64_t v90 = v132;
      }
      v137[0] = v92;
      v137[1] = v65;
      uint64_t v135 = v90;
      unint64_t v136 = v49;
      sub_100080C64();
      uint64_t v93 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.debug.getter();
      BOOL v96 = os_log_type_enabled(v94, v95);
      if (v93)
      {
        uint64_t v97 = v118;
        uint64_t v99 = v130;
        uint64_t v98 = (uint64_t)v131;
        id v78 = v128;
        if (v96)
        {
          uint64_t v100 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v100 = 0;
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "🌧️ Claim code does not match.", v100, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for InheritanceError(0);
        uint64_t v135 = 2100;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        os_log_type_t v101 = (void *)v137[0];
        BOOL v102 = (void *)_convertErrorToNSError(_:)();

        swift_retain();
        id v103 = v78;
        uint64_t v104 = v133;
        swift_retain();
        swift_errorRetain();
        uint64_t v105 = v127;
        sub_1000265A0(v102, v99, v127, v98, v91, v103, v120, v104, v97);
        swift_errorRelease();
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v106 = v118;
        uint64_t v108 = v130;
        uint64_t v107 = (uint64_t)v131;
        id v78 = v128;
        if (v96)
        {
          id v109 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v109 = 0;
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "🌈 Claim code matches!", v109, 2u);
          swift_slowDealloc();
        }

        swift_retain();
        id v110 = v78;
        uint64_t v111 = v133;
        swift_retain();
        swift_errorRetain();
        uint64_t v112 = v127;
        sub_1000265A0(0, v108, v127, v107, v91, v110, v120, v111, v106);
        swift_errorRelease();
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Claim code hash was not found in local CK record.", v81, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v135 = 2102;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v82 = (void *)v137[0];
      uint64_t v83 = (void *)_convertErrorToNSError(_:)();

      swift_retain();
      id v78 = v128;
      id v84 = v128;
      uint64_t v85 = v133;
      swift_retain();
      swift_errorRetain();
      unint64_t v86 = v127;
      sub_1000265A0(v83, v130, v127, (uint64_t)v131, v30, v84, v120, v85, v16);
      swift_errorRelease();
      swift_release();

      swift_release();
      swift_release();
      swift_errorRelease();
      swift_release();
      swift_release();
    }
  }
  else
  {
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      BOOL v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Claim code hash was not found in idMS response.", v72, 2u);
      swift_slowDealloc();
    }

    uint64_t v74 = (uint64_t)v122;
    uint64_t v73 = v123;
    uint64_t v75 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v134, v124);
    uint64_t v76 = swift_allocObject();
    uint64_t v77 = v126;
    *(void *)(v76 + 16) = sub_10025AFD4;
    *(void *)(v76 + 24) = v77;
    swift_retain();
    sub_100256878(v74, v125, (uint64_t)sub_10025BF84, v76);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v75);
    swift_release();
    swift_errorRelease();
    swift_release();
    swift_release();

    id v78 = v128;
  }
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_release();

  swift_release();
  return swift_errorRelease();
}

uint64_t sub_1002594F0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v115 = a3;
  uint64_t v122 = a2;
  uint64_t v16 = a10;
  uint64_t v109 = type metadata accessor for SHA256();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v17);
  uint64_t v107 = (char *)v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  Class isa = v19[-1].isa;
  uint64_t v114 = v19;
  __chkstk_darwin(v19, v20);
  uint64_t v112 = (char *)v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v22 - 8, v23);
  unint64_t v25 = (char *)v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = (void *)swift_allocObject();
  _OWORD v26[2] = a7;
  v26[3] = a8;
  uint64_t v111 = a9;
  v26[4] = a9;
  v26[5] = a10;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = sub_10025AFC4;
  uint64_t v116 = v27;
  v27[6] = v26;
  sub_10025AFD8();
  id v123 = a1;
  sub_100018ABC((uint64_t)a1, (uint64_t)v25);
  uint64_t v120 = a7;
  swift_retain_n();
  id v28 = a8;
  swift_retain_n();
  id v29 = v28;
  uint64_t v121 = a4;
  swift_errorRetain();
  id v117 = a5;
  uint64_t v119 = a6;
  swift_retain();
  uint64_t v118 = v26;
  swift_retain();
  id v30 = sub_100018B7C((uint64_t)v25);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100007288(v31, (uint64_t)qword_10033E778);
  id v33 = v30;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v110 = a10;
    os_log_type_t v37 = (uint8_t *)v36;
    os_log_type_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v37 = 138412290;
    v106[1] = v37 + 4;
    v126[0] = (uint64_t)v33;
    uint64_t v39 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v38 = v33;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "BeneficiaryInfo: %@", v37, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v110;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v34 = v33;
  }
  uint64_t v40 = v122;

  if (*(void *)(v40 + 16))
  {
    unint64_t v41 = sub_1001359C4((uint64_t)v123);
    if (v42)
    {
      id v123 = v29;
      uint64_t v43 = *(void *)(v40 + 56) + 32 * v41;
      unint64_t v45 = *(void **)(v43 + 16);
      unint64_t v44 = *(void *)(v43 + 24);
      swift_bridgeObjectRetain();
      id v46 = [v33 accessKey];
      if (v46
        && (uint64_t v47 = v46,
            id v48 = [v46 claimTokenString],
            v47,
            v48))
      {
        uint64_t v114 = v33;
        uint64_t v115 = v45;
        uint64_t v49 = v32;
        unint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v52 = v51;

        uint64_t v53 = sub_100211BA8(v50, v52);
        unint64_t v55 = v54;
        uint64_t v56 = (uint64_t)v107;
        SHA256.init()();
        uint64_t v57 = sub_100254E08(v56, v53, v55);
        unint64_t v59 = v58;
        sub_100013198(v53, v55);
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v56, v109);
        v126[0] = (uint64_t)sub_100254A64(v57, v59);
        sub_100009F04((uint64_t *)&unk_100328450);
        sub_100098EA8();
        uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v62 = v61;
        swift_bridgeObjectRelease();
        sub_100013198(v57, v59);
        swift_bridgeObjectRetain_n();
        uint64_t v122 = v49;
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.debug.getter();
        BOOL v65 = os_log_type_enabled(v63, v64);
        uint64_t v110 = v16;
        if (v65)
        {
          unint64_t v66 = (uint8_t *)swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v66 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v124 = sub_100135190(v60, v62, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "localClaimCodeHash: %s", v66, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        unint64_t v84 = v44;
        swift_bridgeObjectRetain_n();
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v88 = (uint64_t)v115;
          uint64_t v124 = sub_100135190((uint64_t)v115, v44, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "idMS ClaimCode Hash: %s", v87, 0xCu);
          swift_arrayDestroy();
          unint64_t v84 = v44;
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v89 = v119;
          uint64_t v90 = v120;
          uint64_t v91 = v110;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v89 = v119;
          uint64_t v90 = v120;
          uint64_t v91 = v110;
          uint64_t v88 = (uint64_t)v115;
        }
        v126[0] = v60;
        v126[1] = v62;
        uint64_t v124 = v88;
        unint64_t v125 = v84;
        sub_100080C64();
        uint64_t v92 = StringProtocol.caseInsensitiveCompare<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        BOOL v95 = os_log_type_enabled(v93, v94);
        uint64_t v96 = v121;
        uint64_t v97 = v90;
        if (v92)
        {
          if (v95)
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "🌧️ Claim code does not match.", v98, 2u);
            swift_slowDealloc();
          }

          type metadata accessor for InheritanceError(0);
          uint64_t v124 = 2100;
          sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
          sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v99 = (void *)v126[0];
          uint64_t v100 = (void *)_convertErrorToNSError(_:)();

          swift_retain();
          id v29 = v123;
          id v101 = v123;
          swift_retain();
          id v102 = v117;
          sub_100026D44(v100, v96, v117, v89, v97, v101, v111, v91);
          swift_release();

          swift_release();
          swift_release();
          swift_errorRelease();
          swift_release();
          swift_release();

          goto LABEL_27;
        }
        if (v95)
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v104 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "🌈 Claim code matches!", v104, 2u);
          swift_slowDealloc();
        }

        swift_retain();
        id v29 = v123;
        id v105 = v123;
        swift_retain();
        id v83 = v117;
        sub_100026D44(0, v96, v117, v89, v97, v105, v111, v91);
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = v120;
        if (v77)
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Claim code hash was not found in local CK record.", v79, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for InheritanceError(0);
        uint64_t v124 = 2102;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        os_log_type_t v80 = (void *)v126[0];
        uint64_t v81 = (void *)_convertErrorToNSError(_:)();

        swift_retain();
        id v29 = v123;
        id v82 = v123;
        swift_retain();
        id v83 = v117;
        sub_100026D44(v81, v121, v117, v119, v78, v82, v111, v16);
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
      }
      swift_release();

      goto LABEL_27;
    }
  }
  os_log_type_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    unint64_t v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v69 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Claim code hash was not found in idMS response.", v69, 2u);
    swift_slowDealloc();
  }

  uint64_t v71 = (uint64_t)v112;
  Class v70 = isa;
  BOOL v72 = v114;
  (*((void (**)(char *, id, NSObject *))isa + 2))(v112, v123, v114);
  uint64_t v73 = swift_allocObject();
  uint64_t v74 = v116;
  *(void *)(v73 + 16) = sub_10025AFD4;
  *(void *)(v73 + 24) = v74;
  swift_retain();
  sub_100256878(v71, v115, (uint64_t)sub_10025BF84, v73);

  swift_release();
  (*((void (**)(uint64_t, NSObject *))v70 + 1))(v71, v72);
  swift_release();
  swift_errorRelease();
  swift_release();
  swift_release();

LABEL_27:
  swift_release_n();

  return swift_release_n();
}

uint64_t sub_10025A258(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v115 = a3;
  uint64_t v122 = a2;
  uint64_t v16 = a10;
  uint64_t v109 = type metadata accessor for SHA256();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v17);
  uint64_t v107 = (char *)v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  Class isa = v19[-1].isa;
  uint64_t v114 = v19;
  __chkstk_darwin(v19, v20);
  uint64_t v112 = (char *)v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v22 - 8, v23);
  unint64_t v25 = (char *)v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = (void *)swift_allocObject();
  _OWORD v26[2] = a7;
  v26[3] = a8;
  uint64_t v111 = a9;
  v26[4] = a9;
  v26[5] = a10;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = sub_10025AFC4;
  uint64_t v116 = v27;
  v27[6] = v26;
  sub_10025AFD8();
  id v123 = a1;
  sub_100018ABC((uint64_t)a1, (uint64_t)v25);
  uint64_t v120 = a7;
  swift_retain_n();
  id v28 = a8;
  swift_retain_n();
  id v29 = v28;
  uint64_t v121 = a4;
  swift_errorRetain();
  id v117 = a5;
  uint64_t v119 = a6;
  swift_retain();
  uint64_t v118 = v26;
  swift_retain();
  id v30 = sub_100018B7C((uint64_t)v25);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100007288(v31, (uint64_t)qword_10033E778);
  id v33 = v30;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v110 = a10;
    os_log_type_t v37 = (uint8_t *)v36;
    os_log_type_t v38 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v37 = 138412290;
    v106[1] = v37 + 4;
    v126[0] = (uint64_t)v33;
    uint64_t v39 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v38 = v33;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "BeneficiaryInfo: %@", v37, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v16 = v110;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v34 = v33;
  }
  uint64_t v40 = v122;

  if (*(void *)(v40 + 16))
  {
    unint64_t v41 = sub_1001359C4((uint64_t)v123);
    if (v42)
    {
      id v123 = v29;
      uint64_t v43 = *(void *)(v40 + 56) + 32 * v41;
      unint64_t v45 = *(void **)(v43 + 16);
      unint64_t v44 = *(void *)(v43 + 24);
      swift_bridgeObjectRetain();
      id v46 = [v33 accessKey];
      if (v46
        && (uint64_t v47 = v46,
            id v48 = [v46 claimTokenString],
            v47,
            v48))
      {
        uint64_t v114 = v33;
        uint64_t v115 = v45;
        uint64_t v49 = v32;
        unint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v52 = v51;

        uint64_t v53 = sub_100211BA8(v50, v52);
        unint64_t v55 = v54;
        uint64_t v56 = (uint64_t)v107;
        SHA256.init()();
        uint64_t v57 = sub_100254E08(v56, v53, v55);
        unint64_t v59 = v58;
        sub_100013198(v53, v55);
        (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v56, v109);
        v126[0] = (uint64_t)sub_100254A64(v57, v59);
        sub_100009F04((uint64_t *)&unk_100328450);
        sub_100098EA8();
        uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v62 = v61;
        swift_bridgeObjectRelease();
        sub_100013198(v57, v59);
        swift_bridgeObjectRetain_n();
        uint64_t v122 = v49;
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.debug.getter();
        BOOL v65 = os_log_type_enabled(v63, v64);
        uint64_t v110 = v16;
        if (v65)
        {
          unint64_t v66 = (uint8_t *)swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v66 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v124 = sub_100135190(v60, v62, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "localClaimCodeHash: %s", v66, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        unint64_t v84 = v44;
        swift_bridgeObjectRetain_n();
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v88 = (uint64_t)v115;
          uint64_t v124 = sub_100135190((uint64_t)v115, v44, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "idMS ClaimCode Hash: %s", v87, 0xCu);
          swift_arrayDestroy();
          unint64_t v84 = v44;
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v89 = v119;
          uint64_t v90 = v120;
          uint64_t v91 = v110;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v89 = v119;
          uint64_t v90 = v120;
          uint64_t v91 = v110;
          uint64_t v88 = (uint64_t)v115;
        }
        v126[0] = v60;
        v126[1] = v62;
        uint64_t v124 = v88;
        unint64_t v125 = v84;
        sub_100080C64();
        uint64_t v92 = StringProtocol.caseInsensitiveCompare<A>(_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        BOOL v95 = os_log_type_enabled(v93, v94);
        uint64_t v96 = v121;
        uint64_t v97 = v90;
        if (v92)
        {
          if (v95)
          {
            uint64_t v98 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v98 = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "🌧️ Claim code does not match.", v98, 2u);
            swift_slowDealloc();
          }

          type metadata accessor for InheritanceError(0);
          uint64_t v124 = 2100;
          sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
          sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v99 = (void *)v126[0];
          uint64_t v100 = (void *)_convertErrorToNSError(_:)();

          swift_retain();
          id v29 = v123;
          id v101 = v123;
          swift_retain();
          id v102 = v117;
          sub_100026D44(v100, v96, v117, v89, v97, v101, v111, v91);
          swift_release();

          swift_release();
          swift_release();
          swift_errorRelease();
          swift_release();
          swift_release();

          goto LABEL_27;
        }
        if (v95)
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v104 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "🌈 Claim code matches!", v104, 2u);
          swift_slowDealloc();
        }

        swift_retain();
        id v29 = v123;
        id v105 = v123;
        swift_retain();
        id v83 = v117;
        sub_100026D44(0, v96, v117, v89, v97, v105, v111, v91);
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        BOOL v77 = os_log_type_enabled(v75, v76);
        uint64_t v78 = v120;
        if (v77)
        {
          uint64_t v79 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Claim code hash was not found in local CK record.", v79, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for InheritanceError(0);
        uint64_t v124 = 2102;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        os_log_type_t v80 = (void *)v126[0];
        uint64_t v81 = (void *)_convertErrorToNSError(_:)();

        swift_retain();
        id v29 = v123;
        id v82 = v123;
        swift_retain();
        id v83 = v117;
        sub_100026D44(v81, v121, v117, v119, v78, v82, v111, v16);
        swift_release();

        swift_release();
        swift_release();
        swift_errorRelease();
        swift_release();
      }
      swift_release();

      goto LABEL_27;
    }
  }
  os_log_type_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    unint64_t v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v69 = 0;
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Claim code hash was not found in idMS response.", v69, 2u);
    swift_slowDealloc();
  }

  uint64_t v71 = (uint64_t)v112;
  Class v70 = isa;
  BOOL v72 = v114;
  (*((void (**)(char *, id, NSObject *))isa + 2))(v112, v123, v114);
  uint64_t v73 = swift_allocObject();
  uint64_t v74 = v116;
  *(void *)(v73 + 16) = sub_10025AFD4;
  *(void *)(v73 + 24) = v74;
  swift_retain();
  sub_100256878(v71, v115, (uint64_t)sub_10025B050, v73);

  swift_release();
  (*((void (**)(uint64_t, NSObject *))v70 + 1))(v71, v72);
  swift_release();
  swift_errorRelease();
  swift_release();
  swift_release();

LABEL_27:
  swift_release_n();

  return swift_release_n();
}

uint64_t sub_10025AFC4()
{
  return sub_100020C90(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_10025AFD8()
{
  unint64_t result = qword_100325990;
  if (!qword_100325990)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100325990);
  }
  return result;
}

uint64_t sub_10025B018()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10025B050(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(0, a1);
}

uint64_t sub_10025B080()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10025B128(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  sub_10025528C(a1, v5, v7, v8);
}

uint64_t sub_10025B1C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10025B210(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10025B254()
{
  swift_release();

  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10025B2A4()
{
  return sub_10025B354((uint64_t (*)(void, void, void, void, void))sub_10001FF08);
}

uint64_t sub_10025B2CC()
{
  return sub_10025B354((uint64_t (*)(void, void, void, void, void))sub_10001F28C);
}

uint64_t sub_10025B2EC()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10025B33C()
{
  return sub_10025B354((uint64_t (*)(void, void, void, void, void))sub_10001F280);
}

uint64_t sub_10025B354(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10025B370()
{
  swift_errorRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10025B3C0(uint64_t a1, void *a2)
{
  return sub_100021F98(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(uint64_t (**)(void))(v2 + 40));
}

void sub_10025B3D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a3;
  uint64_t v11 = type metadata accessor for SHA256();
  uint64_t v86 = *(void *)(v11 - 8);
  uint64_t v87 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v85 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v92 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v91 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = a4;
  v21[3] = a5;
  v21[4] = a6;
  sub_10025AFD8();
  sub_100018ABC(a1, (uint64_t)v20);
  swift_unknownObjectRetain();
  id v22 = sub_100018B7C((uint64_t)v20);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100007288(v23, (uint64_t)qword_10033E778);
  unint64_t v25 = v22;
  char v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v89 = v21;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v84 = a1;
    id v29 = (uint8_t *)v28;
    id v82 = (void *)swift_slowAlloc();
    uint64_t v90 = v24;
    id v83 = v29;
    *(_DWORD *)id v29 = 138412290;
    uint64_t v88 = a4;
    v96[0] = (uint64_t)v25;
    id v30 = v25;
    a4 = v88;
    uint64_t v24 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v82 = v25;

    uint64_t v21 = v89;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "BeneficiaryInfo: %@", v83, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v84;
    swift_slowDealloc();
  }
  else
  {

    char v26 = v25;
  }

  if (*(void *)(a2 + 16) && (unint64_t v31 = sub_1001359C4(a1), (v32 & 1) != 0))
  {
    uint64_t v33 = *(void *)(a2 + 56) + 32 * v31;
    uint64_t v34 = *(void **)(v33 + 16);
    unint64_t v35 = *(void *)(v33 + 24);
    swift_bridgeObjectRetain();
    id v36 = [v25 accessKey];
    if (v36
      && (os_log_type_t v37 = v36,
          id v38 = [v36 claimTokenString],
          v37,
          v38))
    {
      uint64_t v93 = v34;
      uint64_t v91 = (char *)v25;
      uint64_t v88 = a4;
      uint64_t v89 = v21;
      unint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v41 = v40;

      uint64_t v42 = sub_100211BA8(v39, v41);
      unint64_t v44 = v43;
      uint64_t v45 = (uint64_t)v85;
      SHA256.init()();
      uint64_t v46 = sub_100254E08(v45, v42, v44);
      unint64_t v48 = v47;
      sub_100013198(v42, v44);
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v45, v87);
      v96[0] = (uint64_t)sub_100254A64(v46, v48);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v49 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      sub_100013198(v46, v48);
      swift_bridgeObjectRetain_n();
      uint64_t v90 = v24;
      unint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v81 = a5;
      uint64_t v92 = v49;
      if (v54)
      {
        unint64_t v55 = (uint8_t *)swift_slowAlloc();
        v96[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v55 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v94 = sub_100135190(v49, v51, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "localClaimCodeHash: %s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRetain_n();
      os_log_type_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        unint64_t v69 = (uint8_t *)swift_slowAlloc();
        v96[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v69 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v70 = (uint64_t)v93;
        uint64_t v94 = sub_100135190((uint64_t)v93, v35, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "idMS ClaimCode Hash: %s", v69, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v70 = (uint64_t)v93;
      }
      v96[0] = v92;
      v96[1] = v51;
      uint64_t v94 = v70;
      unint64_t v95 = v35;
      sub_100080C64();
      uint64_t v71 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      BOOL v74 = os_log_type_enabled(v72, v73);
      if (v71)
      {
        uint64_t v75 = v88;
        if (v74)
        {
          os_log_type_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v76 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "🌧️ Claim code does not match.", v76, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for InheritanceError(0);
        uint64_t v94 = 2100;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        BOOL v77 = (void *)v96[0];
        uint64_t v78 = (void *)_convertErrorToNSError(_:)();

        sub_100103150(0, v78, v75);
        swift_release();
      }
      else
      {
        uint64_t v79 = v88;
        if (v74)
        {
          os_log_type_t v80 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v80 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "🌈 Claim code matches!", v80, 2u);
          swift_slowDealloc();
        }

        sub_100103150(1, 0, v79);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Claim code hash was not found in local CK record.", v64, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for InheritanceError(0);
      uint64_t v94 = 2102;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10025B1C8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      BOOL v65 = (void *)v96[0];
      unint64_t v66 = (void *)_convertErrorToNSError(_:)();

      sub_100103150(0, v66, a4);
      swift_release();
    }
  }
  else
  {
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Claim code hash was not found in idMS response.", v58, 2u);
      swift_slowDealloc();
    }

    uint64_t v60 = v91;
    uint64_t v59 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, a1, v14);
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = sub_10025BF64;
    *(void *)(v61 + 24) = v21;
    swift_retain();
    sub_100256878((uint64_t)v60, v93, (uint64_t)sub_10025BF84, v61);

    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v14);
    swift_release();
  }
}

uint64_t sub_10025BF2C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10025BF64(uint64_t a1, uint64_t a2)
{
  return sub_1000F7200(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10025BF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>), uint64_t a5)
{
  uint64_t v115 = a4;
  uint64_t v116 = a5;
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v107 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v106 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  uint64_t v101 = *(void *)(updated - 8);
  uint64_t v12 = *(void *)(v101 + 64);
  uint64_t v14 = __chkstk_darwin(updated, v13);
  id v103 = (uint64_t (*)())((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v97 - v17;
  uint64_t v20 = __chkstk_darwin(v16, v19);
  id v22 = (char *)&v97 - v21;
  __chkstk_darwin(v20, v23);
  unint64_t v25 = (char *)&v97 - v24;
  uint64_t v108 = type metadata accessor for CustodianRecord();
  id v102 = *(void **)(v108 - 8);
  uint64_t v26 = v102[8];
  uint64_t v28 = __chkstk_darwin(v108, v27);
  uint64_t v105 = (uint64_t)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28, v29);
  uint64_t v109 = (uint64_t)&v97 - v31;
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v104 = (uint64_t)&v97 - v34;
  __chkstk_darwin(v33, v35);
  os_log_type_t v37 = (char *)&v97 - v36;
  uint64_t v38 = sub_100009F04(&qword_10032E140);
  uint64_t v40 = __chkstk_darwin(v38, v39);
  uint64_t v42 = (uint64_t *)((char *)&v97 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v40, v43);
  uint64_t v45 = (uint64_t *)((char *)&v97 - v44);
  sub_1002081A0(a1, (uint64_t)&v97 - v44);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v46 = *v45;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100007288(v47, (uint64_t)qword_10033E748);
    swift_errorRetain();
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      unint64_t v51 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v50 = 138412290;
      uint64_t v52 = _convertErrorToNSError(_:)();
      v117[0] = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v51 = v52;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error fetching custodianship %@", v50, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    *uint64_t v42 = v46;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    ((void (*)(void *))v115)(v42);
    swift_errorRelease();
    return sub_100208208((uint64_t)v42);
  }
  else
  {
    uint64_t v110 = v37;
    sub_10025DB64((uint64_t)v45, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100007288(v53, (uint64_t)qword_10033E748);
    sub_10025DC4C(v113, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    BOOL v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.info.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v112 = v18;
    if (v56)
    {
      os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v57 = 134217984;
      uint64_t v58 = *(void *)&v25[*(int *)(updated + 20)];
      sub_10025E29C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
      v117[0] = v58;
      uint64_t v18 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Custodian successfully fetched!. Updating status as %ld", v57, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_10025E29C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    }

    uint64_t v60 = v113;
    sub_10025DC4C(v113, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    sub_10025DC4C((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    unint64_t v61 = (*(unsigned __int8 *)(v101 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
    uint64_t v101 = swift_allocObject();
    uint64_t v98 = type metadata accessor for CustodianStatusUpdateRequest;
    sub_10025DB64((uint64_t)v22, v101 + v61, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    uint64_t v62 = v114;
    sub_100008A94(v114 + 56, (uint64_t)v117);
    uint64_t v100 = sub_100008EF8(v117, v117[3]);
    os_log_type_t v63 = v103;
    sub_10025DC4C(v60, (uint64_t)v103, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    uint64_t v99 = type metadata accessor for CustodianRecord;
    uint64_t v64 = v104;
    sub_10025DC4C((uint64_t)v110, v104, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v65 = (v61 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v66 = *((unsigned __int8 *)v102 + 80);
    uint64_t v67 = (v65 + v66 + 8) & ~v66;
    uint64_t v113 = v26 + 7;
    unint64_t v68 = (v26 + 7 + v67) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = swift_allocObject();
    sub_10025DB64((uint64_t)v63, v69 + v61, (uint64_t (*)(void))v98);
    *(void *)(v69 + v65) = v62;
    id v103 = type metadata accessor for CustodianRecord;
    sub_10025DB64(v64, v69 + v67, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v70 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v69 + v68);
    uint64_t v71 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v116;
    NSObject *v70 = v115;
    v70[1] = v71;
    BOOL v72 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v69 + ((v68 + 23) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v115 = sub_10025DBCC;
    uint64_t v73 = v101;
    *BOOL v72 = sub_10025DBCC;
    v72[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v73;
    uint64_t v74 = *v100;
    id v102 = sub_100008EF8((void *)(*v100 + 56), *(void *)(*v100 + 80));
    uint64_t v75 = (uint64_t)v110;
    os_log_type_t v76 = v99;
    sub_10025DC4C((uint64_t)v110, v64, (uint64_t (*)(void))v99);
    uint64_t updated = *(void *)&v112[*(int *)(updated + 20)];
    uint64_t v77 = type metadata accessor for UUID();
    uint64_t v78 = v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v106, 1, 1, v77);
    uint64_t v79 = type metadata accessor for Date();
    os_log_type_t v80 = v107;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v107, 1, 1, v79);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v96 = (uint64_t)v80;
    uint64_t v95 = (uint64_t)v78;
    uint64_t v81 = v109;
    uint64_t v82 = v75;
    sub_1000A83E8(v64, 0, 0, updated, 0, 0, 0xF000000000000000, 2u, v109, v95, 0, 0, v96, 0);
    uint64_t v83 = v75;
    uint64_t v84 = v105;
    sub_10025DC4C(v83, v105, (uint64_t (*)(void))v76);
    uint64_t v85 = (v66 + 48) & ~v66;
    unint64_t v86 = (v113 + v85) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = (void *)swift_allocObject();
    v87[2] = v74;
    v87[3] = sub_10025DF68;
    v87[4] = v69;
    v87[5] = 0;
    sub_10025DB64(v84, (uint64_t)v87 + v85, (uint64_t (*)(void))v103);
    uint64_t v88 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v87 + v86);
    char *v88 = v115;
    v88[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v73;
    uint64_t v89 = qword_100320CC8;
    swift_retain();
    swift_retain();
    uint64_t v116 = v69;
    swift_retain();
    if (v89 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(v81 + *(int *)(v108 + 48)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      uint64_t v90 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      uint64_t v90 = &qword_10033E9F8;
    }
    uint64_t v92 = *v90;
    unint64_t v91 = v90[1];
    swift_bridgeObjectRetain();
    id v93 = sub_10028CC20(v92, v91);
    id v94 = [v93 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_1000667EC(v81, v94, (uint64_t)sub_10014A9F8, (uint64_t)v87);
    swift_release();

    sub_10025E29C(v81, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_release();
    swift_release();
    sub_10025E29C((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
    sub_100008EA8((uint64_t)v117);
    return sub_10025E29C(v82, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
}

uint64_t sub_10025CAD4()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  sub_100008EA8(v0 + 136);
  sub_100008EA8(v0 + 176);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianStatusUpdater()
{
  return self;
}

uint64_t sub_10025CB50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10025DC4C(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v18 = *(void *)(a2 + *(int *)(type metadata accessor for CustodianStatusUpdateRequest() + 20));
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
  return sub_1000A83E8((uint64_t)v17, 0, 0, v18, 0, 0, 0xF000000000000000, 2u, a3, (uint64_t)v13, 0, 0, (uint64_t)v9, 0);
}

uint64_t type metadata accessor for CustodianStatusUpdateRequest()
{
  uint64_t result = qword_10032E9D8;
  if (!qword_10032E9D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10025CD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, uint64_t (*a7)(), void *a8)
{
  uint64_t v83 = a8;
  uint64_t v84 = a7;
  uint64_t v91 = a4;
  uint64_t v92 = a2;
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  uint64_t v86 = *(void *)(updated - 8);
  __chkstk_darwin(updated, v12);
  uint64_t v87 = v13;
  uint64_t v88 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  uint64_t v82 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v82 + 64);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v89 = (uint64_t)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v85 = (uint64_t)&v77 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v90 = (uint64_t)&v77 - v23;
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v77 - v25;
  uint64_t v27 = sub_100009F04(&qword_10032E140);
  uint64_t v29 = __chkstk_darwin(v27, v28);
  uint64_t v31 = (uint64_t *)((char *)&v77 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29, v32);
  uint64_t v34 = (uint64_t *)((char *)&v77 - v33);
  sub_1002081A0(a1, (uint64_t)&v77 - v33);
  uint64_t v93 = v27;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10025DB64((uint64_t)v34, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100007288(v47, (uint64_t)qword_10033E748);
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = v92;
    if (v50)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Custodianship record updated!", v52, 2u);
      swift_slowDealloc();
    }

    uint64_t v53 = *(void *)(v51 + *(int *)(updated + 20));
    switch(v53)
    {
      case 4:
        uint64_t v54 = a3 + 136;
        break;
      case 3:
        uint64_t v54 = a3 + 176;
        break;
      case 2:
        uint64_t v54 = a3 + 96;
        break;
      default:
LABEL_26:
        [self postRecoveryContactChangedNotification];
        sub_10025DC4C((uint64_t)v26, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        swift_storeEnumTagMultiPayload();
        a5(v31);
        sub_100208208((uint64_t)v31);
        return sub_10025E29C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
    sub_100008A94(v54, (uint64_t)v95);
    uint64_t v75 = v96;
    uint64_t v76 = v97;
    sub_100008EF8(v95, v96);
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v76 + 8))(v91, *(void *)(v91 + *(int *)(v14 + 36)), *(unsigned __int8 *)(v51 + *(int *)(updated + 24)), v75, v76);
    sub_100008EA8((uint64_t)v95);
    goto LABEL_26;
  }
  uint64_t v35 = *v34;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  uint64_t v37 = sub_100007288(v36, (uint64_t)qword_10033E748);
  swift_errorRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v81 = a6;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v80 = a3;
    uint64_t v41 = (uint8_t *)v40;
    uint64_t v78 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 138412290;
    uint64_t v42 = _convertErrorToNSError(_:)();
    uint64_t v79 = v37;
    uint64_t v43 = v31;
    uint64_t v44 = v35;
    uint64_t v45 = a5;
    uint64_t v46 = v42;
    v95[0] = v42;
    a6 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v78 = v46;
    a5 = v45;
    uint64_t v35 = v44;
    uint64_t v31 = v43;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error updating custodianship %@", v41, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v80;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  swift_getErrorValue();
  os_log_type_t v55 = (void *)sub_1001A84EC(v98);
  if (!v55) {
    goto LABEL_22;
  }
  BOOL v56 = v55;
  if (!sub_1001A84E4(v55) || *(void *)(v92 + *(int *)(updated + 20)) != 4)
  {

LABEL_22:
    *uint64_t v31 = v35;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a5(v31);
    swift_errorRelease();
    return sub_100208208((uint64_t)v31);
  }
  uint64_t v93 = v35;
  uint64_t updated = (uint64_t)a5;
  uint64_t v81 = a6;
  os_log_type_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "CKError Unknown Item while removing custodian. Continuing to update local record.", v59, 2u);
    swift_slowDealloc();
  }

  uint64_t v61 = v90;
  uint64_t v60 = v91;
  ((void (*)(uint64_t))v84)(v91);
  sub_100008A94(a3 + 56, (uint64_t)v95);
  uint64_t v83 = sub_100008EF8(v95, v96);
  uint64_t v62 = v85;
  uint64_t v84 = type metadata accessor for CustodianRecord;
  sub_10025DC4C(v60, v85, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v63 = v88;
  sub_10025DC4C(v92, v88, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
  sub_10025DC4C(v61, v89, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v64 = *(unsigned __int8 *)(v82 + 80);
  uint64_t v65 = (v64 + 24) & ~v64;
  unint64_t v66 = (v15 + *(unsigned __int8 *)(v86 + 80) + v65) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
  unint64_t v67 = (v87 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = a3;
  uint64_t v69 = (v64 + v67 + 16) & ~v64;
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v68;
  sub_10025DB64(v62, v70 + v65, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_10025DB64(v63, v70 + v66, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
  uint64_t v71 = (uint64_t *)(v70 + v67);
  uint64_t v72 = v81;
  uint64_t *v71 = updated;
  v71[1] = v72;
  sub_10025DB64(v89, v70 + v69, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_100008EF8((void *)(*v83 + 16), *(void *)(*v83 + 40));
  swift_retain();
  swift_retain();
  uint64_t v73 = v90;
  sub_10005F0B0(v90, 0, 2, (uint64_t)sub_10025E680, v70);

  swift_release();
  swift_errorRelease();
  sub_10025E29C(v73, (uint64_t (*)(void))v84);
  return sub_100008EA8((uint64_t)v95);
}

uint64_t sub_10025D654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a4;
  uint64_t v13 = sub_100009F04(&qword_10032E140);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v36 - v19;
  sub_1002081A0(a1, (uint64_t)&v36 - v19);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v41 = a3;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E748);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v40 = a5;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v39 = a6;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v38 = a2;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      v43[0] = v26;
      a2 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v26;
      a5 = v40;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Local record update failed with error %@. Continuing to process decline status.", v25, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    a3 = v41;
  }
  else
  {
    sub_100208208((uint64_t)v20);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Local record updated. Continuing to process decline status.", v30, 2u);
      swift_slowDealloc();
    }
  }
  sub_100008A94(a2 + 136, (uint64_t)v43);
  uint64_t v31 = v44;
  uint64_t v32 = v45;
  sub_100008EF8(v43, v44);
  uint64_t v33 = *(void *)(a3 + *(int *)(type metadata accessor for CustodianRecord() + 36));
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(v32 + 8))(a3, v33, *(unsigned __int8 *)(v42 + *(int *)(updated + 24)), v31, v32);
  sub_100008EA8((uint64_t)v43);
  [self postRecoveryContactChangedNotification];
  sub_10025DC4C(a7, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload();
  a5(v17);
  return sub_100208208((uint64_t)v17);
}

uint64_t sub_10025DA8C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10025DB64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025DBCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_10025CB50(a1, v6, a2);
}

uint64_t sub_10025DC4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10025DCB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v17 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v17 + 16) & ~v17;
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v5 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v6 = (v3 + v5 + 8) & ~v5;
  uint64_t v16 = *(void *)(*((void *)v4 - 1) + 64);
  uint64_t v7 = v0 + v2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_release();
  uint64_t v11 = v0 + v6;
  v10(v0 + v6, v8);
  v10(v0 + v6 + v4[5], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t *)(v0 + v6 + v4[10]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    sub_100013198(*v12, v13);
  }
  sub_100013198(*(void *)(v11 + v4[11]), *(void *)(v11 + v4[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v11 + v4[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8)) {
    v10(v14, v8);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v16 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v17 | v5 | 7);
}

uint64_t sub_10025DF68(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + v5);
  uint64_t v10 = v1 + v7;
  uint64_t v11 = *(void (**)(uint64_t *))(v1 + v8);
  uint64_t v12 = *(void *)(v1 + v8 + 8);
  uint64_t v13 = v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *(uint64_t (**)())v13;
  uint64_t v15 = *(void **)(v13 + 8);

  return sub_10025CD98(a1, v1 + v4, v9, v10, v11, v12, v14, v15);
}

uint64_t sub_10025E08C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10025E29C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10025E2FC()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v22 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = v4;
  uint64_t v21 = (v3 + v4 + v22) & ~v22;
  unint64_t v6 = v2 + ((*(void *)(v5 + 64) + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v7 + v1[5], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v7 + v1[10]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100013198(*v11, v12);
  }
  unint64_t v13 = v6 & ~v2;
  sub_100013198(*(void *)(v7 + v1[11]), *(void *)(v7 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = v7 + v1[16];
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v15(v14, 1, v8)) {
    v10(v14, v8);
  }
  v10(v0 + v21, v8);
  swift_release();
  uint64_t v16 = v0 + v13;
  v10(v0 + v13, v8);
  v10(v0 + v13 + v1[5], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t *)(v0 + v13 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100013198(*v17, v18);
  }
  sub_100013198(*(void *)(v16 + v1[11]), *(void *)(v16 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v16 + v1[16];
  if (!v15(v19, 1, v8)) {
    v10(v19, v8);
  }

  return _swift_deallocObject(v0, v13 + v23, v2 | v22 | 7);
}

uint64_t sub_10025E680(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void (**)(void))(v1 + v9);
  uint64_t v12 = *(void *)(v1 + v9 + 8);

  return sub_10025D654(a1, v10, v1 + v5, v1 + v8, v11, v12, v1 + ((v4 + v9 + 16) & ~v4));
}

void *sub_10025E7A0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_10025E874(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10025E8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10025E95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10025E9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10025EA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t sub_10025EAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10025EB00);
}

uint64_t sub_10025EB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_10025EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025EBE4);
}

uint64_t sub_10025EBE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t sub_10025ECA0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10025ED44(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_10025EDB0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t InheritanceSecurityController.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)CDPInheritanceTrustController) init];
  return v0;
}

uint64_t InheritanceSecurityManager.__allocating_init(controller:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t InheritanceSecurityManager.init(controller:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void InheritanceSecurityManager.createAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void InheritanceSecurityManager.removeAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void InheritanceSecurityManager.preflightInheritanceRecovery(for:accessKey:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(v4 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_10025ED44;
  v11[3] = &unk_100302FE0;
  unsigned int v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  [v8 preflightInheritanceRecoveryForBeneficiaryID:isa accessKey:a2 completion:v10];
  _Block_release(v10);
}

void InheritanceSecurityManager.checkInheritanceKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10025F504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  unsigned int v10 = *(void **)(v5 + 16);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v13[4] = a2;
  v13[5] = a3;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10025ED44;
  v13[3] = a4;
  uint64_t v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v10 *a5:isa v12];
  _Block_release(v12);
}

void InheritanceSecurityManager.recreateInheritanceKey(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10025F7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v8 = *(void **)(v5 + 16);
  v10[4] = a2;
  v10[5] = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10004DAE8;
  v10[3] = a4;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  [v8 *a5:a1:v9];
  _Block_release(v9);
}

uint64_t InheritanceSecurityController.init()()
{
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 16) = [objc_allocWithZone((Class)CDPInheritanceTrustController) init];
  return v0;
}

void InheritanceSecurityController.createAccessKey(for:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CDPContext) init];
  id v14 = [a1 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  [v13 setBeneficiaryIdentifier:isa];

  uint64_t v16 = *(void **)(v4 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  aBlock[4] = sub_100263D94;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004DAE8;
  aBlock[3] = &unk_100303080;
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v16 createInheritanceKeyWithContext:v13 completion:v18];
  _Block_release(v18);
}

uint64_t sub_10025FC3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void InheritanceSecurityController.recreateInheritanceKey(with:completion:)(uint64_t a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v50 = a1;
  uint64_t v51 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  id v13 = (char *)&v43 - v12;
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  unint64_t v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v3 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  id v19 = [[*(id *)(*sub_100008EF8(aBlock, (uint64_t)v53) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v19)
  {
    sub_1002623A0(v19);
    if (v20)
    {
      id v47 = v20;
      UUID.init()();
      if (qword_100320B70 != -1) {
        swift_once();
      }
      unint64_t v48 = a2;
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007288(v21, (uint64_t)qword_10033E700);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v13, v5);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        aBlock[0] = v45;
        uint64_t v44 = v24;
        *(_DWORD *)uint64_t v24 = 136315138;
        sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v56 = sub_100135190(v25, v26, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v27 = v10;
        uint64_t v28 = v5;
        uint64_t v46 = *(void (**)(char *, uint64_t))(v6 + 8);
        v46(v27, v5);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Setting beneficiaryIdentifier to new otPeerID: %s", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v34 = v10;
        uint64_t v28 = v5;
        uint64_t v46 = *(void (**)(char *, uint64_t))(v6 + 8);
        v46(v34, v5);
      }

      uint64_t v35 = v49;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v37 = v47;
      [v47 setBeneficiaryIdentifier:isa];

      uint64_t v38 = *(void **)(v35 + 16);
      Class v39 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = v51;
      *(void *)(v40 + 16) = v48;
      *(void *)(v40 + 24) = v41;
      uint64_t v54 = sub_100262754;
      uint64_t v55 = v40;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10004DAE8;
      uint64_t v53 = &unk_1003030D0;
      uint64_t v42 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v38 recreateInheritanceKeyWithContext:v37 newOTPeerID:v39 inheritanceKey:v50 completion:v42];
      _Block_release(v42);

      v46(v13, v28);
    }
    else
    {
      a2(0, 0);
    }
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E700);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v56 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = (void *)aBlock[0];
    a2(0, aBlock[0]);
  }
}

void InheritanceSecurityController.removeAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = [objc_allocWithZone((Class)CDPContext) init];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v7 setBeneficiaryIdentifier:isa];

  uint64_t v9 = *(void **)(v4 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  v12[4] = sub_10009EB94;
  v12[5] = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100260544;
  v12[3] = &unk_100303120;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  [v9 deleteInheritanceAccessKeyWithContext:v7 completion:v11];
  _Block_release(v11);
}

void sub_100260544(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void InheritanceSecurityController.preflightInheritanceRecovery(for:accessKey:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v42 - v13;
  uint64_t v15 = sub_100009F04(&qword_100325870);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  id v19 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v5 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v15);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  id v20 = [*(id *)(*sub_100008EF8(aBlock, (uint64_t)v53) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (!v20)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E700);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v56 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = (void *)aBlock[0];
    ((void (*)(uint64_t))v49)(aBlock[0]);
    goto LABEL_14;
  }
  uint64_t v46 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a2;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E760);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v45(v14, v51, v7);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    id v44 = v20;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v43 = swift_slowAlloc();
    aBlock[0] = v43;
    *(_DWORD *)uint64_t v25 = 136315138;
    v42[1] = v25 + 4;
    sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v56 = sub_100135190(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v8;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Preflighting Inheritance Recovery for beneficiaryID: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v20 = v44;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v28 = v8;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }

  sub_1002623A0(v20);
  if (v34)
  {
    uint64_t v33 = v34;
    uint64_t v35 = *(void **)(v48 + 16);
    uint64_t v36 = v46;
    v45(v46, v51, v7);
    unint64_t v37 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v38 = swift_allocObject();
    Class v39 = v20;
    uint64_t v40 = v50;
    *(void *)(v38 + 16) = v49;
    *(void *)(v38 + 24) = v40;
    (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v38 + v37, v36, v7);
    uint64_t v54 = sub_100262780;
    uint64_t v55 = v38;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    uint64_t v53 = &unk_100303170;
    uint64_t v41 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v35 validateAccessKey:v47 withContext:v33 completion:v41];
    _Block_release(v41);

LABEL_14:
    return;
  }
  v49();
}

uint64_t sub_100260D38(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E760);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4, v7);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v16 = 136315138;
      id v19 = v16 + 4;
      sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v21 = sub_100135190(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Inheritance Preflight successful for beneficiaryID: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

void InheritanceSecurityController.checkInheritanceKey(for:completion:)(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v12 = [[*(id *)(*sub_100008EF8(aBlock, (uint64_t)v30) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (!v12)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E700);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not logged in to AppleAccount, unable to fetch. checkInheritanceKey aborted.", v23, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v33 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v12 = (id)aBlock[0];
    uint64_t v13 = (void *)aBlock[0];
    goto LABEL_10;
  }
  sub_1002623A0(v12);
  if (!v13)
  {
LABEL_10:
    a2(v13);

    return;
  }
  uint64_t v14 = v13;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v14 setBeneficiaryIdentifier:isa];

  uint64_t v16 = *(void **)(v4 + 16);
  if ([v16 respondsToSelector:Selector.init(_:)()])
  {
    Class v17 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = a3;
    os_log_type_t v31 = sub_100262784;
    uint64_t v32 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025ED44;
    uint64_t v30 = &unk_1003031C0;
    id v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v16 checkInheritanceKey:v14 inheritanceKeyUUID:v17 completion:v19];
    _Block_release(v19);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "checkInheritanceKey spi not found on InheritanceTrustController", v27, 2u);
      swift_slowDealloc();
    }

    a2(0);
  }
}

uint64_t sub_100261608(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v9 = 0;
    }
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Inheritance Check Inheritance Key results: %@", v7, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return a2(a1);
}

uint64_t InheritanceSecurityController.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__urlBagProvider;
  uint64_t v4 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t InheritanceSecurityController.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__urlBagProvider;
  uint64_t v4 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

void *sub_100261AE8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100009F04((uint64_t *)&unk_1003216A0);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  long long v4[3] = 2 * v5 - 64;
  return v4;
}

unsigned __int8 *sub_100261B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100261EB4();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100261C38(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_100261C38(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100261EB4()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100261F34(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100261F34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10026208C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100261AE8(v9, 0),
          unint64_t v12 = sub_10026218C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10026208C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1002133B0(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1002133B0(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_10026218C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1002133B0(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1002133B0(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1002623A0(void *a1)
{
  id v2 = [a1 aa_altDSID];
  if (v2)
  {
    unint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  id v5 = [self contextForAccountWithAltDSID:v4];

  if (v5)
  {
    id v6 = [a1 aa_personID];
    if (!v6)
    {
LABEL_63:
      __break(1u);
      return;
    }
    unint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    uint64_t v11 = HIBYTE(v10) & 0xF;
    uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0x2000000000000000) != 0) {
      uint64_t v13 = HIBYTE(v10) & 0xF;
    }
    else {
      uint64_t v13 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (!v13)
    {
      swift_bridgeObjectRelease();
      return;
    }
    if ((v10 & 0x1000000000000000) != 0)
    {
      uint64_t v15 = (uint64_t)sub_100261B50(v8, v10, 10);
      LOBYTE(v8) = v30;
LABEL_39:
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
      {
        id v21 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v15];
        [v5 setDsid:v21];
      }
      return;
    }
    if ((v10 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) != 0) {
        uint64_t v14 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v15 = (uint64_t)sub_100261C38(v14, v12, 10);
      LOBYTE(v8) = v16 & 1;
      goto LABEL_39;
    }
    v31[0] = v8;
    v31[1] = v10 & 0xFFFFFFFFFFFFFFLL;
    if (v8 == 43)
    {
      if (!v11)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (v11 == 1 || (BYTE1(v8) - 48) > 9u)
      {
LABEL_36:
        uint64_t v15 = 0;
        LOBYTE(v8) = 1;
        goto LABEL_39;
      }
      uint64_t v15 = (BYTE1(v8) - 48);
      if (v11 != 2)
      {
        if ((BYTE2(v8) - 48) > 9u) {
          goto LABEL_36;
        }
        uint64_t v15 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
        uint64_t v17 = v11 - 3;
        if (v17)
        {
          unint64_t v18 = (unsigned __int8 *)v31 + 3;
          while (1)
          {
            unsigned int v19 = *v18 - 48;
            if (v19 > 9) {
              goto LABEL_36;
            }
            uint64_t v20 = 10 * v15;
            if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
              goto LABEL_36;
            }
            uint64_t v15 = v20 + v19;
            if (__OFADD__(v20, v19)) {
              goto LABEL_36;
            }
            LOBYTE(v8) = 0;
            ++v18;
            if (!--v17) {
              goto LABEL_39;
            }
          }
        }
      }
    }
    else
    {
      if (v8 == 45)
      {
        if (v11)
        {
          if (v11 == 1 || (BYTE1(v8) - 48) > 9u) {
            goto LABEL_36;
          }
          if (v11 == 2)
          {
            LOBYTE(v8) = 0;
            uint64_t v15 = -(uint64_t)(BYTE1(v8) - 48);
            goto LABEL_39;
          }
          if ((BYTE2(v8) - 48) > 9u) {
            goto LABEL_36;
          }
          uint64_t v15 = -10 * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
          uint64_t v26 = v11 - 3;
          if (v26)
          {
            unint64_t v27 = (unsigned __int8 *)v31 + 3;
            while (1)
            {
              unsigned int v28 = *v27 - 48;
              if (v28 > 9) {
                goto LABEL_36;
              }
              uint64_t v29 = 10 * v15;
              if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
                goto LABEL_36;
              }
              uint64_t v15 = v29 - v28;
              if (__OFSUB__(v29, v28)) {
                goto LABEL_36;
              }
              LOBYTE(v8) = 0;
              ++v27;
              if (!--v26) {
                goto LABEL_39;
              }
            }
          }
          goto LABEL_38;
        }
        __break(1u);
        goto LABEL_62;
      }
      if (!v11 || (v8 - 48) > 9u) {
        goto LABEL_36;
      }
      uint64_t v15 = (v8 - 48);
      if (v11 != 1)
      {
        if ((BYTE1(v8) - 48) > 9u) {
          goto LABEL_36;
        }
        uint64_t v15 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
        uint64_t v22 = v11 - 2;
        if (v22)
        {
          unint64_t v23 = (unsigned __int8 *)v31 + 2;
          while (1)
          {
            unsigned int v24 = *v23 - 48;
            if (v24 > 9) {
              goto LABEL_36;
            }
            uint64_t v25 = 10 * v15;
            if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63) {
              goto LABEL_36;
            }
            uint64_t v15 = v25 + v24;
            if (__OFADD__(v25, v24)) {
              goto LABEL_36;
            }
            LOBYTE(v8) = 0;
            ++v23;
            if (!--v22) {
              goto LABEL_39;
            }
          }
        }
      }
    }
LABEL_38:
    LOBYTE(v8) = 0;
    goto LABEL_39;
  }
}

uint64_t sub_100262754()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100262784(uint64_t a1)
{
  return sub_100261608(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t type metadata accessor for InheritanceSecurityManager()
{
  return self;
}

uint64_t sub_1002627B0()
{
  return type metadata accessor for InheritanceSecurityController();
}

uint64_t type metadata accessor for InheritanceSecurityController()
{
  uint64_t result = qword_10032EAF0;
  if (!qword_10032EAF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100262804()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F60, &qword_100320D40);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1002628FC(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v53 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  unint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  unint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  uint64_t v52 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v14);
  _Block_copy(a3);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  id v20 = [[*(id *)(*sub_100008EF8(aBlock, (uint64_t)v55) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v20)
  {
    sub_1002623A0(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      UUID.init()();
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v51 = v19;
      uint64_t v23 = type metadata accessor for Logger();
      sub_100007288(v23, (uint64_t)qword_10033E700);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v13, v5);
      unsigned int v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v50 = v5;
      if (v26)
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        aBlock[0] = v48;
        uint64_t v49 = v22;
        *(_DWORD *)unint64_t v27 = 136315138;
        uint64_t v47 = v27 + 4;
        sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v58 = sub_100135190(v28, v29, aBlock);
        uint64_t v22 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        char v30 = v10;
        os_log_type_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
        v31(v30, v5);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Setting beneficiaryIdentifier to new otPeerID: %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v38 = v10;
        os_log_type_t v31 = *(void (**)(char *, uint64_t))(v6 + 8);
        v31(v38, v5);
      }

      uint64_t v39 = v52;
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v22 setBeneficiaryIdentifier:isa];

      uint64_t v41 = v22;
      uint64_t v42 = *(void **)(v39 + 16);
      Class v43 = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v44 = swift_allocObject();
      uint64_t v45 = v51;
      *(void *)(v44 + 16) = sub_10009EB78;
      *(void *)(v44 + 24) = v45;
      uint64_t v56 = sub_100263D94;
      uint64_t v57 = v44;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10004DAE8;
      uint64_t v55 = &unk_100303350;
      uint64_t v46 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v42 recreateInheritanceKeyWithContext:v41 newOTPeerID:v43 inheritanceKey:v53 completion:v46];
      _Block_release(v46);

      v31(v13, v50);
      swift_release();
    }
    else
    {
      a3[2](a3, 0, 0);
      swift_release();
    }
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E700);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v35, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v58 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v36 = (void *)aBlock[0];
    unint64_t v37 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v37);
    swift_release();
  }
}

void sub_100262FCC(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v56 = a1;
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v54 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v54, v9);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  unint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = a4;
  uint64_t v53 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v14);
  _Block_copy(a4);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  id v19 = [*(id *)(*sub_100008EF8(aBlock, (uint64_t)v58) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v19)
  {
    uint64_t v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v52 = a2;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    uint64_t v21 = v54;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v49(v13, v56, v54);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v51 = v7;
    if (v24)
    {
      uint64_t v25 = swift_slowAlloc();
      id v47 = v19;
      BOOL v26 = (uint8_t *)v25;
      uint64_t v46 = swift_slowAlloc();
      aBlock[0] = v46;
      uint64_t v48 = a4;
      *(_DWORD *)BOOL v26 = 136315138;
      uint64_t v45 = v26 + 4;
      sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v61 = sub_100135190(v27, v28, aBlock);
      a4 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v21);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Preflighting Inheritance Recovery for beneficiaryID: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v19 = v47;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v21);
    }

    sub_1002623A0(v19);
    if (v35)
    {
      uint64_t v36 = v35;
      unint64_t v37 = *(void **)(v53 + 16);
      uint64_t v38 = v50;
      v49(v50, v56, v21);
      uint64_t v39 = v51;
      unint64_t v40 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      uint64_t v41 = v19;
      uint64_t v42 = swift_allocObject();
      uint64_t v43 = v55;
      *(void *)(v42 + 16) = sub_10009F7CC;
      *(void *)(v42 + 24) = v43;
      (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v42 + v40, v38, v21);
      uint64_t v59 = sub_100262780;
      uint64_t v60 = v42;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025ED44;
      uint64_t v58 = &unk_1003032B0;
      uint64_t v44 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v37 validateAccessKey:v52 withContext:v36 completion:v44];
      _Block_release(v44);
      swift_release();
    }
    else
    {
      a4[2](a4, 0);
      swift_release();
    }
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E700);
    char v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v61 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = (void *)aBlock[0];
    os_log_type_t v34 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v34);
    swift_release();
  }
}

void sub_100263698(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = sub_100009F04(&qword_100325870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v5);
  _Block_copy(a3);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  id v11 = [[*(id *)(*sub_100008EF8(aBlock, (uint64_t)v30) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (!v11)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E700);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not logged in to AppleAccount, unable to fetch. checkInheritanceKey aborted.", v22, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v33 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v23 = (void *)aBlock[0];
    id v11 = (id)_convertErrorToNSError(_:)();
    ((void (**)(void, id))a3)[2](a3, v11);
    swift_release();

    goto LABEL_11;
  }
  sub_1002623A0(v11);
  if (!v12)
  {
    a3[2](a3, 0);
    swift_release();
LABEL_11:

    return;
  }
  uint64_t v13 = v12;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v13 setBeneficiaryIdentifier:isa];

  uint64_t v15 = *(void **)(a2 + 16);
  if ([v15 respondsToSelector:Selector.init(_:)()])
  {
    Class v16 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_10009EA5C;
    *(void *)(v17 + 24) = v10;
    os_log_type_t v31 = sub_100263E58;
    uint64_t v32 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025ED44;
    char v30 = &unk_100303238;
    unint64_t v18 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v15 checkInheritanceKey:v13 inheritanceKeyUUID:v16 completion:v18];
    _Block_release(v18);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "checkInheritanceKey spi not found on InheritanceTrustController", v27, 2u);
      swift_slowDealloc();
    }

    a3[2](a3, 0);
    swift_release();
  }
}

uint64_t sub_100263BB0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100263C7C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100260D38(a1, v4, v5, v6);
}

uint64_t sub_100263CF0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100263D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032DA70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100263E5C(uint64_t a1, uint64_t (*a2)(void))
{
  if (a2) {
    return a2();
  }
  return result;
}

uint64_t type metadata accessor for BeneficiaryRemovedMessageHandler()
{
  return self;
}

uint64_t sub_100263EB0(void *a1, uint64_t a2, void (*a3)(void *))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E700);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      v25[0] = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v25[0];
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error building URL configuration: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    v25[0] = a2;
    char v26 = 1;
    swift_errorRetain();
    a3(v25);
    swift_errorRelease();
  }
  else if (a1)
  {
    uint64_t v10 = qword_100320B70;
    id v11 = a1;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E700);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "URL configuration built successfully.", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = type metadata accessor for DaemonSetupServiceURLBag();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v11;
    v25[3] = v16;
    void v25[4] = &off_1002FAB18;
    v25[0] = v17;
    char v26 = 0;
    id v18 = v11;
    swift_retain();
    a3(v25);
    swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E700);
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No URL configuration was built...", v23, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    v25[0] = v24;
    char v26 = 1;
    a3(v25);
  }
  return sub_1002642E4((uint64_t)v25);
}

uint64_t type metadata accessor for DeamonSetupServiceRequestController()
{
  return self;
}

uint64_t sub_1002642E4(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032C690);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100264344(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 databaseScope];
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E730);
  id v10 = a1;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = a2;
    os_log_type_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    v30[0] = (uint64_t)v10;
    id v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Handling CloudKit APS Notification: %@", v13, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    a2 = v29;
    swift_slowDealloc();
    swift_slowDealloc();

    if (v8 != (id)1) {
      goto LABEL_5;
    }
LABEL_10:
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      uint64_t v25 = "No need to handle zone change for public DB";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v25, v24, 2u);
      swift_slowDealloc();
    }
LABEL_18:

    return;
  }

  if (v8 == (id)1) {
    goto LABEL_10;
  }
LABEL_5:
  if (v8 != (id)3)
  {
    if (v8 == (id)2)
    {
      id v16 = sub_10028CC20(a2, a3);
      id v17 = [v16 privateCloudDatabase];

      swift_bridgeObjectRetain_n();
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        v30[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        sub_100135190(a2, a3, v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_type_t v21 = "Received APS notification to pull private DB changes for container: %s";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_20;
      }
      goto LABEL_19;
    }
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      uint64_t v25 = "No need to handle zone change for unknown DB";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  id v26 = sub_10028CC20(a2, a3);
  id v17 = [v26 sharedCloudDatabase];

  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v30[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a2, a3, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_type_t v21 = "Received APS notification to pull shared DB changes for container: %s";
    goto LABEL_14;
  }
LABEL_19:

  swift_bridgeObjectRelease_n();
LABEL_20:
  sub_100266424(v4 + 24, (uint64_t)v30);
  if (v31)
  {
    sub_100008EF8(v30, v31);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a2;
    *(void *)(v27 + 24) = a3;
    swift_bridgeObjectRetain();
    id v28 = v17;
    sub_1000AE2BC(v28, a2, a3, 1, (uint64_t)sub_100266564, v27);
    swift_release();

    sub_100008EA8((uint64_t)v30);
  }
  else
  {

    sub_10026648C((uint64_t)v30);
  }
}

void sub_1002648F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E718);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      id v8 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      swift_bridgeObjectRetain();
      sub_100135190(a2, a3, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v7 + 12) = 2112;
      uint64_t v14 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v8 = v14;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Error fetching ckDatabase (%s) changes: %@", (uint8_t *)v7, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E730);
    swift_bridgeObjectRetain_n();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(a2, a3, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully fetched ckDatabase (%s) changes", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_100264CEC(void *a1, uint64_t a2, unint64_t a3)
{
  id v4 = v3;
  id v8 = [a1 recordZoneID];
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = [a1 databaseScope];
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E718);
    id v12 = a1;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v45 = a3;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      id v47 = v4;
      id v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      v50[0] = v12;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v16 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Handling CloudKit APS Zone Change Notification: %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      id v4 = v47;
      swift_slowDealloc();
      a3 = v45;
      swift_slowDealloc();

      if (v10 != (id)1) {
        goto LABEL_6;
      }
    }
    else
    {

      if (v10 != (id)1)
      {
LABEL_6:
        if (v10 == (id)3)
        {
          id v37 = sub_10028CC20(a2, a3);
          id v19 = [v37 sharedCloudDatabase];

          uint64_t v20 = v9;
          os_log_type_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v21, v22))
          {
            id v46 = v19;
            os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
            uint64_t v38 = (void *)swift_slowAlloc();
            *(_DWORD *)os_log_type_t v23 = 138412290;
            v50[0] = v20;
            uint64_t v39 = v20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v38 = v9;

            id v26 = "Received APS notification to pull shared DB changes for zoneID: %@";
            goto LABEL_22;
          }
LABEL_27:

          os_log_type_t v21 = v20;
LABEL_28:

          sub_100266424((uint64_t)v4 + 24, (uint64_t)v50);
          if (v51)
          {
            sub_100008EF8(v50, v51);
            sub_100009F04((uint64_t *)&unk_100328470);
            uint64_t v40 = swift_allocObject();
            *(_OWORD *)(v40 + 16) = xmmword_1002AB070;
            *(void *)(v40 + 32) = v9;
            uint64_t v49 = v40;
            specialized Array._endMutation()();
            uint64_t v41 = swift_allocObject();
            *(void *)(v41 + 16) = v12;
            id v42 = v12;
            id v43 = v9;
            id v44 = v19;
            sub_1000AF434(v44, v49, 1, (uint64_t)sub_100266524, v41);
            swift_bridgeObjectRelease();
            swift_release();

            sub_100008EA8((uint64_t)v50);
          }
          else
          {

            sub_10026648C((uint64_t)v50);
          }
          return;
        }
        if (v10 == (id)2)
        {
          id v18 = sub_10028CC20(a2, a3);
          id v19 = [v18 privateCloudDatabase];

          uint64_t v20 = v9;
          os_log_type_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v21, v22))
          {
            id v46 = v19;
            os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
            uint64_t v24 = (void *)swift_slowAlloc();
            *(_DWORD *)os_log_type_t v23 = 138412290;
            v50[0] = v20;
            uint64_t v25 = v20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v24 = v9;

            id v26 = "Received APS notification to pull private DB changes for zoneID: %@";
LABEL_22:
            _os_log_impl((void *)&_mh_execute_header, v21, v22, v26, v23, 0xCu);
            sub_100009F04((uint64_t *)&unk_1003216C0);
            swift_arrayDestroy();
            swift_slowDealloc();
            id v19 = v46;
            swift_slowDealloc();
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v35 = 0;
          uint64_t v36 = "No need to handle zone change for unknown DB";
          goto LABEL_25;
        }
        goto LABEL_26;
      }
    }
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "No need to handle zone change for public DB";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
      swift_slowDealloc();
    }
LABEL_26:

    return;
  }
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E718);
  id v48 = a1;
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    char v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    *(_DWORD *)char v30 = 138412290;
    v50[0] = v48;
    id v32 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v48;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Missing recordZoneID in zone notification: %@", v30, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1002654A4(uint64_t a1, void *a2)
{
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E718);
  id v9 = a2;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 138412290;
    id v8 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v9;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Completed DB pull for APS notification: %@", v6, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100265670(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  id v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  id v12 = (char *)&v85 - v11;
  if (qword_100320B80 != -1) {
    swift_once();
  }
  sub_100007288(v4, (uint64_t)qword_10033E730);
  id v13 = a1;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  id v87 = v9;
  uint64_t v88 = v5;
  uint64_t v85 = v2;
  id v86 = v12;
  if (v16)
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    id v18 = (void *)swift_slowAlloc();
    *(_DWORD *)id v17 = 138412290;
    uint64_t v90 = (uint64_t)v13;
    id v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v18 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudKitSyncManager received APS message: %@", v17, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v20 = [v13 userInfo:v85];
  if (!v20)
  {
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  os_log_type_t v21 = v20;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [self notificationFromRemoteNotificationDictionary:isa];

  if (v23)
  {
    switch((unint64_t)[v23 notificationType])
    {
      case 1uLL:
        if (qword_100320B78 != -1) {
          swift_once();
        }
        sub_100007288(v4, (uint64_t)qword_10033E718);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v24, v25)) {
          goto LABEL_49;
        }
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        uint64_t v27 = "No need to handle query notification";
        goto LABEL_48;
      case 2uLL:
        self;
        uint64_t v34 = swift_dynamicCastObjCClass();
        if (v34)
        {
          uint64_t v35 = (void *)v34;
          id v36 = v23;
          id v37 = [v13 topic];
          if (v37)
          {
            uint64_t v38 = v37;
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            if (qword_100320D10 != -1) {
              swift_once();
            }
            uint64_t v42 = qword_10033EA58;
            if (*(void *)(qword_10033EA58 + 16))
            {
              swift_bridgeObjectRetain();
              unint64_t v43 = sub_1001358B8(v39, v41);
              if (v44)
              {
                unint64_t v45 = (uint64_t *)(*(void *)(v42 + 56) + 16 * v43);
                uint64_t v46 = *v45;
                unint64_t v47 = v45[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease_n();
                sub_100264CEC(v35, v46, v47);
                swift_bridgeObjectRelease();

                return;
              }
              swift_bridgeObjectRelease();
            }
            id v87 = v36;
            swift_bridgeObjectRelease();
            if (qword_100320B78 != -1) {
              swift_once();
            }
            uint64_t v62 = sub_100007288(v4, (uint64_t)qword_10033E718);
            uint64_t v63 = v88;
            id v64 = v86;
            (*(void (**)(id, uint64_t, uint64_t))(v88 + 16))(v86, v62, v4);
            id v13 = v13;
            uint64_t v65 = Logger.logObject.getter();
            os_log_type_t v66 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v65, v66))
            {
              unint64_t v67 = (uint8_t *)swift_slowAlloc();
              uint64_t v85 = swift_slowAlloc();
              uint64_t v90 = v85;
              *(_DWORD *)unint64_t v67 = 136315138;
              id v68 = [v13 topic:v85];
              if (v68)
              {
                uint64_t v69 = v68;
                uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v72 = v71;

                uint64_t v89 = sub_100135190(v70, v72, &v90);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v65, v66, "Received notification for unknown container topic: %s", v67, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                id v73 = v87;
                (*(void (**)(id, uint64_t))(v88 + 8))(v86, v4);
                return;
              }
              goto LABEL_68;
            }

            id v74 = v87;
            goto LABEL_64;
          }
          goto LABEL_66;
        }
        if (qword_100320B78 != -1) {
          swift_once();
        }
        sub_100007288(v4, (uint64_t)qword_10033E718);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v24, v25)) {
          goto LABEL_49;
        }
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        uint64_t v27 = "Unable to cast notification to CKRecordZoneNotification";
        goto LABEL_48;
      case 3uLL:
        if (qword_100320B78 != -1) {
          swift_once();
        }
        sub_100007288(v4, (uint64_t)qword_10033E718);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v24, v25)) {
          goto LABEL_49;
        }
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        uint64_t v27 = "No need to handle read notification";
        goto LABEL_48;
      case 4uLL:
        self;
        uint64_t v48 = swift_dynamicCastObjCClass();
        if (!v48)
        {
          if (qword_100320B78 != -1) {
            swift_once();
          }
          sub_100007288(v4, (uint64_t)qword_10033E718);
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v24, v25))
          {
LABEL_49:

            return;
          }
          id v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v26 = 0;
          uint64_t v27 = "Unable to cast notification to CKDatabaseNotification";
LABEL_48:
          _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
          swift_slowDealloc();

          return;
        }
        uint64_t v49 = (void *)v48;
        id v50 = v23;
        id v51 = [v13 topic];
        if (!v51)
        {
LABEL_67:
          __break(1u);
LABEL_68:

          __break(1u);
          goto LABEL_69;
        }
        uint64_t v52 = v51;
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v55 = v54;

        if (qword_100320D10 != -1) {
          swift_once();
        }
        uint64_t v56 = qword_10033EA58;
        if (*(void *)(qword_10033EA58 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v57 = sub_1001358B8(v53, v55);
          if (v58)
          {
            uint64_t v59 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v57);
            uint64_t v60 = *v59;
            unint64_t v61 = v59[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease_n();
            sub_100264344(v49, v60, v61);
            swift_bridgeObjectRelease();

            return;
          }
          swift_bridgeObjectRelease();
        }
        id v86 = v50;
        swift_bridgeObjectRelease();
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v75 = sub_100007288(v4, (uint64_t)qword_10033E718);
        id v64 = v87;
        uint64_t v63 = v88;
        (*(void (**)(id, uint64_t, uint64_t))(v88 + 16))(v87, v75, v4);
        id v13 = v13;
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v76, v77))
        {

          id v74 = v86;
LABEL_64:

          (*(void (**)(id, uint64_t))(v63 + 8))(v64, v4);
          return;
        }
        uint64_t v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        uint64_t v90 = v85;
        *(_DWORD *)uint64_t v78 = 136315138;
        id v79 = [v13 topic:v85];
        if (!v79)
        {
LABEL_69:

          __break(1u);
          JUMPOUT(0x1002663B0);
        }
        uint64_t v80 = v79;
        uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v83 = v82;

        uint64_t v89 = sub_100135190(v81, v83, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Received notification for unknown container topic: %s", v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v84 = v86;
        (*(void (**)(id, uint64_t))(v88 + 8))(v87, v4);
        break;
      default:
        if (qword_100320B78 != -1) {
          swift_once();
        }
        sub_100007288(v4, (uint64_t)qword_10033E718);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v24, v25)) {
          goto LABEL_49;
        }
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        uint64_t v27 = "No need to handle unknown APS notification";
        goto LABEL_48;
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    sub_100007288(v4, (uint64_t)qword_10033E718);
    id v28 = v13;
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v32 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      uint64_t v90 = (uint64_t)v28;
      id v33 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v32 = v28;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "CloudKitSyncManager received unknown APS message (missing type): %@", v31, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1002663C0()
{
  swift_release();
  sub_10026648C(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitSyncPushDelegate()
{
  return self;
}

uint64_t sub_100266424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100327130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10026648C(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100327130);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002664EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100266524(uint64_t a1)
{
  sub_1002654A4(a1, *(void **)(v1 + 16));
}

uint64_t sub_10026652C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100266564(uint64_t a1)
{
  sub_1002648F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10026656C(uint64_t a1, unint64_t a2)
{
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E718);
  sub_100013140(a1, a2);
  sub_100013140(a1, a2);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    sub_100254A64(a1, a2);
    sub_100009F04((uint64_t *)&unk_100328450);
    sub_100098EA8();
    uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    sub_100135190(v7, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013198(a1, a2);
    sub_100013198(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Received APS Public Token: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100013198(a1, a2);
    sub_100013198(a1, a2);
  }
}

void sub_1002667C8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E730);
  sub_100013140(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013140(a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315650;
    sub_100254A64(a1, a2);
    sub_100009F04((uint64_t *)&unk_100328450);
    uint64_t v19 = a3;
    sub_100098EA8();
    os_log_type_t type = v14;
    uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_100135190(v16, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100013198(a1, a2);
    sub_100013198(a1, a2);
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(v19, a4, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(a5, a6, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, type, "Received APS Token: %s for topic: %s, identifier: %s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100013198(a1, a2);
    sub_100013198(a1, a2);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t type metadata accessor for AccountStoreFactory()
{
  return self;
}

uint64_t type metadata accessor for XPCActivitySchedulerFactory()
{
  return self;
}

uint64_t sub_100266B1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DaemonActivityScheduler();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for HealthSchedulerFactory()
{
  return self;
}

uint64_t sub_100266B84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TrustedContactHealthScheduler();
  uint64_t v3 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100325DA0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  uint64_t result = Dependency.init(dependencyId:config:)();
  *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider) = 0;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for CustodianIDMSRequestManagerFactory()
{
  return self;
}

uint64_t type metadata accessor for CustodianKeyRepairFactory()
{
  return self;
}

uint64_t sub_100266C84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BeneficiaryAccessKeyRepairHandler();
  uint64_t v3 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100325A50);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_1003218C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100325A70);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100325A60);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224B0);
  uint64_t result = Dependency.init(dependencyId:config:)();
  *(void *)(v3
            + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext) = 1;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory()
{
  return self;
}

uint64_t sub_100266E54@<X0>(uint64_t *a1@<X8>)
{
  return sub_100266C84(a1);
}

id sub_100266E6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UserNotificationManager();
  uint64_t v3 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  id v4 = [objc_allocWithZone((Class)AAFollowUpController) init];
  os_log_type_t v5 = (void *)(v3 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  long long v5[3] = sub_10000850C(0, (unint64_t *)&qword_10032ACF0);
  v5[4] = &off_1002FF8B0;
  *os_log_type_t v5 = v4;
  uint64_t v6 = (objc_class *)type metadata accessor for NotificationController();
  id result = [objc_allocWithZone(v6) init];
  unint64_t v8 = (void *)(v3 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v8[3] = v6;
  v8[4] = &off_100301A10;
  *unint64_t v8 = result;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for NotificationManagerFactory()
{
  return self;
}

id sub_100266FA0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100266E6C(a1);
}

uint64_t type metadata accessor for RecoveryFactorsControllerFactory()
{
  return self;
}

uint64_t type metadata accessor for DeviceStateFactory()
{
  return self;
}

uint64_t sub_100267000@<X0>(uint64_t *a1@<X8>)
{
  return sub_100005420((uint64_t (*)(void))type metadata accessor for DaemonDeviceState, a1);
}

uint64_t type metadata accessor for CustodianHealthCheckVersionProviderFactory()
{
  return self;
}

void sub_10026703C(void *a1@<X8>)
{
  a1[3] = &type metadata for CustodianHealthCheckVersionProvider;
  *a1 = 6;
}

uint64_t type metadata accessor for TapToRadarRequesterFactory()
{
  return self;
}

uint64_t sub_100267078@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000065D0((uint64_t (*)(void))type metadata accessor for TapToRadarRequestController, (uint64_t (*)(void))sub_10013487C, a1);
}

uint64_t type metadata accessor for CustodianIdMSConfirmationHandlerFactory()
{
  return self;
}

uint64_t type metadata accessor for AAAppleIDAuthenticationProviderFactory()
{
  return self;
}

uint64_t type metadata accessor for CDPFollowUpHandlerFactory()
{
  return self;
}

uint64_t sub_100267110@<X0>(uint64_t *a1@<X8>)
{
  return sub_100005420((uint64_t (*)(void))type metadata accessor for DaemonCDPFollowUpHandler, a1);
}

uint64_t type metadata accessor for WalrusPCSSignatureValidatorFactory()
{
  return self;
}

uint64_t sub_10026714C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100005420((uint64_t (*)(void))type metadata accessor for WalrusPCSSignatureValidator, a1);
}

uint64_t type metadata accessor for TapToRadarHelperFactory()
{
  return self;
}

uint64_t sub_100267188@<X0>(void *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)AAFTapToRadarHelper) init];
  uint64_t result = sub_10000850C(0, (unint64_t *)&unk_10032F8D0);
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t sub_1002671EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EnhancedAndAdvancedDataProtectionChecks();
  uint64_t v3 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACA0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032F8E0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100323AD0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032F8F0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  uint64_t result = Dependency.init(dependencyId:config:)();
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for EDPAndADPCheckingFactory()
{
  return self;
}

uint64_t sub_1002673AC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002671EC(a1);
}

BOOL static DeviceLockState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceLockState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DeviceLockState.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_10026744C()
{
  unint64_t result = qword_10032F8F8;
  if (!qword_10032F8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032F8F8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DeviceLockState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10026756CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

uint64_t type metadata accessor for CustodianshipHealthCheckAnalyticsEvent()
{
  uint64_t result = qword_10032F920;
  if (!qword_10032F920) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002675F0()
{
  sub_1000C520C();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

unint64_t sub_1002676AC(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D75736B63656863;
      break;
    case 2:
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0xD000000000000025;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100267790()
{
  uint64_t v4 = v0;
  uint64_t v5 = sub_100009F04(&qword_100325360);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AAUnderTest.getter();
  if (result) {
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v4 + qword_10032F918, v5);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_100008EF8(v50, v50[3]);
  sub_100009F04((uint64_t *)&unk_100325630);
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10024EC08(v49);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v51 = v12;
  sub_100008EA8((uint64_t)v50);
  NSString v13 = String._bridgeToObjectiveC()();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v50[0] = v51;
  unint64_t v51 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v13, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  unint64_t v51 = v50[0];
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  v50[0] = v51;
  unint64_t v51 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v15, 0x6E6F73616572, 0xE600000000000000, v16);
  unint64_t v51 = v50[0];
  swift_bridgeObjectRelease();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  v50[0] = v51;
  unint64_t v51 = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0x6961706552736177, 0xEB00000000646572, v18);
  unint64_t v51 = v50[0];
  swift_bridgeObjectRelease();
  uint64_t v19 = (unint64_t *)(v4 + qword_10032F900);
  swift_beginAccess();
  unint64_t v20 = *v19;
  if (*v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v20 = *v19;
    if (v44 < 2) {
      goto LABEL_21;
    }
  }
  else if (*(uint64_t *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_21;
  }
  if ((v20 & 0xC000000000000001) != 0) {
    goto LABEL_35;
  }
  if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_37;
  }
  id v21 = *(id *)(v20 + 40);
  while (1)
  {
    os_log_type_t v22 = (void *)sub_10016B5B0();

    uint64_t v1 = &off_10031D000;
    [v22 code];
    Class v23 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v3 = 0x8000000000000000;
    unint64_t v51 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v23, 0xD000000000000014, 0x800000010029C400, v24);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v2 = &off_10031D000;
    id v25 = [v22 domain];
    if (!v25) {
      goto LABEL_45;
    }
    uint64_t v26 = (uint64_t)v25;
    swift_beginAccess();
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v51 = 0x8000000000000000;
    sub_10022C68C(v26, 0xD000000000000016, 0x800000010029C420, v27);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v20 = *v19;
    if (*v19 >> 62)
    {
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t v20 = *v19;
      if (v45 < 3) {
        goto LABEL_21;
      }
    }
    else if (*(uint64_t *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3)
    {
      goto LABEL_21;
    }
    if ((v20 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
LABEL_41:
        swift_bridgeObjectRetain();
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v20 = *v19;
        if (v46 < 4) {
          goto LABEL_21;
        }
        goto LABEL_16;
      }
      id v28 = *(id *)(v20 + 48);
    }
    os_log_type_t v29 = (void *)sub_10016B5B0();

    [v29 v1[168]];
    Class v30 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v51 = v3;
    sub_10022C68C((uint64_t)v30, 0xD000000000000014, 0x800000010029C440, v31);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v32 = [v29 v2[182]];
    if (!v32) {
      goto LABEL_46;
    }
    uint64_t v33 = (uint64_t)v32;
    swift_beginAccess();
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v51 = v3;
    sub_10022C68C(v33, 0xD000000000000016, 0x800000010029C460, v34);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v20 = *v19;
    if (*v19 >> 62) {
      goto LABEL_41;
    }
    if (*(uint64_t *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4) {
      goto LABEL_21;
    }
LABEL_16:
    if ((v20 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) < 4uLL)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        JUMPOUT(0x100268124);
      }
      id v35 = *(id *)(v20 + 56);
    }
    id v36 = (void *)sub_10016B5B0();

    [v36 v1[168]];
    Class v37 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v51 = 0x8000000000000000;
    sub_10022C68C((uint64_t)v37, 0xD000000000000014, 0x800000010029C480, v38);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();
    id v39 = [v36 v2[182]];
    if (!v39) {
      goto LABEL_47;
    }
    uint64_t v40 = (uint64_t)v39;
    swift_beginAccess();
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v48 = v51;
    unint64_t v51 = 0x8000000000000000;
    sub_10022C68C(v40, 0xD000000000000016, 0x800000010029C4A0, v41);
    unint64_t v51 = v48;
    swift_bridgeObjectRelease();
    swift_endAccess();

    unint64_t v20 = *v19;
LABEL_21:
    if (v20 >> 62) {
      break;
    }
    uint64_t v19 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v19) {
      goto LABEL_30;
    }
LABEL_23:
    if ((v20 & 0xC000000000000001) != 0)
    {
      id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_26;
    }
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v42 = *(id *)(v20 + 32);
LABEL_26:
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v19 = (unint64_t *)sub_10016B5B0();

      goto LABEL_31;
    }
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter();
  if (v19) {
    goto LABEL_23;
  }
LABEL_30:
  swift_bridgeObjectRelease();
LABEL_31:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_100268140()
{
}

uint64_t sub_100268170()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_10032F918;
  uint64_t v2 = sub_100009F04(&qword_100325360);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_100268204()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_10026823C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + qword_10032F918;
  uint64_t v3 = sub_100009F04(&qword_100325360);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_1002682D4()
{
  return type metadata accessor for CustodianshipHealthCheckAnalyticsEvent();
}

uint64_t sub_1002682DC()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "{custodianID: ");
  HIBYTE(v16[1]) = -18;
  uint64_t v5 = type metadata accessor for CustodianRecord();
  v6._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001002A1910;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  sub_100019730(v0 + *(int *)(v5 + 64), (uint64_t)v4, (uint64_t *)&unk_100321CE0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_100006574((uint64_t)v4, (uint64_t *)&unk_100321CE0);
    uint64_t v10 = 0;
    unint64_t v11 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v10 = UUID.uuidString.getter();
    unint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
  v13._countAndFlagsBits = v10;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 125;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v16[0];
}

uint64_t sub_1002684C8()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "{custodianID: ");
  HIBYTE(v16[1]) = -18;
  uint64_t v5 = type metadata accessor for CustodianRecoverySessionRecord();
  v6._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001002A1910;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  sub_100019730(v0 + *(int *)(v5 + 48), (uint64_t)v4, (uint64_t *)&unk_100321CE0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    sub_100006574((uint64_t)v4, (uint64_t *)&unk_100321CE0);
    uint64_t v10 = 0;
    unint64_t v11 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v10 = UUID.uuidString.getter();
    unint64_t v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
  v13._countAndFlagsBits = v10;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 125;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v16[0];
}

uint64_t sub_1002686B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v4, v5);
  Swift::String v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(v2 + *(int *)(v4 + 64), (uint64_t)v11, (uint64_t *)&unk_100321CE0);
  sub_1002862BC(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, &v7[*(int *)(v4 + 20)], v12);
    sub_100286324((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_100006574((uint64_t)v11, (uint64_t *)&unk_100321CE0);
  }
  else
  {
    sub_100286324((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v12);
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t v17 = 0xD000000000000013;
  unint64_t v18 = 0x80000001002A1930;
  sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6D6F726620;
  v15._object = (void *)0xE500000000000000;
  String.append(_:)(v15);
  sub_100268CBC(v17, v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t))sub_1002682DC);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002689B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CustodianRecoverySessionRecord();
  __chkstk_darwin(v4, v5);
  Swift::String v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(v2 + *(int *)(v4 + 48), (uint64_t)v11, (uint64_t *)&unk_100321CE0);
  sub_1002862BC(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, &v7[*(int *)(v4 + 20)], v12);
    sub_100286324((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    sub_100006574((uint64_t)v11, (uint64_t *)&unk_100321CE0);
  }
  else
  {
    sub_100286324((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v12);
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t v17 = 0xD000000000000013;
  unint64_t v18 = 0x80000001002A1930;
  sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x6D6F726620;
  v15._object = (void *)0xE500000000000000;
  String.append(_:)(v15);
  sub_100268CBC(v17, v18, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(uint64_t))sub_1002684C8);
  return swift_bridgeObjectRelease();
}

void sub_100268CBC(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(uint64_t))
{
  uint64_t v12 = a3(0);
  __chkstk_darwin(v12 - 8, v13);
  Swift::String v15 = (char *)&v23 - v14;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E748);
  sub_1002862BC(v6, (uint64_t)v15, a4);
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_100135190(a1, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v21 = a6(v20);
    uint64_t v23 = sub_100135190(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v15, a5);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_100286324((uint64_t)v15, a5);
  }
}

void sub_100268F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for CustodianHealthRecord() + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033E9F8;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066284(a1, v13, (uint64_t)sub_100285344, (uint64_t)v7);
  swift_release();
}

void sub_1002690F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 40)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033E9F8;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066538(a1, v13, (uint64_t)sub_100283F28, (uint64_t)v7);
  swift_release();
}

void sub_1002692BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for CustodianRecord() + 48)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033E9F8;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_1000667EC(a1, v13, (uint64_t)sub_100283F14, (uint64_t)v7);
  swift_release();
}

void sub_100269488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for InheritanceInvitationRecord() + 44)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066D54(a1, v13, (uint64_t)sub_100285824, (uint64_t)v7);
  swift_release();
}

void sub_100269654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for CustodianshipInfoRecord() + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033E9F8;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100067008(a1, v13, (uint64_t)sub_100285358, (uint64_t)v7);
  swift_release();
}

void sub_100269820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100065FD0(a1, v13, (uint64_t)sub_100285810, (uint64_t)v7);
  swift_release();
}

void sub_1002699EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for BenefactorInfoRecord() + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_1000672BC(a1, v13, (uint64_t)sub_100285380, (uint64_t)v7);
  swift_release();
}

void sub_100269BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  Swift::String v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for InheritanceHealthRecord() + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066AA0(a1, v13, (uint64_t)sub_10028536C, (uint64_t)v7);
  swift_release();
}

uint64_t sub_100269D84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100323580);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_100323580);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_100323580);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005E978((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
}

uint64_t sub_10026A1AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_1003235A0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_1003235A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_1003235A0);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005ED14((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
}

uint64_t sub_10026A5D4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_10032E140);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_10032E140);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005F0B0((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
}

uint64_t sub_10026A9FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100325890);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_100325890);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005F7E8((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_10026AE24(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100324590);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, (uint64_t *)&unk_100324590);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005FB84((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_10026B24C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100321CF0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_100321CF0);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005E5DC((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_10026B674(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, (uint64_t *)&unk_100325860);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005FF20((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_10026BA9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_10032B730);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  Swift::String v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  os_log_type_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to cloud: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *Swift::String v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_10032B730);
  }
  else
  {
    sub_100285830((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      Class v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005F44C((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_100286324((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_10026BEC4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v150 = a6;
  uint64_t v155 = a5;
  v156 = a3;
  uint64_t v157 = a4;
  uint64_t v148 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v12);
  v145 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchQoS();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v14);
  v143 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DispatchTime();
  uint64_t v142 = *(void *)(v151 - 8);
  uint64_t v17 = __chkstk_darwin(v151, v16);
  v140 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v141 = (char *)&v124 - v20;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v138 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  v137 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_1003235F0);
  __chkstk_darwin(v24 - 8, v25);
  v154 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v149 = *(void *)(v136 - 8);
  uint64_t v27 = *(void *)(v149 + 64);
  uint64_t v29 = __chkstk_darwin(v136, v28);
  uint64_t v139 = (uint64_t)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v133 = (uint64_t)&v124 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v134 = (char *)&v124 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v132 = (uint64_t)&v124 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v135 = (uint64_t)&v124 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v124 - v43;
  uint64_t v45 = sub_100009F04(&qword_100321CF0);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  v153 = (uint64_t *)((char *)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  unint64_t v51 = (uint64_t *)((char *)&v124 - v50);
  sub_100019730(a1, (uint64_t)&v124 - v50, &qword_100321CF0);
  uint64_t v152 = v45;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v129 = a7;
    uint64_t v130 = a8;
    uint64_t v52 = *v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v128 = v54;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v131 = a2;
    if (v57)
    {
      char v58 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v58 = 136315138;
      id v127 = v58 + 4;
      uint64_t v159 = v52;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v159 = sub_100135190(v59, v60, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to cloud: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = (uint64_t)v154;
    if (v155 <= 2 && (swift_getErrorValue(), (uint64_t v67 = sub_1001A84EC(v160)) != 0))
    {
      id v68 = (void *)v67;
      type metadata accessor for CKError(0);
      uint64_t v159 = 14;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071FC((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v69 = (void *)aBlock[0];
      void aBlock[6] = aBlock[0];
      _BridgedStoredNSError.code.getter();

      uint64_t v70 = (void *)sub_1001A8B9C(v159, v68);
      uint64_t v71 = v149;
      uint64_t v126 = v52;
      id v127 = v68;
      if (v70)
      {
        unint64_t v72 = (void *)sub_1001A85D0(v68);
        if (v72)
        {
          uint64_t v73 = v136;
          int v74 = *(unsigned __int8 *)(v150 + *(int *)(v136 + 40));
          uint64_t v75 = v72;
          sub_10001686C(v75, v74, v66);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v66, 0, 1, v73);
          uint64_t v97 = v135;
          sub_100285830(v66, v135, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          uint64_t v98 = v132;
          sub_1002862BC(v97, v132, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          uint64_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.error.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          id v125 = v75;
          if (v101)
          {
            id v102 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)id v102 = 136315138;
            uint64_t v103 = UUID.uuidString.getter();
            uint64_t v159 = sub_100135190(v103, v104, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Trying to resave after conflict resolution %s", v102, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          }

          uint64_t v105 = v131;
          v154 = (char *)(v155 + 1);
          uint64_t v155 = (uint64_t)sub_100008EF8((void *)(v131 + 56), *(void *)(v131 + 80));
          uint64_t v106 = (uint64_t)v134;
          uint64_t v107 = v135;
          uint64_t v108 = v130;
          uint64_t v109 = v129;
          v129(v135);
          uint64_t v110 = v133;
          sub_1002862BC(v107, v133, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          unint64_t v111 = (*(unsigned __int8 *)(v149 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
          uint64_t v112 = (void *)swift_allocObject();
          uint64_t v113 = v156;
          uint64_t v114 = v157;
          v112[2] = v105;
          v112[3] = v113;
          uint64_t v115 = v154;
          v112[4] = v114;
          v112[5] = v115;
          sub_100285830(v110, (uint64_t)v112 + v111, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          uint64_t v116 = (void *)((char *)v112 + ((v27 + v111 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v116 = v109;
          v116[1] = v108;
          uint64_t v117 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v117 != -1) {
            swift_once();
          }
          id v118 = v127;
          if (*(unsigned char *)(v106 + *(int *)(v136 + 40)) == 1)
          {
            if (qword_100320CE8 != -1) {
              swift_once();
            }
            uint64_t v119 = &qword_10033EA28;
          }
          else
          {
            if (qword_100320CE0 != -1) {
              swift_once();
            }
            uint64_t v119 = &qword_10033EA18;
          }
          uint64_t v121 = *v119;
          unint64_t v120 = v119[1];
          swift_bridgeObjectRetain();
          id v122 = sub_10028CC20(v121, v120);
          id v123 = [v122 privateCloudDatabase];
          swift_bridgeObjectRelease();

          sub_100065FD0(v106, v123, (uint64_t)sub_1002855D8, (uint64_t)v112);
          swift_release();

          sub_100286324(v106, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          swift_errorRelease();
          return sub_100286324(v135, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        }
      }
      if (sub_1001A8AB4(v68) || sub_1001A8ABC(v68) || sub_1001A8AC4(v68) || sub_1001A8ACC(v68) || sub_1001A8AD4(v68))
      {
        sub_1001A89C0((uint64_t)v68);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v76 = v138;
        os_log_type_t v77 = v137;
        (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for DispatchQoS.QoSClass.default(_:), v21);
        v153 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v21);
        uint64_t v78 = v140;
        static DispatchTime.now()();
        id v79 = v141;
        + infix(_:_:)();
        v154 = *(char **)(v142 + 8);
        ((void (*)(char *, uint64_t))v154)(v78, v151);
        uint64_t v80 = v139;
        sub_1002862BC(v150, v139, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        unint64_t v81 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v82 = (v27 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v84 = v157;
        unint64_t v85 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = swift_allocObject();
        sub_100285830(v80, v86 + v81, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        *(void *)(v86 + v82) = v131;
        id v87 = (void *)(v86 + v83);
        uint64_t v88 = v130;
        *id v87 = v129;
        v87[1] = v88;
        uint64_t v89 = v156;
        *(void *)(v86 + v85) = v155;
        uint64_t v90 = (void *)(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v90 = v89;
        v90[1] = v84;
        aBlock[4] = (uint64_t)sub_1002855A8;
        aBlock[5] = v86;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_100303D28;
        uint64_t v91 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v92 = v143;
        static DispatchQoS.unspecified.getter();
        uint64_t v159 = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000071FC((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v93 = v145;
        uint64_t v94 = v148;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v95 = v153;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v91);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v93, v94);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v92, v146);
        ((void (*)(char *, uint64_t))v154)(v79, v151);
        return swift_release();
      }
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    else
    {
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    swift_errorRelease();
    return sub_100006574(v96, &qword_100321CF0);
  }
  sub_100285830((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E7A8);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud record saved to CloudKitStorage.", v64, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005E5DC((uint64_t)v44, 0, 2, (uint64_t)v156, v157);
  return sub_100286324((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_10026D078(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v149 = a6;
  uint64_t v154 = a5;
  uint64_t v155 = a4;
  v156 = a3;
  uint64_t v147 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147, v12);
  uint64_t v144 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for DispatchQoS();
  uint64_t v143 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v14);
  uint64_t v142 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = type metadata accessor for DispatchTime();
  uint64_t v141 = *(void *)(v150 - 8);
  uint64_t v17 = __chkstk_darwin(v150, v16);
  uint64_t v139 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v140 = (char *)&v123 - v20;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v137 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v136 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_1003235E0);
  __chkstk_darwin(v24 - 8, v25);
  v153 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v148 = *(void *)(v135 - 8);
  uint64_t v27 = *(void *)(v148 + 64);
  uint64_t v29 = __chkstk_darwin(v135, v28);
  uint64_t v138 = (uint64_t)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v132 = (uint64_t)&v123 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v133 = (char *)&v123 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v131 = (uint64_t)&v123 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v134 = (uint64_t)&v123 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v123 - v43;
  uint64_t v45 = sub_100009F04((uint64_t *)&unk_100324590);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  uint64_t v152 = (uint64_t *)((char *)&v123 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  unint64_t v51 = (uint64_t *)((char *)&v123 - v50);
  sub_100019730(a1, (uint64_t)&v123 - v50, (uint64_t *)&unk_100324590);
  uint64_t v151 = v45;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v128 = a7;
    uint64_t v129 = a8;
    uint64_t v52 = *v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v127 = v54;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v130 = a2;
    if (v57)
    {
      char v58 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v58 = 136315138;
      id v126 = v58 + 4;
      uint64_t v158 = v52;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v158 = sub_100135190(v59, v60, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to cloud: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = (uint64_t)v153;
    if (v154 <= 2 && (swift_getErrorValue(), (uint64_t v67 = sub_1001A84EC(v159)) != 0))
    {
      id v68 = (void *)v67;
      type metadata accessor for CKError(0);
      uint64_t v158 = 14;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071FC((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v69 = (void *)aBlock[0];
      void aBlock[6] = aBlock[0];
      _BridgedStoredNSError.code.getter();

      uint64_t v70 = (void *)sub_1001A8B9C(v158, v68);
      uint64_t v71 = v148;
      uint64_t v125 = v52;
      id v126 = v68;
      if (v70)
      {
        unint64_t v72 = (void *)sub_1001A85D0(v68);
        if (v72)
        {
          uint64_t v73 = v135;
          int v74 = *(unsigned __int8 *)(v149 + *(int *)(v135 + 36));
          uint64_t v75 = v72;
          sub_100113488(v75, v74, v66);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v66, 0, 1, v73);
          uint64_t v96 = v134;
          sub_100285830(v66, v134, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          uint64_t v97 = v131;
          sub_1002862BC(v96, v131, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          uint64_t v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.error.getter();
          BOOL v100 = os_log_type_enabled(v98, v99);
          id v124 = v75;
          if (v100)
          {
            BOOL v101 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)BOOL v101 = 136315138;
            uint64_t v102 = UUID.uuidString.getter();
            uint64_t v158 = sub_100135190(v102, v103, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100286324(v97, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "Trying to resave after conflict resolution %s", v101, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100286324(v97, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          }

          uint64_t v104 = v130;
          v153 = (char *)(v154 + 1);
          uint64_t v154 = (uint64_t)sub_100008EF8((void *)(v130 + 56), *(void *)(v130 + 80));
          uint64_t v105 = (uint64_t)v133;
          uint64_t v106 = v134;
          uint64_t v107 = v129;
          uint64_t v108 = v128;
          v128(v134);
          uint64_t v109 = v132;
          sub_1002862BC(v106, v132, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          unint64_t v110 = (*(unsigned __int8 *)(v148 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v148 + 80);
          unint64_t v111 = (void *)swift_allocObject();
          uint64_t v113 = v155;
          uint64_t v112 = v156;
          v111[2] = v104;
          v111[3] = v112;
          uint64_t v114 = v153;
          v111[4] = v113;
          v111[5] = v114;
          sub_100285830(v109, (uint64_t)v111 + v110, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          uint64_t v115 = (void *)((char *)v111 + ((v27 + v110 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v115 = v108;
          v115[1] = v107;
          uint64_t v116 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v116 != -1) {
            swift_once();
          }
          id v117 = v126;
          if (*(unsigned char *)(v105 + *(int *)(v135 + 36)) == 1)
          {
            if (qword_100320CD8 != -1) {
              swift_once();
            }
            id v118 = &qword_10033EA08;
          }
          else
          {
            if (qword_100320CD0 != -1) {
              swift_once();
            }
            id v118 = &qword_10033E9F8;
          }
          uint64_t v120 = *v118;
          unint64_t v119 = v118[1];
          swift_bridgeObjectRetain();
          id v121 = sub_10028CC20(v120, v119);
          id v122 = [v121 privateCloudDatabase];
          swift_bridgeObjectRelease();

          sub_100067008(v105, v122, (uint64_t)sub_1002861CC, (uint64_t)v111);
          swift_release();

          sub_100286324(v105, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          swift_errorRelease();
          return sub_100286324(v134, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        }
      }
      if (sub_1001A8AB4(v68) || sub_1001A8ABC(v68) || sub_1001A8AC4(v68) || sub_1001A8ACC(v68) || sub_1001A8AD4(v68))
      {
        sub_1001A89C0((uint64_t)v68);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v76 = v137;
        os_log_type_t v77 = v136;
        (*(void (**)(char *, void, uint64_t))(v137 + 104))(v136, enum case for DispatchQoS.QoSClass.default(_:), v21);
        uint64_t v152 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v21);
        uint64_t v78 = v139;
        static DispatchTime.now()();
        id v79 = v140;
        + infix(_:_:)();
        v153 = *(char **)(v141 + 8);
        ((void (*)(char *, uint64_t))v153)(v78, v150);
        uint64_t v80 = v138;
        sub_1002862BC(v149, v138, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        unint64_t v81 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v82 = (v27 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v84 = v155;
        unint64_t v85 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = swift_allocObject();
        sub_100285830(v80, v86 + v81, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        *(void *)(v86 + v82) = v130;
        id v87 = (void *)(v86 + v83);
        uint64_t v88 = v129;
        *id v87 = v128;
        v87[1] = v88;
        *(void *)(v86 + v85) = v154;
        uint64_t v89 = (void *)(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
        void *v89 = v156;
        v89[1] = v84;
        aBlock[4] = (uint64_t)sub_1002860C8;
        aBlock[5] = v86;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_100303F58;
        uint64_t v90 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v91 = v142;
        static DispatchQoS.unspecified.getter();
        uint64_t v158 = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000071FC((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v92 = v144;
        uint64_t v93 = v147;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v94 = v152;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v90);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v146 + 8))(v92, v93);
        (*(void (**)(char *, uint64_t))(v143 + 8))(v91, v145);
        ((void (*)(char *, uint64_t))v153)(v79, v150);
        return swift_release();
      }
      uint64_t v95 = (uint64_t)v152;
      *uint64_t v152 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v95);
    }
    else
    {
      uint64_t v95 = (uint64_t)v152;
      *uint64_t v152 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v95);
    }
    swift_errorRelease();
    return sub_100006574(v95, (uint64_t *)&unk_100324590);
  }
  sub_100285830((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E7A8);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud record saved to CloudKitStorage.", v64, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005FB84((uint64_t)v44, 0, 2, (uint64_t)v156, v155);
  return sub_100286324((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_10026E228(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v150 = a6;
  uint64_t v155 = a5;
  v156 = a3;
  uint64_t v157 = a4;
  uint64_t v148 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v12);
  uint64_t v145 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchQoS();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v14);
  uint64_t v143 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DispatchTime();
  uint64_t v142 = *(void *)(v151 - 8);
  uint64_t v17 = __chkstk_darwin(v151, v16);
  v140 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v141 = (char *)&v124 - v20;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v138 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v137 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_1003235F8);
  __chkstk_darwin(v24 - 8, v25);
  uint64_t v154 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v149 = *(void *)(v136 - 8);
  uint64_t v27 = *(void *)(v149 + 64);
  uint64_t v29 = __chkstk_darwin(v136, v28);
  uint64_t v139 = (uint64_t)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v133 = (uint64_t)&v124 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v134 = (char *)&v124 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v132 = (uint64_t)&v124 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v135 = (uint64_t)&v124 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v124 - v43;
  uint64_t v45 = sub_100009F04(&qword_100325890);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  v153 = (uint64_t *)((char *)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  unint64_t v51 = (uint64_t *)((char *)&v124 - v50);
  sub_100019730(a1, (uint64_t)&v124 - v50, &qword_100325890);
  uint64_t v152 = v45;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v129 = a7;
    uint64_t v130 = a8;
    uint64_t v52 = *v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v128 = v54;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v131 = a2;
    if (v57)
    {
      char v58 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v58 = 136315138;
      id v127 = v58 + 4;
      uint64_t v159 = v52;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v159 = sub_100135190(v59, v60, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to cloud: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = (uint64_t)v154;
    if (v155 <= 2 && (swift_getErrorValue(), (uint64_t v67 = sub_1001A84EC(v160)) != 0))
    {
      id v68 = (void *)v67;
      type metadata accessor for CKError(0);
      uint64_t v159 = 14;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071FC((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v69 = (void *)aBlock[0];
      void aBlock[6] = aBlock[0];
      _BridgedStoredNSError.code.getter();

      uint64_t v70 = (void *)sub_1001A8B9C(v159, v68);
      uint64_t v71 = v149;
      uint64_t v126 = v52;
      id v127 = v68;
      if (v70)
      {
        unint64_t v72 = (void *)sub_1001A85D0(v68);
        if (v72)
        {
          uint64_t v73 = v136;
          int v74 = *(unsigned __int8 *)(v150 + *(int *)(v136 + 44));
          id v75 = v72;
          sub_10028E3A8(v75, v74, v66);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v66, 0, 1, v73);
          uint64_t v97 = v135;
          sub_100285830(v66, v135, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          uint64_t v98 = v132;
          sub_1002862BC(v97, v132, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          os_log_type_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.error.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          id v125 = v75;
          if (v101)
          {
            uint64_t v102 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v102 = 136315138;
            uint64_t v103 = UUID.uuidString.getter();
            uint64_t v159 = sub_100135190(v103, v104, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Trying to resave after conflict resolution %s", v102, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          }

          uint64_t v105 = v131;
          uint64_t v154 = (char *)(v155 + 1);
          uint64_t v155 = (uint64_t)sub_100008EF8((void *)(v131 + 56), *(void *)(v131 + 80));
          uint64_t v106 = (uint64_t)v134;
          uint64_t v107 = v135;
          uint64_t v108 = v130;
          uint64_t v109 = v129;
          v129(v135);
          uint64_t v110 = v133;
          sub_1002862BC(v107, v133, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          unint64_t v111 = (*(unsigned __int8 *)(v149 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
          uint64_t v112 = (void *)swift_allocObject();
          uint64_t v113 = v156;
          uint64_t v114 = v157;
          v112[2] = v105;
          v112[3] = v113;
          uint64_t v115 = v154;
          v112[4] = v114;
          v112[5] = v115;
          sub_100285830(v110, (uint64_t)v112 + v111, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          uint64_t v116 = (void *)((char *)v112 + ((v27 + v111 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v116 = v109;
          v116[1] = v108;
          uint64_t v117 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v117 != -1) {
            swift_once();
          }
          id v118 = v127;
          if (*(unsigned char *)(v106 + *(int *)(v136 + 44)) == 1)
          {
            if (qword_100320CE8 != -1) {
              swift_once();
            }
            unint64_t v119 = &qword_10033EA28;
          }
          else
          {
            if (qword_100320CE0 != -1) {
              swift_once();
            }
            unint64_t v119 = &qword_10033EA18;
          }
          uint64_t v121 = *v119;
          unint64_t v120 = v119[1];
          swift_bridgeObjectRetain();
          id v122 = sub_10028CC20(v121, v120);
          id v123 = [v122 privateCloudDatabase];
          swift_bridgeObjectRelease();

          sub_100066D54(v106, v123, (uint64_t)sub_100285DA0, (uint64_t)v112);
          swift_release();

          sub_100286324(v106, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          swift_errorRelease();
          return sub_100286324(v135, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        }
      }
      if (sub_1001A8AB4(v68) || sub_1001A8ABC(v68) || sub_1001A8AC4(v68) || sub_1001A8ACC(v68) || sub_1001A8AD4(v68))
      {
        sub_1001A89C0((uint64_t)v68);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v76 = v138;
        os_log_type_t v77 = v137;
        (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for DispatchQoS.QoSClass.default(_:), v21);
        v153 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v21);
        uint64_t v78 = v140;
        static DispatchTime.now()();
        id v79 = v141;
        + infix(_:_:)();
        uint64_t v154 = *(char **)(v142 + 8);
        ((void (*)(char *, uint64_t))v154)(v78, v151);
        uint64_t v80 = v139;
        sub_1002862BC(v150, v139, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        unint64_t v81 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v82 = (v27 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v84 = v157;
        unint64_t v85 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = swift_allocObject();
        sub_100285830(v80, v86 + v81, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        *(void *)(v86 + v82) = v131;
        id v87 = (void *)(v86 + v83);
        uint64_t v88 = v130;
        *id v87 = v129;
        v87[1] = v88;
        uint64_t v89 = v156;
        *(void *)(v86 + v85) = v155;
        uint64_t v90 = (void *)(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v90 = v89;
        v90[1] = v84;
        aBlock[4] = (uint64_t)sub_100285D70;
        aBlock[5] = v86;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_100303EB8;
        uint64_t v91 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v92 = v143;
        static DispatchQoS.unspecified.getter();
        uint64_t v159 = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000071FC((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v93 = v145;
        uint64_t v94 = v148;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v95 = v153;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v91);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v93, v94);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v92, v146);
        ((void (*)(char *, uint64_t))v154)(v79, v151);
        return swift_release();
      }
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    else
    {
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    swift_errorRelease();
    return sub_100006574(v96, &qword_100325890);
  }
  sub_100285830((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E7A8);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud record saved to CloudKitStorage.", v64, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005F7E8((uint64_t)v44, 0, 2, (uint64_t)v156, v157);
  return sub_100286324((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_10026F3DC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v150 = a6;
  uint64_t v155 = a5;
  v156 = a3;
  uint64_t v157 = a4;
  uint64_t v148 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v12);
  uint64_t v145 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchQoS();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v14);
  uint64_t v143 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for DispatchTime();
  uint64_t v142 = *(void *)(v151 - 8);
  uint64_t v17 = __chkstk_darwin(v151, v16);
  v140 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v141 = (char *)&v124 - v20;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v138 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v137 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_1003235E8);
  __chkstk_darwin(v24 - 8, v25);
  uint64_t v154 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v149 = *(void *)(v136 - 8);
  uint64_t v27 = *(void *)(v149 + 64);
  uint64_t v29 = __chkstk_darwin(v136, v28);
  uint64_t v139 = (uint64_t)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v133 = (uint64_t)&v124 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v134 = (char *)&v124 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v132 = (uint64_t)&v124 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v135 = (uint64_t)&v124 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v124 - v43;
  uint64_t v45 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  v153 = (uint64_t *)((char *)&v124 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  unint64_t v51 = (uint64_t *)((char *)&v124 - v50);
  sub_100019730(a1, (uint64_t)&v124 - v50, (uint64_t *)&unk_100325860);
  uint64_t v152 = v45;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v129 = a7;
    uint64_t v130 = a8;
    uint64_t v52 = *v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v128 = v54;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v131 = a2;
    if (v57)
    {
      char v58 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v58 = 136315138;
      id v127 = v58 + 4;
      uint64_t v159 = v52;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v59 = String.init<A>(describing:)();
      uint64_t v159 = sub_100135190(v59, v60, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to cloud: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v66 = (uint64_t)v154;
    if (v155 <= 2 && (swift_getErrorValue(), (uint64_t v67 = sub_1001A84EC(v160)) != 0))
    {
      id v68 = (void *)v67;
      type metadata accessor for CKError(0);
      uint64_t v159 = 14;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000071FC((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v69 = (void *)aBlock[0];
      void aBlock[6] = aBlock[0];
      _BridgedStoredNSError.code.getter();

      uint64_t v70 = (void *)sub_1001A8B9C(v159, v68);
      uint64_t v71 = v149;
      uint64_t v126 = v52;
      id v127 = v68;
      if (v70)
      {
        unint64_t v72 = (void *)sub_1001A85D0(v68);
        if (v72)
        {
          uint64_t v73 = v136;
          int v74 = *(unsigned __int8 *)(v150 + *(int *)(v136 + 36));
          id v75 = v72;
          sub_1001BE70C(v75, v74, v66);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v71 + 56))(v66, 0, 1, v73);
          uint64_t v97 = v135;
          sub_100285830(v66, v135, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          uint64_t v98 = v132;
          sub_1002862BC(v97, v132, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          os_log_type_t v99 = Logger.logObject.getter();
          os_log_type_t v100 = static os_log_type_t.error.getter();
          BOOL v101 = os_log_type_enabled(v99, v100);
          id v125 = v75;
          if (v101)
          {
            uint64_t v102 = (uint8_t *)swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v102 = 136315138;
            uint64_t v103 = UUID.uuidString.getter();
            uint64_t v159 = sub_100135190(v103, v104, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
            _os_log_impl((void *)&_mh_execute_header, v99, v100, "Trying to resave after conflict resolution %s", v102, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100286324(v98, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          }

          uint64_t v105 = v131;
          uint64_t v154 = (char *)(v155 + 1);
          uint64_t v155 = (uint64_t)sub_100008EF8((void *)(v131 + 56), *(void *)(v131 + 80));
          uint64_t v106 = (uint64_t)v134;
          uint64_t v107 = v135;
          uint64_t v108 = v130;
          uint64_t v109 = v129;
          v129(v135);
          uint64_t v110 = v133;
          sub_1002862BC(v107, v133, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          unint64_t v111 = (*(unsigned __int8 *)(v149 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
          uint64_t v112 = (void *)swift_allocObject();
          uint64_t v113 = v156;
          uint64_t v114 = v157;
          v112[2] = v105;
          v112[3] = v113;
          uint64_t v115 = v154;
          v112[4] = v114;
          v112[5] = v115;
          sub_100285830(v110, (uint64_t)v112 + v111, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          uint64_t v116 = (void *)((char *)v112 + ((v27 + v111 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v116 = v109;
          v116[1] = v108;
          uint64_t v117 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v117 != -1) {
            swift_once();
          }
          id v118 = v127;
          if (*(unsigned char *)(v106 + *(int *)(v136 + 36)) == 1)
          {
            if (qword_100320CE8 != -1) {
              swift_once();
            }
            unint64_t v119 = &qword_10033EA28;
          }
          else
          {
            if (qword_100320CE0 != -1) {
              swift_once();
            }
            unint64_t v119 = &qword_10033EA18;
          }
          uint64_t v121 = *v119;
          unint64_t v120 = v119[1];
          swift_bridgeObjectRetain();
          id v122 = sub_10028CC20(v121, v120);
          id v123 = [v122 privateCloudDatabase];
          swift_bridgeObjectRelease();

          sub_1000672BC(v106, v123, (uint64_t)sub_100285A48, (uint64_t)v112);
          swift_release();

          sub_100286324(v106, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          swift_errorRelease();
          return sub_100286324(v135, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        }
      }
      if (sub_1001A8AB4(v68) || sub_1001A8ABC(v68) || sub_1001A8AC4(v68) || sub_1001A8ACC(v68) || sub_1001A8AD4(v68))
      {
        sub_1001A89C0((uint64_t)v68);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v76 = v138;
        os_log_type_t v77 = v137;
        (*(void (**)(char *, void, uint64_t))(v138 + 104))(v137, enum case for DispatchQoS.QoSClass.default(_:), v21);
        v153 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v21);
        uint64_t v78 = v140;
        static DispatchTime.now()();
        id v79 = v141;
        + infix(_:_:)();
        uint64_t v154 = *(char **)(v142 + 8);
        ((void (*)(char *, uint64_t))v154)(v78, v151);
        uint64_t v80 = v139;
        sub_1002862BC(v150, v139, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        unint64_t v81 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v82 = (v27 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v84 = v157;
        unint64_t v85 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = swift_allocObject();
        sub_100285830(v80, v86 + v81, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        *(void *)(v86 + v82) = v131;
        id v87 = (void *)(v86 + v83);
        uint64_t v88 = v130;
        *id v87 = v129;
        v87[1] = v88;
        uint64_t v89 = v156;
        *(void *)(v86 + v85) = v155;
        uint64_t v90 = (void *)(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v90 = v89;
        v90[1] = v84;
        aBlock[4] = (uint64_t)sub_100285A18;
        aBlock[5] = v86;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_100303E18;
        uint64_t v91 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v92 = v143;
        static DispatchQoS.unspecified.getter();
        uint64_t v159 = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000071FC((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v93 = v145;
        uint64_t v94 = v148;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v95 = v153;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v91);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v93, v94);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v92, v146);
        ((void (*)(char *, uint64_t))v154)(v79, v151);
        return swift_release();
      }
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    else
    {
      uint64_t v96 = (uint64_t)v153;
      void *v153 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v156(v96);
    }
    swift_errorRelease();
    return sub_100006574(v96, (uint64_t *)&unk_100325860);
  }
  sub_100285830((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E7A8);
  uint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cloud record saved to CloudKitStorage.", v64, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005FF20((uint64_t)v44, 0, 2, (uint64_t)v156, v157);
  return sub_100286324((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100270590(uint64_t a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v149 = a7;
  uint64_t v150 = a6;
  uint64_t v157 = a5;
  uint64_t v148 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v13);
  uint64_t v145 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for DispatchQoS();
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v15);
  uint64_t v143 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for DispatchTime();
  uint64_t v155 = *(void *)(v153 - 8);
  uint64_t v18 = __chkstk_darwin(v153, v17);
  uint64_t v142 = (char *)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  uint64_t v152 = (char *)&v125 - v21;
  uint64_t v140 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140, v22);
  uint64_t v138 = (char *)&v125 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v24 - 8, v25);
  v156 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for CustodianRecord();
  uint64_t v151 = *(void *)(v137 - 8);
  uint64_t v27 = *(void *)(v151 + 64);
  uint64_t v29 = __chkstk_darwin(v137, v28);
  uint64_t v141 = (uint64_t)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  uint64_t v134 = (uint64_t)&v125 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v135 = (char *)&v125 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v133 = (uint64_t)&v125 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v136 = (uint64_t)&v125 - v41;
  __chkstk_darwin(v40, v42);
  uint64_t v44 = (char *)&v125 - v43;
  uint64_t v45 = sub_100009F04(&qword_10032E140);
  uint64_t v47 = __chkstk_darwin(v45, v46);
  uint64_t v154 = (uint64_t *)((char *)&v125 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  unint64_t v51 = (uint64_t *)((char *)&v125 - v50);
  sub_100019730(a1, (uint64_t)&v125 - v50, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v52 = (void *)*v51;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    uint64_t v54 = sub_100007288(v53, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v129 = v54;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v132 = a2;
    uint64_t v131 = a8;
    if (v57)
    {
      uint64_t v130 = a4;
      char v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)char v58 = 136315138;
      id v128 = a3;
      uint64_t v158 = v52;
      aBlock[0] = v59;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v60 = String.init<A>(describing:)();
      uint64_t v158 = (void *)sub_100135190(v60, v61, aBlock);
      a3 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v130;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error saving to cloud: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v67 = (uint64_t)v156;
    if (v157 <= 2 && (swift_getErrorValue(), (id v68 = (void *)sub_1001A84EC(aBlock[7])) != 0))
    {
      uint64_t v69 = v68;
      BOOL v70 = sub_1001A85C8(v68);
      id v127 = v52;
      id v128 = v69;
      if (v70)
      {
        uint64_t v71 = (void *)sub_1001A85D0(v69);
        if (v71)
        {
          uint64_t v72 = v137;
          int v73 = *(unsigned __int8 *)(v150 + *(int *)(v137 + 48));
          id v74 = v71;
          sub_1000A9178(v74, v73, v67);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v151 + 56))(v67, 0, 1, v72);
          uint64_t v97 = v136;
          sub_100285830(v67, v136, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v98 = v97;
          uint64_t v99 = v133;
          sub_1002862BC(v98, v133, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          os_log_type_t v100 = Logger.logObject.getter();
          os_log_type_t v101 = static os_log_type_t.error.getter();
          BOOL v102 = os_log_type_enabled(v100, v101);
          id v126 = v74;
          if (v102)
          {
            uint64_t v103 = (uint8_t *)swift_slowAlloc();
            uint64_t v104 = swift_slowAlloc();
            uint64_t v130 = a4;
            aBlock[0] = v104;
            *(_DWORD *)uint64_t v103 = 136315138;
            uint64_t v105 = UUID.uuidString.getter();
            uint64_t v158 = (void *)sub_100135190(v105, v106, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100286324(v99, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
            _os_log_impl((void *)&_mh_execute_header, v100, v101, "Trying to resave after conflict resolution %s", v103, 0xCu);
            swift_arrayDestroy();
            a4 = v130;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100286324(v99, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          }

          uint64_t v107 = v132;
          uint64_t v108 = v131;
          v156 = (char *)(v157 + 1);
          uint64_t v157 = (uint64_t)sub_100008EF8((void *)(v132 + 56), *(void *)(v132 + 80));
          uint64_t v109 = v136;
          uint64_t v110 = v149;
          v149(v136);
          uint64_t v111 = v134;
          sub_1002862BC(v109, v134, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          unint64_t v112 = (*(unsigned __int8 *)(v151 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
          uint64_t v113 = (void *)swift_allocObject();
          v113[2] = v107;
          v113[3] = a3;
          uint64_t v114 = v156;
          v113[4] = a4;
          v113[5] = v114;
          sub_100285830(v111, (uint64_t)v113 + v112, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v115 = (void *)((char *)v113 + ((v27 + v112 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v115 = v110;
          v115[1] = v108;
          uint64_t v116 = qword_100320CC8;
          swift_retain();
          swift_retain();
          swift_retain();
          if (v116 != -1) {
            swift_once();
          }
          uint64_t v117 = (uint64_t)v135;
          id v118 = v128;
          unint64_t v119 = v126;
          if (v135[*(int *)(v137 + 48)] == 1)
          {
            if (qword_100320CD8 != -1) {
              swift_once();
            }
            unint64_t v120 = &qword_10033EA08;
          }
          else
          {
            if (qword_100320CD0 != -1) {
              swift_once();
            }
            unint64_t v120 = &qword_10033E9F8;
          }
          uint64_t v122 = *v120;
          unint64_t v121 = v120[1];
          swift_bridgeObjectRetain();
          id v123 = sub_10028CC20(v122, v121);
          id v124 = [v123 privateCloudDatabase];
          swift_bridgeObjectRelease();

          sub_1000667EC(v117, v124, (uint64_t)sub_100283B70, (uint64_t)v113);
          swift_release();

          sub_100286324(v117, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          swift_errorRelease();
          return sub_100286324(v136, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        }
      }
      if (sub_1001A8AB4(v69) || sub_1001A8ABC(v69) || sub_1001A8AC4(v69) || sub_1001A8ACC(v69) || sub_1001A8AD4(v69))
      {
        sub_1001A89C0((uint64_t)v69);
        sub_10000850C(0, (unint64_t *)&qword_10032A860);
        uint64_t v75 = v139;
        uint64_t v76 = v138;
        uint64_t v77 = v140;
        (*(void (**)(char *, void, uint64_t))(v139 + 104))(v138, enum case for DispatchQoS.QoSClass.default(_:), v140);
        uint64_t v154 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
        uint64_t v78 = v142;
        static DispatchTime.now()();
        + infix(_:_:)();
        id v79 = *(char **)(v155 + 8);
        v155 += 8;
        v156 = v79;
        ((void (*)(char *, uint64_t))v79)(v78, v153);
        uint64_t v80 = v141;
        sub_1002862BC(v150, v141, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        unint64_t v81 = (*(unsigned __int8 *)(v151 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
        unint64_t v82 = (v27 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v84 = a4;
        unint64_t v85 = (v83 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v86 = swift_allocObject();
        sub_100285830(v80, v86 + v81, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        *(void *)(v86 + v82) = v132;
        id v87 = (void *)(v86 + v83);
        uint64_t v88 = v131;
        *id v87 = v149;
        v87[1] = v88;
        *(void *)(v86 + v85) = v157;
        uint64_t v89 = (void *)(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
        void *v89 = a3;
        v89[1] = v84;
        aBlock[4] = (uint64_t)sub_100283DC8;
        aBlock[5] = v86;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100007244;
        void aBlock[3] = (uint64_t)&unk_100303990;
        uint64_t v90 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v91 = v143;
        static DispatchQoS.unspecified.getter();
        uint64_t v158 = _swiftEmptyArrayStorage;
        sub_1000071FC((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100009F04(&qword_10032BB00);
        sub_10000A534();
        uint64_t v92 = v145;
        uint64_t v93 = v148;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v94 = v152;
        uint64_t v95 = v154;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

        _Block_release(v90);
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v147 + 8))(v92, v93);
        (*(void (**)(char *, uint64_t))(v144 + 8))(v91, v146);
        ((void (*)(char *, uint64_t))v156)(v94, v153);
        return swift_release();
      }
      uint64_t v96 = (uint64_t)v154;
      void *v154 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      ((void (*)(uint64_t))a3)(v96);
    }
    else
    {
      uint64_t v96 = (uint64_t)v154;
      void *v154 = v52;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      ((void (*)(uint64_t))a3)(v96);
    }
    swift_errorRelease();
    return sub_100006574(v96, &qword_10032E140);
  }
  sub_100285830((uint64_t)v51, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v62 = type metadata accessor for Logger();
  sub_100007288(v62, (uint64_t)qword_10033E7A8);
  os_log_type_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Cloud record saved to CloudKitStorage.", v65, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
  sub_10005F0B0((uint64_t)v44, 0, 2, (uint64_t)a3, a4);
  return sub_100286324((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_1002716B8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v46 = a6;
  uint64_t v47 = a3;
  uint64_t v50 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v44 = *(void *)(v50 - 8);
  unint64_t v10 = *(void **)(v44 + 64);
  uint64_t v12 = __chkstk_darwin(v50, v11);
  uint64_t v45 = (uint64_t)&v42 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v51 = (uint64_t)&v42 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v42 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1002862BC(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = a5;
    uint64_t v53 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v43 = a4;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v52 = sub_100135190(v24, v25, &v53);
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy();
    a5 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = v48;
    sub_100008EF8((void *)(v48 + 56), *(void *)(v48 + 80));
    uint64_t v27 = a4;
    uint64_t v28 = v47;
    v47(a1);
    uint64_t v29 = v45;
    sub_1002862BC(a1, v45, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v44 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v31 = ((unint64_t)v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = (void *)swift_allocObject();
    uint64_t v32 = v46;
    v10[2] = v26;
    v10[3] = v32;
    v10[4] = v49;
    v10[5] = a5 + 1;
    sub_100285830(v29, (uint64_t)v10 + v30, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v33 = (void *)((char *)v10 + v31);
    *uint64_t v33 = v28;
    v33[1] = v27;
    uint64_t v34 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v34 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v51 + *(int *)(v50 + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA18;
  }
  uint64_t v37 = *v35;
  unint64_t v36 = v35[1];
  swift_bridgeObjectRetain();
  id v38 = sub_10028CC20(v37, v36);
  id v39 = [v38 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v40 = v51;
  sub_100065FD0(v51, v39, (uint64_t)sub_1002855D8, (uint64_t)v10);
  swift_release();

  return sub_100286324(v40, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_100271BC4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v51 = a2;
  uint64_t v52 = a7;
  uint64_t v48 = a6;
  uint64_t v50 = a3;
  uint64_t v49 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v46 = *(void *)(v49 - 8);
  unint64_t v10 = *(void **)(v46 + 64);
  uint64_t v12 = __chkstk_darwin(v49, v11);
  uint64_t v47 = (uint64_t)&v44 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v53 = (uint64_t)&v44 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v44 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1002862BC(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v45 = a1;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v44 = a4;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v54 = sub_100135190(v24, v25, &v55);
    a4 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }

  uint64_t v26 = a5 + 1;
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = v51;
    sub_100008EF8((void *)(v51 + 56), *(void *)(v51 + 80));
    uint64_t v28 = v45;
    uint64_t v29 = a4;
    unint64_t v30 = v50;
    v50(v45);
    uint64_t v31 = v47;
    sub_1002862BC(v28, v47, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    unint64_t v32 = (*(unsigned __int8 *)(v46 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    unint64_t v33 = ((unint64_t)v10 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = (void *)swift_allocObject();
    uint64_t v34 = v48;
    v10[2] = v27;
    v10[3] = v34;
    v10[4] = v52;
    v10[5] = v26;
    sub_100285830(v31, (uint64_t)v10 + v32, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v35 = (void *)((char *)v10 + v33);
    *uint64_t v35 = v30;
    v35[1] = v29;
    uint64_t v36 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v36 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v53 + *(int *)(v49 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033E9F8;
  }
  uint64_t v39 = *v37;
  unint64_t v38 = v37[1];
  swift_bridgeObjectRetain();
  id v40 = sub_10028CC20(v39, v38);
  id v41 = [v40 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v42 = v53;
  sub_100067008(v53, v41, (uint64_t)sub_1002861CC, (uint64_t)v10);
  swift_release();

  return sub_100286324(v42, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1002720C8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v46 = a6;
  uint64_t v47 = a3;
  uint64_t v50 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v44 = *(void *)(v50 - 8);
  unint64_t v10 = *(void **)(v44 + 64);
  uint64_t v12 = __chkstk_darwin(v50, v11);
  uint64_t v45 = (uint64_t)&v42 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v51 = (uint64_t)&v42 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v42 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1002862BC(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    BOOL v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = a5;
    uint64_t v53 = v23;
    *(_DWORD *)BOOL v22 = 136315138;
    uint64_t v43 = a4;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v52 = sub_100135190(v24, v25, &v53);
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy();
    a5 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = v48;
    sub_100008EF8((void *)(v48 + 56), *(void *)(v48 + 80));
    uint64_t v27 = a4;
    uint64_t v28 = v47;
    v47(a1);
    uint64_t v29 = v45;
    sub_1002862BC(a1, v45, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v44 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v31 = ((unint64_t)v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = (void *)swift_allocObject();
    uint64_t v32 = v46;
    v10[2] = v26;
    v10[3] = v32;
    v10[4] = v49;
    v10[5] = a5 + 1;
    sub_100285830(v29, (uint64_t)v10 + v30, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v33 = (void *)((char *)v10 + v31);
    *unint64_t v33 = v28;
    v33[1] = v27;
    uint64_t v34 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v34 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v51 + *(int *)(v50 + 44)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA18;
  }
  uint64_t v37 = *v35;
  unint64_t v36 = v35[1];
  swift_bridgeObjectRetain();
  id v38 = sub_10028CC20(v37, v36);
  id v39 = [v38 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v40 = v51;
  sub_100066D54(v51, v39, (uint64_t)sub_100285DA0, (uint64_t)v10);
  swift_release();

  return sub_100286324(v40, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_1002725D4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v46 = a6;
  uint64_t v47 = a3;
  uint64_t v50 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v44 = *(void *)(v50 - 8);
  unint64_t v10 = *(void **)(v44 + 64);
  uint64_t v12 = __chkstk_darwin(v50, v11);
  uint64_t v45 = (uint64_t)&v42 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v51 = (uint64_t)&v42 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v42 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1002862BC(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    BOOL v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = a5;
    uint64_t v53 = v23;
    *(_DWORD *)BOOL v22 = 136315138;
    uint64_t v43 = a4;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v52 = sub_100135190(v24, v25, &v53);
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy();
    a5 = v42;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = v48;
    sub_100008EF8((void *)(v48 + 56), *(void *)(v48 + 80));
    uint64_t v27 = a4;
    uint64_t v28 = v47;
    v47(a1);
    uint64_t v29 = v45;
    sub_1002862BC(a1, v45, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v44 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v31 = ((unint64_t)v10 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = (void *)swift_allocObject();
    uint64_t v32 = v46;
    v10[2] = v26;
    v10[3] = v32;
    v10[4] = v49;
    v10[5] = a5 + 1;
    sub_100285830(v29, (uint64_t)v10 + v30, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    unint64_t v33 = (void *)((char *)v10 + v31);
    *unint64_t v33 = v28;
    v33[1] = v27;
    uint64_t v34 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v34 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v51 + *(int *)(v50 + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v35 = &qword_10033EA18;
  }
  uint64_t v37 = *v35;
  unint64_t v36 = v35[1];
  swift_bridgeObjectRetain();
  id v38 = sub_10028CC20(v37, v36);
  id v39 = [v38 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v40 = v51;
  sub_1000672BC(v51, v39, (uint64_t)sub_100285A48, (uint64_t)v10);
  swift_release();

  return sub_100286324(v40, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100272AE0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v51 = a2;
  uint64_t v52 = a7;
  uint64_t v48 = a6;
  uint64_t v50 = a3;
  uint64_t v49 = type metadata accessor for CustodianRecord();
  uint64_t v46 = *(void *)(v49 - 8);
  unint64_t v10 = *(void **)(v46 + 64);
  uint64_t v12 = __chkstk_darwin(v49, v11);
  uint64_t v47 = (uint64_t)&v44 - (((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v53 = (uint64_t)&v44 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v44 - v17;
  if (qword_100320BA8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E7A8);
  sub_1002862BC(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v45 = a1;
  if (v22)
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v44 = a4;
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v54 = sub_100135190(v24, v25, &v55);
    a4 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  uint64_t v26 = a5 + 1;
  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v27 = v51;
    sub_100008EF8((void *)(v51 + 56), *(void *)(v51 + 80));
    uint64_t v28 = v45;
    uint64_t v29 = a4;
    unint64_t v30 = v50;
    v50(v45);
    uint64_t v31 = v47;
    sub_1002862BC(v28, v47, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v32 = (*(unsigned __int8 *)(v46 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    unint64_t v33 = ((unint64_t)v10 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = (void *)swift_allocObject();
    uint64_t v34 = v48;
    v10[2] = v27;
    v10[3] = v34;
    v10[4] = v52;
    v10[5] = v26;
    sub_100285830(v31, (uint64_t)v10 + v32, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v35 = (void *)((char *)v10 + v33);
    *uint64_t v35 = v30;
    v35[1] = v29;
    uint64_t v36 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v36 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  if (*(unsigned char *)(v53 + *(int *)(v49 + 48)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v37 = &qword_10033E9F8;
  }
  uint64_t v39 = *v37;
  unint64_t v38 = v37[1];
  swift_bridgeObjectRetain();
  id v40 = sub_10028CC20(v39, v38);
  id v41 = [v40 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v42 = v53;
  sub_1000667EC(v53, v41, (uint64_t)sub_100283B70, (uint64_t)v10);
  swift_release();

  return sub_100286324(v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_100272FE4()
{
  type metadata accessor for CustodianOwnerHealthCheck();
  sub_100009F04(&qword_10032FCE8);
  uint64_t result = String.init<A>(describing:)();
  qword_10032F970 = result;
  *(void *)algn_10032F978 = v1;
  return result;
}

uint64_t sub_100273030()
{
  sub_100009F04((uint64_t *)&unk_1003224B0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D780);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D770);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322460);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032CAF8);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue;
  id v2 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(v0 + v1) = v2;
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_maxRetryCount) = 3;
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount) = 0;
  [v2 setMaxConcurrentOperationCount:1];
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians) = &_swiftEmptySetSingleton;
  return v0;
}

uint64_t sub_100273264(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v51 = type metadata accessor for CustodianRecord();
  uint64_t v8 = *(void *)(v51 - 8);
  __chkstk_darwin(v51, v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_10032F970;
      unint64_t v29 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_100135190(v28, v29, (uint64_t *)&v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2112;
      uint64_t v30 = _convertErrorToNSError(_:)();
      uint64_t v52 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v30;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - error fetching custodian records: %@", (uint8_t *)v26, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }
    swift_errorRetain();
    v48(a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    int64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v45 = a5;
    uint64_t v46 = a1;
    if (v17)
    {
      uint64_t v53 = _swiftEmptyArrayStorage;
      sub_1002289A0(0, v17, 0);
      uint64_t v19 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      uint64_t v20 = *(void *)(v8 + 72);
      uint64_t v49 = v13 + 32;
      uint64_t v50 = v20;
      int64_t v44 = v17;
      do
      {
        sub_1002862BC(v19, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, &v11[*(int *)(v51 + 20)], v12);
        sub_100286324((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t v18 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002289A0(0, v18[2] + 1, 1);
          uint64_t v18 = v53;
        }
        unint64_t v22 = v18[2];
        unint64_t v21 = v18[3];
        if (v22 >= v21 >> 1)
        {
          sub_1002289A0(v21 > 1, v22 + 1, 1);
          uint64_t v18 = v53;
        }
        v18[2] = v22 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v22, v16, v12);
        uint64_t v53 = v18;
        v19 += v50;
        --v17;
      }
      while (v17);
      int64_t v17 = v44;
      a5 = v45;
    }
    uint64_t v31 = v47;
    uint64_t v32 = sub_100122A24((uint64_t)v18);
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    uint64_t v34 = OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount;
    *(void *)(v31 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount) = v33;
    BOOL v35 = v17 == v33;
    uint64_t v36 = v46;
    if (!v35)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E778);
      swift_retain();
      unint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        uint64_t v53 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315650;
        if (qword_100320CC0 != -1) {
          swift_once();
        }
        uint64_t v41 = qword_10032F970;
        unint64_t v42 = *(void *)algn_10032F978;
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_100135190(v41, v42, (uint64_t *)&v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2048;
        uint64_t v52 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 22) = 2048;
        uint64_t v52 = *(void *)(v47 + v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - Warning: Custodian records count %ld does not match unique custodian UUIDs count %ld", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v36 = v46;
      }
      else
      {

        swift_release();
      }
      a5 = v45;
    }
    return sub_100273998(v36, (uint64_t)v48, a5);
  }
}

uint64_t sub_100273998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v8 = *v3;
  type metadata accessor for PartialErrorHandler();
  swift_allocObject();
  uint64_t v9 = sub_10019FEE0();
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(type metadata accessor for CustodianRecord() - 8);
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100274270(v12, v4, v9, v8);
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void **)(v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = v4;
  v15[4] = v9;
  v15[5] = a2;
  v15[6] = a3;
  aBlock[4] = sub_100282728;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  void aBlock[3] = &unk_1003036C0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v14 addBarrierBlock:v16];
  _Block_release(v16);
  return swift_release();
}

uint64_t sub_100273BA8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__cloudStorage;
  uint64_t v2 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage;
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController;
  uint64_t v6 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__keyRepair;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100328400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler;
  uint64_t v10 = sub_100009F04(&qword_100324688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__securityController;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100322970);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__statusUpdater;
  uint64_t v14 = sub_100009F04(&qword_10032CBB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsAccountModel;
  uint64_t v16 = sub_100009F04(&qword_100325360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory;
  uint64_t v18 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100273E70()
{
  sub_100273BA8();

  return swift_deallocClassInstance();
}

uint64_t sub_100273EC8()
{
  return type metadata accessor for CustodianOwnerHealthCheck();
}

uint64_t type metadata accessor for CustodianOwnerHealthCheck()
{
  uint64_t result = qword_10032FA10;
  if (!qword_10032FA10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100273F1C()
{
  sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&unk_100324070, &qword_10032D780);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100324040, &qword_10032D770);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&unk_100327F40, (uint64_t *)&unk_100322460);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&qword_10032CAF0, (uint64_t *)&unk_10032CAF8);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, (unint64_t *)&qword_100325158, (uint64_t *)&unk_10032A630);
                if (v7 <= 0x3F)
                {
                  sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100274244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100282184(a3, a4);
}

void sub_100274270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002862BC(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  sub_100285830((uint64_t)v12, v16 + v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *(void *)(v16 + v14) = a2;
  *(void *)(v16 + v15) = a3;
  *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = a4;
  uint64_t v17 = (objc_class *)type metadata accessor for AsyncOperation();
  uint64_t v18 = objc_allocWithZone(v17);
  v18[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  uint64_t v19 = (uint64_t (**)(uint64_t, uint64_t))&v18[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *uint64_t v19 = sub_100282A28;
  v19[1] = (uint64_t (*)(uint64_t, uint64_t))v16;
  v21.receiver = v18;
  v21.super_class = v17;
  swift_retain();
  swift_retain();
  id v20 = [super init];
  [*(id *)(a2 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue) addOperation:v20];
}

uint64_t sub_100274450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v36 = a2;
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for CustodianRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (char *)&v29 - v14;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E778);
  sub_1002862BC(a3, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v31 = v8;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v38 = v30;
    *(_DWORD *)uint64_t v19 = 136315394;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_10032F970;
    unint64_t v21 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_100135190(v20, v21, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_100135190(v22, v23, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - performing healthCheck %s.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v32;
    uint64_t v8 = v31;
  }
  else
  {
    sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  sub_1002862BC(a3, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v24 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v35;
  sub_100285830((uint64_t)v12, v25 + v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v26 = (void *)(v25 + ((v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = v36;
  void *v26 = v34;
  v26[1] = v27;
  swift_retain();
  swift_retain();
  sub_1002749C8(a3, (uint64_t)sub_100282CF4, v25);
  return swift_release();
}

uint64_t sub_100274878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!a1) {
    return a4();
  }
  uint64_t v8 = (uint64_t *)(a3 + *(int *)(type metadata accessor for CustodianRecord() + 24));
  uint64_t v13 = *v8;
  uint64_t v14 = v8[1];
  swift_errorRetain();
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 58;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  swift_retain();
  sub_10019F5F4(v13, v14, a1, (uint64_t)sub_100033BF8, v11);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_errorRelease();
}

uint64_t sub_1002749C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v28 = a1;
  uint64_t v32 = *v3;
  uint64_t v5 = type metadata accessor for CustodianRecord();
  uint64_t v6 = v5 - 8;
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v29 + 64);
  __chkstk_darwin(v5, v8);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v27 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100321FF8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  os_log_type_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_100008EF8(v33, v33[3]);
  uint64_t v19 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v28 + *(int *)(v6 + 28), v9);
  sub_1002862BC(v19, (uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v20 = (*(unsigned __int8 *)(v29 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  unint64_t v21 = (void *)swift_allocObject();
  uint64_t v22 = v30;
  uint64_t v23 = v31;
  v21[2] = v4;
  v21[3] = v22;
  v21[4] = v23;
  sub_100285830((uint64_t)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v21 + v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *(void *)((char *)v21 + ((v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v32;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_100282F94;
  *(void *)(v24 + 24) = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002369EC((uint64_t)v13, (uint64_t)sub_100043AE8, v24);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v27);
  return sub_100008EA8((uint64_t)v33);
}

uint64_t sub_100274D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a4;
  v9[5] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10019FA5C((uint64_t)sub_100282780, (uint64_t)v9);

  return swift_release();
}

uint64_t sub_100274DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100009F04(&qword_100324688);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100008EF8(v19, v19[3]);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a2;
  v16[4] = a1;
  v16[5] = a4;
  v16[6] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  sub_100178348(v15, (uint64_t)sub_100282804, (uint64_t)v16);
  swift_release();
  return sub_100008EA8((uint64_t)v19);
}

uint64_t sub_100274FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (!a4)
  {
    uint64_t v10 = 0;
    if (!*(void *)(a2 + 16)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  sub_10000850C(0, (unint64_t *)&qword_100321D00);
  if (swift_dynamicCast()) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(void *)(a2 + 16))
  {
LABEL_6:
    uint64_t v11 = (char *)objc_allocWithZone((Class)type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent())
        + qword_1003272E8;
    *uint64_t v11 = 0;
    v11[1] = 0;
    sub_100009F04((uint64_t *)&unk_10032A630);
    Dependency.init(dependencyId:config:)();
    sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v12 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    uint64_t v13 = a3 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians;
    swift_beginAccess();
    sub_100111CA8(*(void *)(*(void *)v13 + 16), a1, v10);
  }
LABEL_7:

  return a5(a4);
}

uint64_t sub_100275138(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v60 = a5;
  uint64_t v63 = a2;
  uint64_t v61 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v61, v8);
  uint64_t v62 = (uint64_t)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100323190);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v15 - 8, v16);
  os_log_type_t v18 = (char *)v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (void *)((char *)v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v59[0] = a3;
    v59[1] = a4;
    uint64_t v23 = *v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v63 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory, v10);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    id v24 = objc_allocWithZone((Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent());
    uint64_t v25 = (char *)sub_10016A3A8(0, 1);
    sub_100008EA8((uint64_t)v65);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = v60;
    if (v29)
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to create custodian owner health check analytics event. Aborting...", v31, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = v61;
    uint64_t v33 = (uint64_t *)(v30 + *(int *)(v61 + 52));
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    uint64_t v36 = &v25[qword_100328AA8];
    *(void *)uint64_t v36 = v35;
    *((void *)v36 + 1) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v37 = v30 + *(int *)(v32 + 60);
    uint64_t v38 = *(void *)v37;
    LOBYTE(v37) = *(unsigned char *)(v37 + 8);
    os_log_type_t v39 = &v25[qword_100328AB0];
    *(void *)os_log_type_t v39 = v38;
    v39[8] = v37;
    uint64_t v40 = (uint64_t *)(v30 + *(int *)(v32 + 56));
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    uint64_t v43 = &v25[qword_100328AB8];
    *(void *)uint64_t v43 = v42;
    *((void *)v43 + 1) = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_getObjectType();
    _convertErrorToNSError(_:)();
    int64_t v44 = sub_10016B238();
    uint64_t v46 = v45;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    ((void (*)(uint64_t *, void))v44)(v65, 0);
    sub_10016A4DC(0, 10);

    uint64_t v47 = v62;
    sub_1002862BC(v30, v62, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v65[0] = v63;
      *(_DWORD *)uint64_t v50 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v52 = qword_10032F970;
      unint64_t v53 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100135190(v52, v53, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v54 = v62;
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_100135190(v55, v56, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v50 + 22) = 2112;
      uint64_t v57 = _convertErrorToNSError(_:)();
      uint64_t v64 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v51 = v57;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%s - error fetching health check record for %s: %@", (uint8_t *)v50, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100286324(v47, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    ((void (*)(uint64_t))v59[0])(v23);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100285830((uint64_t)v22, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    sub_1002758E8((uint64_t)v18, a3, a4);
    return sub_100286324((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
}

void sub_1002758E8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = type metadata accessor for CustodianRecord();
  uint64_t v15 = *(void *)(a1 + *(int *)(v14 + 36));
  sub_1002862BC(a1, (uint64_t)v13, type metadata accessor for CustodianshipRecords);
  if (v15 == 2)
  {
    sub_100286324((uint64_t)v13, type metadata accessor for CustodianshipRecords);
LABEL_4:
    sub_100275CAC(a1, (uint64_t)a2, a3);
    return;
  }
  uint64_t v16 = *(void *)&v13[*(int *)(v14 + 36)];
  sub_100286324((uint64_t)v13, type metadata accessor for CustodianshipRecords);
  if (v16 == 3) {
    goto LABEL_4;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E778);
  sub_1002862BC(a1, (uint64_t)v10, type metadata accessor for CustodianshipRecords);
  os_log_type_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v20 = 136315394;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_10032F970;
    unint64_t v21 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_100135190(v22, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = sub_100135190(v23, v24, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v10, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - custodian %s does not require a health check, ending check early.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v10, type metadata accessor for CustodianshipRecords);
  }

  a2(0);
}

void sub_100275CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v42 = *v3;
  uint64_t v43 = a2;
  uint64_t v7 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v7, v11);
  uint64_t v12 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_100323190);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory, v13);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v18 = a1 + *(int *)(v8 + 32);
  uint64_t v19 = v18 + *(int *)(type metadata accessor for CustodianHealthRecord() + 40);
  uint64_t v20 = *(void *)v19;
  LOBYTE(v13) = *(unsigned char *)(v19 + 8);
  id v21 = objc_allocWithZone((Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent());
  uint64_t v22 = (char *)sub_10016A3A8(v20, v13);
  sub_100008EA8((uint64_t)v44);
  *(void *)&v22[qword_100328AA0] = sub_1001BC124();
  uint64_t v23 = (int *)type metadata accessor for CustodianRecord();
  unint64_t v24 = (uint64_t *)(a1 + v23[13]);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v27 = &v22[qword_100328AA8];
  *(void *)uint64_t v27 = v26;
  *((void *)v27 + 1) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a1 + v23[15];
  uint64_t v29 = *(void *)v28;
  LOBYTE(v28) = *(unsigned char *)(v28 + 8);
  uint64_t v30 = &v22[qword_100328AB0];
  *(void *)uint64_t v30 = v29;
  v30[8] = v28;
  uint64_t v31 = (uint64_t *)(a1 + v23[14]);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  uint64_t v34 = &v22[qword_100328AB8];
  *(void *)uint64_t v34 = v33;
  *((void *)v34 + 1) = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  sub_1002862BC(a1, (uint64_t)v12, type metadata accessor for CustodianshipRecords);
  unint64_t v36 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v37 = (v10 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = (void *)swift_allocObject();
  _OWORD v38[2] = v22;
  v38[3] = &off_1002FDD28;
  v38[4] = v35;
  sub_100285830((uint64_t)v12, (uint64_t)v38 + v36, type metadata accessor for CustodianshipRecords);
  os_log_type_t v39 = (void *)((char *)v38 + v37);
  *os_log_type_t v39 = v43;
  v39[1] = a3;
  *(void *)((char *)v38 + ((v37 + 23) & 0xFFFFFFFFFFFFFFF8)) = v42;
  uint64_t v40 = v22;
  swift_retain();
  swift_retain();
  sub_10027758C(a1, (uint64_t (*)(uint64_t, void))sub_100283440, (uint64_t)v38);
  swift_release();
  swift_release();
}

uint64_t sub_100276068(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v84 = a8;
  uint64_t v88 = a7;
  uint64_t v91 = a4;
  uint64_t v92 = a3;
  uint64_t v12 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v82 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100009F04((uint64_t *)&unk_100328400);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v15);
  uint64_t v78 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v85 = *(void *)(v79 - 8);
  uint64_t v18 = __chkstk_darwin(v79, v17);
  uint64_t v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v19;
  __chkstk_darwin(v18, v21);
  uint64_t v87 = (uint64_t)&v75 - v22;
  uint64_t v83 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v23);
  uint64_t v76 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100009F04(&qword_100324688);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  uint64_t v29 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = a5 + 16;
  if (a2)
  {
    uint64_t v89 = v20;
    uint64_t v30 = a6;
    uint64_t ObjectType = swift_getObjectType();
    swift_errorRetain();
    _convertErrorToNSError(_:)();
    uint64_t v32 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v91 + 104))(v93, ObjectType);
    uint64_t v34 = v33;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v32(v93, 0);
    swift_errorRelease();
    a6 = v30;
    uint64_t v20 = v89;
  }
  if (a1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v36 = result;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, result + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v25);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      sub_100008EF8(v93, v94);
      uint64_t v37 = a6 + *(int *)(type metadata accessor for CustodianRecord() + 20);
      uint64_t v38 = a6;
      uint64_t v39 = v77;
      uint64_t v40 = (uint64_t)v76;
      uint64_t v41 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v37, v83);
      uint64_t v42 = v38;
      uint64_t v43 = v87;
      sub_1002862BC(v42, v87, type metadata accessor for CustodianshipRecords);
      unint64_t v44 = (*(unsigned __int8 *)(v85 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      unint64_t v45 = (v86 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v46 = (void *)swift_allocObject();
      uint64_t v47 = v91;
      v46[2] = v92;
      v46[3] = v47;
      v46[4] = v36;
      sub_100285830(v43, (uint64_t)v46 + v44, type metadata accessor for CustodianshipRecords);
      uint64_t v48 = (void *)((char *)v46 + v45);
      uint64_t v49 = v84;
      *uint64_t v48 = v88;
      v48[1] = v49;
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      sub_100179EDC(v40, (uint64_t)sub_1002835E4, (uint64_t)v46);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
      sub_100008EA8((uint64_t)v93);
      return swift_release();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100007288(v50, (uint64_t)qword_10033E778);
    sub_1002862BC(a6, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v89 = v20;
      uint64_t v53 = swift_slowAlloc();
      v93[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v54 = qword_10032F970;
      unint64_t v55 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_100135190(v54, v55, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      uint64_t v56 = (uint64_t)v89;
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v95 = sub_100135190(v57, v58, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324(v56, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s - marking custodian %s as not reachable, and attempting to re-share.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100286324((uint64_t)v20, type metadata accessor for CustodianshipRecords);
    }

    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v59 = v80;
      uint64_t v60 = v78;
      uint64_t v61 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v78, result + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__keyRepair, v81);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
      sub_100008EF8(v93, v94);
      uint64_t v62 = a6 + *(int *)(v79 + 20);
      uint64_t v63 = v84;
      uint64_t v64 = a6;
      uint64_t v65 = v82;
      sub_1002862BC(v62, v82, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      uint64_t v66 = (uint64_t *)(v64 + *(int *)(type metadata accessor for CustodianRecord() + 24));
      unint64_t v67 = v66[1];
      uint64_t v90 = *v66;
      uint64_t v68 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v69 = v87;
      sub_1002862BC(v64, v87, type metadata accessor for CustodianshipRecords);
      unint64_t v70 = (*(unsigned __int8 *)(v85 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      unint64_t v71 = (v86 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v72 = (void *)swift_allocObject();
      uint64_t v73 = v91;
      v72[2] = v92;
      v72[3] = v73;
      v72[4] = v68;
      sub_100285830(v69, (uint64_t)v72 + v70, type metadata accessor for CustodianshipRecords);
      id v74 = (void *)((char *)v72 + v71);
      void *v74 = v88;
      v74[1] = v63;
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      sub_100039220(v65, v90, v67, (void (*)(void))sub_1002835C8, (uint64_t)v72);
      swift_release();
      sub_100286324(v65, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      swift_release();
      return sub_100008EA8((uint64_t)v93);
    }
  }
  return result;
}

uint64_t sub_100276A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(), void *a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_errorRetain();
    _convertErrorToNSError(_:)();
    uint64_t v14 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 104))(v18, ObjectType, a3);
    uint64_t v16 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v14(v18, 0);
    swift_errorRelease();
  }
  *(unsigned char *)(a2 + qword_100328A90) = a1 == 0;
  sub_10016A4DC(0, 7);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100276C10(a5, a6, a7);
    return swift_release();
  }
  return result;
}

uint64_t sub_100276C10(uint64_t (*a1)(), void *a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v80 = a3;
  uint64_t v75 = *v3;
  uint64_t v76 = a2;
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v78 = (char *)v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v77 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for CustodianRecord();
  uint64_t v73 = *(void *)(v81 - 8);
  uint64_t v12 = *(void *)(v73 + 64);
  uint64_t v14 = __chkstk_darwin(v81, v13);
  uint64_t v79 = (uint64_t)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v82 = (uint64_t)v67 - v17;
  __chkstk_darwin(v16, v18);
  uint64_t v74 = (uint64_t)v67 - v19;
  uint64_t v20 = sub_100009F04(&qword_100322950);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v72, v25);
  uint64_t v27 = (char *)v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E778);
  sub_1002862BC((uint64_t)a1, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v68 = v21;
    uint64_t v69 = v20;
    uint64_t v70 = (uint64_t)v3;
    unint64_t v71 = a1;
    uint64_t v31 = swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v33 = qword_10032F970;
    unint64_t v32 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v83 = sub_100135190(v33, v32, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    v67[1] = v31 + 14;
    type metadata accessor for CustodianHealthRecord();
    type metadata accessor for UUID();
    sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v83 = sub_100135190(v34, v35, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - custodian %s is being marked as Not reachable.", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v4 = (void *)v70;
    a1 = v71;
    uint64_t v21 = v68;
    uint64_t v20 = v69;
  }
  else
  {
    sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
  }
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = 3;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v20);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  uint64_t v36 = sub_100008EF8(v84, v84[3]);
  uint64_t v37 = v74;
  sub_1002862BC((uint64_t)a1, v74, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v38 = *(unsigned __int8 *)(v73 + 80);
  uint64_t v39 = (v38 + 16) & ~v38;
  uint64_t v40 = (uint64_t)a1;
  uint64_t v70 = v38 | 7;
  uint64_t v73 = v12 + 7;
  unint64_t v41 = (v12 + 7 + v39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = swift_allocObject();
  unint64_t v71 = type metadata accessor for CustodianRecord;
  sub_100285830(v37, v44 + v39, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *(void *)(v44 + v41) = 3;
  unint64_t v45 = (void *)(v44 + v42);
  uint64_t v46 = v80;
  *unint64_t v45 = v76;
  v45[1] = v46;
  *(void *)(v44 + v43) = v75;
  uint64_t v47 = *v36;
  uint64_t v76 = sub_100008EF8((void *)(v47 + 56), *(void *)(v47 + 80));
  uint64_t v48 = v40;
  sub_1002862BC(v40, v37, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v50 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v77, 1, 1, v49);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v52 = (uint64_t)v78;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v78, 1, 1, v51);
  uint64_t v53 = v72;
  swift_retain();
  swift_retain();
  uint64_t v54 = v82;
  sub_1000A83E8(v37, 0, 0, 3, 0, 0, 0xF000000000000000, 2u, v82, v50, 0, 0, v52, 0);
  uint64_t v55 = v79;
  sub_1002862BC(v48, v79, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v56 = (v38 + 48) & ~v38;
  unint64_t v57 = (v73 + v56) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = (void *)swift_allocObject();
  void v58[2] = v47;
  v58[3] = sub_100283B68;
  v58[4] = v44;
  v58[5] = 0;
  sub_100285830(v55, (uint64_t)v58 + v56, (uint64_t (*)(void))v71);
  uint64_t v59 = (void *)((char *)v58 + v57);
  *uint64_t v59 = sub_100286384;
  v59[1] = v53;
  uint64_t v60 = qword_100320CC8;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v60 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(v54 + *(int *)(v81 + 48)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v61 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v61 = &qword_10033E9F8;
  }
  uint64_t v63 = *v61;
  unint64_t v62 = v61[1];
  swift_bridgeObjectRetain();
  id v64 = sub_10028CC20(v63, v62);
  id v65 = [v64 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_1000667EC(v54, v65, (uint64_t)sub_100283B70, (uint64_t)v58);
  swift_release();

  sub_100286324(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_release();
  swift_release_n();
  return sub_100008EA8((uint64_t)v84);
}

uint64_t sub_10027758C(uint64_t a1, uint64_t (*a2)(uint64_t, void), uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v33 = *v3;
  uint64_t v34 = a2;
  uint64_t v7 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v32 + 64);
  __chkstk_darwin(v7, v9);
  uint64_t v10 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100324680);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__cloudStorage, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v35, (uint64_t)v38);
    sub_1002862BC(a1 + *(int *)(v7 + 24), (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_1002862BC(a1, (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    unint64_t v19 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    unint64_t v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    sub_100285830((uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v19, type metadata accessor for CustodianshipRecords);
    uint64_t v22 = (void *)(v21 + v20);
    *uint64_t v22 = v34;
    v22[1] = a3;
    *(void *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v33;
    swift_retain();
    sub_100103F4C((uint64_t)v13, (uint64_t)sub_100283508, v21);
    swift_release();
    sub_100286324((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    return sub_100008EA8((uint64_t)v38);
  }
  else
  {
    uint64_t v24 = v34;
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    sub_100006574((uint64_t)v35, (uint64_t *)&unk_10032B4A0);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E778);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v29 = qword_10032F970;
      unint64_t v30 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_100135190(v29, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - isSharedAndAccepted unable to obtain pointer to CloudKitSharing", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return v24(1, 0);
  }
}

uint64_t sub_100277A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7)
{
  if (a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_errorRetain();
    _convertErrorToNSError(_:)();
    uint64_t v29 = a2;
    uint64_t v12 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a3 + 104))(v31, ObjectType, a3);
    uint64_t v14 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v12(v31, 0);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412290;
      swift_errorRetain();
      uint64_t v19 = a5;
      uint64_t v20 = a3;
      uint64_t v21 = a6;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      v31[0] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v22;
      a6 = v21;
      a3 = v20;
      a5 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Finished confirmCustodianWithIdMS with error %@", v18, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    a2 = v29;
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Finished confirmCustodianWithIdMS successfully", v26, 2u);
      swift_slowDealloc();
    }
  }
  return sub_100277E08(a5, a2, a3, a6, a7);
}

uint64_t sub_100277E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v103 = a4;
  uint64_t v104 = a5;
  uint64_t v100 = a3;
  uint64_t v106 = a2;
  uint64_t v101 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v101 - 8);
  uint64_t v7 = __chkstk_darwin(v101, v6);
  uint64_t v98 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v97 = (uint64_t)&v91 - v10;
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v92 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v92 + 64);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v96 = (uint64_t)&v91 - v18;
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v95 = (uint64_t)&v91 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v91 = (uint64_t)&v91 - v24;
  __chkstk_darwin(v23, v25);
  os_log_type_t v27 = (char *)&v91 - v26;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v33 = (char *)&v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (char *)&v91 - v35;
  uint64_t v94 = v11;
  uint64_t v37 = *(int *)(v11 + 24);
  uint64_t v105 = a1;
  uint64_t v38 = a1 + v37;
  uint64_t v93 = type metadata accessor for CustodianHealthRecord();
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v36, v38 + *(int *)(v93 + 24), v28);
  Date.init(timeIntervalSince1970:)();
  sub_1000071FC(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v29 + 8);
  v39(v33, v28);
  v39(v36, v28);
  if (a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E778);
    uint64_t v41 = v105;
    sub_1002862BC(v105, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      v107[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v45 = qword_10032F970;
      unint64_t v46 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_100135190(v45, v46, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = v101;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v108 = sub_100135190(v48, v49, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - custodian %s hasn't updated to a version that has Health Check enabled. Skipping validation of recipient updated attributes.", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);

      uint64_t v47 = v101;
    }
    uint64_t v60 = type metadata accessor for CustodianRecord();
    unint64_t v62 = v98;
    uint64_t v61 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v41 + *(int *)(v60 + 20), v47);
    swift_beginAccess();
    uint64_t v63 = v97;
    sub_100280040(v97, v62);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v63, v47);
    swift_endAccess();
    sub_10016A4DC(1, 0);
    return v103(0);
  }
  else if (sub_1001BBF04())
  {
    uint64_t v50 = v105;
    uint64_t v51 = v106;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100007288(v52, (uint64_t)qword_10033E778);
    sub_1002862BC(v50, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      v107[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v56 = qword_10032F970;
      unint64_t v57 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_100135190(v56, v57, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2080;
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v108 = sub_100135190(v58, v59, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s - custodian %s is reachable, continue health check.", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v50 = v105;
    }
    else
    {
      sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    }
    uint64_t v80 = v91;
    sub_1002862BC(v50, v91, type metadata accessor for CustodianshipRecords);
    unint64_t v81 = (*(unsigned __int8 *)(v92 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
    uint64_t v82 = (void *)swift_allocObject();
    uint64_t v83 = v100;
    v82[2] = v51;
    v82[3] = v83;
    v82[4] = v102;
    sub_100285830(v80, (uint64_t)v82 + v81, type metadata accessor for CustodianshipRecords);
    uint64_t v84 = (void *)((char *)v82 + ((v12 + v81 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v85 = v104;
    *uint64_t v84 = v103;
    v84[1] = v85;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    sub_10027A794(v50, sub_1002839C8, (uint64_t)v82);
    return swift_release();
  }
  else
  {
    uint64_t v65 = v105;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100007288(v66, (uint64_t)qword_10033E778);
    uint64_t v67 = v95;
    sub_1002862BC(v65, v95, type metadata accessor for CustodianshipRecords);
    uint64_t v68 = v96;
    sub_1002862BC(v65, v96, type metadata accessor for CustodianshipRecords);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      v107[0] = v99;
      *(_DWORD *)uint64_t v71 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v73 = qword_10032F970;
      unint64_t v72 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v108 = sub_100135190(v73, v72, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      uint64_t v74 = v95;
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v108 = sub_100135190(v75, v76, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324(v74, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v71 + 22) = 2080;
      uint64_t v77 = v96;
      sub_1000071FC(&qword_100326378, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v108 = sub_100135190(v78, v79, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324(v77, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s - custodian %s last check in was %s, marking as not reachable.", (uint8_t *)v71, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v65 = v105;
    }
    else
    {
      sub_100286324(v67, type metadata accessor for CustodianshipRecords);
      sub_100286324(v68, type metadata accessor for CustodianshipRecords);
    }
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for AACustodianError(0);
    v107[0] = -7016;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071FC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v87 = (void *)v108;
    _convertErrorToNSError(_:)();

    uint64_t v88 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v100 + 104))(v107, ObjectType);
    uint64_t v90 = v89;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v88(v107, 0);
    sub_10016A4DC(0, 8);
    return sub_100278C44(v65, (uint64_t)v103, v104);
  }
}

uint64_t sub_100278C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v55 = a3;
  uint64_t v50 = a2;
  uint64_t v53 = *v3;
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v54 - 8);
  uint64_t v6 = v51;
  __chkstk_darwin(v54, v7);
  uint64_t v52 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CustodianRecord();
  uint64_t v10 = v9 - 8;
  uint64_t v46 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v46 + 64);
  __chkstk_darwin(v9, v12);
  uint64_t v45 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_10032CBB0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  uint64_t v19 = updated - 8;
  uint64_t v49 = *(void *)(updated - 8);
  uint64_t v48 = *(void *)(v49 + 64);
  uint64_t v21 = __chkstk_darwin(updated, v20);
  uint64_t v47 = (uint64_t)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)&v43 - v24;
  uint64_t v26 = a1 + *(int *)(v10 + 28);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v27 = v54;
  v44((char *)&v43 - v24, v26, v54);
  *(void *)&v25[*(int *)(v19 + 28)] = 3;
  v25[*(int *)(v19 + 32)] = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__statusUpdater, v13);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v28 = sub_100008EF8(v57, v57[3]);
  uint64_t v29 = v45;
  sub_1002862BC(a1, v45, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v30 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  unint64_t v31 = (v11 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = swift_allocObject();
  sub_100285830(v29, v32 + v30, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v33 = (void *)(v32 + v31);
  uint64_t v34 = v55;
  *uint64_t v33 = v50;
  v33[1] = v34;
  *(void *)(v32 + ((v31 + 23) & 0xFFFFFFFFFFFFFFF8)) = v53;
  uint64_t v35 = *v28;
  sub_100008A94(v35 + 16, (uint64_t)v56);
  sub_100008EF8(v56, v56[3]);
  uint64_t v36 = (uint64_t)v52;
  v44(v52, (uint64_t)v25, v27);
  uint64_t v37 = v47;
  sub_1002862BC((uint64_t)v25, v47, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
  unint64_t v38 = (*(unsigned __int8 *)(v49 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  unint64_t v39 = (v48 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = swift_allocObject();
  sub_100285830(v37, v40 + v38, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
  *(void *)(v40 + v39) = v35;
  uint64_t v41 = (uint64_t (**)(uint64_t))(v40 + ((v39 + 15) & 0xFFFFFFFFFFFFFFF8));
  void *v41 = sub_100284E2C;
  v41[1] = (uint64_t (*)(uint64_t))v32;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10023B75C(v36, (uint64_t)sub_100208098, v40);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v36, v54);
  sub_100008EA8((uint64_t)v56);
  swift_release();
  sub_100286324((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
  return sub_100008EA8((uint64_t)v57);
}

void sub_100279184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    uint64_t v15 = a7;
    uint64_t ObjectType = swift_getObjectType();
    swift_errorRetain();
    _convertErrorToNSError(_:)();
    uint64_t v12 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a3 + 104))(v16, ObjectType, a3);
    uint64_t v14 = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v12(v16, 0);
    swift_errorRelease();
    a7 = v15;
  }
  sub_1002792B4(a5, a2, a3, a6, a7);
}

void sub_1002792B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v187 = a4;
  uint64_t v188 = a5;
  uint64_t v183 = a3;
  uint64_t v177 = *v5;
  uint64_t v8 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v163 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v164 = (uint64_t)&v154 - v13;
  uint64_t v14 = sub_100009F04(&qword_100322950);
  uint64_t v175 = *(void *)(v14 - 8);
  uint64_t v176 = v14;
  __chkstk_darwin(v14, v15);
  v174 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v17 - 8, v18);
  v168 = (char *)&v154 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v20 - 8, v21);
  v173 = (char *)&v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for CustodianRecord();
  uint64_t v169 = *(void *)(v165 - 8);
  uint64_t v23 = *(void *)(v169 + 64);
  uint64_t v25 = __chkstk_darwin(v165, v24);
  uint64_t v170 = (uint64_t)&v154 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  uint64_t v172 = (uint64_t)&v154 - v28;
  __chkstk_darwin(v27, v29);
  unint64_t v31 = (char *)&v154 - v30;
  uint64_t v32 = type metadata accessor for CustodianshipRecords(0);
  unint64_t v181 = *(void *)(v32 - 8);
  uint64_t v33 = *(void *)(v181 + 64);
  uint64_t v35 = __chkstk_darwin(v32, v34);
  os_log_t v186 = (os_log_t)((char *)&v154 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v162 = (uint64_t)&v154 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v167 = (uint64_t)&v154 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v178 = (uint64_t)&v154 - v44;
  uint64_t v46 = __chkstk_darwin(v43, v45);
  uint64_t v166 = (uint64_t)&v154 - v47;
  uint64_t v49 = __chkstk_darwin(v46, v48);
  uint64_t v184 = (uint64_t)&v154 - v50;
  uint64_t v52 = __chkstk_darwin(v49, v51);
  uint64_t v180 = (uint64_t)&v154 - v53;
  __chkstk_darwin(v52, v54);
  uint64_t v179 = (uint64_t)&v154 - v55;
  uint64_t v56 = type metadata accessor for SHA256();
  uint64_t v57 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v58);
  uint64_t v60 = (char *)&v154 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a1 + *(int *)(v32 + 20);
  uint64_t v171 = v8;
  unint64_t v62 = (uint64_t *)(v61 + *(int *)(v8 + 32));
  unint64_t v63 = v62[1];
  if (v63 >> 60 == 15)
  {
    sub_10016A4DC(0, 5);
    type metadata accessor for AACustodianError(0);
    uint64_t v191 = -7028;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071FC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v64 = v189;
    ((void (*)(void *))v187)(v189);
LABEL_20:

    return;
  }
  uint64_t v158 = v31;
  uint64_t v182 = a2;
  uint64_t v65 = *v62;
  unint64_t v66 = v63;
  sub_100013140(*v62, v63);
  SHA256.init()();
  uint64_t v160 = v65;
  unint64_t v161 = v66;
  uint64_t v67 = sub_100254E08((uint64_t)v60, v65, v66);
  unint64_t v69 = v68;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
  uint64_t v70 = a1;
  uint64_t v71 = a1 + *(int *)(v32 + 24);
  uint64_t v159 = type metadata accessor for CustodianHealthRecord();
  unint64_t v72 = (uint64_t *)(v71 + *(int *)(v159 + 28));
  uint64_t v73 = *v72;
  unint64_t v74 = v72[1];
  uint64_t v75 = v32;
  if (v74 >> 60 == 15)
  {
    sub_1000196A0(v67, v69);
    sub_1000196A0(v73, v74);
LABEL_12:
    uint64_t v88 = (void (*)(void *))v187;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    sub_100007288(v89, (uint64_t)qword_10033E778);
    uint64_t v90 = v70;
    os_log_t v91 = v186;
    sub_1002862BC(v90, (uint64_t)v186, type metadata accessor for CustodianshipRecords);
    uint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc();
      v189 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v94 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v95 = qword_10032F970;
      unint64_t v96 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v191 = sub_100135190(v95, v96, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 12) = 2080;
      os_log_t v97 = v186;
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v191 = sub_100135190(v98, v99, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v97, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s - checksum is invalid for %s, no action taken at the moment.", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100286324((uint64_t)v91, type metadata accessor for CustodianshipRecords);
    }
    *(unsigned char *)(v182 + qword_100328A90) = 1;
    sub_10016A4DC(0, 6);
    type metadata accessor for AACustodianError(0);
    uint64_t v191 = -7015;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071FC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v64 = v189;
    v88(v189);
    sub_1000196A0(v160, v161);
    goto LABEL_20;
  }
  sub_100013140(v67, v69);
  sub_1000196B4(v73, v74);
  char v76 = sub_100012680(v67, v69, v73, v74);
  sub_1000196A0(v73, v74);
  sub_100013198(v67, v69);
  sub_100013198(v67, v69);
  if ((v76 & 1) == 0) {
    goto LABEL_12;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  sub_100007288(v77, (uint64_t)qword_10033E778);
  uint64_t v78 = v70;
  uint64_t v79 = v179;
  sub_1002862BC(v70, v179, type metadata accessor for CustodianshipRecords);
  uint64_t v80 = Logger.logObject.getter();
  int v81 = static os_log_type_t.default.getter();
  BOOL v82 = os_log_type_enabled(v80, (os_log_type_t)v81);
  uint64_t v157 = v75;
  if (v82)
  {
    int v156 = v81;
    os_log_t v186 = v80;
    uint64_t v83 = swift_slowAlloc();
    uint64_t v155 = swift_slowAlloc();
    v189 = (void *)v155;
    *(_DWORD *)uint64_t v83 = 136315394;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v84 = qword_10032F970;
    unint64_t v85 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v191 = sub_100135190(v84, v85, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v191 = sub_100135190(v86, v87, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324(v79, type metadata accessor for CustodianshipRecords);
    uint64_t v80 = v186;
    _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v156, "%s - custodian %s recovery key checksum is valid.", (uint8_t *)v83, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324(v79, type metadata accessor for CustodianshipRecords);
  }

  uint64_t v100 = (uint64_t)v158;
  sub_1002862BC(v78, (uint64_t)v158, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v101 = v180;
  sub_1002862BC(v78, v180, type metadata accessor for CustodianshipRecords);
  sub_1002862BC(v101, v184, type metadata accessor for CustodianshipRecords);
  uint64_t v102 = *(unsigned __int8 *)(v181 + 80);
  uint64_t v103 = (v102 + 24) & ~v102;
  uint64_t v179 = v102;
  uint64_t v159 = v33 + 7;
  unint64_t v104 = (v33 + 7 + v103) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v105 = (v104 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v181 = v105 + 16;
  os_log_t v186 = (os_log_t)(v102 | 7);
  uint64_t v106 = swift_allocObject();
  *(void *)(v106 + 16) = v185;
  sub_100285830(v101, v106 + v103, type metadata accessor for CustodianshipRecords);
  uint64_t v107 = (uint64_t *)(v106 + v104);
  uint64_t v108 = v183;
  *uint64_t v107 = v182;
  v107[1] = v108;
  uint64_t v109 = (uint64_t *)(v106 + v105);
  uint64_t v111 = v187;
  uint64_t v110 = v188;
  *uint64_t v109 = v187;
  v109[1] = v110;
  swift_retain_n();
  swift_unknownObjectRetain_n();
  swift_retain_n();
  if (sub_1000ABE14())
  {
    uint64_t v112 = v170;
    sub_1002862BC(v100, v170, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v113 = type metadata accessor for UUID();
    uint64_t v114 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v173, 1, 1, v113);
    uint64_t v115 = type metadata accessor for Date();
    uint64_t v116 = (uint64_t)v168;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v168, 1, 1, v115);
    uint64_t v117 = v172;
    sub_1000A83E8(v112, 0, 0, 0, 1, 0, 0xF000000000000000, 2u, v172, v114, 0, 0, v116, 0);
    id v118 = v174;
    uint64_t v119 = v175;
    uint64_t v120 = v176;
    (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v185 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v176);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v119 + 8))(v118, v120);
    sub_100008EF8(&v189, v190);
    sub_1002862BC(v100, v112, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v121 = (*(unsigned __int8 *)(v169 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
    unint64_t v122 = (v23 + v121 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v123 = swift_allocObject();
    sub_100285830(v112, v123 + v121, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    id v124 = (uint64_t (**)())(v123 + v122);
    void *v124 = sub_100283E00;
    v124[1] = (uint64_t (*)())v106;
    *(void *)(v123 + ((v122 + 23) & 0xFFFFFFFFFFFFFFF8)) = v177;
    swift_retain();
    sub_1002692BC(v117, (uint64_t)sub_100283EE0, v123);
    swift_release();
    sub_100286324(v117, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_100008EA8((uint64_t)&v189);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v180 = v106;
    uint64_t v125 = v184;
    uint64_t v126 = v166;
    sub_1002862BC(v184, v166, type metadata accessor for CustodianshipRecords);
    sub_1002862BC(v126, v178, type metadata accessor for CustodianshipRecords);
    uint64_t v127 = swift_allocObject();
    *(void *)(v127 + 16) = v185;
    sub_100285830(v126, v127 + v103, type metadata accessor for CustodianshipRecords);
    id v128 = (uint64_t *)(v127 + v104);
    uint64_t v129 = v183;
    *id v128 = v182;
    v128[1] = v129;
    uint64_t v130 = (uint64_t *)(v127 + v105);
    uint64_t v131 = v188;
    *uint64_t v130 = v111;
    v130[1] = v131;
    uint64_t v132 = v125 + *(int *)(v157 + 20);
    uint64_t v133 = *(void *)(v132 + *(int *)(v171 + 48) + 8);
    uint64_t v134 = v167;
    sub_1002862BC(v125, v167, type metadata accessor for CustodianshipRecords);
    if (v133 || !*(void *)(v134 + *(int *)(v165 + 52) + 8))
    {
      swift_retain_n();
      uint64_t v135 = v182;
      swift_unknownObjectRetain_n();
      swift_retain_n();
      sub_100286324(v134, type metadata accessor for CustodianshipRecords);
      uint64_t v136 = v178;
      sub_10027C5C4(v178, v135, v129, v111, v131);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v137 = v179;
      uint64_t v187 = ~v179;
      uint64_t v138 = v185;
      swift_retain_n();
      swift_unknownObjectRetain_n();
      swift_retain_n();
      sub_100286324(v134, type metadata accessor for CustodianshipRecords);
      uint64_t v139 = v163;
      sub_1002862BC(v132, v163, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      uint64_t v140 = type metadata accessor for UUID();
      uint64_t v141 = (uint64_t)v173;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v140 - 8) + 56))(v173, 1, 1, v140);
      uint64_t v142 = *(void *)(v125 + *(int *)(v165 + 52));
      uint64_t v143 = swift_bridgeObjectRetain();
      uint64_t v144 = v164;
      sub_100288404(v139, 0, 0xF000000000000000, 0, 0xF000000000000000, 2u, v141, v142, v164, v143);
      uint64_t v145 = v138 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController;
      uint64_t v146 = v174;
      uint64_t v147 = v175;
      uint64_t v148 = v176;
      (*(void (**)(char *, uint64_t, uint64_t))(v175 + 16))(v174, v145, v176);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v147 + 8))(v146, v148);
      sub_100008EF8(&v189, v190);
      uint64_t v149 = v162;
      sub_1002862BC(v125, v162, type metadata accessor for CustodianshipRecords);
      uint64_t v150 = (v137 + 16) & v187;
      unint64_t v151 = (v159 + v150) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v152 = swift_allocObject();
      sub_100285830(v149, v152 + v150, type metadata accessor for CustodianshipRecords);
      uint64_t v153 = (void *)(v152 + v151);
      void *v153 = sub_100283EA8;
      v153[1] = v127;
      *(void *)(v152 + ((v151 + 23) & 0xFFFFFFFFFFFFFFF8)) = v177;
      swift_retain();
      sub_1002690F0(v144, (uint64_t)sub_100283EB0, v152);
      swift_release();
      sub_100286324(v144, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      sub_100008EA8((uint64_t)&v189);
      swift_release();
      swift_release();
      uint64_t v136 = v178;
    }
    sub_100286324(v136, type metadata accessor for CustodianshipRecords);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v100 = (uint64_t)v158;
  }
  sub_100286324(v184, type metadata accessor for CustodianshipRecords);
  swift_release();
  swift_unknownObjectRelease();
  sub_1000196A0(v160, v161);
  sub_100286324(v100, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10027A794(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v114 = (void *)*v3;
  uint64_t v7 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v112 = (char *)v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100322950);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v108 = v14;
  __chkstk_darwin(v14, v15);
  unint64_t v105 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianRecord();
  uint64_t v106 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v106 + 64);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v111 = (uint64_t)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  uint64_t v113 = (uint64_t)v96 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v110 = (uint64_t)v96 - v26;
  __chkstk_darwin(v25, v27);
  uint64_t v115 = (uint64_t)v96 - v28;
  uint64_t v104 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v29 = *(void *)(*(void *)(v104 - 8) + 64);
  uint64_t v31 = __chkstk_darwin(v104, v30);
  uint64_t v32 = (char *)v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v31, v33);
  uint64_t v36 = (char *)v96 - v35;
  __chkstk_darwin(v34, v37);
  uint64_t v40 = (char *)v96 - v39;
  if (*(void *)(a1 + *(int *)(v17 + 36)) == 3)
  {
    uint64_t v100 = v38;
    uint64_t v102 = v17;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100007288(v41, (uint64_t)qword_10033E778);
    sub_1002862BC(a1, (uint64_t)v40, type metadata accessor for CustodianshipRecords);
    uint64_t v42 = Logger.logObject.getter();
    int v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, (os_log_type_t)v43);
    uint64_t v101 = v10;
    if (v44)
    {
      int v98 = v43;
      uint64_t v103 = (uint64_t)a2;
      uint64_t v99 = a3;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      v116[0] = v97;
      *(_DWORD *)uint64_t v45 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v46 = qword_10032F970;
      unint64_t v47 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v117 = sub_100135190(v46, v47, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      v96[1] = v45 + 14;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v117 = sub_100135190(v48, v49, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v40, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v98, "%s - custodian %s was marked as unreachable, marking as accepted again.", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v99;
      a2 = (uint64_t (*)(void))v103;
    }
    else
    {
      sub_100286324((uint64_t)v40, type metadata accessor for CustodianshipRecords);
    }
    uint64_t v59 = a1;
    uint64_t v60 = a1;
    uint64_t v61 = v115;
    sub_1002862BC(v59, v115, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_1002862BC(v60, (uint64_t)v36, type metadata accessor for CustodianshipRecords);
    unint64_t v62 = (*(unsigned __int8 *)(v100 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    unint64_t v63 = (v29 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v64 = swift_allocObject();
    sub_100285830((uint64_t)v36, v64 + v62, type metadata accessor for CustodianshipRecords);
    uint64_t v104 = v64;
    uint64_t v65 = (void *)(v64 + v63);
    *uint64_t v65 = a2;
    v65[1] = a3;
    *(void *)(v64 + ((v63 + 23) & 0xFFFFFFFFFFFFFFF8)) = v114;
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = 2;
    uint64_t v66 = v108;
    uint64_t v67 = v107;
    unint64_t v68 = v105;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v105, (char *)v109 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v108);
    swift_retain();
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v66);
    unint64_t v69 = sub_100008EF8(v116, v116[3]);
    uint64_t v70 = v110;
    sub_1002862BC(v61, v110, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v71 = *(unsigned __int8 *)(v106 + 80);
    uint64_t v72 = (v71 + 16) & ~v71;
    uint64_t v107 = v71 | 7;
    uint64_t v108 = v18 + 7;
    unint64_t v73 = (v18 + 7 + v72) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v74 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v75 = swift_allocObject();
    uint64_t v109 = type metadata accessor for CustodianRecord;
    sub_100285830(v70, v75 + v72, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(void *)(v75 + v73) = 2;
    char v76 = (uint64_t (**)(uint64_t))(v75 + v74);
    uint64_t v77 = v104;
    *char v76 = sub_100283AA0;
    v76[1] = (uint64_t (*)(uint64_t))v77;
    *(void *)(v75 + ((v74 + 23) & 0xFFFFFFFFFFFFFFF8)) = v114;
    uint64_t v78 = *v69;
    uint64_t v114 = sub_100008EF8((void *)(*v69 + 56), *(void *)(*v69 + 80));
    sub_1002862BC(v61, v70, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v79 = type metadata accessor for UUID();
    uint64_t v80 = (uint64_t)v112;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v112, 1, 1, v79);
    uint64_t v81 = type metadata accessor for Date();
    uint64_t v82 = (uint64_t)v101;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v101, 1, 1, v81);
    uint64_t v83 = v103;
    swift_retain();
    swift_retain();
    uint64_t v84 = v113;
    sub_1000A83E8(v70, 0, 0, 2, 0, 0, 0xF000000000000000, 2u, v113, v80, 0, 0, v82, 0);
    uint64_t v85 = v111;
    sub_1002862BC(v115, v111, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v86 = (v71 + 48) & ~v71;
    unint64_t v87 = (v108 + v86) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v88 = (void *)swift_allocObject();
    v88[2] = v78;
    v88[3] = sub_100283B68;
    v88[4] = v75;
    v88[5] = 0;
    sub_100285830(v85, (uint64_t)v88 + v86, (uint64_t (*)(void))v109);
    uint64_t v89 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v88 + v87);
    void *v89 = sub_100283B5C;
    v89[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v83;
    uint64_t v90 = qword_100320CC8;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v90 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(v84 + *(int *)(v102 + 48)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      os_log_t v91 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      os_log_t v91 = &qword_10033E9F8;
    }
    uint64_t v93 = *v91;
    unint64_t v92 = v91[1];
    swift_bridgeObjectRetain();
    id v94 = sub_10028CC20(v93, v92);
    id v95 = [v94 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_1000667EC(v84, v95, (uint64_t)sub_100283B70, (uint64_t)v88);
    swift_release();

    sub_100286324(v84, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_release();
    swift_release_n();
    sub_100008EA8((uint64_t)v116);
    swift_release();
    return sub_100286324(v115, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100007288(v50, (uint64_t)qword_10033E778);
    sub_1002862BC(a1, (uint64_t)v32, type metadata accessor for CustodianshipRecords);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v103 = (uint64_t)a2;
      uint64_t v53 = swift_slowAlloc();
      v116[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v54 = qword_10032F970;
      unint64_t v55 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v117 = sub_100135190(v54, v55, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v117 = sub_100135190(v56, v57, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v32, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s - custodian %s status is not unreachable, bailing.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(void))v103)(0);
    }
    else
    {
      sub_100286324((uint64_t)v32, type metadata accessor for CustodianshipRecords);

      return a2(0);
    }
  }
}

uint64_t sub_10027B550(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v35 - v14;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v12, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v37 = a3;
      uint64_t v38 = a4;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v19 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_10032F970;
      unint64_t v22 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100135190(v21, v22, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v23, v24, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v19 + 22) = 2112;
      uint64_t v25 = _convertErrorToNSError(_:)();
      uint64_t v39 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - failed to mark custodian %s as accepted. Error: %@", (uint8_t *)v19, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v37;
    }
    else
    {
      sub_100286324((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    a3(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v38 = a4;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v30 = qword_10032F970;
      unint64_t v31 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100135190(v30, v31, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v32, v33, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - successfully marked custodian %s as accepted.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);
    }
    return ((uint64_t (*)(void))a3)(0);
  }
}

uint64_t sub_10027BBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002862BC(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 1, 1, v18);
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
  return sub_1000A83E8((uint64_t)v17, 0, 0, a2, 0, 0, 0xF000000000000000, 2u, a3, (uint64_t)v13, 0, 0, (uint64_t)v9, 0);
}

uint64_t sub_10027BDE0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v17, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v38 = a5;
      uint64_t v39 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v24 = qword_10032F970;
      unint64_t v25 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v24, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2048;
      uint64_t v40 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 22) = 2112;
      uint64_t v26 = _convertErrorToNSError(_:)();
      uint64_t v40 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v26;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - error marking custodian record with status %ld: %@", (uint8_t *)v22, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v39;
    }
    else
    {
      swift_errorRelease();
    }
    swift_errorRetain();
    a4(v18);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v37 = a3;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v38 = a5;
      uint64_t v39 = a4;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v31 = qword_10032F970;
      unint64_t v32 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v31, v32, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v33, v34, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v30 + 22) = 2048;
      uint64_t v40 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - custodian %s has been updated with status %ld.", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v39;
    }
    else
    {
      sub_100286324((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
    [self postRecoveryContactChangedNotification];
    a4(0);
    return sub_100006574((uint64_t)v17, &qword_10032E140);
  }
}

uint64_t sub_10027C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8, v14);
  uint64_t v15 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002862BC(a2, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  sub_100285830((uint64_t)v15, v18 + v16, type metadata accessor for CustodianshipRecords);
  uint64_t v19 = (void *)(v18 + v17);
  *uint64_t v19 = a3;
  v19[1] = a4;
  uint64_t v20 = (void *)(v18 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23;
  v20[1] = a6;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  sub_10027CB88(a2, (uint64_t (*)(uint64_t))sub_100283EA8, (uint64_t (*)(uint64_t))v18);
  return swift_release();
}

uint64_t sub_10027C5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a5;
  uint64_t v51 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = a2;
  uint64_t v50 = *v5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v57 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v54 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v47 = (uint64_t)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v18;
  __chkstk_darwin(v17, v19);
  os_log_type_t v21 = (char *)&v44 - v20;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100007288(v22, (uint64_t)qword_10033E748);
  sub_1002862BC(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v58 = v7;
  if (v25)
  {
    uint64_t v45 = v10;
    uint64_t v46 = a1;
    uint64_t v26 = swift_slowAlloc();
    v60[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_10032F970;
    unint64_t v28 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_100135190(v27, v28, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v29 = sub_1002682DC();
    uint64_t v59 = sub_100135190(v29, v30, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v21, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v45;
    a1 = v46;
  }
  else
  {
    sub_100286324((uint64_t)v21, type metadata accessor for CustodianshipRecords);
  }
  uint64_t v31 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v56 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__securityController, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100008EF8(v60, v60[3]);
  uint64_t v32 = v54;
  sub_1002686B4(v54);
  uint64_t v33 = v47;
  sub_1002862BC(a1, v47, type metadata accessor for CustodianshipRecords);
  unint64_t v34 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  unint64_t v35 = (v49 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = swift_allocObject();
  sub_100285830(v33, v38 + v34, type metadata accessor for CustodianshipRecords);
  uint64_t v39 = (void *)(v38 + v35);
  uint64_t v40 = v51;
  *uint64_t v39 = v53;
  v39[1] = v40;
  uint64_t v41 = (void *)(v38 + v36);
  uint64_t v42 = v55;
  void *v41 = v52;
  v41[1] = v42;
  *(void *)(v38 + v37) = v31;
  *(void *)(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8)) = v50;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  sub_1001E36D0(v32, (void (*)(void, uint64_t))sub_100284310, v38);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v32, v58);
  return sub_100008EA8((uint64_t)v60);
}

uint64_t sub_10027CB88(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v58 = a3;
  uint64_t v59 = a2;
  uint64_t v57 = *v3;
  uint64_t v54 = sub_100009F04(&qword_100322950);
  uint64_t v56 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v5);
  uint64_t v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v12 = v11 - 8;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v55 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v55 + 64);
  uint64_t v23 = __chkstk_darwin(v20 - 8, v22);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v28 = a1 + *(int *)(v25 + 28);
  uint64_t v29 = *(void *)(v28 + *(int *)(v12 + 56) + 8);
  sub_1002862BC(a1, (uint64_t)&v51 - v26, type metadata accessor for CustodianshipRecords);
  if (v29)
  {
    uint64_t v30 = sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    return v59(v30);
  }
  uint64_t v51 = (uint64_t)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v19;
  uint64_t v32 = type metadata accessor for CustodianRecord();
  uint64_t v33 = *(void *)&v27[*(int *)(v32 + 52) + 8];
  uint64_t v30 = sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
  unint64_t v34 = v58;
  if (!v33) {
    return v59(v30);
  }
  sub_1002862BC(v28, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v35 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v10, 1, 1, v35);
  uint64_t v36 = *(int *)(v32 + 52);
  uint64_t v37 = a1;
  uint64_t v38 = *(void *)(a1 + v36);
  uint64_t v39 = swift_bridgeObjectRetain();
  uint64_t v40 = (uint64_t)v52;
  sub_100288404((uint64_t)v16, 0, 0xF000000000000000, 0, 0xF000000000000000, 2u, (uint64_t)v10, v38, (uint64_t)v52, v39);
  uint64_t v41 = (char *)v3 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController;
  uint64_t v42 = v56;
  uint64_t v44 = v53;
  uint64_t v43 = v54;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v41, v54);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
  sub_100008EF8(v60, v60[3]);
  uint64_t v45 = v37;
  uint64_t v46 = v51;
  sub_1002862BC(v45, v51, type metadata accessor for CustodianshipRecords);
  unint64_t v47 = (*(unsigned __int8 *)(v55 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  unint64_t v48 = (v21 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v49 = swift_allocObject();
  sub_100285830(v46, v49 + v47, type metadata accessor for CustodianshipRecords);
  uint64_t v50 = (uint64_t (**)(uint64_t))(v49 + v48);
  *uint64_t v50 = v59;
  v50[1] = v34;
  *(void *)(v49 + ((v48 + 23) & 0xFFFFFFFFFFFFFFF8)) = v57;
  swift_retain();
  sub_1002690F0(v40, (uint64_t)sub_100283EB0, v49);
  swift_release();
  sub_100286324(v40, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_100008EA8((uint64_t)v60);
}

void sub_10027D060(uint64_t a1, char a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v51 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v51 - v20;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E778);
    sub_1002862BC(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    sub_10010397C(a1, 1);
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v53 = a4;
      uint64_t v54 = a5;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      uint64_t v56 = (void *)v52;
      *(_DWORD *)uint64_t v34 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v36 = qword_10032F970;
      unint64_t v37 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100135190(v36, v37, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_100135190(v38, v39, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v34 + 22) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v55 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v40;
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - custodian %s failed to check if shared and accepted, assuming accepted for now. Error: %@\"", (uint8_t *)v34, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v53;
    }
    else
    {
      sub_100286324((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }
    swift_errorRetain();
    a4(1, a1);
    sub_100080A98(a1, 1);
    sub_100080A98(a1, 1);
  }
  else if (a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100007288(v41, (uint64_t)qword_10033E778);
    sub_1002862BC(a3, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v54 = a5;
      uint64_t v44 = a4;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v46 = qword_10032F970;
      unint64_t v47 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100135190(v46, v47, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_100135190(v48, v49, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v21, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - custodian %s is shared and accepted", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v44(1, 0);
    }
    else
    {
      sub_100286324((uint64_t)v21, type metadata accessor for CustodianshipRecords);

      a4(1, 0);
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    sub_1002862BC(a3, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v54 = a5;
      uint64_t v25 = a4;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_10032F970;
      unint64_t v28 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_100135190(v27, v28, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_100135190(v29, v30, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v18, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - custodian %s is NOT shared and accepted", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v25;
    }
    else
    {
      sub_100286324((uint64_t)v18, type metadata accessor for CustodianshipRecords);
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v55 = -7017;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000071FC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v50 = v56;
    a4(0, v56);
  }
}

uint64_t sub_10027DA60(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v19, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v41 = a4;
      uint64_t v42 = a3;
      uint64_t v23 = swift_slowAlloc();
      os_log_type_t v24 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v44 = v40;
      *(_DWORD *)uint64_t v23 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_10032F970;
      unint64_t v26 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v25, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_100135190(v27, v28, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v43 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v24 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - custodian %s name could not be updated. %@", (uint8_t *)v23, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v42;
    }
    else
    {
      sub_100286324((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    a3();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v41 = a4;
      uint64_t v42 = a3;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_10032F970;
      unint64_t v35 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v34, v35, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_100135190(v36, v37, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - custodian %s name has been updated.", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v42;
    }
    else
    {
      sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
    a3();
    return sub_100006574((uint64_t)v19, &qword_10032E140);
  }
}

uint64_t sub_10027E14C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v19, &qword_1003235A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v12, type metadata accessor for CustodianshipRecords);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v41 = a4;
      uint64_t v42 = a3;
      uint64_t v23 = swift_slowAlloc();
      os_log_type_t v24 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v44 = v40;
      *(_DWORD *)uint64_t v23 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_10032F970;
      unint64_t v26 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v25, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_100135190(v27, v28, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v23 + 22) = 2112;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v43 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v24 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - custodian %s recordBuildVersion could not be updated. %@", (uint8_t *)v23, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v42;
    }
    else
    {
      sub_100286324((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      swift_errorRelease();
      swift_errorRelease();
    }
    a3();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v41 = a4;
      uint64_t v42 = a3;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_10032F970;
      unint64_t v35 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_100135190(v34, v35, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      type metadata accessor for CustodianRecord();
      type metadata accessor for UUID();
      sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_100135190(v36, v37, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - custodian %s recordBuildVersion updated.", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v42;
    }
    else
    {
      sub_100286324((uint64_t)v15, type metadata accessor for CustodianshipRecords);
    }
    a3();
    return sub_100006574((uint64_t)v19, &qword_1003235A0);
  }
}

uint64_t sub_10027E848(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v76 = a8;
  uint64_t v84 = a7;
  uint64_t v85 = a6;
  uint64_t v82 = a5;
  uint64_t v80 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v80 - 8);
  uint64_t v13 = __chkstk_darwin(v80, v12);
  uint64_t v75 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v74 = (uint64_t)&v71 - v16;
  uint64_t v79 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v18 = __chkstk_darwin(v79, v17);
  uint64_t v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  os_log_type_t v24 = (char *)&v71 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v71 - v26;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v83 = a4;
  if (v31)
  {
    uint64_t v72 = v24;
    unint64_t v73 = v20;
    uint64_t v78 = a3;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 67109378;
    int v81 = a1;
    LODWORD(v87[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      v87[0] = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      v87[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v34 = 0;
    }
    *uint64_t v33 = v34;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v32, 0x12u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a3 = v78;
    a1 = v81;
    os_log_type_t v24 = v72;
    uint64_t v20 = v73;
    if (!a2) {
      goto LABEL_19;
    }
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    if (!a2)
    {
LABEL_19:
      if (a1)
      {
        if (qword_100320B98 != -1) {
          swift_once();
        }
        sub_100007288(v28, (uint64_t)qword_10033E778);
        sub_1002862BC(a3, (uint64_t)v24, type metadata accessor for CustodianshipRecords);
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v78 = a3;
          uint64_t v51 = swift_slowAlloc();
          v87[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v51 = 136315650;
          if (qword_100320CC0 != -1) {
            swift_once();
          }
          uint64_t v52 = qword_10032F970;
          unint64_t v53 = *(void *)algn_10032F978;
          swift_bridgeObjectRetain();
          uint64_t v86 = sub_100135190(v52, v53, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v51 + 12) = 2080;
          type metadata accessor for CustodianRecord();
          sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v54 = v80;
          uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v86 = sub_100135190(v55, v56, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100286324((uint64_t)v24, type metadata accessor for CustodianshipRecords);
          *(_WORD *)(v51 + 22) = 1024;
          LODWORD(v86) = 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - custodian %s check recovery key exists: %{BOOL}d. Ending with success", (uint8_t *)v51, 0x1Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a3 = v78;
        }
        else
        {
          sub_100286324((uint64_t)v24, type metadata accessor for CustodianshipRecords);

          uint64_t v54 = v80;
        }
        uint64_t v65 = a3 + *(int *)(type metadata accessor for CustodianRecord() + 20);
        uint64_t v66 = v77;
        uint64_t v67 = v75;
        (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v75, v65, v54);
        swift_beginAccess();
        uint64_t v68 = v74;
        sub_100280040(v74, v67);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v54);
        swift_endAccess();
        uint64_t v69 = 1;
        char v70 = 2;
      }
      else
      {
        if (qword_100320B98 != -1) {
          swift_once();
        }
        sub_100007288(v28, (uint64_t)qword_10033E778);
        sub_1002862BC(a3, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint64_t)v20;
          uint64_t v60 = swift_slowAlloc();
          v87[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v60 = 136315650;
          if (qword_100320CC0 != -1) {
            swift_once();
          }
          uint64_t v61 = qword_10032F970;
          unint64_t v62 = *(void *)algn_10032F978;
          swift_bridgeObjectRetain();
          uint64_t v86 = sub_100135190(v61, v62, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v60 + 12) = 2080;
          type metadata accessor for CustodianRecord();
          sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v86 = sub_100135190(v63, v64, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100286324(v59, type metadata accessor for CustodianshipRecords);
          *(_WORD *)(v60 + 22) = 1024;
          LODWORD(v86) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s - custodian %s check recovery key missing: %{BOOL}d. Ending with failure", (uint8_t *)v60, 0x1Cu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100286324((uint64_t)v20, type metadata accessor for CustodianshipRecords);
        }
        uint64_t v69 = 0;
        char v70 = 3;
      }
      sub_10016A4DC(v69, v70);
      return v85(0);
    }
  }
  swift_errorRetain();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  sub_100007288(v28, (uint64_t)qword_10033E778);
  sub_1002862BC(a3, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    int v81 = a1;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = (void *)swift_slowAlloc();
    v87[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315906;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_10032F970;
    unint64_t v40 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v86 = sub_100135190(v39, v40, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    type metadata accessor for CustodianHealthRecord();
    sub_1000071FC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v86 = sub_100135190(v41, v42, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    *(_WORD *)(v37 + 22) = 2112;
    uint64_t v43 = _convertErrorToNSError(_:)();
    uint64_t v86 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v38 = v43;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v37 + 32) = 1024;
    LODWORD(v86) = v81 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - Check custodian recovery failed for custodian %s with error: %@ exists: %{BOOL}d\"", (uint8_t *)v37, 0x26u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100286324((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t ObjectType = swift_getObjectType();
  _convertErrorToNSError(_:)();
  uint64_t v45 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *, uint64_t))(v82 + 104))(v87, ObjectType);
  unint64_t v47 = v46;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v45(v87, 0);
  sub_10016A4DC(0, 4);
  swift_errorRetain();
  v85(a2);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_10027F5BC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v42 = a4;
      uint64_t v43 = a3;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      *(_DWORD *)uint64_t v24 = 136315650;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_10032F970;
      unint64_t v27 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v26, v27, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v44 = sub_100135190(v28, v29, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v24 + 22) = 2112;
      uint64_t v30 = _convertErrorToNSError(_:)();
      uint64_t v44 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v30;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - error processed non reachable custodian %s: %@", (uint8_t *)v24, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v43;
    }
    else
    {
      sub_100286324((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    a3(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E778);
    sub_1002862BC(a2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v42 = a4;
      uint64_t v43 = a3;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      if (qword_100320CC0 != -1) {
        swift_once();
      }
      uint64_t v35 = qword_10032F970;
      unint64_t v36 = *(void *)algn_10032F978;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v35, v36, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v37 = UUID.uuidString.getter();
      uint64_t v44 = sub_100135190(v37, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - successfully processed non reachable custodian %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v43(0);
    }
    else
    {
      sub_100286324((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);

      a3(0);
    }
    return sub_100006574((uint64_t)v19, &qword_10032E140);
  }
}

uint64_t sub_10027FC30(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for CustodianRecoverySession();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = sub_100011368(v7, result + 1);
    Swift::Int v22 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      sub_100280364();
      uint64_t v19 = v22;
    }
    else
    {
      uint64_t v19 = v18;
      swift_retain();
    }
    sub_100011574(a2, v19);
    uint64_t *v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    Swift::UInt v10 = ObjectIdentifier.hashValue.getter();
    Hasher._combine(_:)(v10);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(v14 + 8 * v13) == a2)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * v13) == a2) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    Swift::Int v17 = swift_retain();
    sub_100280D00(v17, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_10027FE90(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      Swift::Int v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100280E54(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100280040(uint64_t a1, char *a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000071FC((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v33 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    unint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v13;
    uint64_t v28 = v7;
    uint64_t v17 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v16 = v7 + 16;
    Swift::Int v15 = v17;
    uint64_t v32 = *(void *)(v16 + 56);
    Swift::Int v18 = (void (**)(char *, uint64_t))(v16 - 8);
    v27[1] = v16 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v32 * v14;
      uint64_t v21 = v15;
      v15(v10, *(void *)(v11 + 48) + v32 * v14, v6);
      sub_1000071FC(&qword_100322928, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      os_log_type_t v23 = *v18;
      (*v18)(v10, v6);
      if (v22) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v31;
      uint64_t v11 = v19;
      Swift::Int v15 = v21;
      if (((*(void *)(v33 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v20, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::Int v15 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = v34;
    v15(v10, v34, v6);
    uint64_t v35 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100280FF0((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t sub_100280364()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100009F04(&qword_100321498);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      Hasher.init(_seed:)();
      Swift::UInt v20 = ObjectIdentifier.hashValue.getter();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100280624()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100009F04(&qword_100328438);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100280904()
{
  unint64_t v1 = v0;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v3);
  uint64_t v42 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100009F04(&qword_10032FCF0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    unint64_t v38 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    unint64_t v36 = v0;
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v40 = v2;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    uint64_t v39 = v7;
    unint64_t v15 = v42;
    uint64_t v16 = v43;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v41 = v14;
        unint64_t v19 = v18 | (v14 << 6);
      }
      else
      {
        int64_t v20 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v37) {
          goto LABEL_33;
        }
        unint64_t v21 = v38[v20];
        int64_t v22 = v14 + 1;
        if (!v21)
        {
          int64_t v22 = v14 + 2;
          if (v14 + 2 >= v37) {
            goto LABEL_33;
          }
          unint64_t v21 = v38[v22];
          if (!v21)
          {
            int64_t v22 = v14 + 3;
            if (v14 + 3 >= v37) {
              goto LABEL_33;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              uint64_t v23 = v14 + 4;
              if (v14 + 4 >= v37)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v36;
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v21 = v38[v23];
              if (!v21)
              {
                while (1)
                {
                  int64_t v22 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v22 >= v37) {
                    goto LABEL_33;
                  }
                  unint64_t v21 = v38[v22];
                  ++v23;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v22 = v14 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v21 - 1) & v21;
        int64_t v41 = v22;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 48);
      uint64_t v26 = *(void *)(v40 + 72);
      BOOL v27 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
      v27(v15, v25 + v26 * v19, v16);
      uint64_t v7 = v39;
      sub_1000071FC((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v7 + 48) + v17 * v26, v42, v43);
      ++*(void *)(v7 + 16);
      uint64_t v5 = v24;
      int64_t v14 = v41;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v7;
  return result;
}

Swift::Int sub_100280D00(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    sub_100280364();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)sub_100281290();
      goto LABEL_13;
    }
    sub_100281894();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Swift::UInt v9 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v9);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for CustodianRecoverySession();
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int sub_100280E54(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100280624();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10028143C();
      goto LABEL_22;
    }
    sub_100281B24();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100280FF0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  unint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100280904();
  }
  else
  {
    if (v12 > v11)
    {
      sub_1002815F0();
      goto LABEL_12;
    }
    sub_100281DD4();
  }
  uint64_t v13 = *v3;
  sub_1000071FC((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    unint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_1000071FC(&qword_100322928, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100281290()
{
  unint64_t v1 = v0;
  sub_100009F04(&qword_100321498);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10028143C()
{
  unint64_t v1 = v0;
  sub_100009F04(&qword_100328438);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002815F0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F04(&qword_10032FCF0);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v23 = v1;
  uint64_t result = (void *)(v8 + 56);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 56), 8 * v11);
  }
  uint64_t v24 = v7 + 56;
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v7 + 56);
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_9:
    unint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(void *)(v7 + 48) + v18, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v9 + 48) + v18, v6, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v25)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v23;
    goto LABEL_27;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_25;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100281894()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100009F04(&qword_100321498);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    Hasher.init(_seed:)();
    swift_retain();
    Swift::UInt v20 = ObjectIdentifier.hashValue.getter();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100281B24()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100009F04(&qword_100328438);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100281DD4()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v0;
  sub_100009F04(&qword_10032FCF0);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v9;
    return result;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v38 = v3 + 16;
  uint64_t v14 = v8 + 56;
  uint64_t v39 = v3;
  unint64_t v15 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    uint64_t v24 = v7;
    uint64_t v25 = *(void *)(v7 + 48);
    uint64_t v26 = *(void *)(v39 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v6, v25 + v26 * v20, v2);
    sub_1000071FC((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v27 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v28) & ~*(void *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t result = (*v15)(*(void *)(v9 + 48) + v18 * v26, v6, v2);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v24;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v35;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100282184(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *v2;
  os_log_type_t v50 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v51 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = sub_100009F04(&qword_100321FF8);
  uint64_t v47 = *(void *)(v13 - 8);
  uint64_t v48 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v46 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100324688);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  unint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E778);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v52 = v5;
  if (v24)
  {
    uint64_t v42 = a1;
    uint64_t v43 = a2;
    uint64_t v44 = v12;
    uint64_t v45 = v6;
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    v54[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    if (qword_100320CC0 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_10032F970;
    unint64_t v27 = *(void *)algn_10032F978;
    swift_bridgeObjectRetain();
    uint64_t v53 = sub_100135190(v26, v27, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - started.", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v12 = v44;
    uint64_t v6 = v45;
    a1 = v42;
    uint64_t v28 = v43;
  }
  else
  {

    uint64_t v28 = a2;
  }
  unint64_t v29 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v50 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  sub_100008EF8(v54, v55);
  sub_100178B64();
  sub_100008EA8((uint64_t)v54);
  char v30 = v46;
  uint64_t v31 = v47;
  uint64_t v32 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, (uint64_t)v29 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage, v48);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v32);
  uint64_t v33 = sub_100008EF8(v54, v55);
  uint64_t v34 = (void *)swift_allocObject();
  void v34[2] = v29;
  v34[3] = a1;
  uint64_t v35 = v49;
  v34[4] = v28;
  v34[5] = v35;
  uint64_t v36 = sub_100008EF8((void *)(*v33 + 16), *(void *)(*v33 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  swift_retain();
  int64_t v37 = v51;
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v39 = v52;
  v38(v37, v52);
  sub_100008EF8((void *)(*v36 + 16), *(void *)(*v36 + 40));
  sub_1000B3744((uint64_t)v12, (uint64_t)sub_100282700, (uint64_t)v34);
  v38(v12, v39);
  swift_release();
  return sub_100008EA8((uint64_t)v54);
}

uint64_t sub_1002826F8()
{
  return sub_10007032C(48);
}

uint64_t sub_100282700(uint64_t a1, char a2)
{
  return sub_100273264(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100282710()
{
  return sub_1002827A4((void (*)(void))&_swift_release);
}

uint64_t sub_100282728()
{
  return sub_100274D50(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_100282738()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100282780(uint64_t a1)
{
  return sub_100274DFC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10028278C()
{
  return sub_1002827A4((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1002827A4(void (*a1)(void))
{
  swift_bridgeObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 32));
  swift_release();

  return _swift_deallocObject(v1, 56, 7);
}

uint64_t sub_100282804(uint64_t a1)
{
  return sub_100274FA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_100282814()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100282A28(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + v7);
  uint64_t v9 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100274450(a1, a2, v2 + v6, v8, v9);
}

uint64_t sub_100282AEC()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100282CF4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(uint64_t (**)(void))v7;
  uint64_t v9 = *(void *)(v7 + 8);

  return sub_100274878(a1, v5, v6, v8, v9);
}

uint64_t sub_100282D98()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100282F94(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void (*)(void))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100275138(a1, v4, v5, v6, v7);
}

uint64_t sub_100283038()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100283070()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v25 = (v26 + 40) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v26 | 7);
}

uint64_t sub_100283440(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100276068(a1, a2, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + v7), *(uint64_t *)((char *)v2 + v7 + 8));
}

void sub_100283508(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void (**)(void, void))(v2 + v7);
  uint64_t v9 = *(void *)(v2 + v7 + 8);

  sub_10027D060(a1, v4, v2 + v6, v8, v9);
}

uint64_t sub_1002835C8(uint64_t a1)
{
  return sub_1002839E0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_100276A9C);
}

uint64_t sub_1002835E4(uint64_t a1)
{
  return sub_1002839E0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_100277A80);
}

uint64_t sub_100283600()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v25 = (v26 + 40) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | 7);
}

uint64_t sub_1002839C8(uint64_t a1)
{
  return sub_1002839E0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_100279184);
}

uint64_t sub_1002839E0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (char *)v2 + v5;
  unint64_t v10 = (void *)((char *)v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return a2(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100283AA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void (**)(void))(v1 + v5);
  uint64_t v7 = *(void *)(v1 + v5 + 8);

  return sub_10027B550(a1, v1 + v4, v6, v7);
}

uint64_t sub_100283B4C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100283B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10027BBF4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100283B70(uint64_t a1)
{
  return sub_1002861FC(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_100270590);
}

uint64_t sub_100283B9C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16, v2 | 7);
}

uint64_t sub_100283DC8()
{
  return sub_1002860F4((uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100272AE0);
}

uint64_t sub_100283E00()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + v3 + 8);
  uint64_t v8 = (uint64_t *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return sub_10027C428(v4, v5, v6, v7, v9, v10);
}

uint64_t sub_100283EB0(uint64_t a1)
{
  return sub_100284E58(a1, type metadata accessor for CustodianshipRecords, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_10027E14C);
}

uint64_t sub_100283EE0(uint64_t a1)
{
  return sub_100284E58(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_10027DA60);
}

uint64_t sub_100283F0C()
{
  return sub_10007032C(40);
}

uint64_t sub_100283F14(uint64_t a1)
{
  return sub_10026A5D4(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100283F20()
{
  return sub_10007032C(40);
}

uint64_t sub_100283F28(uint64_t a1)
{
  return sub_10026A1AC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100283F34()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v25 = (v26 + 16) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v26 | 7);
}

uint64_t sub_100284310(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027E848(a1, a2, v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(uint64_t (**)(uint64_t))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002843EC()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v25 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v23 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v24 = (v25 + 16) & ~v25;
  uint64_t v26 = v0;
  uint64_t v2 = v0 + v24;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v2, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v2 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v2 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v1 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_release();

  return _swift_deallocObject(v26, ((((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v25 | 7);
}

uint64_t sub_1002847AC()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v24 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v25 = (v26 + 24) & ~v26;
  uint64_t v2 = v0 + v25;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v25, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v25 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v25 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v23 = v1;
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v23 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | 7);
}

uint64_t sub_100284B7C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027C5C4(v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100284C24()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100284E2C(uint64_t a1)
{
  return sub_100284E58(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_10027F5BC);
}

uint64_t sub_100284E58(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v3 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = *(void *)(v3 + v7 + 8);

  return a3(a1, v3 + v6, v9, v10, v8);
}

uint64_t sub_100284F1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100285024()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100285038()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100285248(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void (**)(void))(v1 + v6);
  uint64_t v9 = *(void *)(v1 + v6 + 8);

  return sub_10027BDE0(a1, v1 + v4, v7, v8, v9);
}

uint64_t sub_100285304()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10028533C()
{
  return sub_10007032C(40);
}

uint64_t sub_100285344(uint64_t a1)
{
  return sub_100269D84(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100285350()
{
  return sub_10007032C(40);
}

uint64_t sub_100285358(uint64_t a1)
{
  return sub_10026AE24(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100285364()
{
  return sub_10007032C(40);
}

uint64_t sub_10028536C(uint64_t a1)
{
  return sub_10026BA9C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100285378()
{
  return sub_10007032C(40);
}

uint64_t sub_100285380(uint64_t a1)
{
  return sub_10026B674(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10028538C()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16, v2 | 7);
}

uint64_t sub_1002855A8()
{
  return sub_1002860F4((uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002716B8);
}

uint64_t sub_1002855D8(uint64_t a1)
{
  return sub_1002861FC(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026BEC4);
}

uint64_t sub_100285608()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100285808()
{
  return sub_10007032C(40);
}

uint64_t sub_100285810(uint64_t a1)
{
  return sub_10026B24C(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10028581C()
{
  return sub_10007032C(40);
}

uint64_t sub_100285824(uint64_t a1)
{
  return sub_10026A9FC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100285830(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100285898()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = v2 | 7;
  unint64_t v4 = ((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  swift_bridgeObjectRelease();
  v7(v5 + v1[9], v6);
  sub_100013198(*(void *)(v5 + v1[10]), *(void *)(v5 + v1[10] + 8));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v9);
}

uint64_t sub_100285A18()
{
  return sub_1002860F4((uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002725D4);
}

uint64_t sub_100285A48(uint64_t a1)
{
  return sub_1002861FC(a1, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026F3DC);
}

uint64_t sub_100285A78()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100285BD0()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = v2 | 7;
  unint64_t v4 = ((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(v5 + v1[11], v6);
  sub_100013198(*(void *)(v5 + v1[12]), *(void *)(v5 + v1[12] + 8));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v9);
}

uint64_t sub_100285D70()
{
  return sub_1002860F4((uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1002720C8);
}

uint64_t sub_100285DA0(uint64_t a1)
{
  return sub_1002861FC(a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026E228);
}

uint64_t sub_100285DD0()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100285F48()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v9 = v2 | 7;
  unint64_t v4 = ((((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v5 + v1[7], v6);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v5 + v1[10]), *(void *)(v5 + v1[10] + 8));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v9);
}

uint64_t sub_1002860C8()
{
  return sub_1002860F4((uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100271BC4);
}

uint64_t sub_1002860F4(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v2 + v4;
  uint64_t v9 = *(void *)(v2 + v5);
  uint64_t v10 = *(void *)(v2 + v6);
  uint64_t v11 = *(void *)(v2 + v6 + 8);
  uint64_t v12 = *(void *)(v2 + v7);
  uint64_t v13 = (uint64_t *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];

  return a2(v8, v9, v10, v11, v12, v14, v15);
}

uint64_t sub_1002861CC(uint64_t a1)
{
  return sub_1002861FC(a1, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))sub_10026D078);
}

uint64_t sub_1002861FC(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *((void *)v3 + 2);
  uint64_t v9 = *((void *)v3 + 3);
  uint64_t v10 = *((void *)v3 + 4);
  uint64_t v11 = *((void *)v3 + 5);
  uint64_t v12 = *(void *)&v3[v7];
  uint64_t v13 = *(void *)&v3[v7 + 8];

  return a3(a1, v8, v9, v10, v11, &v3[v6], v12, v13);
}

uint64_t sub_1002862BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100286324(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002863B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v27 = a2;
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v7 = v6 - 8;
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v30 + 64);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v26 = (uint64_t)&v25 - v13;
  uint64_t v15 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v28 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v28 + 64);
  __chkstk_darwin(v15 - 8, v17);
  uint64_t v18 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  sub_10028728C(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  sub_10028728C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v20 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  unint64_t v21 = (v16 + *(unsigned __int8 *)(v30 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  unint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = v32;
  v22[2] = v31;
  v22[3] = v23;
  v22[4] = v19;
  sub_100163BC8((uint64_t)v18, (uint64_t)v22 + v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  sub_100163BC8(v26, (uint64_t)v22 + v21, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  sub_10028728C(v27, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  *(void *)&v11[*(int *)(v7 + 40)] = 4;
  sub_100008EF8((void *)(v29 + 16), *(void *)(v29 + 40));
  swift_retain();
  swift_retain();
  sub_1000E5FA8((uint64_t)v11, (uint64_t)sub_1002874D4, (uint64_t)v22);
  sub_10028795C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_release();
  return swift_release();
}

uint64_t sub_100286678(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a6;
  uint64_t v50 = a5;
  uint64_t v55 = a2;
  uint64_t v8 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v51 + 64);
  __chkstk_darwin(v8 - 8, v10);
  uint64_t v53 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v48 + 64);
  __chkstk_darwin(v11, v13);
  uint64_t v49 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v15);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v18, v19);
  unint64_t v21 = (uint64_t *)((char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100163B60(a1, (uint64_t)v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v57 = v22;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v57 = sub_100135190(v27, v28, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to update invitation with error : %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v55(v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v47 = a3;
    sub_1002875B0((uint64_t)v21);
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_100008A94(result + 56, (uint64_t)v56);
      swift_release();
      uint64_t v44 = sub_100008EF8(v56, v56[3]);
      uint64_t v30 = *(int *)(v11 + 20);
      uint64_t v31 = v50;
      uint64_t v46 = v14;
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
      uint64_t v45 = v17;
      v32(v17, v50 + v30, v54);
      uint64_t v43 = swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v33 = v49;
      sub_10028728C(v31, v49, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
      uint64_t v34 = v53;
      sub_10028728C(v52, v53, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v35 = v47;
      unint64_t v36 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      unint64_t v37 = (v12 + *(unsigned __int8 *)(v51 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      unint64_t v38 = (v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v39 = (void (*)(uint64_t))swift_allocObject();
      sub_100163BC8(v33, (uint64_t)v39 + v36, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
      sub_100163BC8(v34, (uint64_t)v39 + v37, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      *(void *)((char *)v39 + v38) = v43;
      uint64_t v40 = (void (**)(uint64_t))((char *)v39 + ((v38 + 15) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v40 = v55;
      v40[1] = v35;
      swift_retain();
      swift_retain();
      uint64_t v41 = (uint64_t)v45;
      sub_1001D71E8((uint64_t)v45, 0, 0, (void (*)(uint64_t))sub_100287814, v39);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v41, v54);
      swift_release();
      return sub_100008EA8((uint64_t)v56);
    }
  }
  return result;
}

uint64_t sub_100286CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a6;
  uint64_t v39 = a2;
  uint64_t v9 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &unk_100320000;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v36[1] = v9;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v37 = a5;
      uint64_t v18 = (uint8_t *)v17;
      *(void *)&v41[0] = swift_slowAlloc();
      v36[0] = a3;
      *(_DWORD *)uint64_t v18 = 136315138;
      v40[0] = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v19 = String.init<A>(describing:)();
      v40[0] = sub_100135190(v19, v20, (uint64_t *)v41);
      a3 = v36[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v13 = (void *)&unk_100320000;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cleanup Beneficiary completed with error : %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = v37;
      swift_slowDealloc();

      swift_errorRelease();
      goto LABEL_12;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E760);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v22, "Successfully completed cleanup Beneficiary.", v23, 2u);
      swift_slowDealloc();
    }
  }

LABEL_12:
  if (v13[370] != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007288(v24, (uint64_t)qword_10033E760);
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Posting CFU...", v27, 2u);
    swift_slowDealloc();
  }

  unint64_t v28 = &v12[*(int *)(sub_100009F04(&qword_10032B150) + 48)];
  uint64_t v29 = v39 + *(int *)(type metadata accessor for InheritanceInvitationResponseMessage() + 20);
  uint64_t v30 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v12, v29, v30);
  uint64_t v31 = (void *)(a3 + *(int *)(type metadata accessor for InheritanceInvitationRecord() + 20));
  uint64_t v32 = v31[1];
  *(void *)unint64_t v28 = *v31;
  *((void *)v28 + 1) = v32;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_100008A94(Strong + 96, (uint64_t)v40);
    swift_bridgeObjectRetain();
    swift_release();
    sub_100008EF8(v40, v40[3]);
    sub_1001C1B88((uint64_t)v41);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = a5;
    *(void *)(v34 + 24) = v38;
    swift_retain();
    sub_10024F5C4(v41, (void (*)(void))sub_10009EB94, v34);
    swift_release();
    sub_10004CF70((uint64_t)v41);
    sub_10028795C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    return sub_100008EA8((uint64_t)v40);
  }
  else
  {
    swift_bridgeObjectRetain();
    return sub_10028795C((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
  }
}

uint64_t type metadata accessor for BeneficiaryDeclinedStatusHandler()
{
  return self;
}

uint64_t sub_100287230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002863B4(a1, a2, a3, a4);
}

uint64_t sub_100287254()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10028728C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002872F4()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = v7 + *(void *)(*(void *)v5 + 64);
  uint64_t v9 = v2 | v6 | 7;
  swift_release();
  swift_release();
  uint64_t v10 = v0 + v1[7] + v3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v0 + v7, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v0 + v7 + v5[11], v11);
  sub_100013198(*(void *)(v0 + v7 + v5[12]), *(void *)(v0 + v7 + v5[12] + 8));

  return _swift_deallocObject(v0, v8, v9);
}

uint64_t sub_1002874D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v7 = (void (*)(uint64_t))v1[2];
  uint64_t v8 = (void (*)(uint64_t))v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_100286678(a1, v7, v8, v9, (uint64_t)v1 + v4, v10);
}

uint64_t sub_1002875B0(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100325890);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100287610()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v13 = v2 | v6 | 7;
  unint64_t v8 = (((*(void *)(*(void *)v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v0 + v1[7] + v3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v0 + v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11(v0 + v7 + v5[11], v10);
  sub_100013198(*(void *)(v0 + v7 + v5[12]), *(void *)(v0 + v7 + v5[12] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v8 + 16, v13);
}

uint64_t sub_100287814(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceInvitationResponseMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v1 + v7;
  uint64_t v10 = *(void *)(v1 + v8);
  uint64_t v11 = (uint64_t *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  return sub_100286CA8(a1, v1 + v4, v9, v10, v12, v13);
}

uint64_t sub_100287924()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10028795C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002879BC(uint64_t a1)
{
  unint64_t v2 = sub_1002881A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002879F8(uint64_t a1)
{
  unint64_t v2 = sub_1002881A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100287A34()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100287AD4()
{
  return type metadata accessor for CustodianInvitationMessage();
}

uint64_t type metadata accessor for CustodianInvitationMessage()
{
  uint64_t result = qword_10032FDE0;
  if (!qword_10032FDE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100287B28()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100287BC4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v16[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_10032FEA8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1002881A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = *(unsigned char *)(v2 + 16);
  char v18 = 0;
  sub_100029FAC();
  uint64_t v13 = v16[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v14 = v16[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v16[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v4);
    char v17 = 1;
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_100287E2C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_10032FE98);
  uint64_t v7 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1002881A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v11 = v17;
    type metadata accessor for CustodianInvitationMessage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = v7;
    char v19 = 0;
    sub_100029F58();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = v17;
    *(unsigned char *)(v17 + 16) = v20;
    char v18 = 1;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v11 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v6, v3);
  }
  sub_100008EA8((uint64_t)a1);
  return v11;
}

uint64_t sub_100288124@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CustodianInvitationMessage();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100287E2C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100288180(void *a1)
{
  return sub_100287BC4(a1);
}

unint64_t sub_1002881A4()
{
  unint64_t result = qword_10032FEA0;
  if (!qword_10032FEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FEA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianInvitationMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002882C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianInvitationMessage.CodingKeys()
{
  return &type metadata for CustodianInvitationMessage.CodingKeys;
}

unint64_t sub_100288300()
{
  unint64_t result = qword_10032FEB0;
  if (!qword_10032FEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FEB0);
  }
  return result;
}

unint64_t sub_100288358()
{
  unint64_t result = qword_10032FEB8;
  if (!qword_10032FEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FEB8);
  }
  return result;
}

unint64_t sub_1002883B0()
{
  unint64_t result = qword_10032FEC0;
  if (!qword_10032FEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FEC0);
  }
  return result;
}

uint64_t sub_100288404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v63 = a8;
  uint64_t v64 = a7;
  unint64_t v61 = a5;
  uint64_t v56 = a2;
  uint64_t v57 = a4;
  unint64_t v59 = a3;
  int v62 = a6;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v55 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v20 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v21 = a9 + v20[11];
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v54(v21, 1, 1, v16);
  os_log_type_t v22 = (void *)(a9 + v20[12]);
  *os_log_type_t v22 = 0;
  v22[1] = 0;
  uint64_t v60 = v22;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v23(a9, a1, v16);
  v23(a9 + v20[5], a1 + v20[5], v16);
  uint64_t v24 = v20[6];
  uint64_t v58 = a1;
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = *(void *)(a1 + v24 + 8);
  uint64_t v27 = (void *)(a9 + v24);
  *uint64_t v27 = v25;
  v27[1] = v26;
  sub_100108374(v64, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    swift_bridgeObjectRetain();
    sub_1000833BC((uint64_t)v15);
    uint64_t v28 = v58;
    sub_1000196C8(v58 + v20[11], v21);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v30 = v55;
    v29(v55, v15, v16);
    swift_bridgeObjectRetain();
    sub_1000833BC(v21);
    v29((char *)v21, v30, v16);
    v54(v21, 0, 1, v16);
    uint64_t v28 = v58;
  }
  int v31 = v62;
  if (v62 == 2 || ((((v62 & 1) == 0) ^ *(unsigned __int8 *)(v28 + v20[10])) & 1) != 0)
  {
    sub_1000833BC(v64);
    uint64_t v32 = v20[9];
    uint64_t v33 = *(void *)(v28 + v32);
    unint64_t v34 = *(void *)(v28 + v32 + 8);
    uint64_t v35 = (uint64_t *)(a9 + v32);
    *uint64_t v35 = v33;
    v35[1] = v34;
    sub_100013140(v33, v34);
  }
  else
  {
    sub_1000833BC(v64);
    *(_OWORD *)(a9 + v20[9]) = xmmword_1002A9C60;
  }
  uint64_t v36 = v20[7];
  unint64_t v37 = v59;
  if (v59 >> 60 == 15)
  {
    uint64_t v38 = *(void *)(v28 + v36);
    unint64_t v39 = *(void *)(v28 + v36 + 8);
    uint64_t v40 = (uint64_t *)(a9 + v36);
    *uint64_t v40 = v38;
    v40[1] = v39;
    sub_100013140(v38, v39);
  }
  else
  {
    uint64_t v41 = (void *)(a9 + v36);
    void *v41 = v56;
    v41[1] = v37;
  }
  unint64_t v42 = v61;
  uint64_t v43 = v20[8];
  if (v61 >> 60 == 15)
  {
    uint64_t v44 = *(void *)(v28 + v43);
    unint64_t v45 = *(void *)(v28 + v43 + 8);
    uint64_t v46 = (uint64_t *)(a9 + v43);
    *uint64_t v46 = v44;
    v46[1] = v45;
    sub_1000196B4(v44, v45);
  }
  else
  {
    uint64_t v47 = (void *)(a9 + v43);
    *uint64_t v47 = v57;
    v47[1] = v42;
  }
  uint64_t v48 = a10;
  if (v31 == 2)
  {
    *(unsigned char *)(a9 + v20[10]) = *(unsigned char *)(v28 + v20[10]);
    uint64_t v49 = v63;
    if (!a10) {
      goto LABEL_18;
    }
  }
  else
  {
    *(unsigned char *)(a9 + v20[10]) = v31 & 1;
    uint64_t v49 = v63;
    if (!a10)
    {
LABEL_18:
      uint64_t v50 = (uint64_t *)(v28 + v20[12]);
      uint64_t v49 = *v50;
      uint64_t v48 = v50[1];
      swift_bridgeObjectRetain();
    }
  }
  sub_10028ADB0(v28);
  uint64_t v51 = v60;
  uint64_t result = swift_bridgeObjectRelease();
  void *v51 = v49;
  v51[1] = v48;
  return result;
}

uint64_t sub_1002887CC@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v118 = a2;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  uint64_t v115 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v107 - v11;
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v107 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v114 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v119 = (char *)&v107 - v23;
  __chkstk_darwin(v22, v24);
  unint64_t v121 = (char *)&v107 - v25;
  uint64_t v26 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v27 = *(void (**)(void))(v17 + 56);
  uint64_t v122 = a3 + *(int *)(v26 + 44);
  uint64_t v123 = v16;
  uint64_t v113 = v27;
  v27();
  uint64_t v116 = (int *)v26;
  uint64_t v117 = a3;
  uint64_t v28 = (uint64_t *)(a3 + *(int *)(v26 + 48));
  *uint64_t v28 = 0;
  v28[1] = 0;
  id v124 = a1;
  if (CKRecord.recordType.getter() == 0xD00000000000001BLL && v29 == 0x80000001002B3380)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      type metadata accessor for AACustodianError(0);
      uint64_t v127 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10028AEC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      goto LABEL_16;
    }
  }
  uint64_t v120 = v28;
  id v31 = v124;
  id v32 = [v124 recordID];
  id v33 = [v32 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = v17;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v36 = v123;
  if (v35(v15, 1, v123) == 1)
  {
    sub_1000833BC((uint64_t)v15);
    type metadata accessor for AACustodianError(0);
    uint64_t v127 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_10028AEC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

LABEL_16:
    uint64_t v49 = v122;
LABEL_19:
    sub_1000833BC(v49);
    return swift_bridgeObjectRelease();
  }
  uint64_t v111 = v34;
  unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v37(v121, v15, v36);
  id v38 = [v31 encryptedValues];
  NSString v39 = String._bridgeToObjectiveC()();
  id v112 = v38;
  id v40 = [v38 objectForKeyedSubscript:v39];

  if (!v40 || (uint64_t v127 = (uint64_t)v40, sub_100009F04(&qword_1003239A0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E748);
    uint64_t v43 = v124;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412290;
      uint64_t v125 = (uint64_t)v43;
      uint64_t v48 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v43;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Missing CustodianID - %@", v46, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v44 = v43;
    }
    uint64_t v50 = v111;
    uint64_t v49 = v122;

    type metadata accessor for AACustodianError(0);
    uint64_t v127 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_10028AEC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v50 + 8))(v121, v123);
    goto LABEL_19;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = v123;
  if (v35(v12, 1, v123) == 1)
  {
    sub_1000833BC((uint64_t)v12);
    goto LABEL_11;
  }
  v37(v119, v12, v41);
  NSString v52 = String._bridgeToObjectiveC()();
  id v53 = [v112 objectForKeyedSubscript:v52];

  if (!v53 || (uint64_t v127 = (uint64_t)v53, (swift_dynamicCast() & 1) == 0))
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_100007288(v60, (uint64_t)qword_10033E748);
    unint64_t v61 = v124;
    int v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 138412290;
      uint64_t v125 = (uint64_t)v61;
      uint64_t v66 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v65 = v61;

      uint64_t v67 = "Missing Owner AltDSID - %@";
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v62, v63, v67, v64, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_38:
      uint64_t v72 = v111;
      uint64_t v49 = v122;

      type metadata accessor for AACustodianError(0);
      uint64_t v127 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_10028AEC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      swift_unknownObjectRelease();

      unint64_t v73 = *(void (**)(char *, uint64_t))(v72 + 8);
      uint64_t v74 = v123;
      v73(v119, v123);
      v73(v121, v74);
      goto LABEL_19;
    }
LABEL_37:

    int v62 = v61;
    goto LABEL_38;
  }
  uint64_t v109 = v125;
  unint64_t v110 = v126;
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = [v112 objectForKeyedSubscript:v54];

  if (!v55 || (uint64_t v127 = (uint64_t)v55, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    id v68 = v124;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100007288(v69, (uint64_t)qword_10033E748);
    unint64_t v61 = v68;
    int v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      char v70 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v64 = 138412290;
      uint64_t v125 = (uint64_t)v61;
      uint64_t v71 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v70 = v61;

      uint64_t v67 = "Missing PRK - %@";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  unint64_t v107 = v126;
  uint64_t v108 = v125;
  NSString v56 = String._bridgeToObjectiveC()();
  id v57 = [v112 objectForKeyedSubscript:v56];

  if (v57)
  {
    uint64_t v127 = (uint64_t)v57;
    if (swift_dynamicCast())
    {
      uint64_t v58 = (uint64_t)v115;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v59 = v123;
      if (v35((char *)v58, 1, v123) == 1)
      {
        sub_1000833BC(v58);
      }
      else
      {
        uint64_t v75 = v114;
        v37(v114, (char *)v58, v59);
        uint64_t v76 = v122;
        sub_1000833BC(v122);
        v37((char *)v76, v75, v59);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v113)(v76, 0, 1, v59);
      }
    }
  }
  NSString v77 = String._bridgeToObjectiveC()();
  id v78 = [v112 objectForKeyedSubscript:v77];

  unint64_t v80 = v110;
  uint64_t v79 = v111;
  uint64_t v82 = v116;
  uint64_t v81 = v117;
  if (v78)
  {
    uint64_t v127 = (uint64_t)v78;
    if (swift_dynamicCast())
    {
      uint64_t v83 = v125;
      unint64_t v84 = v126;
      uint64_t v85 = v120;
      swift_bridgeObjectRelease();
      *uint64_t v85 = v83;
      v85[1] = v84;
    }
  }
  uint64_t v86 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 16);
  uint64_t v87 = v123;
  v86(v81, v121, v123);
  v86(v81 + v82[5], v119, v87);
  uint64_t v88 = (uint64_t *)(v81 + v82[6]);
  uint64_t v89 = v108;
  uint64_t *v88 = v109;
  v88[1] = v80;
  uint64_t v90 = (uint64_t *)(v81 + v82[7]);
  unint64_t v91 = v107;
  *uint64_t v90 = v89;
  v90[1] = v91;
  sub_100013140(v89, v91);
  NSString v92 = String._bridgeToObjectiveC()();
  id v93 = [v112 objectForKeyedSubscript:v92];

  unint64_t v94 = 0xF000000000000000;
  if (v93)
  {
    uint64_t v127 = (uint64_t)v93;
    int v95 = swift_dynamicCast();
    uint64_t v96 = v125;
    if (v95) {
      unint64_t v94 = v126;
    }
    else {
      uint64_t v96 = 0;
    }
  }
  else
  {
    uint64_t v96 = 0;
  }
  uint64_t v97 = (uint64_t *)(v81 + v82[8]);
  *uint64_t v97 = v96;
  v97[1] = v94;
  id v98 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  id v99 = v124;
  [v124 encodeSystemFieldsWithCoder:v98];
  [v98 finishEncoding];
  id v100 = [v98 encodedData];
  uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v103 = v102;
  swift_unknownObjectRelease();

  sub_100013198(v108, v107);
  uint64_t v104 = *(void (**)(char *, uint64_t))(v79 + 8);
  uint64_t v105 = v123;
  v104(v119, v123);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v104)(v121, v105);
  uint64_t v106 = (uint64_t *)(v81 + v82[9]);
  *uint64_t v106 = v101;
  v106[1] = v103;
  *(unsigned char *)(v81 + v82[10]) = v118 & 1;
  return result;
}

uint64_t sub_1002896AC(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v51 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  NSString v52 = (char *)&v51 - v9;
  [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v11 = v55;
  NSString v54 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v12 = UUID.uuidString.getter();
  if (!*((void *)&v11 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (v11 != __PAIR128__(v13, v12))
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v15 = UUID.uuidString.getter();
    *((void *)&v56 + 1) = &type metadata for String;
    id v57 = &protocol witness table for String;
    *(void *)&long long v55 = v15;
    *((void *)&v55 + 1) = v16;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v17 = (unint64_t *)(v1 + v54[6]);
  unint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  uint64_t v53 = v2;
  if (!*((void *)&v55 + 1)) {
    goto LABEL_12;
  }
  if (v55 == __PAIR128__(v18, v19))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_12:
    *((void *)&v56 + 1) = &type metadata for String;
    id v57 = &protocol witness table for String;
    *(void *)&long long v55 = v19;
    *((void *)&v55 + 1) = v18;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_13:
  CKRecordKeyValueSetting.subscript.getter();
  long long v21 = v55;
  uint64_t v22 = (uint64_t *)(v53 + v54[7]);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_100013140(*v22, v24);
  if (*((void *)&v21 + 1) >> 60 == 15)
  {
    sub_1000196A0(v21, *((unint64_t *)&v21 + 1));
    sub_1000196A0(v23, v24);
  }
  else
  {
    sub_1000196B4(v21, *((unint64_t *)&v21 + 1));
    char v25 = sub_100012680(v21, *((unint64_t *)&v21 + 1), v23, v24);
    sub_100013198(v23, v24);
    sub_1000196A0(v21, *((unint64_t *)&v21 + 1));
    sub_1000196A0(v21, *((unint64_t *)&v21 + 1));
    if (v25) {
      goto LABEL_17;
    }
  }
  *((void *)&v56 + 1) = &type metadata for Data;
  id v57 = &protocol witness table for Data;
  *(void *)&long long v55 = v23;
  *((void *)&v55 + 1) = v24;
  sub_100013140(v23, v24);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_17:
  CKRecordKeyValueSetting.subscript.getter();
  long long v26 = v55;
  uint64_t v27 = (uint64_t *)(v53 + v54[8]);
  uint64_t v29 = *v27;
  unint64_t v28 = v27[1];
  if (*((void *)&v55 + 1) >> 60 == 15)
  {
    if (v28 >> 60 == 15)
    {
      uint64_t v30 = (uint64_t)v52;
      goto LABEL_26;
    }
    sub_1000196B4(v29, v28);
    sub_1000196A0(v26, *((unint64_t *)&v26 + 1));
    sub_1000196A0(v29, v28);
    uint64_t v30 = (uint64_t)v52;
LABEL_24:
    *((void *)&v56 + 1) = &type metadata for Data;
    id v57 = &protocol witness table for Data;
    *(void *)&long long v55 = v29;
    *((void *)&v55 + 1) = v28;
    goto LABEL_25;
  }
  sub_1000196B4(v29, v28);
  if (v28 >> 60 != 15)
  {
    sub_1000196B4(v26, *((unint64_t *)&v26 + 1));
    char v31 = sub_100012680(v26, *((unint64_t *)&v26 + 1), v29, v28);
    sub_1000196A0(v29, v28);
    sub_1000196A0(v26, *((unint64_t *)&v26 + 1));
    sub_1000196A0(v26, *((unint64_t *)&v26 + 1));
    uint64_t v30 = (uint64_t)v52;
    if (v31) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  sub_1000196A0(v26, *((unint64_t *)&v26 + 1));
  sub_1000196A0(v29, v28);
  id v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v30 = (uint64_t)v52;
LABEL_25:
  sub_1000196B4(v29, v28);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_26:
  NSString v52 = (char *)ObjectType;
  CKRecordKeyValueSetting.subscript.getter();
  long long v32 = v55;
  uint64_t v33 = v53 + v54[11];
  sub_100108374(v33, v30);
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v36(v30, 1, v34) == 1)
  {
    sub_1000833BC(v30);
    if (!*((void *)&v32 + 1)) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
  uint64_t v37 = UUID.uuidString.getter();
  uint64_t v38 = v30;
  uint64_t v39 = v37;
  unint64_t v41 = v40;
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v34);
  if (!*((void *)&v32 + 1))
  {
    if (!v41) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
  if (!v41)
  {
LABEL_35:
    swift_bridgeObjectRelease();
LABEL_36:
    uint64_t v42 = v51;
    sub_100108374(v33, v51);
    if (v36(v42, 1, v34) == 1)
    {
      sub_1000833BC(v42);
      long long v55 = 0u;
      long long v56 = 0u;
      id v57 = 0;
    }
    else
    {
      uint64_t v43 = UUID.uuidString.getter();
      *((void *)&v56 + 1) = &type metadata for String;
      id v57 = &protocol witness table for String;
      *(void *)&long long v55 = v43;
      *((void *)&v55 + 1) = v44;
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v42, v34);
    }
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_41;
  }
  if (v32 == __PAIR128__(v41, v39))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v50 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_41:
  CKRecordKeyValueSetting.subscript.getter();
  os_log_type_t v45 = (unint64_t *)(v53 + v54[12]);
  unint64_t v47 = *v45;
  unint64_t v46 = v45[1];
  if (!*((void *)&v55 + 1))
  {
    if (!v46) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_49;
  }
  if (!v46)
  {
    swift_bridgeObjectRelease();
    id v57 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
LABEL_50:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if (v55 == __PAIR128__(v46, v47))
  {
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v49 & 1) == 0)
  {
LABEL_49:
    *((void *)&v56 + 1) = &type metadata for String;
    id v57 = &protocol witness table for String;
    *(void *)&long long v55 = v47;
    *((void *)&v55 + 1) = v46;
    goto LABEL_50;
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_100289F1C(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169646F74737563;
      break;
    case 2:
      unint64_t result = 0x646F74737543746FLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x797265766F636572;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10028A05C()
{
  return sub_100289F1C(*v0);
}

uint64_t sub_10028A064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10028C1E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10028A08C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_10028A098(uint64_t a1)
{
  unint64_t v2 = sub_10028AE0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028A0D4(uint64_t a1)
{
  unint64_t v2 = sub_10028AE0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028A110@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  NSString v54 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  id v57 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v58 = (char *)&v50 - v12;
  uint64_t v13 = sub_100009F04(&qword_10032FEE8);
  uint64_t v56 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v19 = __chkstk_darwin(v17, v18);
  long long v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(int *)(v19 + 44);
  uint64_t v64 = v7;
  uint64_t v65 = &v21[v22];
  char v25 = *(void (**)(void))(v7 + 56);
  uint64_t v23 = v7 + 56;
  unint64_t v24 = v25;
  v25();
  uint64_t v60 = (int *)v17;
  unint64_t v61 = a1;
  long long v26 = &v21[*(int *)(v17 + 48)];
  *(void *)long long v26 = 0;
  *((void *)v26 + 1) = 0;
  int v62 = v26;
  sub_100008EF8(a1, a1[3]);
  sub_10028AE0C();
  uint64_t v27 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v59 = v6;
  if (v27)
  {
    uint64_t v31 = (uint64_t)v65;
    sub_100008EA8((uint64_t)v61);
    sub_1000833BC(v31);
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v28 = v57;
    uint64_t v52 = v23;
    uint64_t v53 = v24;
    LOBYTE(v66) = 0;
    uint64_t v29 = sub_10028AEC4((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = v13;
    long long v32 = v16;
    uint64_t v33 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
    uint64_t v51 = 0;
    v33(0, v58, v6);
    LOBYTE(v66) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v34 = v6;
    uint64_t v58 = (char *)v29;
    uint64_t v35 = v60;
    uint64_t v36 = v51;
    v33(v51 + v60[5], v28, v34);
    LOBYTE(v66) = 3;
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v38 = (uint64_t)v61;
    uint64_t v39 = (uint64_t *)(v36 + v35[6]);
    *uint64_t v39 = v37;
    v39[1] = v40;
    char v67 = 4;
    sub_1000130EC();
    uint64_t v41 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    LODWORD(v63) = 1;
    *(_OWORD *)(v36 + v35[7]) = v66;
    char v67 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)(v36 + v35[8]) = v66;
    char v67 = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v36 + v35[9]) = v66;
    LOBYTE(v66) = 7;
    *(unsigned char *)(v36 + v35[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v66) = 2;
    uint64_t v42 = (uint64_t)v54;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v43 = v55;
    sub_100018A54(v42, (uint64_t)v65);
    LOBYTE(v66) = 8;
    uint64_t v44 = v32;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v30);
    uint64_t v48 = (uint64_t *)v62;
    swift_bridgeObjectRelease();
    *uint64_t v48 = v45;
    v48[1] = v47;
    sub_10028AE60(v41, v43);
    sub_100008EA8(v38);
    return sub_10028ADB0(v41);
  }
}

uint64_t sub_10028A904(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_10032FEF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_10028AE0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_10028AEC4(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v10[7]);
    char v14 = 4;
    v12[1] = sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v10[8]);
    char v14 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + v10[9]);
    char v14 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10028AC58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028A110(a1, a2);
}

uint64_t sub_10028AC70(void *a1)
{
  return sub_10028A904(a1);
}

uint64_t sub_10028AC88(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10028AEC4((unint64_t *)&unk_10032FED0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t result = sub_10028AEC4(&qword_1003235A8, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryInfoRecord()
{
  uint64_t result = qword_10032FF58;
  if (!qword_10032FF58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028AD58(uint64_t a1)
{
  uint64_t result = sub_10028AEC4(&qword_10032FEE0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10028ADB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecoveryInfoRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10028AE0C()
{
  unint64_t result = qword_10032FEF0;
  if (!qword_10032FEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FEF0);
  }
  return result;
}

uint64_t sub_10028AE60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoveryInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028AEC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianRecoveryInfoRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10028AFD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryInfoRecord.CodingKeys()
{
  return &type metadata for CustodianRecoveryInfoRecord.CodingKeys;
}

char *sub_10028B010(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9(&a1[a3[5]], &a2[a3[5]], v7);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v12 = &a1[v10];
    long long v13 = &a2[v10];
    uint64_t v14 = *((void *)v13 + 1);
    *(void *)uint64_t v12 = *(void *)v13;
    *((void *)v12 + 1) = v14;
    uint64_t v15 = (uint64_t *)&a1[v11];
    uint64_t v16 = *(void *)&a2[v11];
    unint64_t v17 = *(void *)&a2[v11 + 8];
    swift_bridgeObjectRetain();
    sub_100013140(v16, v17);
    *uint64_t v15 = v16;
    v15[1] = v17;
    uint64_t v18 = a3[8];
    uint64_t v19 = &a1[v18];
    uint64_t v20 = &a2[v18];
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v23 = *(void *)v20;
      sub_100013140(*(void *)v20, *((void *)v20 + 1));
      *(void *)uint64_t v19 = v23;
      *((void *)v19 + 1) = v21;
    }
    uint64_t v24 = a3[9];
    char v25 = (uint64_t *)&a1[v24];
    long long v26 = (uint64_t *)&a2[v24];
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    sub_100013140(*v26, v28);
    *char v25 = v27;
    v25[1] = v28;
    uint64_t v29 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v29], 1, v7))
    {
      uint64_t v32 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v9(v30, v31, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v30, 0, 1, v7);
    }
    uint64_t v33 = a3[12];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10028B27C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[8]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v9 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4)) {
    v6(v9, v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10028B3E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v9);
  uint64_t v12 = (void *)(a2 + v9);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = (uint64_t *)(a1 + v10);
  uint64_t v15 = *(void *)(a2 + v10);
  unint64_t v16 = *(void *)(a2 + v10 + 8);
  swift_bridgeObjectRetain();
  sub_100013140(v15, v16);
  *uint64_t v14 = v15;
  v14[1] = v16;
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_100013140(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }
  uint64_t v22 = a3[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_100013140(*v24, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  unint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v27, 1, v6))
  {
    uint64_t v30 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v28, (uint64_t)v29, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
  }
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10028B5FC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v44 = v8;
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)&a1[v12];
  uint64_t v14 = (uint64_t *)&a2[v12];
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_100013140(*v14, v16);
  uint64_t v17 = *v13;
  unint64_t v18 = v13[1];
  *uint64_t v13 = v15;
  v13[1] = v16;
  sub_100013198(v17, v18);
  uint64_t v19 = a3[8];
  unint64_t v20 = (uint64_t *)&a1[v19];
  uint64_t v21 = (uint64_t *)&a2[v19];
  unint64_t v22 = *(void *)&a2[v19 + 8];
  if (*(void *)&a1[v19 + 8] >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100013140(v23, v22);
      *unint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v22 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v20);
LABEL_6:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    goto LABEL_8;
  }
  uint64_t v24 = *v21;
  sub_100013140(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *unint64_t v20 = v24;
  v20[1] = v22;
  sub_100013198(v25, v26);
LABEL_8:
  uint64_t v27 = a3[9];
  unint64_t v28 = (uint64_t *)&a1[v27];
  uint64_t v29 = (uint64_t *)&a2[v27];
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_100013140(*v29, v31);
  uint64_t v32 = *v28;
  unint64_t v33 = v28[1];
  *unint64_t v28 = v30;
  v28[1] = v31;
  sub_100013198(v32, v33);
  a1[a3[10]] = a2[a3[10]];
  uint64_t v34 = a3[11];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v28) = v37(&a1[v34], 1, v6);
  int v38 = v37(v36, 1, v6);
  if (!v28)
  {
    if (!v38)
    {
      v44(v35, v36, v6);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v35, v6);
    goto LABEL_13;
  }
  if (v38)
  {
LABEL_13:
    uint64_t v39 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v35, v36, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v35, 0, 1, v6);
LABEL_14:
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10028B90C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v11 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *sub_10028BAB4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v39 = v8;
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)&a1[v14];
  unint64_t v16 = *(void *)&a1[v14 + 8];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  sub_100013198(v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t)&a1[v17];
  uint64_t v19 = &a2[v17];
  unint64_t v20 = *(void *)&a1[v17 + 8];
  if (v20 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v21 = *((void *)v19 + 1);
  if (v21 >> 60 == 15)
  {
    sub_1000AD378(v18);
LABEL_4:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)v18;
  *(void *)uint64_t v18 = *(void *)v19;
  *(void *)(v18 + 8) = v21;
  sub_100013198(v22, v20);
LABEL_6:
  uint64_t v23 = a3[9];
  uint64_t v24 = *(void *)&a1[v23];
  unint64_t v25 = *(void *)&a1[v23 + 8];
  *(_OWORD *)&a1[v23] = *(_OWORD *)&a2[v23];
  sub_100013198(v24, v25);
  uint64_t v26 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v27 = &a1[v26];
  unint64_t v28 = &a2[v26];
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v30 = v29(&a1[v26], 1, v6);
  int v31 = v29(v28, 1, v6);
  if (!v30)
  {
    if (!v31)
    {
      v39(v27, v28, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
    goto LABEL_11;
  }
  if (v31)
  {
LABEL_11:
    uint64_t v32 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v27, v28, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
LABEL_12:
  uint64_t v33 = a3[12];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = (uint64_t *)&a2[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10028BD50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10028BD64);
}

uint64_t sub_10028BD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_10028BE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10028BEAC);
}

uint64_t sub_10028BEAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_10028BFE0()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10001AAF8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_10028C0E0()
{
  unint64_t result = qword_10032FFB8;
  if (!qword_10032FFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FFB8);
  }
  return result;
}

unint64_t sub_10028C138()
{
  unint64_t result = qword_10032FFC0;
  if (!qword_10032FFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FFC0);
  }
  return result;
}

unint64_t sub_10028C190()
{
  unint64_t result = qword_10032FFC8;
  if (!qword_10032FFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032FFC8);
  }
  return result;
}

uint64_t sub_10028C1E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000010029D0A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001002A19F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x797265766F636572 && a2 == 0xEB0000000079654BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029BC40)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_10028C5B4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  int v3 = sub_100168260(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_100009F04(&qword_1003215F0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10028C72C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  int v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  int v3 = sub_100168384(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[16 * v9 + 32];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = *((void *)v3 + 2);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    *((void *)v3 + 2) = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    int *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10028C884(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  int v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  int v3 = sub_100168930(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  sub_100009F04((uint64_t *)&unk_100325850);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10028C9E8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10028D9D8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

unint64_t sub_10028CBB4()
{
  type metadata accessor for CloudKitContainerStore();
  unint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  _DWORD *v1 = 0;
  v0[2] = v1;
  v0[3] = sub_10022084C((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t result = sub_100220858((uint64_t)&_swiftEmptyArrayStorage);
  v0[4] = result;
  qword_10033E9F0 = (uint64_t)v0;
  return result;
}

id sub_10028CC20(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  unint64_t v6 = (uint64_t *)(v2 + 24);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 24);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1001358B8(a1, a2);
    if (v9)
    {
      id v10 = *(id *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E718);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a1, a2, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Creating CloudKit container named: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v15 = [objc_allocWithZone((Class)CKContainerOptions) init];
  [v15 setUseZoneWidePCS:1];
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 setApplicationBundleIdentifierOverrideForPushTopicGeneration:v16];

  [v15 setUseAnonymousToServerShareParticipants:1];
  id v17 = objc_allocWithZone((Class)CKContainerID);
  swift_bridgeObjectRetain();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v17 initWithContainerIdentifier:v18 environment:1];

  id v20 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:v19 options:v15];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v10 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  sub_10022C0A0((uint64_t)v10, a1, a2, isUniquelyReferenced_nonNull_native);
  *unint64_t v6 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

LABEL_11:
  os_unfair_lock_unlock(v5);
  return v10;
}

objc_class *sub_10028CFBC(uint64_t a1, void *a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  unint64_t v6 = (uint64_t *)(v2 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 32);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1001358B8(a1, (uint64_t)a2);
    if (v9)
    {
      id v10 = (objc_class *)*(id *)(*(void *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E718);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a1, (unint64_t)a2, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Creating CloudKit zone named: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_10000850C(0, &qword_100323560);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v16;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  v19._countAndFlagsBits = v15;
  v19._object = v17;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v19).super.isa;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v10 = isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v23 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  sub_10022C698((uint64_t)v10, a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
  *unint64_t v6 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_11:
  os_unfair_lock_unlock(v5);
  return v10;
}

uint64_t sub_10028D2C8()
{
  uint64_t result = sub_10028DBEC(0xD000000000000014, 0x80000001002A1AC0);
  qword_10033E9F8 = result;
  unk_10033EA00 = v1;
  return result;
}

uint64_t sub_10028D304()
{
  uint64_t result = sub_10028DBEC(0xD00000000000001BLL, 0x80000001002A1AA0);
  qword_10033EA08 = result;
  unk_10033EA10 = v1;
  return result;
}

uint64_t sub_10028D340()
{
  uint64_t result = sub_10028DBEC(0xD000000000000016, 0x80000001002A1A80);
  qword_10033EA18 = result;
  unk_10033EA20 = v1;
  return result;
}

uint64_t sub_10028D37C()
{
  uint64_t result = sub_10028DBEC(0xD00000000000001DLL, 0x80000001002A1A60);
  qword_10033EA28 = result;
  unk_10033EA30 = v1;
  return result;
}

uint64_t sub_10028D3B8()
{
  sub_100009F04(&qword_10032DAE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002A9F00;
  if (qword_100320CD0 != -1) {
    swift_once();
  }
  uint64_t v1 = unk_10033EA00;
  *(void *)(v0 + 32) = qword_10033E9F8;
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = qword_100320CD8;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = unk_10033EA10;
  *(void *)(v0 + 48) = qword_10033EA08;
  *(void *)(v0 + 56) = v3;
  qword_10033EA38 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10028D498()
{
  sub_100009F04(&qword_10032DAE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002A9F00;
  if (qword_100320CE0 != -1) {
    swift_once();
  }
  uint64_t v1 = unk_10033EA20;
  *(void *)(v0 + 32) = qword_10033EA18;
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = qword_100320CE8;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = unk_10033EA30;
  *(void *)(v0 + 48) = qword_10033EA28;
  *(void *)(v0 + 56) = v3;
  qword_10033EA40 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10028D578()
{
  if (qword_100320CF0 != -1) {
    swift_once();
  }
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_10028C72C(v0);
  if (qword_100320CF8 != -1) {
    swift_once();
  }
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t result = sub_10028C72C(v1);
  qword_10033EA48 = (uint64_t)&_swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10028D63C()
{
  sub_100009F04(&qword_10032DAE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002A9F00;
  if (qword_100320CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = unk_10033EA10;
  *(void *)(v0 + 32) = qword_10033EA08;
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = qword_100320CE8;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = unk_10033EA30;
  *(void *)(v0 + 48) = qword_10033EA28;
  *(void *)(v0 + 56) = v3;
  qword_10033EA50 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10028D71C()
{
  uint64_t result = sub_10028D73C();
  qword_10033EA58 = result;
  return result;
}

uint64_t sub_10028D73C()
{
  uint64_t v0 = (void *)sub_100220A6C((uint64_t)&_swiftEmptyArrayStorage);
  if (qword_100320D00 != -1) {
LABEL_21:
  }
    swift_once();
  uint64_t v1 = *(void *)(qword_10033EA48 + 16);
  if (!v1) {
    return (uint64_t)v0;
  }
  uint64_t v2 = (void **)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v2 - 1);
    uint64_t v4 = *v2;
    uint64_t v22 = v1;
    swift_bridgeObjectRetain();
    v6._countAndFlagsBits = v5;
    v6._object = v4;
    String.append(_:)(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v9 = sub_1001358B8(0xD00000000000001BLL, 0x80000001002A1AE0);
    uint64_t v10 = v0[2];
    BOOL v11 = (v8 & 1) == 0;
    uint64_t v12 = v10 + v11;
    if (__OFADD__(v10, v11))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    char v13 = v8;
    if (v0[3] < v12) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_10022CCC4();
      if (v13)
      {
LABEL_4:
        uint64_t v3 = (uint64_t *)(v0[7] + 16 * v9);
        swift_bridgeObjectRelease();
        uint64_t *v3 = v5;
        v3[1] = (uint64_t)v4;
        goto LABEL_5;
      }
    }
LABEL_13:
    v0[(v9 >> 6) + 8] |= 1 << v9;
    NSString v16 = (void *)(v0[6] + 16 * v9);
    *NSString v16 = 0xD00000000000001BLL;
    v16[1] = 0x80000001002A1AE0;
    id v17 = (uint64_t *)(v0[7] + 16 * v9);
    *id v17 = v5;
    v17[1] = (uint64_t)v4;
    uint64_t v18 = v0[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_20;
    }
    v0[2] = v20;
    swift_bridgeObjectRetain();
LABEL_5:
    v2 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v22 - 1;
    if (v22 == 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v0;
    }
  }
  sub_100229870(v12, isUniquelyReferenced_nonNull_native);
  unint64_t v14 = sub_1001358B8(0xD00000000000001BLL, 0x80000001002A1AE0);
  if ((v13 & 1) == (v15 & 1))
  {
    unint64_t v9 = v14;
    if (v13) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10028D974()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitContainerStore()
{
  return self;
}

uint64_t sub_10028D9D8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10028E064();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100009F04(&qword_10032C4C8);
          uint64_t v12 = sub_10020CFF0(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000850C(0, (unint64_t *)&unk_100325970);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10028DBEC(uint64_t a1, unint64_t a2)
{
  if (AAUnderTest.getter()) {
    return 0;
  }
  uint64_t v4 = self;
  id v5 = [v4 mainBundle];
  id v6 = [v5 infoDictionary];

  if (v6)
  {
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_1001358B8(a1, a2);
      if (v9)
      {
        sub_100047DD4(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*((void *)&v24 + 1))
        {
          if (swift_dynamicCast()) {
            return v20;
          }
          goto LABEL_16;
        }
LABEL_15:
        sub_100058764((uint64_t)&v23);
LABEL_16:
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_100007288(v16, (uint64_t)qword_10033E700);
        swift_bridgeObjectRetain_n();
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v12, v17))
        {

          swift_bridgeObjectRelease_n();
          return 0;
        }
        uint64_t v18 = swift_slowAlloc();
        BOOL v19 = (void *)swift_slowAlloc();
        *(void *)&long long v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_100135190(a1, a2, (uint64_t *)&v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2112;
        id v22 = [v4 mainBundle:v21];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *BOOL v19 = v22;
        _os_log_impl((void *)&_mh_execute_header, v12, v17, "Unable to read %s from Info.plist of %@", (uint8_t *)v18, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_20;
      }
      long long v23 = 0u;
      long long v24 = 0u;
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v23 = 0u;
      long long v24 = 0u;
    }
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E700);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v12, v13)) {
    goto LABEL_21;
  }
  id v14 = (uint8_t *)swift_slowAlloc();
  char v15 = (void *)swift_slowAlloc();
  *(_DWORD *)id v14 = 138412290;
  *(void *)&long long v23 = [v4 mainBundle];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *char v15 = v23;
  _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to load Info.plist of %@", v14, 0xCu);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_20:
  swift_slowDealloc();
LABEL_21:

  return 0;
}

unint64_t sub_10028E064()
{
  unint64_t result = qword_1003300D0;
  if (!qword_1003300D0)
  {
    sub_1000112CC(&qword_10032C4C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003300D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Coder()
{
  return &type metadata for Coder;
}

uint64_t type metadata accessor for DaemonDeviceState()
{
  return self;
}

uint64_t type metadata accessor for CustodianMigrationAnalyticsEvent()
{
  uint64_t result = qword_100330178;
  if (!qword_100330178) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028E140()
{
  return swift_initClassMetadata2();
}

void sub_10028E180()
{
}

id sub_10028E1B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianMigrationAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_10028E1EC()
{
  return type metadata accessor for CustodianMigrationAnalyticsEvent();
}

uint64_t sub_10028E1F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v11 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v12 = (void *)(a7 + v11[6]);
  *uint64_t v12 = 0;
  v12[1] = 0;
  os_log_type_t v13 = (void *)(a7 + v11[7]);
  uint64_t v14 = type metadata accessor for UUID();
  *os_log_type_t v13 = 0;
  v13[1] = 0;
  char v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(a7, a1, v14);
  v15(a7 + v11[9], a1 + v11[9], v14);
  uint64_t v16 = v11[10];
  uint64_t v18 = *(void *)(a1 + v16);
  unint64_t v17 = *(void *)(a1 + v16 + 8);
  BOOL v19 = (uint64_t *)(a7 + v16);
  *BOOL v19 = v18;
  v19[1] = v17;
  if (a3)
  {
    uint64_t v20 = (void *)(a7 + v11[5]);
    *uint64_t v20 = a2;
    v20[1] = a3;
  }
  else
  {
    uint64_t v21 = v11[5];
    uint64_t v23 = *(void *)(a1 + v21);
    uint64_t v22 = *(void *)(a1 + v21 + 8);
    long long v24 = (void *)(a7 + v21);
    *long long v24 = v23;
    v24[1] = v22;
    swift_bridgeObjectRetain();
  }
  unint64_t v25 = (void *)(a1 + v11[6]);
  uint64_t v26 = v25[1];
  uint64_t v27 = a4;
  if (v26)
  {
    *uint64_t v12 = *v25;
    v12[1] = v26;
  }
  unint64_t v28 = (void *)(a1 + v11[7]);
  uint64_t v29 = v28[1];
  if (v29)
  {
    *os_log_type_t v13 = *v28;
    v13[1] = v29;
  }
  uint64_t v30 = v11[8];
  if (a5) {
    uint64_t v27 = *(void *)(a1 + v30);
  }
  *(void *)(a7 + v30) = v27;
  if (a6 == 2) {
    char v31 = *(unsigned char *)(a1 + v11[11]);
  }
  else {
    char v31 = a6 & 1;
  }
  sub_100013140(v18, v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_100163C40(a1);
  *(unsigned char *)(a7 + v11[11]) = v31;
  return result;
}

uint64_t sub_10028E3A8@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v89 = a2;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  char v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v82 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v90 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  NSString v92 = (char *)&v82 - v18;
  BOOL v19 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v20 = (NSObject **)(a3 + v19[6]);
  *uint64_t v20 = 0;
  v20[1] = 0;
  unint64_t v94 = v20;
  uint64_t v21 = v19[7];
  uint64_t v88 = a3;
  uint64_t v22 = (NSObject **)(a3 + v21);
  *uint64_t v22 = 0;
  v22[1] = 0;
  if (CKRecord.recordType.getter() == 0xD00000000000001BLL && v23 == 0x80000001002B3780)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      type metadata accessor for InheritanceError(0);
      uint64_t v98 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1002905F8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      goto LABEL_18;
    }
  }
  unint64_t v91 = v22;
  id v25 = [a1 recordID];
  id v26 = [v25 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v93 = v13;

  UUID.init(uuidString:)();
  uint64_t v27 = v93;
  swift_bridgeObjectRelease();
  uint64_t v28 = v95;
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
  if (v29(v12, 1, v27) == 1)
  {
    sub_1000833BC((uint64_t)v12);
    type metadata accessor for InheritanceError(0);
    uint64_t v98 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1002905F8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

LABEL_18:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  uint64_t v85 = v28 + 32;
  uint64_t v86 = v30;
  v30(v92, v12, v27);
  id v31 = [a1 encryptedValuesByKey];
  NSString v32 = String._bridgeToObjectiveC()();
  id v33 = [v31 objectForKeyedSubscript:v32];

  if (!v33 || (uint64_t v98 = (uint64_t)v33, sub_100009F04(&qword_1003239A0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E760);
    uint64_t v36 = a1;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      id v87 = v31;
      uint64_t v40 = (uint8_t *)v39;
      uint64_t v41 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 138412290;
      uint64_t v96 = v36;
      uint64_t v42 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v41 = v36;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing Inheritance beneficiaryID - %@", v40, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v37 = v36;
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v98 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1002905F8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v93);
    goto LABEL_18;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v34 = v93;
  if (v29(v9, 1, v93) == 1)
  {
    sub_1000833BC((uint64_t)v9);
    goto LABEL_11;
  }
  v86(v90, v9, v34);
  NSString v44 = String._bridgeToObjectiveC()();
  id v87 = v31;
  id v45 = [v31 objectForKeyedSubscript:v44];

  uint64_t v46 = v91;
  if (!v45 || (uint64_t v98 = (uint64_t)v45, (swift_dynamicCast() & 1) == 0))
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100007288(v69, (uint64_t)qword_10033E760);
    char v70 = a1;
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      unint64_t v73 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v73 = 138412290;
      uint64_t v96 = v70;
      uint64_t v75 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v74 = v70;

      uint64_t v76 = "Missing Inheritance Handle - %@";
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v71, v72, v76, v73, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_40:

      type metadata accessor for InheritanceError(0);
      uint64_t v98 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1002905F8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      swift_unknownObjectRelease();

      unint64_t v80 = *(void (**)(char *, uint64_t))(v95 + 8);
      uint64_t v81 = v93;
      v80(v90, v93);
      v80(v92, v81);
      goto LABEL_18;
    }
LABEL_39:

    uint64_t v71 = v70;
    goto LABEL_40;
  }
  uint64_t v83 = v96;
  unint64_t v84 = v97;
  NSString v47 = String._bridgeToObjectiveC()();
  uint64_t v48 = [v87 objectForKeyedSubscript:v47];

  if (!v48 || (uint64_t v96 = v48, type metadata accessor for Status(0), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    sub_100007288(v77, (uint64_t)qword_10033E760);
    char v70 = a1;
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      unint64_t v73 = (uint8_t *)swift_slowAlloc();
      id v78 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v73 = 138412290;
      uint64_t v96 = v70;
      uint64_t v79 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v78 = v70;

      uint64_t v76 = "Missing TrustedContactStatus - %@";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v95 = v98;
  NSString v49 = String._bridgeToObjectiveC()();
  id v50 = [v87 objectForKeyedSubscript:v49];

  if (v50)
  {
    uint64_t v98 = (uint64_t)v50;
    if (swift_dynamicCast())
    {
      uint64_t v51 = v96;
      uint64_t v52 = v97;
      uint64_t v53 = v94;
      swift_bridgeObjectRelease();
      *uint64_t v53 = v51;
      v53[1] = v52;
    }
  }
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = [v87 objectForKeyedSubscript:v54];

  if (v55)
  {
    uint64_t v98 = (uint64_t)v55;
    if (swift_dynamicCast())
    {
      uint64_t v56 = v96;
      id v57 = v97;
      swift_bridgeObjectRelease();
      *uint64_t v46 = v56;
      v46[1] = v57;
    }
  }
  id v58 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v58];
  [v58 finishEncoding];
  id v59 = [v58 encodedData];
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;
  swift_unknownObjectRelease();

  uint64_t v63 = v88;
  uint64_t v64 = (uint64_t *)(v88 + v19[10]);
  *uint64_t v64 = v60;
  v64[1] = v62;
  uint64_t v65 = v93;
  long long v66 = (uint64_t (*)(uint64_t, char *, uint64_t))v86;
  v86((char *)(v63 + v19[9]), v92, v93);
  uint64_t result = v66(v63, v90, v65);
  char v67 = (NSObject **)(v63 + v19[5]);
  id v68 = v84;
  const char *v67 = v83;
  v67[1] = v68;
  *(void *)(v63 + v19[8]) = v95;
  *(unsigned char *)(v63 + v19[11]) = v89 & 1;
  return result;
}

uint64_t sub_10028F090@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10028F0A8(a1, a2);
}

uint64_t sub_10028F0A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = sub_100009F04(&qword_1003301F0);
  uint64_t v48 = *(void *)(v12 - 8);
  uint64_t v49 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = &v20[*(int *)(v18 + 24)];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  NSString v54 = (uint64_t *)v21;
  uint64_t v22 = v20;
  uint64_t v23 = &v20[*(int *)(v18 + 28)];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v52 = (int *)v18;
  uint64_t v53 = (uint64_t *)v23;
  uint64_t v24 = a1[3];
  uint64_t v51 = a1;
  sub_100008EF8(a1, v24);
  sub_100290540();
  id v50 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_100008EA8((uint64_t)v51);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v46 = v8;
    LOBYTE(v56) = 1;
    uint64_t v25 = sub_1002905F8((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v44 = v25;
    uint64_t v27 = *(void (**)(char *, char *))(v55 + 32);
    uint64_t v28 = (uint64_t)v22;
    uint64_t v45 = v4;
    v27(v22, v11);
    LOBYTE(v56) = 2;
    uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v30 = v52;
    id v31 = (uint64_t *)&v22[v52[5]];
    *id v31 = v29;
    v31[1] = v32;
    LOBYTE(v56) = 3;
    uint64_t v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v34 = v54;
    uint64_t *v54 = v33;
    v34[1] = v35;
    LOBYTE(v56) = 4;
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v37 = v53;
    *uint64_t v53 = v36;
    v37[1] = v38;
    LOBYTE(v56) = 5;
    *(void *)&v22[v30[8]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v56) = 0;
    uint64_t v39 = v45;
    uint64_t v40 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    ((void (*)(uint64_t, char *, uint64_t))v27)(v28 + v30[9], v40, v39);
    char v57 = 6;
    sub_1000130EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v28 + v30[10]) = v56;
    LOBYTE(v56) = 7;
    char v41 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = (uint64_t)v51;
    LOBYTE(v39) = v41;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v26);
    *(unsigned char *)(v28 + v30[11]) = v39 & 1;
    sub_100290594(v28, v47);
    sub_100008EA8(v42);
    return sub_100163C40(v28);
  }
}

uint64_t sub_10028F6D8(void *a1)
{
  return sub_10028F6F0(a1);
}

uint64_t sub_10028F6F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100330200);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100290540();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 1;
  type metadata accessor for UUID();
  sub_1002905F8(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for InheritanceInvitationRecord();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 0;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v10 + 40));
    char v13 = 6;
    sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_10028F9E8(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x69636966656E6562;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x737574617473;
      break;
    case 6:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10028FAF4()
{
  return sub_10028F9E8(*v0);
}

uint64_t sub_10028FAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100291220(a1, a2);
  *a3 = result;
  return result;
}

void sub_10028FB24(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10028FB30(uint64_t a1)
{
  unint64_t v2 = sub_100290540();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10028FB6C(uint64_t a1)
{
  unint64_t v2 = sub_100290540();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10028FBA8(id *a1)
{
  uint64_t v2 = v1;
  [*a1 encryptedValuesByKey];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v3 = UUID.uuidString.getter();
  if (!*((void *)&v22 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    *(void *)&long long v22 = UUID.uuidString.getter();
    *((void *)&v22 + 1) = v6;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  if (v22 == __PAIR128__(v4, v3))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v7 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v8 = (uint64_t *)(v1 + v7[5]);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  if (!*((void *)&v22 + 1))
  {
LABEL_13:
    *(void *)&long long v22 = v10;
    *((void *)&v22 + 1) = v9;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_15;
  }
  if ((void)v22 != v10 || *((void *)&v22 + 1) != v9)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  CKRecordKeyValueSetting.subscript.getter();
  char v13 = (unint64_t *)(v1 + v7[6]);
  unint64_t v15 = *v13;
  unint64_t v14 = v13[1];
  if (*((void *)&v22 + 1))
  {
    if (!v14)
    {
      swift_bridgeObjectRelease();
      long long v22 = 0u;
LABEL_24:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_25;
    }
    if (v22 == __PAIR128__(v14, v15))
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
LABEL_23:
      *(void *)&long long v22 = v15;
      *((void *)&v22 + 1) = v14;
      goto LABEL_24;
    }
  }
  else if (v14)
  {
    goto LABEL_23;
  }
LABEL_25:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v17 = (unint64_t *)(v2 + v7[7]);
  unint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  if (!*((void *)&v22 + 1))
  {
    if (!v18) {
      goto LABEL_35;
    }
LABEL_33:
    *(void *)&long long v22 = v19;
    BYTE8(v22) = v18;
    goto LABEL_34;
  }
  if (!v18)
  {
    swift_bridgeObjectRelease();
    long long v22 = 0u;
LABEL_34:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_35;
  }
  if (v22 != __PAIR128__(v18, v19))
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_35:
  CKRecordKeyValueSetting.subscript.getter();
  if ((BYTE8(v22) & 1) != 0 || (void)v22 != *(void *)(v2 + v7[8])) {
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100290048()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PersonNameComponents();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  __chkstk_darwin(v2, v3);
  char v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = 0;
  unint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(143);
  uint64_t v6 = (int *)type metadata accessor for InheritanceInvitationRecord();
  uint64_t v36 = (uint64_t)v6;
  sub_100009F04(&qword_1003301E8);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100299EF0;
  v8._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v8);
  type metadata accessor for UUID();
  sub_1002905F8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x80000001002A1BA0;
  String.append(_:)(v10);
  uint64_t v11 = (uint64_t *)(v0 + v6[5]);
  uint64_t v12 = *v11;
  char v13 = (void *)v11[1];
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000019;
  v15._object = (void *)0x80000001002A1BC0;
  String.append(_:)(v15);
  char v16 = (uint64_t *)(v0 + v6[6]);
  uint64_t v17 = v16[1];
  uint64_t v36 = *v16;
  uint64_t v37 = v17;
  swift_bridgeObjectRetain();
  sub_100009F04(&qword_100321678);
  v18._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0xD000000000000018;
  v19._object = (void *)0x80000001002A1BE0;
  String.append(_:)(v19);
  uint64_t v20 = (uint64_t *)(v0 + v6[7]);
  uint64_t v21 = v20[1];
  uint64_t v36 = *v20;
  uint64_t v37 = v21;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD00000000000001BLL;
  v23._object = (void *)0x80000001002A1C00;
  String.append(_:)(v23);
  PersonNameComponents.init()();
  swift_bridgeObjectRetain();
  PersonNameComponents.givenName.setter();
  swift_bridgeObjectRetain();
  PersonNameComponents.familyName.setter();
  uint64_t v24 = self;
  Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v26 = [v24 localizedStringFromPersonNameComponents:isa style:0 options:0];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v35);
  uint64_t v36 = v27;
  uint64_t v37 = v29;
  v30._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0x7375746174730A2CLL;
  v31._object = (void *)0xEB00000000202D20;
  String.append(_:)(v31);
  uint64_t v36 = *(void *)(v1 + v6[8]);
  type metadata accessor for Status(0);
  _print_unlocked<A, B>(_:_:)();
  v32._countAndFlagsBits = 44;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  return v38;
}

uint64_t sub_100290418(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002905F8((unint64_t *)&unk_1003301D0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord);
  uint64_t result = sub_1002905F8(&qword_1003235B8, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for InheritanceInvitationRecord()
{
  uint64_t result = qword_100330260;
  if (!qword_100330260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002904E8(uint64_t a1)
{
  uint64_t result = sub_1002905F8(&qword_1003301E0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100290540()
{
  unint64_t result = qword_1003301F8;
  if (!qword_1003301F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003301F8);
  }
  return result;
}

uint64_t sub_100290594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002905F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InheritanceInvitationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InheritanceInvitationRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029079CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationRecord.CodingKeys()
{
  return &type metadata for InheritanceInvitationRecord.CodingKeys;
}

char *sub_1002907D4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    Swift::String v14 = &a1[v10];
    Swift::String v15 = &a2[v10];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)Swift::String v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = a3[7];
    uint64_t v18 = a3[8];
    Swift::String v19 = &a1[v17];
    uint64_t v20 = (uint64_t *)&a2[v17];
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)&a2[v18];
    *(void *)Swift::String v19 = v21;
    *((void *)v19 + 1) = v22;
    *(void *)&a1[v18] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = &a1[v24];
    id v26 = &a2[v24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v25, v26, v7);
    uint64_t v27 = a3[10];
    uint64_t v28 = (uint64_t *)&a1[v27];
    uint64_t v29 = (uint64_t *)&a2[v27];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    sub_100013140(*v29, v31);
    *uint64_t v28 = v30;
    v28[1] = v31;
    a1[a3[11]] = a2[a3[11]];
  }
  return a1;
}

uint64_t sub_100290954(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5(a1 + *(int *)(a2 + 36), v4);
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 40));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100013198(v7, v8);
}

uint64_t sub_100290A28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  Swift::String v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v16);
  Swift::String v19 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v22 = *(void *)(a2 + v17);
  void *v18 = v20;
  v18[1] = v21;
  *(void *)(a1 + v17) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v24, v25, v6);
  uint64_t v26 = a3[10];
  uint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_100013140(*v28, v30);
  *uint64_t v27 = v29;
  v27[1] = v30;
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100290B58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  void *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v17 = a3[10];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  Swift::String v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_100013140(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  uint64_t *v18 = v20;
  v18[1] = v21;
  sub_100013198(v22, v23);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100290CBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  return a1;
}

uint64_t sub_100290D90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  void *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  Swift::String v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *Swift::String v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  v7(a1 + v23, a2 + v23, v6);
  uint64_t v24 = a3[10];
  uint64_t v25 = *(void *)(a1 + v24);
  unint64_t v26 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_100013198(v25, v26);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100290EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100290EBC);
}

uint64_t sub_100290EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100290F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100290F94);
}

uint64_t sub_100290F94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100291054()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10029111C()
{
  unint64_t result = qword_1003302B0;
  if (!qword_1003302B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003302B0);
  }
  return result;
}

unint64_t sub_100291174()
{
  unint64_t result = qword_1003302B8;
  if (!qword_1003302B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003302B8);
  }
  return result;
}

unint64_t sub_1002911CC()
{
  unint64_t result = qword_1003302C0;
  if (!qword_1003302C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003302C0);
  }
  return result;
}

uint64_t sub_100291220(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100299F10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001002A1C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001002A1C40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

NSURLRequest __swiftcall URLRequest._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)URLRequest._bridgeToObjectiveC()();
  result._internal = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return CharacterSet.init(charactersIn:)();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return static CharacterSet.whitespacesAndNewlines.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t URLResourceValues.isExcludedFromBackup.setter()
{
  return URLResourceValues.isExcludedFromBackup.setter();
}

uint64_t URLResourceValues.init()()
{
  return URLResourceValues.init()();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return PersonNameComponents.givenName.setter();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return PersonNameComponents.familyName.setter();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v0 = (objc_class *)PersonNameComponents._bridgeToObjectiveC()();
  result._private = v1;
  result.super.Class isa = v0;
  return result;
}

uint64_t PersonNameComponents.init()()
{
  return PersonNameComponents.init()();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t static _BridgedStoredNSError.== infix(_:_:)()
{
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return _BridgedStoredNSError.userInfo.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.init(fileURLWithPath:relativeTo:)()
{
  return URL.init(fileURLWithPath:relativeTo:)();
}

uint64_t URL.setResourceValues(_:)()
{
  return URL.setResourceValues(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.base64EncodedData(options:)()
{
  return Data.base64EncodedData(options:)();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

uint64_t Data._copyContents(initializing:)()
{
  return Data._copyContents(initializing:)();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.init<A>(_:)()
{
  return Data.init<A>(_:)();
}

uint64_t Date.init(timeInterval:since:)()
{
  return Date.init(timeInterval:since:)();
}

uint64_t Date.ISO8601Format(_:)()
{
  return Date.ISO8601Format(_:)();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return type metadata accessor for Date.ISO8601FormatStyle();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t Selector.init(_:)()
{
  return Selector.init(_:)();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

Swift::Void __swiftcall SQLInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t SQLInterpolation.init(literalCapacity:interpolationCount:)()
{
  return SQLInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t SQLInterpolation.appendInterpolation<A>(_:)()
{
  return SQLInterpolation.appendInterpolation<A>(_:)();
}

uint64_t type metadata accessor for SQLInterpolation()
{
  return type metadata accessor for SQLInterpolation();
}

uint64_t SQL.init(stringInterpolation:)()
{
  return SQL.init(stringInterpolation:)();
}

uint64_t type metadata accessor for SQL()
{
  return type metadata accessor for SQL();
}

uint64_t Dependency.init(dependencyId:config:)()
{
  return Dependency.init(dependencyId:config:)();
}

uint64_t Dependency.wrappedValue.getter()
{
  return Dependency.wrappedValue.getter();
}

uint64_t type metadata accessor for Dependency()
{
  return type metadata accessor for Dependency();
}

uint64_t type metadata accessor for DependencyRegistry.Entry()
{
  return type metadata accessor for DependencyRegistry.Entry();
}

uint64_t static DependencyRegistry.register<A>(_:entry:dependencyId:)()
{
  return static DependencyRegistry.register<A>(_:entry:dependencyId:)();
}

uint64_t type metadata accessor for DependencyRegistry()
{
  return type metadata accessor for DependencyRegistry();
}

uint64_t dispatch thunk of AAFTimedAnalyticsEvent.appendEvent(data:)()
{
  return dispatch thunk of AAFTimedAnalyticsEvent.appendEvent(data:)();
}

uint64_t dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)()
{
  return dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
}

uint64_t AAFTimedAnalyticsEvent.init(eventName:initialData:)()
{
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

uint64_t type metadata accessor for AAFTimedAnalyticsEvent()
{
  return type metadata accessor for AAFTimedAnalyticsEvent();
}

uint64_t ViewService.visualIdentifierView()()
{
  return ViewService.visualIdentifierView()();
}

uint64_t ViewService.phPersonIdentifierMapView()()
{
  return ViewService.phPersonIdentifierMapView()();
}

uint64_t static ViewService.clientService.getter()
{
  return static ViewService.clientService.getter();
}

uint64_t type metadata accessor for ViewService()
{
  return type metadata accessor for ViewService();
}

uint64_t EntityIdentifier.stringValue.getter()
{
  return EntityIdentifier.stringValue.getter();
}

uint64_t type metadata accessor for EntityIdentifier()
{
  return type metadata accessor for EntityIdentifier();
}

uint64_t PersonEntityTagType.rawValue.getter()
{
  return PersonEntityTagType.rawValue.getter();
}

uint64_t type metadata accessor for PersonEntityTagType()
{
  return type metadata accessor for PersonEntityTagType();
}

uint64_t PHPersonIdentifierMapView.phPersonIdentifiers(for:)()
{
  return PHPersonIdentifierMapView.phPersonIdentifiers(for:)();
}

uint64_t type metadata accessor for PHPersonIdentifierMapView()
{
  return type metadata accessor for PHPersonIdentifierMapView();
}

uint64_t PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.inferenceEventId.getter()
{
  return PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.inferenceEventId.getter();
}

uint64_t PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.id.getter()
{
  return PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.id.getter();
}

uint64_t PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter()
{
  return PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter();
}

uint64_t PersonEntityTaggingService.ScoreRankedEntityTagPersons.scoredEntities.getter()
{
  return PersonEntityTaggingService.ScoreRankedEntityTagPersons.scoredEntities.getter();
}

uint64_t PersonEntityTaggingService.ScoreRankedEntityTagPersons.tag.getter()
{
  return PersonEntityTaggingService.ScoreRankedEntityTagPersons.tag.getter();
}

uint64_t PersonEntityTaggingService.init(etConfig:)()
{
  return PersonEntityTaggingService.init(etConfig:)();
}

uint64_t type metadata accessor for PersonEntityTaggingService()
{
  return type metadata accessor for PersonEntityTaggingService();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return type metadata accessor for CryptoKitError();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t static HashFunction.hash<A>(data:)()
{
  return static HashFunction.hash<A>(data:)();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t type metadata accessor for HashedAuthenticationCode()
{
  return type metadata accessor for HashedAuthenticationCode();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return static AES.GCM.open(_:using:)();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return static AES.GCM.seal<A>(_:using:nonce:)();
}

uint64_t AES.GCM.Nonce.init<A>(data:)()
{
  return AES.GCM.Nonce.init<A>(data:)();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return type metadata accessor for AES.GCM.Nonce();
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  return AES.GCM.SealedBox.ciphertext.getter();
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  return AES.GCM.SealedBox.tag.getter();
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)()
{
  return AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return type metadata accessor for AES.GCM.SealedBox();
}

uint64_t static HMAC.authenticationCode<A>(for:using:)()
{
  return static HMAC.authenticationCode<A>(for:using:)();
}

uint64_t static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter()
{
  return static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter();
}

uint64_t type metadata accessor for HPKE.Ciphersuite()
{
  return type metadata accessor for HPKE.Ciphersuite();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)()
{
  return HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  return HPKE.Sender.encapsulatedKey.getter();
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)()
{
  return HPKE.Sender.seal<A, B>(_:authenticating:)();
}

uint64_t type metadata accessor for HPKE.Sender()
{
  return type metadata accessor for HPKE.Sender();
}

uint64_t P384.KeyAgreement.PublicKey.derRepresentation.getter()
{
  return P384.KeyAgreement.PublicKey.derRepresentation.getter();
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)()
{
  return P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)();
}

uint64_t P384.KeyAgreement.PublicKey.init<A>(x963Representation:)()
{
  return P384.KeyAgreement.PublicKey.init<A>(x963Representation:)();
}

uint64_t type metadata accessor for P384.KeyAgreement.PublicKey()
{
  return type metadata accessor for P384.KeyAgreement.PublicKey();
}

uint64_t Digest.makeIterator()()
{
  return Digest.makeIterator()();
}

uint64_t SHA256.finalize()()
{
  return SHA256.finalize()();
}

uint64_t SHA256.init()()
{
  return SHA256.init()();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t related decl 'e' for CKErrorCode.description.getter()
{
  return related decl 'e' for CKErrorCode.description.getter();
}

uint64_t related decl 'e' for CKErrorCode.partialErrorsByItemID.getter()
{
  return related decl 'e' for CKErrorCode.partialErrorsByItemID.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t type metadata accessor for Dictionary()
{
  return type metadata accessor for Dictionary();
}

uint64_t Dictionary.subscript.getter()
{
  return Dictionary.subscript.getter();
}

uint64_t Dictionary.subscript.setter()
{
  return Dictionary.subscript.setter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t ObjectIdentifier.hashValue.getter()
{
  return ObjectIdentifier.hashValue.getter();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t type metadata accessor for CancellationError()
{
  return type metadata accessor for CancellationError();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.checkCancellation()()
{
  return static Task<>.checkCancellation()();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t static Int._forceBridgeFromObjectiveC(_:result:)()
{
  return static Int._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Int._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Int._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Int._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Collection<>.joined(separator:)()
{
  return Collection<>.joined(separator:)();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t CKShareParticipant.participantID.getter()
{
  return CKShareParticipant.participantID.getter();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.getter()
{
  return CKRecordKeyValueSetting.subscript.getter();
}

CKModifyRecordsOperation __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  return (CKModifyRecordsOperation)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(recordsToSave.value._rawValue, *(void *)&recordsToSave.is_nil, recordIDsToDelete.value._rawValue, *(void *)&recordIDsToDelete.is_nil);
}

CKModifyRecordZonesOperation __swiftcall CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(Swift::OpaquePointer_optional recordZonesToSave, Swift::OpaquePointer_optional recordZoneIDsToDelete)
{
  return (CKModifyRecordZonesOperation)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(recordZonesToSave.value._rawValue, *(void *)&recordZonesToSave.is_nil, recordZoneIDsToDelete.value._rawValue, *(void *)&recordZoneIDsToDelete.is_nil);
}

uint64_t CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter()
{
  return CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
}

CKModifySubscriptionsOperation __swiftcall CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(Swift::OpaquePointer_optional subscriptionsToSave, Swift::OpaquePointer_optional subscriptionIDsToDelete)
{
  return (CKModifySubscriptionsOperation)CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(subscriptionsToSave.value._rawValue, *(void *)&subscriptionsToSave.is_nil, subscriptionIDsToDelete.value._rawValue, *(void *)&subscriptionIDsToDelete.is_nil);
}

CKFetchRecordZoneChangesOperation __swiftcall CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(Swift::OpaquePointer_optional recordZoneIDs, Swift::OpaquePointer_optional configurationsByRecordZoneID)
{
  return (CKFetchRecordZoneChangesOperation)CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(recordZoneIDs.value._rawValue, *(void *)&recordZoneIDs.is_nil, configurationsByRecordZoneID.value._rawValue, *(void *)&configurationsByRecordZoneID.is_nil);
}

uint64_t CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t NSString.init(stringLiteral:)()
{
  return NSString.init(stringLiteral:)();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t Optional._bridgeToObjectiveC()()
{
  return Optional._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)UInt._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.caseInsensitiveCompare<A>(_:)()
{
  return StringProtocol.caseInsensitiveCompare<A>(_:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)()
{
  return dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)Int32._bridgeToObjectiveC()();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

uint64_t dispatch thunk of Decoder.unkeyedContainer()()
{
  return dispatch thunk of Decoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.unkeyedContainer()()
{
  return dispatch thunk of Encoder.unkeyedContainer()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AKTrustedContactStatusFromAATrustedContactStatus()
{
  return _AKTrustedContactStatusFromAATrustedContactStatus();
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

uint64_t CKDatabaseScopeString()
{
  return _CKDatabaseScopeString();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return _NSSelectorFromString(aSelectorName);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateApplePinned()
{
  return _SecPolicyCreateApplePinned();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return _SecTrustCopyKey(trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return _SecTrustCreateWithCertificates(certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

{
}

{
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return __os_activity_create(dso, description, activity, flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

qos_class_t qos_class_self(void)
{
  return _qos_class_self();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocBox()
{
  return _swift_deallocBox();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStaticObject()
{
  return _swift_initStaticObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isClassType()
{
  return _swift_isClassType();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_unownedRelease()
{
  return _swift_unownedRelease();
}

uint64_t swift_unownedRetain()
{
  return _swift_unownedRetain();
}

uint64_t swift_unownedRetainStrong()
{
  return _swift_unownedRetainStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return _xpc_activity_copy_criteria(activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}