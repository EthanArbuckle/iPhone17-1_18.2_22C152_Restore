void sub_100176B68(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  unsigned __int8 v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t *v32;
  void (*v33)(uint64_t);
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48;

  v4 = (uint64_t)v3;
  v44 = a2;
  v45 = a3;
  v40 = a1;
  v43 = *v3;
  v5 = sub_100009F04(&qword_100321CD8);
  v41 = *(void *)(v5 - 8);
  v42 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v4 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15(v13, v4 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController, v9);
  Dependency.wrappedValue.getter();
  v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  v17 = sub_100056834();
  sub_100008EA8((uint64_t)v47);
  if (v17)
  {
    v15(v13, v14, v9);
    Dependency.wrappedValue.getter();
    v16(v13, v9);
    v18 = *(void **)(*sub_100008EF8(v47, v48) + 24);
    v46 = 0;
    if ([v18 isManateeAvailable:&v46])
    {
      v19 = (id)v46;
      sub_100008EA8((uint64_t)v47);
      v20 = (void *)swift_allocObject();
      v21 = v40;
      v22 = v41;
      v20[2] = v4;
      v20[3] = v21;
      v23 = v45;
      v20[4] = v44;
      v20[5] = v23;
      v25 = v42;
      v24 = v43;
      v20[6] = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v4 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__urlBagProvider, v25);
      swift_retain();
      v26 = v21;
      swift_retain();
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v25);
      v27 = *sub_100008EF8(v47, v48);
      swift_retain();
      swift_retain();
      sub_100050988(v27, v4, sub_1001772FC, (uint64_t)v20, v24);
      sub_100008EA8((uint64_t)v47);
      swift_release();
      return;
    }
    v34 = (id)v46;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_100008EA8((uint64_t)v47);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E778);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)v38 = 136315138;
      v46 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - Manatee is not available, proceeding to post CDP repair.", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10016DA1C();
    type metadata accessor for AASignInError(0);
    v46 = -8008;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    v32 = &qword_100321098;
    v33 = type metadata accessor for AASignInError;
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E778);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)v31 = 136315138;
      v46 = sub_100135190(0x746C616548504443, 0xEE006B6365684368, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - CDP is not enabled or has never been enabled for this account, bailing from health check...", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    v46 = -16;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    v32 = &qword_100321140;
    v33 = type metadata accessor for AAError;
  }
  sub_10017726C((unint64_t *)v32, v33);
  _BridgedStoredNSError.init(_:userInfo:)();
  v39 = (void *)v47[0];
  v44(v47[0]);
}

uint64_t sub_10017726C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001772B4()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001772FC(uint64_t a1)
{
  sub_10016DE4C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10017730C(uint64_t a1)
{
  return sub_10016D884(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1002FDF88, (uint64_t)sub_100172BF8, (void (*)(uint64_t, uint64_t, uint64_t))sub_10017689C);
}

uint64_t sub_100177360()
{
  uint64_t v1 = sub_100009F04(&qword_100329078);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001773F4()
{
  return sub_10016D9D4();
}

uint64_t sub_10017745C()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001774AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100025248;
  return sub_100174124(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100177588()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001775C8(uint64_t a1, char a2)
{
  sub_100172BFC(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24));
}

uint64_t sub_1001775D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TrustedContactUserNotification();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100177634(void *a1)
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    sub_100135190(0x746C616548504443, 0xEE006B6365684368, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    swift_errorRetain();
    *(void *)&v16[0] = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = *(void *)&v16[0];
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "    %s - escrow record check failed with error     %@", (uint8_t *)v5, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [a1 accountPropertyForKey:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  sub_1000086C4((uint64_t)v16, (uint64_t)v17);
  if (!v17[3])
  {
    sub_100058764((uint64_t)v17);
    return 0;
  }
  sub_10000850C(0, (unint64_t *)&qword_100324670);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  char v10 = static NSObject.== infix(_:_:)();

  if (v10)
  {

    return 0;
  }
  type metadata accessor for AAError(0);
  *(void *)&v16[0] = -4407;
  sub_100009F04((uint64_t *)&unk_10032E130);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  swift_errorRetain();
  uint64_t v14 = _convertErrorToNSError(_:)();
  *(void *)(inited + 72) = sub_10000850C(0, (unint64_t *)&qword_100321D00);
  *(void *)(inited + 48) = v14;
  sub_100220CAC(inited);
  sub_10017726C((unint64_t *)&qword_100321140, type metadata accessor for AAError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_errorRelease();

  return v17[0];
}

uint64_t sub_100177A54()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100177A8C(uint64_t a1, char a2)
{
  sub_1001732A8(a1, a2 & 1, *(void *)(v2 + 16));
}

uint64_t sub_100177A98()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for CDPContextProvider()
{
  return self;
}

uint64_t sub_100177AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain();
  swift_retain();
  sub_1001FE060((uint64_t)sub_100177CF8, (uint64_t)v5);

  return swift_release();
}

uint64_t sub_100177B84(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  if (a2)
  {
    swift_errorRetain();
    a4(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    sub_100008EF8((void *)(a3 + 56), *(void *)(a3 + 80));
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = a3;
    v9[3] = a1;
    v9[4] = a4;
    v9[5] = a5;
    swift_retain();
    sub_100007850(a1, 0);
    swift_retain();
    sub_100008810((uint64_t)sub_1001780C8, (uint64_t)v9);
    return swift_release();
  }
}

uint64_t sub_100177C8C()
{
  return sub_100008EA8(v0 + 56);
}

uint64_t type metadata accessor for InheritanceFamilyManager()
{
  return self;
}

uint64_t sub_100177CB8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100177CF8(uint64_t a1, char a2)
{
  return sub_100177B84(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100177D08(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    sub_100007850(a1, 0);
    unint64_t v7 = swift_bridgeObjectRetain();
    id v8 = sub_100177DE8(v7, a1);
    sub_100007844(a1, 0);
    swift_bridgeObjectRelease();
    a5((uint64_t)v8, 0);
    return swift_bridgeObjectRelease();
  }
}

void *sub_100177DE8(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8;
    unint64_t v27 = v3 & 0xC000000000000001;
    uint64_t v24 = a2;
    unint64_t v25 = v3 + 32;
    uint64_t v22 = i;
    unint64_t v23 = v3;
    while (1)
    {
      if (v27)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_10;
      }
      if (v5 >= *(void *)(v26 + 16)) {
        break;
      }
      id v6 = *(id *)(v25 + 8 * v5);
LABEL_10:
      id v29 = v6;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_27;
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8)
      {
LABEL_5:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        goto LABEL_6;
      }
      unint64_t v28 = v5;
      uint64_t v9 = type metadata accessor for BeneficiaryInfoRecord();
      uint64_t v10 = a2
          + ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80));
      uint64_t v11 = *(void *)(*(void *)(v9 - 8) + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v12 = (uint64_t *)(v10 + *(int *)(v9 + 20));
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        swift_bridgeObjectRetain();
        id v15 = [v29 handle];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        if (!v14)
        {
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        if (v13 == v16 && v14 == v18) {
          break;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v20)
        {

          a2 = v24;
          goto LABEL_23;
        }
LABEL_14:
        v10 += v11;
        if (!--v8)
        {
          a2 = v24;
          swift_bridgeObjectRelease();
          uint64_t i = v22;
          unint64_t v3 = v23;
          unint64_t v5 = v28;
          goto LABEL_5;
        }
      }

      a2 = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      uint64_t i = v22;
      unint64_t v3 = v23;
      unint64_t v5 = v28;
LABEL_6:
      if (v5 == i) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    ;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100178080()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001780C8(uint64_t a1, char a2)
{
  return sub_100177D08(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_1001780D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100253648(*a1, *a2);
}

Swift::Int sub_1001780E4()
{
  return Hasher._finalize()();
}

uint64_t sub_100178188()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100178218()
{
  return Hasher._finalize()();
}

unint64_t sub_1001782B8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10017B4FC(*a1);
  *a2 = result;
  return result;
}

void sub_1001782E8(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x6465766F72707061;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E776F6E6B6E75;
    unint64_t v4 = 0xE700000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x64657469766E69;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100178348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = *(void *)(v4 + 32);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v4;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a1;
  aBlock[4] = sub_10017CD5C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FE2F0;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_1000094E8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

void sub_10017860C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))swift_allocObject();
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = a2;
  *((void *)v8 + 4) = a3;
  *((void *)v8 + 5) = a4;
  uint64_t v9 = (objc_class *)type metadata accessor for AsyncOperation();
  uint64_t v10 = objc_allocWithZone(v9);
  v10[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  uint64_t v11 = (uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))&v10[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *uint64_t v11 = sub_10017CD6C;
  v11[1] = v8;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_retain();
  swift_retain();
  id v12 = [super init];
  uint64_t v13 = v12;
  if (*(void *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation)) {
    [v12 addDependency:v14.receiver super_class];
  }
  [*(id *)(a1 + 24) addOperation:v13 v14.receiver v14.super_class];
}

uint64_t sub_100178710(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a1;
  uint64_t v9 = sub_100009F04(&qword_100325870);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v25[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a3 + 40));
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(os_unfair_lock_s **)(a3 + 40);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15);
  if (v14)
  {
    uint64_t v16 = *(void *)(v14 + 16);
    swift_bridgeObjectRelease();
    if (v16)
    {
      uint64_t v17 = v16 - a6;
      if (!__OFSUB__(v16, a6)) {
        goto LABEL_14;
      }
      __break(1u);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v9);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_100008EF8(v25, v25[3]);
  uint64_t v18 = sub_1000513BC();
  if (v18)
  {
    uint64_t v19 = (uint64_t)v18;
    sub_100008EA8((uint64_t)v25);
    char v20 = sub_10017B88C(v19);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v20) {
      goto LABEL_12;
    }
    uint64_t v22 = v20[2];
    swift_bridgeObjectRelease();
    uint64_t v17 = v22 - a6;
    if (!__OFSUB__(v22, a6)) {
      goto LABEL_14;
    }
    __break(1u);
  }
  uint64_t result = sub_100008EA8((uint64_t)v25);
LABEL_12:
  if (a6 != 0x8000000000000000)
  {
    uint64_t v17 = -a6;
LABEL_14:
    uint64_t v23 = a4(v17);
    return v24(v23);
  }
  __break(1u);
  return result;
}

BOOL sub_100178904()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  BOOL v6 = (char *)&v20[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_100008EF8(v20, v20[3]);
  uint64_t v7 = sub_1000513BC();
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    sub_100008EA8((uint64_t)v20);
    uint64_t v9 = sub_10017B88C(v8);
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = *(os_unfair_lock_s **)(v1 + 40);
      swift_bridgeObjectRetain();
      os_unfair_lock_lock(v10);
      *(void *)(v1 + 16) = v9;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 40));
      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v12 = sub_10017B0F0(v11, (uint64_t)v9);
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v12 + 16);
      swift_bridgeObjectRelease();
      return v13 == 0;
    }
  }
  else
  {
    sub_100008EA8((uint64_t)v20);
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E778);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Custodian Infos is not found on accountStore", v18, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100178B64()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)(v0 + 32);
  aBlock[4] = sub_10017CCB8;
  uint64_t v15 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FE278;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_1000094E8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

void sub_100178DF4(uint64_t a1)
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation;
  if (!*(void *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation))
  {
    uint64_t v3 = (objc_class *)type metadata accessor for AsyncOperation();
    uint64_t v4 = objc_allocWithZone(v3);
    v4[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    uint64_t v5 = (void (**)(void (*)(void), uint64_t))&v4[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *uint64_t v5 = sub_10017CCC0;
    v5[1] = (void (*)(void (*)(void), uint64_t))a1;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v6 = [super init];
    uint64_t v7 = *(void **)(a1 + v1);
    *(void *)(a1 + v1) = v6;
    id v8 = v6;

    [*(id *)(a1 + 24) addOperation:v8 v9.receiver, v9.super_class];
  }
}

void sub_100178EBC(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04(&qword_100329460);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v33[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100325870);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v33[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v11);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  id v17 = [*(id *)(*sub_100008EF8(v33, v33[3]) + 16) aa_primaryAppleAccount];
  if (v17
    && (uint64_t v18 = v17, v19 = objc_msgSend(v17, "aa_altDSID"), v18, v19))
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    sub_100008EA8((uint64_t)v33);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting Fetch User Information in confirmation handler", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__authController, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_retain();
    swift_retain();
    sub_1001D6DE4(v20, v22, sub_10017CD08, (uint64_t)v16, a3);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
    sub_100008EA8((uint64_t)v33);
  }
  else
  {
    sub_100008EA8((uint64_t)v33);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E778);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "altDSID missing", v30, 2u);
      swift_slowDealloc();
    }

    a1();
    v31 = *(void **)(a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation);
    *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;
    swift_release();
  }
}

void sub_100179334(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v80 = a5;
  uint64_t v9 = sub_100009F04(&qword_100325870);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &unk_100320000;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v78 = v9;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v77 = v10;
      uint64_t v18 = (uint8_t *)v17;
      id v19 = (void *)swift_slowAlloc();
      v76 = a1;
      *(_DWORD *)uint64_t v18 = 138412290;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      v82[0] = v20;
      uint64_t v13 = (void *)&unk_100320000;
      a1 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v20;
      uint64_t v9 = v78;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching User Information finished with error: %@", v18, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v10 = v77;
      swift_slowDealloc();

      swift_errorRelease();
      if (!a1) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (!a1) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Fetching User Information finished successfully.", v24, 2u);
      swift_slowDealloc();
    }

    if (!a1) {
      goto LABEL_22;
    }
  }
  id v25 = a1;
  if ([v25 respondsToSelector:Selector.init(_:)()])
  {
    id v26 = [v25 custodianInfos];
    if (!v26
      || (uint64_t v27 = v26,
          sub_100009F04((uint64_t *)&unk_10032DBD0),
          uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
          v27,
          os_log_type_t v29 = sub_10017B88C(v28),
          swift_bridgeObjectRelease(),
          !v29))
    {
      if (v13[371] != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100007288(v46, (uint64_t)qword_10033E778);
      v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "User information did not return any custodian statuses", v49, 2u);
        swift_slowDealloc();
      }

      goto LABEL_49;
    }
    uint64_t v30 = v80;
    v31 = *(os_unfair_lock_s **)(v80 + 40);
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v31);
    *(void *)(v30 + 16) = v29;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v30 + 40));
    uint64_t v32 = v30 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore;
    v33 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v79, v32, v9);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
    sub_100008EF8(v82, v82[3]);
    v34 = sub_1000513BC();
    if (v34)
    {
      uint64_t v35 = (uint64_t)v34;
      sub_100008EA8((uint64_t)v82);
      v36 = sub_10017B88C(v35);
      swift_bridgeObjectRelease();
      if (v36)
      {
        v37 = v13;
        v79 = (char *)a3;
        uint64_t v80 = a4;
        sub_10024EEAC((uint64_t)v36);
        id v38 = objc_allocWithZone((Class)NSDictionary);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v40 = [v38 initWithDictionary:isa];

        sub_10024EEAC((uint64_t)v29);
        Class v41 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        LOBYTE(v38) = [v40 isEqualToDictionary:v41];

        if (v38)
        {
          swift_bridgeObjectRelease();
          a3 = (void (*)(void))v79;
          a4 = v80;
        }
        else
        {
          if (v13[371] != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          sub_100007288(v55, (uint64_t)qword_10033E778);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = swift_slowAlloc();
            uint64_t v78 = swift_slowAlloc();
            v82[0] = v78;
            *(_DWORD *)uint64_t v58 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v59 = Dictionary.description.getter();
            unint64_t v61 = v60;
            swift_bridgeObjectRelease();
            uint64_t v81 = sub_100135190(v59, v61, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v58 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v62 = Dictionary.description.getter();
            unint64_t v64 = v63;
            swift_bridgeObjectRelease();
            uint64_t v81 = sub_100135190(v62, v64, v82);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Statuses from AccountStore %s does not match statuses from fetchUserInfo api %s", (uint8_t *)v58, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v13 = v37;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          a3 = (void (*)(void))v79;
          a4 = v80;
        }
LABEL_44:
        if (v13[371] != -1) {
          swift_once();
        }
        uint64_t v65 = type metadata accessor for Logger();
        sub_100007288(v65, (uint64_t)qword_10033E778);
        swift_bridgeObjectRetain();
        v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc();
          uint64_t v69 = swift_slowAlloc();
          uint64_t v80 = a4;
          v82[0] = v69;
          *(_DWORD *)v68 = 136315138;
          v79 = (char *)(v68 + 4);
          swift_bridgeObjectRetain();
          v70 = a3;
          uint64_t v71 = Dictionary.description.getter();
          unint64_t v73 = v72;
          swift_bridgeObjectRelease();
          uint64_t v74 = v71;
          a3 = v70;
          uint64_t v81 = sub_100135190(v74, v73, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Fetched custodian IdMS statuses: %s", v68, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v50 = swift_bridgeObjectRelease_n();
        }
LABEL_49:
        ((void (*)(uint64_t))a3)(v50);

        return;
      }
    }
    else
    {
      sub_100008EA8((uint64_t)v82);
    }
    if (v13[371] != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100007288(v51, (uint64_t)qword_10033E778);
    v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Statuses from AccountStore is nil after fetchUserInfo call", v54, 2u);
      swift_slowDealloc();
    }

    goto LABEL_44;
  }

LABEL_22:
  if (v13[371] != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  sub_100007288(v42, (uint64_t)qword_10033E778);
  v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "custodianInfos spi not found on AKUserInformation", v45, 2u);
    swift_slowDealloc();
  }

  a3();
}

uint64_t sub_100179EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  uint64_t v18 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v3 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v4;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v21 + v19, v18, v14);
  uint64_t v22 = (void *)(v21 + v20);
  uint64_t v23 = v28;
  *uint64_t v22 = v27;
  v22[1] = v23;
  aBlock[4] = sub_10017B654;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FE1D8;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v33 = _swiftEmptyArrayStorage;
  sub_1000094E8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
  return swift_release();
}

void sub_10017A274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  uint64_t v14 = (void *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v14 = a3;
  v14[1] = a4;
  uint64_t v15 = (objc_class *)type metadata accessor for AsyncOperation();
  uint64_t v16 = objc_allocWithZone(v15);
  v16[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  uint64_t v17 = (uint64_t (**)(void (*)(uint64_t), uint64_t))&v16[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *uint64_t v17 = sub_10017B7D8;
  v17[1] = (uint64_t (*)(void (*)(uint64_t), uint64_t))v13;
  v20.receiver = v16;
  v20.super_class = v15;
  swift_retain();
  swift_retain();
  id v18 = [super init];
  unint64_t v19 = v18;
  if (*(void *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation)) {
    [v18 addDependency:];
  }
  [*(id *)(a1 + 24) addOperation:v19];
}

uint64_t sub_10017A458(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  swift_retain();
  swift_retain();
  sub_10017C204(a4, a3, a5, a6, a1, a2);
  swift_release();

  return swift_release();
}

uint64_t sub_10017A4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100179EDC(a3, (uint64_t)sub_10017B5DC, v10);
  return swift_release();
}

uint64_t sub_10017A62C(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100329960);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100009F04((uint64_t *)&unk_100329960);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10017A690(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v33 - v15;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
    swift_errorRetain();
    swift_errorRetain();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      v34 = (void *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v38 = v35;
      *(_DWORD *)uint64_t v20 = 136315394;
      v36 = a3;
      os_log_t v33 = v18;
      uint64_t v21 = UUID.uuidString.getter();
      uint64_t v37 = sub_100135190(v21, v22, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      *(_WORD *)(v20 + 12) = 2112;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v37 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v23;
      a3 = v36;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v24 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, v19, "Custodian %s Setup finalization finished with error: %@", (uint8_t *)v20, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E778);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a2, v8);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v35 = a4;
      uint64_t v38 = v29;
      v36 = a3;
      *(_DWORD *)uint64_t v28 = 136315138;
      v34 = v28 + 4;
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v37 = sub_100135190(v30, v31, &v38);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Custodian %s Setup finalization finished Successfully", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }
  }
  return a3(a1);
}

uint64_t sub_10017ABB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a2;
  if (*(void *)(v10 + 16))
  {
    uint64_t result = sub_1001358B8(0x6169646F74737563, 0xED0000646975556ELL);
    if (v11)
    {
      sub_100047DD4(*(void *)(v10 + 56) + 32 * result, (uint64_t)v25);
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v12 = v24[1];
        if (*(void *)(v10 + 16))
        {
          uint64_t v13 = v24[0];
          unint64_t v14 = sub_1001358B8(0x737574617473, 0xE600000000000000);
          if (v15)
          {
            sub_100047DD4(*(void *)(v10 + 56) + 32 * v14, (uint64_t)v25);
            if (swift_dynamicCast())
            {
              Swift::String v16 = String.lowercased()();
              uint64_t v26 = v13;
              swift_bridgeObjectRelease();
              v25[0] = v16;
              static CharacterSet.whitespacesAndNewlines.getter();
              sub_100080C64();
              uint64_t v17 = StringProtocol.trimmingCharacters(in:)();
              os_log_type_t v19 = v18;
              (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
              swift_bridgeObjectRelease();
              v20._countAndFlagsBits = v17;
              v20._object = v19;
              unint64_t v21 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4168, v20);
              swift_bridgeObjectRelease();
              if (v21 >= 3) {
                char v22 = 2;
              }
              else {
                char v22 = v21;
              }
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v25[0]._countAndFlagsBits = *a1;
              *a1 = 0x8000000000000000;
              sub_10022C810(v22, v26, v12, isUniquelyReferenced_nonNull_native);
              *a1 = v25[0]._countAndFlagsBits;
              swift_bridgeObjectRelease();
            }
          }
        }
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_10017AE30()
{
  return type metadata accessor for DaemonCustodianIdMSConfirmationHandler();
}

void sub_10017AE38()
{
  sub_10001BF34(319, &qword_100329258, &qword_100329260);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100329268, &qword_10032D760);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CustodianIdMSStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017B060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianIdMSStatus()
{
  return &type metadata for CustodianIdMSStatus;
}

unint64_t sub_10017B09C()
{
  unint64_t result = qword_100329450;
  if (!qword_100329450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329450);
  }
  return result;
}

uint64_t sub_10017B0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  v36 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v37 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9, v11);
  uint64_t v38 = (char *)&v28 - v13;
  Class v41 = _swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(a1 + 16);
  if (v35)
  {
    unint64_t v14 = 0;
    uint64_t v32 = v7 + 48;
    id v40 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    uint64_t v29 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
    uint64_t v30 = a1;
    uint64_t v33 = v7 + 56;
    uint64_t v34 = v7 + 16;
    unint64_t v28 = (v7 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v15 = (uint64_t)v36;
    while (1)
    {
      if (v14 >= *(void *)(a1 + 16))
      {
        __break(1u);
        return result;
      }
      unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v17 = *(void *)(v7 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v15, a1 + v16 + v17 * v14, v6);
      unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v31(v15, 0, 1, v6);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1) {
        goto LABEL_22;
      }
      id v18 = *v40;
      (*v40)(v38, v15, v6);
      uint64_t v19 = UUID.uuidString.getter();
      if (!*(void *)(v39 + 16)) {
        break;
      }
      unint64_t v21 = sub_1001358B8(v19, v20);
      if ((v22 & 1) == 0) {
        break;
      }
      int v23 = *(unsigned __int8 *)(*(void *)(v39 + 56) + v21);
      swift_bridgeObjectRelease();
      if (v23 == 1)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_13;
        }
      }
      uint64_t result = (*v29)(v38, v6);
LABEL_5:
      ++v14;
      uint64_t v15 = (uint64_t)v36;
      if (v35 == v14)
      {
        v31((uint64_t)v36, 1, 1, v6);
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
LABEL_13:
    v18(v37, (uint64_t)v38, v6);
    os_log_t v24 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1002289A0(0, v24[2] + 1, 1);
      os_log_t v24 = v41;
    }
    unint64_t v26 = v24[2];
    unint64_t v25 = v24[3];
    if (v26 >= v25 >> 1)
    {
      sub_1002289A0(v25 > 1, v26 + 1, 1);
      os_log_t v24 = v41;
    }
    void v24[2] = v26 + 1;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v18)((char *)v24 + v16 + v26 * v17, v37, v6);
    Class v41 = v24;
    a1 = v30;
    goto LABEL_5;
  }
  uint64_t v15 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v36, 1, 1, v6);
LABEL_22:
  swift_bridgeObjectRelease();
  sub_1000833BC(v15);
  return (uint64_t)v41;
}

unint64_t sub_10017B4FC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4168, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_10017B548()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10017B5DC(uint64_t a1)
{
  sub_100009F04((uint64_t *)&unk_100329960);

  return sub_10017A62C(a1);
}

void sub_10017B654()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  sub_10017A274(v3, v4, v6, v7);
}

uint64_t sub_10017B6EC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10017B7D8(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void **)v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_10017A458(a1, a2, v7, v8, v10, v11);
}

void *sub_10017B88C(uint64_t a1)
{
  uint64_t v1 = &_swiftEmptyDictionarySingleton;
  unint64_t v14 = &_swiftEmptyDictionarySingleton;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v13 = *(void *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain();
      sub_10017ABB0((uint64_t *)&v14, &v13);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = v14;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E778);
  swift_bridgeObjectRetain_n();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v9 = Dictionary.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_100135190(v9, v11, (uint64_t *)&v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Extracted Custodian statuses: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v1[2]) {
      goto LABEL_11;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!v1[2])
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v1;
}

void sub_10017BB10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v67 = a1;
  uint64_t v64 = sub_100009F04(&qword_100329458);
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v11);
  uint64_t v59 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  unint64_t v63 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v16;
  __chkstk_darwin(v15, v17);
  uint64_t v58 = (char *)&v53 - v18;
  uint64_t v19 = sub_100009F04(&qword_100325870);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  int v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v24 = (uint64_t (*)())swift_allocObject();
  os_log_type_t v57 = a3;
  *((void *)v24 + 2) = a3;
  *((void *)v24 + 3) = a4;
  uint64_t v65 = a5;
  *((void *)v24 + 4) = a5;
  *((void *)v24 + 5) = a6;
  uint64_t v60 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a2 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v19);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  id v25 = [[*(id *)(*sub_100008EF8(v69, v70) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)v69);
  if (v25)
  {
    os_log_type_t v57 = v25;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    uint64_t v27 = v66;
    unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
    uint64_t v29 = v58;
    uint64_t v65 = (void (*)(uint64_t))(v66 + 16);
    uint64_t v55 = v28;
    v28(v58, v67, v13);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    v56 = v24;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v54 = v13;
      uint64_t v34 = (uint8_t *)v33;
      v69[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      uint64_t v35 = UUID.uuidString.getter();
      uint64_t v68 = sub_100135190(v35, v36, v69);
      uint64_t v27 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v54);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Custodian %s Calling setup finalization", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v13 = v54;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v13);
    }

    uint64_t v39 = v63;
    uint64_t v40 = v67;
    Class v41 = v55;
    v55(v63, v67, v13);
    type metadata accessor for FinalizeCustodianSetupMessage();
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
    *(unsigned char *)(v42 + 16) = 3;
    v43 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
    v43(v42 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v39, v13);
    *(unsigned char *)(v42 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 1;
    os_log_type_t v44 = v59;
    uint64_t v45 = v62;
    uint64_t v46 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v59, v60 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__setupFinalizationHandler, v64);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
    sub_100008EF8(v69, v70);
    v41(v39, v40, v13);
    unint64_t v47 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    unint64_t v48 = (v61 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    v43(v49 + v47, v39, v13);
    uint64_t v50 = (uint64_t (**)())(v49 + v48);
    uint64_t v51 = v56;
    *uint64_t v50 = sub_1001264A0;
    v50[1] = v51;
    swift_retain();
    v52 = v57;
    sub_100110688(v42, v57, (uint64_t)sub_10017CC18, v49);
    swift_release();
    swift_release();

    sub_100008EA8((uint64_t)v69);
    swift_release();
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    uint64_t v68 = -7051;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000094E8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v37 = (void *)v69[0];
    uint64_t v38 = ((uint64_t (*)(uint64_t))v57)(v69[0]);
    v65(v38);
    swift_release();
  }
}

void sub_10017C204(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a3;
  uint64_t v73 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v73 - 8);
  uint64_t v13 = __chkstk_darwin(v73, v12);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v68 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v68 - v21;
  int v23 = *(os_unfair_lock_s **)(a2 + 40);
  uint64_t v74 = a4;
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v23);
  uint64_t v24 = *(void *)(a2 + 16);
  id v25 = *(os_unfair_lock_s **)(a2 + 40);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v25);
  if (v24)
  {
    unint64_t v72 = a5;
    uint64_t v26 = UUID.uuidString.getter();
    if (*(void *)(v24 + 16))
    {
      unint64_t v28 = sub_1001358B8(v26, v27);
      if (v29)
      {
        int v30 = *(unsigned __int8 *)(*(void *)(v24 + 56) + v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!v30)
        {
          uint64_t v59 = v74;
          swift_retain();
          swift_retain();
          sub_10017BB10(a1, a2, v75, v59, v72, a6);
          swift_release_n();
          swift_release_n();
          return;
        }
        if (v30 == 1)
        {
          if (qword_100320B98 != -1) {
            swift_once();
          }
          uint64_t v31 = type metadata accessor for Logger();
          sub_100007288(v31, (uint64_t)qword_10033E778);
          uint64_t v32 = v73;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v19, a1, v73);
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v33, v34))
          {
            (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v32);
            goto LABEL_31;
          }
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          uint64_t v77 = (void *)swift_slowAlloc();
          uint64_t v71 = a6;
          *(_DWORD *)uint64_t v35 = 136315138;
          uint64_t v36 = UUID.uuidString.getter();
          uint64_t v76 = sub_100135190(v36, v37, (uint64_t *)&v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v32);
          uint64_t v38 = "Custodian %s is already known to IdMS and accepted";
        }
        else
        {
          if (qword_100320B98 != -1) {
            swift_once();
          }
          uint64_t v60 = type metadata accessor for Logger();
          sub_100007288(v60, (uint64_t)qword_10033E778);
          uint64_t v61 = v11;
          uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
          uint64_t v63 = v73;
          v62(v15, a1, v73);
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v33, v34))
          {
            (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v63);
            goto LABEL_31;
          }
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          uint64_t v77 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136315138;
          uint64_t v64 = UUID.uuidString.getter();
          uint64_t v76 = sub_100135190(v64, v65, (uint64_t *)&v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v73);
          uint64_t v38 = "Custodian %s IdMS status is unknown, Investigate.";
        }
        _os_log_impl((void *)&_mh_execute_header, v33, v34, v38, v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_31:

        uint64_t v66 = v72;
        uint64_t v67 = ((uint64_t (*)(void))v75)(0);
        v66(v67);
        swift_release();
        swift_release();
        return;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AACustodianError(0);
    uint64_t v76 = -7018;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000094E8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v39 = v77;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E778);
    uint64_t v41 = v11;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v43 = v73;
    v42(v22, a1, v73);
    id v44 = v39;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v69 = (void *)swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v77 = (void *)v70;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v71 = a6;
      uint64_t v48 = UUID.uuidString.getter();
      uint64_t v76 = sub_100135190(v48, v49, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v43);
      *(_WORD *)(v47 + 12) = 2112;
      id v50 = v44;
      uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v76 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v69 = v51;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Custodian %s not found on IdMS: %@", (uint8_t *)v47, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v43);
    }
    id v57 = v44;
    uint64_t v58 = ((uint64_t (*)(id))v75)(v44);
    v72(v58);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100007288(v52, (uint64_t)qword_10033E778);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "No Custodian statuses found on IdMS", v55, 2u);
      swift_slowDealloc();
    }

    uint64_t v56 = ((uint64_t (*)(void))v75)(0);
    a5(v56);
    swift_release();
    swift_release();
  }
}

uint64_t sub_10017CB30()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10017CB70()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10017CC18(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  os_log_type_t v7 = *(uint64_t (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_10017A690(a1, v5, v7, v8);
}

void sub_10017CCB8()
{
  sub_100178DF4(v0);
}

void sub_10017CCC0(void (*a1)(void), uint64_t a2)
{
  sub_100178EBC(a1, a2, v2);
}

uint64_t sub_10017CCC8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10017CD08()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation);
  *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;
}

void sub_10017CD5C()
{
  sub_10017860C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10017CD6C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_100178710(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10017CD88()
{
  uint64_t result = 1701869940;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6169646F74737563;
      break;
    case 2:
      uint64_t result = 0x666E496572616873;
      break;
    case 3:
      uint64_t result = 0x657A696C616E6966;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10017CE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10017E5FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10017CE50(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10017CE5C(uint64_t a1)
{
  unint64_t v2 = sub_10017D940();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10017CE98(uint64_t a1)
{
  unint64_t v2 = sub_10017D940();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10017CED4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10010FFF4(v0 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo);

  return swift_deallocClassInstance();
}

uint64_t sub_10017CF84()
{
  return type metadata accessor for ShareMessage(0);
}

uint64_t type metadata accessor for ShareMessage(uint64_t a1)
{
  return sub_10000698C(a1, qword_100329490);
}

uint64_t sub_10017CFAC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CloudShareInfo();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10017D08C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v18 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v18, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100329598);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_10017D940();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v26 = *(unsigned char *)(v2 + 16);
  char v25 = 0;
  sub_100029FAC();
  uint64_t v16 = v21;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v10, v2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v20);
    char v24 = 1;
    sub_10017D994(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v20);
    sub_10010FF90(v2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t)v6);
    char v23 = 2;
    sub_10017D994(&qword_1003265D0, (void (*)(uint64_t))type metadata accessor for CloudShareInfo);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10010FFF4((uint64_t)v6);
    char v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10017D43C(void *a1)
{
  uint64_t v2 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100009F04(&qword_100329588);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  char v26 = a1;
  sub_100008EF8(a1, v13);
  sub_10017D940();
  uint64_t v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    uint64_t v17 = (uint64_t)v26;
    uint64_t v19 = v27;
    type metadata accessor for ShareMessage(0);
    swift_deallocPartialClassInstance();
    uint64_t v21 = v17;
  }
  else
  {
    v22[1] = v2;
    unint64_t v28 = v5;
    uint64_t v16 = v23;
    uint64_t v15 = v24;
    char v32 = 0;
    sub_100029F58();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v27;
    *(unsigned char *)(v27 + 16) = v33;
    char v31 = 1;
    sub_10017D994((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v9, v6);
    char v30 = 2;
    sub_10017D994(&qword_1003265C0, (void (*)(uint64_t))type metadata accessor for CloudShareInfo);
    uint64_t v20 = (uint64_t)v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000E4950(v20, v19 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo);
    char v29 = 3;
    LOBYTE(v20) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v25);
    *(unsigned char *)(v19 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = v20 & 1;
    uint64_t v21 = (uint64_t)v26;
  }
  sub_100008EA8(v21);
  return v19;
}

uint64_t sub_10017D8C0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ShareMessage(0);
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_10017D43C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_10017D91C(void *a1)
{
  return sub_10017D08C(a1);
}

unint64_t sub_10017D940()
{
  unint64_t result = qword_100329590;
  if (!qword_100329590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329590);
  }
  return result;
}

uint64_t sub_10017D994(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10017D9DC(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = type metadata accessor for CloudShareInfo();
    uint64_t v13 = *(int *)(v12 + 20);
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)uint64_t v14 = v17;
    *((void *)v14 + 1) = v16;
    uint64_t v18 = *(int *)(v12 + 24);
    uint64_t v19 = *(void **)&v10[v18];
    *(void *)&v9[v18] = v19;
    *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
    id v20 = v19;
  }
  return a1;
}

void sub_10017DB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for CloudShareInfo();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(v5 + *(int *)(v7 + 24));
}

uint64_t sub_10017DBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(v8 + v12);
  uint64_t v14 = (uint64_t *)(v9 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = *(void **)(v9 + v17);
  *(void *)(v8 + v17) = v18;
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  id v19 = v18;
  return a1;
}

uint64_t sub_10017DCFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(v8 + v12);
  uint64_t v14 = (void *)(v9 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(v11 + 24);
  uint64_t v16 = *(void **)(v8 + v15);
  uint64_t v17 = *(void **)(v9 + v15);
  *(void *)(v8 + v15) = v17;
  id v18 = v17;

  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10017DE20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  *(_OWORD *)(v8 + *(int *)(v11 + 20)) = *(_OWORD *)(v9 + *(int *)(v11 + 20));
  *(void *)(v8 + *(int *)(v11 + 24)) = *(void *)(v9 + *(int *)(v11 + 24));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10017DF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = (void *)(v8 + v12);
  uint64_t v14 = (uint64_t *)(v9 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(int *)(v11 + 24);
  id v18 = *(void **)(v8 + v17);
  *(void *)(v8 + v17) = *(void *)(v9 + v17);

  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10017E014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10017E028);
}

uint64_t sub_10017E028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for CloudShareInfo();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10017E14C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10017E160);
}

uint64_t sub_10017E160(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for CloudShareInfo();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ShareMessageContext(uint64_t a1)
{
  return sub_10000698C(a1, qword_1003295F8);
}

uint64_t sub_10017E290()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for CloudShareInfo();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShareMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ShareMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017E4BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareMessage.CodingKeys()
{
  return &type metadata for ShareMessage.CodingKeys;
}

unint64_t sub_10017E4F8()
{
  unint64_t result = qword_100329638;
  if (!qword_100329638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329638);
  }
  return result;
}

unint64_t sub_10017E550()
{
  unint64_t result = qword_100329640;
  if (!qword_100329640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329640);
  }
  return result;
}

unint64_t sub_10017E5A8()
{
  unint64_t result = qword_100329648;
  if (!qword_100329648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329648);
  }
  return result;
}

uint64_t sub_10017E5FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x666E496572616873 && a2 == 0xE90000000000006FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A696C616E6966 && a2 == 0xED00007075746553)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10017E7F0(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CustodianRecoverySession();
    sub_10018FF3C(&qword_100329948, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25;
    uint64_t v24 = v26;
    uint64_t v8 = v27;
    int64_t v9 = v28;
    unint64_t v10 = v29;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v24 = a3 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    int64_t v9 = 0;
  }
  int64_t v23 = (unint64_t)(v8 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for CustodianRecoverySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v30;
    swift_unknownObjectRelease();
    int64_t v16 = v9;
    uint64_t v17 = v10;
    while (v15)
    {
      uint64_t v30 = v15;
      char v21 = a1(&v30);
      if (v4)
      {
        swift_release();
LABEL_36:
        sub_10018FE4C();
        return v15;
      }
      if (v21) {
        goto LABEL_36;
      }
      uint64_t result = swift_release();
      int64_t v9 = v16;
      unint64_t v10 = v17;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v10)
      {
        uint64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v16 = v9;
      }
      else
      {
        int64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v16 >= v23) {
          break;
        }
        unint64_t v19 = *(void *)(v24 + 8 * v16);
        if (!v19)
        {
          int64_t v20 = v9 + 2;
          if (v9 + 2 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 3;
          if (v9 + 3 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 4;
          if (v9 + 4 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19)
          {
LABEL_22:
            int64_t v16 = v20;
          }
          else
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v23) {
              break;
            }
            unint64_t v19 = *(void *)(v24 + 8 * v16);
            if (!v19)
            {
              int64_t v22 = v9 + 6;
              while (v23 != v22)
              {
                unint64_t v19 = *(void *)(v24 + 8 * v22++);
                if (v19)
                {
                  int64_t v16 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v17 = (v19 - 1) & v19;
        unint64_t v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      swift_retain();
    }
  }
  sub_10018FE4C();
  return 0;
}

uint64_t sub_10017EB28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    swift_getErrorValue();
    *(void *)(inited + 72) = v11;
    BOOL v7 = sub_10003584C((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v11 - 8) + 16))(v7);
    sub_100220CAC(inited);
    id v8 = objc_allocWithZone((Class)NSError);
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 initWithDomain:v9 code:a1 userInfo:isa];

    swift_willThrow();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10017ECC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10017ED5C(long long *a1)
{
  *(void *)(v1 + 16) = 0;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322530);
  Dependency.init(dependencyId:config:)();
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  *uint64_t v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  *uint64_t v4 = 0;
  v4[1] = 0;
  sub_100041E8C(a1, v1 + 24);
  sub_100041E8C((long long *)((char *)a1 + 120), v1 + 64);
  sub_100041E8C(a1 + 5, v1 + 104);
  sub_100041E8C((long long *)((char *)a1 + 40), v1 + 144);
  *(_OWORD *)(v1 + 184) = a1[10];
  sub_100041E8C(a1 + 11, v1 + 200);
  return v1;
}

uint64_t sub_10017EE80(char a1, uint64_t a2)
{
  *(void *)(v3 + 112) = a2;
  *(void *)(v3 + 120) = v2;
  *(unsigned char *)(v3 + 208) = a1;
  uint64_t v4 = sub_100009F04(&qword_100322CF0);
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = type metadata accessor for CustodianRecoveryData();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = swift_task_alloc();
  return _swift_task_switch(sub_10017EFA0, 0, 0);
}

uint64_t sub_10017EFA0()
{
  uint64_t v93 = v0;
  uint64_t v90 = v0 + 16;
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 208);
  sub_10004FD70();
  uint64_t v3 = sub_1001F7CCC();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID + 8);
  uint64_t v8 = v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  uint64_t v10 = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = sub_100225978(v3, v5, v7, v6, v9, v10);
  *(void *)(v0 + 192) = v11;
  uint64_t v12 = v11;
  switch(v2)
  {
    case 1:
    case 2:
    case 3:
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v13 = *(void *)(v0 + 176);
      uint64_t v14 = *(void *)(v0 + 112);
      uint64_t v15 = type metadata accessor for Logger();
      sub_100007288(v15, (uint64_t)qword_10033E748);
      sub_1001900B8(v14, v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      int64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v91 = v12;
        int v18 = *(unsigned __int8 *)(v0 + 208);
        uint64_t v19 = swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        unint64_t v20 = 0x8000000100299CA0;
        unint64_t v21 = 0x6E6946656B617073;
        if (v18 == 2) {
          unint64_t v21 = 0xD000000000000011;
        }
        else {
          unint64_t v20 = 0xEA00000000006C61;
        }
        if (v18 == 1) {
          uint64_t v22 = 0xD000000000000015;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v18 == 1) {
          unint64_t v23 = 0x8000000100299C80;
        }
        else {
          unint64_t v23 = v20;
        }
        uint64_t v24 = *(void *)(v0 + 176);
        *(void *)(v0 + 88) = sub_100135190(v22, v23, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        uint64_t v25 = sub_100107BF4();
        *(void *)(v0 + 96) = sub_100135190(v25, v26, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100190390(v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received %s push with data: %s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v12 = v91;
      }
      else
      {
        sub_100190390(*(void *)(v0 + 176), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      }
      uint64_t v27 = sub_10018D7C8(*(void *)(v0 + 112));
      uint64_t v29 = v28;
      if (!v27)
      {
        char v31 = v12;
        uint64_t v32 = v29;
        goto LABEL_44;
      }
      uint64_t v30 = v27;
      sub_1001908EC(v27, v28, *(unsigned __int8 *)(v0 + 208));
      int v63 = *(unsigned __int8 *)(v0 + 208);
      if (v63 == 1 || v63 == 2)
      {
        char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
        {
          uint64_t v70 = sub_1001912B4(v30, v29, *(unsigned char *)(v0 + 208));
          uint64_t v72 = v71;
          uint64_t v73 = *(void *)(v0 + 152);
          unsigned int v74 = *(unsigned __int8 *)(v0 + 208);
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v76 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v90, ObjectType, v29);
          uint64_t v78 = (uint64_t *)(v77 + *(int *)(v73 + 44));
          uint64_t v79 = *v78;
          unint64_t v80 = v78[1];
          *uint64_t v78 = (uint64_t)v70;
          v78[1] = v72;
          sub_1000196A0(v79, v80);
          v76(v90, 0);
          if (v74 < 4) {
            int v82 = v74 + 1;
          }
          else {
            int v82 = 5;
          }
          sub_10018DF08(v30, v81, v82, 0, 0, 0, 0, 0, 0);
          if (v12) {
            [v12 updateTaskResultWithError:0];
          }
          uint64_t v84 = *(void *)(v0 + 136);
          uint64_t v83 = *(void *)(v0 + 144);
          uint64_t v85 = *(void *)(v0 + 128);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v83, *(void *)(v0 + 120) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v85);
          Dependency.wrappedValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
          swift_getObjectType();
          sub_100169BA4((uint64_t)v12);

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_58;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Message verified Code entered on Owner device is correct!!!, Getting RKC + PRKC + otCustodianID", v88, 2u);
        swift_slowDealloc();
      }

      sub_100182180(v30, v29, v12);
      goto LABEL_56;
    case 4:
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v43 = *(void *)(v0 + 168);
      uint64_t v44 = *(void *)(v0 + 112);
      uint64_t v45 = type metadata accessor for Logger();
      sub_100007288(v45, (uint64_t)qword_10033E748);
      sub_1001900B8(v44, v43, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      os_log_type_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v49 = *(void *)(v0 + 168);
      if (v48)
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        *(_DWORD *)id v50 = 136315138;
        uint64_t v51 = sub_100107BF4();
        *(void *)(v0 + 48) = sub_100135190(v51, v52, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100190390(v49, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Received spakeComplete push with data: %s", v50, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100190390(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      }

      uint64_t v64 = sub_10018D7C8(*(void *)(v0 + 112));
      uint64_t v32 = v65;
      if (v64)
      {
        sub_100184294(v64, v65, v12);
LABEL_56:
        swift_unknownObjectRelease();
      }
      else
      {
        char v31 = v12;
LABEL_44:
        sub_10017FF78(6, v31, -9009, 0, v32);
      }
      goto LABEL_57;
    case 5:
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v53 = *(void *)(v0 + 160);
      uint64_t v54 = *(void *)(v0 + 112);
      uint64_t v55 = type metadata accessor for Logger();
      sub_100007288(v55, (uint64_t)qword_10033E748);
      sub_1001900B8(v54, v53, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = *(void *)(v0 + 160);
      if (v58)
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        uint64_t v61 = sub_100107BF4();
        *(void *)(v0 + 72) = sub_100135190(v61, v62, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100190390(v59, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Received spakeError push with data: %s", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100190390(*(void *)(v0 + 160), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      }

      uint64_t v66 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v66;
      void *v66 = v0;
      v66[1] = sub_10017FDE4;
      uint64_t v67 = *(void *)(v0 + 112);
      return sub_100186908(v67, (uint64_t)v12);
    default:
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v33 = *(void *)(v0 + 112);
      uint64_t v34 = *(void *)(v0 + 184);
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E748);
      sub_1001900B8(v33, v34, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v39 = *(void *)(v0 + 184);
      if (v38)
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        v92[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        uint64_t v41 = sub_100107BF4();
        *(void *)(v0 + 104) = sub_100135190(v41, v42, v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100190390(v39, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Received spakeBegin push with data: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100190390(*(void *)(v0 + 184), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      }

      sub_10018085C(*(uint64_t **)(v0 + 112), v12);
LABEL_57:

LABEL_58:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v89 = *(uint64_t (**)(void))(v0 + 8);
      return v89();
  }
}

uint64_t sub_10017FDE4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10017FEE0, 0, 0);
}

uint64_t sub_10017FEE0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10017FF78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v24 = a5;
  int v11 = a1;
  uint64_t v12 = sub_100009F04(&qword_100322CF0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  int64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AACustodianRecoveryError(0);
  uint64_t v25 = a3;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  _BridgedStoredNSError.init(_:userInfo:)();
  id v17 = v26;
  if (v11 != 6 && a4)
  {
    id v18 = v26;
    uint64_t v19 = swift_unknownObjectRetain();
    sub_10018CACC(v19, v24, (uint64_t)v18, a1);
    swift_unknownObjectRelease();
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  id v20 = v26;
  if (a2)
  {
LABEL_6:
    unint64_t v21 = (void *)_convertErrorToNSError(_:)();
    [a2 updateTaskResultWithError:v21];
  }
LABEL_7:
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v6 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_getObjectType();
  sub_100169BA4((uint64_t)a2);

  return swift_unknownObjectRelease();
}

void sub_1001801AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = a2;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E748);
    swift_errorRetain();
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      log = v16;
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)id v18 = 138412290;
      *(void *)&long long v27 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v27;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v17, "Failed to get configuration with error: %@, starting session with default values", v18, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v14 = a2;
  }
  uint64_t v20 = *(void *)(v14 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = a7;
    uint64_t v21 = a8;
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v14 + 16 * v22++;
      long long v27 = *(_OWORD *)(v23 + 32);
      swift_unknownObjectRetain();
      sub_10018043C((uint64_t *)&v27, a3, a4, a5, a6, v26, v21);
      swift_unknownObjectRelease();
    }
    while (v20 != v22);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10018043C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = a5;
  uint64_t v33 = a7;
  uint64_t v11 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *a1;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  int64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Generating new session with completion and code", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = v37;
  uint64_t v20 = v37 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v20, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v14 + 4) = a2;
  *((void *)v14 + 5) = a3;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_unknownObjectRetain();
    swift_release();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v22 = *(void **)(Strong + 16);
      id v23 = v22;
      swift_release();
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v27 = v34;
    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v35 = -9001;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v28 = v36;
    uint64_t v29 = sub_10000FE4C(v22, (uint64_t)v14, v27, a6, v36);
    uint64_t v31 = v30;
    swift_unknownObjectRelease();

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_unknownObjectRetain();
      swift_release();
      sub_10001098C(v19 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, v33, 0);
      swift_unknownObjectRelease();
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100180DA4(v29, v31, 0);
      swift_release();
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unexpectedly found nil while unwrapping self...", v26, 2u);
      swift_slowDealloc();
    }
  }
  return sub_100190390((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
}

uint64_t sub_10018085C(uint64_t *a1, void *a2)
{
  id v42 = a2;
  uint64_t v3 = sub_100009F04(&qword_100322CF0);
  __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v41 = v5;
    uint64_t v9 = *a1;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E748);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Looking for existing sessions to start code verification", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = *(void *)(v43 + 184);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 32));
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_bridgeObjectRetain();
    unint64_t v16 = sub_10018EBF4(v15, v9, v8);
    swift_bridgeObjectRelease();
    os_log_type_t v17 = sub_1000300BC(v16);
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 32));
    uint64_t v18 = v17[2];
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = v17;
      uint64_t v19 = v17 + 5;
      id v20 = v42;
      do
      {
        uint64_t v23 = *(v19 - 1);
        uint64_t v24 = *v19;
        swift_unknownObjectRetain();
        os_log_type_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updating session with incoming data from IdMS", v27, 2u);
          id v20 = v42;
          swift_slowDealloc();
        }

        uint64_t ObjectType = swift_getObjectType();
        uint64_t v22 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48))(v44, ObjectType, v24);
        sub_1001069A4(a1);
        v22(v44, 0);
        sub_100180DA4(v23, v24, v20);
        swift_unknownObjectRelease();
        v19 += 2;
        --v18;
      }
      while (v18);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Found no active sessions for recovery. Starting a session and waiting for user to enter a code...", v37, 2u);
        swift_slowDealloc();
      }

      sub_100181BD4((uint64_t)a1);
      uint64_t v38 = (uint64_t)v42;
      if (v42) {
        [v42 updateTaskResultWithError:0];
      }
      uint64_t v39 = v41;
      ((void (*)(char *, uint64_t, uint64_t))v41[2])(v7, v43 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v3);
      Dependency.wrappedValue.getter();
      ((void (*)(char *, uint64_t))v39[1])(v7, v3);
      swift_getObjectType();
      sub_100169BA4(v38);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    id v33 = v42;
    if (v32)
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No recovery session id in the incoming RecoveryData, unable to proceed...", v34, 2u);
      swift_slowDealloc();
    }

    return sub_10017FF78(6, v33, -9008, 0, 0);
  }
}

uint64_t sub_100180DA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v97 = sub_100009F04(&qword_100322CF0);
  uint64_t v8 = *(void *)(v97 - 8);
  __chkstk_darwin(v97, v9);
  uint64_t v11 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v93 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v93, v12);
  uint64_t v14 = (uint64_t *)&v79[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v15 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v15, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if (v14[5])
  {
    uint64_t v96 = a2;
    unint64_t v16 = v14[1];
    if (v16)
    {
      uint64_t v17 = v14[4];
      uint64_t v90 = *v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v91 = sub_10018F930((uint64_t)v14);
      uint64_t v95 = v19;
      uint64_t v92 = v20;
      if (v20)
      {
        unint64_t v21 = v18;
        uint64_t v88 = v17;
        uint64_t v89 = a1;
        os_log_type_t v87 = v14;
        uint64_t v83 = v8;
        id v84 = a3;
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        uint64_t v23 = sub_100007288(v22, (uint64_t)qword_10033E748);
        uint64_t v24 = v91;
        uint64_t v25 = v92;
        uint64_t v26 = v95;
        sub_1001905C4(v91, v92, v95, v21);
        swift_bridgeObjectRetain();
        sub_1001905C4(v24, v25, v26, v21);
        uint64_t v82 = v23;
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        int v29 = v28;
        BOOL v30 = os_log_type_enabled(v27, v28);
        v86 = v11;
        if (v30)
        {
          uint64_t v31 = swift_slowAlloc();
          uint64_t v81 = (void *)swift_slowAlloc();
          v99[0] = v81;
          *(_DWORD *)uint64_t v31 = 136315394;
          int v80 = v29;
          swift_bridgeObjectRetain();
          v98[0] = sub_100135190(v90, v16, (uint64_t *)v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v31 + 12) = 2080;
          swift_bridgeObjectRetain();
          v98[0] = sub_100135190(v24, v25, (uint64_t *)v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10018FE00(v24, v25, v95, v21);
          sub_10018FE00(v24, v25, v95, v21);
          _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v80, "Verifying custodian message session with RecoveryID: %s, SpakeID: %s", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v26 = v95;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          sub_10018FE00(v24, v25, v26, v21);
          sub_10018FE00(v24, v25, v26, v21);
        }

        unint64_t v50 = v21;
        swift_bridgeObjectRetain();
        sub_100013140(v26, v21);
        sub_100013198(v26, v21);
        uint64_t v51 = sub_100211BA8(v24, v25);
        unint64_t v53 = v52;
        sub_100008EF8((void *)(v4 + 200), *(void *)(v4 + 224));
        sub_1002068C8(v51, v53, v99);
        unint64_t v85 = v50;
        uint64_t v88 = v51;
        uint64_t v81 = (void *)v53;
        uint64_t v90 = v4;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_100013140(v26, v50);
        sub_100013198(v26, v50);
        uint64_t v54 = v96;
        uint64_t v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v96 + 48);
        uint64_t v56 = v89;
        os_log_type_t v57 = (void (*)(void *, void))v55(v98, ObjectType, v96);
        *(void *)(v58 + 16) = v24;
        *(void *)(v58 + 24) = v25;
        uint64_t v59 = v56;
        swift_bridgeObjectRelease();
        v57(v98, 0);
        sub_100008A94((uint64_t)v99, (uint64_t)v98);
        uint64_t v60 = v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
        swift_beginAccess();
        sub_10018FE94((uint64_t)v98, v60);
        swift_endAccess();
        sub_1001908EC(v59, v54, 0);
        uint64_t v61 = sub_1001912B4(v59, v54, 0);
        uint64_t v14 = v87;
        uint64_t v62 = v88;
        uint64_t v64 = v61;
        uint64_t v66 = v65;
        uint64_t v67 = (void (*)(void *, void))v55(v98, ObjectType, v54);
        char v69 = (uint64_t *)(v68 + *(int *)(v93 + 44));
        uint64_t v70 = *v69;
        unint64_t v71 = v69[1];
        *char v69 = (uint64_t)v64;
        v69[1] = v66;
        sub_1000196A0(v70, v71);
        v67(v98, 0);
        uint64_t v72 = v90;
        sub_10018DF08(v59, v73, 1, 0, 0, 0, 0, 0, 0);
        uint64_t v74 = (uint64_t)v84;
        if (v84) {
          [v84 updateTaskResultWithError:0];
        }
        uint64_t v75 = v72 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter;
        uint64_t v76 = v83;
        uint64_t v77 = v86;
        uint64_t v78 = v97;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v83 + 16))(v86, v75, v97);
        Dependency.wrappedValue.getter();
        (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v77, v78);
        swift_getObjectType();
        sub_100169BA4(v74);
        swift_unknownObjectRelease();
        sub_100013198(v62, (unint64_t)v81);
        sub_10018FE00(v91, v92, v95, v85);
        sub_100008EA8((uint64_t)v99);
        return sub_100190390((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_100007288(v43, (uint64_t)qword_10033E748);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "AAData malformed in session", v46, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      v98[0] = -9013;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v41 = v99[0];
      uint64_t v42 = swift_unknownObjectRetain();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E748);
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing recovery session ID", v39, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      v98[0] = -9008;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v40 = v99[0];
      swift_unknownObjectRetain();
      id v41 = v40;
      uint64_t v42 = a1;
    }
    sub_10018CACC(v42, v96, (uint64_t)v41, 0);
    swift_unknownObjectRelease();
    if (a3)
    {
      os_log_type_t v47 = (void *)_convertErrorToNSError(_:)();
      [a3 updateTaskResultWithError:v47];
    }
    uint64_t v48 = v4 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter;
    uint64_t v49 = v97;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v11, v48, v97);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v49);
    swift_getObjectType();
    sub_100169BA4((uint64_t)a3);

    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E748);
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Stored session did not contain a recovery code", v35, 2u);
      swift_slowDealloc();
    }

    sub_10017FF78(6, a3, -9010, 0, 0);
  }
  return sub_100190390((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
}

uint64_t sub_100181BD4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CustodianRecoveryData();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v7 = __chkstk_darwin(v3 - 8, v6);
  uint64_t v8 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  sub_1001900B8(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  sub_1001900B8((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v12;
  sub_100190610((uint64_t)v11, v14 + v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if (v1[2])
  {
    swift_retain_n();
    sub_100181EA8(0, v12, (uint64_t)v8);
  }
  else
  {
    v22[1] = sub_100008EF8(v1 + 3, v1[6]);
    uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
    uint64_t v15 = *(void *)((char *)v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID
                                 + 8);
    uint64_t v18 = *(void *)((char *)v1 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
    uint64_t v17 = *(void *)((char *)v1
                    + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID
                    + 8);
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = v19;
    v20[3] = sub_100190864;
    v20[4] = v14;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain_n();
    swift_bridgeObjectRetain();
    sub_10004E16C(v16, v15, v18, v17, (uint64_t)sub_1001908DC, (uint64_t)v20);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  sub_100190390((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  return swift_release();
}

void sub_100181EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      uint64_t v13 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v13;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get configuration with error: %@, starting session with default values", v7, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_unknownObjectRetain();
    swift_release();
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v10 = *(void **)(Strong + 16);
      id v11 = v10;
      swift_release();
    }
    else
    {
      uint64_t v10 = 0;
    }
    type metadata accessor for AACustodianRecoveryError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    sub_10000FE4C(v10, a3, 0, 0, v12);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
  }
}

void sub_100182180(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v100 = a2;
  v101 = a3;
  uint64_t v99 = sub_100009F04(&qword_100322CF0);
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99, v4);
  uint64_t v97 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v92 = (uint64_t)&v91 - v17;
  uint64_t v18 = type metadata accessor for CustodianRecoveryData();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v91 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v91 - v24;
  uint64_t v102 = a1;
  uint64_t v26 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v26, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v93 = sub_10018F930((uint64_t)v25);
  uint64_t v28 = v27;
  uint64_t v95 = v29;
  unint64_t v96 = v30;
  sub_100190390((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v94 = v28;
  if (v28)
  {
    sub_1001900B8(v26, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    sub_100019730((uint64_t)&v22[*(int *)(v18 + 28)], (uint64_t)v9, (uint64_t *)&unk_100321CE0);
    sub_100190390((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100006574((uint64_t)v9, (uint64_t *)&unk_100321CE0);
      uint64_t v31 = v102;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100007288(v32, (uint64_t)qword_10033E748);
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing custodian UUID", v35, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      *(void *)&long long v104 = -9011;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v36 = (void *)v106[0];
      swift_unknownObjectRetain();
      id v37 = v36;
      sub_10018CACC(v31, v100, (uint64_t)v37, 3);
      swift_unknownObjectRelease();
      os_log_type_t v38 = v101;
      if (v101)
      {
        uint64_t v39 = (void *)_convertErrorToNSError(_:)();
        [v38 updateTaskResultWithError:v39];
      }
      uint64_t v40 = v98;
      id v41 = v97;
      uint64_t v42 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v97, v103 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v99);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
      swift_getObjectType();
      sub_100169BA4((uint64_t)v38);
      swift_unknownObjectRelease();

      sub_10018FE00(v93, v94, v95, v96);
    }
    else
    {
      uint64_t v56 = v10;
      os_log_type_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
      uint64_t v58 = v92;
      v57(v92, v9, v10);
      uint64_t v59 = v102;
      uint64_t v60 = v102 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
      swift_beginAccess();
      sub_100019730(v60, (uint64_t)&v104, (uint64_t *)&unk_1003274E0);
      if (v105)
      {
        sub_100041E8C(&v104, (uint64_t)v106);
        uint64_t v61 = v58;
        uint64_t v62 = v103;
        uint64_t v99 = (uint64_t)sub_100008EF8((void *)(v103 + 64), *(void *)(v103 + 88));
        swift_unownedRetainStrong();
        swift_unownedRetain();
        swift_unownedRetain();
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v61, v56);
        sub_100008A94((uint64_t)v106, (uint64_t)&v104);
        uint64_t v63 = v56;
        unint64_t v64 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        unint64_t v65 = (v12 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v66 = (void *)swift_allocObject();
        uint64_t v67 = (void (*)(char *, char *, uint64_t))v57;
        uint64_t v68 = (uint64_t)v66;
        v66[2] = v62;
        uint64_t v69 = v100;
        uint64_t v70 = v101;
        v66[3] = v101;
        v66[4] = v59;
        v66[5] = v69;
        unint64_t v71 = (char *)v66 + v64;
        uint64_t v72 = v63;
        v67(v71, v15, v63);
        sub_100041E8C(&v104, v68 + v65);
        uint64_t v73 = (void *)(v68 + ((v65 + 47) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v74 = v93;
        uint64_t v75 = v94;
        *uint64_t v73 = v93;
        v73[1] = v75;
        uint64_t v76 = v95;
        unint64_t v77 = v96;
        v73[2] = v95;
        v73[3] = v77;
        id v78 = v70;
        swift_unknownObjectRetain();
        sub_1001905C4(v74, v75, v76, v77);
        uint64_t v79 = v92;
        sub_100239384(v92, (uint64_t)sub_100190504, v68);
        swift_release();
        sub_10018FE00(v74, v75, v76, v77);
        swift_unownedRelease();
        sub_100008EA8((uint64_t)v106);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v79, v72);
      }
      else
      {
        sub_100006574((uint64_t)&v104, (uint64_t *)&unk_1003274E0);
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v80 = type metadata accessor for Logger();
        sub_100007288(v80, (uint64_t)qword_10033E748);
        uint64_t v81 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v81, v82))
        {
          uint64_t v83 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v83 = 0;
          _os_log_impl((void *)&_mh_execute_header, v81, v82, "Missing spake verifier", v83, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for AACustodianRecoveryError(0);
        *(void *)&long long v104 = -9014;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
        _BridgedStoredNSError.init(_:userInfo:)();
        id v84 = (void *)v106[0];
        swift_unknownObjectRetain();
        id v85 = v84;
        sub_10018CACC(v59, v100, (uint64_t)v85, 3);
        swift_unknownObjectRelease();
        v86 = v101;
        if (v101)
        {
          os_log_type_t v87 = (void *)_convertErrorToNSError(_:)();
          [v86 updateTaskResultWithError:v87];
        }
        uint64_t v88 = v98;
        uint64_t v89 = v97;
        uint64_t v90 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v97, v103 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v99);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
        swift_getObjectType();
        sub_100169BA4((uint64_t)v86);
        swift_unknownObjectRelease();

        sub_10018FE00(v93, v94, v95, v96);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v58, v56);
      }
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100007288(v43, (uint64_t)qword_10033E748);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v102;
    if (v46)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Malformed recovery data", v48, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    *(void *)&long long v104 = -9013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v49 = (void *)v106[0];
    swift_unknownObjectRetain();
    id v50 = v49;
    sub_10018CACC(v47, v100, (uint64_t)v50, 3);
    swift_unknownObjectRelease();
    uint64_t v51 = v101;
    if (v101)
    {
      unint64_t v52 = (void *)_convertErrorToNSError(_:)();
      [v51 updateTaskResultWithError:v52];
    }
    uint64_t v53 = v98;
    uint64_t v54 = v97;
    uint64_t v55 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v97, v103 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v99);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
    swift_getObjectType();
    sub_100169BA4((uint64_t)v51);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100182D7C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v156 = a8;
  v160 = a7;
  uint64_t v161 = a6;
  uint64_t v166 = a5;
  uint64_t v168 = a4;
  uint64_t v169 = a2;
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v158 = (uint64_t)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v159, v14);
  uint64_t v157 = (uint64_t)&v147 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecoveryKeys();
  __chkstk_darwin(v16, v17);
  v167 = (uint64_t *)((char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v162 = type metadata accessor for UUID();
  uint64_t v163 = *(void *)(v162 - 8);
  __chkstk_darwin(v162, v19);
  uint64_t v21 = (char *)&v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v147 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100009F04(&qword_100322CF0);
  uint64_t v165 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v27);
  v164 = (char *)&v147 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (char *)&v147 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v32, &qword_1003235A0);
  id v33 = &unk_100320000;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v169;
    if (v37)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 138412290;
      uint64_t v41 = _convertErrorToNSError(_:)();
      v171[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v41;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to fetch recovery records with error: %@", v39, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      uint64_t v38 = v169;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }
    uint64_t v56 = v164;

    swift_getErrorValue();
    id v57 = sub_1000356E4(-9015, v170);
    swift_unownedRetainStrong();
    swift_errorRetain();
    uint64_t v58 = swift_unknownObjectRetain();
    sub_10018CACC(v58, v166, (uint64_t)v57, 3);
    swift_unknownObjectRelease();
    if (a3)
    {
      uint64_t v59 = (void *)_convertErrorToNSError(_:)();
      [a3 updateTaskResultWithError:v59];
    }
    uint64_t v60 = v165;
    (*(void (**)(char *, uint64_t, uint64_t))(v165 + 16))(v56, v38 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v26);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v26);
    swift_getObjectType();
    sub_100169BA4((uint64_t)a3);
    swift_unknownObjectRelease();
    swift_errorRelease();
    swift_release();
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    v154 = a3;
    sub_100190610((uint64_t)v32, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v42 = (uint64_t *)&v25[v22[8]];
    BOOL v43 = (unint64_t)v42[1] >> 60 == 15;
    uint64_t v44 = v25;
    uint64_t v155 = v26;
    if (v43)
    {
      uint64_t v45 = v162;
      uint64_t v46 = v163;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_100007288(v47, (uint64_t)qword_10033E748);
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v21, v161, v45);
      uint64_t v48 = v45;
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        uint64_t v153 = (uint64_t)v44;
        uint64_t v161 = v52;
        v171[0] = v52;
        *(_DWORD *)uint64_t v51 = 136315138;
        v152 = v51 + 4;
        sub_10018FF3C((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v53 = v162;
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v172 = sub_100135190(v54, v55, v171);
        id v33 = (void *)&unk_100320000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v163 + 8))(v21, v53);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Records do not contain recoveryKey for this UUID: %s, likely non-CDP account", v51, 0xCu);
        swift_arrayDestroy();
        uint64_t v44 = (char *)v153;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v163 + 8))(v21, v48);
      }
    }
    if (v33[369] != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    uint64_t v161 = sub_100007288(v62, (uint64_t)qword_10033E748);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Creating Message with RKC + PRKC + otCustodianID for owner device", v65, 2u);
      swift_slowDealloc();
    }

    uint64_t v66 = (uint64_t *)&v44[v22[7]];
    uint64_t v67 = *v66;
    unint64_t v68 = v66[1];
    uint64_t v69 = *v42;
    unint64_t v70 = v42[1];
    unint64_t v71 = v167;
    sub_100019730((uint64_t)&v44[v22[11]], (uint64_t)v167 + *(int *)(v16 + 28), (uint64_t *)&unk_100321CE0);
    uint64_t v72 = &v44[v22[12]];
    uint64_t v73 = *(void *)v72;
    uint64_t v74 = *((void *)v72 + 1);
    *unint64_t v71 = v67;
    v71[1] = v68;
    v71[2] = v69;
    v71[3] = v70;
    v71[4] = 0;
    v71[5] = 0;
    uint64_t v75 = (uint64_t *)((char *)v71 + *(int *)(v16 + 32));
    *uint64_t v75 = v73;
    v75[1] = v74;
    uint64_t v76 = v169;
    swift_unownedRetainStrong();
    sub_100013140(v67, v68);
    sub_1000196B4(v69, v70);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v77 = sub_100199ECC((uint64_t)v71);
    if (v78 >> 60 == 15)
    {
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed encoding message with keys", v81, 2u);
        swift_slowDealloc();
      }

      swift_unownedRetainStrong();
      type metadata accessor for AACustodianRecoveryError(0);
      uint64_t v172 = -9018;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_type_t v82 = (void *)v171[0];
      uint64_t v83 = v168;
      swift_unknownObjectRetain();
      id v84 = v82;
      sub_10018CACC(v83, v166, (uint64_t)v84, 3);
      swift_unknownObjectRelease();
      id v85 = v154;
      uint64_t v86 = v165;
      os_log_type_t v87 = v164;
      if (v154)
      {
        uint64_t v88 = (void *)_convertErrorToNSError(_:)();
        [v85 updateTaskResultWithError:v88];
      }
      uint64_t v89 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v87, v76 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v155);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v89);
      swift_getObjectType();
      sub_100169BA4((uint64_t)v85);
      swift_release();

      swift_unknownObjectRelease();
      sub_100190390((uint64_t)v167, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
      uint64_t v90 = (uint64_t)v44;
    }
    else
    {
      uint64_t v91 = v77;
      uint64_t v92 = (void *)v78;
      uint64_t v153 = (uint64_t)v44;
      uint64_t v93 = v160[3];
      uint64_t v94 = v160[4];
      sub_100008EF8(v160, v93);
      uint64_t v95 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v94 + 56);
      v160 = v92;
      uint64_t v96 = v95(v91, v92, v93, v94);
      unint64_t v98 = v97;
      v152 = (uint8_t *)v91;
      uint64_t ObjectType = swift_getObjectType();
      swift_unownedRetainStrong();
      uint64_t v151 = v96;
      unint64_t v150 = v98;
      Swift::String v100 = Data.base64EncodedString(options:)(0);
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      strcpy((char *)(inited + 32), "spakeMessage");
      *(unsigned char *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      *(Swift::String *)(inited + 48) = v100;
      *(void *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 80), "spakeSessionId");
      *(void *)(inited + 120) = &type metadata for String;
      uint64_t v102 = v156;
      *(unsigned char *)(inited + 95) = -18;
      *(void *)(inited + 96) = v102;
      *(void *)(inited + 104) = a9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v103 = sub_100220CAC(inited);
      sub_10024D93C(v103);
      swift_bridgeObjectRelease();
      uint64_t v149 = sub_1000DEEAC();
      uint64_t v148 = v104;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v105 = v166;
      v106 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v166 + 48);
      v107 = (void (*)(uint64_t *, void))v106(v171, ObjectType, v166);
      uint64_t v156 = v73;
      uint64_t v108 = v159;
      v110 = (uint64_t *)(v109 + *(int *)(v159 + 44));
      uint64_t v111 = *v110;
      unint64_t v112 = v110[1];
      uint64_t v113 = v148;
      uint64_t *v110 = v149;
      v110[1] = v113;
      sub_1000196A0(v111, v112);
      v107(v171, 0);
      sub_100013140(v67, v68);
      v114 = (void (*)(uint64_t *, void))v106(v171, ObjectType, v105);
      v116 = (uint64_t *)(v115 + *(int *)(v108 + 40));
      uint64_t v117 = *v116;
      unint64_t v118 = v116[1];
      uint64_t *v116 = v67;
      v116[1] = v68;
      sub_1000196A0(v117, v118);
      v114(v171, 0);
      swift_bridgeObjectRetain();
      uint64_t v119 = v168;
      uint64_t v120 = v106(v171, ObjectType, v105);
      uint64_t v121 = v108;
      uint64_t v122 = v169;
      v123 = (void (*)(uint64_t *, void))v120;
      v125 = (void *)(v124 + *(int *)(v108 + 64));
      void *v125 = v156;
      v125[1] = v74;
      uint64_t v126 = v119;
      swift_bridgeObjectRelease();
      v123(v171, 0);
      swift_unownedRetainStrong();
      sub_10018DF08(v119, v127, 4, 0, 0, 0, 0, 0, 0);
      swift_release();
      v128 = Logger.logObject.getter();
      os_log_type_t v129 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v130 = 0;
        _os_log_impl((void *)&_mh_execute_header, v128, v129, "Spake session for custodian device complete! Terminating session", v130, 2u);
        swift_slowDealloc();
      }

      id v131 = [objc_allocWithZone((Class)AACustodianRecoveryRequestContext) init];
      uint64_t v132 = v126 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
      swift_beginAccess();
      if (*(void *)(v132 + 8))
      {
        swift_bridgeObjectRetain();
        NSString v133 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v133 = 0;
      }
      uint64_t v134 = v165;
      v135 = v164;
      [v131 setRecoverySessionID:v133];

      uint64_t v136 = v157;
      sub_1001900B8(v132, v157, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      uint64_t v137 = v158;
      sub_100019730(v136 + *(int *)(v121 + 28), v158, (uint64_t *)&unk_100321CE0);
      sub_100190390(v136, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      uint64_t v138 = v163;
      uint64_t v139 = v162;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v137, 1, v162) == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
      }
      uint64_t v141 = v168;
      [v131 setCustodianUUID:isa];

      if (*(void *)(v132 + *(int *)(v121 + 64) + 8))
      {
        swift_bridgeObjectRetain();
        NSString v142 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v142 = 0;
      }
      v143 = v154;
      [v131 setRecordBuildVersion:v142];

      swift_unownedRetainStrong();
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v144 = v141 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      id v145 = v131;
      sub_10001098C(v144, (uint64_t)v131, 0);
      swift_unknownObjectRelease();

      swift_unownedRetainStrong();
      if (v143) {
        [v143 updateTaskResultWithError:0];
      }
      uint64_t v146 = v155;
      (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v135, v122 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v155);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v146);
      swift_getObjectType();
      sub_100169BA4((uint64_t)v143);
      swift_release();
      swift_unknownObjectRelease();
      sub_100013198(v151, v150);
      sub_1000196A0((uint64_t)v152, (unint64_t)v160);

      sub_100190390((uint64_t)v167, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
      uint64_t v90 = v153;
    }
    return sub_100190390(v90, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
}

void sub_100184294(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v121 = a2;
  uint64_t v119 = sub_100009F04(&qword_100322CF0);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119, v7);
  uint64_t v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100329980);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v18, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v117 = sub_10018F930((uint64_t)v17);
  uint64_t v20 = v19;
  uint64_t v120 = v21;
  unint64_t v23 = v22;
  sub_100190390((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if (v20)
  {
    uint64_t v116 = v20;
    uint64_t v24 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
    swift_beginAccess();
    sub_100019730(v24, (uint64_t)&aBlock, (uint64_t *)&unk_1003274E0);
    if (v124)
    {
      uint64_t v113 = v4;
      v114 = a3;
      sub_100041E8C(&aBlock, (uint64_t)v128);
      uint64_t v25 = v129;
      uint64_t v26 = v130;
      sub_100008EF8(v128, v129);
      uint64_t v27 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 48);
      unint64_t v112 = v23;
      uint64_t v46 = v27(v120, v23, v25, v26);
      uint64_t v109 = v9;
      unint64_t v48 = v47;
      uint64_t v49 = type metadata accessor for CustodianRecoveryKeys();
      uint64_t v50 = swift_allocBox();
      uint64_t v52 = v51;
      unint64_t v111 = v48;
      sub_10020D418((uint64_t)v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v13, 1, v49) == 1)
      {
        uint64_t v53 = v46;
        sub_100006574((uint64_t)v13, &qword_100329980);
        swift_deallocBox();
        uint64_t v54 = v114;
        uint64_t v55 = v113;
        uint64_t v56 = v109;
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        sub_100007288(v57, (uint64_t)qword_10033E748);
        uint64_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v60 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v60 = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "Message did not contain needed keys", v60, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for AACustodianRecoveryError(0);
        uint64_t v127 = -9019;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v61 = (void *)aBlock;
        swift_unknownObjectRetain();
        id v62 = v61;
        sub_10018CACC(a1, v121, (uint64_t)v62, 5);
        swift_unknownObjectRelease();
        unint64_t v63 = v112;
        if (v54)
        {
          os_log_type_t v64 = (void *)_convertErrorToNSError(_:)();
          [v54 updateTaskResultWithError:v64];
        }
        uint64_t v65 = v55 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter;
        uint64_t v66 = v118;
        uint64_t v67 = v119;
        (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v56, v65, v119);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v67);
        swift_getObjectType();
        sub_100169BA4((uint64_t)v54);
        swift_unknownObjectRelease();

        sub_10018FE00(v117, v116, v120, v63);
        uint64_t v68 = v53;
      }
      else
      {
        uint64_t v118 = v50;
        uint64_t v119 = v46;
        sub_100190610((uint64_t)v13, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
        uint64_t v69 = *v52;
        unint64_t v70 = v52[1];
        v110 = v52;
        sub_100013140(v69, v70);
        Swift::String v71 = Data.base64EncodedString(options:)(0);
        sub_100013198(v69, v70);
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v72 = type metadata accessor for Logger();
        uint64_t v73 = sub_100007288(v72, (uint64_t)qword_10033E748);
        swift_bridgeObjectRetain();
        uint64_t v109 = (char *)v73;
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        BOOL v76 = os_log_type_enabled(v74, v75);
        uint64_t v108 = v49;
        if (v76)
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          uint64_t v107 = swift_slowAlloc();
          *(void *)&long long aBlock = v107;
          *(_DWORD *)uint64_t v77 = 136315138;
          v106 = v77 + 4;
          swift_bridgeObjectRetain();
          uint64_t v127 = sub_100135190(v71._countAndFlagsBits, (unint64_t)v71._object, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Spake Complete received with PRKC: %s", v77, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v78 = *v110;
        unint64_t v79 = v110[1];
        uint64_t v80 = v121;
        uint64_t v81 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v121 + 48);
        sub_100013140(*v110, v79);
        os_log_type_t v82 = (void (*)(long long *, void))v81(&aBlock, ObjectType, v80);
        id v84 = (uint64_t *)(v83 + *(int *)(v14 + 40));
        uint64_t v85 = *v84;
        unint64_t v86 = v84[1];
        *id v84 = v78;
        v84[1] = v79;
        sub_1000196A0(v85, v86);
        v82(&aBlock, 0);
        os_log_type_t v87 = (uint64_t *)((char *)v110 + *(int *)(v108 + 32));
        uint64_t v89 = *v87;
        uint64_t v88 = v87[1];
        swift_bridgeObjectRetain();
        uint64_t v90 = (void (*)(long long *, void))v81(&aBlock, ObjectType, v80);
        uint64_t v92 = (void *)(v91 + *(int *)(v14 + 64));
        *uint64_t v92 = v89;
        v92[1] = v88;
        swift_bridgeObjectRelease();
        v90(&aBlock, 0);
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v93, v94))
        {
          uint64_t v95 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Calling IdMS to verify transaction", v95, 2u);
          swift_slowDealloc();
        }

        sub_1001900B8(v18, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        id v96 = sub_10018EF4C((uint64_t)v17, 4);
        sub_100190390((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        unint64_t v97 = (void **)sub_100008EF8((void *)(v113 + 24), *(void *)(v113 + 48));
        uint64_t v98 = swift_allocObject();
        swift_weakInit();
        uint64_t v99 = (void *)swift_allocObject();
        v99[2] = v118;
        v99[3] = v98;
        uint64_t v100 = v121;
        v99[4] = a1;
        id v99[5] = v100;
        v101 = v114;
        v99[6] = v114;
        uint64_t v102 = *v97;
        uint64_t v103 = swift_allocObject();
        *(void *)(v103 + 16) = sub_100190374;
        *(void *)(v103 + 24) = v99;
        v125 = sub_100190388;
        uint64_t v126 = v103;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        v123 = sub_10017ECC4;
        uint64_t v124 = &unk_1002FE5D0;
        uint64_t v104 = _Block_copy(&aBlock);
        id v105 = v101;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_unknownObjectRetain();
        swift_release();
        [v102 fetchCustodianRecoveryTokenWithContext:v96 completion:v104];
        _Block_release(v104);
        sub_10018FE00(v117, v116, v120, v112);
        swift_release();
        swift_release();

        swift_release();
        uint64_t v68 = v119;
      }
      sub_100013198(v68, v111);
      sub_100008EA8((uint64_t)v128);
    }
    else
    {
      sub_100006574((uint64_t)&aBlock, (uint64_t *)&unk_1003274E0);
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E748);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing verifier", v40, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      v128[0] = -9014;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v41 = (void *)aBlock;
      swift_unknownObjectRetain();
      id v42 = v41;
      sub_10018CACC(a1, v121, (uint64_t)v42, 5);
      swift_unknownObjectRelease();
      if (a3)
      {
        BOOL v43 = (void *)_convertErrorToNSError(_:)();
        [a3 updateTaskResultWithError:v43];
      }
      uint64_t v44 = v118;
      uint64_t v45 = v119;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v9, v4 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v119);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
      swift_getObjectType();
      sub_100169BA4((uint64_t)a3);
      swift_unknownObjectRelease();

      sub_10018FE00(v117, v116, v120, v23);
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Parsing AAData failed or no keys were found for SPAKE Complete step...", v31, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    v128[0] = -9013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v32 = (void *)aBlock;
    swift_unknownObjectRetain();
    id v33 = v32;
    sub_10018CACC(a1, v121, (uint64_t)v33, 5);
    swift_unknownObjectRelease();
    if (a3)
    {
      uint64_t v34 = (void *)_convertErrorToNSError(_:)();
      [a3 updateTaskResultWithError:v34];
    }
    uint64_t v35 = v118;
    uint64_t v36 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v9, v4 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v119);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
    swift_getObjectType();
    sub_100169BA4((uint64_t)a3);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1001853F8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v49 = a8;
  uint64_t v13 = sub_100009F04(&qword_100322CF0);
  uint64_t v48 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  unint64_t v47 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecoveryKeys();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_projectBox();
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v46 = a2;
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 138412290;
      uint64_t v32 = v13;
      uint64_t v33 = a6;
      uint64_t v34 = _convertErrorToNSError(_:)();
      uint64_t v50 = v34;
      a2 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v45 = v34;
      a6 = v33;
      uint64_t v13 = v32;
      sub_10004A4E4(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed obtaining CRT with error: %@", v31, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10004A4E4(a1, a2, 1);
    }

    swift_getErrorValue();
    id v35 = sub_1000356E4(-9016, v51);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v37 = Strong;
      uint64_t v38 = (void *)(Strong + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
      *uint64_t v38 = 0;
      v38[1] = 0;
      swift_bridgeObjectRelease();
      os_log_type_t v39 = (void *)(v37 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
      *os_log_type_t v39 = 0;
      v39[1] = 0;
      swift_bridgeObjectRelease();
      sub_10001098C(a6 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v35, 1);
      swift_release();
    }
    swift_beginAccess();
    uint64_t v40 = swift_weakLoadStrong();
    if (v40)
    {
      uint64_t v41 = v40;
      if (v49)
      {
        swift_errorRetain();
        id v42 = (void *)_convertErrorToNSError(_:)();
        [v49 updateTaskResultWithError:v42];
      }
      else
      {
        swift_errorRetain();
      }
      uint64_t v44 = v47;
      uint64_t v43 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v41 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v13);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v13);
      swift_getObjectType();
      sub_100169BA4((uint64_t)v49);
      swift_unknownObjectRelease();
      swift_errorRelease();
      sub_10004A4E4(a1, a2, 1);
      swift_errorRelease();
      return swift_release();
    }
    else
    {
      swift_errorRelease();
      return sub_10004A4E4(a1, a2, 1);
    }
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v48 = a6;
    uint64_t v22 = qword_100320B88;
    swift_bridgeObjectRetain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully obtained CRT from IdMS, SPAKE flow verified", v26, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    *(void *)(v21 + 32) = a1;
    *(void *)(v21 + 40) = a2;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_beginAccess();
      sub_1001900B8(v21, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
      sub_1001859E4(v48, a7, (uint64_t)v19, v49);
      swift_release();
      return sub_100190390((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
    }
  }
  return result;
}

void sub_1001859E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v55 = a4;
  uint64_t v50 = a2;
  uint64_t v6 = sub_100009F04(&qword_100322CF0);
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v51 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for CustodianRecoveryKeys();
  uint64_t v48 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v48 + 64);
  __chkstk_darwin(v13 - 8, v15);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100329970);
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a3;
  sub_1001900B8(a3, (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
  uint64_t v25 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v25, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  sub_10015FAA8((uint64_t *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0)), v12, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    uint64_t v27 = v54;
    uint64_t v26 = v55;
    sub_100006574((uint64_t)v19, (uint64_t *)&unk_100329970);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to generate recovery session record", v31, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v56 = -9013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v32 = (uint64_t)v57;
    uint64_t v33 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
    id v34 = v57;
    sub_10001098C(v33, v32, 1);

    uint64_t v35 = (uint64_t)v26;
    id v36 = v34;
    if (v26)
    {
      uint64_t v37 = (void *)_convertErrorToNSError(_:)();
      [v26 updateTaskResultWithError:v37];
    }
    uint64_t v44 = v51;
    uint64_t v45 = v52;
    uint64_t v46 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v27 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v53);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
    swift_getObjectType();
    sub_100169BA4(v35);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100190610((uint64_t)v19, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    uint64_t v38 = sub_100008EF8((void *)(v54 + 104), *(void *)(v54 + 128));
    uint64_t v39 = swift_allocObject();
    swift_weakInit();
    sub_1001900B8(v49, (uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
    unint64_t v40 = (*(unsigned __int8 *)(v48 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = v39;
    v41[3] = a1;
    id v42 = v55;
    v41[4] = v50;
    v41[5] = v42;
    sub_100190610((uint64_t)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v41 + v40, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
    sub_100008EF8((void *)(*v38 + 16), *(void *)(*v38 + 40));
    id v43 = v42;
    swift_unknownObjectRetain();
    sub_100060658((uint64_t)v24, 0, 2, (uint64_t)sub_1001902AC, (uint64_t)v41);
    swift_release();
    sub_100190390((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_100186028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v62 = a5;
  uint64_t v63 = a3;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100322CF0);
  uint64_t v61 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v60 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v22, &qword_100322C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v28 = v16;
      uint64_t v29 = _convertErrorToNSError(_:)();
      uint64_t v65 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v29;
      uint64_t v16 = v28;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to store generated recovery session record with error: %@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_getErrorValue();
    id v37 = sub_1000356E4(-9029, v64);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v38 = v63 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      swift_errorRetain();
      sub_10001098C(v38, (uint64_t)v37, 1);
      swift_errorRelease();
      swift_unknownObjectRelease();
    }
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v40 = Strong;
      id v41 = v62;
      if (v62)
      {
        swift_errorRetain();
        id v42 = (void *)_convertErrorToNSError(_:)();
        [v41 updateTaskResultWithError:v42];
      }
      else
      {
        swift_errorRetain();
      }
      id v57 = v60;
      uint64_t v58 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v40 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v16);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v16);
      swift_getObjectType();
      sub_100169BA4((uint64_t)v41);
      swift_unknownObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      return swift_release();
    }
    else
    {
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v59 = v16;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E748);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Session stored successfully, terminating session", v33, 2u);
      swift_slowDealloc();
    }

    id v34 = [objc_allocWithZone((Class)AACustodianRecoveryRequestContext) init];
    uint64_t v35 = v63 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess();
    if (*(void *)(v35 + 8))
    {
      swift_bridgeObjectRetain();
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v36 = 0;
    }
    [v34 setRecoverySessionID:v36, v59];

    sub_1001900B8(v35, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    sub_100019730((uint64_t)&v15[*(int *)(v12 + 28)], (uint64_t)v11, (uint64_t *)&unk_100321CE0);
    sub_100190390((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    uint64_t v43 = type metadata accessor for UUID();
    uint64_t v44 = *(void *)(v43 - 8);
    Class isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v11, 1, v43) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v43);
    }
    [v34 setCustodianUUID:isa];

    if (*(void *)(a6 + 40)) {
      NSString v46 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v46 = 0;
    }
    [v34 setCustodianRecoveryToken:v46];

    if (*(void *)(a6 + *(int *)(type metadata accessor for CustodianRecoveryKeys() + 32) + 8)) {
      NSString v48 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v48 = 0;
    }
    [v34 setRecordBuildVersion:v48];

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v49 = v63 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      id v50 = v34;
      sub_10001098C(v49, (uint64_t)v34, 0);
      swift_unknownObjectRelease();
    }
    swift_beginAccess();
    uint64_t v51 = swift_weakLoadStrong();
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = (uint64_t)v62;
      if (v62) {
        [v62 updateTaskResultWithError:0];
      }
      uint64_t v54 = v60;
      uint64_t v55 = v61;
      uint64_t v56 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v52 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v59);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
      swift_getObjectType();
      sub_100169BA4(v53);
      swift_release();

      swift_unknownObjectRelease();
    }
    else
    {
    }
    return sub_100006574((uint64_t)v22, &qword_100322C00);
  }
}

uint64_t sub_100186908(uint64_t a1, uint64_t a2)
{
  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  uint64_t v4 = sub_100009F04(&qword_100322CF0);
  v3[27] = v4;
  v3[28] = *(void *)(v4 - 8);
  v3[29] = swift_task_alloc();
  type metadata accessor for CustodianRecoveryInfoRecord();
  v3[30] = swift_task_alloc();
  v3[31] = type metadata accessor for CustodianshipInfoRecord();
  v3[32] = swift_task_alloc();
  v3[33] = type metadata accessor for FetchRecoveryRecordsRequest(0);
  v3[34] = swift_task_alloc();
  sub_100009F04((uint64_t *)&unk_100321CE0);
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = type metadata accessor for CustodianRecoveryData();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[40] = v5;
  v3[41] = *(void *)(v5 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  return _swift_task_switch(sub_100186B48, 0, 0);
}

uint64_t sub_100186B48()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 192) + *(int *)(*(void *)(v0 + 296) + 52));
  if (v1[1])
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E748);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error code missing in spake error message", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v6 = *(void **)(v0 + 200);

    sub_10017FF78(6, v6, -9012, 0, 0);
    goto LABEL_46;
  }
  uint64_t v7 = *v1;
  type metadata accessor for AACustodianRecoveryError(0);
  *(void *)(v0 + 112) = v7;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v8 = *(void **)(v0 + 152);
  *(void *)(v0 + 352) = v8;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = sub_100007288(v9, (uint64_t)qword_10033E748);
  uint64_t v10 = v8;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v125 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 138412290;
    uint64_t v14 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 184) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v125 = v14;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Got spake error, with error: %@", v13, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v11 = v10;
  }
  uint64_t v15 = *(void *)(v0 + 192);

  uint64_t v16 = sub_10018D7C8(v15);
  *(void *)(v0 + 368) = v16;
  if (!v16)
  {
    uint64_t v30 = sub_10018F930(*(void *)(v0 + 192));
    if (v31)
    {
      uint64_t v34 = v30;
      uint64_t v35 = v31;
      unint64_t v36 = v33;
      uint64_t v132 = v32;
      uint64_t v38 = *(void *)(v0 + 320);
      uint64_t v37 = *(void *)(v0 + 328);
      uint64_t v39 = *(void *)(v0 + 280);
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v39, 1, v38) == 1)
      {
        sub_100006574(*(void *)(v0 + 280), (uint64_t *)&unk_100321CE0);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          id v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Invalid spake ID", v42, 2u);
          swift_slowDealloc();
        }
        uint64_t v43 = *(void **)(v0 + 200);

        sub_10017FF78(6, v43, -9022, 0, 0);
        sub_10018FE00(v34, v35, v132, v36);
      }
      else
      {
        unint64_t v129 = v36;
        uint64_t v130 = v10;
        uint64_t v94 = *(void *)(v0 + 336);
        uint64_t v95 = *(void *)(v0 + 208);
        (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 328) + 32))(v94, *(void *)(v0 + 280), *(void *)(v0 + 320));
        uint64_t v96 = *(void *)(v95 + 184);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v96 + 32));
        swift_beginAccess();
        uint64_t v97 = *(void *)(v96 + 16);
        uint64_t v98 = swift_task_alloc();
        *(void *)(v98 + 16) = v94;
        swift_bridgeObjectRetain();
        uint64_t v99 = sub_10017E7F0((uint64_t (*)(uint64_t *))sub_100190098, v98, v97);
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 32));
        if (v99)
        {
          uint64_t v101 = *(void *)(v0 + 200);
          uint64_t v100 = *(void *)(v0 + 208);
          uint64_t v102 = (void *)(v100 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
          *uint64_t v102 = 0;
          v102[1] = 0;
          uint64_t v103 = v130;
          swift_bridgeObjectRelease();
          uint64_t v104 = (void *)(v100 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
          *uint64_t v104 = 0;
          v104[1] = 0;
          swift_bridgeObjectRelease();
          sub_10001098C(v99 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v103, 1);

          if (v101) {
            [*(id *)(v0 + 200) updateTaskResultWithError:0];
          }
          uint64_t v105 = *(void *)(v0 + 328);
          uint64_t v131 = *(void *)(v0 + 336);
          uint64_t v128 = *(void *)(v0 + 320);
          uint64_t v107 = *(void *)(v0 + 224);
          uint64_t v106 = *(void *)(v0 + 232);
          uint64_t v108 = *(void *)(v0 + 216);
          uint64_t v109 = *(void *)(v0 + 200);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v106, *(void *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v108);
          Dependency.wrappedValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v106, v108);
          swift_getObjectType();
          sub_100169BA4(v109);
          swift_release();
          swift_unknownObjectRelease();
          sub_10018FE00(v34, v35, v132, v129);

          (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v131, v128);
        }
        else
        {
          uint64_t v116 = Logger.logObject.getter();
          uint64_t v117 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v116, (os_log_type_t)v117))
          {
            uint64_t v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v118 = 0;
            _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v117, "No active sessions found with spakeID or UUID. nothing more to do here...", v118, 2u);
            swift_slowDealloc();
          }
          uint64_t v120 = *(void *)(v0 + 328);
          uint64_t v119 = *(void *)(v0 + 336);
          uint64_t v121 = *(void *)(v0 + 320);
          uint64_t v122 = *(void **)(v0 + 200);

          sub_10017FF78(6, v122, -9009, 0, 0);
          sub_10018FE00(v34, v35, v132, v36);

          (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
        }
      }
    }
    else
    {
      uint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Malfarmed recovery data", v92, 2u);
        swift_slowDealloc();
      }
      uint64_t v93 = *(void **)(v0 + 200);

      sub_10017FF78(6, v93, -9013, 0, 0);
    }
    goto LABEL_46;
  }
  uint64_t v17 = v16;
  uint64_t v18 = v10;
  uint64_t v19 = (void *)_convertErrorToNSError(_:)();

  unsigned int v20 = [v19 aa_isAACustodianRecoveryErrorWithCode:-9002];
  uint64_t v21 = v18;
  uint64_t v22 = v21;
  if (!v20)
  {
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      NSString v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = v17;
      uint64_t v47 = (void *)swift_slowAlloc();
      *(_DWORD *)NSString v46 = 138412290;
      uint64_t v48 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 104) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v47 = v48;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Asked to terminate recovery session with error: %@", v46, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      uint64_t v17 = v127;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v44 = v22;
    }
    uint64_t v69 = *(void *)(v0 + 200);
    uint64_t v68 = *(void *)(v0 + 208);

    unint64_t v70 = (void *)(v68 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
    *unint64_t v70 = 0;
    v70[1] = 0;
    Swift::String v71 = v22;
    swift_bridgeObjectRelease();
    uint64_t v72 = (void *)(v68 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
    *uint64_t v72 = 0;
    v72[1] = 0;
    swift_bridgeObjectRelease();
    sub_10001098C(v17 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v71, 1);

    if (v69) {
      [*(id *)(v0 + 200) updateTaskResultWithError:0];
    }
    uint64_t v74 = *(void *)(v0 + 224);
    uint64_t v73 = *(void *)(v0 + 232);
    uint64_t v75 = *(void *)(v0 + 216);
    uint64_t v76 = *(void *)(v0 + 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v73, *(void *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v75);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    swift_getObjectType();
    sub_100169BA4(v76);

    swift_unknownObjectRelease();
    goto LABEL_45;
  }
  uint64_t v23 = v21;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  uint64_t v124 = v23;
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v126 = v17;
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412290;
    uint64_t v28 = v23;
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 176) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v29;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error can be retried, idetifying Custodian or owner device: %@", v26, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    uint64_t v17 = v126;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v24 = v23;
  }
  uint64_t v49 = *(void *)(v0 + 320);
  uint64_t v50 = *(void *)(v0 + 328);
  uint64_t v51 = *(void *)(v0 + 312);
  uint64_t v52 = *(void *)(v0 + 288);
  uint64_t v53 = *(void *)(v0 + 296);

  uint64_t v54 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  *(void *)(v0 + 376) = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  uint64_t v55 = v17 + v54;
  swift_beginAccess();
  sub_1001900B8(v55, v51, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  sub_100019730(v51 + *(int *)(v53 + 28), v52, (uint64_t *)&unk_100321CE0);
  sub_100190390(v51, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v52, 1, v49) == 1)
  {
    sub_100006574(*(void *)(v0 + 288), (uint64_t *)&unk_100321CE0);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Spake Error: Session does not contain custodianship UUID, nothing to do here ...", v58, 2u);
      swift_slowDealloc();
    }
    uint64_t v59 = *(void *)(v0 + 200);
    uint64_t v60 = *(void *)(v0 + 208);

    *(void *)(v0 + 128) = -9011;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v61 = *(void **)(v0 + 120);
    id v62 = (void *)(v60 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
    *id v62 = 0;
    v62[1] = 0;
    id v63 = v61;
    swift_bridgeObjectRelease();
    uint64_t v64 = (void *)(v60 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
    *uint64_t v64 = 0;
    v64[1] = 0;
    swift_bridgeObjectRelease();
    sub_10001098C(v17 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v63, 1);

    if (v59)
    {
      uint64_t v65 = *(void **)(v0 + 200);
      id v66 = v63;
      uint64_t v67 = (void *)_convertErrorToNSError(_:)();
      [v65 updateTaskResultWithError:v67];
    }
    else
    {
      id v110 = v63;
    }
    uint64_t v112 = *(void *)(v0 + 224);
    uint64_t v111 = *(void *)(v0 + 232);
    uint64_t v113 = *(void *)(v0 + 216);
    uint64_t v114 = *(void *)(v0 + 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v111, *(void *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v113);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
    swift_getObjectType();
    sub_100169BA4(v114);

    swift_unknownObjectRelease();
LABEL_45:
    swift_unknownObjectRelease();
LABEL_46:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v115 = *(uint64_t (**)(void))(v0 + 8);
    return v115();
  }
  uint64_t v77 = *(void *)(v0 + 344);
  uint64_t v78 = *(void *)(v0 + 320);
  uint64_t v79 = *(void *)(v0 + 328);
  uint64_t v81 = *(int **)(v0 + 264);
  uint64_t v80 = *(void *)(v0 + 272);
  uint64_t v82 = *(void *)(v0 + 208);
  (*(void (**)(uint64_t, void, uint64_t))(v79 + 32))(v77, *(void *)(v0 + 288), v78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v80, v77, v78);
  *(unsigned char *)(v80 + v81[5]) = 0;
  *(unsigned char *)(v80 + v81[6]) = 0;
  uint64_t v83 = (void *)(v80 + v81[7]);
  *uint64_t v83 = 0;
  v83[1] = 0;
  id v84 = (void *)(v80 + v81[8]);
  *id v84 = 0;
  v84[1] = 0;
  uint64_t v85 = *sub_100008EF8((void *)(v82 + 64), *(void *)(v82 + 88));
  uint64_t v86 = swift_task_alloc();
  *(void *)(v0 + 384) = v86;
  *(void *)(v86 + 16) = v85;
  *(void *)(v86 + 24) = v80;
  os_log_type_t v87 = (void *)swift_task_alloc();
  *(void *)(v0 + 392) = v87;
  *os_log_type_t v87 = v0;
  v87[1] = sub_100187AE0;
  uint64_t v89 = *(void *)(v0 + 248);
  uint64_t v88 = *(void *)(v0 + 256);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v88, 0, 0, 0xD00000000000001DLL, 0x800000010029EB40, sub_1001929FC, v86, v89);
}

uint64_t sub_100187AE0()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100187DBC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100187BFC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100187BFC()
{
  sub_100008EF8((void *)(v0[26] + 64), *(void *)(v0[26] + 88));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[51] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100187CA8;
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[30];
  return sub_10023A26C(v3, v2);
}

uint64_t sub_100187CA8()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100188368;
  }
  else {
    uint64_t v2 = sub_1001880C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100187DBC()
{
  swift_task_dealloc();
  sub_100190390(v0[34], type metadata accessor for FetchRecoveryRecordsRequest);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Owner device, returning error to the UI to let the user retry", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[46];
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];

  swift_getErrorValue();
  id v7 = sub_1000356E4(-9017, v0[3]);
  uint64_t v8 = (void *)(v5 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  *uint64_t v8 = 0;
  v8[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(v5 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  *uint64_t v9 = 0;
  v9[1] = 0;
  swift_bridgeObjectRelease();
  sub_10001098C(v4 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v7, 1);
  if (v6)
  {
    uint64_t v10 = (void *)v0[25];
    swift_errorRetain();
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    [v10 updateTaskResultWithError:v11];
  }
  else
  {
    swift_errorRetain();
  }
  os_log_type_t v12 = (void *)v0[44];
  uint64_t v13 = v0[41];
  uint64_t v20 = v0[40];
  uint64_t v21 = v0[43];
  uint64_t v14 = v0[28];
  uint64_t v15 = v0[29];
  uint64_t v16 = v0[27];
  uint64_t v17 = v0[25];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v0[26] + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  swift_getObjectType();
  sub_100169BA4(v17);
  swift_unknownObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v21, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1001880C0()
{
  uint64_t v1 = *(void *)(v0 + 368);
  os_log_type_t v2 = *(void **)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 200);
  sub_1001900B8(v1 + *(void *)(v0 + 376), *(void *)(v0 + 304), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v4 = v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
  id v5 = v2;
  sub_10001098C(v4, (uint64_t)v2, 1);

  if (v3) {
    [*(id *)(v0 + 200) updateTaskResultWithError:0];
  }
  uint64_t v16 = *(void **)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v15 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v11 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, *(void *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  swift_getObjectType();
  sub_100169BA4(v12);
  swift_unknownObjectRelease();
  sub_100188680(v7, v15, v8);

  swift_unknownObjectRelease();
  sub_100190390(v7, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  sub_100190390(v8, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100190390(v15, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100190390(v17, type metadata accessor for FetchRecoveryRecordsRequest);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100188368()
{
  sub_100190390(v0[32], (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100190390(v0[34], type metadata accessor for FetchRecoveryRecordsRequest);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Owner device, returning error to the UI to let the user retry", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[46];
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];

  swift_getErrorValue();
  id v7 = sub_1000356E4(-9017, v0[3]);
  uint64_t v8 = (void *)(v5 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  *uint64_t v8 = 0;
  v8[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(v5 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  *uint64_t v9 = 0;
  v9[1] = 0;
  swift_bridgeObjectRelease();
  sub_10001098C(v4 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, (uint64_t)v7, 1);
  if (v6)
  {
    uint64_t v10 = (void *)v0[25];
    swift_errorRetain();
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    [v10 updateTaskResultWithError:v11];
  }
  else
  {
    swift_errorRetain();
  }
  uint64_t v12 = (void *)v0[44];
  uint64_t v13 = v0[41];
  uint64_t v20 = v0[40];
  uint64_t v21 = v0[43];
  uint64_t v14 = v0[28];
  uint64_t v15 = v0[29];
  uint64_t v16 = v0[27];
  uint64_t v17 = v0[25];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v0[26] + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  swift_getObjectType();
  sub_100169BA4(v17);
  swift_unknownObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v21, v20);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

void sub_100188680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v6 = sub_100009F04(&qword_100322CF0);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100329950);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004FD70();
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID + 8);
  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = sub_100225978(v13, v15, v16, v17, v18, v19);
  if (*(void *)(a1 + 40))
  {
    uint64_t v21 = (uint64_t *)(v42 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 24));
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    sub_1001900B8(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    uint64_t v24 = type metadata accessor for CustodianRecoveryData();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v12, 0, 1, v24);
    uint64_t v37 = sub_10018B63C(v43, v22, v23, (uint64_t)v12);
    sub_100006574((uint64_t)v12, (uint64_t *)&unk_100329950);
    uint64_t v38 = swift_allocObject();
    swift_weakInit();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v20;
    *(void *)(v39 + 24) = v38;
    id v40 = v20;
    swift_retain();
    sub_10018DF08((uint64_t)v37, v41, 0, 0, 0, 0, 0, (uint64_t)sub_100190090, v39);

    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E748);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v44;
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Asked to retry but old session had no code stored... nothing to do here", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v47 = -9010;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v31 = v48;
    if (v20)
    {
      id v32 = v20;
      id v33 = v31;
      uint64_t v34 = (void *)_convertErrorToNSError(_:)();

      [v32 updateTaskResultWithError:v34];
    }
    uint64_t v36 = v45;
    uint64_t v35 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v29, v4 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v46);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v35);
    swift_getObjectType();
    sub_100169BA4((uint64_t)v20);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100188D68(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04(&qword_100322CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a3 + 16;
  if (a2)
  {
    if (a1) {
      uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v12 = 0;
    }
    [a2 updateTaskResultWithError:v12];
  }
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v25 = a2;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v24 = v11;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      uint64_t v18 = v6;
      uint64_t v19 = v7;
      uint64_t v20 = _convertErrorToNSError(_:)();
      uint64_t v26 = v20;
      a2 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v20;
      uint64_t v7 = v19;
      uint64_t v6 = v18;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Custodian transaction failed to be sent to IdMS with error: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, result + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v6);
    Dependency.wrappedValue.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_getObjectType();
    sub_100169BA4((uint64_t)a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100189098(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  sub_100009F04((uint64_t *)&unk_100329950);
  v2[24] = swift_task_alloc();
  v2[25] = type metadata accessor for CustodianRecoveryInfoRecord();
  v2[26] = swift_task_alloc();
  v2[27] = type metadata accessor for CustodianshipInfoRecord();
  v2[28] = swift_task_alloc();
  v2[29] = type metadata accessor for FetchRecoveryRecordsRequest(0);
  v2[30] = swift_task_alloc();
  sub_100009F04((uint64_t *)&unk_100321CE0);
  v2[31] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[32] = v3;
  v2[33] = *(void *)(v3 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v4 = sub_100009F04(&qword_100325870);
  v2[38] = v4;
  v2[39] = *(void *)(v4 - 8);
  v2[40] = swift_task_alloc();
  return _swift_task_switch(sub_1001892D0, 0, 0);
}

uint64_t sub_1001892D0()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, *(void *)(v0 + 184) + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__accountStore, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v4 = [*(id *)(*sub_100008EF8((void *)(v0 + 16), *(void *)(v0 + 40)) + 16) aa_primaryAppleAccount];
  if (v4 && (uint64_t v5 = v4, v6 = objc_msgSend(v4, "aa_altDSID"), v5, v6))
  {
    uint64_t v7 = *(void **)(v0 + 176);

    sub_100008EA8(v0 + 16);
    id v8 = [v7 custodianUUID];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v0 + 288);
      uint64_t v11 = *(void *)(v0 + 256);
      uint64_t v12 = *(void *)(v0 + 264);
      uint64_t v13 = *(void *)(v0 + 248);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
      v14(v13, v10, v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v13, 0, 1, v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) != 1)
      {
        os_log_type_t v15 = *(void **)(v0 + 176);
        v14(*(void *)(v0 + 296), *(void *)(v0 + 248), *(void *)(v0 + 256));
        id v16 = [v15 telemetryFlowID];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v20 = 0;
        }
        id v33 = *(void **)(v0 + 176);
        uint64_t v34 = (uint64_t *)(*(void *)(v0 + 184)
                        + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
        uint64_t *v34 = v18;
        v34[1] = v20;
        swift_bridgeObjectRelease();
        id v35 = [v33 altDSID];
        if (v35)
        {
          uint64_t v36 = v35;
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v39 = 0;
        }
        id v40 = (uint64_t *)(*(void *)(v0 + 184)
                        + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
        *id v40 = v37;
        v40[1] = v39;
        swift_bridgeObjectRelease();
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        *(void *)(v0 + 328) = v41;
        *(void *)(v0 + 336) = sub_100007288(v41, (uint64_t)qword_10033E748);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "Verifying custodianship to generate Code.", v44, 2u);
          swift_slowDealloc();
        }
        uint64_t v45 = *(void *)(v0 + 296);
        uint64_t v46 = *(void *)(v0 + 280);
        uint64_t v47 = *(void *)(v0 + 256);
        uint64_t v48 = *(void *)(v0 + 264);
        uint64_t v49 = *(void **)(v0 + 176);

        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
        *(void *)(v0 + 344) = v50;
        *(void *)(v0 + 352) = (v48 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        v50(v46, v45, v47);
        id v51 = [v49 altDSID];
        if (v51)
        {
          uint64_t v52 = v51;
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;
        }
        else
        {
          uint64_t v53 = 0;
          uint64_t v55 = 0;
        }
        id v56 = [*(id *)(v0 + 176) telemetryFlowID];
        if (v56)
        {
          os_log_type_t v57 = v56;
          uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v60 = v59;
        }
        else
        {
          uint64_t v58 = 0;
          uint64_t v60 = 0;
        }
        id v62 = *(int **)(v0 + 232);
        uint64_t v61 = *(void *)(v0 + 240);
        uint64_t v63 = *(void *)(v0 + 184);
        v14(v61, *(void *)(v0 + 280), *(void *)(v0 + 256));
        *(unsigned char *)(v61 + v62[5]) = 1;
        *(unsigned char *)(v61 + v62[6]) = 1;
        uint64_t v64 = (uint64_t *)(v61 + v62[7]);
        *uint64_t v64 = v53;
        v64[1] = v55;
        uint64_t v65 = (uint64_t *)(v61 + v62[8]);
        *uint64_t v65 = v58;
        v65[1] = v60;
        uint64_t v66 = *sub_100008EF8((void *)(v63 + 64), *(void *)(v63 + 88));
        uint64_t v67 = swift_task_alloc();
        *(void *)(v0 + 360) = v67;
        *(void *)(v67 + 16) = v66;
        *(void *)(v67 + 24) = v61;
        uint64_t v68 = (void *)swift_task_alloc();
        *(void *)(v0 + 368) = v68;
        void *v68 = v0;
        v68[1] = sub_100189AE8;
        uint64_t v70 = *(void *)(v0 + 216);
        uint64_t v69 = *(void *)(v0 + 224);
        return withCheckedThrowingContinuation<A>(isolation:function:_:)(v69, 0, 0, 0xD00000000000001DLL, 0x800000010029EB40, sub_10018FEFC, v67, v70);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 264) + 56))(*(void *)(v0 + 248), 1, 1, *(void *)(v0 + 256));
    }
    sub_100006574(*(void *)(v0 + 248), (uint64_t *)&unk_100321CE0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    BOOL v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Context missing custodian UUID, cannot generate code for empty UUID", v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    *(void *)(v0 + 120) = -7054;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v25 = &qword_100322910;
    uint64_t v26 = type metadata accessor for AACustodianError;
  }
  else
  {
    sub_100008EA8(v0 + 16);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E790);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Account is nil. Not generating custodian recovery code", v24, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    *(void *)(v0 + 136) = -4410;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v25 = &qword_100321140;
    uint64_t v26 = type metadata accessor for AAError;
  }
  sub_10018FF3C((unint64_t *)v25, v26);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100189AE8()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100189DC4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100189C04;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100189C04()
{
  sub_100008EF8((void *)(v0[23] + 64), *(void *)(v0[23] + 88));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[48] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100189CB0;
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[26];
  return sub_10023A26C(v3, v2);
}

uint64_t sub_100189CB0()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10018AC58;
  }
  else {
    uint64_t v2 = sub_10018A0D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100189DC4()
{
  uint64_t v1 = v0[30];
  swift_task_dealloc();
  sub_100190390(v1, type metadata accessor for FetchRecoveryRecordsRequest);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[16] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generate recovery code failed: %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  id v7 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  if (qword_100320B70 != -1) {
    swift_once();
  }
  sub_100007288(v0[41], (uint64_t)qword_10033E700);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Analytics event found nil", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[37];
  uint64_t v13 = v0[32];
  uint64_t v12 = v0[33];

  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10018A0D4()
{
  uint64_t v101 = v0;
  (*(void (**)(void, void, void))(v0 + 344))(*(void *)(v0 + 272), *(void *)(v0 + 296), *(void *)(v0 + 256));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v3 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v100 = v7;
    sub_10018FF3C((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 168) = sub_100135190(v8, v9, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v10(v3, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Custodianship %s verified. Generating session with code...", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 264) + 8);
    v10(*(void *)(v0 + 272), *(void *)(v0 + 256));
  }

  *(void *)(v0 + 400) = v10;
  uint64_t v11 = *(void **)(v0 + 176);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  id v15 = [v11 altDSID];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v18;
    uint64_t v98 = v17;
  }
  else
  {
    uint64_t v96 = 0;
    uint64_t v98 = 0;
  }
  id v19 = [*(id *)(v0 + 176) telemetryFlowID:v96];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v12;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v21 = v12;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
  }
  uint64_t v99 = *(void *)(v0 + 392);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v26 = *(void *)(v0 + 200);
  uint64_t v27 = *(void *)(v0 + 208);
  uint64_t v28 = *(void *)(v0 + 192);
  sub_10004FD70();
  id v29 = sub_100225978(v21, v14, v98, v97, v22, v24);
  *(void *)(v0 + 408) = v29;
  uint64_t v30 = (uint64_t *)(v27 + *(int *)(v26 + 24));
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  uint64_t v33 = type metadata accessor for CustodianRecoveryData();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v28, 1, 1, v33);
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_10018B63C(v25, v31, v32, v28);
  *(void *)(v0 + 416) = v34;
  if (v99)
  {
    uint64_t v36 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v38 = *(void *)(v0 + 208);
    uint64_t v39 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease();
    sub_100006574(v39, (uint64_t *)&unk_100329950);
    sub_100190390(v38, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100190390(v37, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v40 = v36;
    goto LABEL_12;
  }
  uint64_t v54 = v34;
  uint64_t v55 = v35;
  id v56 = *(void **)(v0 + 176);
  sub_100006574(*(void *)(v0 + 192), (uint64_t *)&unk_100329950);
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  unsigned __int8 v58 = [v56 CLIMode];
  uint64_t v59 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v0 + 56, ObjectType, v55);
  *(unsigned char *)(v60 + *(int *)(v33 + 56)) = v58;
  v59(v0 + 56, 0);
  uint64_t v61 = &v54[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData];
  swift_beginAccess();
  *(void *)(v0 + 424) = *((void *)v61 + 4);
  uint64_t v62 = *((void *)v61 + 5);
  *(void *)(v0 + 432) = v62;
  if (!v62)
  {
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "failed to generate code, nothing to do here", v73, 2u);
      swift_slowDealloc();
    }
    uint64_t v74 = *(void *)(v0 + 240);
    uint64_t v75 = *(void *)(v0 + 224);
    uint64_t v76 = *(void *)(v0 + 208);

    type metadata accessor for AACustodianError(0);
    *(void *)(v0 + 160) = -7030;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_100190390(v76, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100190390(v75, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v40 = v74;
LABEL_12:
    sub_100190390(v40, type metadata accessor for FetchRecoveryRecordsRequest);
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v43 = 138412290;
      id v45 = v29;
      uint64_t v46 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 128) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v44 = v46;
      id v29 = v45;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Generate recovery code failed: %@", v43, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v45) {
        goto LABEL_17;
      }
    }
    else
    {
      swift_errorRelease();

      if (!v29)
      {
LABEL_17:
        id v49 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
        uint64_t v50 = v49;
        if (v29)
        {
          uint64_t v51 = *(void *)(v0 + 296);
          uint64_t v52 = *(void *)(v0 + 256);
          uint64_t v53 = *(void *)(v0 + 264);
          [v49 sendEvent:v29];

          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v51, v52);
        }
        else
        {
          if (qword_100320B70 != -1) {
            swift_once();
          }
          sub_100007288(*(void *)(v0 + 328), (uint64_t)qword_10033E700);
          uint64_t v63 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v65 = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, v64, "Analytics event found nil", v65, 2u);
            swift_slowDealloc();
          }
          uint64_t v66 = *(void *)(v0 + 296);
          uint64_t v68 = *(void *)(v0 + 256);
          uint64_t v67 = *(void *)(v0 + 264);

          swift_willThrow();
          (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
        }
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
        return v69();
      }
    }
    id v47 = v29;
    uint64_t v48 = (void *)_convertErrorToNSError(_:)();
    [v47 updateTaskResultWithError:v48];

    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  if (v29) {
    [v29 updateTaskResultWithError:0];
  }
  uint64_t v77 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  uint64_t v78 = v77;
  if (v29)
  {
    [v77 sendEvent:v29];
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    sub_100007288(*(void *)(v0 + 328), (uint64_t)qword_10033E700);
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Analytics event found nil", v81, 2u);
      swift_slowDealloc();
    }

    uint64_t v78 = v79;
  }
  uint64_t v82 = *(void **)(v0 + 176);

  id v83 = [v82 altDSID];
  if (v83)
  {
    id v84 = v83;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v87 = v86;
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v87 = 0;
  }
  *(void *)(v0 + 440) = v87;
  id v88 = [*(id *)(v0 + 176) telemetryFlowID];
  if (v88)
  {
    uint64_t v89 = v88;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v92 = v91;
  }
  else
  {
    uint64_t v90 = 0;
    uint64_t v92 = 0;
  }
  *(void *)(v0 + 448) = v92;
  uint64_t v93 = *(void *)(v0 + 184);
  uint64_t v94 = swift_task_alloc();
  *(void *)(v0 + 456) = v94;
  *(void *)(v94 + 16) = v93;
  *(void *)(v94 + 24) = v54;
  *(void *)(v94 + 32) = v55;
  *(unsigned char *)(v94 + 40) = 0;
  *(void *)(v94 + 48) = v85;
  *(void *)(v94 + 56) = v87;
  *(void *)(v94 + 64) = v90;
  *(void *)(v94 + 72) = v92;
  uint64_t v95 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v95;
  *uint64_t v95 = v0;
  v95[1] = sub_10018AF7C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10018AC58()
{
  uint64_t v1 = v0[30];
  sub_100190390(v0[28], (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100190390(v1, type metadata accessor for FetchRecoveryRecordsRequest);
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[16] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generate recovery code failed: %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  id v7 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  if (qword_100320B70 != -1) {
    swift_once();
  }
  sub_100007288(v0[41], (uint64_t)qword_10033E700);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Analytics event found nil", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[37];
  uint64_t v13 = v0[32];
  uint64_t v12 = v0[33];

  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10018AF7C()
{
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v2 = sub_10018B230;
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v2 = sub_10018B098;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10018B098()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[50];
  uint64_t v11 = (void *)v0[51];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[26];
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100190390(v6, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100190390(v5, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100190390(v4, type metadata accessor for FetchRecoveryRecordsRequest);
  v1(v2, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v8 = v0[53];
  uint64_t v9 = v0[54];
  return v7(v8, v9);
}

uint64_t sub_10018B230()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[26];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_unknownObjectRelease();
  sub_100190390(v3, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100190390(v2, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  sub_100190390(v1, type metadata accessor for FetchRecoveryRecordsRequest);
  uint64_t v4 = (void *)v0[51];
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v5, v6))
  {
    swift_errorRelease();

    if (!v4) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v7 = (uint8_t *)swift_slowAlloc();
  uint64_t v8 = (void *)swift_slowAlloc();
  *(_DWORD *)id v7 = 138412290;
  uint64_t v9 = _convertErrorToNSError(_:)();
  v0[16] = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v8 = v9;
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "Generate recovery code failed: %@", v7, 0xCu);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v4)
  {
LABEL_5:
    id v10 = v4;
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    [v10 updateTaskResultWithError:v11];
  }
LABEL_6:
  id v12 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  uint64_t v13 = v12;
  if (v4)
  {
    uint64_t v14 = v0[37];
    uint64_t v16 = v0[32];
    uint64_t v15 = v0[33];
    [v12 sendEvent:v4];

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    sub_100007288(v0[41], (uint64_t)qword_10033E700);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Analytics event found nil", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = v0[37];
    uint64_t v22 = v0[32];
    uint64_t v21 = v0[33];

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

char *sub_10018B63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t countAndFlagsBits = a4;
  uint64_t v116 = a2;
  uint64_t v117 = a3;
  uint64_t v120 = a1;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100329950);
  __chkstk_darwin(v4 - 8, v5);
  id v7 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for CustodianRecoveryData();
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v126 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  unint64_t v125 = (unint64_t)&v109 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (_OWORD *)((char *)&v109 - v23);
  v24[1] = 0u;
  void v24[2] = 0u;
  *uint64_t v24 = 0u;
  uint64_t v25 = *(void (**)(void))(v9 + 56);
  uint64_t v113 = (uint64_t)&v109 + *(int *)(v22 + 28) - v23;
  uint64_t v114 = v25;
  uint64_t v115 = v9 + 56;
  v25();
  uint64_t v26 = (void *)((char *)v24 + v13[8]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v112 = v26;
  uint64_t v27 = (void *)((char *)v24 + v13[9]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v111 = v27;
  *(_OWORD *)((char *)v24 + v13[10]) = xmmword_1002AD240;
  v123 = (uint64_t *)((char *)v24 + v13[11]);
  *(_OWORD *)v123 = xmmword_1002AD240;
  *(_OWORD *)((char *)v24 + v13[12]) = xmmword_1002AD240;
  uint64_t v28 = (char *)v24 + v13[13];
  *(void *)uint64_t v28 = 0;
  v28[8] = 1;
  *((unsigned char *)v24 + v13[14]) = 0;
  uint64_t v121 = v13[15];
  *(void *)((char *)v24 + v121) = 1;
  uint64_t v29 = v13[16];
  uint64_t v136 = v24;
  uint64_t v30 = (void *)((char *)v24 + v29);
  void *v30 = 0;
  v30[1] = 0;
  UUID.init()();
  unint64_t v31 = UUID.uuidString.getter();
  unint64_t v33 = v32;
  uint64_t v118 = v9;
  uint64_t v119 = v8;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100009F04((uint64_t *)&unk_10032B140);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  strcpy((char *)(inited + 32), "spakeSessionId");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = v31;
  *(void *)(inited + 56) = v33;
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_100220A6C(inited);
  swift_bridgeObjectRetain();
  unint64_t v122 = v31;
  *(void *)&long long v129 = v33;
  uint64_t v130 = sub_100211BA8(v31, v33);
  unint64_t v37 = v36;
  sub_100019730(countAndFlagsBits, (uint64_t)v7, (uint64_t *)&unk_100329950);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v7, 1, v13) == 1)
  {
    sub_100006574((uint64_t)v7, (uint64_t *)&unk_100329950);
    uint64_t v38 = v127;
    uint64_t v39 = sub_100206F9C();
    uint64_t v41 = v38;
    if (v38)
    {
      uint64_t v42 = v130;
LABEL_19:
      sub_100013198(v42, v37);
      swift_bridgeObjectRelease();
LABEL_20:
      swift_bridgeObjectRelease();
LABEL_21:
      sub_100190390((uint64_t)v136, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      return v12;
    }
    uint64_t v55 = v39;
    uint64_t v53 = v40;
    uint64_t v51 = v130;
  }
  else
  {
    unint64_t countAndFlagsBits = v35;
    uint64_t v43 = v125;
    sub_100190610((uint64_t)v7, v125, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100007288(v44, (uint64_t)qword_10033E748);
    uint64_t v45 = v126;
    sub_1001900B8(v43, v126, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      unint64_t v110 = v37;
      id v49 = v48;
      *(_DWORD *)uint64_t v48 = 134217984;
      uint64_t v109 = v48 + 4;
      uint64_t v50 = *(void *)(v45 + v13[15]);
      sub_100190390(v45, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      v134[0] = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Current code has been attempted %ld times...", v49, 0xCu);
      unint64_t v37 = v110;
      swift_slowDealloc();
    }
    else
    {
      sub_100190390(v45, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    }
    uint64_t v51 = v130;

    uint64_t v52 = *(void *)(v43 + v13[15]);
    if (v52 > 4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        unsigned __int8 v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned __int8 v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Too many attempts made on the existing code, failing creating new session ...", v58, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      id v12 = v59;
      v132[0] = (void *)-9006;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      sub_100013198(v51, v37);
      sub_100190390(v43, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      goto LABEL_21;
    }
    uint64_t v53 = *(void *)(v43 + 40);
    if (v53)
    {
      uint64_t v54 = v43;
      uint64_t v55 = *(void *)(v43 + 32);
      swift_bridgeObjectRetain();
      sub_100190390(v54, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      *(void *)((char *)v136 + v121) = v52 + 1;
      uint64_t v41 = v127;
    }
    else
    {
      id v12 = (char *)v43;
      uint64_t v80 = v127;
      uint64_t v81 = sub_100206F9C();
      uint64_t v41 = v80;
      if (v80)
      {
        sub_100190390(v43, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
        sub_100013198(v51, v37);
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      uint64_t v55 = v81;
      uint64_t v53 = v82;
      sub_100190390((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    }
    unint64_t v35 = countAndFlagsBits;
  }
  id v12 = (char *)*sub_100008EF8((void *)(v124 + 200), *(void *)(v124 + 224));
  sub_100206590(v51, v37, v134);
  if (v41)
  {
    swift_bridgeObjectRelease();
    uint64_t v42 = v51;
    goto LABEL_19;
  }
  unint64_t v110 = v37;
  sub_10024E480(v35);
  swift_bridgeObjectRelease();
  uint64_t v61 = sub_1000DEEAC();
  uint64_t v63 = v62;
  os_log_type_t v64 = v123;
  sub_1000196A0(*v123, v123[1]);
  *os_log_type_t v64 = v61;
  v64[1] = v63;
  uint64_t v65 = v111;
  uint64_t v66 = v117;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v65 = v116;
  v65[1] = v66;
  uint64_t v67 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v68 = v120;
  uint64_t v69 = (uint64_t *)(v120 + *(int *)(v67 + 24));
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  os_log_type_t v72 = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *os_log_type_t v72 = v71;
  v72[1] = v70;
  uint64_t v73 = v136;
  uint64_t v74 = v113;
  sub_100006574(v113, (uint64_t *)&unk_100321CE0);
  uint64_t v75 = v68 + *(int *)(v67 + 20);
  uint64_t v76 = v119;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 16))(v74, v75, v119);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v114)(v74, 0, 1, v76);
  swift_bridgeObjectRelease();
  v73[4] = v55;
  v73[5] = v53;
  uint64_t v77 = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v73[2] = v122;
  v73[3] = v77;
  long long v78 = v135;
  sub_100008EF8(v134, v135);
  uint64_t v79 = (*(uint64_t (**)(void, void))(*((void *)&v78 + 1) + 8))(v78, *((void *)&v78 + 1));
  unint64_t v125 = v83;
  uint64_t v126 = v79;
  Swift::String v84 = Data.base64EncodedString(options:)(0);
  unint64_t countAndFlagsBits = v84._countAndFlagsBits;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v85 = type metadata accessor for Logger();
  sub_100007288(v85, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.debug.getter();
  BOOL v88 = os_log_type_enabled(v86, v87);
  uint64_t v127 = 0;
  if (v88)
  {
    uint64_t v89 = (uint8_t *)swift_slowAlloc();
    v132[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v89 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v131 = sub_100135190(countAndFlagsBits, (unint64_t)v84._object, (uint64_t *)v132);
    uint64_t v77 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "CUSTODIAN MESSAGE 1: %s", v89, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v92 = (uint8_t *)swift_slowAlloc();
    v132[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v92 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v93 = v122;
    uint64_t v131 = sub_100135190(v122, v129, (uint64_t *)v132);
    uint64_t v77 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "SPAKE SESSION ID: %s", v92, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v95 = v123;
    uint64_t v94 = v124;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v95 = v123;
    uint64_t v94 = v124;
    uint64_t v93 = v122;
  }
  sub_100009F04((uint64_t *)&unk_10032E130);
  uint64_t v96 = swift_initStackObject();
  *(_OWORD *)(v96 + 16) = xmmword_1002A9F00;
  strcpy((char *)(v96 + 32), "spakeMessage");
  *(unsigned char *)(v96 + 45) = 0;
  *(_WORD *)(v96 + 46) = -5120;
  *(void *)(v96 + 48) = countAndFlagsBits;
  *(void *)(v96 + 56) = v84._object;
  *(void *)(v96 + 72) = &type metadata for String;
  strcpy((char *)(v96 + 80), "spakeSessionId");
  *(void *)(v96 + 120) = &type metadata for String;
  *(unsigned char *)(v96 + 95) = -18;
  *(void *)(v96 + 96) = v93;
  *(void *)(v96 + 104) = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v97 = sub_100220CAC(v96);
  sub_10024D93C(v97);
  swift_bridgeObjectRelease();
  uint64_t v98 = sub_1000DEEAC();
  uint64_t v100 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000196A0(*v95, v95[1]);
  *uint64_t v95 = v98;
  v95[1] = v100;
  uint64_t v101 = *(void **)(v94 + 16);
  type metadata accessor for AACustodianRecoveryError(0);
  uint64_t v131 = -9001;
  id v102 = v101;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v103 = v132[0];
  uint64_t v104 = (uint64_t)v136;
  id v12 = (char *)sub_10000FE4C(v101, (uint64_t)v136, 0, 0, v132[0]);

  long long v129 = v135;
  uint64_t v105 = v135;
  uint64_t v106 = sub_100008EF8(v134, v135);
  long long v133 = v129;
  uint64_t v107 = sub_10003584C((uint64_t *)v132);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v105 - 8) + 16))(v107, v106, v105);
  uint64_t v108 = (uint64_t)&v12[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier];
  swift_beginAccess();
  sub_10018FE94((uint64_t)v132, v108);
  swift_endAccess();
  sub_100013198(v130, v110);
  sub_100013198(v126, v125);
  sub_100008EA8((uint64_t)v134);
  sub_100190390(v104, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  return v12;
}

uint64_t sub_10018C4A0(uint64_t a1, unint64_t a2)
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    v25[0] = sub_100135190(a1, a2, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Looking for active sessions with sessionID: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v9 = *(void *)(v2 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 32));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  unint64_t v11 = sub_10018EBF4(v10, a1, a2);
  swift_bridgeObjectRelease();
  id v12 = sub_1000300BC(v11);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 32));
  uint64_t v13 = v12[2];
  if (v13)
  {
    swift_weakInit();
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v14 = v12 + 5;
    do
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      if (swift_weakLoadStrong())
      {
        type metadata accessor for AACustodianRecoveryError(0);
        swift_unknownObjectRetain();
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
        _BridgedStoredNSError.init(_:userInfo:)();
        sub_10018CACC(v15, v16, (uint64_t)v24, 5);

        swift_release();
      }
      else
      {
        swift_unknownObjectRetain();
      }
      if (swift_weakLoadStrong())
      {
        swift_unknownObjectRetain();
        swift_release();
        uint64_t v17 = v15 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
        type metadata accessor for AACustodianRecoveryError(0);
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
        _BridgedStoredNSError.init(_:userInfo:)();
        sub_10001098C(v17, (uint64_t)v24, 1);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    swift_weakDestroy();
    swift_bridgeObjectRelease();
    uint64_t v18 = (void *)(v2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
    *uint64_t v18 = 0;
    v18[1] = 0;
    swift_bridgeObjectRelease();
    uint64_t v19 = (void *)(v2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
    void *v19 = 0;
    v19[1] = 0;
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_100135190(a1, a2, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v22, "No sessions found with given sessionID: %s, nothing to cancel", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v27 = -7013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return swift_willThrow();
  }
}

void sub_10018CACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v74 = a2;
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = a3;
  uint64_t v14 = (void *)_convertErrorToNSError(_:)();
  id v15 = [v14 code];

  unint64_t v76 = (unint64_t)v15;
  dispatch thunk of CustomStringConvertible.description.getter();
  static String.Encoding.utf8.getter();
  uint64_t v16 = String.data(using:allowLossyConversion:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  unint64_t v75 = v18;
  if (v18 >> 60 == 15)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to convert error to data", v22, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v24 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess();
    uint64_t v25 = *(void *)(v24 + 24);
    uint64_t v70 = a4;
    uint64_t v71 = v5;
    uint64_t v69 = v16;
    uint64_t v72 = ObjectType;
    if (v25)
    {
      uint64_t v26 = *(void *)(v24 + 16);
      swift_bridgeObjectRetain();
      Swift::String v27 = Data.base64EncodedString(options:)(0);
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      strcpy((char *)(inited + 32), "spakeMessage");
      *(unsigned char *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      *(Swift::String *)(inited + 48) = v27;
      *(void *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 80), "spakeSessionId");
      *(void *)(inited + 120) = &type metadata for String;
      *(unsigned char *)(inited + 95) = -18;
      *(void *)(inited + 96) = v26;
      *(void *)(inited + 104) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_100220CAC(inited);
      sub_10024D93C(v29);
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1000DEEAC();
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = v74;
      uint64_t v34 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v74 + 48);
      uint64_t v35 = v34(&v76, ObjectType, v74);
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E748);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Looks like we don't have a spakeSessionID, Owner device failed before receiving custodian data, passing sessionUUID", v40, 2u);
        swift_slowDealloc();
      }

      Swift::String v41 = Data.base64EncodedString(options:)(0);
      uint64_t v42 = UUID.uuidString.getter();
      uint64_t v44 = v43;
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t v45 = swift_initStackObject();
      *(_OWORD *)(v45 + 16) = xmmword_1002A9F00;
      strcpy((char *)(v45 + 32), "spakeMessage");
      *(unsigned char *)(v45 + 45) = 0;
      *(_WORD *)(v45 + 46) = -5120;
      *(Swift::String *)(v45 + 48) = v41;
      *(void *)(v45 + 72) = &type metadata for String;
      strcpy((char *)(v45 + 80), "spakeSessionId");
      *(void *)(v45 + 120) = &type metadata for String;
      *(unsigned char *)(v45 + 95) = -18;
      *(void *)(v45 + 96) = v42;
      *(void *)(v45 + 104) = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v46 = sub_100220CAC(v45);
      sub_10024D93C(v46);
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1000DEEAC();
      uint64_t v32 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = v74;
      uint64_t v34 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v74 + 48);
      uint64_t v35 = v34(&v76, v72, v74);
    }
    uint64_t v48 = (void (*)(unint64_t *, void))v35;
    uint64_t v49 = v36;
    uint64_t v50 = type metadata accessor for CustodianRecoveryData();
    uint64_t v51 = (uint64_t *)(v49 + *(int *)(v50 + 44));
    uint64_t v52 = *v51;
    unint64_t v53 = v51[1];
    *uint64_t v51 = v30;
    v51[1] = v32;
    sub_1000196A0(v52, v53);
    v48(&v76, 0);
    uint64_t v54 = (void *)_convertErrorToNSError(_:)();
    id v55 = [v54 code];

    id v56 = (void (*)(unint64_t *, void))v34(&v76, v72, v33);
    uint64_t v58 = v57;
    type metadata accessor for CustodianRecoveryData();
    uint64_t v59 = v58 + *(int *)(v50 + 52);
    *(void *)uint64_t v59 = v55;
    *(unsigned char *)(v59 + 8) = 0;
    v56(&v76, 0);
    uint64_t v60 = swift_allocObject();
    unint64_t v76 = 0;
    unint64_t v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    unint64_t v76 = 0xD000000000000026;
    unint64_t v77 = 0x800000010029EB10;
    v61._unint64_t countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v62 = os_transaction_create();
    swift_release();
    *(void *)(v60 + 16) = v62;
    int v63 = v70;
    uint64_t v64 = v69;
    switch((char)v70)
    {
      case 5:
        swift_bridgeObjectRelease();
        int v66 = 5;
        break;
      default:
        char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v65 & 1 | (v63 > 3u)) {
          int v66 = 5;
        }
        else {
          int v66 = v63 + 1;
        }
        break;
    }
    swift_retain();
    sub_10018DF08(a1, v67, v66, 0, 0, 0, 0, (uint64_t)sub_10018FE8C, v60);
    swift_release_n();
    sub_1000196A0(v64, v75);
  }
}

void sub_10018D310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 16);
  swift_beginAccess();
  if (*(void *)(a2 + 16))
  {
    swift_beginAccess();
    *uint64_t v4 = 0;
    swift_unknownObjectRelease();
  }
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v10 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v10;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "failed to inform session cancel to IdMS with error: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10018D500(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100008EF8(a1, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(a4, a5, v9, v10);
  if (!v5)
  {
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    sub_100008EF8(a1, v12);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v12, v13);
    if ((result & 1) == 0)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100007288(v14, (uint64_t)qword_10033E748);
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        unint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "SPAKE messages verification failed", v17, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianRecoveryError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10018D6F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100008EF8(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_10018D75C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100008EF8(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_10018D7C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (uint64_t *)((char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10018F930(a1);
  if (!v8) {
    return 0;
  }
  uint64_t v11 = v7;
  unint64_t v12 = v8;
  uint64_t v13 = v9;
  unint64_t v31 = v10;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E748);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Looking for existing sessions to start message verification", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void *)(v1 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 32));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_10018E8BC(v19, v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 32));
  if (!v20)
  {
    swift_bridgeObjectRetain();
    unint64_t v26 = v31;
    sub_100013140(v13, v31);
    Swift::String v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      v32[4] = sub_100135190(v11, v12, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10018FE00(v11, v12, v13, v26);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No Active session with spakeID: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10018FE00(v11, v12, v13, v26);
    }
    else
    {
      sub_10018FE00(v11, v12, v13, v26);
      sub_10018FE00(v11, v12, v13, v26);
    }
    return 0;
  }
  sub_1001900B8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  swift_bridgeObjectRetain();
  unint64_t v21 = v31;
  sub_100013140(v13, v31);
  sub_100013198(v13, v21);
  swift_bridgeObjectRelease();
  v6[2] = v11;
  v6[3] = v12;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Updating session with new data", v24, 2u);
    swift_slowDealloc();
  }

  swift_getObjectType();
  uint64_t v25 = sub_100113260();
  sub_1001069A4(v6);
  ((void (*)(uint64_t *, void))v25)(v32, 0);
  sub_10018FE00(v11, v12, v13, v21);
  sub_100190390((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  return v20;
}

void sub_10018DC50(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a4(a1);
    sub_100007844(a1, 1);
  }
  else
  {
    id v6 = objc_allocWithZone((Class)AACustodianRecoveryConfiguration);
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100007844(a1, 0);
    id v8 = [v6 initWithConfigurationDictionary:isa];

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      unint64_t v10 = *(void **)(Strong + 16);
      *(void *)(Strong + 16) = v8;
      id v11 = v8;
      swift_release();
    }
    a4(0);
  }
}

uint64_t sub_10018DD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a2;
  uint64_t v24 = a8;
  uint64_t v22 = a7;
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  sub_10018DF08(a3, v19, a5, a6, v22, v24, a9, (uint64_t)sub_10017B5DC, v18);
  return swift_release();
}

uint64_t sub_10018DF08(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  HIDWORD(v35) = a3;
  uint64_t v36 = a9;
  uint64_t v37 = a8;
  uint64_t v16 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004FD70();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = sub_100225978(v20, v22, a4, a5, a6, a7);
  uint64_t v24 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v24, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  id v25 = sub_10018EF4C((uint64_t)v19, HIDWORD(v35));
  sub_100190390((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  unint64_t v26 = (void **)sub_100008EF8((void *)(v10 + 24), *(void *)(v10 + 48));
  Swift::String v27 = (void *)swift_allocObject();
  uint64_t v29 = v36;
  uint64_t v28 = v37;
  v27[2] = v23;
  v27[3] = v28;
  v27[4] = v29;
  uint64_t v30 = *v26;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_10018F91C;
  *(void *)(v31 + 24) = v27;
  aBlock[4] = sub_10018F928;
  void aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100050910;
  aBlock[3] = &unk_1002FE490;
  uint64_t v32 = _Block_copy(aBlock);
  id v33 = v23;
  sub_100011D2C(v28);
  swift_retain();
  swift_release();
  [v30 startCustodianRecoveryTransactionWithContext:v25 completion:v32];
  _Block_release(v32);

  return swift_release();
}

void sub_10018E194(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v7, v8))
  {
    swift_errorRelease();
    swift_errorRelease();

    if (!a2) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v9 = (uint8_t *)swift_slowAlloc();
  uint64_t v10 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v9 = 138412290;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
  }
  else
  {
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v11 = 0;
  }
  void *v10 = v11;
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "Custodian transaction sent to IdMS completed with error: %@", v9, 0xCu);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (a2)
  {
LABEL_10:
    if (a1) {
      unint64_t v12 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      unint64_t v12 = 0;
    }
    [a2 updateTaskResultWithError:v12];
  }
LABEL_14:
  id v13 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  uint64_t v14 = v13;
  if (a2)
  {
    [v13 sendEvent:a2];

    if (!a3) {
      return;
    }
    goto LABEL_16;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  sub_100007288(v6, (uint64_t)qword_10033E700);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Analytics event found nil", v17, 2u);
    swift_slowDealloc();
  }

  if (a3)
  {
LABEL_16:
    swift_retain();
    a3(a1);
    sub_100011358((uint64_t)a3);
  }
}

uint64_t sub_10018E504()
{
  sub_100008EA8(v0 + 24);
  sub_100008EA8(v0 + 64);
  sub_100008EA8(v0 + 104);
  sub_100008EA8(v0 + 144);
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 200);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsEventFactory;
  uint64_t v4 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter;
  uint64_t v6 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10018E65C()
{
  sub_10018E504();

  return swift_deallocClassInstance();
}

uint64_t sub_10018E6B4()
{
  return type metadata accessor for CustodianRecoveryController();
}

uint64_t type metadata accessor for CustodianRecoveryController()
{
  uint64_t result = qword_100329690;
  if (!qword_100329690) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10018E708()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_10018E87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*v2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10018E89C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*v2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  *uint64_t v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10018E8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CustodianRecoverySession();
    sub_10018FF3C(&qword_100329948, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v26;
    uint64_t v24 = v27;
    uint64_t v6 = v28;
    uint64_t v7 = v29;
    unint64_t v8 = v30;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v23 = (unint64_t)(v6 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    type metadata accessor for CustodianRecoverySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v16 = v31;
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v31) {
      goto LABEL_40;
    }
LABEL_32:
    uint64_t v20 = v16 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v20 + 24);
    if (v21)
    {
      BOOL v22 = *(void *)(v20 + 16) == a2 && v21 == a3;
      if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_40;
      }
    }
    uint64_t result = swift_release();
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_31:
    uint64_t v16 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    swift_retain();
    if (!v16) {
      goto LABEL_40;
    }
    goto LABEL_32;
  }
  int64_t v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v17 >= v23) {
      goto LABEL_39;
    }
    unint64_t v18 = *(void *)(v24 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v23) {
        goto LABEL_39;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v23) {
          goto LABEL_39;
        }
        unint64_t v18 = *(void *)(v24 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v23) {
            goto LABEL_39;
          }
          unint64_t v18 = *(void *)(v24 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v23) {
              goto LABEL_39;
            }
            unint64_t v18 = *(void *)(v24 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v23 != v19)
              {
                unint64_t v18 = *(void *)(v24 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_30;
                }
              }
LABEL_39:
              uint64_t v16 = 0;
LABEL_40:
              sub_10018FE4C();
              return v16;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_10018EBF4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CustodianRecoverySession();
    sub_10018FF3C(&qword_100329948, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySession);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v26;
    uint64_t v24 = v27;
    uint64_t v6 = v28;
    uint64_t v7 = v29;
    unint64_t v8 = v30;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = -1 << *(unsigned char *)(result + 32);
    uint64_t v24 = result + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(result + 56);
    uint64_t v6 = v10;
  }
  int64_t v23 = (unint64_t)(v6 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_40;
    }
    type metadata accessor for CustodianRecoverySession();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v16 = v25;
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v25) {
      goto LABEL_40;
    }
LABEL_33:
    uint64_t v20 = (void *)(v16 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
    swift_beginAccess();
    uint64_t v21 = v20[1];
    if (v21
      && (*v20 == a2 ? (BOOL v22 = v21 == a3) : (BOOL v22 = 0), v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
    }
    else
    {
      uint64_t result = swift_release();
    }
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_32:
    uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * v14);
    swift_retain();
    if (!v16) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  int64_t v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v17 >= v23) {
      goto LABEL_40;
    }
    unint64_t v18 = *(void *)(v24 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v23) {
        goto LABEL_40;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v23) {
          goto LABEL_40;
        }
        unint64_t v18 = *(void *)(v24 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v23) {
            goto LABEL_40;
          }
          unint64_t v18 = *(void *)(v24 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v23) {
              goto LABEL_40;
            }
            unint64_t v18 = *(void *)(v24 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v23 != v19)
              {
                unint64_t v18 = *(void *)(v24 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_31;
                }
              }
LABEL_40:
              sub_10018FE4C();
              return (uint64_t)_swiftEmptyArrayStorage;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

id sub_10018EF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E748);
  sub_1001900B8(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  os_log_type_t v39 = v7;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v16 = sub_100107BF4();
    uint64_t v41 = sub_100135190(v16, v17, &v42);
    uint64_t v7 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100190390((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Generating context generated with data: %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100190390((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  }

  id v18 = [objc_allocWithZone((Class)AKCustodianContext) init];
  if (*(void *)(a1 + v7[11] + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v18 setAaData:isa, v39];

  uint64_t v20 = a1 + v7[13];
  if (*(unsigned char *)(v20 + 8)) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = *(void *)v20;
  }
  [v18 setClientErrorCode:v21];
  sub_100019730(a1 + v7[7], (uint64_t)v6, (uint64_t *)&unk_100321CE0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  Class v24 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v6, 1, v22) != 1)
  {
    Class v24 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v22);
  }
  [v18 setCustodianUUID:v24];

  if (*(void *)(a1 + v7[12] + 8) >> 60 == 15) {
    Class v25 = 0;
  }
  else {
    Class v25 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v18 setIdmsData:v25];

  if (*(void *)(a1 + v7[8] + 8)) {
    NSString v26 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v26 = 0;
  }
  [v18 setOwnerAppleID:v26];

  if (*(void *)(a1 + v7[9] + 8)) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v27 = 0;
  }
  [v18 setOwnerCustodianAltDSID:v27];

  if (*(void *)(a1 + 8)) {
    NSString v28 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v28 = 0;
  }
  [v18 setRecoverySessionID:v28];

  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 setRecoveryStep:v29];

  char v30 = 1;
  switch((char)v40)
  {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t v31 = v40;
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
        switch(v31)
        {
          case 0:
          case 1:
          case 2:
          case 4:
          case 5:
            uint64_t v33 = v40;
            char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v34 & 1) == 0)
            {
              switch(v33)
              {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  goto LABEL_32;
                case 5:
                  goto LABEL_32;
                default:
                  goto LABEL_42;
              }
            }
            goto LABEL_33;
          case 3:
            goto LABEL_32;
          default:
            goto LABEL_42;
        }
      }
      break;
    case 1:
LABEL_32:
      swift_bridgeObjectRelease();
      break;
    default:
LABEL_42:
      JUMPOUT(0);
  }
LABEL_33:
  [v18 setOwnerDevice:v30 & 1];
  uint64_t v35 = v39;
  [v18 set_cliMode:*(unsigned __int8 *)(a1 + v39[14])];
  if (*(void *)(a1 + v35[10] + 8) >> 60 == 15) {
    Class v36 = 0;
  }
  else {
    Class v36 = Data._bridgeToObjectiveC()().super.isa;
  }
  [v18 setEncryptedPRKC:v36];

  if ([v18 respondsToSelector:Selector.init(_:)()])
  {
    if (*(void *)(a1 + v35[16] + 8)) {
      NSString v37 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v37 = 0;
    }
    [v18 setRecordBuildVersion:v37];
  }
  return v18;
}

uint64_t sub_10018F8D4()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10018F91C(uint64_t a1)
{
  sub_10018E194(a1, *(void **)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

void sub_10018F928(char a1, uint64_t a2)
{
  sub_10004E8DC(a1, a2, *(void (**)())(v2 + 16));
}

uint64_t sub_10018F930(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for CustodianRecoveryData() + 44);
  unint64_t v2 = *(void *)(v1 + 8);
  if (v2 >> 60 == 15) {
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)v1;
  sub_100013140(*(void *)v1, *(void *)(v1 + 8));
  sub_100013140(v3, v2);
  uint64_t v4 = sub_100108C14(v3, v2);
  if (!v4) {
    goto LABEL_21;
  }
  uint64_t v5 = v4;
  strcpy((char *)v23, "spakeSessionId");
  HIBYTE(v23[1]) = -18;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_100135A98((uint64_t)v24), (v7 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v25);
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  sub_100098CF0((uint64_t)v24);
  if (!*((void *)&v26 + 1)) {
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v8 = v23[0];
  strcpy((char *)v23, "spakeMessage");
  BYTE5(v23[1]) = 0;
  HIWORD(v23[1]) = -5120;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v9 = sub_100135A98((uint64_t)v24), (v10 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v5 + 56) + 32 * v9, (uint64_t)&v25);
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100098CF0((uint64_t)v24);
  if (!*((void *)&v26 + 1))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    sub_1000196A0(v3, v2);
    sub_100006574((uint64_t)&v25, &qword_100328490);
LABEL_22:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to parse AAData, bad spake message?", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_21:
    sub_1000196A0(v3, v2);
    goto LABEL_22;
  }
  unint64_t v11 = v23[1];
  Data.init(base64Encoded:options:)();
  if (v12 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v22 = v23[0];
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    buf = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)buf = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v25 = sub_100135190(v22, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received Verifier Message: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1000196A0(v3, v2);
  }
  else
  {
    sub_1000196A0(v3, v2);

    swift_bridgeObjectRelease_n();
  }
  return v8;
}

void sub_10018FE00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_100013198(a3, a4);
  }
}

uint64_t sub_10018FE4C()
{
  return swift_release();
}

uint64_t sub_10018FE54()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10018FE8C(uint64_t a1)
{
  sub_10018D310(a1, v1);
}

uint64_t sub_10018FE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003274E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018FEFC(uint64_t a1)
{
  return sub_10023D270(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10018FF04(uint64_t a1)
{
  return sub_10018DD8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_10018FF3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10018FF84()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100329960);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100190018()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100190050()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100190090(uint64_t a1)
{
  return sub_100188D68(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100190098()
{
  return sub_100010FC4() & 1;
}

uint64_t sub_1001900B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100190120()
{
  uint64_t v1 = type metadata accessor for CustodianRecoveryKeys();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v5 = v0 + v3;
  sub_100013198(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  unint64_t v6 = *(void *)(v0 + v3 + 24);
  if (v6 >> 60 != 15) {
    sub_100013198(*(void *)(v5 + 16), v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + *(int *)(v1 + 28);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001902AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecoveryKeys() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100186028(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100190324()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100190374(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001853F8(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void **)(v3 + 48));
}

void sub_100190388(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10004EC04(a1, a2, a3, *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_100190390(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001903F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_unownedRelease();

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100008EA8(v0 + v6);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v0 + v7 + 16), *(void *)(v0 + v7 + 24));

  return _swift_deallocObject(v0, v7 + 32, v5);
}

uint64_t sub_100190504(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100182D7C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + v4, (void *)(v1 + v5), *(void *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_1001905C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_100013140(a3, a4);
  }
}

uint64_t sub_100190610(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100190678()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryData();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v5 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  unint64_t v11 = (uint64_t *)(v5 + v1[11]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100013198(*v11, v12);
  }
  uint64_t v13 = (uint64_t *)(v5 + v1[12]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100190864(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecoveryData() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_100181EA8(a1, v4, v5);
}

void sub_1001908DC(uint64_t a1, char a2)
{
  sub_10018DC50(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24));
}

void sub_1001908EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  swift_beginAccess();
  sub_1001900B8((uint64_t)v10, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v11 = sub_10018F930((uint64_t)v9);
  unint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_100190390((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if (!v13)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    NSString v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Malformed recovery data", v31, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    *(void *)&long long v62 = -9013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  int v61 = a3;
  unint64_t v18 = v10[1];
  if (!v18)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E748);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Recovery session id missing in recovery data", v35, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v36 = -9008;
    goto LABEL_23;
  }
  uint64_t v19 = *v10;
  uint64_t v20 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
  swift_beginAccess();
  sub_100019730(v20, (uint64_t)&v62, (uint64_t *)&unk_1003274E0);
  if (!v63)
  {
    sub_100006574((uint64_t)&v62, (uint64_t *)&unk_1003274E0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E748);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing verifier", v40, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v36 = -9014;
LABEL_23:
    *(void *)&long long v62 = v36;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_10018FE00(v11, v13, v15, v17);
    return;
  }
  uint64_t v59 = v19;
  uint64_t v60 = v3;
  sub_100041E8C(&v62, (uint64_t)v64);
  uint64_t v21 = qword_100320B88;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100007288(v22, (uint64_t)qword_10033E748);
  sub_1001905C4(v11, v13, v15, v17);
  swift_bridgeObjectRetain();
  sub_1001905C4(v11, v13, v15, v17);
  Class v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v57 = v23;
    uint64_t v27 = v26;
    uint64_t v56 = swift_slowAlloc();
    *(void *)&long long v62 = v56;
    *(_DWORD *)uint64_t v27 = 136315394;
    unint64_t v58 = v17;
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_100135190(v59, v18, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_100135190(v11, v13, (uint64_t *)&v62);
    unint64_t v17 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10018FE00(v11, v13, v15, v17);
    sub_10018FE00(v11, v13, v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Verifying message for session with RecoveryID: %s, SpakeID: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    sub_10018FE00(v11, v13, v15, v17);
    sub_10018FE00(v11, v13, v15, v17);
  }

  if (v61 - 2 < 2)
  {
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "verifying message 2", v49, 2u);
      swift_slowDealloc();
    }

    __chkstk_darwin(v50, v51);
    *(&v55 - 6) = (uint64_t)v64;
    *(&v55 - 5) = v11;
    *(&v55 - 4) = v13;
    *(&v55 - 3) = v15;
    *(&v55 - 2) = v17;
    unint64_t v46 = sub_100191D94;
    goto LABEL_33;
  }
  if (v61 <= 1u)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "verifying message 1", v43, 2u);
      swift_slowDealloc();
    }

    __chkstk_darwin(v44, v45);
    *(&v55 - 6) = (uint64_t)v64;
    *(&v55 - 5) = v11;
    *(&v55 - 4) = v13;
    *(&v55 - 3) = v15;
    *(&v55 - 2) = v17;
    unint64_t v46 = sub_100191DB8;
LABEL_33:
    sub_10017EB28(-9002, v46);
    sub_100008EA8((uint64_t)v64);
    sub_10018FE00(v11, v13, v15, v17);
    return;
  }
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Wrong step sent to verify message method", v54, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AACustodianRecoveryError(0);
  uint64_t v65 = -9023;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  sub_10018FE00(v11, v13, v15, v17);
  sub_100008EA8((uint64_t)v64);
}

void *sub_1001912B4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess();
  sub_1001900B8(v10, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  uint64_t v11 = sub_10018F930((uint64_t)v9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  unint64_t v17 = v16;
  sub_100190390((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
  if (v13)
  {
    uint64_t v18 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
    swift_beginAccess();
    sub_100019730(v18, (uint64_t)&v73, (uint64_t *)&unk_1003274E0);
    if (v74)
    {
      sub_100041E8C(&v73, (uint64_t)v75);
      if (a3 - 1 >= 2)
      {
        if (a3)
        {
          if (qword_100320B88 != -1) {
            swift_once();
          }
          uint64_t v52 = type metadata accessor for Logger();
          sub_100007288(v52, (uint64_t)qword_10033E748);
          os_log_type_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v55 = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Wrong step sent to get message method", v55, 2u);
            swift_slowDealloc();
          }

          type metadata accessor for AACustodianRecoveryError(0);
          uint64_t v23 = v56;
          uint64_t v76 = -9024;
          sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
          sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
          _BridgedStoredNSError.init(_:userInfo:)();
          swift_willThrow();
          uint64_t v57 = v11;
          goto LABEL_39;
        }
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        sub_100007288(v38, (uint64_t)qword_10033E748);
        os_log_type_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Generating message 1", v41, 2u);
          swift_slowDealloc();
        }

        uint64_t v23 = &v66;
        __chkstk_darwin(v42, v43);
        *(&v66 - 2) = (uint8_t *)v75;
        uint64_t v26 = (uint64_t (*)(void))sub_100191D78;
        uint64_t v27 = -9026;
      }
      else
      {
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        sub_100007288(v19, (uint64_t)qword_10033E748);
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Generating message 2", v22, 2u);
          swift_slowDealloc();
        }

        uint64_t v23 = &v66;
        __chkstk_darwin(v24, v25);
        *(&v66 - 2) = (uint8_t *)v75;
        uint64_t v26 = (uint64_t (*)(void))sub_100191D5C;
        uint64_t v27 = -9027;
      }
      sub_10017EB28(v27, v26);
      if (v3)
      {
        sub_10018FE00(v11, v13, v15, v17);
LABEL_40:
        sub_100008EA8((uint64_t)v75);
        return v23;
      }
      uint64_t v71 = v11;
      unint64_t v69 = *((void *)&v73 + 1);
      uint64_t v44 = v73;
      Swift::String v45 = Data.base64EncodedString(options:)(0);
      uint64_t countAndFlagsBits = v45._countAndFlagsBits;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100007288(v46, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      BOOL v49 = os_log_type_enabled(v47, v48);
      uint64_t v70 = v44;
      if (v49)
      {
        uint64_t v50 = swift_slowAlloc();
        unint64_t v68 = v17;
        uint64_t v51 = (uint8_t *)v50;
        *(void *)&long long v73 = swift_slowAlloc();
        uint64_t v67 = v15;
        *(_DWORD *)uint64_t v51 = 136315138;
        int v66 = v51 + 4;
        swift_bridgeObjectRetain();
        uint64_t v76 = sub_100135190(countAndFlagsBits, (unint64_t)v45._object, (uint64_t *)&v73);
        uint64_t v15 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "message created with message: %s", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v17 = v68;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v58 = countAndFlagsBits;
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      strcpy((char *)(inited + 32), "spakeMessage");
      *(unsigned char *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      *(void *)(inited + 48) = v58;
      *(void *)(inited + 56) = v45._object;
      *(void *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 80), "spakeSessionId");
      *(void *)(inited + 120) = &type metadata for String;
      uint64_t v60 = v71;
      *(unsigned char *)(inited + 95) = -18;
      *(void *)(inited + 96) = v60;
      *(void *)(inited + 104) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v61 = sub_100220CAC(inited);
      sub_10024D93C(v61);
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)sub_1000DEEAC();
      unint64_t v63 = v62;
      swift_bridgeObjectRelease();
      if (v63 >> 60 != 15)
      {
        sub_100013198(v70, v69);
        sub_10018FE00(v60, v13, v15, v17);
        sub_100008EA8((uint64_t)v75);
        return v23;
      }
      type metadata accessor for AACustodianRecoveryError(0);
      uint64_t v23 = v64;
      uint64_t v76 = -9025;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      sub_100013198(v70, v69);
      uint64_t v57 = v60;
LABEL_39:
      sub_10018FE00(v57, v13, v15, v17);
      goto LABEL_40;
    }
    sub_100006574((uint64_t)&v73, (uint64_t *)&unk_1003274E0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E748);
    os_log_type_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Session missing verifier", v36, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v23 = v37;
    *(void *)&long long v73 = -9014;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_10018FE00(v11, v13, v15, v17);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    NSString v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Malformed recovery data", v31, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    uint64_t v23 = v32;
    *(void *)&long long v73 = -9013;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
  }
  return v23;
}

uint64_t sub_100191D5C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10018D75C(*(void **)(v1 + 16), a1);
}

uint64_t sub_100191D78@<X0>(uint64_t *a1@<X8>)
{
  return sub_10018D6F0(*(void **)(v1 + 16), a1);
}

uint64_t sub_100191D94()
{
  return sub_10018D500(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100191DB8()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  sub_100008EF8(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4, v5);
}

void sub_100191E2C(void *a1, void *a2, const void *a3)
{
  uint64_t v6 = (int *)type metadata accessor for CustodianRecoveryData();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10009EB78;
  *(void *)(v11 + 24) = v10;
  _Block_copy(a3);
  _Block_copy(a3);
  swift_retain();
  id v12 = [a1 recoverySessionID];
  if (!v12)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Recovery request context does not contain recovery session ID to validate code", v32, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v33 = -7052;
    goto LABEL_19;
  }
  uint64_t v13 = v12;
  uint64_t v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  id v17 = [a1 recoveryCode];
  if (!v17)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E748);
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Recovery request context does not contain recovery code to validate code", v37, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v33 = -7053;
LABEL_19:
    *(void *)&long long v105 = v33;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10018FF3C((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v38 = v106;
    _Block_copy(a3);
    sub_10009C3B0(v38, 1, (uint64_t)a3);
    _Block_release(a3);
    swift_release();
    swift_release();

    os_log_type_t v39 = a3;
    goto LABEL_20;
  }
  uint64_t v18 = v17;
  id v102 = v14;
  uint64_t v103 = v16;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v104 = a2;
  uint64_t v99 = v19;
  uint64_t v23 = v11;
  uint64_t v101 = v21;
  id v24 = [a1 altDSID];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  os_log_type_t v40 = (void *)((char *)v104 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryAltDSID);
  *os_log_type_t v40 = v26;
  v40[1] = v28;
  unint64_t v97 = (uint64_t **)v40;
  swift_bridgeObjectRelease();
  id v41 = [a1 telemetryFlowID];
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v45 = 0;
  }
  uint64_t v98 = a3;
  uint64_t v46 = (void *)((char *)v104 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController_activeTelemetryFlowID);
  *uint64_t v46 = v43;
  v46[1] = v45;
  uint64_t v96 = v46;
  swift_bridgeObjectRelease();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v100 = a1;
  uint64_t v47 = type metadata accessor for Logger();
  sub_100007288(v47, (uint64_t)qword_10033E748);
  os_log_type_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Looking for matching sessions to start code verification", v50, 2u);
    swift_slowDealloc();
  }

  uint64_t v51 = v104[23];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v51 + 32));
  swift_beginAccess();
  uint64_t v52 = v103;
  swift_bridgeObjectRetain();
  uint64_t v53 = swift_bridgeObjectRetain();
  unint64_t v54 = sub_10018EBF4(v53, (uint64_t)v102, v52);
  swift_bridgeObjectRelease();
  uint64_t v55 = sub_1000300BC(v54);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 32));
  if (v55[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "There are are already sessions with this identifier. Starting verification", v58, 2u);
      swift_slowDealloc();
    }
    uint64_t v103 = v10;

    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v104;
    swift_weakInit();
    unint64_t v61 = (void *)swift_allocObject();
    unint64_t v62 = v61;
    uint64_t v63 = v99;
    uint64_t v64 = v100;
    v61[2] = v55;
    v61[3] = v63;
    v61[4] = v101;
    v61[5] = v59;
    v61[6] = sub_10019296C;
    v61[7] = v23;
    v61[8] = v64;
    if (v60[2])
    {
      uint64_t v104 = v61;
      uint64_t v65 = v55[2];
      if (v65)
      {
        swift_retain_n();
        uint64_t v66 = v23;
        swift_retain_n();
        id v67 = v64;
        swift_bridgeObjectRetain();
        uint64_t v68 = v101;
        swift_bridgeObjectRetain();
        uint64_t v69 = 0;
        uint64_t v70 = v99;
        do
        {
          uint64_t v71 = &v55[2 * v69++];
          long long v105 = *((_OWORD *)v71 + 2);
          swift_unknownObjectRetain();
          sub_10018043C((uint64_t *)&v105, v70, v68, v59, (uint64_t)sub_10019296C, v66, (uint64_t)v67);
          swift_unknownObjectRelease();
        }
        while (v65 != v69);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v64 = v100;
      }
      else
      {
        swift_retain_n();
        swift_retain_n();
        id v94 = v64;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      id v102 = sub_100008EF8(v60 + 3, v60[6]);
      uint64_t v86 = v96[1];
      uint64_t v99 = *v96;
      os_log_type_t v87 = *v97;
      uint64_t v88 = (uint64_t)v97[1];
      uint64_t v95 = v86;
      uint64_t v96 = v87;
      uint64_t v89 = swift_allocObject();
      unint64_t v97 = (uint64_t **)v89;
      swift_weakInit();
      uint64_t v90 = (void *)swift_allocObject();
      v90[2] = v89;
      v90[3] = sub_1001929D0;
      v90[4] = v62;
      uint64_t v91 = v88;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      id v92 = v64;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v93 = v95;
      swift_bridgeObjectRetain();
      sub_10004E16C(v99, v93, (uint64_t)v96, v91, (uint64_t)sub_1001929F8, (uint64_t)v90);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_release();

    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_type_t v39 = v98;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    unint64_t v75 = v100;
    if (v74)
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "We have a code but have not received yet a Push with Spake Begin, Creating session and waiting for push", v76, 2u);
      swift_slowDealloc();
    }

    v9[2] = 0;
    v9[3] = 0;
    unint64_t v77 = (char *)v9 + v6[7];
    uint64_t v78 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 1, 1, v78);
    uint64_t v79 = (void *)((char *)v9 + v6[8]);
    void *v79 = 0;
    v79[1] = 0;
    uint64_t v80 = (void *)((char *)v9 + v6[9]);
    *uint64_t v80 = 0;
    v80[1] = 0;
    *(_OWORD *)((char *)v9 + v6[10]) = xmmword_1002AD240;
    *(_OWORD *)((char *)v9 + v6[11]) = xmmword_1002AD240;
    *(_OWORD *)((char *)v9 + v6[12]) = xmmword_1002AD240;
    uint64_t v81 = (char *)v9 + v6[13];
    *(void *)uint64_t v81 = 0;
    v81[8] = 1;
    uint64_t v82 = v6[14];
    *(void *)((char *)v9 + v6[15]) = 1;
    unint64_t v83 = (void *)((char *)v9 + v6[16]);
    *unint64_t v83 = 0;
    v83[1] = 0;
    uint64_t v84 = v101;
    v9[4] = v99;
    v9[5] = v84;
    uint64_t v85 = v103;
    *uint64_t v9 = v102;
    v9[1] = v85;
    *((unsigned char *)v9 + v82) = [v75 CLIMode];
    sub_100010860((uint64_t)v9, (uint64_t)sub_10019296C, v23);
    swift_unknownObjectRelease();
    sub_100190390((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    swift_release();
    swift_release();
    os_log_type_t v39 = v98;
  }
LABEL_20:
  _Block_release(v39);
}

uint64_t sub_1001928FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100192934()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10019296C(void *a1, char a2)
{
  sub_1000913D0(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t sub_100192978()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1001929D0(uint64_t a1)
{
  sub_1001801AC(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_100192A00()
{
  uint64_t v1 = 0x6169646F74737563;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465747065636361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100192A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100193588(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100192A84(uint64_t a1)
{
  unint64_t v2 = sub_100193328();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100192AC0(uint64_t a1)
{
  unint64_t v2 = sub_100193328();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100192AFC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100192B9C()
{
  return type metadata accessor for CustodianInvitationResponseMessage();
}

uint64_t type metadata accessor for CustodianInvitationResponseMessage()
{
  uint64_t result = qword_1003299B0;
  if (!qword_1003299B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100192BF0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100192C94(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v16[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_100329A98);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100193328();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v20 = *(unsigned char *)(v2 + 16);
  char v19 = 0;
  sub_100029FAC();
  uint64_t v13 = v16[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v14 = v16[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v16[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v4);
    char v18 = 1;
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v4);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_100192F48(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100329A88);
  uint64_t v7 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100193328();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v13 = v17;
    type metadata accessor for CustodianInvitationResponseMessage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v20 = 0;
    sub_100029F58();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(unsigned char *)(v17 + 16) = v21;
    char v19 = 1;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v6, v3);
    char v18 = 2;
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v16);
    uint64_t v13 = v17;
    *(unsigned char *)(v17 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = v12 & 1;
  }
  sub_100008EA8((uint64_t)a1);
  return v13;
}

uint64_t sub_1001932A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CustodianInvitationResponseMessage();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100192F48(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100193304(void *a1)
{
  return sub_100192C94(a1);
}

unint64_t sub_100193328()
{
  unint64_t result = qword_100329A90;
  if (!qword_100329A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329A90);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianInvitationResponseMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100193448);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianInvitationResponseMessage.CodingKeys()
{
  return &type metadata for CustodianInvitationResponseMessage.CodingKeys;
}

unint64_t sub_100193484()
{
  unint64_t result = qword_100329AA0;
  if (!qword_100329AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329AA0);
  }
  return result;
}

unint64_t sub_1001934DC()
{
  unint64_t result = qword_100329AA8;
  if (!qword_100329AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329AA8);
  }
  return result;
}

unint64_t sub_100193534()
{
  unint64_t result = qword_100329AB0;
  if (!qword_100329AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329AB0);
  }
  return result;
}

uint64_t sub_100193588(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t *sub_1001936E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    swift_bridgeObjectRetain();
    id v14 = v13;
  }
  return a1;
}

void sub_1001937CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_100193850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v12;
  swift_bridgeObjectRetain();
  id v13 = v12;
  return a1;
}

uint64_t sub_1001938E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void **)(a1 + v10);
  uint64_t v12 = *(void **)(a2 + v10);
  *(void *)(a1 + v10) = v12;
  id v13 = v12;

  return a1;
}

uint64_t sub_100193998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100193A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  id v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);

  return a1;
}

uint64_t sub_100193ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100193AD0);
}

uint64_t sub_100193AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100193B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100193BA8);
}

uint64_t sub_100193BA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CloudShareInfo()
{
  uint64_t result = qword_100329B10;
  if (!qword_100329B10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100193CB4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100193D54(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100009F04(&qword_100329BA0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100009F04(&qword_100329BA0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_100193DC4(void *a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  if (a2)
  {
    swift_errorRetain();
    a3(a1);
    sub_10007B670(a1, 1);
  }
  else
  {
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1002AB070;
    *(void *)(v18 + 32) = a1;
    long long aBlock = (void **)v18;
    specialized Array._endMutation()();
    id v19 = objc_allocWithZone((Class)CKAcceptSharesOperation);
    uint64_t v34 = a7;
    id v20 = v19;
    sub_10000850C(0, &qword_100329B98);
    uint64_t v33 = a6;
    id v21 = a1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = [v20 initWithShareMetadatas:isa];

    sub_10010FF90(a5, (uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v24 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    unint64_t v25 = (v16 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = a3;
    *(void *)(v26 + 24) = a4;
    sub_1000E4950((uint64_t)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v24);
    os_log_type_t v35 = a1;
    uint64_t v27 = v34;
    *(void *)(v26 + v25) = v33;
    *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
    os_log_type_t v40 = sub_100196DB4;
    uint64_t v41 = v26;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256;
    uint64_t v38 = sub_100194954;
    os_log_type_t v39 = &unk_1002FE8E8;
    uint64_t v28 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    id v29 = v27;
    swift_release();
    [v23 setPerShareCompletionBlock:v28];
    _Block_release(v28);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = a3;
    *(void *)(v30 + 24) = a4;
    os_log_type_t v40 = sub_100196E78;
    uint64_t v41 = v30;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v37 = 1107296256;
    uint64_t v38 = sub_10025ED44;
    os_log_type_t v39 = &unk_1002FE938;
    os_log_type_t v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v23 setAcceptSharesCompletionBlock:v31];
    _Block_release(v31);
    [v29 addOperation:v23];

    sub_10007B670(v35, 0);
  }
}

void sub_10019416C(uint64_t a1, void *a2, void *a3, void (*a4)(void *), void (*a5)(void *), uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v44 = a4;
  uint64_t v13 = type metadata accessor for CloudShareInfo();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v17 = __chkstk_darwin(v13 - 8, v16);
  uint64_t v18 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  id v21 = (char *)&v43 - v20;
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v25 = 136315138;
      swift_getErrorValue();
      uint64_t v26 = Error.localizedDescription.getter();
      uint64_t v45 = sub_100135190(v26, v27, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error accepting share: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v44(a3);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (a2
      && (id v28 = [a2 recordID],
          id v29 = [v28 zoneID],
          v28,
          v29))
    {
      swift_retain();
      id v30 = [a8 sharedCloudDatabase];
      sub_100009F04((uint64_t *)&unk_100328470);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_1002AB070;
      *(void *)(v31 + 32) = v29;
      uint64_t v46 = (void *)v31;
      specialized Array._endMutation()();
      uint64_t v32 = (uint64_t)v46;
      sub_10010FF90(a6, (uint64_t)v18);
      unint64_t v33 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      uint64_t v34 = swift_allocObject();
      sub_1000E4950((uint64_t)v18, v34 + v33);
      os_log_type_t v35 = (void (**)(void *))(v34 + ((v15 + v33 + 7) & 0xFFFFFFFFFFFFFFF8));
      *os_log_type_t v35 = v44;
      v35[1] = a5;
      id v36 = v29;
      swift_retain();
      sub_1000AF434(v30, v32, 1, (uint64_t)sub_100196FE0, v34);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      sub_100007288(v37, (uint64_t)qword_10033E718);
      sub_10010FF90(a6, (uint64_t)v21);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v46 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v40 = 136315138;
        uint64_t v41 = URL.absoluteString.getter();
        uint64_t v45 = sub_100135190(v41, v42, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10010FFF4((uint64_t)v21);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Could not find zoneID in share from: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10010FFF4((uint64_t)v21);
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v45 = -7009;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100196E80((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v36 = v46;
      v44(v46);
    }
  }
}

uint64_t sub_100194750(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E718);
  sub_10010FF90(a2, (uint64_t)v8);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = URL.absoluteString.getter();
    uint64_t v16 = sub_100135190(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10010FFF4((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully accepted share from: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10010FFF4((uint64_t)v8);
  }

  return a3(0);
}

void sub_100194954(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

void sub_1001949F4(uint64_t a1, void (*a2)(void *))
{
  if (a1)
  {
    swift_getErrorValue();
    uint64_t v3 = sub_1001A84EC(v13[2]);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      type metadata accessor for CKError(0);
      sub_100196E80((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
      _BridgedStoredNSError.code.getter();
      if (v13[0] == 9 || (_BridgedStoredNSError.code.getter(), v13[0] == 1))
      {
        if (qword_100320B78 != -1) {
          swift_once();
        }
        uint64_t v5 = type metadata accessor for Logger();
        sub_100007288(v5, (uint64_t)qword_10033E718);
        id v6 = v4;
        uint64_t v7 = Logger.logObject.getter();
        os_log_type_t v8 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v8))
        {
          id v9 = (uint8_t *)swift_slowAlloc();
          v13[0] = swift_slowAlloc();
          *(_DWORD *)id v9 = 136315138;
          sub_100196E80(&qword_100320F20, type metadata accessor for CKError);
          uint64_t v10 = Error.localizedDescription.getter();
          sub_100135190(v10, v11, v13);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in acceptShares: %s", v9, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v12 = v6;
        a2(v4);
      }
    }
  }
}

id sub_100194CB8(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = a1;

  return a1;
}

void sub_100194D1C(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_100135190(a2, a3, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v14 = Error.localizedDescription.getter();
      unint64_t v25 = (void *)sub_100135190(v14, v15, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed fetching cloudKit participant (%s) with error: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a1, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t v17 = *(void **)(a6 + 16);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = (uint64_t)v17;
      uint64_t v20 = 0;
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007288(v21, (uint64_t)qword_10033E718);
      swift_bridgeObjectRetain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
        unint64_t v25 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v24 = 136315138;
        swift_bridgeObjectRetain();
        sub_100135190(a2, a3, (uint64_t *)&v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Did not find cloudKit participant with handle: %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for AACustodianError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100196E80((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v18 = v25;
      uint64_t v19 = (uint64_t)v25;
      uint64_t v20 = 1;
    }
    a4(v19, v20);
  }
}

void sub_1001951B4(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      id v30 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      uint64_t v29 = sub_100135190(v17, v18, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error fetching share metadata: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a3, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else if (a2)
  {
    id v28 = a2;
    a4((uint64_t)a2, 0);
    uint64_t v19 = v28;
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E718);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      id v28 = (id)swift_slowAlloc();
      id v30 = v28;
      *(_DWORD *)os_log_type_t v23 = 136315138;
      unint64_t v27 = v23 + 4;
      uint64_t v24 = URL.absoluteString.getter();
      uint64_t v29 = sub_100135190(v24, v25, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No metadata was returned from: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v29 = -7009;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100196E80((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v30;
    a4((uint64_t)v30, 1);
  }
}

uint64_t sub_1001956C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v12 = *(void (**)(char *, void *, void *))(a1 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v13 = a3;
  id v14 = a4;
  v12(v11, a3, a4);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1001957F0()
{
  uint64_t v1 = 0x6E6F436572616873;
  if (*v0 != 1) {
    uint64_t v1 = 0x6B6F546572616873;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C72556572616873;
  }
}

uint64_t sub_100195864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100197418(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019588C(uint64_t a1)
{
  unint64_t v2 = sub_100196D1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001958C8(uint64_t a1)
{
  unint64_t v2 = sub_100196D1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100195904@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  os_log_type_t v35 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04(&qword_100329B58);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v10, v11);
  id v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100196D1C();
  uint64_t v14 = (uint64_t)v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return sub_100008EA8((uint64_t)a1);
  }
  id v36 = a1;
  uint64_t v15 = v34;
  LOBYTE(v37) = 0;
  sub_100196E80(&qword_100329B68, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v9;
  uint64_t v18 = (uint64_t)v13;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v13, v35, v3);
  LOBYTE(v37) = 1;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t *)&v13[*(int *)(v10 + 20)];
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v39 = 2;
  sub_1000130EC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  os_log_type_t v35 = v17;
  unint64_t v22 = v38;
  if (v38 >> 60 == 15)
  {
    id v23 = 0;
    uint64_t v24 = v32;
  }
  else
  {
    uint64_t v25 = v37;
    v30[1] = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_1000196B4(v25, v22);
    uint64_t v31 = v25;
    id v26 = sub_1001225D8();
    uint64_t v27 = v32;
    [v26 setRequiresSecureCoding:1];
    [v26 _enableStrictSecureDecodingMode];
    unint64_t v28 = v22;
    id v23 = [objc_allocWithZone((Class)CKDeviceToDeviceShareInvitationToken) initWithCoder:v26];

    uint64_t v29 = v31;
    sub_1000196A0(v31, v28);
    sub_1000196A0(v29, v28);
    uint64_t v24 = v27;
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v35, v6);
  *(void *)(v18 + *(int *)(v10 + 24)) = v23;
  sub_10010FF90(v18, v24);
  sub_100008EA8((uint64_t)v36);
  return sub_10010FFF4(v18);
}

uint64_t sub_100195DC8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100329B70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100196D1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20[0]) = 0;
  type metadata accessor for URL();
  sub_100196E80(&qword_100329B78, (void (*)(uint64_t))&type metadata accessor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = type metadata accessor for CloudShareInfo();
  LOBYTE(v20[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v12 = *(void **)(v3 + *(int *)(v10 + 24));
  if (!v12) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  id v13 = objc_allocWithZone((Class)NSKeyedArchiver);
  id v14 = v12;
  id v15 = [v13 initRequiringSecureCoding:1];
  [v14 encodeWithCoder:v15];
  id v16 = [v15 encodedData];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  v20[0] = v17;
  v20[1] = v19;
  char v21 = 2;
  sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

  return sub_100013198(v17, v19);
}

uint64_t sub_100196074@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100195904(a1, a2);
}

uint64_t sub_10019608C(void *a1)
{
  return sub_100195DC8(a1);
}

void sub_1001960A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a2 + *(int *)(type metadata accessor for CloudShareInfo() + 24));
  sub_100009F04(&qword_100328A40);
  if (v8)
  {
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1002A9C00;
    id v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16);
    v13(v12 + v11, a2, v9);
    sub_100009F04(&qword_100329B80);
    uint64_t v33 = a1;
    id v14 = (int *)(sub_100009F04(&qword_100329B88) - 8);
    unint64_t v15 = (*(unsigned __int8 *)(*(void *)v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v14 + 80);
    uint64_t v32 = a4;
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1002A9C00;
    unint64_t v17 = v16 + v15;
    uint64_t v18 = v14[14];
    v13(v17, a2, v9);
    *(void *)(v17 + v18) = v8;
    id v19 = v8;
    sub_100220F0C(v16);
    id v20 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10000850C(0, &qword_100329B90);
    sub_100196E80(&qword_100327E70, (void (*)(uint64_t))&type metadata accessor for URL);
    v22.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = v20;
    a4 = v32;
    id v24 = [v23 initWithShareURLs:isa invitationTokensByShareURL:v22.super.isa];

    a1 = v33;
  }
  else
  {
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1002A9C00;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 16))(v28 + v27, a2, v25);
    id v29 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
    v22.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v24 = [v29 initWithShareURLs:v22.super.isa];
  }

  [v24 setShouldFetchRootRecord:1];
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a3;
  *(void *)(v30 + 24) = a4;
  aBlock[4] = sub_100196DA8;
  void aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001956C0;
  aBlock[3] = &unk_1002FE898;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v24 setPerShareMetadataBlock:v31];
  _Block_release(v31);
  [a1 addOperation:v24];
}

void sub_100196518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v35 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v35 + 64);
  __chkstk_darwin(v14 - 8, v16);
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v17[4] = a6;
  uint64_t v17[5] = a7;
  if (a2 == 2)
  {
    uint64_t v18 = a1;
    uint64_t v21 = qword_100320CE8;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    id v20 = &qword_10033EA28;
    goto LABEL_9;
  }
  if (a2 == 1)
  {
    uint64_t v18 = a1;
    uint64_t v19 = qword_100320CD8;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    id v20 = &qword_10033EA08;
LABEL_9:
    uint64_t v23 = *v20;
    unint64_t v22 = v20[1];
    swift_bridgeObjectRetain();
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    id v24 = sub_10028CC20(v23, v22);
    swift_bridgeObjectRelease();
    sub_10010FF90(v18, (uint64_t)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v25 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    unint64_t v26 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_1001970C8;
    *(void *)(v27 + 24) = v17;
    sub_1000E4950((uint64_t)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v25);
    *(void *)(v27 + v26) = a3;
    *(void *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
    swift_retain();
    swift_retain();
    id v28 = v24;
    sub_1001960A4(v28, v18, (uint64_t)sub_10007BF08, v27);
    swift_release();
    goto LABEL_17;
  }
  uint64_t v29 = qword_100320B78;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v29 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100007288(v30, (uint64_t)qword_10033E718);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 134217984;
    uint64_t v37 = (void *)a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing container ID for %ld", v33, 0xCu);
    swift_slowDealloc();
  }

  type metadata accessor for AACustodianError(0);
  uint64_t v36 = -7056;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_100196E80((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  _BridgedStoredNSError.init(_:userInfo:)();
  id v28 = v37;
  sub_10002A8C0((uint64_t)v37, a4, a5, a6, a7);
LABEL_17:
  swift_release();
}

uint64_t sub_100196964(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  long long aBlock = a1;
  uint64_t v27 = a2;
  uint64_t v32 = 64;
  unint64_t v33 = 0xE100000000000000;
  sub_100080C64();
  char v8 = StringProtocol.contains<A>(_:)();
  id v9 = objc_allocWithZone((Class)CKUserIdentityLookupInfo);
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v11 = &selRef_initWithEmailAddress_;
  if ((v8 & 1) == 0) {
    unint64_t v11 = &selRef_initWithPhoneNumber_;
  }
  id v12 = [v9 *v11 v10 a4];

  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1002AB070;
  *(void *)(v13 + 32) = v12;
  specialized Array._endMutation()();
  id v14 = objc_allocWithZone((Class)CKFetchShareParticipantsOperation);
  sub_10000850C(0, &qword_100329B50);
  id v15 = v12;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v14 initWithUserIdentityLookupInfos:isa];

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  uint64_t v30 = sub_100196CBC;
  uint64_t v31 = (void *)v18;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  id v28 = sub_1000B0C20;
  uint64_t v29 = &unk_1002FE7F8;
  uint64_t v19 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v17 setShareParticipantFetchedBlock:v19];
  _Block_release(v19);
  id v20 = (void *)swift_allocObject();
  void v20[2] = a1;
  v20[3] = a2;
  v20[4] = v24;
  void v20[5] = a5;
  v20[6] = v18;
  uint64_t v30 = sub_100196D0C;
  uint64_t v31 = v20;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  id v28 = sub_10025ED44;
  uint64_t v29 = &unk_1002FE848;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v17 setFetchShareParticipantsCompletionBlock:v21];
  _Block_release(v21);
  [a3 addOperation:v17];

  return swift_release();
}

uint64_t sub_100196C84()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_100196CBC(void *a1)
{
  return sub_100194CB8(a1, v1);
}

uint64_t sub_100196CC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100196D0C(uint64_t a1)
{
  sub_100194D1C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

unint64_t sub_100196D1C()
{
  unint64_t result = qword_100329B60;
  if (!qword_100329B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329B60);
  }
  return result;
}

uint64_t sub_100196D70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100196DA8(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1001951B4(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 16));
}

void sub_100196DB4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for CloudShareInfo() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  NSString v10 = *(void (**)(void *))(v3 + 16);
  unint64_t v11 = *(void (**)(void *))(v3 + 24);
  uint64_t v12 = *(void *)(v3 + v9);
  uint64_t v13 = *(void **)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10019416C(a1, a2, a3, v10, v11, v3 + v8, v12, v13);
}

void sub_100196E78(uint64_t a1)
{
  sub_1001949F4(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_100196E80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100196EC8()
{
  uint64_t v1 = (int *)(type metadata accessor for CloudShareInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100196FE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CloudShareInfo() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(uint64_t (**)(void))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100194750(a1, v1 + v4, v5);
}

uint64_t sub_100197080()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001970C8(uint64_t a1)
{
  sub_10002A8C0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001970D8()
{
  uint64_t v1 = (int *)(type metadata accessor for CloudShareInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

unsigned char *storeEnumTagSinglePayload for CloudShareInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001972D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudShareInfo.CodingKeys()
{
  return &type metadata for CloudShareInfo.CodingKeys;
}

unint64_t sub_100197314()
{
  unint64_t result = qword_100329BA8;
  if (!qword_100329BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329BA8);
  }
  return result;
}

unint64_t sub_10019736C()
{
  unint64_t result = qword_100329BB0;
  if (!qword_100329BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329BB0);
  }
  return result;
}

unint64_t sub_1001973C4()
{
  unint64_t result = qword_100329BB8;
  if (!qword_100329BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329BB8);
  }
  return result;
}

uint64_t sub_100197418(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C72556572616873 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F436572616873 && a2 == 0xEE0072656E696174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B6F546572616873 && a2 == 0xEE00617461446E65)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001975DC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v35 = a3;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v12 - 8);
  uint64_t v34 = v12;
  __chkstk_darwin(v12, v13);
  id v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100199F14(a1, a4, a5, a6);
  if (v17 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v18 = objc_allocWithZone((Class)NSError);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 initWithDomain:v19 code:4 userInfo:0];

    return swift_willThrow();
  }
  else
  {
    uint64_t v21 = v16;
    unint64_t v22 = v17;
    id v32 = *(id *)(v6 + 16);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1002AB070;
    *(void *)(v24 + 32) = a2;
    id v36 = (id)v24;
    specialized Array._endMutation()();
    sub_10000850C(0, (unint64_t *)&qword_100323EE0);
    id v25 = a2;
    Class v26 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10000850C(0, &qword_100325A20);
    sub_10019AC58();
    Class v27 = Set._bridgeToObjectiveC()().super.isa;
    id v36 = 0;
    id v28 = [v32 sendMessage:isa destinations:v26 responseIdentifier:0 fireAndForget:0 requiredCapabilities:v27 lackingCapabilities:0 error:&v36];

    id v29 = v36;
    if (v28)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      id v30 = v29;
      sub_1000196A0(v21, v22);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v15, v34);
    }
    else
    {
      id v31 = v36;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_1000196A0(v21, v22);
    }
  }
}

uint64_t sub_1001978F4(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1001975DC(a1, a2, a3, (void (*)(void))type metadata accessor for InheritanceInvitationMessage, &qword_100329C98, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationMessage);
}

uint64_t sub_100197984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6 = v5;
  os_log_type_t v49 = a4;
  uint64_t v11 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v12 = v11 - 8;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  NSString v19 = (char *)v47 - v18;
  id v20 = (char *)v47 + *(int *)(v12 + 28) - v18;
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v20, a1, v21);
  unsigned char *v19 = 4;
  unint64_t v22 = &v19[*(int *)(v12 + 32)];
  *unint64_t v22 = a2;
  v22[1] = a3;
  uint64_t v23 = qword_100320B90;
  swift_bridgeObjectRetain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  uint64_t v24 = sub_100007288(v48, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    Class v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v47[2] = a5;
    uint64_t v51 = (void *)v28;
    v47[0] = v6;
    v47[1] = v24;
    *(_DWORD *)Class v27 = 136315138;
    uint64_t v29 = sub_1001FABF8();
    uint64_t v50 = sub_100135190(v29, v30, (uint64_t *)&v51);
    uint64_t v6 = v47[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Created invitation message - %s.\nSending...", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  }

  sub_100008EF8((void *)(v6 + 16), *(void *)(v6 + 40));
  type metadata accessor for InheritanceInvitationRecord();
  id v31 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithHandle:v32];

  if (v33)
  {
    uint64_t v34 = qword_100320B70;
    id v35 = v33;
    if (v34 != -1) {
      swift_once();
    }
    sub_100007288(v48, (uint64_t)qword_10033E700);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Destination is valid!", v38, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v19, v35, (uint64_t)&_swiftEmptySetSingleton, (void (*)(void))type metadata accessor for InheritanceInvitationMessage, &qword_100329C98, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationMessage);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Sent IDS Message for Inheritance Invitation successfully.", v45, 2u);
      swift_slowDealloc();
    }

    v49(0);
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v48, (uint64_t)qword_10033E748);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to generate destination from handle.", v41, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v50 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v42 = v51;
    sub_100198034((uint64_t)v51, v49);
    swift_release();
  }
  return sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
}

uint64_t sub_100198034(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (!a1)
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E760);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v11, "Sent IDS Message for Inheritance Invitation successfully.", v12, 2u);
      swift_slowDealloc();
    }
    goto LABEL_11;
  }
  swift_errorRetain();
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v5, v6))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_11:

    return a2(a1);
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136315138;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  uint64_t v8 = String.init<A>(describing:)();
  sub_100135190(v8, v9, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error sending IDS Message for Inheritance Invitation: %s", v7, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return a2(a1);
}

uint64_t sub_1001982F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v47 = a1;
  uint64_t v48 = a5;
  uint64_t v12 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v13 = v12 - 8;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  id v20 = (char *)v45 - v19;
  uint64_t v21 = (char *)v45 + *(int *)(v13 + 28) - v19;
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a3, v22);
  *id v20 = 0;
  v20[*(int *)(v13 + 32)] = a4;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v46 = a6;
    Class v27 = (uint8_t *)v26;
    uint64_t v50 = (void *)swift_slowAlloc();
    v45[0] = v20;
    v45[1] = a2;
    *(_DWORD *)Class v27 = 136315138;
    uint64_t v28 = sub_1002057D0();
    uint64_t v49 = sub_100135190(v28, v29, (uint64_t *)&v50);
    id v20 = (unsigned char *)v45[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created invitation response message - %s.\nResponding to invitation...", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v46;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  }

  sub_100008EF8((void *)(v7 + 16), *(void *)(v7 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    unint64_t v30 = v44;
  }
  else
  {
    unint64_t v30 = &_swiftEmptySetSingleton;
  }
  id v31 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithHandle:v32];

  if (v33)
  {
    uint64_t v34 = qword_100320B70;
    id v35 = v33;
    if (v34 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E700);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Destination is valid!", v38, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v20, v35, (uint64_t)v30, (void (*)(void))type metadata accessor for InheritanceInvitationResponseMessage, &qword_100329CA0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
    v48(0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E748);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to generate destination from handle.", v41, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v49 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v42 = v50;
    sub_100199900((uint64_t)v50, v48, a6, "Error sending IDS Message for Inheritance Invitation Response: %s");
    swift_bridgeObjectRelease();
    swift_release();
  }
  return sub_10019D4F8((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
}

uint64_t sub_100198980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v47 = a2;
  uint64_t v48 = a5;
  uint64_t v12 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v13 = v12 - 8;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  id v20 = (char *)v45 - v19;
  uint64_t v21 = (char *)v45 + *(int *)(v13 + 28) - v19;
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a4, v22);
  sub_10019D490(a1, (uint64_t)&v20[*(int *)(v13 + 32)], (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  *id v20 = 1;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v46 = a6;
    Class v27 = (uint8_t *)v26;
    uint64_t v50 = (void *)swift_slowAlloc();
    v45[0] = v20;
    v45[1] = a3;
    *(_DWORD *)Class v27 = 136315138;
    uint64_t v28 = sub_1000E3D60();
    uint64_t v49 = sub_100135190(v28, v29, (uint64_t *)&v50);
    id v20 = (unsigned char *)v45[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created share accessKey message - %s.\nSending....", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v46;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_100008EF8((void *)(v7 + 16), *(void *)(v7 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    unint64_t v30 = v44;
  }
  else
  {
    unint64_t v30 = &_swiftEmptySetSingleton;
  }
  id v31 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithHandle:v32];

  if (v33)
  {
    uint64_t v34 = qword_100320B70;
    id v35 = v33;
    if (v34 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E700);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Destination is valid!", v38, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v20, v35, (uint64_t)v30, (void (*)(void))type metadata accessor for InheritanceAccessKeyMessage, &qword_1003265A8, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
    v48(0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E748);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to generate destination from handle.", v41, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v49 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v42 = v50;
    sub_100199900((uint64_t)v50, v48, a6, "Error sending IDS Message for Share Access Key: %s");
    swift_bridgeObjectRelease();
    swift_release();
  }
  return sub_10019D4F8((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
}

void sub_100199030(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (!a1)
  {
LABEL_6:
    if (!a2) {
      return;
    }
    goto LABEL_7;
  }
  swift_errorRetain();
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v11 = String.init<A>(describing:)();
    sub_100135190(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a4, v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    goto LABEL_6;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

  if (!a2) {
    return;
  }
LABEL_7:
  a2(a1);
  sub_100011358((uint64_t)a2);
}

uint64_t sub_100199250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v47 = a3;
  uint64_t v48 = a5;
  uint64_t v12 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v13 = v12 - 8;
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  id v20 = (char *)v45 - v19;
  uint64_t v21 = (char *)v45 + *(int *)(v13 + 28) - v19;
  uint64_t v22 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a2, v22);
  sub_10019D490(a1, (uint64_t)&v20[*(int *)(v13 + 32)], (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  *id v20 = 2;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v46 = a6;
    Class v27 = (uint8_t *)v26;
    uint64_t v50 = (void *)swift_slowAlloc();
    v45[0] = v20;
    v45[1] = a4;
    *(_DWORD *)Class v27 = 136315138;
    uint64_t v28 = sub_1000E3D60();
    uint64_t v49 = sub_100135190(v28, v29, (uint64_t *)&v50);
    id v20 = (unsigned char *)v45[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created accessKey Changed message - %s.\nSending....", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v46;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_100008EF8((void *)(v7 + 16), *(void *)(v7 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    unint64_t v30 = v44;
  }
  else
  {
    unint64_t v30 = &_swiftEmptySetSingleton;
  }
  id v31 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithHandle:v32];

  if (v33)
  {
    uint64_t v34 = qword_100320B70;
    id v35 = v33;
    if (v34 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E700);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Destination is valid!", v38, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v20, v35, (uint64_t)v30, (void (*)(void))type metadata accessor for InheritanceAccessKeyMessage, &qword_1003265A8, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
    v48(0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v23, (uint64_t)qword_10033E748);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to generate destination from handle.", v41, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v49 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v42 = v50;
    sub_100199900((uint64_t)v50, v48, a6, "Error sending IDS Message for Update AccessKey: %s");
    swift_bridgeObjectRelease();
    swift_release();
  }
  return sub_10019D4F8((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
}

uint64_t sub_100199900(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v11 = String.init<A>(describing:)();
      sub_100135190(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a4, v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

uint64_t type metadata accessor for InheritanceSetupMessenger()
{
  return self;
}

uint64_t sub_100199B30(uint64_t a1)
{
  return sub_100199C98(a1, (void (*)(void))type metadata accessor for FinalizeCustodianSetupMessage, &qword_100329CF8, (void (*)(uint64_t))type metadata accessor for FinalizeCustodianSetupMessage);
}

uint64_t sub_100199B78(uint64_t a1)
{
  return sub_100199C98(a1, (void (*)(void))type metadata accessor for ShareMessage, &qword_100329CB0, (void (*)(uint64_t))type metadata accessor for ShareMessage);
}

uint64_t sub_100199BC0(uint64_t a1)
{
  return sub_100199C98(a1, (void (*)(void))type metadata accessor for CustodianInvitationMessage, &qword_100329CD0, (void (*)(uint64_t))type metadata accessor for CustodianInvitationMessage);
}

uint64_t sub_100199C08(uint64_t a1)
{
  return sub_100199C98(a1, (void (*)(void))type metadata accessor for CustodianRemovedMessage, &qword_100329CF0, (void (*)(uint64_t))type metadata accessor for CustodianRemovedMessage);
}

uint64_t sub_100199C50(uint64_t a1)
{
  return sub_100199C98(a1, (void (*)(void))type metadata accessor for CustodianInvitationResponseMessage, &qword_100329CC8, (void (*)(uint64_t))type metadata accessor for CustodianInvitationResponseMessage);
}

uint64_t sub_100199C98(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  a2(0);
  sub_10019ACC0(a3, a4);
  uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v7;
}

uint64_t sub_100199ECC(uint64_t a1)
{
  return sub_100199F14(a1, (void (*)(void))type metadata accessor for CustodianRecoveryKeys, &qword_100329CC0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryKeys);
}

uint64_t sub_100199F14(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  a2(0);
  sub_10019ACC0(a3, a4);
  uint64_t v7 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v7;
}

Swift::Int sub_10019A140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100009F04(&qword_100329CB8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10019A284(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v21 = a6;
      BOOL v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)BOOL v17 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v18 = String.init<A>(describing:)();
      sub_100135190(v18, v19, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error sending IDS Message for Beneficiary Removed: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v21;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return sub_1000C9014(a1, a2, a3, a4, a5, a6, a7);
}

void sub_10019A4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t), uint64_t a10)
{
  uint64_t v61 = a3;
  uint64_t v62 = a7;
  uint64_t v60 = a2;
  uint64_t v15 = type metadata accessor for BeneficiaryRemovedMessage();
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  unint64_t v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = (char *)&v56 + *(int *)(v21 + 28) - v22;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = v24;
  uint64_t v27 = (uint64_t)v23;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v26, a1, v25);
  *uint64_t v23 = 3;
  uint64_t v28 = qword_100320B90;
  id v29 = a5;
  id v30 = a6;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v64 = (void (*)(uint64_t))v29;
  id v63 = v30;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  sub_100007288(v59, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v23, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
  id v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v58 = a8;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v66 = (void *)swift_slowAlloc();
    os_log_type_t v57 = v23;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v35 = sub_1000DB9CC();
    uint64_t v65 = sub_100135190(v35, v36, (uint64_t *)&v66);
    uint64_t v27 = (uint64_t)v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Created beneficiary removed message - %s.\nSending....", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a8 = v58;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
  }

  os_log_type_t v37 = v64;
  sub_100008EF8((void *)(a4 + 16), *(void *)(a4 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    unint64_t v38 = v55;
  }
  else
  {
    unint64_t v38 = &_swiftEmptySetSingleton;
  }
  id v39 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v41 = [v39 initWithHandle:v40];

  if (v41)
  {
    uint64_t v64 = a9;
    uint64_t v42 = qword_100320B70;
    id v43 = v41;
    if (v42 != -1) {
      swift_once();
    }
    sub_100007288(v59, (uint64_t)qword_10033E700);
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Destination is valid!", v46, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC(v27, v43, (uint64_t)v38, (void (*)(void))type metadata accessor for BeneficiaryRemovedMessage, &qword_100325D10, (void (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessage);
    unint64_t v54 = v63;
    sub_1000C9014(0, (uint64_t)v37, v63, v62, a8, v64, a10);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v59, (uint64_t)qword_10033E748);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    unint64_t v54 = v63;
    if (v49)
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unable to generate destination from handle.", v50, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v65 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v51 = v66;
    uint64_t v52 = v37;
    id v53 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10019A284((uint64_t)v51, (uint64_t)v52, v53, v62, a8, a9, a10);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_10019D4F8(v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
  swift_release_n();
  swift_bridgeObjectRelease_n();
}

unint64_t sub_10019AC58()
{
  unint64_t result = qword_100329C90;
  if (!qword_100329C90)
  {
    sub_10000850C(255, &qword_100325A20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100329C90);
  }
  return result;
}

uint64_t sub_10019ACC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10019AD08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v14 = String.init<A>(describing:)();
      sub_100135190(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error sending IDS Message for Inheritance Invitation Response: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return sub_1000CA7BC(a1, a2, a3, a4, a5);
}

void sub_10019AF3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v55 = a1;
  uint64_t v56 = a8;
  uint64_t v53 = a5;
  uint64_t v13 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v14 = v13 - 8;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = (char *)&v52 + *(int *)(v14 + 28) - v20;
  uint64_t v23 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, a3, v23);
  *uint64_t v21 = 0;
  v21[*(int *)(v14 + 32)] = a4;
  uint64_t v24 = qword_100320B90;
  id v25 = a6;
  id v26 = a7;
  uint64_t v58 = a9;
  swift_retain_n();
  id v27 = v25;
  id v57 = v26;
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100007288(v54, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    id v52 = v27;
    id v31 = (uint8_t *)v30;
    uint64_t v60 = (void *)swift_slowAlloc();
    *(_DWORD *)id v31 = 136315138;
    uint64_t v32 = sub_1002057D0();
    uint64_t v59 = sub_100135190(v32, v33, (uint64_t *)&v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Created invitation response message - %s.\nResponding to invitation...", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v27 = v52;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  }

  uint64_t v34 = v58;
  sub_100008EF8((void *)(v53 + 16), *(void *)(v53 + 40));
  uint64_t v35 = v57;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    unint64_t v36 = v51;
  }
  else
  {
    unint64_t v36 = &_swiftEmptySetSingleton;
  }
  id v37 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v39 = [v37 initWithHandle:v38];

  if (v39)
  {
    uint64_t v40 = qword_100320B70;
    id v41 = v39;
    if (v40 != -1) {
      swift_once();
    }
    sub_100007288(v54, (uint64_t)qword_10033E700);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Destination is valid!", v44, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v21, v41, (uint64_t)v36, (void (*)(void))type metadata accessor for InheritanceInvitationResponseMessage, &qword_100329CA0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
    sub_1000C5F10(v35, v56, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v54, (uint64_t)qword_10033E748);
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to generate destination from handle.", v47, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v59 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v48 = v60;
    id v49 = v27;
    id v50 = v35;
    swift_retain();
    sub_10019AD08((uint64_t)v48, (uint64_t)v49, v50, v56, v34);
    swift_bridgeObjectRelease();

    swift_release();
  }
  sub_10019D4F8((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  swift_release_n();
}

void sub_10019B644(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v9 = String.init<A>(describing:)();
      sub_100135190(v9, v10, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error sending IDS Message for Inheritance Invitation Response: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v11 = (void *)_convertErrorToNSError(_:)();
    if ((AAUnderTest.getter() & 1) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v11 = 0;
    if ((AAUnderTest.getter() & 1) == 0)
    {
LABEL_10:
      sub_100009F04(&qword_100324668);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      strcpy((char *)(inited + 32), "inviteAction");
      *(unsigned char *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      LOBYTE(v14) = 2;
      String.init<A>(describing:)();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(inited + 48) = v13;
      strcpy((char *)(inited + 56), "numOfRelation");
      *(_WORD *)(inited + 70) = -4864;
      *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
      sub_10022175C(inited);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
      swift_bridgeObjectRelease();
    }
  }

  if (a3) {
    a3(a1);
  }
}

uint64_t sub_10019B960(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v52 = a5;
  uint64_t v54 = a1;
  uint64_t v14 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v15 = v14 - 8;
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)v51 - v21;
  uint64_t v23 = (char *)v51 + *(int *)(v15 + 28) - v21;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = a3;
  id v26 = (void (*)(uint64_t))a7;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v25, v24);
  *uint64_t v22 = 0;
  v22[*(int *)(v15 + 32)] = a4;
  id v27 = a6;
  sub_100011D2C(a7);
  id v55 = v27;
  sub_100011D2C(a7);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  sub_100007288(v53, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    v51[2] = a8;
    id v31 = (uint8_t *)v30;
    id v57 = (void *)swift_slowAlloc();
    v51[1] = a2;
    *(_DWORD *)id v31 = 136315138;
    uint64_t v32 = sub_1002057D0();
    uint64_t v56 = sub_100135190(v32, v33, (uint64_t *)&v57);
    id v26 = (void (*)(uint64_t))a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Created invitation response message - %s.\nResponding to invitation...", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  }

  sub_100008EF8((void *)(v52 + 16), *(void *)(v52 + 40));
  uint64_t v34 = v55;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    uint64_t v35 = v50;
  }
  else
  {
    uint64_t v35 = &_swiftEmptySetSingleton;
  }
  id v36 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v36 initWithHandle:v37];

  if (v38)
  {
    uint64_t v39 = qword_100320B70;
    id v40 = v38;
    if (v39 != -1) {
      swift_once();
    }
    sub_100007288(v53, (uint64_t)qword_10033E700);
    id v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Destination is valid!", v43, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v22, v40, (uint64_t)v35, (void (*)(void))type metadata accessor for InheritanceInvitationResponseMessage, &qword_100329CA0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
    sub_1000D32F4(0, (uint64_t)v34, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v53, (uint64_t)qword_10033E748);
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to generate destination from handle.", v46, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v56 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v47 = v57;
    id v48 = v34;
    sub_100011D2C((uint64_t)v26);
    sub_10019B644((uint64_t)v47, (uint64_t)v48, v26);
    sub_100011358((uint64_t)v26);
    swift_bridgeObjectRelease();
  }
  sub_10019D4F8((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);

  sub_100011358((uint64_t)v26);
  return sub_100011358((uint64_t)v26);
}

uint64_t sub_10019C06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a5;
  uint64_t v50 = a2;
  uint64_t v11 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v12 = v11 - 8;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = (char *)&v46 + *(int *)(v12 + 28) - v18;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = v20;
  uint64_t v23 = (void (*)(uint64_t))a6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v22, a4, v21);
  sub_10019D490(a1, (uint64_t)&v19[*(int *)(v12 + 32)], (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  unsigned char *v19 = 1;
  sub_100011D2C(a6);
  sub_100011D2C(a6);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100007288(v49, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v47 = a7;
    id v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    os_log_type_t v46 = (void (*)(uint64_t))a6;
    uint64_t v52 = (void *)v28;
    *(_DWORD *)id v27 = 136315138;
    uint64_t v29 = sub_1000E3D60();
    uint64_t v51 = sub_100135190(v29, v30, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created share accessKey message - %s.\nSending....", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v46;
    swift_slowDealloc();
    a7 = v47;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_100008EF8((void *)(v48 + 16), *(void *)(v48 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    id v31 = v45;
  }
  else
  {
    id v31 = &_swiftEmptySetSingleton;
  }
  id v32 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v34 = [v32 initWithHandle:v33];

  if (v34)
  {
    uint64_t v35 = qword_100320B70;
    id v36 = v34;
    if (v35 != -1) {
      swift_once();
    }
    sub_100007288(v49, (uint64_t)qword_10033E700);
    NSString v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Destination is valid!", v39, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v19, v36, (uint64_t)v31, (void (*)(void))type metadata accessor for InheritanceAccessKeyMessage, &qword_1003265A8, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
    if (v23) {
      v23(0);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v49, (uint64_t)qword_10033E748);
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to generate destination from handle.", v42, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v51 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v43 = v52;
    sub_100011D2C((uint64_t)v23);
    sub_100199030((uint64_t)v43, v23, a7, "Error sending IDS Message for Share Access Key: %s");
    swift_bridgeObjectRelease();
  }
  sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  sub_100011358((uint64_t)v23);
  return sub_100011358((uint64_t)v23);
}

uint64_t sub_10019C744(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a5;
  uint64_t v50 = a1;
  uint64_t v11 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v12 = v11 - 8;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = (char *)&v46 + *(int *)(v12 + 28) - v18;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = v20;
  uint64_t v23 = (void (*)(uint64_t))a6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v22, a3, v21);
  unsigned char *v19 = 0;
  v19[*(int *)(v12 + 32)] = a4;
  sub_100011D2C(a6);
  sub_100011D2C(a6);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100007288(v49, (uint64_t)qword_10033E760);
  sub_10019D490((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v47 = a7;
    id v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    os_log_type_t v46 = (void (*)(uint64_t))a6;
    uint64_t v52 = (void *)v28;
    *(_DWORD *)id v27 = 136315138;
    uint64_t v29 = sub_1002057D0();
    uint64_t v51 = sub_100135190(v29, v30, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created invitation response message - %s.\nResponding to invitation...", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v46;
    swift_slowDealloc();
    a7 = v47;
    swift_slowDealloc();
  }
  else
  {
    sub_10019D4F8((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  }

  sub_100008EF8((void *)(v48 + 16), *(void *)(v48 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10019D12C((unint64_t)_swiftEmptyArrayStorage, &qword_100329C88, &qword_100325A20);
    id v31 = v45;
  }
  else
  {
    id v31 = &_swiftEmptySetSingleton;
  }
  id v32 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v34 = [v32 initWithHandle:v33];

  if (v34)
  {
    uint64_t v35 = qword_100320B70;
    id v36 = v34;
    if (v35 != -1) {
      swift_once();
    }
    sub_100007288(v49, (uint64_t)qword_10033E700);
    NSString v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Destination is valid!", v39, 2u);
      swift_slowDealloc();
    }

    sub_1001975DC((uint64_t)v19, v36, (uint64_t)v31, (void (*)(void))type metadata accessor for InheritanceInvitationResponseMessage, &qword_100329CA0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
    if (v23) {
      v23(0);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v49, (uint64_t)qword_10033E748);
    id v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to generate destination from handle.", v42, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v51 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10019ACC0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v43 = v52;
    sub_100011D2C((uint64_t)v23);
    sub_100199030((uint64_t)v43, v23, a7, "Error sending IDS Message for Inheritance Invitation Response: %s");
    swift_bridgeObjectRelease();
  }
  sub_10019D4F8((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  sub_100011358((uint64_t)v23);
  return sub_100011358((uint64_t)v23);
}

void *sub_10019CDF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EntityIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  os_log_type_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v39 = (char *)&v32 - v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    sub_100009F04(&qword_100329CD8);
    uint64_t v11 = static _SetStorage.allocate(capacity:)();
    uint64_t v12 = 0;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v13 = v3 + 16;
    NSString v37 = v14;
    uint64_t v38 = v11 + 56;
    uint64_t v15 = *(unsigned __int8 *)(v13 + 64);
    uint64_t v34 = v10;
    uint64_t v35 = a1 + ((v15 + 32) & ~v15);
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    NSString v33 = (uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 16);
    while (1)
    {
      uint64_t v36 = v12;
      v37(v39, v35 + v16 * v12, v2);
      sub_10019ACC0(&qword_100329CE0, (void (*)(uint64_t))&type metadata accessor for EntityIdentifier);
      uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v19 = ~(-1 << *(unsigned char *)(v11 + 32));
      unint64_t v20 = v18 & v19;
      unint64_t v21 = (v18 & (unint64_t)v19) >> 6;
      uint64_t v22 = *(void *)(v38 + 8 * v21);
      uint64_t v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        while (1)
        {
          uint64_t v24 = v13;
          v37(v7, *(void *)(v11 + 48) + v20 * v16, v2);
          sub_10019ACC0(&qword_100329CE8, (void (*)(uint64_t))&type metadata accessor for EntityIdentifier);
          char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v26 = *v17;
          (*v17)(v7, v2);
          if (v25) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v19;
          unint64_t v21 = v20 >> 6;
          uint64_t v22 = *(void *)(v38 + 8 * (v20 >> 6));
          uint64_t v23 = 1 << v20;
          uint64_t v13 = v24;
          if ((v22 & (1 << v20)) == 0) {
            goto LABEL_8;
          }
        }
        v26(v39, v2);
        uint64_t v13 = v24;
      }
      else
      {
LABEL_8:
        id v27 = v39;
        *(void *)(v38 + 8 * v21) = v23 | v22;
        uint64_t result = (void *)(*v33)(*(void *)(v11 + 48) + v20 * v16, v27, v2);
        uint64_t v29 = *(void *)(v11 + 16);
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }
        *(void *)(v11 + 16) = v31;
      }
      uint64_t v12 = v36 + 1;
      if (v36 + 1 == v34) {
        return (void *)v11;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_10019D110(unint64_t a1)
{
}

void sub_10019D12C(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_100009F04(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10000850C(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10000850C(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10019D490(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10019D4F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10019D558(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    char v4 = sub_10019D91C(v3, a1);
    swift_bridgeObjectRelease();
    if (v4)
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100007288(v5, (uint64_t)qword_10033E700);
      swift_bridgeObjectRetain_n();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v9 = Set.description.getter();
        unint64_t v11 = v10;
        swift_bridgeObjectRelease();
        sub_100135190(v9, v11, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Dataclass App Install Observer - Ignoring %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return;
    }
    id v15 = [*(id *)(*sub_100008EF8((void *)(v1 + 64), *(void *)(v1 + 88))+ 16) aa_appleAccounts];
    if (v15)
    {
      uint64_t v16 = v15;
      sub_10019E768();
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v18) {
          goto LABEL_19;
        }
      }
      else if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_19:
        sub_10019DC00(v17);
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
    }
    unint64_t v17 = (unint64_t)&_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E700);
  oslog = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Dataclass App Install Observer - No apps provided.", v14, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10019D91C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    while (1)
    {
      int64_t v12 = v11;
      if (!v8) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_31;
      }
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_31:
      uint64_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v24 = *(void *)(v5 + 48);
        char v25 = (void *)(v24 + 16 * v23);
        BOOL v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = 0;
LABEL_45:
          sub_10018FE4C();
          return v30;
        }
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          uint64_t v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_44;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    goto LABEL_45;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_30;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_10019DC00(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_10;
    }
  }
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  unint64_t v13 = v1 & 0xC000000000000001;
  uint64_t v14 = v2;
  unint64_t v15 = v1;
  do
  {
    if (v13) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v1 + 8 * v4 + 32);
    }
    uint64_t v6 = v5;
    ++v4;
    uint64_t v8 = v16[5];
    uint64_t v7 = v16[6];
    sub_100008EF8(v16 + 2, v8);
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    *(void *)(v10 + 24) = v6;
    int64_t v11 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v7 + 8);
    swift_retain();
    id v12 = v6;
    v11(&unk_100329E10, v10, v8, v7);

    swift_release();
    swift_release();
    unint64_t v1 = v15;
  }
  while (v14 != v4);
LABEL_10:

  return swift_bridgeObjectRelease();
}

uint64_t sub_10019DDB4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return _swift_task_switch(sub_10019DE44, 0, 0);
}

uint64_t sub_10019DE44()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[10] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[9];
    sub_100008EF8((void *)(Strong + 64), *(void *)(Strong + 88));
    unint64_t v3 = (void *)swift_task_alloc();
    v0[11] = v3;
    *unint64_t v3 = v0;
    v3[1] = sub_10019E04C;
    return sub_100051A48(v2);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E700);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Dataclass App Install Observer - Missing reference to self.", v8, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10019E04C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 96) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10019E3BC;
  }
  else {
    uint64_t v4 = sub_10019E18C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019E18C()
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[12];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E700);
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[12];
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    if (v6)
    {
      v0[7] = v3;
      uint64_t v9 = v3;
    }
    else
    {
      v0[6] = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v0[12];

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Dataclass App Install Observer - Refreshed %@", v7, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v10 = v3;
  }
  else
  {

    uint64_t v10 = v4;
    uint64_t v4 = v3;
  }
  swift_release();

  int64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10019E3BC()
{
  swift_release();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E700);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  os_log_type_t v7 = (void *)v0[9];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[5] = v7;
    id v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Dataclass App Install Observer - Failed to refresh %@", v8, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    uint64_t v4 = v0[9];
  }

  int64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10019E5D8()
{
  sub_100008EA8(v0 + 16);
  swift_bridgeObjectRelease();
  sub_100008EA8(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DataclassAppInstallObserving()
{
  return self;
}

uint64_t sub_10019E644()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019E67C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019E6BC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100025248;
  *(_OWORD *)(v2 + 64) = v3;
  return _swift_task_switch(sub_10019DE44, 0, 0);
}

unint64_t sub_10019E768()
{
  unint64_t result = qword_100329E18;
  if (!qword_100329E18)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100329E18);
  }
  return result;
}

uint64_t sub_10019E7A8(uint64_t a1, uint64_t a2)
{
  if (qword_100320C68 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1, a2);
  sub_100009F04(&qword_100329EC0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v3;
}

uint64_t sub_10019E898(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (qword_100320C68 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_100329E20;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_10019F5C4;
  *(void *)(v6 + 24) = v5;
  v9[4] = sub_1000B9DA0;
  v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100030494;
  v9[3] = &unk_1002FEB70;
  os_log_type_t v7 = _Block_copy(v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10019EA48()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_100033B88();
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_10019F530();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100329E20 = result;
  return result;
}

void sub_10019EC48(unint64_t *a1@<X8>)
{
  unint64_t v2 = sub_100221BB8((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E790);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Preflight results are being fetched from UserDefaults", v6, 2u);
    swift_slowDealloc();
  }

  id v7 = [self getCustodianInfo];
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v9 = sub_100221618((uint64_t)_swiftEmptyArrayStorage);
  }
  AnyHashable.init<A>(_:)();
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100135A98((uint64_t)v20), (v11 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v21);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100098CF0((uint64_t)v20);
  if (*((void *)&v22 + 1))
  {
    sub_100009F04(&qword_100329EC0);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD000000000000010;
      swift_bridgeObjectRetain_n();
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v12, v13))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_21;
      }
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      unint64_t v23 = a1;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v15 = Dictionary.description.getter();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      *(void *)&long long v21 = sub_100135190(v15, v17, v20);
      a1 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Preflight results fetched from UserDefaults %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_19;
    }
  }
  else
  {
    sub_100058764((uint64_t)&v21);
  }
  id v12 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v18, "Preflight results not found in UserDefaults", v19, 2u);
LABEL_19:
    swift_slowDealloc();
  }

LABEL_21:
  *a1 = v2;
}

void sub_10019F048(uint64_t a1)
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E790);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v6 = Dictionary.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    *(void *)&long long v16 = sub_100135190(v6, v8, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preflight results are being set in UserDefaults: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v9 = self;
  id v10 = [v9 getCustodianInfo];
  if (v10)
  {
    char v11 = v10;
    unint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v12 = sub_100221618((uint64_t)_swiftEmptyArrayStorage);
  }
  *((void *)&v16 + 1) = 0x800000010029ED70;
  AnyHashable.init<A>(_:)();
  uint64_t v17 = sub_100009F04(&qword_100329EC0);
  *(void *)&long long v16 = a1;
  sub_100009F48(&v16, v15);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10022C974(v15, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_100098CF0((uint64_t)v18);
  if (*(void *)(v12 + 16))
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setCustodianInfo:isa];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10019F370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (qword_100320C68 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1, a2);
  sub_100009F04(&qword_100329EC0);
  OS_dispatch_queue.sync<A>(execute:)();
  if (!*(void *)(v10 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  sub_1001358B8(v3, a2);
  char v5 = v4;
  swift_bridgeObjectRelease();
  if (!*(void *)(v10 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001358B8(v3, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  int v8 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    return v8 ^ 1u;
  }
  return 0;
}

uint64_t type metadata accessor for CustodianDefaults()
{
  return self;
}

void sub_10019F514(unint64_t *a1@<X8>)
{
}

unint64_t sub_10019F530()
{
  unint64_t result = qword_1003222E0;
  if (!qword_1003222E0)
  {
    sub_1000112CC((uint64_t *)&unk_10032A870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003222E0);
  }
  return result;
}

uint64_t sub_10019F58C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10019F5C4()
{
  sub_10019F048(*(void *)(v0 + 16));
}

uint64_t sub_10019F5CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10019F5DC(unint64_t *a1@<X8>)
{
}

uint64_t sub_10019F5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v6 + 16);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a3;
  v20[3] = v6;
  v20[4] = a1;
  uint64_t v20[5] = a2;
  v20[6] = a4;
  v20[7] = a5;
  aBlock[4] = sub_1001A01CC;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FEC40;
  long long v21 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  BOOL v26 = _swiftEmptyArrayStorage;
  sub_100009530((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v24);
  return swift_release();
}

uint64_t sub_10019F8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10 = (void *)_convertErrorToNSError(_:)();
  id v11 = [v10 aa_partialErrorsByName];

  if (!v11) {
    goto LABEL_5;
  }
  sub_100009F04((uint64_t *)&unk_100325850);
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v12 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0x8000000000000000;
    sub_10022C0AC(a1, a3, a4, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 24) = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = swift_endAccess();
    return a5(v13);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1001A01DC(v12, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v13 = swift_bridgeObjectRelease();
  return a5(v13);
}

uint64_t sub_10019FA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v3 + 16);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_1001A0170;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FEBF0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100009530((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

void sub_10019FD1C(uint64_t a1, void (*a2)())
{
  char v4 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 24) + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    uint64_t v7 = *v4;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v7;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_100009530((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v8 = v9;
    a2();
  }
  else
  {
    ((void (*)(void))a2)(0);
  }
}

uint64_t sub_10019FE7C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PartialErrorHandler()
{
  return self;
}

uint64_t sub_10019FEE0()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100009530((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 24) = sub_100220B90((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_1001A0130()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001A0170()
{
  sub_10019FD1C(*(void *)(v0 + 16), *(void (**)())(v0 + 24));
}

uint64_t sub_1001A017C()
{
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001A01CC()
{
  return sub_10019F8D8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48));
}

uint64_t sub_1001A01DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  uint64_t v7 = (void *)(a2 + 24);
  int64_t v38 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v43)
  {
    if (v6)
    {
      uint64_t v42 = (v6 - 1) & v6;
      int64_t v43 = i;
      unint64_t v10 = __clz(__rbit64(v6)) | (i << 6);
    }
    else
    {
      int64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_38;
      }
      if (v11 >= v38) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v37 + 8 * v11);
      int64_t v13 = i + 1;
      if (!v12)
      {
        int64_t v13 = i + 2;
        if (i + 2 >= v38) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = i + 3;
          if (i + 3 >= v38) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = i + 4;
            if (i + 4 >= v38) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v37 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = i + 5;
              if (i + 5 >= v38) {
                return swift_release();
              }
              unint64_t v12 = *(void *)(v37 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_39;
                  }
                  if (v13 >= v38) {
                    return swift_release();
                  }
                  unint64_t v12 = *(void *)(v37 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v13 = i + 5;
            }
          }
        }
      }
LABEL_23:
      uint64_t v42 = (v12 - 1) & v12;
      int64_t v43 = v13;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = (void *)v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 59;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = v16;
    v20._object = v17;
    String.append(_:)(v20);
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v22 = (void *)*v7;
    uint64_t v44 = (void *)*v7;
    *uint64_t v7 = 0x8000000000000000;
    unint64_t v24 = sub_1001358B8(a3, a4);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (v22[3] >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        int64_t v31 = v44;
        if (v23) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10022CE80();
        int64_t v31 = v44;
        if (v28) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100229B98(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = sub_1001358B8(a3, a4);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_40;
      }
      unint64_t v24 = v29;
      int64_t v31 = v44;
      if (v28)
      {
LABEL_4:
        uint64_t v9 = v31[7];
        swift_errorRelease();
        *(void *)(v9 + 8 * v24) = v18;
        goto LABEL_5;
      }
    }
    v31[(v24 >> 6) + 8] |= 1 << v24;
    uint64_t v32 = (uint64_t *)(v31[6] + 16 * v24);
    *uint64_t v32 = a3;
    v32[1] = a4;
    *(void *)(v31[7] + 8 * v24) = v18;
    uint64_t v33 = v31[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_37;
    }
    v31[2] = v35;
    swift_bridgeObjectRetain();
LABEL_5:
    *uint64_t v7 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    unint64_t v6 = v42;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A0550()
{
  sub_1001A09AC();

  return swift_deallocClassInstance();
}

void sub_1001A0584()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 16))
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E700);
    os_log_t v19 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v8, "Already registered XPC observer.", v9, 2u);
      swift_slowDealloc();
    }
    os_log_t v10 = v19;
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E700);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Registering XPC observer.", v14, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + 16) = 1;
    sub_1000093D0();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
    uint64_t v15 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_1001A0BEC;
    void aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001A0958;
    aBlock[3] = &unk_1002FEC90;
    uint64_t v17 = _Block_copy(aBlock);
    swift_release();
    swift_beginAccess();
    notify_register_dispatch("com.apple.jett.switch.environmentChange.idms.complete", (int *)(v1 + 20), v15, v17);
    swift_endAccess();
    _Block_release(v17);
  }
}

uint64_t sub_1001A0900()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    -[XPCNotificationObserver didChangeEnvironment]_0();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001A0958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

void sub_1001A09AC()
{
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t v1 = v0;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E700);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Canceling XPC observer.", v5, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + 16) = 0;
    swift_beginAccess();
    notify_cancel(*(_DWORD *)(v1 + 20));
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E700);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Already canceled XPC observer.", v8, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t type metadata accessor for XPCNotificationObserver()
{
  return self;
}

uint64_t sub_1001A0BB4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A0BEC()
{
  return sub_1001A0900();
}

uint64_t sub_1001A0D18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E7D8);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Benefactor Manatee migration started.", v9, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v3 + 16), *(void *)(v3 + 40));
  os_log_t v10 = (void *)swift_allocObject();
  void v10[2] = a1;
  v10[3] = a2;
  v10[4] = v3;
  swift_retain();
  swift_retain();
  sub_1000EAAFC((uint64_t)sub_1001A2140, (uint64_t)v10);

  return swift_release();
}

uint64_t sub_1001A0E78(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  char v41 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v42 - 8);
  __chkstk_darwin(v42, v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  Swift::String v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      BOOL v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v44 = a3;
      os_log_type_t v45 = (void *)a1;
      aBlock[0] = v35;
      *(_DWORD *)BOOL v34 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v36 = String.init<A>(describing:)();
      os_log_type_t v45 = (void *)sub_100135190(v36, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to fetch Benefactors. Aborting migration : %s", v34, 0xCu);
      swift_arrayDestroy();
      a3 = v44;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v39 = v10;
    uint64_t v44 = a3;
    uint64_t v21 = *(void *)(a1 + 16);
    if (v21)
    {
      uint64_t v38 = a4;
      uint64_t v22 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
      uint64_t v23 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v24 = *(void *)(v22 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_1001A149C(v23);
        v23 += v24;
        --v21;
      }
      while (v21);
      sub_100007844(a1, 0);
      a4 = v38;
    }
    sub_1000093D0();
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for DispatchQoS.QoSClass.default(_:), v16);
    uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    BOOL v26 = (void *)swift_allocObject();
    v26[2] = v44;
    uint64_t v26[3] = a4;
    v26[4] = a5;
    aBlock[4] = (uint64_t)sub_1001A327C;
    void aBlock[5] = (uint64_t)v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100007244;
    aBlock[3] = (uint64_t)&unk_1002FED18;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    os_log_type_t v45 = _swiftEmptyArrayStorage;
    sub_10000A788((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    char v28 = v41;
    uint64_t v29 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v42);
    return swift_release();
  }
}

void sub_1001A149C(uint64_t a1)
{
  uint64_t v63 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v60 = *(void *)(v63 - 8);
  uint64_t v2 = *(void *)(v60 + 64);
  uint64_t v4 = __chkstk_darwin(v63, v3);
  uint64_t v5 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v61 = (uint64_t)&v54 - v8;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v62 = (char *)&v54 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v54 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v54 - v21;
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100007288(v23, (uint64_t)qword_10033E7D8);
  sub_1001A3288(a1, (uint64_t)v22);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v58 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v28 = (uint8_t *)v27;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v65 = v56;
    uint64_t v57 = v24;
    id v55 = v28;
    *(_DWORD *)char v28 = 136315138;
    uint64_t v54 = v28 + 4;
    type metadata accessor for UUID();
    sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_100135190(v29, v30, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001A32EC((uint64_t)v22);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Migrating Records for beneficiaryID - %s.", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v58;
    swift_slowDealloc();
  }
  else
  {
    sub_1001A32EC((uint64_t)v22);
  }

  uint64_t v32 = (uint64_t)v62;
  uint64_t v31 = (int *)v63;
  if (*(unsigned char *)(a1 + *(int *)(v63 + 36)))
  {
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "BenefactorInfoRecord is already in Manatee.", v35, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_1001A3288(a1, (uint64_t)v15);
    uint64_t v36 = (uint64_t)v15;
    uint64_t v37 = type metadata accessor for UUID();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
    v38(v32, v36, v37);
    v38(v32 + v31[7], v36 + v31[7], v37);
    uint64_t v39 = v31[8];
    if (*(unsigned char *)(v36 + v31[9]))
    {
      uint64_t v40 = *(void *)(v36 + v39);
      unint64_t v41 = *(void *)(v36 + v39 + 8);
      uint64_t v42 = (uint64_t *)(v32 + v39);
      *uint64_t v42 = v40;
      v42[1] = v41;
      sub_100013140(v40, v41);
    }
    else
    {
      *(_OWORD *)(v32 + v39) = xmmword_1002A9C60;
    }
    uint64_t v43 = v31[5];
    uint64_t v45 = *(void *)(v36 + v43);
    uint64_t v44 = *(void *)(v36 + v43 + 8);
    uint64_t v46 = (void *)(v32 + v43);
    *uint64_t v46 = v45;
    v46[1] = v44;
    *(void *)(v32 + v31[6]) = 2;
    swift_bridgeObjectRetain();
    sub_1001A32EC(v36);
    *(unsigned char *)(v32 + v31[9]) = 1;
    sub_1001A3348(v32, (uint64_t)v19);
    uint64_t v47 = v59;
    dispatch_group_enter(*(dispatch_group_t *)(v59 + 176));
    sub_100008EF8((void *)(v47 + 16), *(void *)(v47 + 40));
    uint64_t v48 = swift_allocObject();
    swift_weakInit();
    uint64_t v49 = v61;
    sub_1001A3288((uint64_t)v19, v61);
    sub_1001A3288(a1, (uint64_t)v5);
    uint64_t v50 = *(unsigned __int8 *)(v60 + 80);
    uint64_t v51 = (v50 + 24) & ~v50;
    uint64_t v52 = (v2 + v50 + v51) & ~v50;
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v48;
    sub_1001A3348(v49, v53 + v51);
    sub_1001A3348((uint64_t)v5, v53 + v52);
    swift_retain();
    sub_1000EB800((uint64_t)v19, (uint64_t)sub_1001A3578, v53);
    swift_release();
    sub_1001A32EC((uint64_t)v19);
    swift_release();
  }
}

uint64_t sub_1001A1A34(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E7D8);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Benefactor Manatee migration complete.", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = *(void *)(a3 + 184);
  swift_errorRetain();
  a1(v9);

  return swift_errorRelease();
}

uint64_t sub_1001A1B50()
{
  sub_100008EA8(v0 + 16);
  sub_1000D9D10(v0 + 56);

  swift_errorRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BenefactorManateeMigrator()
{
  return self;
}

uint64_t sub_1001A1BC4(uint64_t a1, uint64_t a2)
{
  return sub_1001A0D18(a1, a2);
}

uint64_t sub_1001A1BE8()
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E7D8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Manatee status changed, fetching new manatee status.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_1000F02FC((uint64_t)sub_1001A3974, v4);
  return swift_release_n();
}

void sub_1001A1D18(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v17 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v17 = sub_100135190(v9, v10, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to fetch manatee status: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
      return;
    }
    sub_100080A98(a1, 1);
    sub_100080A98(a1, 1);
    swift_errorRelease();
    goto LABEL_19;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E748);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Account is not manatee, skipping manatee migration.", v5, 2u);
      swift_slowDealloc();
    }
LABEL_19:

    return;
  }
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E7D8);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Account is now manatee, kicking off migration.", v14, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1001A0D18((uint64_t)OSTransaction.complete(), 0);
    swift_release();
  }
}

uint64_t sub_1001A2140(uint64_t a1, char a2)
{
  return sub_1001A0E78(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void sub_1001A2150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v48 = a3;
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v47 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8, v8);
  uint64_t v50 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v51 - 8);
  __chkstk_darwin(v51, v14);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (uint64_t *)((char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v20, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(void *)&v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      uint64_t v54 = v21;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v54 = sub_100135190(v26, v27, (uint64_t *)v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to save BenefactorInfoRecord - %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(void *)(Strong + 184) = v21;
      swift_errorRetain();
      swift_errorRelease();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v44 = swift_weakLoadStrong();
    if (v44)
    {
      uint64_t v45 = *(id *)(v44 + 176);
      swift_release();
      dispatch_group_leave(v45);
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v46 = sub_100007288(v28, (uint64_t)qword_10033E7D8);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "BenefactorInfoRecord may have been accepted pre-CDP.\nRe-accepting and notifying the owner to prompt a new key transfer.", v31, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v32 = swift_weakLoadStrong();
    uint64_t v33 = v49;
    if (v32)
    {
      sub_1000D7478((_OWORD *)(v32 + 56), v53);
      swift_release();
      uint64_t v34 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v48, v51);
      sub_1001A3288(v33, (uint64_t)v12);
      unint64_t v35 = (*(unsigned __int8 *)(v47 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = a2;
      sub_1001A3348((uint64_t)v12, v36 + v35);
      swift_retain();
      sub_1000CDA60((uint64_t)v16, 1, 3u, (uint64_t)sub_1001A3748, v36);
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v34);
      sub_1000D9D10((uint64_t)v53);
    }
    uint64_t v37 = v50;
    sub_1001A3288(v33, v50);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(void *)&v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = sub_100135190(v41, v42, (uint64_t *)v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A32EC(v37);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Manatee migration complete for BenefactorInfoRecord with beneficiaryID - %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001A32EC(v37);
    }

    sub_100006574((uint64_t)v20, (uint64_t *)&unk_100325860);
  }
}

void sub_1001A289C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8, v9);
  uint64_t v10 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      v24[0] = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v15 = String.init<A>(describing:)();
      v24[0] = sub_100135190(v15, v16, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to notify owner of acceptance - %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(void *)(Strong + 184) = a1;
      swift_errorRetain();
      swift_errorRelease();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v22 = swift_weakLoadStrong();
    if (v22)
    {
      uint64_t v23 = *(id *)(v22 + 176);
      swift_release();
      dispatch_group_leave(v23);
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v17 = swift_weakLoadStrong();
    if (v17)
    {
      sub_100008EF8((void *)(v17 + 16), *(void *)(v17 + 40));
      uint64_t v18 = swift_allocObject();
      swift_weakInit();
      sub_1001A3288(a3, (uint64_t)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v20 = (void *)swift_allocObject();
      void v20[2] = v18;
      v20[3] = sub_1001A37BC;
      v20[4] = a2;
      sub_1001A3348((uint64_t)v10, (uint64_t)v20 + v19);
      swift_retain_n();
      swift_retain();
      sub_1000EBF58(a3, (uint64_t)sub_1001A38FC, (uint64_t)v20);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
}

void sub_1001A2C9C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = *(id *)(Strong + 176);
    swift_release();
    dispatch_group_leave(v1);
  }
}

uint64_t sub_1001A2D08(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a3;
  uint64_t v8 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)v42 - v14;
  uint64_t v16 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v16, v17);
  unint64_t v19 = (void *)((char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E7D8);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error removing non-manatee Benefactor record.", v24, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      *(void *)(Strong + 184) = v20;
      swift_errorRetain();
      swift_errorRelease();
      swift_release();
    }
    swift_errorRetain();
    v46(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = sub_100007288(v27, (uint64_t)qword_10033E7D8);
    sub_1001A3288(a5, (uint64_t)v15);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v45 = a4;
    if (v31)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v42[1] = v28;
      uint64_t v43 = a5;
      uint64_t v44 = v12;
      *(_DWORD *)uint64_t v32 = 136315138;
      v47[0] = v33;
      uint64_t v34 = (uint64_t *)&v15[*(int *)(v8 + 20)];
      uint64_t v36 = *v34;
      unint64_t v35 = v34[1];
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_100135190(v36, v35, v47);
      a5 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = v44;
      swift_bridgeObjectRelease();
      sub_1001A32EC((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Notified benefactor (%s).", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001A32EC((uint64_t)v15);
    }

    sub_1001A3288(a5, (uint64_t)v12);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v39 = 136315138;
      type metadata accessor for UUID();
      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v48 = sub_100135190(v40, v41, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001A32EC((uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Manatee migration complete for BenefactorInfoRecord with beneficiaryID - %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001A32EC((uint64_t)v12);
    }

    v46(0);
    return sub_100006574((uint64_t)v19, &qword_1003229D0);
  }
}

uint64_t sub_1001A327C()
{
  return sub_1001A1A34(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001A3288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BenefactorInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A32EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BenefactorInfoRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A3348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BenefactorInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A33AC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A33E4()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = (v4 + v2 + v3) & ~v2;
  uint64_t v7 = v6 + v4;
  swift_release();
  uint64_t v8 = v0 + v3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  v10(v8 + v1[9], v9);
  sub_100013198(*(void *)(v8 + v1[10]), *(void *)(v8 + v1[10] + 8));
  v10(v0 + v6, v9);
  swift_bridgeObjectRelease();
  v10(v0 + v6 + v1[9], v9);
  sub_100013198(*(void *)(v0 + v6 + v1[10]), *(void *)(v0 + v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v7, v5);
}

void sub_1001A3578(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + v5) & ~v4);

  sub_1001A2150(a1, v6, v1 + v5, v7);
}

uint64_t sub_1001A3618()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1001A3748(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1001A289C(a1, v4, v5);
}

void sub_1001A37BC()
{
}

uint64_t sub_1001A37C4()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001A38FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void (*)(uint64_t))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001A2D08(a1, v4, v5, v6, v7);
}

void sub_1001A3974(uint64_t a1, char a2)
{
}

id sub_1001A3980()
{
  type metadata accessor for DaemonStorageFactory();
  swift_initStackObject();
  id v1 = v0;
  sub_1000E4E84(v14);

  sub_100008A94((uint64_t)v14, (uint64_t)v12);
  if (qword_100320BE0 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_10033E838;
  uint64_t v3 = qword_100320C40;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = (uint64_t *)qword_10033E8B8;
  uint64_t v5 = sub_1000084BC((uint64_t)v12, v13);
  __chkstk_darwin(v5, v5);
  uint64_t v7 = (uint64_t *)&v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = *v7;
  swift_retain();
  id v10 = sub_1001A602C(v9, v2, v4);
  sub_100008EA8((uint64_t)v12);
  sub_100008EA8((uint64_t)v14);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v10;
}

id sub_1001A3B78()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleAccountDaemonManager();
  return [super dealloc];
}

uint64_t type metadata accessor for AppleAccountDaemonManager()
{
  return self;
}

uint64_t sub_1001A3DBC(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return _swift_task_switch(sub_1001A3DE0, 0, 0);
}

uint64_t sub_1001A3DE0()
{
  id v1 = [[*(id *)(v0 + 96) aa_altDSID];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *(void *)(v0 + 112) = v5;
    *(void *)(v0 + 120) = v7;
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 24);
    uint64_t v9 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 32);
    sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache), v8);
    *(void *)(v0 + 56) = v4;
    *(void *)(v0 + 16) = v5;
    *(void *)(v0 + 24) = v7;
    uint64_t v10 = *(void *)(*(void *)(v9 + 8) + 8);
    os_log_type_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 32)
                                                                              + **(int **)(v10 + 32));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1001A4160;
    return v24(v0 + 48, v0 + 56, v0 + 16, v8, v10);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void **)(v0 + 96);
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E700);
    id v15 = v13;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    unint64_t v19 = *(void **)(v0 + 96);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v0 + 40) = v19;
      id v22 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v19;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to get altDSID from account: %@", v20, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for AAError(0);
    *(void *)(v0 + 32) = -4410;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    os_log_type_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
}

uint64_t sub_1001A4160()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();

  return _swift_task_switch(sub_1001A4278, 0, 0);
}

uint64_t sub_1001A4278()
{
  os_log_type_t v17 = v0;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E700);
  id v3 = v1;
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  unint64_t v7 = v0[15];
  if (v6)
  {
    uint64_t v15 = v0[14];
    uint64_t v8 = (void *)v0[11];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    v0[9] = v8;
    id v10 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v8;

    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[10] = sub_100135190(v15, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cached login response (%@) for altDSID: %s", (uint8_t *)v9, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v11 = (void *)v0[11];

    swift_bridgeObjectRelease_n();
  }

  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1001A4690(void *a1, void *a2, void *aBlock, void *a4)
{
  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  id v8 = a1;
  id v9 = a2;
  id v10 = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  v4[6] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_1001A4780;
  v11[12] = v9;
  v11[13] = v10;
  v11[11] = v8;
  return _swift_task_switch(sub_1001A3DE0, 0, 0);
}

uint64_t sub_1001A4780()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  os_log_type_t v5 = *(void **)(*v1 + 32);
  BOOL v6 = *(void **)(*v1 + 24);
  unint64_t v7 = *(void **)(*v1 + 16);
  uint64_t v8 = *v1;
  swift_task_dealloc();

  uint64_t v9 = *(void *)(v3 + 40);
  if (v2)
  {
    id v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
  }
  _Block_release(*(const void **)(v4 + 40));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1001A493C(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return _swift_task_switch(sub_1001A495C, 0, 0);
}

uint64_t sub_1001A495C()
{
  id v1 = [*(id *)(v0 + 104) aa_altDSID];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    *(void *)(v0 + 120) = v4;
    *(void *)(v0 + 128) = v6;
    uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 24);
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 32);
    sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache), v7);
    *(void *)(v0 + 16) = v4;
    *(void *)(v0 + 24) = v6;
    uint64_t v9 = *(void *)(*(void *)(v8 + 8) + 8);
    os_log_type_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 40) + **(int **)(v9 + 40));
    id v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v10;
    void *v10 = v0;
    v10[1] = sub_1001A4CCC;
    return v23(v0 + 48, v0 + 16, v7, v9);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void **)(v0 + 104);
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E700);
    id v14 = v12;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = *(void **)(v0 + 104);
    if (v17)
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 138412290;
      *(void *)(v0 + 40) = v18;
      id v21 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v18;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to get altDSID from account: %@", v19, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    type metadata accessor for AAError(0);
    *(void *)(v0 + 32) = -4410;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    id v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
}

uint64_t sub_1001A4CCC()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001A4DC8, 0, 0);
}

uint64_t sub_1001A4DC8()
{
  os_log_type_t v23 = v0;
  uint64_t v1 = (void *)v0[6];
  if (v1)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E700);
    id v3 = v1;
    swift_bridgeObjectRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    unint64_t v7 = v0[16];
    if (v6)
    {
      uint64_t v21 = v0[15];
      uint64_t v8 = swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412546;
      v0[11] = v3;
      id v9 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v1;

      *(_WORD *)(v8 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[12] = sub_100135190(v21, v7, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Returning cached login response (%@) for altDSID: %s", (uint8_t *)v8, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    BOOL v17 = (uint64_t (*)(id))v0[1];
    return v17(v3);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = v0[16];
    if (v13)
    {
      uint64_t v15 = v0[15];
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v16 = 136315138;
      swift_bridgeObjectRetain();
      v0[10] = sub_100135190(v15, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cached login response not found for altDSID: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for AAError(0);
    v0[9] = -4411;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    unint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_1001A53EC(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001A54C8;
  v8[13] = v6;
  v8[14] = v7;
  return _swift_task_switch(sub_1001A495C, 0, 0);
}

uint64_t sub_1001A54C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  id v9 = *(void (***)(void, void, void))(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1001A5680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E700);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[AppleAccountDaemonManager urlConfiguration] called.", v9, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager + 24));
  return sub_100116004(a1, a2);
}

void sub_1001A581C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);
}

uint64_t sub_1001A589C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001A58D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A581C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1001A58DC()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001A5924()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100054724;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_10032A1F8 + dword_10032A1F8);
  return v6(v2, v3, v4);
}

uint64_t sub_1001A59D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100054724;
  return v6();
}

uint64_t sub_1001A5AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100054BDC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1001A5C50(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001A5D2C;
  return v6(a1);
}

uint64_t sub_1001A5D2C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001A5E24()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A5E5C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025248;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10032A218 + dword_10032A218);
  return v6(a1, v4);
}

uint64_t sub_1001A5F14()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A5F64()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025248;
  uint64_t v7 = (uint64_t (*)(void *, void *, void *, void *))((char *)&dword_10032A230 + dword_10032A230);
  return v7(v2, v3, v5, v4);
}

id sub_1001A602C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = type metadata accessor for StorageController();
  v21[3] = v7;
  v21[4] = &off_1002FBC50;
  v21[0] = a1;
  uint64_t v8 = (objc_class *)type metadata accessor for AppleAccountDaemonManager();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = sub_1000084BC((uint64_t)v21, v7);
  __chkstk_darwin(v10, v10);
  os_log_type_t v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = *v12;
  v20[3] = v7;
  v20[4] = &off_1002FBC50;
  v20[0] = v14;
  sub_100008A94((uint64_t)v20, (uint64_t)&v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_storageController]);
  uint64_t v15 = &v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache];
  *((void *)v15 + 3) = sub_100009F04(&qword_100323D18);
  *((void *)v15 + 4) = sub_1001A6634();
  *(void *)uint64_t v15 = a2;
  os_log_type_t v16 = &v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager];
  *((void *)v16 + 3) = v6;
  *((void *)v16 + 4) = &off_1002FBF48;
  *(void *)os_log_type_t v16 = a3;
  v19.receiver = v9;
  v19.super_class = v8;
  id v17 = [super init];
  sub_100008EA8((uint64_t)v20);
  sub_100008EA8((uint64_t)v21);
  return v17;
}

void sub_1001A61EC(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  _Block_copy(a2);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100007288(v4, (uint64_t)qword_10033E700);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  id v11 = a1;
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v26 = v10;
    uint64_t v27 = v4;
    uint64_t v28 = v9;
    uint64_t v29 = a2;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v31 = v25;
    *(_DWORD *)uint64_t v14 = 136315138;
    id v15 = [v11 aa_altDSID];
    if (!v15)
    {
      _Block_release(v29);

      __break(1u);
      return;
    }
    os_log_type_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v30 = sub_100135190(v17, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Account %s is deleted.\nChecking if it's the primary account…", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
    uint64_t v9 = v28;
    a2 = v29;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  if (objc_msgSend(v11, "aa_isAccountClass:", AAAccountClassPrimary))
  {
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Primary account is deleted. Purging the AAD storage…", v22, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for DataCryptor();
    swift_allocObject();
    sub_100208388(0xD000000000000017, 0x800000010029E5B0, 0x614364726F636572, 0xEB00000000656863);
    sub_1002095F8();
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_10009EA5C;
    *(void *)(v23 + 24) = v9;
    swift_retain();
    sub_10016C280((void (*)(uint64_t))sub_10009EB94);
    swift_release();
    swift_release();
  }
  else
  {
    (*((void (**)(const void *, void))a2 + 2))(a2, 0);
  }
  swift_release();
}

unint64_t sub_1001A6634()
{
  unint64_t result = qword_10032A260;
  if (!qword_10032A260)
  {
    sub_1000112CC(&qword_100323D18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032A260);
  }
  return result;
}

uint64_t sub_1001A6698()
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider;
  if (*(void *)(v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider);
  }
  else
  {
    uint64_t v2 = sub_1001A72B8();
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_1001A66FC(uint64_t a1, uint64_t a2, void (*a3)(NSObject *))
{
}

uint64_t sub_1001A670C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__xpcActivityScheduler;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__storageController;
  uint64_t v4 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1001A6808()
{
  return type metadata accessor for TrustedContactHealthScheduler();
}

uint64_t type metadata accessor for TrustedContactHealthScheduler()
{
  uint64_t result = qword_10032A2A8;
  if (!qword_10032A2A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001A685C()
{
  sub_10001BF34(319, (unint64_t *)&qword_100321520, (uint64_t *)&unk_100325DA0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1001A694C()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321600);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, *v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__xpcActivityScheduler, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v6 = sub_100008EF8(v10, v10[3]);
  uint64_t v7 = sub_1001A6698();
  sub_1001A6BC0(v7, *v6);
  swift_release();
  return sub_100008EA8((uint64_t)v10);
}

uint64_t sub_1001A6A84(void (*a1)(NSObject *), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v12 = sub_1001A6698();
  swift_retain();
  sub_1000B9148(0, v9, v11, v12, a1, a2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void sub_1001A6BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v7 = static String._fromUTF8Repairing(_:)();
  uint64_t v9 = v8;
  double v10 = sub_1000E3148();
  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v11 = (uint64_t)v10;
  if ((uint64_t)v10 >= 0) {
    uint64_t v12 = (uint64_t)v10;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  uint64_t v13 = v12 >> 1;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  uint64_t v15 = swift_allocObject();
  *(_WORD *)(v15 + 16) = 257;
  *(void *)(v15 + 24) = v13;
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v11;
  *(void *)(v15 + 48) = 8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1001A7780;
  *(void *)(v16 + 24) = v14;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain();
  uint64_t v17 = sub_100033778(v7, v9, (uint64_t)v6, (uint64_t)sub_100014B28, v15, (uint64_t)sub_100014B30, v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(a2 + 16) = v17;
  swift_release();
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for OSTransaction();
  swift_allocObject();
  uint64_t v19 = sub_100104754("com.apple.appleaccountd.trustedContacts.healthCheck", 51, 2);
  sub_1001DDECC(v19, v18);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_1001A6E54()
{
  sub_100009F04(&qword_100325EA0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1002AF350;
  uint64_t v1 = type metadata accessor for TrustedContactsDataSync();
  uint64_t v2 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322480);
  Dependency.init(dependencyId:config:)();
  sub_1001A77D0();
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D780);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 56) = v1;
  *(void *)(v0 + 64) = &off_1002FC6B8;
  *(void *)(v0 + 32) = v2;
  uint64_t v3 = type metadata accessor for TrustedContactsAwarenessSync();
  uint64_t v4 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = &off_1002FBA40;
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = type metadata accessor for CustodianOwnerHealthCheck();
  swift_allocObject();
  uint64_t v6 = sub_100273030();
  *(void *)(v0 + 136) = v5;
  *(void *)(v0 + 144) = &off_100303650;
  *(void *)(v0 + 112) = v6;
  uint64_t v7 = type metadata accessor for CustodianHealthCheck();
  uint64_t v8 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D700);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 176) = v7;
  *(void *)(v0 + 184) = &off_1002F9820;
  *(void *)(v0 + 152) = v8;
  uint64_t v9 = type metadata accessor for BenefactorAccessKeyHealthCheck();
  uint64_t v10 = swift_allocObject();
  type metadata accessor for InheritanceRequestManager();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 216) = v9;
  *(void *)(v0 + 224) = &off_1003013D0;
  *(void *)(v0 + 192) = v10;
  uint64_t v11 = type metadata accessor for BeneficiaryHealthCheck();
  swift_allocObject();
  uint64_t v12 = sub_1000F7E60();
  *(void *)(v0 + 256) = v11;
  *(void *)(v0 + 264) = &off_1002FB6C0;
  *(void *)(v0 + 232) = v12;
  uint64_t v13 = type metadata accessor for BenefactorHealthCheck();
  uint64_t v14 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + 296) = v13;
  *(void *)(v0 + 304) = &off_1002F6CD8;
  *(void *)(v0 + 272) = v14;
  return v0;
}

uint64_t sub_1001A72B8()
{
  uint64_t v4 = sub_1001A6E54();
  sub_100009F04(&qword_100325EA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  uint64_t v1 = type metadata accessor for CloudDataProtectionHealthCheck();
  uint64_t v2 = swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100325B28);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  *(void *)(inited + 56) = v1;
  *(void *)(inited + 64) = &off_1002FA898;
  *(void *)(inited + 32) = v2;
  sub_10028C5B4(inited);
  type metadata accessor for HealthCheckActivityProvider();
  swift_allocObject();
  return sub_1000B6840(v4);
}

void sub_1001A7428(uint64_t a1, void (*a2)(NSObject *))
{
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = a1;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_1000DB23C();
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E778);
    uint64_t v7 = v17;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      uint64_t v18 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v18;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Overall on-demand health check failed: %@", v10, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v8 = v7;
    }

    uint64_t v16 = v7;
    a2(v7);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Overall on-demand health check completed.", v15, 2u);
      swift_slowDealloc();
    }

    a2(0);
  }
}

uint64_t sub_1001A7748()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001A7780(uint64_t a1)
{
}

uint64_t sub_1001A7788()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001A7798()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001A77D0()
{
  unint64_t result = qword_1003245C0;
  if (!qword_1003245C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003245C0);
  }
  return result;
}

Swift::Void __swiftcall OSActivity.close()()
{
  swift_beginAccess();
  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
  swift_endAccess();
}

uint64_t sub_1001A7860(char *a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  if (a3)
  {
    if ((unint64_t)a1 >> 32)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    unsigned int v8 = a1 >> 11;
    if (a1 >> 11 == 27)
    {
      __break(1u);
    }
    else
    {
      unsigned int v8 = a1 >> 16;
      if (a1 >> 16 > 0x10)
      {
        __break(1u);
      }
      else if ((a1 & 0xFFFFFF80) == 0)
      {
        if (a1 > 0xFF)
        {
          __break(1u);
          goto LABEL_21;
        }
        unsigned int v9 = ((_BYTE)a1 + 1);
LABEL_11:
        *(void *)description = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v9) & 0x38)) & 0x38));
        if (qword_100320C70 == -1)
        {
LABEL_12:
          uint64_t v6 = qword_10032A3D0;
          uint64_t v7 = description;
          goto LABEL_13;
        }
LABEL_21:
        swift_once();
        goto LABEL_12;
      }
      int v3 = (a1 & 0x3F) << 8;
      if (a1 < 0x800)
      {
        unsigned int v9 = (v3 | (a1 >> 6)) + 33217;
        goto LABEL_11;
      }
    }
    unsigned int v12 = (v3 | (a1 >> 6) & 0x3F) << 8;
    unsigned int v13 = (((v12 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    unsigned int v14 = (v12 | (a1 >> 12)) + 8487393;
    if (v8) {
      unsigned int v9 = v13;
    }
    else {
      unsigned int v9 = v14;
    }
    goto LABEL_11;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_100320C70 != -1) {
LABEL_16:
  }
    swift_once();
  uint64_t v6 = qword_10032A3D0;
  uint64_t v7 = a1;
LABEL_13:
  *(void *)(v4 + 16) = _os_activity_create((void *)&_mh_execute_header, v7, v6, OS_ACTIVITY_FLAG_DEFAULT);
  swift_beginAccess();
  uint64_t v10 = swift_unknownObjectRetain();
  os_activity_scope_enter(v10, (os_activity_scope_state_t)(v4 + 24));
  swift_endAccess();
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1001A7A58()
{
  qword_10032A3D0 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

uint64_t InheritanceSecurityManager.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t OSActivity.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for OSActivity()
{
  return self;
}

void sub_1001A7B10(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    unsigned int v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      sub_100135190(a3, a4, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2112;
      uint64_t v47 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v47;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to verify arming for service %s with error: %@", (uint8_t *)v15, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    ((void (*)(uint64_t))a5)(a2);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  if (a1)
  {
    id v19 = a1;
    id v20 = [v19 webSessionIdentifier];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    if (v21 == a7 && v23 == a8)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_100007288(v26, (uint64_t)qword_10033E700);
        swift_bridgeObjectRetain_n();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          uint64_t v48 = swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = 136315138;
          swift_bridgeObjectRetain();
          sub_100135190(a3, a4, &v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        sub_1001A8424();
        uint64_t v43 = swift_allocError();
        char v45 = 4;
        goto LABEL_41;
      }
    }
    if ([v19 isValid])
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E700);
      swift_bridgeObjectRetain_n();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v38 = 136315138;
        swift_bridgeObjectRetain();
        sub_100135190(a3, a4, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Service %s is armed!", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      ((void (*)(void))a5)(0);
      goto LABEL_42;
    }
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)unint64_t v42 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(a3, a4, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Arming context for service %s was invalid.", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1001A8424();
    uint64_t v43 = swift_allocError();
    char v45 = 5;
LABEL_41:
    *uint64_t v44 = v45;
    ((void (*)(uint64_t))a5)(v43);
    swift_errorRelease();
LABEL_42:

    return;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100007288(v30, (uint64_t)qword_10033E700);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unknown error, no arming information located.", v33, 2u);
    swift_slowDealloc();
  }

  sub_1001A8424();
  swift_allocError();
  unsigned char *v34 = 3;
  a5();

  swift_errorRelease();
}

uint64_t type metadata accessor for AuthKitRequestController()
{
  return self;
}

unint64_t sub_1001A8424()
{
  unint64_t result = qword_10032A588;
  if (!qword_10032A588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032A588);
  }
  return result;
}

uint64_t sub_1001A8478(uint64_t a1, uint64_t a2)
{
  sub_1001A8824(a1, a2);
  swift_getErrorValue();
  sub_10003550C(v4, v5);
  uint64_t v2 = _convertErrorToNSError(_:)();
  swift_errorRelease();
  swift_errorRelease();
  return v2;
}

BOOL sub_1001A84E4(void *a1)
{
  return sub_1001A8ADC(a1, 11);
}

uint64_t sub_1001A84EC(uint64_t a1)
{
  __chkstk_darwin(a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CKError(0);
  if (swift_dynamicCast()) {
    return v5[1];
  }
  else {
    return 0;
  }
}

BOOL sub_1001A85C8(void *a1)
{
  return sub_1001A8ADC(a1, 14);
}

uint64_t sub_1001A85D0(void *a1)
{
  type metadata accessor for CKError(0);
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000B23D4();
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v11 = v9;
  _BridgedStoredNSError.code.getter();

  uint64_t result = sub_1001A8B9C(14, a1);
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v12 = result;
    uint64_t v4 = _BridgedStoredNSError.userInfo.getter();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v4 + 16) && (unint64_t v7 = sub_1001358B8(v5, v6), (v8 & 1) != 0))
    {
      sub_100047DD4(*(void *)(v4 + 56) + 32 * v7, (uint64_t)&v9);
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (*((void *)&v10 + 1))
    {
      sub_1001A912C();
      if (swift_dynamicCast()) {
        return v12;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)&v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001A8740(uint64_t a1)
{
  __chkstk_darwin(a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CKError(0);
  uint64_t v4 = swift_dynamicCast();
  if (v4) {

  }
  return v4;
}

uint64_t sub_1001A8824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1, a2);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1001A84EC(v5);
  if (v8)
  {
    long long v9 = (void *)v8;
    uint64_t v10 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter();
    if (v10)
    {
      uint64_t v11 = sub_10016B53C(v10);
      swift_bridgeObjectRelease();
      if (v11)
      {
        swift_getErrorValue();
        uint64_t v12 = sub_1001A8824(v16[1], v16[2]);
        swift_errorRelease();

        return v12;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a1);
  uint64_t v13 = _getErrorEmbeddedNSError<A>(_:)();
  if (v13)
  {
    uint64_t v12 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  }
  else
  {
    uint64_t v12 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v14, v7, a1);
  }
  return v12;
}

uint64_t sub_1001A89C0(uint64_t a1)
{
  *(void *)&long long v8 = a1;
  type metadata accessor for CKError(0);
  sub_1000B23D4();
  uint64_t v1 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v4 = sub_1001358B8(v2, v3), (v5 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v1 + 56) + 32 * v4, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v9 + 1))
  {
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100058764((uint64_t)&v8);
    return 0;
  }
}

BOOL sub_1001A8AB4(void *a1)
{
  return sub_1001A8ADC(a1, 3);
}

BOOL sub_1001A8ABC(void *a1)
{
  return sub_1001A8ADC(a1, 4);
}

BOOL sub_1001A8AC4(void *a1)
{
  return sub_1001A8ADC(a1, 6);
}

BOOL sub_1001A8ACC(void *a1)
{
  return sub_1001A8ADC(a1, 7);
}

BOOL sub_1001A8AD4(void *a1)
{
  return sub_1001A8ADC(a1, 23);
}

BOOL sub_1001A8ADC(void *a1, uint64_t a2)
{
  type metadata accessor for CKError(0);
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000B23D4();
  _BridgedStoredNSError.init(_:userInfo:)();
  _BridgedStoredNSError.code.getter();

  unint64_t v4 = (void *)sub_1001A8B9C(a2, a1);
  char v5 = v4;
  if (v4) {

  }
  return v5 != 0;
}

uint64_t sub_1001A8B9C(uint64_t a1, void *a2)
{
  id v2 = a2;
  *(void *)&v19[0] = a2;
  type metadata accessor for CKError(0);
  sub_1000B23D4();
  _BridgedStoredNSError.code.getter();
  if (v21[0] == a1)
  {
    id v4 = v2;
    return (uint64_t)v2;
  }
  *(void *)&v19[0] = v2;
  _BridgedStoredNSError.code.getter();
  if (v21[0] != 2) {
    return 0;
  }
  uint64_t result = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter();
  if (!result) {
    return 0;
  }
  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v16 = result + 64;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 64);
  int64_t v17 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v7 << 6);
LABEL_12:
      sub_100135F74(*(void *)(v6 + 48) + 40 * v12, (uint64_t)v19);
      *((void *)&v20 + 1) = *(void *)(*(void *)(v6 + 56) + 8 * v12);
      swift_errorRetain();
      goto LABEL_31;
    }
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v13 < v17)
    {
      unint64_t v14 = *(void *)(v16 + 8 * v13);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v7 + 2;
      ++v7;
      if (v13 + 1 < v17)
      {
        unint64_t v14 = *(void *)(v16 + 8 * v15);
        if (v14) {
          goto LABEL_19;
        }
        int64_t v7 = v13 + 1;
        if (v13 + 2 < v17)
        {
          unint64_t v14 = *(void *)(v16 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_16;
          }
          int64_t v15 = v13 + 3;
          int64_t v7 = v13 + 2;
          if (v13 + 3 < v17) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v10 = 0;
    long long v20 = 0u;
    memset(v19, 0, sizeof(v19));
LABEL_31:
    sub_1001A90C4((uint64_t)v19, (uint64_t)v21);
    if (!v21[3])
    {
      swift_release();
      return 0;
    }
    *(void *)&v19[0] = v21[5];
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    if (swift_dynamicCast())
    {
      id v2 = v18;
      _BridgedStoredNSError.code.getter();
      swift_errorRelease();

      if (*(void *)&v19[0] == a1)
      {
        swift_release();
        sub_100098CF0((uint64_t)v21);
        return (uint64_t)v2;
      }
    }
    else
    {
      swift_errorRelease();
    }
    uint64_t result = sub_100098CF0((uint64_t)v21);
  }
  unint64_t v14 = *(void *)(v16 + 8 * v15);
  if (v14)
  {
LABEL_19:
    int64_t v13 = v15;
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v7 = v13;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v17)
    {
      int64_t v7 = v17 - 1;
      goto LABEL_30;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001A8E98(void *a1)
{
  type metadata accessor for CKError(0);
  uint64_t v19 = 14;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000B23D4();
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v16;
  _BridgedStoredNSError.code.getter();

  uint64_t v2 = sub_1001A8B9C(14, a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)v2;
  *(void *)&long long v16 = v2;
  uint64_t v4 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v7 = sub_1001358B8(v5, v6), (v8 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v4 + 56) + 32 * v7, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v17 + 1))
  {
    sub_1001A912C();
    if (swift_dynamicCast()) {
      uint64_t v9 = v19;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    sub_100058764((uint64_t)&v16);
    uint64_t v9 = 0;
  }
  uint64_t v19 = (uint64_t)v3;
  uint64_t v10 = _BridgedStoredNSError.userInfo.getter();
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v10 + 16) && (unint64_t v13 = sub_1001358B8(v11, v12), (v14 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v10 + 56) + 32 * v13, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*((void *)&v17 + 1))
  {
    sub_1001A912C();
    swift_dynamicCast();
  }
  else
  {
    sub_100058764((uint64_t)&v16);
  }
  return v9;
}

uint64_t sub_1001A90C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032A590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001A912C()
{
  unint64_t result = qword_100323548;
  if (!qword_100323548)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100323548);
  }
  return result;
}

id sub_1001A916C()
{
  id result = [objc_allocWithZone((Class)NSOperationQueue) init];
  qword_10032A5A0 = (uint64_t)result;
  return result;
}

uint64_t sub_1001A91A0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_100009578((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_10032A5B0 = result;
  return result;
}

void sub_1001A93E0()
{
  off_10032A5B8 = &_swiftEmptyArrayStorage;
}

void sub_1001A93F4(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100325870);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, Strong + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v2);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    id v8 = [*(id *)(*sub_100008EF8(v20, v20[3]) + 16) aa_primaryAppleAccount];

    sub_100008EA8((uint64_t)v20);
    if (v8)
    {
      id v9 = [self lock];
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = a1;
      id v11 = v9;
      swift_retain();
      sub_1001A9778(1, (uint64_t)sub_1001AD9C0, v10);
      swift_release();
    }
    else
    {
      sub_100030AB0();
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_100007288(v16, (uint64_t)qword_10033E778);
      long long v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "No account signed in. Skipping CPR.", v19, 2u);
        swift_slowDealloc();
        swift_release();

        return;
      }
    }
    swift_release();
  }
  else
  {
    sub_100030AB0();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      int64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Lost reference to self. Aborting Trusted Contacts Preflight XPC activity", v15, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001A9778(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  char v7 = a1 & 1;
  if (qword_100320C80 != -1) {
    swift_once();
  }
  id v8 = qword_10032A5B0;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v3;
  *(unsigned char *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  *(void *)(v9 + 48) = v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1001AD808;
  *(void *)(v10 + 24) = v9;
  v14[4] = sub_10015FA40;
  void v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100030494;
  v14[3] = &unk_1002FF2E0;
  id v11 = _Block_copy(v14);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_1001A994C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (qword_10032A5A8)
  {
    if (qword_100320C88 != -1) {
      swift_once();
    }
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a3;
    *(void *)(v6 + 24) = a4;
    swift_beginAccess();
    char v7 = (char *)off_10032A5B8;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    off_10032A5B8 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v7 = sub_100168EEC(0, *((void *)v7 + 2) + 1, 1, v7);
      off_10032A5B8 = v7;
    }
    unint64_t v10 = *((void *)v7 + 2);
    unint64_t v9 = *((void *)v7 + 3);
    if (v10 >= v9 >> 1)
    {
      char v7 = sub_100168EEC((char *)(v9 > 1), v10 + 1, 1, v7);
      off_10032A5B8 = v7;
    }
    *((void *)v7 + 2) = v10 + 1;
    id v11 = &v7[16 * v10];
    *((void *)v11 + 4) = sub_1001AD82C;
    *((void *)v11 + 5) = v6;
    swift_endAccess();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      int64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "❌ Skipping concurrent preflight as another preflight is already in progress.", v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    char v17 = a2 & 1;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a1;
    *(unsigned char *)(v18 + 24) = v17;
    uint64_t v19 = (objc_class *)type metadata accessor for AsyncOperation();
    long long v20 = objc_allocWithZone(v19);
    v20[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    uint64_t v21 = (uint64_t (**)(uint64_t, uint64_t))&v20[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *uint64_t v21 = sub_1001AD894;
    v21[1] = (uint64_t (*)(uint64_t, uint64_t))v18;
    v30.receiver = v20;
    v30.super_class = v19;
    swift_retain();
    id v22 = [super init];
    uint64_t v23 = (void *)qword_10032A5A8;
    qword_10032A5A8 = (uint64_t)v22;
    unint64_t v13 = v22;

    if (qword_100320C88 != -1) {
      swift_once();
    }
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a3;
    *(void *)(v24 + 24) = a4;
    swift_beginAccess();
    char v25 = (char *)off_10032A5B8;
    swift_retain();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    off_10032A5B8 = v25;
    if ((v26 & 1) == 0)
    {
      char v25 = sub_100168EEC(0, *((void *)v25 + 2) + 1, 1, v25);
      off_10032A5B8 = v25;
    }
    unint64_t v28 = *((void *)v25 + 2);
    unint64_t v27 = *((void *)v25 + 3);
    if (v28 >= v27 >> 1)
    {
      char v25 = sub_100168EEC((char *)(v27 > 1), v28 + 1, 1, v25);
      off_10032A5B8 = v25;
    }
    *((void *)v25 + 2) = v28 + 1;
    uint64_t v29 = &v25[16 * v28];
    *((void *)v29 + 4) = sub_1001ADA1C;
    *((void *)v29 + 5) = v24;
    swift_endAccess();
    if (qword_100320C78 != -1) {
      swift_once();
    }
    [(id)qword_10032A5A0 addOperation:v13];
  }
}

uint64_t sub_1001A9D3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  int v5 = a4 & 1;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  int64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v32 = v18;
  uint64_t v33 = v16;
  uint64_t v34 = a3;
  sub_1001AC3B8(v16);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E778);
  long long v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)id v22 = 136315138;
    v38[0] = v23;
    if (v5) {
      uint64_t v24 = 0x656C756465686353;
    }
    else {
      uint64_t v24 = 0x6E616D6544206E4FLL;
    }
    uint64_t v37 = sub_100135190(v24, 0xE900000000000064, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting to pull all cloud data before %s Trusted Contacts Preflight activity", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v25 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v34 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__syncManager, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100008EF8(v38, v38[3]);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = v5;
  uint64_t v27 = v33;
  *(void *)(v26 + 24) = v25;
  *(void *)(v26 + 32) = v27;
  uint64_t v28 = v35;
  uint64_t v29 = v36;
  *(void *)(v26 + 40) = v32;
  *(void *)(v26 + 48) = v28;
  *(void *)(v26 + 56) = v29;
  swift_retain();
  swift_retain();
  sub_10014CD74(3, 1, (uint64_t)sub_1001AD920, v26);
  swift_release();
  return sub_100008EA8((uint64_t)v38);
}

uint64_t sub_1001AA108(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  int v12 = a2 & 1;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E778);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    if (v12) {
      uint64_t v17 = 0x656C756465686353;
    }
    else {
      uint64_t v17 = 0x6E616D6544206E4FLL;
    }
    sub_100135190(v17, 0xE900000000000064, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Completed pulling all cloud data before %s Trusted Contacts Preflight activity: %{BOOL}d", (uint8_t *)v16, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a3;
  v18[3] = a6;
  v18[4] = a7;
  swift_retain();
  swift_retain();
  sub_1001AA8A8(v12, a4, a5, (uint64_t)sub_1001AD974, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_1001AA374(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E778);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    int v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Finished preflight.", v12, 2u);
    swift_slowDealloc();
  }

  return sub_1001AA488(a1 & 1, a2, a4, a5);
}

uint64_t sub_1001AA488(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  if (qword_100320C80 != -1) {
    swift_once();
  }
  unint64_t v10 = qword_10032A5B0;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a1 & 1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = v9;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1001AD7A8;
  *(void *)(v12 + 24) = v11;
  v16[4] = sub_10015FA40;
  v16[5] = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_100030494;
  void v16[3] = &unk_1002FF268;
  uint64_t v13 = _Block_copy(v16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AA658(char a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E778);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134217984;
    if (qword_100320C88 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v19 = *((void *)off_10032A5B8 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Handling Preflight completions. Count: %ld", v9, 0xCu);
    swift_slowDealloc();
  }

  if (qword_100320C88 != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v10 = off_10032A5B8;
  off_10032A5B8 = _swiftEmptyArrayStorage;
  uint64_t v11 = v10[2];
  if (v11)
  {
    char v12 = a1 & 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = (char *)(v10 + 5);
    do
    {
      uint64_t v14 = (void (*)(char *, uint64_t *))*((void *)v13 - 1);
      char v18 = v12;
      uint64_t v17 = a2;
      swift_retain();
      v14(&v18, &v17);
      swift_release();
      v13 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  os_log_type_t v15 = (void *)qword_10032A5A8;
  qword_10032A5A8 = 0;

  return a3();
}

uint64_t sub_1001AA8A8(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v84 = a5;
  uint64_t v82 = a4;
  uint64_t v99 = a2;
  id v100 = a3;
  LODWORD(v95) = a1;
  uint64_t v89 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v5);
  os_log_type_t v87 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v7);
  uint64_t v79 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04(&qword_100325360);
  uint64_t v101 = *(void (***)(char *, void))(v9 - 8);
  uint64_t v102 = v9;
  __chkstk_darwin(v9, v10);
  char v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13, v14);
  uint64_t v86 = type metadata accessor for DispatchQoS();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86, v15);
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  id v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = dispatch_group_create();
  uint64_t v98 = swift_allocObject();
  *(void *)(v98 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v24 = sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v18);
  static DispatchQoS.unspecified.getter();
  long long aBlock = _swiftEmptyArrayStorage;
  sub_100009578((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unint64_t v83 = v17;
  unint64_t v78 = v24;
  uint64_t v96 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 0;
  uint64_t v25 = v90;
  id v26 = sub_1001ACA14();
  uint64_t v28 = v101;
  uint64_t v27 = v102;
  ((void (*)(char *, uint64_t, uint64_t))v101[2])(v12, v25 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsAccountModel, v102);
  Dependency.wrappedValue.getter();
  v28[1](v12, v27);
  uint64_t v29 = sub_100008EF8(&v110, v111);
  uint64_t v30 = *v29;
  uint64_t v31 = *(NSObject **)(*v29 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_1000B9D88;
  *(void *)(v32 + 24) = v30;
  uint64_t v108 = sub_1000B9DA0;
  uint64_t v109 = v32;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v105 = 1107296256;
  uint64_t v106 = sub_100030494;
  uint64_t v107 = &unk_1002FF0D8;
  uint64_t v33 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v31, v33);
  _Block_release(v33);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v31)
  {
    __break(1u);
  }
  else
  {
    sub_100008EA8((uint64_t)&v110);
    if (qword_100320B98 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  int v34 = v95 & 1;
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v95 = sub_100007288(v35, (uint64_t)qword_10033E778);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  LODWORD(v101) = v34;
  if (v38)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    long long aBlock = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    int v34 = (int)v101;
    if (v101) {
      uint64_t v40 = 0x656C756465686353;
    }
    else {
      uint64_t v40 = 0x6E616D6544206E4FLL;
    }
    uint64_t v102 = (uint64_t)(v39 + 4);
    *(void *)&long long v110 = sub_100135190(v40, 0xE900000000000064, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Starting %s Trusted Contacts Preflight activities.", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v77 = v26;
  uint64_t v41 = *(void *)(v90 + 16);
  uint64_t v42 = *(void *)(v41 + 16);
  if (v42)
  {
    uint64_t v43 = v41 + 32;
    if (v34) {
      uint64_t v44 = 0x656C756465686353;
    }
    else {
      uint64_t v44 = 0x6E616D6544206E4FLL;
    }
    uint64_t v93 = v44;
    uint64_t v76 = v41;
    swift_bridgeObjectRetain();
    *(void *)&long long v45 = 136315394;
    long long v92 = v45;
    uint64_t v91 = (char *)&type metadata for Any + 8;
    id v94 = v23;
    uint64_t v47 = v97;
    uint64_t v46 = v98;
    do
    {
      uint64_t v102 = v42;
      sub_100008A94(v43, (uint64_t)&aBlock);
      dispatch_group_enter(v23);
      sub_100008A94((uint64_t)&aBlock, (uint64_t)&v110);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v103 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = v92;
        *(void *)(v58 + 4) = sub_100135190(v93, 0xE900000000000064, &v103);
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        sub_100008EF8(&v110, v111);
        swift_getDynamicType();
        uint64_t v59 = _typeName(_:qualified:)();
        *(void *)(v58 + 14) = sub_100135190(v59, v60, &v103);
        swift_bridgeObjectRelease();
        sub_100008EA8((uint64_t)&v110);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Starting %s Trusted Contacts Preflight activity - %s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100008EA8((uint64_t)&v110);
      }

      char v48 = (char)v101;
      uint64_t v49 = v107;
      uint64_t v50 = v108;
      sub_100008EF8(&aBlock, (uint64_t)v107);
      sub_100008A94((uint64_t)&aBlock, (uint64_t)&v110);
      uint64_t v51 = swift_allocObject();
      *(unsigned char *)(v51 + 16) = v48;
      sub_100041E8C(&v110, v51 + 24);
      uint64_t v52 = (void *)v96;
      *(void *)(v51 + 64) = v96;
      *(void *)(v51 + 72) = v46;
      uint64_t v23 = v94;
      *(void *)(v51 + 80) = v47;
      *(void *)(v51 + 88) = v23;
      uint64_t v53 = (void (*)(uint64_t, id, void (*)(uint64_t), uint64_t, void *, uint64_t (*)()))*((void *)v50 + 2);
      id v54 = v52;
      swift_retain();
      swift_retain();
      id v55 = v23;
      v53(v99, v100, sub_1001AD328, v51, v49, v50);
      swift_release();
      sub_100008EA8((uint64_t)&aBlock);
      v43 += 40;
      uint64_t v42 = v102 - 1;
    }
    while (v102 != 1);
    swift_bridgeObjectRelease();
    LOBYTE(v34) = (_BYTE)v101;
  }
  uint64_t v61 = v80;
  uint64_t v62 = v79;
  uint64_t v63 = v81;
  (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, enum case for DispatchQoS.QoSClass.default(_:), v81);
  uint64_t v102 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
  uint64_t v64 = swift_allocObject();
  uint64_t v66 = (void *)v96;
  uint64_t v65 = v97;
  *(void *)(v64 + 16) = v96;
  *(unsigned char *)(v64 + 24) = v34;
  uint64_t v67 = v90;
  *(void *)(v64 + 32) = v98;
  *(void *)(v64 + 40) = v67;
  uint64_t v68 = v77;
  uint64_t v69 = v82;
  *(void *)(v64 + 48) = v77;
  *(void *)(v64 + 56) = v69;
  *(void *)(v64 + 64) = v84;
  *(void *)(v64 + 72) = v65;
  uint64_t v108 = sub_1001AD39C;
  uint64_t v109 = v64;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v105 = 1107296256;
  uint64_t v106 = sub_100007244;
  uint64_t v107 = &unk_1002FF150;
  uint64_t v70 = _Block_copy(&aBlock);
  uint64_t v101 = v68;
  swift_retain();
  id v100 = v66;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v71 = v83;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v110 = _swiftEmptyArrayStorage;
  sub_100009578((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  uint64_t v72 = v87;
  uint64_t v73 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  BOOL v74 = (void *)v102;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v70);

  (*(void (**)(char *, uint64_t))(v88 + 8))(v72, v73);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v71, v86);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1001AB5B4(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  LODWORD(v58) = a2;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v52 = a5;
    uint64_t v54 = v21;
    uint64_t v55 = v20;
    uint64_t v57 = v14;
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v53 = a6;
    uint64_t v56 = a4;
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    sub_100008A94((uint64_t)a3, (uint64_t)&aBlock);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v51 = a7;
      uint64_t v28 = v27;
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(void *)&v65[0] = v50;
      *(_DWORD *)uint64_t v28 = 136315650;
      if (v58) {
        uint64_t v29 = 0x656C756465686353;
      }
      else {
        uint64_t v29 = 0x6E616D6544206E4FLL;
      }
      uint64_t v66 = (void *)sub_100135190(v29, 0xE900000000000064, (uint64_t *)v65);
      uint64_t v58 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      sub_100008EF8(&aBlock, (uint64_t)v62);
      swift_getDynamicType();
      uint64_t v30 = _typeName(_:qualified:)();
      uint64_t v66 = (void *)sub_100135190(v30, v31, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)&aBlock);
      *(_WORD *)(v28 + 22) = 2112;
      uint64_t v32 = _convertErrorToNSError(_:)();
      uint64_t v66 = (void *)v32;
      uint64_t v13 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v49 = v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s %s Trusted Contacts Preflight activity failed with error %@", (uint8_t *)v28, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v51;
      swift_slowDealloc();
    }
    else
    {
      sub_100008EA8((uint64_t)&aBlock);
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100008EF8(a3, a3[3]);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v41 = a3[4];
    long long aBlock = (void **)DynamicType;
    uint64_t v60 = v41;
    sub_100009F04(&qword_10032A880);
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v44 = v43;
    sub_100008A94((uint64_t)a3, (uint64_t)v65);
    long long v45 = (void *)swift_allocObject();
    uint64_t v46 = v52;
    void v45[2] = a1;
    v45[3] = v46;
    v45[4] = v42;
    v45[5] = v44;
    v45[6] = v53;
    sub_100041E8C(v65, (uint64_t)(v45 + 7));
    uint64_t v63 = sub_1000A7E74;
    uint64_t v64 = v45;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v61 = sub_100007244;
    uint64_t v62 = &unk_1002FF1F0;
    uint64_t v47 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v66 = _swiftEmptyArrayStorage;
    sub_100009578((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v47);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v23, v55);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E778);
    sub_100008A94((uint64_t)a3, (uint64_t)&aBlock);
    int v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      *(void *)&v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      if (v58) {
        uint64_t v37 = 0x656C756465686353;
      }
      else {
        uint64_t v37 = 0x6E616D6544206E4FLL;
      }
      uint64_t v66 = (void *)sub_100135190(v37, 0xE900000000000064, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      sub_100008EF8(&aBlock, (uint64_t)v62);
      swift_getDynamicType();
      uint64_t v38 = _typeName(_:qualified:)();
      uint64_t v66 = (void *)sub_100135190(v38, v39, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s %s Trusted Contacts Preflight activity completed.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100008EA8((uint64_t)&aBlock);
    }
  }
  dispatch_group_leave(a7);
}

uint64_t sub_1001ABDA4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a6;
  uint64_t v31 = a1;
  char v13 = a2 & 1;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v19);
  uint64_t v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = v13;
  *(void *)(v22 + 24) = a3;
  *(void *)(v22 + 32) = a4;
  uint64_t v23 = v28;
  *(void *)(v22 + 40) = a5;
  *(void *)(v22 + 48) = v23;
  *(void *)(v22 + 56) = a7;
  *(void *)(v22 + 64) = a8;
  aBlock[4] = sub_1001AD40C;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002FF1A0;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100009578((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v29);
  return swift_release();
}

uint64_t sub_1001AC094(char a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void, void), uint64_t a6, uint64_t a7)
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  char v12 = (uint64_t *)(a2 + 16);
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E778);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    if (a1) {
      uint64_t v17 = 0x656C756465686353;
    }
    else {
      uint64_t v17 = 0x6E616D6544206E4FLL;
    }
    sub_100135190(v17, 0xE900000000000064, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v18 = a5;
    uint64_t v19 = Dictionary.description.getter();
    os_log_type_t type = v15;
    unint64_t v21 = v20;
    char v12 = (uint64_t *)(a2 + 16);
    swift_bridgeObjectRelease();
    uint64_t v22 = v19;
    a5 = v18;
    sub_100135190(v22, v21, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, type, "Overall %s Trusted Contacts Preflight activities finished with errors: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_1001AD420(a4, 0);
  swift_beginAccess();
  uint64_t v23 = *(unsigned __int8 *)(a7 + 16);
  swift_beginAccess();
  uint64_t v24 = *v12;
  swift_bridgeObjectRetain();
  a5(v23, v24);
  return swift_bridgeObjectRelease();
}

void sub_1001AC3B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v42 = a1;
  uint64_t v3 = sub_100009F04(&qword_100322CF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v41 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100323190);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100325870);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v2 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  id v17 = [*(id *)(*sub_100008EF8(v44, (uint64_t)v44[3]) + 16) aa_primaryAppleAccount];
  if (v17
    && (uint64_t v18 = v17, v19 = objc_msgSend(v17, "aa_altDSID"), v18, v19))
  {
    uint64_t v39 = v4;
    uint64_t v40 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100008EA8((uint64_t)v44);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v43 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [self analyticsEventWithName:v20 altDSID:v21 flowID:v22];
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v44);
    if (v23)
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      [v23 setObject:isa forKeyedSubscript:kAAFDidSucceed];

      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100007288(v25, (uint64_t)qword_10033E778);
      os_log_type_t v26 = v23;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138412290;
        v44[0] = v26;
        uint64_t v31 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v30 = v23;

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Reporting Preflight begin Event %@", v29, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v27 = v26;
      }
      uint64_t v37 = v39;
      uint64_t v36 = v40;

      uint64_t v38 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v41, v43 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter, v36);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
      [v44[0] sendEvent:v26];

      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_100008EA8((uint64_t)v44);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E778);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      os_log_type_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Account is nil. Not reporting Preflight begin Event.", v35, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_1001ACA14()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100323190);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v1 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v12 = [*(id *)(*sub_100008EF8(v25, v25[3]) + 16) aa_primaryAppleAccount];
  if (v12
    && (uint64_t v13 = v12, v14 = objc_msgSend(v12, "aa_altDSID"), v13, v14))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100008EA8((uint64_t)v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory, v2);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [self analyticsEventWithName:v15 altDSID:v16 flowID:v17];
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v25);
  }
  else
  {
    sub_100008EA8((uint64_t)v25);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E778);
    NSString v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      NSString v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Account is nil. Not reporting Preflight end Event.", v22, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v18;
}

uint64_t sub_1001ACDE8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__storageController;
  uint64_t v2 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsAccountModel;
  uint64_t v4 = sub_100009F04(&qword_100325360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__syncManager;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory;
  uint64_t v10 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter;
  uint64_t v12 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);

  return swift_deallocClassInstance();
}

uint64_t sub_1001ACFFC()
{
  return type metadata accessor for TrustedContactsPreflightActivityProvider();
}

uint64_t type metadata accessor for TrustedContactsPreflightActivityProvider()
{
  uint64_t result = qword_10032A618;
  if (!qword_10032A618) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001AD050()
{
  sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100325158, (uint64_t *)&unk_10032A630);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&qword_100324050, (uint64_t *)&unk_10032A640);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001AD278()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AD2B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001AD2C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD2D0()
{
  sub_100008EA8(v0 + 24);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

void sub_1001AD328(uint64_t a1)
{
  sub_1001AB5B4(a1, *(unsigned __int8 *)(v1 + 16), (void *)(v1 + 24), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(NSObject **)(v1 + 88));
}

uint64_t sub_1001AD33C()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001AD39C()
{
  return sub_1001ABDA4(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_1001AD3B4()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001AD40C()
{
  return sub_1001AC094(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(void, void))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

void sub_1001AD420(void *a1, void *a2)
{
  uint64_t v5 = sub_100009F04(&qword_100322CF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a2) {
      a2 = (void *)_convertErrorToNSError(_:)();
    }
    [a1 updateTaskResultWithError:a2];
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter, v5);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_getObjectType();
  sub_100169BA4((uint64_t)a1);
  swift_unknownObjectRelease();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E778);
  uint64_t v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    NSString v15 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    if (a1)
    {
      NSString v17 = v11;
      NSString v16 = v11;
    }
    else
    {
      NSString v17 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = a1;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reporting Preflight end Event %@", v14, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v12 = v11;
  }
}

uint64_t sub_1001AD718()
{
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100008EA8(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001AD770()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001AD7A8()
{
  return sub_1001AA658(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_1001AD7B8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD7C8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001AD808()
{
  sub_1001A994C(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001AD81C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD82C(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1001AD85C()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001AD894(uint64_t a1, uint64_t a2)
{
  return sub_1001A9D3C(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
}

uint64_t sub_1001AD8A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD8D8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001AD920(uint64_t a1)
{
  return sub_1001AA108(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1001AD934()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AD974(char a1, uint64_t a2)
{
  return sub_1001AA374(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001AD980()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

BOOL sub_1001AD9C0()
{
  [*(id *)(v0 + 16) unlock];
  return sub_100030AB0();
}

uint64_t sub_1001ADA20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a1) {
    return sub_1001ADCE4(a3, (uint64_t)a4, a5);
  }
  swift_errorRetain();
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    NSString v15 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_bridgeObjectRetain();
    sub_100135190(a6, a7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2112;
    swift_errorRetain();
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v17;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not Accepting CKShare from sender %s due to %@", (uint8_t *)v14, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a4) {
      return swift_errorRelease();
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease_n();
  swift_errorRelease();
  swift_errorRelease();

  if (a4)
  {
LABEL_9:
    swift_errorRetain();
    a4(a1);
    swift_errorRelease();
  }
  return swift_errorRelease();
}

uint64_t sub_1001ADCE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E760);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    NSString v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Accepting BeneficiaryInfoRecord Share...", v16, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + 16), *(void *)(v4 + 40));
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  sub_1001AF6A8(a1, (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  sub_1001AF890((uint64_t)v12, v20 + v18, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  *(void *)(v20 + v19) = v17;
  sub_100011D2C(a2);
  swift_retain();
  sub_100075A5C(a1, (uint64_t)sub_1001AF8F8, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1001ADF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v28 = a2;
  uint64_t v29 = a5;
  uint64_t v27 = a4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E760);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v24 = v5;
    uint64_t v31 = v18;
    uint64_t v25 = a3;
    uint64_t v26 = a1;
    *(_DWORD *)uint64_t v17 = 136315138;
    sub_100007094((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_100135190(v19, v20, &v31);
    a3 = v25;
    a1 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checking for existing BenefactorInfoRecord with beneficiaryID - %s", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v24;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }

  sub_100008EF8((void *)(v6 + 56), *(void *)(v6 + 80));
  os_log_type_t v21 = (void *)swift_allocObject();
  void v21[2] = v27;
  uint64_t v22 = v28;
  v21[3] = v29;
  v21[4] = v22;
  void v21[5] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000EAD74(a1, (uint64_t)sub_1001AECD0, (uint64_t)v21);
  return swift_release();
}

uint64_t type metadata accessor for InheritanceAccessKeyMessageHandler()
{
  return self;
}

uint64_t sub_1001AE284(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v72 = a4;
  BOOL v74 = a2;
  uint64_t v73 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v9 = __chkstk_darwin(v73, v8);
  uint64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  os_log_type_t v15 = (char *)&v68 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001AF608(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v77 = (void *)*v22;
    uint64_t v23 = (uint64_t)v77;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      uint64_t v24 = a3;
      uint64_t v25 = (void *)v76;
      id v77 = (void *)v76;
      uint64_t v75 = 3;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v26 = (void *)v76;
      uint64_t v75 = v76;
      char v27 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v27)
      {
        if (qword_100320B90 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100007288(v28, (uint64_t)qword_10033E760);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "No existing BenefactorInfoRecord found.", v31, 2u);
          swift_slowDealloc();
        }

LABEL_39:
        swift_errorRetain();
        v74(v23);
        swift_errorRelease();
        return swift_errorRelease();
      }

      a3 = v24;
    }
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100007288(v61, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v71 = a3;
      uint64_t v76 = v23;
      id v77 = (void *)v65;
      *(_DWORD *)uint64_t v64 = 136315138;
      swift_errorRetain();
      uint64_t v66 = String.init<A>(describing:)();
      uint64_t v76 = sub_100135190(v66, v67, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to fetch BenefactorInfoRecord: %s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    goto LABEL_39;
  }
  unint64_t v70 = a5;
  sub_1001AF890((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100007288(v32, (uint64_t)qword_10033E760);
  sub_1001AF6A8((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  os_log_type_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v71 = a3;
  uint64_t v69 = v18;
  if (v36)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    id v77 = (void *)swift_slowAlloc();
    uint64_t v68 = v11;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = sub_1001BFF58();
    uint64_t v76 = sub_100135190(v38, v39, (uint64_t *)&v77);
    uint64_t v11 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v18 = v69;
    swift_bridgeObjectRelease();
    sub_1001AF9EC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found an existing BenefactorInfoRecord - %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001AF9EC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }

  sub_1001AF6A8((uint64_t)v18, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v40 = v70;
  swift_bridgeObjectRetain_n();
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v68 = (char *)v33;
    id v77 = (void *)v44;
    *(_DWORD *)uint64_t v43 = 136315394;
    uint64_t v45 = v73;
    uint64_t v46 = (uint64_t *)&v11[*(int *)(v73 + 20)];
    uint64_t v47 = *v46;
    unint64_t v48 = v46[1];
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_100135190(v47, v48, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v40 = v70;
    swift_bridgeObjectRelease();
    sub_1001AF9EC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v43 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v49 = v72;
    uint64_t v76 = sub_100135190(v72, v40, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Comparing handles from BenefactorInfoRecord: %s and IDS message: %s are same and not empty.", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001AF9EC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);

    swift_bridgeObjectRelease_n();
    uint64_t v49 = v72;
    uint64_t v45 = v73;
  }
  uint64_t v50 = (uint64_t)v69;
  uint64_t v51 = &v69[*(int *)(v45 + 20)];
  uint64_t v52 = *(void *)v51;
  unint64_t v53 = *((void *)v51 + 1);
  uint64_t v54 = HIBYTE(v53) & 0xF;
  if ((v53 & 0x2000000000000000) == 0) {
    uint64_t v54 = v52 & 0xFFFFFFFFFFFFLL;
  }
  if (!v54) {
    goto LABEL_28;
  }
  uint64_t v55 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0) {
    uint64_t v55 = v49 & 0xFFFFFFFFFFFFLL;
  }
  if (v55
    && (v52 == v49 && v53 == v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(void *)(v50 + *(int *)(v45 + 24)) == 2)
  {
    v74(0);
  }
  else
  {
LABEL_28:
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "⛔️ Cannot proceed. Beneficiary handle does not match incoming message from: handle", v58, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v76 = 2;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100007094((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v59 = v77;
    v74((uint64_t)v77);
  }
  return sub_1001AF9EC(v50, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1001AEC90()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001AECD0(uint64_t a1)
{
  return sub_1001AE284(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001AECDC(uint64_t result, void (*a2)(uint64_t), uint64_t a3, unsigned char *a4)
{
  if (result)
  {
    uint64_t v6 = result;
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v11 = String.init<A>(describing:)();
      sub_100135190(v11, v12, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error Accepting BeneficiaryInfoRecord Share : %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    swift_errorRetain();
    a2(v6);
    swift_errorRelease();
    return swift_errorRelease();
  }
  if (*a4 == 2)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v14 = type metadata accessor for InheritanceAccessKeyMessage();
      sub_1001AEF6C((uint64_t)&a4[*(int *)(v14 + 20)], (uint64_t)a2, a3);
      return swift_release();
    }
  }
  else if (a2)
  {
    return ((uint64_t (*)(void))a2)(0);
  }
  return result;
}

uint64_t sub_1001AEF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E760);
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Notifying Beneficiary about AccessKey change...", v11, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + 56), *(void *)(v4 + 80));
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a2;
  uint64_t v13[3] = a3;
  v13[4] = v12;
  sub_100011D2C(a2);
  swift_retain();
  sub_1000EAD74(a1, (uint64_t)sub_1001AF9E0, (uint64_t)v13);
  swift_release();

  return swift_release();
}

uint64_t sub_1001AF10C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v5 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v17 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (uint64_t *)((char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001AF608(a1, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(void *)&v38[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      v37[0] = v21;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v26 = String.init<A>(describing:)();
      v37[0] = sub_100135190(v26, v27, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error fetching Benefactor : %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if (!a2) {
        return swift_errorRelease();
      }
    }
    swift_errorRetain();
    a2(v21);
    swift_errorRelease();
    return swift_errorRelease();
  }
  sub_1001AF890((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  sub_1001AF6A8((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  id v28 = objc_allocWithZone((Class)AABenefactorInfo);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = [v28 initWithBeneficiaryID:isa handle:v30 status:*(void *)&v13[*(int *)(v9 + 24)]];

  sub_1001AF9EC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *uint64_t v8 = v31;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_100008A94(Strong + 96, (uint64_t)v37);
    id v33 = v31;
    swift_release();
    sub_100008EF8(v37, v37[3]);
    sub_1001C1B88((uint64_t)v38);
    sub_10024F5C4(v38, a2, v36);
    sub_10004CF70((uint64_t)v38);

    sub_1001AF9EC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    sub_1001AF9EC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    return sub_100008EA8((uint64_t)v37);
  }
  else
  {
    sub_1001AF9EC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    return sub_1001AF9EC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1001AF608(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100325860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001AF670()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AF6A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001AF710()
{
  uint64_t v1 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  uint64_t v4 = (v2 + 32) & ~v2;
  unint64_t v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v4;
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + *(int *)(v1 + 24);
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v2 | 7);
}

uint64_t sub_1001AF890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001AF8F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceAccessKeyMessage() - 8);
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (unsigned char *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));

  return sub_1001AECDC(a1, v4, v5, v6);
}

uint64_t sub_1001AF998()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AF9E0(uint64_t a1)
{
  return sub_1001AF10C(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001AF9EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for TrustedContactsSyncOperationsCAEvent()
{
  uint64_t result = qword_10032A940;
  if (!qword_10032A940) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001AFA98()
{
  return swift_initClassMetadata2();
}

void sub_1001AFAD8()
{
}

id sub_1001AFB08()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrustedContactsSyncOperationsCAEvent();
  return [super dealloc];
}

uint64_t sub_1001AFB44()
{
  return type metadata accessor for TrustedContactsSyncOperationsCAEvent();
}

void sub_1001AFB4C(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(*(void *)(a1 + 8) + 16))
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    sub_10028C72C(v6);
  }
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    sub_10028C72C(v7);
  }
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = sub_100122C9C(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = sub_100144794(v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v11 + 16);
  swift_release();
  if (v12
    || (uint64_t v14 = *(void **)(a2 + 16),
        Class isa = Array._bridgeToObjectiveC()().super.isa,
        id v16 = [v14 contactForIdentifiers:isa],
        isa,
        !v16))
  {
    swift_bridgeObjectRelease();
    id v13 = 0;
  }
  else
  {
    if (_swiftEmptyArrayStorage[2]) {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    id v17 = objc_allocWithZone((Class)AALocalContactInfo);
    id v18 = v16;
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v13 = [v17 initWithHandle:v19 contact:v18];
  }
  *a3 = v13;
}

uint64_t InheritanceSecurityManager.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianMegadomeSuggester()
{
  return self;
}

void sub_1001AFD50(void *a1, int a2)
{
  int v115 = a2;
  id v120 = a1;
  uint64_t v3 = type metadata accessor for EntityIdentifier();
  uint64_t v118 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PersonEntityTagType();
  unint64_t v117 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PHPersonIdentifierMapView();
  uint64_t v108 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewService();
  uint64_t v15 = (void *)static ViewService.clientService.getter();
  ViewService.phPersonIdentifierMapView()();

  if (!v2)
  {
    uint64_t v116 = v10;
    uint64_t v16 = v7;
    uint64_t v109 = v6;
    uint64_t v111 = v14;
    uint64_t v110 = v3;
    id v17 = (void *)static ViewService.clientService.getter();
    uint64_t v18 = ViewService.visualIdentifierView()();
    uint64_t v119 = 0;
    NSString v19 = (void *)v18;

    uint64_t v20 = v11;
    if (qword_100320B70 != -1) {
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t v21 = type metadata accessor for Logger();
      uint64_t v22 = sub_100007288(v21, (uint64_t)qword_10033E700);
      id v23 = v120;
      uint64_t v102 = v22;
      os_log_type_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v103 = v20;
      id v105 = v19;
      if (v26)
      {
        uint64_t v27 = v16;
        id v28 = (uint8_t *)swift_slowAlloc();
        id v120 = (id)swift_slowAlloc();
        id v123 = v120;
        uint64_t v114 = v28;
        *(_DWORD *)id v28 = 136315138;
        uint64_t v29 = v116;
        PersonEntityTaggingService.ScoreRankedEntityTagPersons.tag.getter();
        uint64_t v30 = PersonEntityTagType.rawValue.getter();
        unint64_t v32 = v31;
        (*(void (**)(char *, uint64_t))(v117 + 8))(v29, v27);
        uint64_t v121 = sub_100135190(v30, v32, (uint64_t *)&v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v20 = v103;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Entities for tag: %s", v114, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v33 = v118;
      os_log_type_t v34 = v109;
      unint64_t v35 = PersonEntityTaggingService.ScoreRankedEntityTagPersons.scoredEntities.getter();
      unint64_t v36 = v35;
      if (v35 >> 62) {
        uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v37 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v38 = v110;
      if (!v37)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v108 + 8))(v111, v20);
        return;
      }
      unint64_t v117 = v36 & 0xC000000000000001;
      uint64_t v101 = v33 + 8;
      uint64_t v98 = &v123;
      uint64_t v16 = 4;
      *((void *)&v39 + 1) = 2;
      long long v100 = xmmword_1002A9C00;
      *(void *)&long long v39 = 136316162;
      long long v97 = v39;
      uint64_t v96 = (char *)&type metadata for Any + 8;
      *(void *)&long long v39 = 136315906;
      long long v95 = v39;
      unint64_t v99 = v36;
      uint64_t v116 = (char *)v37;
      while (1)
      {
        uint64_t v41 = v117
            ? (uint8_t *)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : (uint8_t *)*(id *)(v36 + 8 * v16);
        os_log_type_t v42 = v41;
        NSString v19 = (void *)(v16 - 3);
        if (__OFADD__(v16 - 4, 1)) {
          break;
        }
        PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter();
        if (v43 >= 0.5)
        {
          uint64_t v113 = v16;
          uint64_t v44 = v20;
          uint64_t v112 = v19;
          PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.id.getter();
          uint64_t v45 = EntityIdentifier.stringValue.getter();
          unint64_t v47 = v46;
          (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v38);
          uint64_t v104 = PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.inferenceEventId.getter();
          sub_100009F04(&qword_10032AA58);
          uint64_t v48 = swift_allocObject();
          *(_OWORD *)(v48 + 16) = v100;
          uint64_t v114 = v42;
          PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.id.getter();
          sub_10019CDF8(v48);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v49 = v111;
          uint64_t v50 = v119;
          uint64_t v51 = PHPersonIdentifierMapView.phPersonIdentifiers(for:)();
          uint64_t v119 = v50;
          if (v50)
          {
            swift_bridgeObjectRelease();

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v108 + 8))(v49, v44);
            return;
          }
          uint64_t v52 = v51;
          swift_bridgeObjectRelease();
          v125[0] = v52;
          sub_100009F04(&qword_10032AA60);
          sub_100009610(&qword_10032AA68, &qword_10032AA60);
          sub_100080C64();
          uint64_t v106 = Sequence<>.joined(separator:)();
          id v120 = v53;
          swift_bridgeObjectRelease();
          strcpy((char *)v125, "UNKNOWN_NAME");
          BYTE5(v125[1]) = 0;
          HIWORD(v125[1]) = -5120;
          NSString v54 = String._bridgeToObjectiveC()();
          id v55 = [v105 personForIdentifier:v54];

          uint64_t v107 = v45;
          if (v55)
          {
            id v56 = [v55 names];
            uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v58 = *(void *)(v57 + 16);
            swift_bridgeObjectRelease();
            uint64_t v16 = v113;
            if (v58)
            {
              id v59 = [v55 names];
              uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v124 = (uint8_t *)v60;
              sub_100009F04((uint64_t *)&unk_100328450);
              sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
              uint64_t v61 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v63 = v62;
              swift_bridgeObjectRelease();
              swift_beginAccess();
              v125[0] = v61;
              v125[1] = v63;
              swift_bridgeObjectRelease();
            }
            id v65 = [v55 phoneNumbers:v95];
            uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v67 = *(void *)(v66 + 16);
            swift_bridgeObjectRelease();
            if (v67)
            {
              id v68 = [v55 phoneNumbers];
              uint64_t v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v124 = (uint8_t *)v69;
              sub_100009F04((uint64_t *)&unk_100328450);
              sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
              uint64_t v70 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v72 = v71;
              swift_bridgeObjectRelease();
              swift_beginAccess();
              v125[0] = v70;
              v125[1] = v72;
              swift_bridgeObjectRelease();
            }
            id v73 = [v55 emails];
            uint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v75 = *(void *)(v74 + 16);
            swift_bridgeObjectRelease();
            if (v75)
            {
              id v76 = [v55 emails];
              uint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v124 = (uint8_t *)v77;
              sub_100009F04((uint64_t *)&unk_100328450);
              sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
              uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
              uint64_t v80 = v79;
              swift_bridgeObjectRelease();

              swift_beginAccess();
              v125[0] = v78;
              v125[1] = v80;
              swift_bridgeObjectRelease();
            }
            else
            {
            }
            uint64_t v64 = v114;
          }
          else
          {
            uint64_t v16 = v113;
            uint64_t v64 = v114;
          }
          uint64_t v81 = v64;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.info.getter();
          BOOL v84 = os_log_type_enabled(v82, v83);
          if (v115)
          {
            if (v84)
            {
              uint64_t v85 = swift_slowAlloc();
              uint64_t v114 = (uint8_t *)swift_slowAlloc();
              uint64_t v124 = v114;
              *(_DWORD *)uint64_t v85 = v97;
              swift_beginAccess();
              uint64_t v87 = v125[0];
              unint64_t v86 = v125[1];
              swift_bridgeObjectRetain();
              uint64_t v113 = v86;
              uint64_t v122 = sub_100135190(v87, v86, (uint64_t *)&v124);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v85 + 12) = 2080;
              unint64_t v88 = (unint64_t)v120;
              swift_bridgeObjectRetain();
              uint64_t v122 = sub_100135190(v106, v88, (uint64_t *)&v124);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v85 + 22) = 2080;
              swift_bridgeObjectRetain();
              uint64_t v122 = sub_100135190(v107, v47, (uint64_t *)&v124);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v85 + 32) = 2048;
              PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter();
              uint64_t v122 = v89;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              *(_WORD *)(v85 + 42) = 2048;
              uint64_t v122 = v104;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v82, v83, "\t%s: \t%s : %s : %f : EventID %lld", (uint8_t *)v85, 0x34u);
              goto LABEL_33;
            }
LABEL_34:
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          else
          {
            if (!v84) {
              goto LABEL_34;
            }
            uint64_t v90 = swift_slowAlloc();
            uint64_t v114 = (uint8_t *)swift_slowAlloc();
            uint64_t v124 = v114;
            *(_DWORD *)uint64_t v90 = v95;
            swift_beginAccess();
            uint64_t v92 = v125[0];
            unint64_t v91 = v125[1];
            swift_bridgeObjectRetain();
            uint64_t v113 = v91;
            uint64_t v122 = sub_100135190(v92, v91, (uint64_t *)&v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v90 + 12) = 2080;
            unint64_t v93 = (unint64_t)v120;
            swift_bridgeObjectRetain();
            uint64_t v122 = sub_100135190(v106, v93, (uint64_t *)&v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v90 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v122 = sub_100135190(v107, v47, (uint64_t *)&v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v90 + 32) = 2048;
            PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter();
            uint64_t v122 = v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v82, v83, "\t%s: \t%s : %s : %f", (uint8_t *)v90, 0x2Au);
LABEL_33:
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_bridgeObjectRelease();
          }
          uint64_t v20 = v103;
          uint64_t v38 = v110;
          uint64_t v33 = v118;
          os_log_type_t v34 = v109;
          unint64_t v36 = v99;
          unint64_t v40 = v116;
          NSString v19 = v112;
          goto LABEL_11;
        }

        unint64_t v40 = v116;
LABEL_11:
        ++v16;
        if (v19 == v40) {
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_40:
      swift_once();
    }
  }
}

uint64_t sub_1001B0D08()
{
  uint64_t v1 = type metadata accessor for EntityIdentifier();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for PersonEntityTagType();
  v0[6] = v2;
  v0[7] = *(void *)(v2 - 8);
  v0[8] = swift_task_alloc();
  return _swift_task_switch(sub_1001B0E20, 0, 0);
}

uint64_t sub_1001B0E20()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for PersonEntityTaggingService());
  v0[9] = PersonEntityTaggingService.init(etConfig:)();
  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], enum case for PersonEntityTagType.familyAndFriends(_:), v0[6]);
  uint64_t v5 = (char *)&async function pointer to dispatch thunk of PersonEntityTaggingService.personEntities(for:options:)
     + async function pointer to dispatch thunk of PersonEntityTaggingService.personEntities(for:options:);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001B1108;
  uint64_t v3 = v0[8];
  return ((uint64_t (*)(uint64_t, void))v5)(v3, 0);
}

uint64_t sub_1001B1108(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001B175C;
  }
  else {
    uint64_t v4 = sub_1001B121C;
  }
  return _swift_task_switch(v4, 0, 0);
}

unint64_t sub_1001B121C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  sub_1001AFD50(*(void **)(v0 + 88), 1);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 88);
    uint64_t v3 = *(void **)(v0 + 72);
    (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));

    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No Suggestions from Megadome: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  type metadata accessor for ViewService();
  uint64_t v4 = (void *)static ViewService.clientService.getter();
  uint64_t v14 = (void *)ViewService.visualIdentifierView()();

  unint64_t result = PersonEntityTaggingService.ScoreRankedEntityTagPersons.scoredEntities.getter();
  unint64_t v15 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
    if (result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_15:
      if (v16 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v17 = 0;
      unint64_t v18 = v15 & 0xC000000000000001;
      double v43 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 32) + 8);
      uint64_t v11 = _swiftEmptyArrayStorage;
      unint64_t v41 = v15;
      os_log_type_t v42 = v14;
      unint64_t v44 = v15 & 0xC000000000000001;
      uint64_t v45 = v16;
      do
      {
        if (v18) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(v15 + 8 * v17 + 32);
        }
        uint64_t v21 = v20;
        PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.score.getter();
        if (v22 >= 0.5)
        {
          uint64_t v23 = *(void *)(v0 + 40);
          uint64_t v24 = *(void *)(v0 + 24);
          PersonEntityTaggingService.ScoreRankedEntityTagPersons.ScoredPerson.id.getter();
          EntityIdentifier.stringValue.getter();
          (*v43)(v23, v24);
          NSString v25 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v26 = [v14 personForIdentifier:v25];

          if (v26)
          {
            id v27 = [v26 names];
            uint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v28 = [v26 phoneNumbers];
            uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v30 = [v26 emails];
            uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v32 = [v26 contactIdentifiers];
            uint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v11 = sub_100168F00(0, v11[2] + 1, 1, v11);
            }
            unint64_t v35 = v11[2];
            unint64_t v34 = v11[3];
            if (v35 >= v34 >> 1) {
              uint64_t v11 = sub_100168F00((void *)(v34 > 1), v35 + 1, 1, v11);
            }
            void v11[2] = v35 + 1;
            NSString v19 = &v11[4 * v35];
            v19[4] = v46;
            v19[5] = v29;
            v19[6] = v31;
            v19[7] = v33;

            unint64_t v15 = v41;
            uint64_t v14 = v42;
          }
          unint64_t v18 = v44;
          uint64_t v16 = v45;
        }
        ++v17;
      }
      while (v16 != v17);
      goto LABEL_31;
    }
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_31:
  unint64_t v36 = *(void **)(v0 + 88);
  uint64_t v37 = *(void *)(v0 + 64);
  uint64_t v38 = *(void **)(v0 + 72);
  uint64_t v39 = *(void *)(v0 + 48);
  uint64_t v40 = *(void *)(v0 + 56);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v37, v39);
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
  return v12(v11);
}

uint64_t sub_1001B175C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No Suggestions from Megadome: %@", v7, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void *))(v0 + 8);
  return v10(_swiftEmptyArrayStorage);
}

uint64_t sub_1001B198C()
{
  uint64_t result = sub_1001B19B0();
  qword_10033E948 = result;
  unk_10033E950 = v1;
  return result;
}

uint64_t sub_1001B19B0()
{
  id v0 = [self processInfo];
  id v1 = [v0 environment];

  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16) && (unint64_t v3 = sub_1001358B8(0xD000000000000010, 0x800000010029F430), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1001B1A90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2, v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  v16[1] = &_swiftEmptyArrayStorage;
  sub_1001B44CC((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_10019F530();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_1001D7158();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E700);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "============== appleaccountd starting ==============", v14, 2u);
    swift_slowDealloc();
  }

  return v1;
}

uint64_t sub_1001B1DE0()
{
  type metadata accessor for XPCNotificationObserver();
  swift_initStaticObject();
  sub_1001A09AC();
  if (qword_100320C10 != -1) {
    swift_once();
  }
  *(void *)(qword_10033E840 + OBJC_IVAR____TtC13appleaccountd18AppInstallObserver_observers) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppleAccountDaemon()
{
  return self;
}

void sub_1001B1EBC(void *a1)
{
  if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    uint64_t v1 = String.init(cString:)();
    unint64_t v3 = v2;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v1, v3, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "notifyd Event name: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (qword_100320C98 != -1) {
      swift_once();
    }
    sub_1001B9064(v1, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E700);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "notifyd Event name unavailable", v10, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001B21A0(void *a1)
{
  if (qword_100320C10 != -1) {
    swift_once();
  }
  return sub_1000C3320(a1);
}

uint64_t sub_1001B23D4(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8, v9);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v18 = sub_10000850C(0, (unint64_t *)&qword_10032ACF0);
  NSString v19 = &off_1002FF8B0;
  *(void *)&long long v17 = a1;
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100323AD0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields) = &_swiftEmptyDictionarySingleton;
  uint64_t v12 = OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue;
  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = &_swiftEmptyArrayStorage;
  sub_1001B44CC((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_10019F530();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(void *)(a2 + v12) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100041E8C(&v17, a2 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController);
  return a2;
}

void sub_1001B2704()
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E700);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "processLaunchEvents", v3, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_10032A860);
  uint64_t v4 = static OS_dispatch_queue.main.getter();
  uint64_t v12 = sub_1001B1EBC;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  uint64_t v10 = sub_10003101C;
  uint64_t v11 = &unk_1002FF4D0;
  uint64_t v5 = _Block_copy(&v8);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v4, v5);
  _Block_release(v5);

  uint64_t v6 = static OS_dispatch_queue.main.getter();
  uint64_t v12 = sub_1001B21A0;
  uint64_t v13 = 0;
  uint64_t v8 = _NSConcreteStackBlock;
  uint64_t v9 = 1107296256;
  uint64_t v10 = sub_10003101C;
  uint64_t v11 = &unk_1002FF4F8;
  uint64_t v7 = _Block_copy(&v8);
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v6, v7);
  _Block_release(v7);
}

id sub_1001B2918()
{
  uint64_t v101 = type metadata accessor for DependencyRegistry.Entry();
  uint64_t v0 = *(void *)(v101 - 8);
  __chkstk_darwin(v101, v1);
  unint64_t v3 = (void *)((char *)v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting up dependencies", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = type metadata accessor for DependencyRegistry();
  sub_100009F04((uint64_t *)&unk_100325DA0);
  uint64_t v9 = type metadata accessor for XPCActivitySchedulerFactory();
  uint64_t v10 = swift_allocObject();
  v3[3] = v9;
  v3[4] = sub_1001B44CC(&qword_10032AB30, (void (*)(uint64_t))type metadata accessor for XPCActivitySchedulerFactory);
  *unint64_t v3 = v10;
  uint64_t v12 = v0 + 104;
  uint64_t v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v0 + 104);
  unsigned int v105 = enum case for DependencyRegistry.Entry.factory(_:);
  uint64_t v13 = v101;
  uint64_t v106 = v11;
  ((void (*)(uint64_t *))v11)(v3);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v16 = *(void (**)(uint64_t *, uint64_t))(v0 + 8);
  uint64_t v15 = v0 + 8;
  uint64_t v14 = v16;
  v16(v3, v13);
  uint64_t v17 = type metadata accessor for DaemonAccountStore();
  uint64_t v18 = swift_allocObject();
  id result = [self defaultStore];
  if (result)
  {
    *(void *)(v18 + 16) = result;
    id v97 = self;
    *(void *)(v18 + 24) = [v97 sharedInstance];
    uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321920);
    v3[3] = v17;
    *unint64_t v3 = v18;
    uint64_t v21 = enum case for DependencyRegistry.Entry.exact(_:);
    uint64_t v22 = v101;
    v106(v3, enum case for DependencyRegistry.Entry.exact(_:), v101);
    uint64_t v98 = v18;
    swift_retain();
    uint64_t v95 = v20;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v14(v3, v22);
    id v23 = [objc_allocWithZone((Class)CDPWalrusStateController) init];
    id v24 = [objc_allocWithZone((Class)CDPStateController) init];
    uint64_t v103 = v14;
    id v25 = v24;
    uint64_t v26 = type metadata accessor for CDPRequestController();
    uint64_t v27 = v12;
    uint64_t v99 = v8;
    uint64_t v28 = v21;
    unsigned int v102 = v21;
    uint64_t v29 = v15;
    uint64_t v30 = v26;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v23;
    *(void *)(v31 + 24) = v25;
    v109[3] = v30;
    v109[4] = &off_1002F6958;
    v109[0] = v31;
    sub_100009F04((uint64_t *)&unk_100321910);
    id v32 = sub_100008EF8(v109, v30);
    v3[3] = v30;
    uint64_t v33 = sub_10003584C(v3);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v33, v32, v30);
    unint64_t v34 = v106;
    v106(v3, v28, v22);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    unint64_t v35 = v103;
    v103(v3, v22);
    uint64_t v100 = v29;
    sub_100009F04(&qword_10032F8F0);
    uint64_t v36 = type metadata accessor for CDPFollowUpHandlerFactory();
    uint64_t v37 = swift_allocObject();
    v3[3] = v36;
    v3[4] = sub_1001B44CC(&qword_10032AB38, (void (*)(uint64_t))type metadata accessor for CDPFollowUpHandlerFactory);
    *unint64_t v3 = v37;
    v34(v3, v105, v22);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v22);
    id v38 = [objc_allocWithZone((Class)AAFollowUpController) init];
    sub_100009F04((uint64_t *)&unk_100321900);
    v3[3] = sub_10000850C(0, (unint64_t *)&qword_10032ACF0);
    *unint64_t v3 = (uint64_t)v38;
    uint64_t v39 = v102;
    v34(v3, v102, v22);
    id v94 = v38;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v22);
    id v40 = [v97 sharedInstance];
    v3[3] = sub_10000850C(0, (unint64_t *)&qword_100321930);
    *unint64_t v3 = (uint64_t)v40;
    uint64_t v104 = v27;
    v34(v3, v39, v22);
    id v97 = v40;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v22);
    id v41 = [self currentInfo];
    if (!v41) {
      id v41 = [objc_allocWithZone((Class)AADeviceInfo) init];
    }
    v3[3] = sub_10000850C(0, &qword_1003215E8);
    *unint64_t v3 = (uint64_t)v41;
    uint64_t v42 = v101;
    double v43 = v106;
    v106(v3, v39, v101);
    id v96 = v41;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    sub_100009F04(&qword_10032AB40);
    v3[3] = (uint64_t)&type metadata for DeviceInfoProvider;
    v43(v3, v39, v42);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    sub_100009F04((uint64_t *)&unk_100321940);
    id v44 = [objc_allocWithZone((Class)AAFKeychainManager) init];
    v3[3] = sub_10000850C(0, &qword_10032AB48);
    *unint64_t v3 = (uint64_t)v44;
    v43(v3, v39, v42);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    uint64_t v45 = type metadata accessor for AccountStoreFactory();
    uint64_t v46 = swift_allocObject();
    v3[3] = v45;
    v3[4] = sub_1001B44CC(&qword_10032AB50, (void (*)(uint64_t))type metadata accessor for AccountStoreFactory);
    *unint64_t v3 = v46;
    v43(v3, v105, v42);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    uint64_t v47 = sub_10000850C(0, (unint64_t *)&qword_1003245C0);
    id v48 = [self standardUserDefaults];
    v3[3] = v47;
    *unint64_t v3 = (uint64_t)v48;
    v43(v3, v39, v42);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    sub_100009F04((uint64_t *)&unk_100323AD0);
    uint64_t v49 = type metadata accessor for DeviceStateFactory();
    uint64_t v50 = swift_allocObject();
    v3[3] = v49;
    v3[4] = sub_1001B44CC(&qword_10032AB58, (void (*)(uint64_t))type metadata accessor for DeviceStateFactory);
    *unint64_t v3 = v50;
    v43(v3, v105, v42);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v35(v3, v42);
    uint64_t v51 = v35;
    uint64_t v52 = type metadata accessor for CDPContextProvider();
    uint64_t v53 = swift_allocObject();
    sub_100009F04((uint64_t *)&unk_10032D6F0);
    v3[3] = v52;
    *unint64_t v3 = v53;
    v43(v3, v102, v42);
    uint64_t v95 = v53;
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v51(v3, v42);
    uint64_t v54 = type metadata accessor for DaemonAnalyticsAccountModel();
    uint64_t v55 = swift_allocObject();
    id v94 = v94;
    uint64_t v56 = sub_1001B23D4((uint64_t)v94, v55);
    sub_100009F04((uint64_t *)&unk_10032A630);
    v3[3] = v54;
    *unint64_t v3 = v56;
    uint64_t v57 = v102;
    uint64_t v58 = v106;
    v106(v3, v102, v42);
    v93[1] = v56;
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v51(v3, v42);
    sub_100009F04((uint64_t *)&unk_1003224B0);
    if (qword_100320C28 != -1) {
      swift_once();
    }
    uint64_t v59 = qword_10033E870;
    v3[3] = type metadata accessor for CloudKitStore();
    *unint64_t v3 = v59;
    uint64_t v60 = v101;
    v58(v3, v57, v101);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v103(v3, v60);
    uint64_t v61 = type metadata accessor for CloudKitSyncManager();
    swift_allocObject();
    uint64_t v62 = swift_retain();
    uint64_t v63 = sub_100159438(v62);
    v93[0] = v63;
    swift_release();
    sub_100009F04((uint64_t *)&unk_10032A640);
    v3[3] = v61;
    *unint64_t v3 = (uint64_t)v63;
    uint64_t v64 = v106;
    v106(v3, v57, v60);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v103(v3, v60);
    sub_100009F04((uint64_t *)&unk_10032ACA0);
    uint64_t v65 = type metadata accessor for NotificationManagerFactory();
    uint64_t v66 = swift_allocObject();
    v3[3] = v65;
    *unint64_t v3 = v66;
    uint64_t v67 = v64;
    v64(v3, v57, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    id v68 = v103;
    v103(v3, v60);
    sub_100009F04(&qword_10032AB60);
    uint64_t v69 = type metadata accessor for DeamonSetupServiceRequestController();
    uint64_t v70 = swift_allocObject();
    v3[3] = v69;
    *unint64_t v3 = v70;
    v67(v3, v102, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v68(v3, v60);
    sub_10000850C(0, (unint64_t *)&unk_10032F8D0);
    uint64_t v71 = type metadata accessor for TapToRadarHelperFactory();
    uint64_t v72 = swift_allocObject();
    v3[3] = v71;
    v3[4] = sub_1001B44CC(&qword_10032AB68, (void (*)(uint64_t))type metadata accessor for TapToRadarHelperFactory);
    *unint64_t v3 = v72;
    id v73 = v67;
    uint64_t v74 = v105;
    v73(v3, v105, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v75 = v103;
    v103(v3, v60);
    sub_100009F04(&qword_100325150);
    uint64_t v76 = type metadata accessor for TapToRadarRequesterFactory();
    uint64_t v77 = swift_allocObject();
    v3[3] = v76;
    v3[4] = sub_1001B44CC(&qword_10032AB70, (void (*)(uint64_t))type metadata accessor for TapToRadarRequesterFactory);
    *unint64_t v3 = v77;
    uint64_t v78 = v74;
    uint64_t v79 = v106;
    v106(v3, v78, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v75(v3, v60);
    sub_100009F04(&qword_10032AD00);
    uint64_t v80 = type metadata accessor for WalrusPCSSignatureValidatorFactory();
    uint64_t v81 = swift_allocObject();
    v3[3] = v80;
    v3[4] = sub_1001B44CC(&qword_10032AB78, (void (*)(uint64_t))type metadata accessor for WalrusPCSSignatureValidatorFactory);
    *unint64_t v3 = v81;
    v79(v3, v105, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v82 = v75;
    v75(v3, v60);
    sub_100009F04(&qword_100322490);
    type metadata accessor for DaemonStorageFactory();
    swift_initStackObject();
    sub_1000E4E84(v107);
    swift_release();
    uint64_t v83 = v108;
    BOOL v84 = sub_100008EF8(v107, v108);
    v3[3] = v83;
    uint64_t v85 = sub_10003584C(v3);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v83 - 8) + 16))(v85, v84, v83);
    uint64_t v86 = v102;
    uint64_t v87 = v106;
    v106(v3, v102, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v82(v3, v60);
    sub_100008EA8((uint64_t)v107);
    sub_100009F04(&qword_100320D40);
    uint64_t v88 = type metadata accessor for UrlBagProvider();
    uint64_t v89 = swift_allocObject();
    strcpy((char *)(v89 + 16), "custodianCfgs");
    *(_WORD *)(v89 + 30) = -4864;
    *(void *)(v89 + 32) = 0xD000000000000026;
    *(void *)(v89 + 40) = 0x800000010029F380;
    v3[3] = v88;
    *unint64_t v3 = v89;
    v87(v3, v86, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v82(v3, v60);
    uint64_t v90 = v82;
    sub_100009F04((uint64_t *)&unk_100325B28);
    uint64_t v91 = type metadata accessor for EDPAndADPCheckingFactory();
    uint64_t v92 = swift_allocObject();
    v3[3] = v91;
    v3[4] = sub_1001B44CC((unint64_t *)&unk_10032AB80, (void (*)(uint64_t))type metadata accessor for EDPAndADPCheckingFactory);
    *unint64_t v3 = v92;
    v87(v3, v105, v60);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    v90(v3, v60);
    return (id)sub_100008EA8((uint64_t)v109);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001B3BE4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320C90 != -1) {
    swift_once();
  }
  if (unk_10033E950) {
    uint64_t v5 = qword_10033E948;
  }
  else {
    uint64_t v5 = 0xD000000000000012;
  }
  if (unk_10033E950) {
    unint64_t v6 = unk_10033E950;
  }
  else {
    unint64_t v6 = 0x800000010029F360;
  }
  uint64_t v7 = qword_100320B70;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_100007288(v0, (uint64_t)qword_10033E700);
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v45 = v8;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v46 = v4;
    uint64_t v48 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_100135190(v5, v6, &v48);
    uint64_t v8 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting appleaccountd - %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v46;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1001B2704();
  sub_1001B2918();
  if (qword_100320C98 != -1) {
    swift_once();
  }
  sub_1001B6630();
  type metadata accessor for XPCNotificationObserver();
  swift_initStaticObject();
  sub_1001A0584();
  id v13 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v14 = [v13 aa_primaryAppleAccount];
  if (v14)
  {
    uint64_t v15 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v8, v0);
    id v16 = v15;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v44 = v13;
      uint64_t v45 = v1;
      uint64_t v46 = v4;
      NSString v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)NSString v19 = 136315138;
      id v20 = [v16 username];
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;

        uint64_t v47 = sub_100135190(v22, v24, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Logged into: %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v0);
      }
      else
      {

        __break(1u);
      }
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
  else
  {
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not logged in to AppleAccount", v27, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for EnhancedAndAdvancedDataProtectionChecks();
    uint64_t v28 = swift_allocObject();
    sub_100009F04((uint64_t *)&unk_100321910);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_10032ACA0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_10032F8E0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100323AD0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04(&qword_10032F8F0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100321920);
    Dependency.init(dependencyId:config:)();
    sub_100009F04(&qword_100320D40);
    Dependency.init(dependencyId:config:)();
    sub_1001721A4();

    swift_setDeallocating();
    uint64_t v29 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpController;
    uint64_t v30 = sub_100009F04((uint64_t *)&unk_1003228A0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
    uint64_t v31 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__notificationManager;
    uint64_t v32 = sub_100009F04(&qword_100322CE0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v31, v32);
    uint64_t v33 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__recoveryFactorsController;
    uint64_t v34 = sub_100009F04((uint64_t *)&unk_1003245F0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v33, v34);
    uint64_t v35 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__deviceState;
    uint64_t v36 = sub_100009F04(qword_100323C78);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
    uint64_t v37 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__cdpFollowUpHandler;
    uint64_t v38 = sub_100009F04(&qword_100329080);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(v37, v38);
    uint64_t v39 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__accountStore;
    uint64_t v40 = sub_100009F04(&qword_100325870);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(v39, v40);
    uint64_t v41 = v28 + OBJC_IVAR____TtC13appleaccountd39EnhancedAndAdvancedDataProtectionChecks__urlBagProvider;
    uint64_t v42 = sub_100009F04(&qword_100321CD8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(v41, v42);
    swift_deallocClassInstance();
  }
}

uint64_t sub_1001B44CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1001B451C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ConnectionManager()) init];
  qword_10033E958 = (uint64_t)result;
  return result;
}

id sub_1001B4550()
{
  uint64_t v1 = type metadata accessor for DependencyRegistry.Entry();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (void *)((char *)v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = v0;
  sub_100009F04((uint64_t *)&unk_10032A640);
  Dependency.init(dependencyId:config:)();
  uint64_t v7 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_daemonManager;
  *(void *)&v6[v7] = [objc_allocWithZone((Class)type metadata accessor for AppleAccountDaemonManager()) init];
  uint64_t v8 = type metadata accessor for CustodianDefaults();
  uint64_t v9 = swift_allocObject();
  os_log_type_t v10 = (uint64_t *)&v6[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDefaults];
  v10[3] = v8;
  v10[4] = (uint64_t)&off_1002FEB00;
  uint64_t *v10 = v9;
  uint64_t v194 = type metadata accessor for DependencyRegistry();
  sub_100009F04(&qword_10032AD08);
  uint64_t v11 = sub_100008EF8(v10, v8);
  v5[3] = v8;
  uint64_t v12 = sub_10003584C(v5);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(v12, v11, v8);
  unsigned int v189 = enum case for DependencyRegistry.Entry.exact(_:);
  id v13 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 104);
  uint64_t v190 = v2 + 104;
  v188 = v13;
  ((void (*)(uint64_t *))v13)(v5);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  id v14 = *(void (**)(uint64_t *, uint64_t))(v2 + 8);
  uint64_t v193 = v2 + 8;
  v191 = v14;
  uint64_t v15 = v1;
  v14(v5, v1);
  uint64_t v16 = type metadata accessor for TrustedContactHealthScheduler();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = sub_100009F04((uint64_t *)&unk_100325DA0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  *(void *)(v17 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider) = 0;
  v187 = v6;
  NSString v19 = (uint64_t *)&v6[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_healthScheduler];
  v19[3] = v16;
  v19[4] = (uint64_t)&off_1002FEF70;
  uint64_t *v19 = v17;
  sub_100009F04((uint64_t *)&unk_10032D750);
  id v20 = sub_100008EF8(v19, v16);
  v5[3] = v16;
  uint64_t v21 = sub_10003584C(v5);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v21, v20, v16);
  uint64_t v22 = v189;
  v13(v5, v189, v15);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v191(v5, v15);
  uint64_t v23 = type metadata accessor for TrustedContactsPreflightScheduler();
  uint64_t v24 = swift_allocObject();
  uint64_t v176 = v18;
  Dependency.init(dependencyId:config:)();
  *(void *)(v24 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider) = 0;
  id v25 = (uint64_t *)&v6[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_trustedContactsPreflightScheduler];
  uint64_t v25[3] = v23;
  v25[4] = (uint64_t)&off_1002FAA40;
  *id v25 = v24;
  sub_100009F04((uint64_t *)&unk_10032ACB0);
  os_log_type_t v26 = sub_100008EF8(v25, v23);
  v5[3] = v23;
  uint64_t v27 = sub_10003584C(v5);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(v27, v26, v23);
  uint64_t v28 = v22;
  uint64_t v29 = v188;
  v188(v5, v22, v15);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v30 = v191;
  v191(v5, v15);
  id v31 = [objc_allocWithZone((Class)AKInheritanceController) init];
  uint64_t v32 = sub_100009F04((uint64_t *)&unk_100325A50);
  v5[3] = swift_getObjectType();
  *uint64_t v5 = (uint64_t)v31;
  v29(v5, v28, v15);
  id v175 = v31;
  v186 = (void *)v32;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v30(v5, v15);
  uint64_t v33 = v30;
  type metadata accessor for DaemonStorageFactory();
  swift_initStackObject();
  sub_1000E4E84(&v202);
  swift_release();
  uint64_t v34 = sub_1000084BC((uint64_t)&v202, (uint64_t)v203);
  __chkstk_darwin(v34, v34);
  uint64_t v36 = (void *)((char *)v170 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  uint64_t v38 = *v36;
  uint64_t v39 = type metadata accessor for StorageController();
  uint64_t v200 = v39;
  v201 = &off_1002FBC50;
  *(void *)&long long v199 = v38;
  uint64_t v40 = type metadata accessor for InheritanceStorageController();
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = sub_1000084BC((uint64_t)&v199, v39);
  __chkstk_darwin(v42, v42);
  id v44 = (void *)((char *)v170 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v45 + 16))(v44);
  uint64_t v46 = *v44;
  uint64_t v47 = (void *)(v41 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController);
  uint64_t v47[3] = v39;
  v47[4] = &off_1002FBC50;
  void *v47 = v46;
  uint64_t v48 = sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100008EA8((uint64_t)&v199);
  sub_100008EA8((uint64_t)&v202);
  uint64_t v49 = sub_100009F04((uint64_t *)&unk_100321850);
  v179 = (ValueMetadata *)v40;
  v5[3] = v40;
  *uint64_t v5 = v41;
  uint64_t v50 = v189;
  uint64_t v51 = v188;
  v188(v5, v189, v15);
  uint64_t v184 = v41;
  swift_retain();
  uint64_t v185 = v49;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v33(v5, v15);
  uint64_t v52 = type metadata accessor for InheritanceSecurityController();
  uint64_t v53 = swift_allocObject();
  v180 = (void *)v48;
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  *(void *)(v53 + 16) = [objc_allocWithZone((Class)CDPInheritanceTrustController) init];
  sub_100009F04(&qword_1003218C0);
  v5[3] = v52;
  *uint64_t v5 = v53;
  v51(v5, v50, v15);
  uint64_t v174 = v53;
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v33(v5, v15);
  uint64_t v54 = type metadata accessor for InheritanceCleanupController();
  uint64_t v55 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  Dependency.init(dependencyId:config:)();
  uint64_t v185 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceCleanupController;
  *(void *)&v187[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceCleanupController] = v55;
  v5[3] = v54;
  *uint64_t v5 = v55;
  v51(v5, v189, v15);
  swift_retain();
  v177 = (ValueMetadata *)v54;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v33(v5, v15);
  id v56 = [self sharedService];
  uint64_t v57 = (ValueMetadata *)type metadata accessor for DaemonDestinationBuilder();
  uint64_t v58 = swift_allocObject();
  v203 = v57;
  v204 = &off_1002FAE40;
  v202 = (void *)v58;
  uint64_t v59 = (ValueMetadata *)type metadata accessor for DaemonIDSMessenger();
  uint64_t v60 = (void *)swift_allocObject();
  uint64_t v61 = sub_1000084BC((uint64_t)&v202, (uint64_t)v57);
  __chkstk_darwin(v61, v61);
  uint64_t v63 = (void *)((char *)v170 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v64 + 16))(v63);
  uint64_t v65 = *v63;
  v60[6] = v57;
  v60[7] = &off_1002FAE40;
  v60[2] = v56;
  v60[3] = v65;
  id v171 = v56;
  uint64_t v173 = v58;
  swift_retain();
  sub_100008EA8((uint64_t)&v202);
  v203 = v59;
  v204 = &off_1002F7F58;
  v202 = v60;
  type metadata accessor for InheritanceSetupMessenger();
  uint64_t v66 = (void *)swift_allocObject();
  uint64_t v67 = sub_1000084BC((uint64_t)&v202, (uint64_t)v59);
  __chkstk_darwin(v67, v67);
  uint64_t v69 = (void *)((char *)v170 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v70 + 16))(v69);
  uint64_t v71 = *v69;
  v66[5] = v59;
  v66[6] = &off_1002F7F58;
  v186 = v66;
  v66[2] = v71;
  uint64_t v172 = v60;
  swift_retain();
  sub_100008EA8((uint64_t)&v202);
  if (qword_100320C28 != -1) {
    swift_once();
  }
  uint64_t v72 = qword_10033E870;
  id v73 = (ValueMetadata *)type metadata accessor for CloudKitStore();
  v203 = v73;
  v204 = &off_1002FE7A0;
  v202 = (void *)v72;
  type metadata accessor for InheritanceCloudSharingController();
  uint64_t v74 = (uint64_t *)swift_allocObject();
  uint64_t v75 = sub_1000084BC((uint64_t)&v202, (uint64_t)v73);
  __chkstk_darwin(v75, v75);
  uint64_t v77 = (void *)((char *)v170 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v78 + 16))(v77);
  uint64_t v79 = *v77;
  v74[5] = (uint64_t)v73;
  v74[6] = (uint64_t)&off_1002FE7A0;
  v74[2] = v79;
  uint64_t v80 = v74;
  v183 = v74;
  swift_retain();
  sub_100008EA8((uint64_t)&v202);
  uint64_t v81 = v184;
  swift_retain();
  uint64_t v82 = (uint64_t)v186;
  swift_retain();
  swift_retain();
  uint64_t v83 = sub_1001B8058(v81, v82, v80, (uint64_t (*)(void))type metadata accessor for InheritanceSetupMessenger, (uint64_t)&off_1002FEA68, (uint64_t)&off_1002F78A0, (void (*)(void))type metadata accessor for BeneficiaryAcceptedStatusHandler);
  v182 = v83;
  uint64_t v84 = type metadata accessor for BeneficiaryAcceptedStatusHandler();
  v5[3] = v84;
  *uint64_t v5 = (uint64_t)v83;
  uint64_t v192 = v15;
  uint64_t v85 = v188;
  v188(v5, v189, v15);
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v191(v5, v15);
  type metadata accessor for UserNotificationManager();
  uint64_t v86 = (uint64_t *)swift_allocObject();
  Dependency.init(dependencyId:config:)();
  id v87 = [objc_allocWithZone((Class)AAFollowUpController) init];
  uint64_t v88 = (uint64_t *)((char *)v86 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v88[3] = sub_10000850C(0, (unint64_t *)&qword_10032ACF0);
  v88[4] = &off_1002FF8B0;
  void *v88 = v87;
  uint64_t v89 = (objc_class *)type metadata accessor for NotificationController();
  id v90 = [objc_allocWithZone(v89) init];
  uint64_t v91 = (uint64_t *)((char *)v86 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v91[3] = v89;
  v91[4] = &off_100301A10;
  void *v91 = v90;
  uint64_t v92 = *(void *)&v187[v185];
  swift_retain();
  swift_retain();
  v181 = v86;
  swift_retain();
  unint64_t v93 = sub_1001B8058(v81, v92, v86, (uint64_t (*)(void))type metadata accessor for InheritanceCleanupController, (uint64_t)&off_100300148, (uint64_t)&off_100302870, (void (*)(void))type metadata accessor for BeneficiaryDeclinedStatusHandler);
  uint64_t v94 = type metadata accessor for BeneficiaryDeclinedStatusHandler();
  v5[3] = v94;
  *uint64_t v5 = (uint64_t)v93;
  uint64_t v95 = v189;
  v85(v5, v189, v192);
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v191(v5, v192);
  uint64_t v96 = (uint64_t)v179;
  v203 = v179;
  v204 = &off_1002FAF10;
  v202 = (void *)v81;
  uint64_t v200 = v84;
  v201 = &off_1002FC0B0;
  *(void *)&long long v199 = v182;
  uint64_t v197 = v94;
  v198 = &off_100303FD0;
  *(void *)&long long v196 = v93;
  uint64_t v97 = type metadata accessor for InheritanceInvitationResponseHandler();
  uint64_t v98 = (void *)swift_allocObject();
  uint64_t v99 = sub_1000084BC((uint64_t)&v202, v96);
  __chkstk_darwin(v99, v99);
  uint64_t v101 = (void *)((char *)v170 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v102 + 16))(v101);
  uint64_t v103 = *v101;
  v98[5] = v96;
  void v98[6] = &off_1002FAF10;
  v98[2] = v103;
  sub_100041E8C(&v199, (uint64_t)(v98 + 7));
  sub_100041E8C(&v196, (uint64_t)(v98 + 12));
  uint64_t v104 = v81;
  swift_retain();
  swift_retain();
  v170[1] = v93;
  swift_retain();
  sub_100008EA8((uint64_t)&v202);
  v5[3] = v97;
  *uint64_t v5 = (uint64_t)v98;
  unsigned int v105 = v188;
  v188(v5, v95, v192);
  v180 = v98;
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v106 = v191;
  v191(v5, v192);
  type metadata accessor for DaemonFamilyRequester();
  uint64_t v107 = swift_allocObject();
  uint64_t v108 = v104;
  swift_retain_n();
  uint64_t v109 = (uint64_t)v186;
  swift_retain();
  uint64_t v110 = sub_1001B7C48(v108, v107);
  type metadata accessor for DaemonMessageUtil();
  uint64_t v111 = (uint64_t *)swift_allocObject();
  uint64_t v112 = sub_1001B8344(v108, v109, (uint64_t)v110, v111);
  v5[3] = type metadata accessor for InheritanceInvitationHandler();
  *uint64_t v5 = v112;
  uint64_t v113 = v95;
  v105(v5, v95, v192);
  v179 = (ValueMetadata *)v112;
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v114 = v106;
  v106(v5, v192);
  swift_retain();
  uint64_t v115 = (uint64_t)v183;
  swift_retain();
  uint64_t v116 = v181;
  swift_retain();
  unint64_t v117 = v116;
  uint64_t v118 = v192;
  uint64_t v119 = sub_1001B8608(v115, v108, v117);
  v5[3] = type metadata accessor for InheritanceAccessKeyMessageHandler();
  *uint64_t v5 = (uint64_t)v119;
  v105(v5, v113, v118);
  v178 = v119;
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v114(v5, v118);
  id v120 = *(void **)&v187[v185];
  uint64_t v121 = (uint64_t)v177;
  v203 = v177;
  v204 = &off_100300148;
  v202 = v120;
  uint64_t v122 = type metadata accessor for BeneficiaryRemovedMessageHandler();
  id v123 = (void *)swift_allocObject();
  uint64_t v124 = sub_1000084BC((uint64_t)&v202, v121);
  __chkstk_darwin(v124, v124);
  uint64_t v126 = (void *)((char *)v170 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v127 + 16))(v126);
  uint64_t v128 = *v126;
  v123[5] = v121;
  v123[6] = &off_100300148;
  v123[2] = v128;
  swift_retain();
  sub_100008EA8((uint64_t)&v202);
  v5[3] = v122;
  *uint64_t v5 = (uint64_t)v123;
  uint64_t v129 = v189;
  uint64_t v130 = v188;
  v188(v5, v189, v118);
  uint64_t v185 = (uint64_t)v123;
  swift_retain();
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v191(v5, v118);
  type metadata accessor for DaemonAccountStore();
  uint64_t v131 = swift_allocObject();
  id result = [self defaultStore];
  long long v133 = v187;
  if (result)
  {
    uint64_t v134 = v130;
    *(void *)(v131 + 16) = result;
    *(void *)(v131 + 24) = [self sharedInstance];
    uint64_t v135 = (uint64_t)v180;
    swift_retain();
    uint64_t v136 = (uint64_t)v179;
    swift_retain();
    uint64_t v137 = (uint64_t)v178;
    swift_retain();
    uint64_t v138 = (uint64_t *)v185;
    swift_retain();
    id v139 = sub_1001B88EC(v131, v136, v135, v137, v138);
    v140 = &v133[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceMessageProcessor];
    *(void *)v140 = v139;
    *((void *)v140 + 1) = &off_1003015A8;
    sub_100009F04(&qword_10032AD10);
    v5[3] = swift_getObjectType();
    *uint64_t v5 = (uint64_t)v139;
    uint64_t v141 = v192;
    v134(v5, v129, v192);
    id v142 = v139;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v143 = v191;
    v191(v5, v141);
    uint64_t v144 = sub_10000850C(0, (unint64_t *)&unk_1003218F0);
    id v145 = [objc_allocWithZone((Class)AAPreferences) init];
    v5[3] = v144;
    *uint64_t v5 = (uint64_t)v145;
    v134(v5, v129, v141);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v143(v5, v141);
    uint64_t v146 = (objc_class *)type metadata accessor for InheritanceRequestManager();
    id v147 = [objc_allocWithZone(v146) init];
    v177 = (ValueMetadata *)OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager;
    uint64_t v148 = v187;
    *(void *)&v187[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager] = v147;
    type metadata accessor for CustodianDaemonContainer();
    swift_allocObject();
    *(void *)&v148[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer] = sub_10021AC80();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v149 = objc_allocWithZone((Class)NSXPCListener);
    NSString v150 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v151 = [v149 initWithMachServiceName:v150];

    *(void *)&v148[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener] = v151;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v152 = objc_allocWithZone((Class)NSXPCListener);
    NSString v153 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v154 = [v152 initWithMachServiceName:v153];

    *(void *)&v148[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener] = v154;
    type metadata accessor for PostInstallActivityScheduler();
    uint64_t v155 = swift_allocObject();
    Dependency.init(dependencyId:config:)();
    *(void *)(v155 + OBJC_IVAR____TtC13appleaccountd28PostInstallActivityScheduler____lazy_storage___activityProvider) = 0;
    *(void *)&v148[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_postInstallActivityScheduler] = v155;
    uint64_t v156 = *(void **)((char *)&v177->Kind + (void)v148);
    v5[3] = (uint64_t)v146;
    *uint64_t v5 = (uint64_t)v156;
    uint64_t v157 = v192;
    uint64_t v158 = v189;
    uint64_t v159 = v188;
    v188(v5, v189, v192);
    id v160 = v156;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v161 = v191;
    v191(v5, v157);
    uint64_t v162 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
    uint64_t v163 = type metadata accessor for InheritanceRecordsCleaner();
    uint64_t v164 = swift_allocObject();
    uint64_t v165 = sub_1001B8E58(v162, v164);
    sub_100009F04((uint64_t *)&unk_1003218E0);
    v5[3] = v163;
    *uint64_t v5 = v165;
    v159(v5, v158, v157);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v161(v5, v157);
    v203 = &type metadata for AAFeatureFlags;
    v204 = (_UNKNOWN **)sub_1001B986C();
    LOBYTE(v202) = 1;
    LOBYTE(v162) = isFeatureEnabled(_:)();
    sub_100008EA8((uint64_t)&v202);
    uint64_t v166 = type metadata accessor for AppleIDAvailabilityScheduler();
    swift_allocObject();
    uint64_t v167 = sub_100013800((uint64_t)sub_1001B60F8, 0, v162 & 1);
    uint64_t v168 = v187;
    *(void *)&v187[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_appleIDAvailabilityScheduler] = v167;
    v5[3] = v166;
    *uint64_t v5 = v167;
    v159(v5, v189, v157);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();

    v191(v5, v157);
    uint64_t v169 = (objc_class *)type metadata accessor for ConnectionManager();
    v195.receiver = v168;
    v195.super_class = v169;
    return [super init];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B60F8(void *a1)
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E778);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 138412290;
    id v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ConnectionManager: Sending %@ to reporter", v6, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v9 = [objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter()) init];
  [objc_msgSend(self, "reporter") sendEvent:v3];

  return swift_unknownObjectRelease();
}

id sub_1001B6314()
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  [*(id *)&v0[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener] invalidate];
  [*(id *)&v0[v1] setDelegate:0];
  uint64_t v2 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener;
  [*(id *)&v0[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener] invalidate];
  [*(id *)&v0[v2] setDelegate:0];
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ConnectionManager();
  return [super dealloc];
}

uint64_t sub_1001B6508()
{
  return type metadata accessor for ConnectionManager();
}

uint64_t type metadata accessor for ConnectionManager()
{
  uint64_t result = qword_10032AC20;
  if (!qword_10032AC20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001B655C()
{
  sub_1001B7530();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1001B6630()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v110 = *(void *)(v2 - 8);
  uint64_t v111 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v109 = (char *)v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  unint64_t v6 = &off_10031D000;
  id v7 = [*(id *)(v0 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener) serviceName];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v12;
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100007288(v13, (uint64_t)qword_10033E700);
  swift_bridgeObjectRetain();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v112 = v14;
  uint64_t v113 = v1;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    v117[0] = sub_100135190(v9, v11, v118);
    uint64_t v1 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Resuming XPC listener for Mach service %s...", v18, 0xCu);
    swift_arrayDestroy();
    unint64_t v6 = &off_10031D000;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  NSString v19 = &off_10031D000;
  [*(id *)(v1 + v5) setDelegate:v1];
  [*(id *)(v1 + v5) resume];
  uint64_t v20 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener;
  id v21 = [*(id *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener) v6[504]];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v26;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    v118[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    v117[0] = sub_100135190(v23, v25, v118);
    uint64_t v1 = v113;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Resuming XPC listener for Mach service %s...", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    NSString v19 = &off_10031D000;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  [*(id *)(v1 + v20) v19[450]:v1];
  [*(id *)(v1 + v20) resume];
  [*(id *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager) startup];
  uint64_t v30 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer;
  long long v108 = *(_OWORD *)(*(void *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer)
                   + 392);
  swift_unknownObjectRetain();
  id v31 = sub_100168494(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v33 = *((void *)v31 + 2);
  unint64_t v32 = *((void *)v31 + 3);
  unint64_t v34 = v33 + 1;
  if (v33 >= v32 >> 1) {
    id v31 = sub_100168494((char *)(v32 > 1), v33 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v34;
  *(_OWORD *)&v31[16 * v33 + 32] = v108;
  unint64_t v35 = *((void *)v31 + 3);
  long long v108 = *(_OWORD *)(*(void *)(v1 + v30) + 408);
  swift_unknownObjectRetain();
  if (v34 >= v35 >> 1) {
    id v31 = sub_100168494((char *)(v35 > 1), v33 + 2, 1, v31);
  }
  *((void *)v31 + 2) = v33 + 2;
  *(_OWORD *)&v31[16 * v34 + 32] = v108;
  id v36 = [objc_allocWithZone((Class)CDPWalrusStateController) init];
  id v37 = [objc_allocWithZone((Class)CDPStateController) init];
  type metadata accessor for CDPRequestController();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v36;
  *(void *)(v38 + 24) = v37;
  id v39 = objc_allocWithZone((Class)AKWalrusController);
  id v40 = v36;
  id v106 = v37;
  swift_retain();
  id v41 = [v39 init];
  type metadata accessor for AuthKitRequestController();
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v41;
  id v107 = v40;
  uint64_t v43 = sub_1001B76A8(v38, (uint64_t)v40, v42);
  uint64_t v104 = (void *)v30;
  sub_100008A94(*(void *)(v1 + v30) + 144, (uint64_t)v118);
  uint64_t v44 = type metadata accessor for UserNotificationManager();
  uint64_t v45 = swift_allocObject();
  swift_retain();
  v103[1] = sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  id v46 = [objc_allocWithZone((Class)AAFollowUpController) init];
  uint64_t v47 = (void *)(v45 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  uint64_t v48 = sub_10000850C(0, (unint64_t *)&qword_10032ACF0);
  uint64_t v47[3] = v48;
  v47[4] = &off_1002FF8B0;
  void *v47 = v46;
  uint64_t v49 = (objc_class *)type metadata accessor for NotificationController();
  id v50 = [objc_allocWithZone(v49) init];
  uint64_t v51 = (void *)(v45 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  void v51[3] = v49;
  v51[4] = &off_100301A10;
  *uint64_t v51 = v50;
  uint64_t v52 = sub_1000084BC((uint64_t)v118, v119);
  __chkstk_darwin(v52, v52);
  uint64_t v54 = (void *)((char *)v103 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v55 + 16))(v54);
  uint64_t v56 = *v54;
  swift_retain();
  uint64_t v105 = v43;
  *(void *)&long long v108 = v38;
  uint64_t v57 = sub_1001B788C(v56, v43, v45, v38);
  sub_100008EA8((uint64_t)v118);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v31 = sub_100168494(0, *((void *)v31 + 2) + 1, 1, v31);
  }
  unint64_t v59 = *((void *)v31 + 2);
  unint64_t v58 = *((void *)v31 + 3);
  if (v59 >= v58 >> 1) {
    id v31 = sub_100168494((char *)(v58 > 1), v59 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v59 + 1;
  uint64_t v60 = &v31[16 * v59];
  *((void *)v60 + 4) = v57;
  *((void *)v60 + 5) = &off_1002FBBD8;
  sub_100008A94(*(void *)((char *)v104 + v113) + 144, (uint64_t)v118);
  uint64_t v61 = swift_allocObject();
  Dependency.init(dependencyId:config:)();
  id v62 = [objc_allocWithZone((Class)AAFollowUpController) init];
  uint64_t v63 = (void *)(v61 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v63[3] = v48;
  v63[4] = &off_1002FF8B0;
  *uint64_t v63 = v62;
  id v64 = [objc_allocWithZone(v49) init];
  uint64_t v65 = (void *)(v61 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v65[3] = v49;
  v65[4] = &off_100301A10;
  *uint64_t v65 = v64;
  uint64_t v66 = sub_1000084BC((uint64_t)v118, v119);
  uint64_t v104 = v103;
  __chkstk_darwin(v66, v66);
  uint64_t v68 = (void *)((char *)v103 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v69 + 16))(v68);
  uint64_t v70 = *v68;
  uint64_t v71 = type metadata accessor for DaemonAccountStore();
  v117[3] = v71;
  v117[4] = &off_1002F66C0;
  v117[0] = v70;
  uint64_t v115 = v44;
  uint64_t v116 = &off_100302870;
  v114[0] = v61;
  type metadata accessor for TermsPushServiceDelegate();
  uint64_t v72 = (void *)swift_allocObject();
  uint64_t v73 = sub_1000084BC((uint64_t)v117, v71);
  __chkstk_darwin(v73, v73);
  uint64_t v75 = (void *)((char *)v103 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v76 + 16))(v75);
  uint64_t v77 = sub_1000084BC((uint64_t)v114, v115);
  __chkstk_darwin(v77, v77);
  uint64_t v79 = (void *)((char *)v103 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v80 + 16))(v79);
  uint64_t v81 = *v75;
  uint64_t v82 = *v79;
  v72[5] = v71;
  v72[6] = &off_1002F66C0;
  v72[2] = v81;
  v72[10] = v44;
  v72[11] = &off_100302870;
  v72[7] = v82;
  swift_retain();
  sub_100008EA8((uint64_t)v114);
  sub_100008EA8((uint64_t)v117);
  swift_release();
  sub_100008EA8((uint64_t)v118);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v31 = sub_100168494(0, *((void *)v31 + 2) + 1, 1, v31);
  }
  unint64_t v84 = *((void *)v31 + 2);
  unint64_t v83 = *((void *)v31 + 3);
  uint64_t v85 = v113;
  if (v84 >= v83 >> 1) {
    id v31 = sub_100168494((char *)(v83 > 1), v84 + 1, 1, v31);
  }
  *((void *)v31 + 2) = v84 + 1;
  uint64_t v86 = &v31[16 * v84];
  *((void *)v86 + 4) = v72;
  *((void *)v86 + 5) = &off_100300B80;
  if (qword_100320CA8 != -1) {
    swift_once();
  }
  uint64_t v87 = qword_10033E970;
  *(void *)(qword_10033E970 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics) = &off_1002F3F78;
  swift_bridgeObjectRelease();
  if (!*(void *)(v87 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection))
  {
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      id v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Starting a new APS Connection", v90, 2u);
      swift_slowDealloc();
    }

    sub_1001E9718();
  }
  sub_1001E83F0((uint64_t)v31);
  swift_bridgeObjectRelease();
  uint64_t v91 = Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v93 = 0;
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "Starting Cloud Sync", v93, 2u);
    swift_slowDealloc();
  }

  uint64_t v94 = Logger.logObject.getter();
  os_log_type_t v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    uint64_t v96 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v96 = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "Custodian/Inheritance is enabled", v96, 2u);
    swift_slowDealloc();
  }

  sub_100008A94(v85 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_healthScheduler, (uint64_t)v118);
  uint64_t v97 = v119;
  uint64_t v98 = v120;
  sub_100008EF8(v118, v119);
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v98);
  sub_100008EA8((uint64_t)v118);
  uint64_t v99 = v109;
  uint64_t v100 = v110;
  uint64_t v101 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v85 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager__syncManager, v111);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v101);
  sub_100008EF8(v118, v119);
  sub_10014C78C(3);
  sub_100008EA8((uint64_t)v118);
  [*(id *)(v85 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_daemonManager) startup];
  swift_retain();
  sub_100013C20();

  swift_release();
  swift_release();
  return swift_release();
}

void sub_1001B7530()
{
  if (!qword_100324050)
  {
    sub_1000112CC((uint64_t *)&unk_10032A640);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100324050);
    }
  }
}

uint64_t sub_1001B758C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = type metadata accessor for CDPRequestController();
  uint64_t v14 = &off_1002F6958;
  *(void *)&long long v12 = a1;
  uint64_t v10 = type metadata accessor for AuthKitRequestController();
  unint64_t v11 = &off_1002FF030;
  *(void *)&long long v9 = a3;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032AB60);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032AD00);
  Dependency.init(dependencyId:config:)();
  sub_100041E8C(&v12, a4 + 16);
  *(void *)(a4 + 56) = a2;
  sub_100041E8C(&v9, a4 + 64);
  return a4;
}

uint64_t sub_1001B76A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = type metadata accessor for CDPRequestController();
  uint64_t v22 = &off_1002F6958;
  v20[0] = a1;
  uint64_t v18 = type metadata accessor for AuthKitRequestController();
  NSString v19 = &off_1002FF030;
  v17[0] = a3;
  type metadata accessor for WalrusPCSAuthRequestProvider(0);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_1000084BC((uint64_t)v20, v21);
  __chkstk_darwin(v7, v7);
  long long v9 = (void *)((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_1000084BC((uint64_t)v17, v18);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_1001B758C(*v9, a2, *v13, v6);
  sub_100008EA8((uint64_t)v17);
  sub_100008EA8((uint64_t)v20);
  return v15;
}

void *sub_1001B788C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DaemonAccountStore();
  v44[3] = v8;
  v44[4] = &off_1002F66C0;
  v44[0] = a1;
  uint64_t v9 = type metadata accessor for WalrusPCSAuthRequestProvider(0);
  uint64_t v42 = v9;
  uint64_t v43 = &off_100300F10;
  v41[0] = a2;
  uint64_t v10 = type metadata accessor for UserNotificationManager();
  uint64_t v39 = v10;
  id v40 = &off_100302870;
  v38[0] = a3;
  uint64_t v11 = type metadata accessor for CDPRequestController();
  uint64_t v36 = v11;
  id v37 = &off_1002F6958;
  v35[0] = a4;
  type metadata accessor for WalrusPushServiceDelegate();
  uint64_t v12 = (void *)swift_allocObject();
  uint64_t v13 = sub_1000084BC((uint64_t)v44, v8);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v35[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000084BC((uint64_t)v41, v42);
  __chkstk_darwin(v17, v17);
  NSString v19 = (void *)((char *)&v35[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_1000084BC((uint64_t)v38, v39);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (void *)((char *)&v35[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_1000084BC((uint64_t)v35, v36);
  __chkstk_darwin(v25, v25);
  uint64_t v27 = (void *)((char *)&v35[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = *v15;
  uint64_t v30 = *v19;
  uint64_t v31 = *v23;
  uint64_t v32 = *v27;
  v12[5] = v8;
  v12[6] = &off_1002F66C0;
  v12[2] = v29;
  v12[10] = v9;
  v12[11] = &off_100300F10;
  v12[7] = v30;
  v12[15] = v10;
  v12[16] = &off_100302870;
  v12[12] = v31;
  v12[20] = v11;
  v12[21] = &off_1002F6958;
  v12[17] = v32;
  sub_100008EA8((uint64_t)v35);
  sub_100008EA8((uint64_t)v38);
  sub_100008EA8((uint64_t)v41);
  sub_100008EA8((uint64_t)v44);
  return v12;
}

void *sub_1001B7C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceStorageController();
  v28[3] = v4;
  v28[4] = &off_1002FAF10;
  v28[0] = a1;
  uint64_t v5 = type metadata accessor for DaemonFamilyRequester();
  uint64_t v26 = v5;
  uint64_t v27 = &off_100301DE0;
  v25[0] = a2;
  type metadata accessor for InheritanceFamilyManager();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_1000084BC((uint64_t)v28, v4);
  __chkstk_darwin(v7, v7);
  uint64_t v9 = (void *)((char *)&v24[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_1000084BC((uint64_t)v25, v26);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v9;
  uint64_t v16 = *v13;
  v6[10] = v4;
  v6[11] = &off_1002FAF10;
  v6[7] = v15;
  void v24[3] = v5;
  v24[4] = &off_100301DE0;
  v24[0] = v16;
  uint64_t v17 = sub_1000084BC((uint64_t)v24, v5);
  __chkstk_darwin(v17, v17);
  NSString v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v19;
  v6[5] = v5;
  v6[6] = &off_100301DE0;
  id v6[2] = v21;
  sub_100008EA8((uint64_t)v24);
  sub_100008EA8((uint64_t)v25);
  sub_100008EA8((uint64_t)v28);
  return v6;
}

id sub_1001B7EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v19[3] = type metadata accessor for DaemonAccountStore();
  v19[4] = &off_1002F66C0;
  v19[0] = a1;
  v18[3] = type metadata accessor for InheritanceInvitationHandler();
  v18[4] = &off_100302668;
  v18[0] = a2;
  void v17[3] = type metadata accessor for InheritanceInvitationResponseHandler();
  v17[4] = &off_1002FDB28;
  v17[0] = a3;
  void v16[3] = type metadata accessor for InheritanceAccessKeyMessageHandler();
  v16[4] = &off_1002FF3F8;
  v16[0] = a4;
  uint64_t v15[3] = type metadata accessor for BeneficiaryRemovedMessageHandler();
  v15[4] = &off_100303530;
  v15[0] = a5;
  sub_100008A94((uint64_t)v19, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore);
  sub_100008A94((uint64_t)v18, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationHandler);
  sub_100008A94((uint64_t)v17, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationResponseHandler);
  sub_100008A94((uint64_t)v16, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler);
  sub_100008A94((uint64_t)v15, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_beneficiaryRemovedMessageHandler);
  v14.receiver = a6;
  v14.super_class = (Class)type metadata accessor for InheritanceMessageProcessor();
  id v12 = [super init];
  sub_100008EA8((uint64_t)v15);
  sub_100008EA8((uint64_t)v16);
  sub_100008EA8((uint64_t)v17);
  sub_100008EA8((uint64_t)v18);
  sub_100008EA8((uint64_t)v19);
  return v12;
}

void *sub_1001B8058(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v14 = *a3;
  uint64_t v15 = type metadata accessor for InheritanceStorageController();
  void v41[3] = v15;
  v41[4] = &off_1002FAF10;
  v41[0] = a1;
  uint64_t v16 = a4(0);
  uint64_t v39 = v16;
  uint64_t v40 = a5;
  uint64_t v37 = a6;
  v38[0] = a2;
  uint64_t v36 = v14;
  v35[0] = a3;
  a7(0);
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = sub_1000084BC((uint64_t)v41, v15);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (void *)((char *)&v35[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000084BC((uint64_t)v38, v39);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (void *)((char *)&v35[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  uint64_t v26 = sub_1000084BC((uint64_t)v35, v36);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (void *)((char *)&v35[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = *v20;
  uint64_t v31 = *v24;
  uint64_t v32 = *v28;
  void v17[5] = v15;
  v17[6] = &off_1002FAF10;
  v17[7] = v31;
  v17[2] = v30;
  v17[10] = v16;
  v17[11] = a5;
  v17[15] = v14;
  v17[16] = a6;
  v17[12] = v32;
  sub_100008EA8((uint64_t)v35);
  sub_100008EA8((uint64_t)v38);
  sub_100008EA8((uint64_t)v41);
  return v17;
}

uint64_t sub_1001B8344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v32 = type metadata accessor for InheritanceStorageController();
  unint64_t v33 = &off_1002FAF10;
  v31[0] = a1;
  uint64_t v29 = type metadata accessor for InheritanceSetupMessenger();
  uint64_t v30 = &off_1002FEA68;
  v28[0] = a2;
  uint64_t v26 = v8;
  uint64_t v27 = &off_1002F68E8;
  v25[0] = a4;
  type metadata accessor for InheritanceInvitationHandler();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = sub_1000084BC((uint64_t)v31, v32);
  __chkstk_darwin(v10, v10);
  id v12 = (void *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000084BC((uint64_t)v28, v29);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (void *)((char *)&v25[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_1000084BC((uint64_t)v25, v26);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (void *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1001B8D2C(*v12, *v16, a3, *v20, v9);
  sub_100008EA8((uint64_t)v25);
  sub_100008EA8((uint64_t)v28);
  sub_100008EA8((uint64_t)v31);
  return v22;
}

void *sub_1001B8608(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = type metadata accessor for InheritanceCloudSharingController();
  v33[3] = v7;
  v33[4] = &off_1002F78A0;
  v33[0] = a1;
  uint64_t v8 = type metadata accessor for InheritanceStorageController();
  uint64_t v31 = v8;
  uint64_t v32 = &off_1002FAF10;
  v30[0] = a2;
  uint64_t v28 = v6;
  uint64_t v29 = &off_100302870;
  v27[0] = a3;
  type metadata accessor for InheritanceAccessKeyMessageHandler();
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = sub_1000084BC((uint64_t)v33, v7);
  __chkstk_darwin(v10, v10);
  id v12 = (void *)((char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000084BC((uint64_t)v30, v31);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (void *)((char *)&v27[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_1000084BC((uint64_t)v27, v28);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (void *)((char *)&v27[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = *v12;
  uint64_t v23 = *v16;
  uint64_t v24 = *v20;
  v9[5] = v7;
  void v9[6] = &off_1002F78A0;
  v9[7] = v23;
  v9[2] = v22;
  v9[10] = v8;
  v9[11] = &off_1002FAF10;
  v9[15] = v6;
  v9[16] = &off_100302870;
  v9[12] = v24;
  sub_100008EA8((uint64_t)v27);
  sub_100008EA8((uint64_t)v30);
  sub_100008EA8((uint64_t)v33);
  return v9;
}

id sub_1001B88EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v48 = type metadata accessor for DaemonAccountStore();
  uint64_t v49 = &off_1002F66C0;
  v47[0] = a1;
  uint64_t v45 = type metadata accessor for InheritanceInvitationHandler();
  id v46 = &off_100302668;
  v44[0] = a2;
  uint64_t v42 = type metadata accessor for InheritanceInvitationResponseHandler();
  uint64_t v43 = &off_1002FDB28;
  v41[0] = a3;
  uint64_t v39 = type metadata accessor for InheritanceAccessKeyMessageHandler();
  uint64_t v40 = &off_1002FF3F8;
  v38[0] = a4;
  uint64_t v36 = v10;
  uint64_t v37 = &off_100303530;
  v35[0] = a5;
  id v11 = objc_allocWithZone((Class)type metadata accessor for InheritanceMessageProcessor());
  uint64_t v12 = sub_1000084BC((uint64_t)v47, v48);
  __chkstk_darwin(v12, v12);
  uint64_t v14 = (void *)((char *)&v35[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_1000084BC((uint64_t)v44, v45);
  __chkstk_darwin(v16, v16);
  uint64_t v18 = (void *)((char *)&v35[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_1000084BC((uint64_t)v41, v42);
  __chkstk_darwin(v20, v20);
  uint64_t v22 = (void *)((char *)&v35[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  uint64_t v24 = sub_1000084BC((uint64_t)v38, v39);
  __chkstk_darwin(v24, v24);
  uint64_t v26 = (void *)((char *)&v35[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = sub_1000084BC((uint64_t)v35, v36);
  __chkstk_darwin(v28, v28);
  uint64_t v30 = (void *)((char *)&v35[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  id v32 = sub_1001B7EDC(*v14, *v18, *v22, *v26, *v30, v11);
  sub_100008EA8((uint64_t)v35);
  sub_100008EA8((uint64_t)v38);
  sub_100008EA8((uint64_t)v41);
  sub_100008EA8((uint64_t)v44);
  sub_100008EA8((uint64_t)v47);
  return v32;
}

uint64_t sub_1001B8D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = type metadata accessor for InheritanceFamilyManager();
  uint64_t v22 = &off_100300D58;
  *(void *)&long long v20 = a3;
  uint64_t v18 = type metadata accessor for InheritanceStorageController();
  uint64_t v19 = &off_1002FAF10;
  *(void *)&long long v17 = a1;
  uint64_t v15 = type metadata accessor for InheritanceSetupMessenger();
  uint64_t v16 = &off_1002FEA68;
  *(void *)&long long v14 = a2;
  uint64_t v12 = type metadata accessor for DaemonMessageUtil();
  uint64_t v13 = &off_1002F68E8;
  *(void *)&long long v11 = a4;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100041E8C(&v17, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController);
  sub_100041E8C(&v14, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger);
  sub_100041E8C(&v20, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager);
  sub_100041E8C(&v11, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messageUtil);
  return a5;
}

uint64_t sub_1001B8E58(uint64_t a1, uint64_t a2)
{
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  type metadata accessor for InheritanceRequestManager();
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321900);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&qword_100321930);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321940);
  Dependency.init(dependencyId:config:)();
  uint64_t v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
  type metadata accessor for InheritanceRecordsCleaner();
  sub_100009F04((uint64_t *)&unk_10032AD20);
  *uint64_t v4 = String.init<A>(describing:)();
  v4[1] = v5;
  uint64_t v6 = OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_queue;
  id v7 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(a2 + v6) = v7;
  *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_analyticsReporter) = a1;
  [v7 setMaxConcurrentOperationCount:1];
  return a2;
}

void sub_1001B9064(uint64_t a1, unint64_t a2)
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a1, a2, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Handling launch event for %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v11[0] = a1;
  v11[1] = a2;
  sub_100080C64();
  if (!StringProtocol.caseInsensitiveCompare<A>(_:)())
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found notification com.apple.keystore.lockstatus", v10, 2u);
      swift_slowDealloc();
    }
  }
}

void *sub_1001B92D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = type metadata accessor for CustodianDaemonContainer();
  uint64_t v37 = &off_100301A78;
  v35[0] = a1;
  a3[59] = 0;
  sub_100009F04((uint64_t *)&unk_10032D750);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACB0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032F8E0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224B0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D770);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032A640);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACC0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D780);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACD0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322530);
  Dependency.init(dependencyId:config:)();
  sub_100008A94((uint64_t)v35, (uint64_t)(a3 + 2));
  a3[7] = a2;
  os_log_type_t v6 = sub_100008EF8(v35, v36);
  sub_100008A94(*v6 + 184, (uint64_t)(a3 + 18));
  id v7 = sub_100008EF8(v35, v36);
  sub_100008A94(*v7 + 104, (uint64_t)(a3 + 8));
  uint64_t v8 = sub_100008EF8(v35, v36);
  sub_100008A94(*v8 + 272, (uint64_t)(a3 + 13));
  os_log_type_t v9 = sub_100008EF8(v35, v36);
  sub_100008A94(*v9 + 64, (uint64_t)(a3 + 23));
  uint64_t v10 = sub_100008EF8(v35, v36);
  sub_100008A94(*v10 + 24, (uint64_t)(a3 + 28));
  long long v11 = sub_100008EF8(v35, v36);
  sub_100008A94(*v11 + 144, (uint64_t)(a3 + 33));
  uint64_t v12 = sub_100008EF8(v35, v36);
  sub_100008A94(*v12 + 312, (uint64_t)(a3 + 38));
  uint64_t v13 = sub_100008EF8(v35, v36);
  sub_100008A94(*v13 + 424, (uint64_t)(a3 + 43));
  a3[48] = *(void *)(*sub_100008EF8(v35, v36) + 464);
  long long v14 = sub_100008EF8(v35, v36);
  sub_100008A94(*v14 + 472, (uint64_t)(a3 + 49));
  uint64_t v15 = sub_100008EF8(v35, v36);
  sub_100008A94(*v15 + 512, (uint64_t)(a3 + 54));
  sub_100008A94((uint64_t)(a3 + 23), (uint64_t)v33);
  sub_100008A94((uint64_t)(a3 + 49), (uint64_t)v32);
  uint64_t v16 = *(void *)(*sub_100008EF8(v35, v36) + 16);
  uint64_t v17 = sub_1000084BC((uint64_t)v33, v34);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v19;
  uint64_t v22 = type metadata accessor for CustodianStorageController();
  void v31[3] = v22;
  v31[4] = &off_100301EB0;
  v31[0] = v21;
  type metadata accessor for CustodianSuggestionsManager();
  uint64_t v23 = (void *)swift_allocObject();
  uint64_t v24 = sub_1000084BC((uint64_t)v31, v22);
  __chkstk_darwin(v24, v24);
  uint64_t v26 = (void *)((char *)v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  uint64_t v28 = *v26;
  v23[10] = v22;
  v23[11] = &off_100301EB0;
  v23[7] = v28;
  sub_100041E8C(v32, (uint64_t)(v23 + 2));
  v23[12] = v16;
  id v29 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_100008EA8((uint64_t)v31);
  sub_100008EA8((uint64_t)v33);
  a3[60] = v23;
  sub_100008EA8((uint64_t)v35);
  return a3;
}

unint64_t sub_1001B986C()
{
  unint64_t result = qword_10032AD18;
  if (!qword_10032AD18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AD18);
  }
  return result;
}

uint64_t sub_1001B98C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v41 = a7;
  uint64_t v42 = a6;
  uint64_t v39 = a2;
  unint64_t v40 = a4;
  uint64_t v38 = a3;
  int v10 = a5;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
  v17(a8, a1, v16);
  uint64_t v18 = (int *)type metadata accessor for CustodianHealthRecord();
  v17(a8 + v18[5], a1 + v18[5], v16);
  if (v10 == 2 || ((((v10 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v18[9])) & 1) != 0)
  {
    uint64_t v19 = v18[8];
    uint64_t v20 = *(void *)(a1 + v19);
    unint64_t v21 = *(void *)(a1 + v19 + 8);
    uint64_t v22 = (uint64_t *)(a8 + v19);
    *uint64_t v22 = v20;
    v22[1] = v21;
    sub_100013140(v20, v21);
  }
  else
  {
    *(_OWORD *)(a8 + v18[8]) = xmmword_1002A9C60;
  }
  uint64_t v23 = v39;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v39, 1, v11) == 1)
  {
    sub_100006574(v23, &qword_100324D80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a8 + v18[6], a1 + v18[6], v11);
  }
  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    v24(v15, v23, v11);
    v24((char *)(a8 + v18[6]), (uint64_t)v15, v11);
  }
  unint64_t v25 = v40;
  if (v10 == 2) {
    *(unsigned char *)(a8 + v18[9]) = *(unsigned char *)(a1 + v18[9]);
  }
  else {
    *(unsigned char *)(a8 + v18[9]) = v10 & 1;
  }
  uint64_t v26 = v42;
  uint64_t v27 = v18[7];
  if (v25 >> 60 != 15)
  {
    unint64_t v35 = (void *)(a8 + v27);
    *unint64_t v35 = v38;
    v35[1] = v25;
    if (v41) {
      goto LABEL_13;
    }
LABEL_15:
    uint64_t result = sub_1001BC490(a1);
    char v33 = 0;
    uint64_t v31 = v18 + 10;
    goto LABEL_16;
  }
  uint64_t v28 = *(void *)(a1 + v27);
  unint64_t v29 = *(void *)(a1 + v27 + 8);
  uint64_t v30 = (uint64_t *)(a8 + v27);
  uint64_t *v30 = v28;
  v30[1] = v29;
  sub_1000196B4(v28, v29);
  if ((v41 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v32 = v18[10];
  uint64_t v31 = v18 + 10;
  uint64_t v26 = *(void *)(a1 + v32);
  char v33 = *(unsigned char *)(a1 + v32 + 8);
  uint64_t result = sub_1001BC490(a1);
LABEL_16:
  uint64_t v36 = a8 + *v31;
  *(void *)uint64_t v36 = v26;
  *(unsigned char *)(v36 + 8) = v33;
  return result;
}

void sub_1001B9B90(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v106 = a2;
  uint64_t v6 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v104 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for Date();
  uint64_t v107 = *(void *)(v105 - 8);
  uint64_t v10 = __chkstk_darwin(v105, v9);
  uint64_t v102 = (char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v103 = (char *)v95 - v13;
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)v95 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  long long v108 = (char *)v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  uint64_t v109 = (char *)v95 - v28;
  if (CKRecord.recordType.getter() == 0xD000000000000015 && v29 == 0x80000001002AF720)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for AACustodianError(0);
      uint64_t v112 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001BC5A4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return;
    }
  }
  uint64_t v100 = a3;
  uint64_t v98 = v3;
  id v31 = [a1 recordID];
  id v32 = [v31 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = v23;
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v34(v21, 1, v22) == 1)
  {
    sub_100006574((uint64_t)v21, (uint64_t *)&unk_100321CE0);
    goto LABEL_7;
  }
  uint64_t v99 = v33;
  uint64_t v35 = v22;
  uint64_t v36 = *(void (**)(char *, char *))(v33 + 32);
  uint64_t v101 = v35;
  v36(v109, v21);
  id v37 = [a1 encryptedValuesByKey];
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v37 objectForKeyedSubscript:v38];

  if (!v39) {
    goto LABEL_12;
  }
  uint64_t v112 = (uint64_t)v39;
  uint64_t v40 = sub_100009F04(&qword_1003239A0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  id v97 = v37;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = v101;
  if (v34(v18, 1, v101) == 1)
  {
    sub_100006574((uint64_t)v18, (uint64_t *)&unk_100321CE0);
LABEL_12:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E748);
    uint64_t v43 = a1;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)swift_slowAlloc();
      long long v108 = (char *)swift_slowAlloc();
      *(_DWORD *)id v46 = 138412290;
      uint64_t v110 = v43;
      uint64_t v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)long long v108 = v43;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Missing CustodianID - %@", v46, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v44 = v43;
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1001BC5A4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v99 + 8))(v109, v101);
    return;
  }
  v95[1] = v40;
  uint64_t v48 = v108;
  ((void (*)(char *, char *, uint64_t))v36)(v108, v18, v41);
  uint64_t v49 = v100;
  id v50 = *(void (**)(uint64_t, char *, uint64_t))(v99 + 16);
  v50(v100, v109, v41);
  uint64_t v51 = (int *)type metadata accessor for CustodianHealthRecord();
  v50(v49 + v51[5], v48, v41);
  id v52 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v52];
  [v52 finishEncoding];
  id v53 = [v52 encodedData];
  uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;

  uint64_t v57 = (uint64_t *)(v49 + v51[8]);
  *uint64_t v57 = v54;
  v57[1] = v56;
  uint64_t v96 = v51;
  *(unsigned char *)(v49 + v51[9]) = v106 & 1;
  NSString v58 = String._bridgeToObjectiveC()();
  id v59 = v97;
  uint64_t v60 = [v97 objectForKeyedSubscript:v58];

  if (v60)
  {
    uint64_t v110 = v60;
    uint64_t v62 = (uint64_t)v104;
    uint64_t v61 = v105;
    int v63 = swift_dynamicCast();
    uint64_t v64 = v107;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v62, v63 ^ 1u, 1, v61);
    int v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v62, 1, v61);
    uint64_t v66 = v103;
    if (v65 != 1)
    {
      uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
      v67(v103, v62, v61);
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v64 = v107;
    uint64_t v62 = (uint64_t)v104;
    uint64_t v61 = v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v104, 1, 1, v105);
    uint64_t v66 = v103;
  }
  Date.init(timeIntervalSince1970:)();
  sub_100006574(v62, &qword_100324D80);
  uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
LABEL_23:
  uint64_t v68 = (char *)(v49 + v96[6]);
  v67(v68, (uint64_t)v66, v61);
  NSString v69 = String._bridgeToObjectiveC()();
  id v70 = [v59 objectForKeyedSubscript:v69];

  if (v70 && (uint64_t v112 = (uint64_t)v70, (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v71 = (uint64_t)v110;
    unint64_t v72 = v111;
    sub_100013140((uint64_t)v110, v111);
    uint64_t v73 = sub_1001FBBD8(v71, v72);
    if (v76 == 1)
    {
      uint64_t v77 = v100;
      uint64_t v78 = (uint64_t *)(v100 + v96[7]);
      *uint64_t v78 = v71;
      v78[1] = v72;
      uint64_t v79 = v77;
      uint64_t v80 = v102;
      Date.init(timeIntervalSince1970:)();
      (*(void (**)(char *, char *, uint64_t))(v107 + 40))(v68, v80, v61);
    }
    else
    {
      uint64_t v81 = v73;
      unint64_t v82 = v74;
      uint64_t v83 = v76;
      uint64_t v84 = v71;
      uint64_t v85 = v75;
      sub_100013198(v84, v72);
      sub_100013140(v81, v82);
      sub_1000E1F44(v81, v82, v85, v83);
      uint64_t v79 = v100;
      uint64_t v86 = (uint64_t *)(v100 + v96[7]);
      uint64_t *v86 = v81;
      v86[1] = v82;
    }
    id v59 = v97;
  }
  else
  {
    uint64_t v79 = v100;
    *(_OWORD *)(v100 + v96[7]) = xmmword_1002AD240;
  }
  NSString v87 = String._bridgeToObjectiveC()();
  uint64_t v88 = [v59 objectForKeyedSubscript:v87];
  swift_unknownObjectRelease();

  os_log_type_t v89 = *(void (**)(char *, uint64_t))(v99 + 8);
  uint64_t v90 = v101;
  v89(v108, v101);
  v89(v109, v90);
  if (v88)
  {
    uint64_t v110 = v88;
    int v91 = swift_dynamicCast();
    uint64_t v92 = v112;
    if (!v91) {
      uint64_t v92 = 0;
    }
    char v93 = v91 ^ 1;
  }
  else
  {
    uint64_t v92 = 0;
    char v93 = 1;
  }
  uint64_t v94 = v79 + v96[10];
  *(void *)uint64_t v94 = v92;
  *(unsigned char *)(v94 + 8) = v93;
}

void sub_1001BA73C(id *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v54 = &v52[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v59 = sub_100009F04(&qword_100326350);
  __chkstk_darwin(v59, v6);
  uint64_t v8 = &v52[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100009F04(&qword_100324D80);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v55 = &v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = &v52[-v15];
  __chkstk_darwin(v14, v17);
  uint64_t v19 = &v52[-v18];
  id v20 = [*a1 encryptedValuesByKey];
  uint64_t ObjectType = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v21 = v66;
  uint64_t v62 = (int *)type metadata accessor for CustodianHealthRecord();
  unint64_t v63 = v1;
  uint64_t v22 = UUID.uuidString.getter();
  if (!*((void *)&v21 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v25 = UUID.uuidString.getter();
    *((void *)&v67 + 1) = &type metadata for String;
    uint64_t v68 = &protocol witness table for String;
    *(void *)&long long v66 = v25;
    *((void *)&v66 + 1) = v26;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  if (v21 == __PAIR128__(v23, v22))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  NSString v58 = "ntd25RecoveryFactorsController";
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v27 = v63 + v62[6];
  uint64_t v28 = v60;
  uint64_t v56 = *(void (**)(uint64_t *, unint64_t, uint64_t))(v60 + 16);
  unint64_t v57 = v27;
  ((void (*)(unsigned char *))v56)(v16);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v16, 0, 1, v3);
  uint64_t v29 = (uint64_t)&v8[*(int *)(v59 + 48)];
  sub_1000E1F88((uint64_t)v19, (uint64_t)v8);
  sub_1000E1F88((uint64_t)v16, v29);
  char v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v30((uint64_t)v8, 1, v3) == 1)
  {
    sub_100006574((uint64_t)v16, &qword_100324D80);
    sub_100006574((uint64_t)v19, &qword_100324D80);
    if (v30(v29, 1, v3) == 1)
    {
      sub_100006574((uint64_t)v8, &qword_100324D80);
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint64_t v59 = (uint64_t)v20;
  id v31 = v55;
  sub_1000E1F88((uint64_t)v8, (uint64_t)v55);
  if (v30(v29, 1, v3) == 1)
  {
    sub_100006574((uint64_t)v16, &qword_100324D80);
    sub_100006574((uint64_t)v19, &qword_100324D80);
    (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v31, v3);
    id v20 = (id)v59;
LABEL_12:
    sub_100006574((uint64_t)v8, &qword_100326350);
LABEL_13:
    *((void *)&v67 + 1) = v3;
    uint64_t v68 = &protocol witness table for Date;
    id v32 = sub_10003584C((uint64_t *)&v66);
    v56(v32, v57, v3);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_14;
  }
  uint64_t v36 = v54;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 32))(v54, v29, v3);
  sub_1001BC5A4(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  int v53 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v37 = *(void (**)(unsigned char *, uint64_t))(v28 + 8);
  v37(v36, v3);
  sub_100006574((uint64_t)v16, &qword_100324D80);
  sub_100006574((uint64_t)v19, &qword_100324D80);
  v37(v31, v3);
  sub_100006574((uint64_t)v8, &qword_100324D80);
  id v20 = (id)v59;
  if ((v53 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_14:
  CKRecordKeyValueSetting.subscript.getter();
  unint64_t v33 = v63 + v62[10];
  uint64_t v34 = *(void *)v33;
  char v35 = *(unsigned char *)(v33 + 8);
  if ((BYTE8(v66) & 1) == 0)
  {
    if (v35)
    {
      uint64_t v68 = 0;
      long long v66 = 0u;
      long long v67 = 0u;
LABEL_23:
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_24;
    }
    if ((void)v66 == v34) {
      goto LABEL_24;
    }
LABEL_22:
    *((void *)&v67 + 1) = &type metadata for Int;
    uint64_t v68 = &protocol witness table for Int;
    *(void *)&long long v66 = v34;
    goto LABEL_23;
  }
  if ((v35 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_24:
  unint64_t v38 = v63 + v62[7];
  unint64_t v39 = *(void *)(v38 + 8);
  if (v39 >> 60 == 15)
  {
    NSString v40 = String._bridgeToObjectiveC()();
    [v20 setObject:0 forKeyedSubscript:v40];
    swift_unknownObjectRelease();

    return;
  }
  uint64_t v41 = *(void *)v38;
  sub_1000196B4(*(void *)v38, *(void *)(v38 + 8));
  sub_100013140(v41, v39);
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v43 = v64;
  unint64_t v42 = v65;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(void *)&long long v66 = v41;
  *((void *)&v66 + 1) = v39;
  unint64_t v44 = sub_1000E1FF0();
  long long v67 = 0uLL;
  unint64_t v63 = v44;
  uint64_t v45 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v47 = v46;
  swift_release();
  if (v42 >> 60 == 15)
  {
    sub_1000196A0(v43, v42);
    sub_1000196A0(v45, v47);
LABEL_30:
    swift_allocObject();
    JSONEncoder.init()();
    *(void *)&long long v66 = v41;
    *((void *)&v66 + 1) = v39;
    long long v67 = 0uLL;
    uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    uint64_t v51 = v50;
    swift_release();
    *((void *)&v67 + 1) = &type metadata for Data;
    uint64_t v68 = &protocol witness table for Data;
    *(void *)&long long v66 = v49;
    *((void *)&v66 + 1) = v51;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    sub_1000196A0(v41, v39);
    sub_100013198(v41, v39);
    goto LABEL_31;
  }
  sub_1000196B4(v43, v42);
  char v48 = sub_100012680(v43, v42, v45, v47);
  sub_100013198(v45, v47);
  sub_1000196A0(v43, v42);
  sub_1000196A0(v43, v42);
  if ((v48 & 1) == 0) {
    goto LABEL_30;
  }
  sub_1000196A0(v41, v39);
  sub_100013198(v41, v39);
  swift_unknownObjectRelease();
LABEL_31:
  swift_bridgeObjectRelease();
}

unint64_t sub_1001BB09C(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169646F74737563;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x797265766F636572;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001BB1A4()
{
  return sub_1001BB09C(*v0);
}

uint64_t sub_1001BB1AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001BD3F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001BB1D4(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1001BB1E0(uint64_t a1)
{
  unint64_t v2 = sub_1001BC4EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BB21C(uint64_t a1)
{
  unint64_t v2 = sub_1001BC4EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001BB258@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  unint64_t v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v59 = (char *)&v55 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  unint64_t v65 = (char *)&v55 - v15;
  uint64_t v16 = sub_100009F04(&qword_10032AD48);
  uint64_t v64 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v20, v21);
  unint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001BC4EC();
  char v24 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    return sub_100008EA8((uint64_t)a1);
  }
  long long v66 = v13;
  uint64_t v55 = v23;
  uint64_t v56 = (int *)v20;
  LOBYTE(v67) = 0;
  sub_1001BC5A4((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v25 = v63;
  uint64_t v26 = v19;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = v16;
  uint64_t v29 = v55;
  char v30 = v65;
  unint64_t v65 = *(char **)(v62 + 32);
  ((void (*)(char *, char *, uint64_t))v65)(v55, v30, v25);
  LOBYTE(v67) = 1;
  id v31 = v66;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v32 = v27;
  unint64_t v33 = v56;
  ((void (*)(char *, char *, uint64_t))v65)(&v29[v56[5]], v31, v25);
  LOBYTE(v67) = 2;
  sub_1001BC5A4((unint64_t *)&unk_10032AD60, (void (*)(uint64_t))&type metadata accessor for Date);
  long long v66 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v34 = *(void (**)(void))(v60 + 32);
  unint64_t v65 = &v29[v33[6]];
  v34();
  char v68 = 3;
  unint64_t v35 = sub_1000130EC();
  uint64_t v36 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v29[v56[8]] = v67;
  LOBYTE(v67) = 4;
  char v37 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v59 = (char *)v35;
  v29[v56[9]] = v37 & 1;
  LOBYTE(v67) = 6;
  unint64_t v38 = v26;
  uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v40 = v58;
  uint64_t v41 = &v55[v56[10]];
  *(void *)uint64_t v41 = v39;
  v41[8] = 0;
  char v68 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  long long v42 = v67;
  if (*((void *)&v67 + 1) >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v26, v32);
    uint64_t v43 = (uint64_t)v55;
    *(_OWORD *)&v55[v56[7]] = v42;
  }
  else
  {
    sub_100013140(v67, *((unint64_t *)&v67 + 1));
    uint64_t v44 = sub_1001FBBD8(v42, *((unint64_t *)&v42 + 1));
    if (v47 == 1)
    {
      uint64_t v43 = (uint64_t)v55;
      *(_OWORD *)&v55[v56[7]] = v42;
      char v48 = v57;
      Date.init(timeIntervalSince1970:)();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v38, v32);
      (*(void (**)(char *, char *, uint64_t))(v60 + 40))(v65, v48, v61);
    }
    else
    {
      unint64_t v49 = v45;
      uint64_t v50 = v47;
      uint64_t v51 = v44;
      uint64_t v52 = v46;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v26, v36);
      sub_1000196A0(v42, *((unint64_t *)&v42 + 1));
      sub_100013140(v51, v49);
      sub_1000E1F44(v51, v49, v52, v50);
      uint64_t v53 = (uint64_t)v55;
      uint64_t v54 = (uint64_t *)&v55[v56[7]];
      uint64_t *v54 = v51;
      v54[1] = v49;
      uint64_t v43 = v53;
    }
    uint64_t v40 = v58;
  }
  sub_1001BC540(v43, v40);
  sub_100008EA8((uint64_t)a1);
  return sub_1001BC490(v43);
}

uint64_t sub_1001BBA88(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_10032AD70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001BC4EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v24) = 0;
  type metadata accessor for UUID();
  sub_1001BC5A4(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for CustodianHealthRecord();
    LOBYTE(v24) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v24) = 2;
    type metadata accessor for Date();
    sub_1001BC5A4((unint64_t *)&unk_10032AD80, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v24 = *(_OWORD *)(v3 + v10[8]);
    char v27 = 3;
    sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v24) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = (uint64_t *)(v3 + v10[10]);
    uint64_t v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 8);
    *(void *)&long long v24 = v12;
    BYTE8(v24) = (_BYTE)v11;
    char v27 = 6;
    sub_100009F04(&qword_10032AD90);
    sub_1001BC5EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = (uint64_t *)(v3 + v10[7]);
    unint64_t v14 = v13[1];
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      sub_100013140(v15, v14);
      sub_100013140(v15, v14);
      JSONEncoder.init()();
      uint64_t v23 = v15;
      *(void *)&long long v24 = v15;
      *((void *)&v24 + 1) = v14;
      sub_1000E1FF0();
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v18 = v17;
      swift_release();
      uint64_t v19 = v16;
      *(void *)&long long v24 = v16;
      *((void *)&v24 + 1) = v18;
      char v27 = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v20 = v23;
      sub_100013198(v23, v14);
      swift_bridgeObjectRelease();
      sub_1000196A0(v20, v14);
      sub_100013198(v19, v18);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001BBF04()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = v0 + *(int *)(type metadata accessor for CustodianHealthRecord() + 24);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v11(v9, v10, v1);
  Date.init(timeIntervalSince1970:)();
  sub_1001BC5A4(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v6, v1);
  v13(v9, v1);
  if (v12)
  {
    char v14 = 1;
  }
  else
  {
    sub_1000E3454();
    v11(v6, v10, v1);
    Date.init(timeInterval:since:)();
    Date.init()();
    char v14 = static Date.< infix(_:_:)();
    v13(v6, v1);
    v13(v9, v1);
  }
  return v14 & 1;
}

uint64_t sub_1001BC124()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v4 = __chkstk_darwin(v1, v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for CustodianHealthRecord();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v9, v0 + *(int *)(v10 + 24), v1);
  Date.init(timeIntervalSince1970:)();
  sub_1001BC5A4(&qword_100326360, (void (*)(uint64_t))&type metadata accessor for Date);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v6, v1);
  v12(v9, v1);
  if (v11) {
    return -1;
  }
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v15 = v14;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v12)(v9, v1);
  if ((~*(void *)&v15 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v15 < 9.22337204e18) {
    return (uint64_t)v15;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001BC338@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001BB258(a1, a2);
}

uint64_t sub_1001BC350(void *a1)
{
  return sub_1001BBA88(a1);
}

uint64_t sub_1001BC368(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001BC5A4((unint64_t *)&unk_10032AD30, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord);
  uint64_t result = sub_1001BC5A4(&qword_100323588, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianHealthRecord()
{
  uint64_t result = qword_10032ADF8;
  if (!qword_10032ADF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001BC438(uint64_t a1)
{
  uint64_t result = sub_1001BC5A4(&qword_10032AD40, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001BC490(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianHealthRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001BC4EC()
{
  unint64_t result = qword_10032AD50;
  if (!qword_10032AD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AD50);
  }
  return result;
}

uint64_t sub_1001BC540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianHealthRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BC5A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001BC5EC()
{
  unint64_t result = qword_10032AD98;
  if (!qword_10032AD98)
  {
    sub_1000112CC(&qword_10032AD90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AD98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CustodianHealthRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BC724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianHealthRecord.CodingKeys()
{
  return &type metadata for CustodianHealthRecord.CodingKeys;
}

void *sub_1001BC75C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    double v14 = (char *)a1 + v13;
    double v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)double v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      sub_100013140(*(void *)v15, *((void *)v15 + 1));
      *(void *)double v14 = v18;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v19 = a3[8];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_100013140(*v21, v23);
    *uint64_t v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
  }
  return a1;
}

uint64_t sub_1001BC90C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (uint64_t *)(a1 + a2[7]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[8]);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];

  return sub_100013198(v11, v12);
}

uint64_t sub_1001BCA10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  double v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_100013140(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_100013140(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t sub_1001BCB70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  double v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = *(void *)(a2 + v12 + 8);
  if (*(void *)(a1 + v12 + 8) >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_100013140(v17, v15);
      uint64_t v18 = *v13;
      unint64_t v19 = v13[1];
      *uint64_t v13 = v17;
      v13[1] = v15;
      sub_100013198(v18, v19);
      goto LABEL_8;
    }
    sub_1000AD378((uint64_t)v13);
    goto LABEL_6;
  }
  if (v15 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_8;
  }
  uint64_t v16 = *v14;
  sub_100013140(v16, v15);
  *uint64_t v13 = v16;
  v13[1] = v15;
LABEL_8:
  uint64_t v20 = a3[8];
  unint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_100013140(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *unint64_t v21 = v23;
  v21[1] = v24;
  sub_100013198(v25, v26);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  *(unsigned char *)(v28 + 8) = *((unsigned char *)v29 + 8);
  *(void *)uint64_t v28 = v30;
  return a1;
}

uint64_t sub_1001BCD20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_1001BCE38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v13;
      *uint64_t v13 = *v14;
      v13[1] = v16;
      sub_100013198(v17, v15);
      goto LABEL_6;
    }
    sub_1000AD378((uint64_t)v13);
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
LABEL_6:
  uint64_t v18 = a3[8];
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  sub_100013198(v19, v20);
  uint64_t v21 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  *(void *)uint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  return a1;
}

uint64_t sub_1001BCFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BCFB8);
}

uint64_t sub_1001BCFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
      if (v14 >= 2) {
        return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1001BD0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BD0F0);
}

uint64_t sub_1001BD0F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for Date();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1001BD200()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1001BD2F4()
{
  unint64_t result = qword_10032AE48;
  if (!qword_10032AE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AE48);
  }
  return result;
}

unint64_t sub_1001BD34C()
{
  unint64_t result = qword_10032AE50;
  if (!qword_10032AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AE50);
  }
  return result;
}

unint64_t sub_1001BD3A4()
{
  unint64_t result = qword_10032AE58;
  if (!qword_10032AE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AE58);
  }
  return result;
}

uint64_t sub_1001BD3F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000010029CC80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x797265766F636572 && a2 == 0xEF6873614879654BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010029C2A0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t type metadata accessor for DaemonCustodianMessenger()
{
  return self;
}

uint64_t type metadata accessor for InheritanceInvitationActionAnalyticsEvent()
{
  uint64_t result = qword_10032AF38;
  if (!qword_10032AF38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001BD764()
{
  return swift_initClassMetadata2();
}

Swift::Int sub_1001BD7A4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001BD8B4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001BD9F8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1001BDB38()
{
  return Hasher._finalize()();
}

unint64_t sub_1001BDC44(char a1)
{
  unint64_t result = 0x7541747065636361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x614D747065636361;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001BDD0C(unsigned __int8 *a1, char *a2)
{
  return sub_100252F98(*a1, *a2);
}

Swift::Int sub_1001BDD18()
{
  return sub_1001BD7A4();
}

uint64_t sub_1001BDD20()
{
  return sub_100253930();
}

Swift::Int sub_1001BDD28()
{
  return sub_1001BDB38();
}

unint64_t sub_1001BDD30@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001BE674(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001BDD60@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001BDC44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001BDD8C(unsigned __int8 *a1, char *a2)
{
  return sub_100252DC8(*a1, *a2);
}

Swift::Int sub_1001BDD98()
{
  return Hasher._finalize()();
}

uint64_t sub_1001BDE94()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001BDF78()
{
  return Hasher._finalize()();
}

unint64_t sub_1001BE070@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001BE6C0(*a1);
  *a2 = result;
  return result;
}

void sub_1001BE0A0(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB00000000656461;
  uint64_t v3 = 0x7267707532617368;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000072;
      uint64_t v3 = 0x6961706552706463;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x684368746C616568;
      *(void *)(a1 + 8) = 0xEB000000006B6365;
      break;
    case 3:
      strcpy((char *)a1, "postMigration");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1001BE15C()
{
  sub_100009F04(&qword_100324668);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
  strcpy((char *)(inited + 32), "isFamilyInvite");
  *(unsigned char *)(inited + 47) = -18;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 0xD000000000000013;
  *(void *)(inited + 64) = 0x800000010029F700;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  sub_10022175C(inited);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

uint64_t sub_1001BE230()
{
  uint64_t result = AAUnderTest.getter();
  if ((result & 1) == 0)
  {
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    strcpy((char *)(inited + 32), "inviteAction");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    String.init<A>(describing:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v2;
    strcpy((char *)(inited + 56), "numOfRelation");
    *(_WORD *)(inited + 70) = -4864;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    sub_10022175C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1001BE348()
{
}

id sub_1001BE378()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_1001BE3B4()
{
  return type metadata accessor for InheritanceInvitationActionAnalyticsEvent();
}

unsigned char *storeEnumTagSinglePayload for InheritanceAnalyticsInviteAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BE488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAnalyticsInviteAction()
{
  return &type metadata for InheritanceAnalyticsInviteAction;
}

unsigned char *storeEnumTagSinglePayload for InheritanceAnalyticsCDPRepairAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BE58CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAnalyticsCDPRepairAction()
{
  return &type metadata for InheritanceAnalyticsCDPRepairAction;
}

unint64_t sub_1001BE5C8()
{
  unint64_t result = qword_10032AF88;
  if (!qword_10032AF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AF88);
  }
  return result;
}

unint64_t sub_1001BE620()
{
  unint64_t result = qword_10032AF90;
  if (!qword_10032AF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AF90);
  }
  return result;
}

unint64_t sub_1001BE674(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4270, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_1001BE6C0(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4308, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

void sub_1001BE70C(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v80) = a2;
  uint64_t v79 = a3;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v72 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v81 = (char *)&v72 - v19;
  if (CKRecord.recordType.getter() == 0xD00000000000001FLL && v20 == 0x800000010029B110)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      uint64_t v84 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1001C023C((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return;
    }
  }
  uint64_t v77 = v17;
  id v22 = [a1 recordID];
  id v23 = [v22 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = v13;
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v25(v11, 1, v12) == 1)
  {
    sub_1000833BC((uint64_t)v11);
    goto LABEL_7;
  }
  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  uint64_t v78 = v12;
  unint64_t v74 = v26;
  uint64_t v75 = v24;
  ((void (*)(char *, char *))v26)(v81, v11);
  id v27 = [a1 encryptedValuesByKey];
  NSString v28 = String._bridgeToObjectiveC()();
  id v76 = v27;
  id v29 = [v27 objectForKeyedSubscript:v28];

  if (!v29) {
    goto LABEL_12;
  }
  uint64_t v84 = (uint64_t)v29;
  sub_100009F04(&qword_1003239A0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v78;
  if (v25(v8, 1, v78) == 1)
  {
    sub_1000833BC((uint64_t)v8);
LABEL_12:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E760);
    uint64_t v32 = a1;
    unint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 138412290;
      unint64_t v82 = v32;
      char v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing Inheritance beneficiaryID - %@", v35, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unint64_t v33 = v32;
    }
    uint64_t v38 = v75;

    type metadata accessor for InheritanceError(0);
    uint64_t v84 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1001C023C((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v81, v78);
    return;
  }
  uint64_t v39 = v77;
  v74(v77, v8, v30);
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = v76;
  id v42 = [v76 objectForKeyedSubscript:v40];

  uint64_t v43 = v75;
  if (v42 && (uint64_t v84 = (uint64_t)v42, (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v44 = v83;
    uint64_t v73 = v82;
    NSString v45 = String._bridgeToObjectiveC()();
    uint64_t v46 = [v41 objectForKeyedSubscript:v45];

    if (v46)
    {
      unint64_t v82 = v46;
      type metadata accessor for Status(0);
      if (swift_dynamicCast())
      {
        uint64_t v75 = v84;
        id v47 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
        [a1 encodeSystemFieldsWithCoder:v47];
        [v47 finishEncoding];
        id v48 = [v47 encodedData];
        uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v51 = v50;
        swift_unknownObjectRelease();

        uint64_t v52 = (int *)type metadata accessor for BenefactorInfoRecord();
        uint64_t v53 = v79;
        uint64_t v54 = (uint64_t *)(v79 + v52[8]);
        uint64_t *v54 = v49;
        v54[1] = v51;
        uint64_t v55 = v78;
        uint64_t v56 = (void (*)(uint64_t, char *, uint64_t))v74;
        v74((char *)(v53 + v52[7]), v81, v78);
        v56(v53, v77, v55);
        unint64_t v57 = (NSObject **)(v53 + v52[5]);
        *unint64_t v57 = v73;
        v57[1] = v44;
        *(void *)(v53 + v52[6]) = v75;
        *(unsigned char *)(v53 + v52[9]) = v80 & 1;
        return;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100007288(v66, (uint64_t)qword_10033E760);
    uint64_t v59 = a1;
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v67))
    {
      char v68 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      *(_DWORD *)char v68 = 138412290;
      unint64_t v82 = v59;
      NSString v69 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v80 = v59;

      _os_log_impl((void *)&_mh_execute_header, v60, v67, "Missing TrustedContactStatus - %@", v68, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v60 = v59;
    }
    uint64_t v39 = v77;
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100007288(v58, (uint64_t)qword_10033E760);
    uint64_t v59 = a1;
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 138412290;
      unint64_t v82 = v59;
      uint64_t v64 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v65 = (void *)v63;
      uint64_t v43 = v75;
      *unint64_t v65 = v59;

      uint64_t v39 = v77;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Missing Inheritance Handle - %@", v62, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v60 = v59;
    }
  }

  type metadata accessor for InheritanceError(0);
  uint64_t v84 = 2;
  sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
  sub_1001C023C((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_unknownObjectRelease();

  id v70 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v71 = v78;
  v70(v39, v78);
  v70(v81, v71);
}

unint64_t sub_1001BF2AC(char a1)
{
  unint64_t result = 0x69636966656E6562;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C646E6168;
      break;
    case 2:
      unint64_t result = 0x444964726F636572;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x737574617473;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001BF388()
{
  return sub_1001BF2AC(*v0);
}

uint64_t sub_1001BF390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001C0C8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BF3B8(uint64_t a1)
{
  unint64_t v2 = sub_1001C01E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BF3F4(uint64_t a1)
{
  unint64_t v2 = sub_1001C01E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001BF430@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v41 - 8);
  uint64_t v4 = __chkstk_darwin(v41, v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = sub_100009F04(&qword_10032AFB8);
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001C01E8();
  id v42 = v13;
  uint64_t v18 = (uint64_t)v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return sub_100008EA8((uint64_t)a1);
  }
  uint64_t v36 = v6;
  uint64_t v43 = a1;
  uint64_t v19 = (uint64_t)v17;
  LOBYTE(v44) = 0;
  sub_1001C023C((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v20 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v21 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
  id v22 = v9;
  uint64_t v23 = v41;
  v21(v19, v22, v41);
  LOBYTE(v44) = 1;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  os_log_type_t v34 = v21;
  uint64_t v35 = 0;
  uint64_t v25 = (uint64_t *)(v19 + *(int *)(v14 + 20));
  *uint64_t v25 = v24;
  v25[1] = v26;
  LOBYTE(v44) = 5;
  uint64_t v27 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v14;
  *(void *)(v19 + *(int *)(v14 + 24)) = v27;
  LOBYTE(v44) = 2;
  NSString v28 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v34(v19 + *(int *)(v33 + 28), v28, v23);
  char v45 = 3;
  sub_1000130EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = v33;
  *(_OWORD *)(v19 + *(int *)(v33 + 32)) = v44;
  LOBYTE(v44) = 4;
  char v30 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v20);
  *(unsigned char *)(v19 + *(int *)(v29 + 36)) = v30 & 1;
  sub_1001A3288(v19, v37);
  sub_100008EA8((uint64_t)v43);
  return sub_1001A32EC(v19);
}

uint64_t sub_1001BF9D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_10032AFC8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001C01E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for UUID();
  sub_1001C023C(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v10 + 32));
    char v13 = 3;
    sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001BFC6C(id *a1)
{
  [*a1 encryptedValuesByKey];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v2 = UUID.uuidString.getter();
  if (!v14)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (v13 != v2 || v14 != v3)
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v13 = UUID.uuidString.getter();
    uint64_t v14 = v5;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v6 + 20));
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  if (!v14) {
    goto LABEL_14;
  }
  if (v13 == v9 && v14 == v8)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_14:
    uint64_t v13 = v9;
    LOBYTE(v14) = v8;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_16:
  CKRecordKeyValueSetting.subscript.getter();
  if ((v14 & 1) != 0 || v13 != *(void *)(v1 + *(int *)(v6 + 24))) {
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1001BFF28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001BF430(a1, a2);
}

uint64_t sub_1001BFF40(void *a1)
{
  return sub_1001BF9D4(a1);
}

uint64_t sub_1001BFF58()
{
  _StringGuts.grow(_:)(36);
  uint64_t v1 = type metadata accessor for BenefactorInfoRecord();
  sub_100009F04((uint64_t *)&unk_10032AFD0);
  uint64_t v2 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000100299EF0;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  sub_1001C023C((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x656C646E61680A2CLL;
  v5._object = (void *)0xEB00000000202D20;
  String.append(_:)(v5);
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1001C00C0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1001C023C((unint64_t *)&unk_10032AFA0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord);
  uint64_t result = sub_1001C023C(&qword_1003235D0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for BenefactorInfoRecord()
{
  uint64_t result = qword_10032B038;
  if (!qword_10032B038) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C0190(uint64_t a1)
{
  uint64_t result = sub_1001C023C(&qword_10032AFB0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001C01E8()
{
  unint64_t result = qword_10032AFC0;
  if (!qword_10032AFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AFC0);
  }
  return result;
}

uint64_t sub_1001C023C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BenefactorInfoRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C0350);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BenefactorInfoRecord.CodingKeys()
{
  return &type metadata for BenefactorInfoRecord.CodingKeys;
}

char *sub_1001C0388(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    char v11 = &a1[v9];
    long long v12 = (uint64_t *)&a2[v9];
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = *(void *)&a2[v10];
    *(void *)char v11 = v14;
    *((void *)v11 + 1) = v13;
    *(void *)&a1[v10] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    swift_bridgeObjectRetain();
    v8(v17, v18, v7);
    uint64_t v19 = a3[8];
    uint64_t v20 = (uint64_t *)&a1[v19];
    char v21 = (uint64_t *)&a2[v19];
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_100013140(*v21, v23);
    *uint64_t v20 = v22;
    v20[1] = v23;
    a1[a3[9]] = a2[a3[9]];
  }
  return a1;
}

uint64_t sub_1001C04CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  v5(a1 + *(int *)(a2 + 28), v4);
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100013198(v7, v8);
}

uint64_t sub_1001C0580(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v8);
  char v11 = (uint64_t *)(a2 + v8);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = *(void *)(a2 + v9);
  void *v10 = v13;
  v10[1] = v12;
  *(void *)(a1 + v9) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  swift_bridgeObjectRetain();
  v7(v16, v17, v6);
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_100013140(*v20, v22);
  uint64_t *v19 = v21;
  v19[1] = v22;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001C0674(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v11 = a3[8];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_100013140(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_100013198(v16, v17);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001C0780(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t sub_1001C0840(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  v7(a1 + v13, a2 + v13, v6);
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void *)(a1 + v14);
  unint64_t v16 = *(void *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_100013198(v15, v16);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1001C0920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C0934);
}

uint64_t sub_1001C0934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001C09F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C0A0C);
}

uint64_t sub_1001C0A0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001C0ACC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1001C0B88()
{
  unint64_t result = qword_10032B080;
  if (!qword_10032B080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B080);
  }
  return result;
}

unint64_t sub_1001C0BE0()
{
  unint64_t result = qword_10032B088;
  if (!qword_10032B088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B088);
  }
  return result;
}

unint64_t sub_1001C0C38()
{
  unint64_t result = qword_10032B090;
  if (!qword_10032B090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B090);
  }
  return result;
}

uint64_t sub_1001C0C8C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69636966656E6562 && a2 == 0xED00004449797261;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void sub_1001C0F18(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
}

void sub_1001C0F3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v6 = a3;
  if (!a2)
  {
    v8.super.Class isa = 0;
    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (v6)
  {
LABEL_3:
    v9[4] = v6;
    v9[5] = a4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100050910;
    v9[3] = &unk_1002FF970;
    char v6 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
LABEL_4:
  [v4 postFollowUpWithIdentifier:a1 userInfo:v8.super.isa completion:v6];
  _Block_release(v6);
}

void sub_1001C104C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
}

void sub_1001C1070(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = a4;
  if (!a3)
  {
    v10.super.Class isa = 0;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (v7)
  {
LABEL_3:
    v11[4] = v7;
    v11[5] = a5;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    uint64_t v11[2] = sub_100050910;
    v11[3] = &unk_1002FF948;
    uint64_t v7 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
LABEL_4:
  [v5 postFollowUpWithIdentifier:a1 forAccount:a2 userInfo:v10.super.isa completion:v7];
  _Block_release(v7);
}

void sub_1001C1190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *v3;
  if (a2)
  {
    v7[4] = a2;
    v7[5] = a3;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_100050910;
    v7[3] = &unk_1002FF920;
    char v6 = _Block_copy(v7);
    swift_retain();
    swift_release();
  }
  else
  {
    char v6 = 0;
  }
  [v5 dismissFollowUpWithIdentifier:a1 completion:v6];
  _Block_release(v6);
}

id sub_1001C1264()
{
  return [*v0 isRenewCredentialsCFUPosted];
}

id sub_1001C1288()
{
  return [*v0 ageOfOldestCustodianCFU];
}

void sub_1001C1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *v4;
  if (a3)
  {
    v9[4] = a3;
    v9[5] = a4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100050910;
    v9[3] = &unk_1002FF8F8;
    NSDictionary v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    NSDictionary v8 = 0;
  }
  [v7 dismissFollowUpsStartingWithIdentifierPrefix:a1 account:a2 completion:v8];
  _Block_release(v8);
}

uint64_t sub_1001C1374(uint64_t a1)
{
  id v2 = [*v1 pendingFollowUpItemUserInfosWithIdentifier:a1];
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  sub_100009F04((uint64_t *)&unk_1003284A0);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

id sub_1001C1694()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudKitAPSBridge();
  return [super dealloc];
}

uint64_t type metadata accessor for CloudKitAPSBridge()
{
  return self;
}

void sub_1001C16FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E718);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Cloudkit received invalid public token from APS", v4, 2u);
      swift_slowDealloc();
    }
  }
  else if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100013140(a1, a2);
    sub_10026656C(a1, a2);
    swift_unknownObjectRelease();
    sub_1000196A0(a1, a2);
  }
}

void sub_1001C1878(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E718);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      NSDictionary v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSDictionary v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Cloudkit received invalid topic token from APS", v10, 2u);
      swift_slowDealloc();
    }
  }
  else if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100013140(a1, a2);
    sub_1002667C8(a1, a2, a3, a4, a5, a6);
    sub_1000196A0(a1, a2);
    swift_unknownObjectRelease();
  }
}

void sub_1001C1A3C(void *a1)
{
  if (a1)
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      id v2 = a1;
      sub_100265670(v2);

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E718);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      int v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Cloudkit received invalid APS message", v5, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1001C1B88(uint64_t a1@<X8>)
{
  uint64_t v381 = a1;
  uint64_t v2 = type metadata accessor for PersonNameComponents();
  uint64_t v377 = *(void *)(v2 - 8);
  uint64_t v378 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  v370 = (char *)&v361 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  v369 = (char *)&v361 - v8;
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v367 = (char *)&v361 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  v366 = (char *)&v361 - v14;
  __chkstk_darwin(v13, v15);
  unint64_t v17 = (char *)&v361 - v16;
  v382 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v362 = *((void *)v382 - 1);
  uint64_t v19 = __chkstk_darwin(v382, v18);
  uint64_t v21 = (char *)&v361 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  uint64_t v368 = (uint64_t)&v361 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v376 = (uint64_t)&v361 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v365 = (uint64_t)&v361 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v375 = (uint64_t)&v361 - v33;
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v364 = (uint64_t)&v361 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  uint64_t v40 = (char *)&v361 - v39;
  uint64_t v42 = __chkstk_darwin(v38, v41);
  uint64_t v363 = (uint64_t)&v361 - v43;
  uint64_t v45 = __chkstk_darwin(v42, v44);
  id v47 = (char *)&v361 - v46;
  uint64_t v49 = __chkstk_darwin(v45, v48);
  uint64_t v51 = (char *)&v361 - v50;
  __chkstk_darwin(v49, v52);
  uint64_t v54 = (char *)&v361 - v53;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v379 = *(void *)(v55 - 8);
  uint64_t v380 = v55;
  uint64_t v57 = __chkstk_darwin(v55, v56);
  v371 = (char *)&v361 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v57, v59);
  v374 = (char *)&v361 - v61;
  uint64_t v63 = __chkstk_darwin(v60, v62);
  v372 = (char *)&v361 - v64;
  __chkstk_darwin(v63, v65);
  v373 = (char *)&v361 - v66;
  uint64_t v67 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v67, v68);
  id v70 = (char *)&v361 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001C3D30(v1, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v91 = (uint64_t)v70;
      uint64_t v92 = v375;
      sub_10002F79C(v91, v375);
      char v93 = v369;
      PersonNameComponents.init()();
      uint64_t v94 = v382;
      os_log_type_t v95 = (uint64_t *)(v92 + v382[7]);
      uint64_t v96 = v95[1];
      if (v96) {
        sub_100080B3C(*v95, v96);
      }
      PersonNameComponents.givenName.setter();
      id v97 = (uint64_t *)(v92 + v94[8]);
      uint64_t v98 = v97[1];
      if (v98) {
        sub_100080B3C(*v97, v98);
      }
      PersonNameComponents.familyName.setter();
      uint64_t v99 = self;
      Class isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v101 = [v99 localizedStringFromPersonNameComponents:isa style:0 options:0];

      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v104 = v103;

      (*(void (**)(char *, uint64_t))(v377 + 8))(v93, v378);
      uint64_t v105 = sub_100080B3C(v102, v104);
      uint64_t v107 = v106;
      swift_bridgeObjectRelease();
      uint64_t v108 = v365;
      sub_1001C3D30(v92, v365, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (!v107)
      {
        uint64_t v109 = (uint64_t *)(v108 + v94[6]);
        uint64_t v105 = *v109;
        uint64_t v107 = v109[1];
        swift_bridgeObjectRetain();
      }
      sub_1000F4530(v108, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v110 = self;
      id v111 = [v110 custodianAcceptedNotificationTitle];
      uint64_t v378 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v113 = v112;

      id v114 = [v110 custodianAcceptedNotificationBody];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100009F04(&qword_100326D20);
      uint64_t v115 = swift_allocObject();
      *(_OWORD *)(v115 + 16) = xmmword_1002A9C00;
      *(void *)(v115 + 56) = &type metadata for String;
      *(void *)(v115 + 64) = sub_100104CE8();
      *(void *)(v115 + 32) = v105;
      *(void *)(v115 + 40) = v107;
      uint64_t v116 = String.init(format:_:)();
      uint64_t v118 = v117;
      swift_bridgeObjectRelease();
      sub_100009F04((uint64_t *)&unk_10032B140);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x800000010029B9C0;
      v383 = (void *)0xD00000000000002ALL;
      unint64_t v384 = 0x800000010029F8E0;
      uint64_t v120 = v375;
      goto LABEL_20;
    case 2u:
      uint64_t v121 = (uint64_t)v70;
      uint64_t v122 = v376;
      sub_10002F79C(v121, v376);
      id v123 = v370;
      PersonNameComponents.init()();
      uint64_t v124 = v382;
      uint64_t v125 = (uint64_t *)(v122 + v382[7]);
      uint64_t v126 = v125[1];
      if (v126) {
        sub_100080B3C(*v125, v126);
      }
      PersonNameComponents.givenName.setter();
      uint64_t v127 = (uint64_t *)(v122 + v124[8]);
      uint64_t v128 = v127[1];
      if (v128) {
        sub_100080B3C(*v127, v128);
      }
      PersonNameComponents.familyName.setter();
      uint64_t v129 = self;
      Class v130 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v131 = [v129 localizedStringFromPersonNameComponents:v130 style:0 options:0];

      uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v134 = v133;

      (*(void (**)(char *, uint64_t))(v377 + 8))(v123, v378);
      uint64_t v135 = sub_100080B3C(v132, v134);
      uint64_t v137 = v136;
      swift_bridgeObjectRelease();
      uint64_t v138 = v368;
      sub_1001C3D30(v122, v368, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (!v137)
      {
        id v139 = (uint64_t *)(v138 + v124[6]);
        uint64_t v135 = *v139;
        uint64_t v137 = v139[1];
        swift_bridgeObjectRetain();
      }
      sub_1000F4530(v138, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      v140 = self;
      id v141 = [v140 custodianDeclinedNotificationTitle];
      uint64_t v378 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v113 = v142;

      id v143 = [v140 custodianDeclinedNotificationBody];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100009F04(&qword_100326D20);
      uint64_t v144 = swift_allocObject();
      *(_OWORD *)(v144 + 16) = xmmword_1002A9C00;
      *(void *)(v144 + 56) = &type metadata for String;
      *(void *)(v144 + 64) = sub_100104CE8();
      *(void *)(v144 + 32) = v135;
      *(void *)(v144 + 40) = v137;
      uint64_t v116 = String.init(format:_:)();
      uint64_t v118 = v145;
      swift_bridgeObjectRelease();
      sub_100009F04((uint64_t *)&unk_10032B140);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x800000010029B9C0;
      v383 = (void *)0xD00000000000002ALL;
      unint64_t v384 = 0x800000010029F870;
      uint64_t v120 = v376;
LABEL_20:
      sub_10002F8A4();
      v146._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v146);
      swift_bridgeObjectRelease();
      unint64_t v147 = v384;
      *(void *)(inited + 48) = v383;
      *(void *)(inited + 56) = v147;
      *(void *)(inited + 64) = 0xD000000000000010;
      *(void *)(inited + 72) = 0x800000010029B9E0;
      *(void *)(inited + 80) = 0xD000000000000031;
      *(void *)(inited + 88) = 0x800000010029F8A0;
      uint64_t v148 = inited;
      id v149 = (id)v378;
      unint64_t v150 = sub_100220A6C(v148);
      sub_1000F4530(v120, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      char v151 = 2;
      goto LABEL_89;
    case 3u:
      sub_10002F79C((uint64_t)v70, (uint64_t)v54);
      PersonNameComponents.init()();
      id v152 = v382;
      NSString v153 = (uint64_t *)&v54[v382[7]];
      uint64_t v154 = v153[1];
      if (v154) {
        sub_100080B3C(*v153, v154);
      }
      PersonNameComponents.givenName.setter();
      uint64_t v155 = (uint64_t *)&v54[v152[8]];
      uint64_t v156 = v155[1];
      if (v156) {
        sub_100080B3C(*v155, v156);
      }
      PersonNameComponents.familyName.setter();
      uint64_t v157 = self;
      Class v158 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v159 = [v157 localizedStringFromPersonNameComponents:v158 style:0 options:0];

      uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v162 = v161;

      (*(void (**)(char *, uint64_t))(v377 + 8))(v17, v378);
      uint64_t v163 = sub_100080B3C(v160, v162);
      uint64_t v165 = v164;
      swift_bridgeObjectRelease();
      sub_1001C3D30((uint64_t)v54, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (!v165)
      {
        uint64_t v166 = (uint64_t *)&v51[v152[6]];
        uint64_t v163 = *v166;
        uint64_t v165 = v166[1];
        swift_bridgeObjectRetain();
      }
      sub_1000F4530((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100009F04(&qword_10032B158);
      uint64_t v167 = swift_allocObject();
      *(_OWORD *)(v167 + 16) = xmmword_1002ABAF0;
      uint64_t v168 = (void *)AAFollowUpTrustedContactID;
      *(void *)(v167 + 32) = AAFollowUpTrustedContactID;
      id v169 = v168;
      *(void *)(v167 + 40) = UUID.uuidString.getter();
      *(void *)(v167 + 48) = v170;
      id v171 = (void *)AAFollowUpTrustedContactHandle;
      *(void *)(v167 + 56) = AAFollowUpTrustedContactHandle;
      uint64_t v172 = &v54[v152[6]];
      uint64_t v173 = *((void *)v172 + 1);
      *(void *)(v167 + 64) = *(void *)v172;
      *(void *)(v167 + 72) = v173;
      uint64_t v174 = (void *)AAFollowUpTrustedContactName;
      *(void *)(v167 + 80) = AAFollowUpTrustedContactName;
      *(void *)(v167 + 88) = v163;
      *(void *)(v167 + 96) = v165;
      id v175 = v171;
      swift_bridgeObjectRetain();
      id v176 = v174;
      unint64_t v113 = sub_100221100(v167);
      id v149 = AAFollowUpIdentifierCustodianRemoved;
      sub_1000F4530((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      goto LABEL_88;
    case 4u:
      uint64_t v177 = *(void *)v70;
      sub_100009F04(&qword_10032B130);
      uint64_t v178 = swift_initStackObject();
      uint64_t v179 = v178;
      *(_OWORD *)(v178 + 16) = xmmword_1002A9C00;
      v180 = (void *)AAFollowUpTrustedContactIDs;
      *(void *)(v178 + 32) = AAFollowUpTrustedContactIDs;
      int64_t v181 = *(void *)(v177 + 16);
      if (v181)
      {
        uint64_t v379 = v178;
        v383 = _swiftEmptyArrayStorage;
        id v182 = v180;
        sub_100228924(0, v181, 0);
        uint64_t v183 = *(unsigned __int8 *)(v362 + 80);
        uint64_t v378 = v177;
        uint64_t v184 = v177 + ((v183 + 32) & ~v183);
        uint64_t v380 = *(void *)(v362 + 72);
        uint64_t v185 = v383;
        do
        {
          sub_1001C3D30(v184, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          uint64_t v186 = UUID.uuidString.getter();
          uint64_t v188 = v187;
          sub_1000F4530((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100228924(0, v185[2] + 1, 1);
            uint64_t v185 = v383;
          }
          unint64_t v190 = v185[2];
          unint64_t v189 = v185[3];
          if (v190 >= v189 >> 1)
          {
            sub_100228924(v189 > 1, v190 + 1, 1);
            uint64_t v185 = v383;
          }
          v185[2] = v190 + 1;
          v191 = &v185[2 * v190];
          v191[4] = v186;
          v191[5] = v188;
          v184 += v380;
          --v181;
        }
        while (v181);
        swift_bridgeObjectRelease();
        uint64_t v179 = v379;
      }
      else
      {
        id v305 = v180;
        swift_bridgeObjectRelease();
        uint64_t v185 = _swiftEmptyArrayStorage;
      }
      *(void *)(v179 + 40) = v185;
      unint64_t v306 = sub_100221318(v179);
      id v149 = AAFollowUpIdentifierCustodianReview;
      uint64_t v246 = sub_10024E0B8(v306);
      goto LABEL_69;
    case 5u:
      uint64_t v192 = (uint64_t)v40;
      sub_10002F79C((uint64_t)v70, (uint64_t)v40);
      uint64_t v193 = v367;
      PersonNameComponents.init()();
      uint64_t v194 = v382;
      objc_super v195 = (uint64_t *)(v192 + v382[7]);
      uint64_t v196 = v195[1];
      if (v196) {
        sub_100080B3C(*v195, v196);
      }
      PersonNameComponents.givenName.setter();
      uint64_t v197 = (uint64_t *)(v192 + v194[8]);
      uint64_t v198 = v197[1];
      if (v198) {
        sub_100080B3C(*v197, v198);
      }
      uint64_t v199 = v381;
      PersonNameComponents.familyName.setter();
      uint64_t v200 = self;
      Class v201 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v202 = [v200 localizedStringFromPersonNameComponents:v201 style:0 options:0];

      uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v205 = v204;

      (*(void (**)(char *, uint64_t))(v377 + 8))(v193, v378);
      uint64_t v206 = sub_100080B3C(v203, v205);
      uint64_t v208 = v207;
      swift_bridgeObjectRelease();
      uint64_t v209 = v364;
      sub_1001C3D30(v192, v364, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (!v208)
      {
        v210 = (uint64_t *)(v209 + v194[6]);
        uint64_t v206 = *v210;
        uint64_t v208 = v210[1];
        swift_bridgeObjectRetain();
      }
      sub_1000F4530(v209, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100009F04(&qword_10032B158);
      uint64_t v211 = swift_initStackObject();
      *(_OWORD *)(v211 + 16) = xmmword_1002ABAF0;
      v212 = (void *)AAFollowUpTrustedContactID;
      *(void *)(v211 + 32) = AAFollowUpTrustedContactID;
      id v213 = v212;
      *(void *)(v211 + 40) = UUID.uuidString.getter();
      *(void *)(v211 + 48) = v214;
      v215 = (void *)AAFollowUpTrustedContactHandle;
      *(void *)(v211 + 56) = AAFollowUpTrustedContactHandle;
      v216 = (void *)(v192 + v194[6]);
      uint64_t v217 = v216[1];
      *(void *)(v211 + 64) = *v216;
      *(void *)(v211 + 72) = v217;
      v218 = (void *)AAFollowUpTrustedContactName;
      *(void *)(v211 + 80) = AAFollowUpTrustedContactName;
      *(void *)(v211 + 88) = v206;
      *(void *)(v211 + 96) = v208;
      id v219 = v215;
      swift_bridgeObjectRetain();
      id v220 = v218;
      unint64_t v113 = sub_100221100(v211);
      id v149 = AAFollowUpIdentifierCustodianWalrusNoLiveness;
      uint64_t v221 = v192;
      goto LABEL_72;
    case 6u:
      sub_10002F79C((uint64_t)v70, (uint64_t)v47);
      v222 = v366;
      PersonNameComponents.init()();
      v223 = (uint64_t *)&v47[v382[7]];
      uint64_t v224 = v223[1];
      if (v224) {
        sub_100080B3C(*v223, v224);
      }
      PersonNameComponents.givenName.setter();
      v225 = (uint64_t *)&v47[v382[8]];
      uint64_t v226 = v225[1];
      if (v226) {
        sub_100080B3C(*v225, v226);
      }
      uint64_t v199 = v381;
      PersonNameComponents.familyName.setter();
      v227 = self;
      Class v228 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      id v229 = [v227 localizedStringFromPersonNameComponents:v228 style:0 options:0];

      uint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v232 = v231;

      (*(void (**)(char *, uint64_t))(v377 + 8))(v222, v378);
      uint64_t v233 = sub_100080B3C(v230, v232);
      uint64_t v235 = v234;
      swift_bridgeObjectRelease();
      uint64_t v236 = v363;
      sub_1001C3D30((uint64_t)v47, v363, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      v237 = v382;
      if (!v235)
      {
        v307 = (uint64_t *)(v236 + v382[6]);
        uint64_t v233 = *v307;
        uint64_t v235 = v307[1];
        swift_bridgeObjectRetain();
      }
      sub_1000F4530(v236, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_100009F04(&qword_10032B158);
      uint64_t v308 = swift_initStackObject();
      *(_OWORD *)(v308 + 16) = xmmword_1002ABAF0;
      v309 = (void *)AAFollowUpTrustedContactID;
      *(void *)(v308 + 32) = AAFollowUpTrustedContactID;
      id v310 = v309;
      *(void *)(v308 + 40) = UUID.uuidString.getter();
      *(void *)(v308 + 48) = v311;
      v312 = (void *)AAFollowUpTrustedContactHandle;
      *(void *)(v308 + 56) = AAFollowUpTrustedContactHandle;
      v313 = &v47[v237[6]];
      uint64_t v314 = *((void *)v313 + 1);
      *(void *)(v308 + 64) = *(void *)v313;
      *(void *)(v308 + 72) = v314;
      v315 = (void *)AAFollowUpTrustedContactName;
      *(void *)(v308 + 80) = AAFollowUpTrustedContactName;
      *(void *)(v308 + 88) = v233;
      *(void *)(v308 + 96) = v235;
      id v316 = v312;
      swift_bridgeObjectRetain();
      id v317 = v315;
      v318 = v47;
      unint64_t v113 = sub_100221100(v308);
      id v149 = AAFollowUpIdentifierCustodianWalrusRemoved;
      uint64_t v221 = (uint64_t)v318;
LABEL_72:
      sub_1000F4530(v221, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      goto LABEL_77;
    case 7u:
      char v238 = *v70;
      char v239 = v70[1];
      sub_100009F04(&qword_10032B138);
      uint64_t v240 = swift_initStackObject();
      *(_OWORD *)(v240 + 16) = xmmword_1002A9F00;
      v241 = (void *)AAFollowUpUserInfoHasWalrusEnabled;
      *(void *)(v240 + 32) = AAFollowUpUserInfoHasWalrusEnabled;
      *(unsigned char *)(v240 + 40) = v238;
      v242 = (void *)AAFollowUpUserInfoHasRecoveryContact;
      *(void *)(v240 + 48) = AAFollowUpUserInfoHasRecoveryContact;
      *(unsigned char *)(v240 + 56) = v239;
      id v243 = v241;
      id v244 = v242;
      unint64_t v245 = sub_100221218(v240);
      id v149 = AAFollowUpIdentifierRecoveryKeyMismatch;
      uint64_t v246 = sub_10024DD04(v245);
LABEL_69:
      unint64_t v113 = v246;
      swift_bridgeObjectRelease();
      uint64_t v116 = 0;
      uint64_t v118 = 0;
      unint64_t v150 = 0;
      char v151 = 1;
      goto LABEL_89;
    case 8u:
      v247 = (uint64_t *)&v70[*(int *)(sub_100009F04(&qword_10032B150) + 48)];
      uint64_t v248 = *v247;
      uint64_t v249 = v247[1];
      (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v372, v70, v380);
      type metadata accessor for ContactsHelper();
      uint64_t v250 = swift_allocObject();
      sub_100009F04((uint64_t *)&unk_100325960);
      Dependency.init(dependencyId:config:)();
      uint64_t v251 = sub_100009F04((uint64_t *)&unk_100324D30);
      Dependency.wrappedValue.getter();
      v252 = v383;
      NSString v253 = String._bridgeToObjectiveC()();
      id v254 = [v252 contactForHandle:v253];

      swift_unknownObjectRelease();
      if (v254)
      {
        id v255 = objc_allocWithZone((Class)AALocalContactInfo);
        swift_bridgeObjectRetain();
        id v256 = v254;
        NSString v257 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v258 = [v255 initWithHandle:v257 contact:v256];

        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v251 - 8) + 8))(v250 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v251);
        swift_deallocClassInstance();
        if (v258)
        {
          id v259 = [v258 displayName];

          if (v259)
          {
            uint64_t v260 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v262 = v261;

            goto LABEL_75;
          }
        }
      }
      else
      {
        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v251 - 8) + 8))(v250 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v251);
        swift_deallocClassInstance();
      }
      swift_bridgeObjectRetain();
      uint64_t v260 = v248;
      uint64_t v262 = v249;
LABEL_75:
      uint64_t v199 = v381;
      sub_100009F04(&qword_10032B158);
      uint64_t v319 = swift_initStackObject();
      *(_OWORD *)(v319 + 16) = xmmword_1002ABAF0;
      v320 = (void *)AAFollowUpTrustedContactID;
      *(void *)(v319 + 32) = AAFollowUpTrustedContactID;
      id v321 = v320;
      v296 = v372;
      *(void *)(v319 + 40) = UUID.uuidString.getter();
      *(void *)(v319 + 48) = v322;
      v323 = (void *)AAFollowUpTrustedContactHandle;
      *(void *)(v319 + 56) = AAFollowUpTrustedContactHandle;
      *(void *)(v319 + 64) = v248;
      v324 = (void *)AAFollowUpTrustedContactName;
      *(void *)(v319 + 72) = v249;
      *(void *)(v319 + 80) = v324;
      *(void *)(v319 + 88) = v260;
      *(void *)(v319 + 96) = v262;
      id v325 = v323;
      id v326 = v324;
      unint64_t v113 = sub_100221100(v319);
      v304 = (id *)&AAFollowUpIdentifierBeneficiaryRemoved;
      goto LABEL_76;
    case 9u:
      v263 = &v70[*(int *)(sub_100009F04(&qword_10032B150) + 48)];
      v265 = *(int **)v263;
      uint64_t v264 = *((void *)v263 + 1);
      (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v374, v70, v380);
      type metadata accessor for ContactsHelper();
      uint64_t v266 = swift_allocObject();
      sub_100009F04((uint64_t *)&unk_100325960);
      Dependency.init(dependencyId:config:)();
      uint64_t v267 = sub_100009F04((uint64_t *)&unk_100324D30);
      Dependency.wrappedValue.getter();
      v268 = v383;
      NSString v269 = String._bridgeToObjectiveC()();
      id v270 = [v268 contactForHandle:v269];

      swift_unknownObjectRelease();
      if (v270)
      {
        id v271 = objc_allocWithZone((Class)AALocalContactInfo);
        swift_bridgeObjectRetain();
        id v272 = v270;
        NSString v273 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v274 = [v271 initWithHandle:v273 contact:v272];

        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v267 - 8) + 8))(v266 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v267);
        swift_deallocClassInstance();
        if (v274)
        {
          id v275 = [v274 displayName];
          if (v275)
          {
            v276 = v275;
            v382 = (int *)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v278 = v277;
          }
          else
          {
            swift_bridgeObjectRetain();
            v382 = v265;
            uint64_t v278 = v264;
          }
          id v346 = [v274 firstName];
          if (v346)
          {
            v347 = v346;
            uint64_t v328 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v329 = v348;

LABEL_87:
            v349 = v265;
            sub_100009F04(&qword_10032B158);
            uint64_t v350 = swift_initStackObject();
            *(_OWORD *)(v350 + 16) = xmmword_1002AFE50;
            v351 = (void *)AAFollowUpTrustedContactID;
            *(void *)(v350 + 32) = AAFollowUpTrustedContactID;
            id v352 = v351;
            v353 = v374;
            *(void *)(v350 + 40) = UUID.uuidString.getter();
            *(void *)(v350 + 48) = v354;
            v355 = (void *)AAFollowUpTrustedContactHandle;
            *(void *)(v350 + 56) = AAFollowUpTrustedContactHandle;
            *(void *)(v350 + 64) = v349;
            v356 = (void *)AAFollowUpTrustedContactName;
            *(void *)(v350 + 72) = v264;
            *(void *)(v350 + 80) = v356;
            *(void *)(v350 + 88) = v382;
            *(void *)(v350 + 96) = v278;
            v357 = (void *)AAFollowUpTrustedContactFirstName;
            *(void *)(v350 + 104) = AAFollowUpTrustedContactFirstName;
            *(void *)(v350 + 112) = v328;
            *(void *)(v350 + 120) = v329;
            id v358 = v355;
            id v359 = v356;
            id v360 = v357;
            unint64_t v113 = sub_100221100(v350);
            id v149 = AAFollowUpIdentifierBeneficiaryIneligible;

            (*(void (**)(char *, uint64_t))(v379 + 8))(v353, v380);
LABEL_88:
            uint64_t v116 = 0;
            uint64_t v118 = 0;
            unint64_t v150 = 0;
            char v151 = 0;
            goto LABEL_89;
          }
LABEL_80:
          swift_bridgeObjectRetain();
          uint64_t v328 = (uint64_t)v265;
          uint64_t v329 = v264;
          goto LABEL_87;
        }
      }
      else
      {
        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v267 - 8) + 8))(v266 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v267);
        swift_deallocClassInstance();
      }
      swift_bridgeObjectRetain();
      id v274 = 0;
      v382 = v265;
      uint64_t v278 = v264;
      goto LABEL_80;
    case 0xAu:
      v279 = *(int **)v70;
      id v280 = [v279 handle];
      if (!v280) {
        goto LABEL_82;
      }
      v281 = v280;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for ContactsHelper();
      uint64_t v282 = swift_allocObject();
      sub_100009F04((uint64_t *)&unk_100325960);
      Dependency.init(dependencyId:config:)();
      uint64_t v283 = sub_100009F04((uint64_t *)&unk_100324D30);
      Dependency.wrappedValue.getter();
      v284 = v383;
      NSString v285 = String._bridgeToObjectiveC()();
      id v286 = [v284 contactForHandle:v285];

      swift_unknownObjectRelease();
      if (!v286)
      {
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v283 - 8) + 8))(v282 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v283);
        swift_deallocClassInstance();
LABEL_82:
        id v291 = [self BenefactorUnknownName];
        goto LABEL_83;
      }
      id v287 = objc_allocWithZone((Class)AALocalContactInfo);
      swift_bridgeObjectRetain();
      id v288 = v286;
      NSString v289 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v290 = [v287 initWithHandle:v289 contact:v288];
      swift_bridgeObjectRelease();

      swift_setDeallocating();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v283 - 8) + 8))(v282 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v283);
      swift_deallocClassInstance();
      if (!v290) {
        goto LABEL_82;
      }
      id v291 = [v290 firstName];

      if (!v291) {
        goto LABEL_82;
      }
LABEL_83:
      uint64_t v330 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v332 = v331;

      v333 = self;
      id v334 = [v333 BenefactorAccessKeyChangedNotificationTitle];
      uint64_t v378 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v113 = v335;

      id v336 = [v333 BenefactorAccessKeyChangedNotificationBody];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100009F04(&qword_100326D20);
      uint64_t v337 = swift_allocObject();
      *(_OWORD *)(v337 + 16) = xmmword_1002A9C00;
      *(void *)(v337 + 56) = &type metadata for String;
      *(void *)(v337 + 64) = sub_100104CE8();
      *(void *)(v337 + 32) = v330;
      *(void *)(v337 + 40) = v332;
      uint64_t v116 = String.init(format:_:)();
      uint64_t v118 = v338;
      swift_bridgeObjectRelease();
      sub_100009F04((uint64_t *)&unk_10032B140);
      uint64_t v339 = swift_initStackObject();
      *(_OWORD *)(v339 + 16) = xmmword_1002A9F00;
      *(void *)(v339 + 32) = 0xD000000000000010;
      *(void *)(v339 + 40) = 0x800000010029B9C0;
      v383 = (void *)0xD000000000000034;
      unint64_t v384 = 0x800000010029F830;
      id v340 = [v279 beneficiaryID];
      v382 = v279;
      v341 = v371;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10002F8A4();
      uint64_t v342 = v380;
      v343._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v343);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v379 + 8))(v341, v342);
      unint64_t v344 = v384;
      *(void *)(v339 + 48) = v383;
      *(void *)(v339 + 56) = v344;
      *(void *)(v339 + 64) = 0xD000000000000010;
      *(void *)(v339 + 72) = 0x800000010029B9E0;
      *(void *)(v339 + 80) = 0xD00000000000002ELL;
      *(void *)(v339 + 88) = 0x800000010029F800;
      uint64_t v345 = v339;
      id v149 = (id)v378;
      unint64_t v150 = sub_100220A6C(v345);

      char v151 = 2;
LABEL_89:
      uint64_t v199 = v381;
LABEL_90:
      *(void *)uint64_t v199 = v149;
      *(void *)(v199 + 8) = v113;
      *(void *)(v199 + 16) = v116;
      *(void *)(v199 + 24) = v118;
      *(void *)(v199 + 32) = v150;
      *(unsigned char *)(v199 + 40) = v151;
      return;
    case 0xBu:
      id v149 = AAFollowUpIdentifierWalrusUserRecoveryFactorsMissing;
      unint64_t v113 = sub_100221100((uint64_t)_swiftEmptyArrayStorage);
      goto LABEL_88;
    default:
      uint64_t v71 = (uint64_t *)&v70[*(int *)(sub_100009F04((uint64_t *)&unk_10032B160) + 48)];
      uint64_t v72 = *v71;
      uint64_t v73 = v71[1];
      (*(void (**)(char *, char *, uint64_t))(v379 + 32))(v373, v70, v380);
      unint64_t v74 = self;
      Class v75 = UUID._bridgeToObjectiveC()().super.isa;
      id v76 = [v74 stringForCustodianMessagesURLWithUUID:v75];

      uint64_t v378 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v382 = v77;

      type metadata accessor for ContactsHelper();
      uint64_t v78 = swift_allocObject();
      sub_100009F04((uint64_t *)&unk_100325960);
      Dependency.init(dependencyId:config:)();
      uint64_t v79 = sub_100009F04((uint64_t *)&unk_100324D30);
      Dependency.wrappedValue.getter();
      uint64_t v80 = v383;
      NSString v81 = String._bridgeToObjectiveC()();
      id v82 = [v80 contactForHandle:v81];

      swift_unknownObjectRelease();
      if (v82)
      {
        id v83 = objc_allocWithZone((Class)AALocalContactInfo);
        swift_bridgeObjectRetain();
        id v84 = v82;
        NSString v85 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v86 = [v83 initWithHandle:v85 contact:v84];

        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v78 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v79);
        swift_deallocClassInstance();
        if (v86)
        {
          id v87 = [v86 displayName];

          if (v87)
          {
            uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v90 = v89;

            goto LABEL_66;
          }
        }
      }
      else
      {
        swift_setDeallocating();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v78 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v79);
        swift_deallocClassInstance();
      }
      swift_bridgeObjectRetain();
      uint64_t v88 = v72;
      uint64_t v90 = v73;
LABEL_66:
      uint64_t v199 = v381;
      uint64_t v292 = v378;
      sub_100009F04(&qword_10032B158);
      uint64_t v293 = swift_allocObject();
      *(_OWORD *)(v293 + 16) = xmmword_1002AFE50;
      v294 = (void *)AAFollowUpTrustedContactID;
      *(void *)(v293 + 32) = AAFollowUpTrustedContactID;
      id v295 = v294;
      v296 = v373;
      *(void *)(v293 + 40) = UUID.uuidString.getter();
      *(void *)(v293 + 48) = v297;
      v298 = (void *)AAFollowUpTrustedContactHandle;
      *(void *)(v293 + 56) = AAFollowUpTrustedContactHandle;
      *(void *)(v293 + 64) = v72;
      v299 = (void *)AAFollowUpTrustedContactName;
      *(void *)(v293 + 72) = v73;
      *(void *)(v293 + 80) = v299;
      *(void *)(v293 + 88) = v88;
      *(void *)(v293 + 96) = v90;
      v300 = (void *)AAFollowUpTrustedContactInvitationURL;
      *(void *)(v293 + 104) = AAFollowUpTrustedContactInvitationURL;
      *(void *)(v293 + 112) = v292;
      *(void *)(v293 + 120) = v382;
      id v301 = v298;
      id v302 = v299;
      id v303 = v300;
      unint64_t v113 = sub_100221100(v293);
      v304 = (id *)&AAFollowUpIdentifierCustodianInvitationReminder;
LABEL_76:
      v327 = *(void (**)(char *, uint64_t))(v379 + 8);
      id v149 = *v304;
      v327(v296, v380);
LABEL_77:
      uint64_t v116 = 0;
      uint64_t v118 = 0;
      unint64_t v150 = 0;
      char v151 = 0;
      goto LABEL_90;
  }
}

uint64_t type metadata accessor for TrustedContactUserNotification()
{
  uint64_t result = qword_10032B1E0;
  if (!qword_10032B1E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C3D30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_1001C3D98(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = *(int *)(sub_100009F04((uint64_t *)&unk_10032B160) + 48);
        uint64_t v9 = &a1[v8];
        uint64_t v10 = &a2[v8];
        uint64_t v11 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v11;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 1u:
        uint64_t v14 = type metadata accessor for UUID();
        uint64_t v211 = *(void *)(v14 - 8);
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
        v15(a1, a2, v14);
        uint64_t v16 = (int *)type metadata accessor for CustodianRecord();
        v210 = v15;
        v15(&a1[v16[5]], &a2[v16[5]], v14);
        uint64_t v17 = v16[6];
        uint64_t v18 = &a1[v17];
        uint64_t v19 = &a2[v17];
        uint64_t v20 = *((void *)v19 + 1);
        *(void *)uint64_t v18 = *(void *)v19;
        *((void *)v18 + 1) = v20;
        uint64_t v21 = v16[7];
        uint64_t v22 = &a1[v21];
        uint64_t v23 = &a2[v21];
        uint64_t v24 = *((void *)v23 + 1);
        *(void *)uint64_t v22 = *(void *)v23;
        *((void *)v22 + 1) = v24;
        uint64_t v25 = v16[8];
        uint64_t v26 = &a1[v25];
        uint64_t v27 = &a2[v25];
        uint64_t v28 = *((void *)v27 + 1);
        *(void *)uint64_t v26 = *(void *)v27;
        *((void *)v26 + 1) = v28;
        *(void *)&a1[v16[9]] = *(void *)&a2[v16[9]];
        uint64_t v29 = v16[10];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = (uint64_t *)&a2[v29];
        unint64_t v32 = *(void *)&a2[v29 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
        }
        else
        {
          uint64_t v112 = *v31;
          sub_100013140(*v31, v32);
          *(void *)uint64_t v30 = v112;
          *((void *)v30 + 1) = v32;
        }
        uint64_t v113 = v16[11];
        id v114 = (uint64_t *)&a1[v113];
        uint64_t v115 = (uint64_t *)&a2[v113];
        uint64_t v116 = *v115;
        unint64_t v117 = v115[1];
        sub_100013140(*v115, v117);
        uint64_t *v114 = v116;
        v114[1] = v117;
        a1[v16[12]] = a2[v16[12]];
        uint64_t v118 = v16[13];
        uint64_t v119 = &a1[v118];
        uint64_t v120 = &a2[v118];
        uint64_t v121 = *((void *)v120 + 1);
        *(void *)uint64_t v119 = *(void *)v120;
        *((void *)v119 + 1) = v121;
        uint64_t v122 = v16[14];
        id v123 = &a1[v122];
        uint64_t v124 = &a2[v122];
        uint64_t v125 = *((void *)v124 + 1);
        *(void *)id v123 = *(void *)v124;
        *((void *)v123 + 1) = v125;
        uint64_t v126 = v16[15];
        uint64_t v127 = &a1[v126];
        uint64_t v128 = &a2[v126];
        *(void *)uint64_t v127 = *(void *)v128;
        v127[8] = v128[8];
        uint64_t v129 = v16[16];
        Class v130 = &a1[v129];
        id v131 = &a2[v129];
        uint64_t v132 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v132(v131, 1, v14)) {
          goto LABEL_35;
        }
        goto LABEL_34;
      case 2u:
        uint64_t v14 = type metadata accessor for UUID();
        uint64_t v211 = *(void *)(v14 - 8);
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
        v33(a1, a2, v14);
        uint64_t v34 = (int *)type metadata accessor for CustodianRecord();
        v210 = v33;
        v33(&a1[v34[5]], &a2[v34[5]], v14);
        uint64_t v35 = v34[6];
        uint64_t v36 = &a1[v35];
        uint64_t v37 = &a2[v35];
        uint64_t v38 = *((void *)v37 + 1);
        *(void *)uint64_t v36 = *(void *)v37;
        *((void *)v36 + 1) = v38;
        uint64_t v39 = v34[7];
        uint64_t v40 = &a1[v39];
        uint64_t v41 = &a2[v39];
        uint64_t v42 = *((void *)v41 + 1);
        *(void *)uint64_t v40 = *(void *)v41;
        *((void *)v40 + 1) = v42;
        uint64_t v43 = v34[8];
        uint64_t v44 = &a1[v43];
        uint64_t v45 = &a2[v43];
        uint64_t v46 = *((void *)v45 + 1);
        *(void *)uint64_t v44 = *(void *)v45;
        *((void *)v44 + 1) = v46;
        *(void *)&a1[v34[9]] = *(void *)&a2[v34[9]];
        uint64_t v47 = v34[10];
        uint64_t v48 = &a1[v47];
        uint64_t v49 = (uint64_t *)&a2[v47];
        unint64_t v50 = *(void *)&a2[v47 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v50 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        }
        else
        {
          uint64_t v133 = *v49;
          sub_100013140(*v49, v50);
          *(void *)uint64_t v48 = v133;
          *((void *)v48 + 1) = v50;
        }
        uint64_t v134 = v34[11];
        uint64_t v135 = (uint64_t *)&a1[v134];
        uint64_t v136 = (uint64_t *)&a2[v134];
        uint64_t v137 = *v136;
        unint64_t v138 = v136[1];
        sub_100013140(*v136, v138);
        uint64_t *v135 = v137;
        v135[1] = v138;
        a1[v34[12]] = a2[v34[12]];
        uint64_t v139 = v34[13];
        v140 = &a1[v139];
        id v141 = &a2[v139];
        uint64_t v142 = *((void *)v141 + 1);
        *(void *)v140 = *(void *)v141;
        *((void *)v140 + 1) = v142;
        uint64_t v143 = v34[14];
        uint64_t v144 = &a1[v143];
        uint64_t v145 = &a2[v143];
        uint64_t v146 = *((void *)v145 + 1);
        *(void *)uint64_t v144 = *(void *)v145;
        *((void *)v144 + 1) = v146;
        uint64_t v147 = v34[15];
        uint64_t v148 = &a1[v147];
        id v149 = &a2[v147];
        *(void *)uint64_t v148 = *(void *)v149;
        v148[8] = v149[8];
        uint64_t v150 = v34[16];
        Class v130 = &a1[v150];
        id v131 = &a2[v150];
        char v151 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v151(v131, 1, v14)) {
          goto LABEL_34;
        }
        goto LABEL_35;
      case 3u:
        uint64_t v14 = type metadata accessor for UUID();
        uint64_t v211 = *(void *)(v14 - 8);
        uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
        v51(a1, a2, v14);
        uint64_t v52 = (int *)type metadata accessor for CustodianRecord();
        v210 = v51;
        v51(&a1[v52[5]], &a2[v52[5]], v14);
        uint64_t v53 = v52[6];
        uint64_t v54 = &a1[v53];
        uint64_t v55 = &a2[v53];
        uint64_t v56 = *((void *)v55 + 1);
        *(void *)uint64_t v54 = *(void *)v55;
        *((void *)v54 + 1) = v56;
        uint64_t v57 = v52[7];
        uint64_t v58 = &a1[v57];
        uint64_t v59 = &a2[v57];
        uint64_t v60 = *((void *)v59 + 1);
        *(void *)uint64_t v58 = *(void *)v59;
        *((void *)v58 + 1) = v60;
        uint64_t v61 = v52[8];
        uint64_t v62 = &a1[v61];
        uint64_t v63 = &a2[v61];
        uint64_t v64 = *((void *)v63 + 1);
        *(void *)uint64_t v62 = *(void *)v63;
        *((void *)v62 + 1) = v64;
        *(void *)&a1[v52[9]] = *(void *)&a2[v52[9]];
        uint64_t v65 = v52[10];
        uint64_t v66 = &a1[v65];
        uint64_t v67 = (uint64_t *)&a2[v65];
        unint64_t v68 = *(void *)&a2[v65 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v68 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        }
        else
        {
          uint64_t v152 = *v67;
          sub_100013140(*v67, v68);
          *(void *)uint64_t v66 = v152;
          *((void *)v66 + 1) = v68;
        }
        uint64_t v153 = v52[11];
        uint64_t v154 = (uint64_t *)&a1[v153];
        uint64_t v155 = (uint64_t *)&a2[v153];
        uint64_t v156 = *v155;
        unint64_t v157 = v155[1];
        sub_100013140(*v155, v157);
        uint64_t *v154 = v156;
        v154[1] = v157;
        a1[v52[12]] = a2[v52[12]];
        uint64_t v158 = v52[13];
        id v159 = &a1[v158];
        uint64_t v160 = &a2[v158];
        uint64_t v161 = *((void *)v160 + 1);
        *(void *)id v159 = *(void *)v160;
        *((void *)v159 + 1) = v161;
        uint64_t v162 = v52[14];
        uint64_t v163 = &a1[v162];
        uint64_t v164 = &a2[v162];
        uint64_t v165 = *((void *)v164 + 1);
        *(void *)uint64_t v163 = *(void *)v164;
        *((void *)v163 + 1) = v165;
        uint64_t v166 = v52[15];
        uint64_t v167 = &a1[v166];
        uint64_t v168 = &a2[v166];
        *(void *)uint64_t v167 = *(void *)v168;
        v167[8] = v168[8];
        uint64_t v169 = v52[16];
        Class v130 = &a1[v169];
        id v131 = &a2[v169];
        uint64_t v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v170(v131, 1, v14)) {
          goto LABEL_34;
        }
        goto LABEL_35;
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 5u:
        uint64_t v14 = type metadata accessor for UUID();
        uint64_t v211 = *(void *)(v14 - 8);
        uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
        v69(a1, a2, v14);
        id v70 = (int *)type metadata accessor for CustodianRecord();
        v210 = v69;
        v69(&a1[v70[5]], &a2[v70[5]], v14);
        uint64_t v71 = v70[6];
        uint64_t v72 = &a1[v71];
        uint64_t v73 = &a2[v71];
        uint64_t v74 = *((void *)v73 + 1);
        *(void *)uint64_t v72 = *(void *)v73;
        *((void *)v72 + 1) = v74;
        uint64_t v75 = v70[7];
        id v76 = &a1[v75];
        uint64_t v77 = &a2[v75];
        uint64_t v78 = *((void *)v77 + 1);
        *(void *)id v76 = *(void *)v77;
        *((void *)v76 + 1) = v78;
        uint64_t v79 = v70[8];
        uint64_t v80 = &a1[v79];
        NSString v81 = &a2[v79];
        uint64_t v82 = *((void *)v81 + 1);
        *(void *)uint64_t v80 = *(void *)v81;
        *((void *)v80 + 1) = v82;
        *(void *)&a1[v70[9]] = *(void *)&a2[v70[9]];
        uint64_t v83 = v70[10];
        id v84 = &a1[v83];
        NSString v85 = (uint64_t *)&a2[v83];
        unint64_t v86 = *(void *)&a2[v83 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)id v84 = *(_OWORD *)v85;
        }
        else
        {
          uint64_t v171 = *v85;
          sub_100013140(*v85, v86);
          *(void *)id v84 = v171;
          *((void *)v84 + 1) = v86;
        }
        uint64_t v172 = v70[11];
        uint64_t v173 = (uint64_t *)&a1[v172];
        uint64_t v174 = (uint64_t *)&a2[v172];
        uint64_t v175 = *v174;
        unint64_t v176 = v174[1];
        sub_100013140(*v174, v176);
        *uint64_t v173 = v175;
        v173[1] = v176;
        a1[v70[12]] = a2[v70[12]];
        uint64_t v177 = v70[13];
        uint64_t v178 = &a1[v177];
        uint64_t v179 = &a2[v177];
        uint64_t v180 = *((void *)v179 + 1);
        *(void *)uint64_t v178 = *(void *)v179;
        *((void *)v178 + 1) = v180;
        uint64_t v181 = v70[14];
        id v182 = &a1[v181];
        uint64_t v183 = &a2[v181];
        uint64_t v184 = *((void *)v183 + 1);
        *(void *)id v182 = *(void *)v183;
        *((void *)v182 + 1) = v184;
        uint64_t v185 = v70[15];
        uint64_t v186 = &a1[v185];
        uint64_t v187 = &a2[v185];
        *(void *)uint64_t v186 = *(void *)v187;
        v186[8] = v187[8];
        uint64_t v188 = v70[16];
        Class v130 = &a1[v188];
        id v131 = &a2[v188];
        unint64_t v189 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v189(v131, 1, v14)) {
          goto LABEL_34;
        }
        goto LABEL_35;
      case 6u:
        uint64_t v14 = type metadata accessor for UUID();
        uint64_t v211 = *(void *)(v14 - 8);
        id v87 = *(void (**)(char *, char *, uint64_t))(v211 + 16);
        v87(a1, a2, v14);
        uint64_t v88 = (int *)type metadata accessor for CustodianRecord();
        v210 = v87;
        v87(&a1[v88[5]], &a2[v88[5]], v14);
        uint64_t v89 = v88[6];
        uint64_t v90 = &a1[v89];
        uint64_t v91 = &a2[v89];
        uint64_t v92 = *((void *)v91 + 1);
        *(void *)uint64_t v90 = *(void *)v91;
        *((void *)v90 + 1) = v92;
        uint64_t v93 = v88[7];
        uint64_t v94 = &a1[v93];
        os_log_type_t v95 = &a2[v93];
        uint64_t v96 = *((void *)v95 + 1);
        *(void *)uint64_t v94 = *(void *)v95;
        *((void *)v94 + 1) = v96;
        uint64_t v97 = v88[8];
        uint64_t v98 = &a1[v97];
        uint64_t v99 = &a2[v97];
        uint64_t v100 = *((void *)v99 + 1);
        *(void *)uint64_t v98 = *(void *)v99;
        *((void *)v98 + 1) = v100;
        *(void *)&a1[v88[9]] = *(void *)&a2[v88[9]];
        uint64_t v101 = v88[10];
        uint64_t v102 = &a1[v101];
        uint64_t v103 = (uint64_t *)&a2[v101];
        unint64_t v104 = *(void *)&a2[v101 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v104 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
        }
        else
        {
          uint64_t v190 = *v103;
          sub_100013140(*v103, v104);
          *(void *)uint64_t v102 = v190;
          *((void *)v102 + 1) = v104;
        }
        uint64_t v191 = v88[11];
        uint64_t v192 = (uint64_t *)&a1[v191];
        uint64_t v193 = (uint64_t *)&a2[v191];
        uint64_t v194 = *v193;
        unint64_t v195 = v193[1];
        sub_100013140(*v193, v195);
        *uint64_t v192 = v194;
        v192[1] = v195;
        a1[v88[12]] = a2[v88[12]];
        uint64_t v196 = v88[13];
        uint64_t v197 = &a1[v196];
        uint64_t v198 = &a2[v196];
        uint64_t v199 = *((void *)v198 + 1);
        *(void *)uint64_t v197 = *(void *)v198;
        *((void *)v197 + 1) = v199;
        uint64_t v200 = v88[14];
        Class v201 = &a1[v200];
        id v202 = &a2[v200];
        uint64_t v203 = *((void *)v202 + 1);
        *(void *)Class v201 = *(void *)v202;
        *((void *)v201 + 1) = v203;
        uint64_t v204 = v88[15];
        uint64_t v205 = &a1[v204];
        uint64_t v206 = &a2[v204];
        *(void *)uint64_t v205 = *(void *)v206;
        v205[8] = v206[8];
        uint64_t v207 = v88[16];
        Class v130 = &a1[v207];
        id v131 = &a2[v207];
        uint64_t v208 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v211 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v208(v131, 1, v14))
        {
LABEL_34:
          uint64_t v209 = sub_100009F04((uint64_t *)&unk_100321CE0);
          memcpy(v130, v131, *(void *)(*(void *)(v209 - 8) + 64));
        }
        else
        {
LABEL_35:
          v210(v130, v131, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v211 + 56))(v130, 0, 1, v14);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
      case 9u:
        uint64_t v105 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v105 - 8) + 16))(a1, a2, v105);
        uint64_t v106 = *(int *)(sub_100009F04(&qword_10032B150) + 48);
        uint64_t v107 = &a1[v106];
        uint64_t v108 = &a2[v106];
        uint64_t v109 = *((void *)v108 + 1);
        *(void *)uint64_t v107 = *(void *)v108;
        *((void *)v107 + 1) = v109;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        uint64_t v110 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        id v111 = v110;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void sub_1001C4C30(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(void **, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
      uint64_t v9 = (uint64_t *)&unk_10032B160;
      goto LABEL_11;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
      uint64_t v2 = type metadata accessor for UUID();
      uint64_t v3 = *(void *)(v2 - 8);
      uint64_t v12 = *(void (**)(void **, uint64_t))(v3 + 8);
      v12(a1, v2);
      uint64_t v4 = (int *)type metadata accessor for CustodianRecord();
      v12((void **)((char *)a1 + v4[5]), v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v5 = (uint64_t *)((char *)a1 + v4[10]);
      unint64_t v6 = v5[1];
      if (v6 >> 60 != 15) {
        sub_100013198(*v5, v6);
      }
      sub_100013198(*(uint64_t *)((char *)a1 + v4[11]), *(unint64_t *)((char *)a1 + v4[11] + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = (char *)a1 + v4[16];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2))
      {
        v12((void **)v7, v2);
      }
      return;
    case 4u:
      goto LABEL_12;
    case 8u:
    case 9u:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(void **, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      uint64_t v9 = &qword_10032B150;
LABEL_11:
      sub_100009F04(v9);
LABEL_12:
      swift_bridgeObjectRelease();
      break;
    case 0xAu:
      uint64_t v11 = *a1;

      break;
    default:
      return;
  }
}

char *sub_1001C4F1C(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(sub_100009F04((uint64_t *)&unk_10032B160) + 48);
      uint64_t v8 = &a1[v7];
      uint64_t v9 = &a2[v7];
      uint64_t v10 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v10;
      swift_bridgeObjectRetain();
      goto LABEL_32;
    case 1u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v209 = *(void *)(v11 - 8);
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
      v12(a1, a2, v11);
      uint64_t v13 = (int *)type metadata accessor for CustodianRecord();
      uint64_t v208 = v12;
      v12(&a1[v13[5]], &a2[v13[5]], v11);
      uint64_t v14 = v13[6];
      uint64_t v15 = &a1[v14];
      uint64_t v16 = &a2[v14];
      uint64_t v17 = *((void *)v16 + 1);
      *(void *)uint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v17;
      uint64_t v18 = v13[7];
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      uint64_t v21 = *((void *)v20 + 1);
      *(void *)uint64_t v19 = *(void *)v20;
      *((void *)v19 + 1) = v21;
      uint64_t v22 = v13[8];
      uint64_t v23 = &a1[v22];
      uint64_t v24 = &a2[v22];
      uint64_t v25 = *((void *)v24 + 1);
      *(void *)uint64_t v23 = *(void *)v24;
      *((void *)v23 + 1) = v25;
      *(void *)&a1[v13[9]] = *(void *)&a2[v13[9]];
      uint64_t v26 = v13[10];
      uint64_t v27 = &a1[v26];
      uint64_t v28 = (uint64_t *)&a2[v26];
      unint64_t v29 = *(void *)&a2[v26 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v29 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
      }
      else
      {
        uint64_t v109 = *v28;
        sub_100013140(*v28, v29);
        *(void *)uint64_t v27 = v109;
        *((void *)v27 + 1) = v29;
      }
      uint64_t v110 = v13[11];
      id v111 = (uint64_t *)&a1[v110];
      uint64_t v112 = (uint64_t *)&a2[v110];
      uint64_t v113 = *v112;
      unint64_t v114 = v112[1];
      sub_100013140(*v112, v114);
      *id v111 = v113;
      v111[1] = v114;
      a1[v13[12]] = a2[v13[12]];
      uint64_t v115 = v13[13];
      uint64_t v116 = &a1[v115];
      unint64_t v117 = &a2[v115];
      uint64_t v118 = *((void *)v117 + 1);
      *(void *)uint64_t v116 = *(void *)v117;
      *((void *)v116 + 1) = v118;
      uint64_t v119 = v13[14];
      uint64_t v120 = &a1[v119];
      uint64_t v121 = &a2[v119];
      uint64_t v122 = *((void *)v121 + 1);
      *(void *)uint64_t v120 = *(void *)v121;
      *((void *)v120 + 1) = v122;
      uint64_t v123 = v13[15];
      uint64_t v124 = &a1[v123];
      uint64_t v125 = &a2[v123];
      *(void *)uint64_t v124 = *(void *)v125;
      v124[8] = v125[8];
      uint64_t v126 = v13[16];
      uint64_t v127 = &a1[v126];
      uint64_t v128 = &a2[v126];
      uint64_t v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v129(v128, 1, v11)) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 2u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v209 = *(void *)(v11 - 8);
      uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
      v30(a1, a2, v11);
      uint64_t v31 = (int *)type metadata accessor for CustodianRecord();
      uint64_t v208 = v30;
      v30(&a1[v31[5]], &a2[v31[5]], v11);
      uint64_t v32 = v31[6];
      uint64_t v33 = &a1[v32];
      uint64_t v34 = &a2[v32];
      uint64_t v35 = *((void *)v34 + 1);
      *(void *)uint64_t v33 = *(void *)v34;
      *((void *)v33 + 1) = v35;
      uint64_t v36 = v31[7];
      uint64_t v37 = &a1[v36];
      uint64_t v38 = &a2[v36];
      uint64_t v39 = *((void *)v38 + 1);
      *(void *)uint64_t v37 = *(void *)v38;
      *((void *)v37 + 1) = v39;
      uint64_t v40 = v31[8];
      uint64_t v41 = &a1[v40];
      uint64_t v42 = &a2[v40];
      uint64_t v43 = *((void *)v42 + 1);
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = v43;
      *(void *)&a1[v31[9]] = *(void *)&a2[v31[9]];
      uint64_t v44 = v31[10];
      uint64_t v45 = &a1[v44];
      uint64_t v46 = (uint64_t *)&a2[v44];
      unint64_t v47 = *(void *)&a2[v44 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
      }
      else
      {
        uint64_t v130 = *v46;
        sub_100013140(*v46, v47);
        *(void *)uint64_t v45 = v130;
        *((void *)v45 + 1) = v47;
      }
      uint64_t v131 = v31[11];
      uint64_t v132 = (uint64_t *)&a1[v131];
      uint64_t v133 = (uint64_t *)&a2[v131];
      uint64_t v134 = *v133;
      unint64_t v135 = v133[1];
      sub_100013140(*v133, v135);
      *uint64_t v132 = v134;
      v132[1] = v135;
      a1[v31[12]] = a2[v31[12]];
      uint64_t v136 = v31[13];
      uint64_t v137 = &a1[v136];
      unint64_t v138 = &a2[v136];
      uint64_t v139 = *((void *)v138 + 1);
      *(void *)uint64_t v137 = *(void *)v138;
      *((void *)v137 + 1) = v139;
      uint64_t v140 = v31[14];
      id v141 = &a1[v140];
      uint64_t v142 = &a2[v140];
      uint64_t v143 = *((void *)v142 + 1);
      *(void *)id v141 = *(void *)v142;
      *((void *)v141 + 1) = v143;
      uint64_t v144 = v31[15];
      uint64_t v145 = &a1[v144];
      uint64_t v146 = &a2[v144];
      *(void *)uint64_t v145 = *(void *)v146;
      v145[8] = v146[8];
      uint64_t v147 = v31[16];
      uint64_t v127 = &a1[v147];
      uint64_t v128 = &a2[v147];
      uint64_t v148 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v148(v128, 1, v11)) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 3u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v209 = *(void *)(v11 - 8);
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
      v48(a1, a2, v11);
      uint64_t v49 = (int *)type metadata accessor for CustodianRecord();
      uint64_t v208 = v48;
      v48(&a1[v49[5]], &a2[v49[5]], v11);
      uint64_t v50 = v49[6];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      uint64_t v53 = *((void *)v52 + 1);
      *(void *)uint64_t v51 = *(void *)v52;
      *((void *)v51 + 1) = v53;
      uint64_t v54 = v49[7];
      uint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)uint64_t v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      uint64_t v58 = v49[8];
      uint64_t v59 = &a1[v58];
      uint64_t v60 = &a2[v58];
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      *(void *)&a1[v49[9]] = *(void *)&a2[v49[9]];
      uint64_t v62 = v49[10];
      uint64_t v63 = &a1[v62];
      uint64_t v64 = (uint64_t *)&a2[v62];
      unint64_t v65 = *(void *)&a2[v62 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v65 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      }
      else
      {
        uint64_t v149 = *v64;
        sub_100013140(*v64, v65);
        *(void *)uint64_t v63 = v149;
        *((void *)v63 + 1) = v65;
      }
      uint64_t v150 = v49[11];
      char v151 = (uint64_t *)&a1[v150];
      uint64_t v152 = (uint64_t *)&a2[v150];
      uint64_t v153 = *v152;
      unint64_t v154 = v152[1];
      sub_100013140(*v152, v154);
      *char v151 = v153;
      v151[1] = v154;
      a1[v49[12]] = a2[v49[12]];
      uint64_t v155 = v49[13];
      uint64_t v156 = &a1[v155];
      unint64_t v157 = &a2[v155];
      uint64_t v158 = *((void *)v157 + 1);
      *(void *)uint64_t v156 = *(void *)v157;
      *((void *)v156 + 1) = v158;
      uint64_t v159 = v49[14];
      uint64_t v160 = &a1[v159];
      uint64_t v161 = &a2[v159];
      uint64_t v162 = *((void *)v161 + 1);
      *(void *)uint64_t v160 = *(void *)v161;
      *((void *)v160 + 1) = v162;
      uint64_t v163 = v49[15];
      uint64_t v164 = &a1[v163];
      uint64_t v165 = &a2[v163];
      *(void *)uint64_t v164 = *(void *)v165;
      v164[8] = v165[8];
      uint64_t v166 = v49[16];
      uint64_t v127 = &a1[v166];
      uint64_t v128 = &a2[v166];
      uint64_t v167 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v167(v128, 1, v11)) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 4u:
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRetain();
      goto LABEL_32;
    case 5u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v209 = *(void *)(v11 - 8);
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
      v66(a1, a2, v11);
      uint64_t v67 = (int *)type metadata accessor for CustodianRecord();
      uint64_t v208 = v66;
      v66(&a1[v67[5]], &a2[v67[5]], v11);
      uint64_t v68 = v67[6];
      uint64_t v69 = &a1[v68];
      id v70 = &a2[v68];
      uint64_t v71 = *((void *)v70 + 1);
      *(void *)uint64_t v69 = *(void *)v70;
      *((void *)v69 + 1) = v71;
      uint64_t v72 = v67[7];
      uint64_t v73 = &a1[v72];
      uint64_t v74 = &a2[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = v67[8];
      uint64_t v77 = &a1[v76];
      uint64_t v78 = &a2[v76];
      uint64_t v79 = *((void *)v78 + 1);
      *(void *)uint64_t v77 = *(void *)v78;
      *((void *)v77 + 1) = v79;
      *(void *)&a1[v67[9]] = *(void *)&a2[v67[9]];
      uint64_t v80 = v67[10];
      NSString v81 = &a1[v80];
      uint64_t v82 = (uint64_t *)&a2[v80];
      unint64_t v83 = *(void *)&a2[v80 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v83 >> 60 == 15)
      {
        *(_OWORD *)NSString v81 = *(_OWORD *)v82;
      }
      else
      {
        uint64_t v168 = *v82;
        sub_100013140(*v82, v83);
        *(void *)NSString v81 = v168;
        *((void *)v81 + 1) = v83;
      }
      uint64_t v169 = v67[11];
      uint64_t v170 = (uint64_t *)&a1[v169];
      uint64_t v171 = (uint64_t *)&a2[v169];
      uint64_t v172 = *v171;
      unint64_t v173 = v171[1];
      sub_100013140(*v171, v173);
      *uint64_t v170 = v172;
      v170[1] = v173;
      a1[v67[12]] = a2[v67[12]];
      uint64_t v174 = v67[13];
      uint64_t v175 = &a1[v174];
      unint64_t v176 = &a2[v174];
      uint64_t v177 = *((void *)v176 + 1);
      *(void *)uint64_t v175 = *(void *)v176;
      *((void *)v175 + 1) = v177;
      uint64_t v178 = v67[14];
      uint64_t v179 = &a1[v178];
      uint64_t v180 = &a2[v178];
      uint64_t v181 = *((void *)v180 + 1);
      *(void *)uint64_t v179 = *(void *)v180;
      *((void *)v179 + 1) = v181;
      uint64_t v182 = v67[15];
      uint64_t v183 = &a1[v182];
      uint64_t v184 = &a2[v182];
      *(void *)uint64_t v183 = *(void *)v184;
      v183[8] = v184[8];
      uint64_t v185 = v67[16];
      uint64_t v127 = &a1[v185];
      uint64_t v128 = &a2[v185];
      uint64_t v186 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v186(v128, 1, v11)) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 6u:
      uint64_t v11 = type metadata accessor for UUID();
      uint64_t v209 = *(void *)(v11 - 8);
      id v84 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
      v84(a1, a2, v11);
      NSString v85 = (int *)type metadata accessor for CustodianRecord();
      uint64_t v208 = v84;
      v84(&a1[v85[5]], &a2[v85[5]], v11);
      uint64_t v86 = v85[6];
      id v87 = &a1[v86];
      uint64_t v88 = &a2[v86];
      uint64_t v89 = *((void *)v88 + 1);
      *(void *)id v87 = *(void *)v88;
      *((void *)v87 + 1) = v89;
      uint64_t v90 = v85[7];
      uint64_t v91 = &a1[v90];
      uint64_t v92 = &a2[v90];
      uint64_t v93 = *((void *)v92 + 1);
      *(void *)uint64_t v91 = *(void *)v92;
      *((void *)v91 + 1) = v93;
      uint64_t v94 = v85[8];
      os_log_type_t v95 = &a1[v94];
      uint64_t v96 = &a2[v94];
      uint64_t v97 = *((void *)v96 + 1);
      *(void *)os_log_type_t v95 = *(void *)v96;
      *((void *)v95 + 1) = v97;
      *(void *)&a1[v85[9]] = *(void *)&a2[v85[9]];
      uint64_t v98 = v85[10];
      uint64_t v99 = &a1[v98];
      uint64_t v100 = (uint64_t *)&a2[v98];
      unint64_t v101 = *(void *)&a2[v98 + 8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v101 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
      }
      else
      {
        uint64_t v188 = *v100;
        sub_100013140(*v100, v101);
        *(void *)uint64_t v99 = v188;
        *((void *)v99 + 1) = v101;
      }
      uint64_t v189 = v85[11];
      uint64_t v190 = (uint64_t *)&a1[v189];
      uint64_t v191 = (uint64_t *)&a2[v189];
      uint64_t v192 = *v191;
      unint64_t v193 = v191[1];
      sub_100013140(*v191, v193);
      *uint64_t v190 = v192;
      v190[1] = v193;
      a1[v85[12]] = a2[v85[12]];
      uint64_t v194 = v85[13];
      unint64_t v195 = &a1[v194];
      uint64_t v196 = &a2[v194];
      uint64_t v197 = *((void *)v196 + 1);
      *(void *)unint64_t v195 = *(void *)v196;
      *((void *)v195 + 1) = v197;
      uint64_t v198 = v85[14];
      uint64_t v199 = &a1[v198];
      uint64_t v200 = &a2[v198];
      uint64_t v201 = *((void *)v200 + 1);
      *(void *)uint64_t v199 = *(void *)v200;
      *((void *)v199 + 1) = v201;
      uint64_t v202 = v85[15];
      uint64_t v203 = &a1[v202];
      uint64_t v204 = &a2[v202];
      *(void *)uint64_t v203 = *(void *)v204;
      v203[8] = v204[8];
      uint64_t v205 = v85[16];
      uint64_t v127 = &a1[v205];
      uint64_t v128 = &a2[v205];
      uint64_t v206 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v206(v128, 1, v11))
      {
LABEL_28:
        uint64_t v187 = sub_100009F04((uint64_t *)&unk_100321CE0);
        memcpy(v127, v128, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
LABEL_31:
        v208(v127, v128, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v209 + 56))(v127, 0, 1, v11);
      }
      goto LABEL_32;
    case 8u:
    case 9u:
      uint64_t v102 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(a1, a2, v102);
      uint64_t v103 = *(int *)(sub_100009F04(&qword_10032B150) + 48);
      unint64_t v104 = &a1[v103];
      uint64_t v105 = &a2[v103];
      uint64_t v106 = *((void *)v105 + 1);
      *(void *)unint64_t v104 = *(void *)v105;
      *((void *)v104 + 1) = v106;
      swift_bridgeObjectRetain();
      goto LABEL_32;
    case 0xAu:
      uint64_t v107 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v108 = v107;
LABEL_32:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1001C5D4C(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000F4530((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(sub_100009F04((uint64_t *)&unk_10032B160) + 48);
        uint64_t v8 = &a1[v7];
        uint64_t v9 = &a2[v7];
        *(void *)uint64_t v8 = *(void *)v9;
        *((void *)v8 + 1) = *((void *)v9 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_34;
      case 1u:
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v187 = *(void *)(v10 - 8);
        uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
        v11(a1, a2, v10);
        uint64_t v12 = (int *)type metadata accessor for CustodianRecord();
        uint64_t v186 = v11;
        v11(&a1[v12[5]], &a2[v12[5]], v10);
        uint64_t v13 = v12[6];
        uint64_t v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        *(void *)uint64_t v14 = *(void *)v15;
        *((void *)v14 + 1) = *((void *)v15 + 1);
        uint64_t v16 = v12[7];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        *(void *)uint64_t v17 = *(void *)v18;
        *((void *)v17 + 1) = *((void *)v18 + 1);
        uint64_t v19 = v12[8];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        *(void *)uint64_t v20 = *(void *)v21;
        *((void *)v20 + 1) = *((void *)v21 + 1);
        *(void *)&a1[v12[9]] = *(void *)&a2[v12[9]];
        uint64_t v22 = v12[10];
        uint64_t v23 = &a1[v22];
        uint64_t v24 = (uint64_t *)&a2[v22];
        unint64_t v25 = *(void *)&a2[v22 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v25 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
        }
        else
        {
          uint64_t v92 = *v24;
          sub_100013140(*v24, v25);
          *(void *)uint64_t v23 = v92;
          *((void *)v23 + 1) = v25;
        }
        uint64_t v93 = v12[11];
        uint64_t v94 = (uint64_t *)&a1[v93];
        os_log_type_t v95 = (uint64_t *)&a2[v93];
        uint64_t v96 = *v95;
        unint64_t v97 = v95[1];
        sub_100013140(*v95, v97);
        *uint64_t v94 = v96;
        v94[1] = v97;
        a1[v12[12]] = a2[v12[12]];
        uint64_t v98 = v12[13];
        uint64_t v99 = &a1[v98];
        uint64_t v100 = &a2[v98];
        *(void *)uint64_t v99 = *(void *)v100;
        *((void *)v99 + 1) = *((void *)v100 + 1);
        uint64_t v101 = v12[14];
        uint64_t v102 = &a1[v101];
        uint64_t v103 = &a2[v101];
        *(void *)uint64_t v102 = *(void *)v103;
        *((void *)v102 + 1) = *((void *)v103 + 1);
        uint64_t v104 = v12[15];
        uint64_t v105 = &a1[v104];
        uint64_t v106 = &a2[v104];
        uint64_t v107 = *(void *)v106;
        v105[8] = v106[8];
        *(void *)uint64_t v105 = v107;
        uint64_t v108 = v12[16];
        uint64_t v109 = &a1[v108];
        uint64_t v110 = &a2[v108];
        id v111 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v111(v110, 1, v10)) {
          goto LABEL_32;
        }
        goto LABEL_33;
      case 2u:
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v187 = *(void *)(v10 - 8);
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
        v26(a1, a2, v10);
        uint64_t v27 = (int *)type metadata accessor for CustodianRecord();
        uint64_t v186 = v26;
        v26(&a1[v27[5]], &a2[v27[5]], v10);
        uint64_t v28 = v27[6];
        unint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        *(void *)unint64_t v29 = *(void *)v30;
        *((void *)v29 + 1) = *((void *)v30 + 1);
        uint64_t v31 = v27[7];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = &a2[v31];
        *(void *)uint64_t v32 = *(void *)v33;
        *((void *)v32 + 1) = *((void *)v33 + 1);
        uint64_t v34 = v27[8];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *(void *)uint64_t v35 = *(void *)v36;
        *((void *)v35 + 1) = *((void *)v36 + 1);
        *(void *)&a1[v27[9]] = *(void *)&a2[v27[9]];
        uint64_t v37 = v27[10];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = (uint64_t *)&a2[v37];
        unint64_t v40 = *(void *)&a2[v37 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v40 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
        }
        else
        {
          uint64_t v112 = *v39;
          sub_100013140(*v39, v40);
          *(void *)uint64_t v38 = v112;
          *((void *)v38 + 1) = v40;
        }
        uint64_t v113 = v27[11];
        unint64_t v114 = (uint64_t *)&a1[v113];
        uint64_t v115 = (uint64_t *)&a2[v113];
        uint64_t v116 = *v115;
        unint64_t v117 = v115[1];
        sub_100013140(*v115, v117);
        uint64_t *v114 = v116;
        v114[1] = v117;
        a1[v27[12]] = a2[v27[12]];
        uint64_t v118 = v27[13];
        uint64_t v119 = &a1[v118];
        uint64_t v120 = &a2[v118];
        *(void *)uint64_t v119 = *(void *)v120;
        *((void *)v119 + 1) = *((void *)v120 + 1);
        uint64_t v121 = v27[14];
        uint64_t v122 = &a1[v121];
        uint64_t v123 = &a2[v121];
        *(void *)uint64_t v122 = *(void *)v123;
        *((void *)v122 + 1) = *((void *)v123 + 1);
        uint64_t v124 = v27[15];
        uint64_t v125 = &a1[v124];
        uint64_t v126 = &a2[v124];
        uint64_t v127 = *(void *)v126;
        v125[8] = v126[8];
        *(void *)uint64_t v125 = v127;
        uint64_t v128 = v27[16];
        uint64_t v109 = &a1[v128];
        uint64_t v110 = &a2[v128];
        uint64_t v129 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v129(v110, 1, v10)) {
          goto LABEL_32;
        }
        goto LABEL_33;
      case 3u:
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v187 = *(void *)(v10 - 8);
        uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
        v41(a1, a2, v10);
        uint64_t v42 = (int *)type metadata accessor for CustodianRecord();
        uint64_t v186 = v41;
        v41(&a1[v42[5]], &a2[v42[5]], v10);
        uint64_t v43 = v42[6];
        uint64_t v44 = &a1[v43];
        uint64_t v45 = &a2[v43];
        *(void *)uint64_t v44 = *(void *)v45;
        *((void *)v44 + 1) = *((void *)v45 + 1);
        uint64_t v46 = v42[7];
        unint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        *(void *)unint64_t v47 = *(void *)v48;
        *((void *)v47 + 1) = *((void *)v48 + 1);
        uint64_t v49 = v42[8];
        uint64_t v50 = &a1[v49];
        uint64_t v51 = &a2[v49];
        *(void *)uint64_t v50 = *(void *)v51;
        *((void *)v50 + 1) = *((void *)v51 + 1);
        *(void *)&a1[v42[9]] = *(void *)&a2[v42[9]];
        uint64_t v52 = v42[10];
        uint64_t v53 = &a1[v52];
        uint64_t v54 = (uint64_t *)&a2[v52];
        unint64_t v55 = *(void *)&a2[v52 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v55 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
        }
        else
        {
          uint64_t v130 = *v54;
          sub_100013140(*v54, v55);
          *(void *)uint64_t v53 = v130;
          *((void *)v53 + 1) = v55;
        }
        uint64_t v131 = v42[11];
        uint64_t v132 = (uint64_t *)&a1[v131];
        uint64_t v133 = (uint64_t *)&a2[v131];
        uint64_t v134 = *v133;
        unint64_t v135 = v133[1];
        sub_100013140(*v133, v135);
        *uint64_t v132 = v134;
        v132[1] = v135;
        a1[v42[12]] = a2[v42[12]];
        uint64_t v136 = v42[13];
        uint64_t v137 = &a1[v136];
        unint64_t v138 = &a2[v136];
        *(void *)uint64_t v137 = *(void *)v138;
        *((void *)v137 + 1) = *((void *)v138 + 1);
        uint64_t v139 = v42[14];
        uint64_t v140 = &a1[v139];
        id v141 = &a2[v139];
        *(void *)uint64_t v140 = *(void *)v141;
        *((void *)v140 + 1) = *((void *)v141 + 1);
        uint64_t v142 = v42[15];
        uint64_t v143 = &a1[v142];
        uint64_t v144 = &a2[v142];
        uint64_t v145 = *(void *)v144;
        v143[8] = v144[8];
        *(void *)uint64_t v143 = v145;
        uint64_t v146 = v42[16];
        uint64_t v109 = &a1[v146];
        uint64_t v110 = &a2[v146];
        uint64_t v147 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v147(v110, 1, v10)) {
          goto LABEL_32;
        }
        goto LABEL_33;
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_bridgeObjectRetain();
        goto LABEL_34;
      case 5u:
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v187 = *(void *)(v10 - 8);
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
        v56(a1, a2, v10);
        uint64_t v57 = (int *)type metadata accessor for CustodianRecord();
        uint64_t v186 = v56;
        v56(&a1[v57[5]], &a2[v57[5]], v10);
        uint64_t v58 = v57[6];
        uint64_t v59 = &a1[v58];
        uint64_t v60 = &a2[v58];
        *(void *)uint64_t v59 = *(void *)v60;
        *((void *)v59 + 1) = *((void *)v60 + 1);
        uint64_t v61 = v57[7];
        uint64_t v62 = &a1[v61];
        uint64_t v63 = &a2[v61];
        *(void *)uint64_t v62 = *(void *)v63;
        *((void *)v62 + 1) = *((void *)v63 + 1);
        uint64_t v64 = v57[8];
        unint64_t v65 = &a1[v64];
        uint64_t v66 = &a2[v64];
        *(void *)unint64_t v65 = *(void *)v66;
        *((void *)v65 + 1) = *((void *)v66 + 1);
        *(void *)&a1[v57[9]] = *(void *)&a2[v57[9]];
        uint64_t v67 = v57[10];
        uint64_t v68 = &a1[v67];
        uint64_t v69 = (uint64_t *)&a2[v67];
        unint64_t v70 = *(void *)&a2[v67 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v70 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
        }
        else
        {
          uint64_t v148 = *v69;
          sub_100013140(*v69, v70);
          *(void *)uint64_t v68 = v148;
          *((void *)v68 + 1) = v70;
        }
        uint64_t v149 = v57[11];
        uint64_t v150 = (uint64_t *)&a1[v149];
        char v151 = (uint64_t *)&a2[v149];
        uint64_t v152 = *v151;
        unint64_t v153 = v151[1];
        sub_100013140(*v151, v153);
        *uint64_t v150 = v152;
        v150[1] = v153;
        a1[v57[12]] = a2[v57[12]];
        uint64_t v154 = v57[13];
        uint64_t v155 = &a1[v154];
        uint64_t v156 = &a2[v154];
        *(void *)uint64_t v155 = *(void *)v156;
        *((void *)v155 + 1) = *((void *)v156 + 1);
        uint64_t v157 = v57[14];
        uint64_t v158 = &a1[v157];
        uint64_t v159 = &a2[v157];
        *(void *)uint64_t v158 = *(void *)v159;
        *((void *)v158 + 1) = *((void *)v159 + 1);
        uint64_t v160 = v57[15];
        uint64_t v161 = &a1[v160];
        uint64_t v162 = &a2[v160];
        uint64_t v163 = *(void *)v162;
        v161[8] = v162[8];
        *(void *)uint64_t v161 = v163;
        uint64_t v164 = v57[16];
        uint64_t v109 = &a1[v164];
        uint64_t v110 = &a2[v164];
        uint64_t v165 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v165(v110, 1, v10)) {
          goto LABEL_32;
        }
        goto LABEL_33;
      case 6u:
        uint64_t v10 = type metadata accessor for UUID();
        uint64_t v187 = *(void *)(v10 - 8);
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v187 + 16);
        v71(a1, a2, v10);
        uint64_t v72 = (int *)type metadata accessor for CustodianRecord();
        uint64_t v186 = v71;
        v71(&a1[v72[5]], &a2[v72[5]], v10);
        uint64_t v73 = v72[6];
        uint64_t v74 = &a1[v73];
        uint64_t v75 = &a2[v73];
        *(void *)uint64_t v74 = *(void *)v75;
        *((void *)v74 + 1) = *((void *)v75 + 1);
        uint64_t v76 = v72[7];
        uint64_t v77 = &a1[v76];
        uint64_t v78 = &a2[v76];
        *(void *)uint64_t v77 = *(void *)v78;
        *((void *)v77 + 1) = *((void *)v78 + 1);
        uint64_t v79 = v72[8];
        uint64_t v80 = &a1[v79];
        NSString v81 = &a2[v79];
        *(void *)uint64_t v80 = *(void *)v81;
        *((void *)v80 + 1) = *((void *)v81 + 1);
        *(void *)&a1[v72[9]] = *(void *)&a2[v72[9]];
        uint64_t v82 = v72[10];
        unint64_t v83 = &a1[v82];
        id v84 = (uint64_t *)&a2[v82];
        unint64_t v85 = *(void *)&a2[v82 + 8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v85 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v83 = *(_OWORD *)v84;
        }
        else
        {
          uint64_t v166 = *v84;
          sub_100013140(*v84, v85);
          *(void *)unint64_t v83 = v166;
          *((void *)v83 + 1) = v85;
        }
        uint64_t v167 = v72[11];
        uint64_t v168 = (uint64_t *)&a1[v167];
        uint64_t v169 = (uint64_t *)&a2[v167];
        uint64_t v170 = *v169;
        unint64_t v171 = v169[1];
        sub_100013140(*v169, v171);
        *uint64_t v168 = v170;
        v168[1] = v171;
        a1[v72[12]] = a2[v72[12]];
        uint64_t v172 = v72[13];
        unint64_t v173 = &a1[v172];
        uint64_t v174 = &a2[v172];
        *(void *)unint64_t v173 = *(void *)v174;
        *((void *)v173 + 1) = *((void *)v174 + 1);
        uint64_t v175 = v72[14];
        unint64_t v176 = &a1[v175];
        uint64_t v177 = &a2[v175];
        *(void *)unint64_t v176 = *(void *)v177;
        *((void *)v176 + 1) = *((void *)v177 + 1);
        uint64_t v178 = v72[15];
        uint64_t v179 = &a1[v178];
        uint64_t v180 = &a2[v178];
        uint64_t v181 = *(void *)v180;
        v179[8] = v180[8];
        *(void *)uint64_t v179 = v181;
        uint64_t v182 = v72[16];
        uint64_t v109 = &a1[v182];
        uint64_t v110 = &a2[v182];
        uint64_t v183 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v183(v110, 1, v10))
        {
LABEL_32:
          uint64_t v184 = sub_100009F04((uint64_t *)&unk_100321CE0);
          memcpy(v109, v110, *(void *)(*(void *)(v184 - 8) + 64));
        }
        else
        {
LABEL_33:
          v186(v109, v110, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v187 + 56))(v109, 0, 1, v10);
        }
        goto LABEL_34;
      case 8u:
      case 9u:
        uint64_t v86 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(a1, a2, v86);
        uint64_t v87 = *(int *)(sub_100009F04(&qword_10032B150) + 48);
        uint64_t v88 = &a1[v87];
        uint64_t v89 = &a2[v87];
        *(void *)uint64_t v88 = *(void *)v89;
        *((void *)v88 + 1) = *((void *)v89 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_34;
      case 0xAu:
        uint64_t v90 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v91 = v90;
LABEL_34:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_1001C6C80(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B160);
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      goto LABEL_16;
    case 1u:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v10(a1, a2, v8);
      uint64_t v11 = (int *)type metadata accessor for CustodianRecord();
      v10(&a1[v11[5]], &a2[v11[5]], v8);
      *(_OWORD *)&a1[v11[6]] = *(_OWORD *)&a2[v11[6]];
      *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
      *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
      *(void *)&a1[v11[9]] = *(void *)&a2[v11[9]];
      *(_OWORD *)&a1[v11[10]] = *(_OWORD *)&a2[v11[10]];
      *(_OWORD *)&a1[v11[11]] = *(_OWORD *)&a2[v11[11]];
      a1[v11[12]] = a2[v11[12]];
      *(_OWORD *)&a1[v11[13]] = *(_OWORD *)&a2[v11[13]];
      *(_OWORD *)&a1[v11[14]] = *(_OWORD *)&a2[v11[14]];
      uint64_t v12 = v11[15];
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *(void *)uint64_t v13 = *(void *)v14;
      v13[8] = v14[8];
      uint64_t v15 = v11[16];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 2u:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v10(a1, a2, v8);
      uint64_t v18 = (int *)type metadata accessor for CustodianRecord();
      v10(&a1[v18[5]], &a2[v18[5]], v8);
      *(_OWORD *)&a1[v18[6]] = *(_OWORD *)&a2[v18[6]];
      *(_OWORD *)&a1[v18[7]] = *(_OWORD *)&a2[v18[7]];
      *(_OWORD *)&a1[v18[8]] = *(_OWORD *)&a2[v18[8]];
      *(void *)&a1[v18[9]] = *(void *)&a2[v18[9]];
      *(_OWORD *)&a1[v18[10]] = *(_OWORD *)&a2[v18[10]];
      *(_OWORD *)&a1[v18[11]] = *(_OWORD *)&a2[v18[11]];
      a1[v18[12]] = a2[v18[12]];
      *(_OWORD *)&a1[v18[13]] = *(_OWORD *)&a2[v18[13]];
      *(_OWORD *)&a1[v18[14]] = *(_OWORD *)&a2[v18[14]];
      uint64_t v19 = v18[15];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
      uint64_t v22 = v18[16];
      uint64_t v16 = &a1[v22];
      uint64_t v17 = &a2[v22];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 3u:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v10(a1, a2, v8);
      uint64_t v23 = (int *)type metadata accessor for CustodianRecord();
      v10(&a1[v23[5]], &a2[v23[5]], v8);
      *(_OWORD *)&a1[v23[6]] = *(_OWORD *)&a2[v23[6]];
      *(_OWORD *)&a1[v23[7]] = *(_OWORD *)&a2[v23[7]];
      *(_OWORD *)&a1[v23[8]] = *(_OWORD *)&a2[v23[8]];
      *(void *)&a1[v23[9]] = *(void *)&a2[v23[9]];
      *(_OWORD *)&a1[v23[10]] = *(_OWORD *)&a2[v23[10]];
      *(_OWORD *)&a1[v23[11]] = *(_OWORD *)&a2[v23[11]];
      a1[v23[12]] = a2[v23[12]];
      *(_OWORD *)&a1[v23[13]] = *(_OWORD *)&a2[v23[13]];
      *(_OWORD *)&a1[v23[14]] = *(_OWORD *)&a2[v23[14]];
      uint64_t v24 = v23[15];
      unint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      *(void *)unint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      uint64_t v27 = v23[16];
      uint64_t v16 = &a1[v27];
      uint64_t v17 = &a2[v27];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 5u:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v10(a1, a2, v8);
      uint64_t v28 = (int *)type metadata accessor for CustodianRecord();
      v10(&a1[v28[5]], &a2[v28[5]], v8);
      *(_OWORD *)&a1[v28[6]] = *(_OWORD *)&a2[v28[6]];
      *(_OWORD *)&a1[v28[7]] = *(_OWORD *)&a2[v28[7]];
      *(_OWORD *)&a1[v28[8]] = *(_OWORD *)&a2[v28[8]];
      *(void *)&a1[v28[9]] = *(void *)&a2[v28[9]];
      *(_OWORD *)&a1[v28[10]] = *(_OWORD *)&a2[v28[10]];
      *(_OWORD *)&a1[v28[11]] = *(_OWORD *)&a2[v28[11]];
      a1[v28[12]] = a2[v28[12]];
      *(_OWORD *)&a1[v28[13]] = *(_OWORD *)&a2[v28[13]];
      *(_OWORD *)&a1[v28[14]] = *(_OWORD *)&a2[v28[14]];
      uint64_t v29 = v28[15];
      uint64_t v30 = &a1[v29];
      uint64_t v31 = &a2[v29];
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
      uint64_t v32 = v28[16];
      uint64_t v16 = &a1[v32];
      uint64_t v17 = &a2[v32];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
        goto LABEL_11;
      }
      goto LABEL_15;
    case 6u:
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v10(a1, a2, v8);
      uint64_t v34 = (int *)type metadata accessor for CustodianRecord();
      v10(&a1[v34[5]], &a2[v34[5]], v8);
      *(_OWORD *)&a1[v34[6]] = *(_OWORD *)&a2[v34[6]];
      *(_OWORD *)&a1[v34[7]] = *(_OWORD *)&a2[v34[7]];
      *(_OWORD *)&a1[v34[8]] = *(_OWORD *)&a2[v34[8]];
      *(void *)&a1[v34[9]] = *(void *)&a2[v34[9]];
      *(_OWORD *)&a1[v34[10]] = *(_OWORD *)&a2[v34[10]];
      *(_OWORD *)&a1[v34[11]] = *(_OWORD *)&a2[v34[11]];
      a1[v34[12]] = a2[v34[12]];
      *(_OWORD *)&a1[v34[13]] = *(_OWORD *)&a2[v34[13]];
      *(_OWORD *)&a1[v34[14]] = *(_OWORD *)&a2[v34[14]];
      uint64_t v35 = v34[15];
      uint64_t v36 = &a1[v35];
      uint64_t v37 = &a2[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      uint64_t v38 = v34[16];
      uint64_t v16 = &a1[v38];
      uint64_t v17 = &a2[v38];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8))
      {
LABEL_11:
        uint64_t v33 = sub_100009F04((uint64_t *)&unk_100321CE0);
        memcpy(v16, v17, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
LABEL_15:
        v10(v16, v17, v8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
      }
      goto LABEL_16;
    case 8u:
    case 9u:
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(a1, a2, v39);
      uint64_t v40 = sub_100009F04(&qword_10032B150);
      *(_OWORD *)&a1[*(int *)(v40 + 48)] = *(_OWORD *)&a2[*(int *)(v40 + 48)];
LABEL_16:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_1001C7748(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000F4530((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B160);
        *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
        goto LABEL_17;
      case 1u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v10(a1, a2, v8);
        uint64_t v11 = (int *)type metadata accessor for CustodianRecord();
        v10(&a1[v11[5]], &a2[v11[5]], v8);
        *(_OWORD *)&a1[v11[6]] = *(_OWORD *)&a2[v11[6]];
        *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
        *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
        *(void *)&a1[v11[9]] = *(void *)&a2[v11[9]];
        *(_OWORD *)&a1[v11[10]] = *(_OWORD *)&a2[v11[10]];
        *(_OWORD *)&a1[v11[11]] = *(_OWORD *)&a2[v11[11]];
        a1[v11[12]] = a2[v11[12]];
        *(_OWORD *)&a1[v11[13]] = *(_OWORD *)&a2[v11[13]];
        *(_OWORD *)&a1[v11[14]] = *(_OWORD *)&a2[v11[14]];
        uint64_t v12 = v11[15];
        uint64_t v13 = &a1[v12];
        uint64_t v14 = &a2[v12];
        *(void *)uint64_t v13 = *(void *)v14;
        v13[8] = v14[8];
        uint64_t v15 = v11[16];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v10(a1, a2, v8);
        uint64_t v18 = (int *)type metadata accessor for CustodianRecord();
        v10(&a1[v18[5]], &a2[v18[5]], v8);
        *(_OWORD *)&a1[v18[6]] = *(_OWORD *)&a2[v18[6]];
        *(_OWORD *)&a1[v18[7]] = *(_OWORD *)&a2[v18[7]];
        *(_OWORD *)&a1[v18[8]] = *(_OWORD *)&a2[v18[8]];
        *(void *)&a1[v18[9]] = *(void *)&a2[v18[9]];
        *(_OWORD *)&a1[v18[10]] = *(_OWORD *)&a2[v18[10]];
        *(_OWORD *)&a1[v18[11]] = *(_OWORD *)&a2[v18[11]];
        a1[v18[12]] = a2[v18[12]];
        *(_OWORD *)&a1[v18[13]] = *(_OWORD *)&a2[v18[13]];
        *(_OWORD *)&a1[v18[14]] = *(_OWORD *)&a2[v18[14]];
        uint64_t v19 = v18[15];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        *(void *)uint64_t v20 = *(void *)v21;
        v20[8] = v21[8];
        uint64_t v22 = v18[16];
        uint64_t v16 = &a1[v22];
        uint64_t v17 = &a2[v22];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 3u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v10(a1, a2, v8);
        uint64_t v23 = (int *)type metadata accessor for CustodianRecord();
        v10(&a1[v23[5]], &a2[v23[5]], v8);
        *(_OWORD *)&a1[v23[6]] = *(_OWORD *)&a2[v23[6]];
        *(_OWORD *)&a1[v23[7]] = *(_OWORD *)&a2[v23[7]];
        *(_OWORD *)&a1[v23[8]] = *(_OWORD *)&a2[v23[8]];
        *(void *)&a1[v23[9]] = *(void *)&a2[v23[9]];
        *(_OWORD *)&a1[v23[10]] = *(_OWORD *)&a2[v23[10]];
        *(_OWORD *)&a1[v23[11]] = *(_OWORD *)&a2[v23[11]];
        a1[v23[12]] = a2[v23[12]];
        *(_OWORD *)&a1[v23[13]] = *(_OWORD *)&a2[v23[13]];
        *(_OWORD *)&a1[v23[14]] = *(_OWORD *)&a2[v23[14]];
        uint64_t v24 = v23[15];
        unint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        *(void *)unint64_t v25 = *(void *)v26;
        v25[8] = v26[8];
        uint64_t v27 = v23[16];
        uint64_t v16 = &a1[v27];
        uint64_t v17 = &a2[v27];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 5u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v10(a1, a2, v8);
        uint64_t v28 = (int *)type metadata accessor for CustodianRecord();
        v10(&a1[v28[5]], &a2[v28[5]], v8);
        *(_OWORD *)&a1[v28[6]] = *(_OWORD *)&a2[v28[6]];
        *(_OWORD *)&a1[v28[7]] = *(_OWORD *)&a2[v28[7]];
        *(_OWORD *)&a1[v28[8]] = *(_OWORD *)&a2[v28[8]];
        *(void *)&a1[v28[9]] = *(void *)&a2[v28[9]];
        *(_OWORD *)&a1[v28[10]] = *(_OWORD *)&a2[v28[10]];
        *(_OWORD *)&a1[v28[11]] = *(_OWORD *)&a2[v28[11]];
        a1[v28[12]] = a2[v28[12]];
        *(_OWORD *)&a1[v28[13]] = *(_OWORD *)&a2[v28[13]];
        *(_OWORD *)&a1[v28[14]] = *(_OWORD *)&a2[v28[14]];
        uint64_t v29 = v28[15];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        *(void *)uint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
        uint64_t v32 = v28[16];
        uint64_t v16 = &a1[v32];
        uint64_t v17 = &a2[v32];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8)) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 6u:
        uint64_t v8 = type metadata accessor for UUID();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v10(a1, a2, v8);
        uint64_t v33 = (int *)type metadata accessor for CustodianRecord();
        v10(&a1[v33[5]], &a2[v33[5]], v8);
        *(_OWORD *)&a1[v33[6]] = *(_OWORD *)&a2[v33[6]];
        *(_OWORD *)&a1[v33[7]] = *(_OWORD *)&a2[v33[7]];
        *(_OWORD *)&a1[v33[8]] = *(_OWORD *)&a2[v33[8]];
        *(void *)&a1[v33[9]] = *(void *)&a2[v33[9]];
        *(_OWORD *)&a1[v33[10]] = *(_OWORD *)&a2[v33[10]];
        *(_OWORD *)&a1[v33[11]] = *(_OWORD *)&a2[v33[11]];
        a1[v33[12]] = a2[v33[12]];
        *(_OWORD *)&a1[v33[13]] = *(_OWORD *)&a2[v33[13]];
        *(_OWORD *)&a1[v33[14]] = *(_OWORD *)&a2[v33[14]];
        uint64_t v34 = v33[15];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *(void *)uint64_t v35 = *(void *)v36;
        v35[8] = v36[8];
        uint64_t v37 = v33[16];
        uint64_t v16 = &a1[v37];
        uint64_t v17 = &a2[v37];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8))
        {
LABEL_14:
          uint64_t v38 = sub_100009F04((uint64_t *)&unk_100321CE0);
          memcpy(v16, v17, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
LABEL_16:
          v10(v16, v17, v8);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
        }
        goto LABEL_17;
      case 8u:
      case 9u:
        uint64_t v39 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(a1, a2, v39);
        uint64_t v40 = sub_100009F04(&qword_10032B150);
        *(_OWORD *)&a1[*(int *)(v40 + 48)] = *(_OWORD *)&a2[*(int *)(v40 + 48)];
LABEL_17:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1001C8234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1001C825C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1001C8288()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1001C8298()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v5;
    uint64_t result = type metadata accessor for CustodianRecord();
    if (v2 <= 0x3F)
    {
      uint64_t v7 = *(void *)(result - 8) + 64;
      uint64_t v8 = v7;
      uint64_t v9 = v7;
      uint64_t v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v11 = v7;
      uint64_t v12 = v7;
      uint64_t v13 = &unk_1002AFEB8;
      swift_getTupleTypeLayout2();
      uint64_t v14 = &v4;
      swift_getTupleTypeLayout2();
      uint64_t v15 = &v3;
      uint64_t v16 = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001C83E0()
{
  return 1;
}

Swift::Int sub_1001C83E8()
{
  return Hasher._finalize()();
}

void sub_1001C842C()
{
}

Swift::Int sub_1001C8454()
{
  return Hasher._finalize()();
}

uint64_t sub_1001C8494()
{
  return 1701869940;
}

uint64_t sub_1001C84A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1001C852C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1001C8538(uint64_t a1)
{
  unint64_t v2 = sub_1001C8CD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C8574(uint64_t a1)
{
  unint64_t v2 = sub_1001C8CD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001C85B0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1001C85C0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_10032B2F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_1001C8CD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = *(unsigned char *)(v2 + 16);
  sub_100029FAC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1001C8708(void *a1)
{
  uint64_t v4 = sub_100009F04(&qword_10032B2E8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001C8CD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    type metadata accessor for CustodianMessage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_100029F58();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    *(unsigned char *)(v1 + 16) = v11;
  }
  sub_100008EA8((uint64_t)a1);
  return v1;
}

uint64_t sub_1001C88A8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CustodianMessage();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1001C8708(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1001C8900(void *a1)
{
  return sub_1001C85C0(a1);
}

uint64_t MessageType.rawValue.getter(char a1)
{
  return qword_1002B0168[a1];
}

BOOL sub_1001C893C(char *a1, char *a2)
{
  return qword_1002B0168[*a1] == qword_1002B0168[*a2];
}

Swift::Int sub_1001C8960()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B0168[v1]);
  return Hasher._finalize()();
}

void sub_1001C89B0()
{
  Hasher._combine(_:)(qword_1002B0168[*v0]);
}

Swift::Int sub_1001C89E8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B0168[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001C8A34@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s13appleaccountd11MessageTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001C8A60(void *a1@<X8>)
{
  *a1 = qword_1002B0168[*v1];
}

uint64_t sub_1001C8A78()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1001C8AD8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t _s13appleaccountd11MessageTypeO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 7) {
    return 5;
  }
  else {
    return (0x4050503020100uLL >> (8 * a1));
  }
}

unint64_t sub_1001C8B54()
{
  unint64_t result = qword_10032B220;
  if (!qword_10032B220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B220);
  }
  return result;
}

uint64_t type metadata accessor for CustodianMessage()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for MessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C8C98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

unint64_t sub_1001C8CD0()
{
  unint64_t result = qword_10032B2F0;
  if (!qword_10032B2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B2F0);
  }
  return result;
}

unint64_t sub_1001C8D24()
{
  unint64_t result = qword_10032B300;
  if (!qword_10032B300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B300);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustodianMessage.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CustodianMessage.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001C8E68);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianMessage.CodingKeys()
{
  return &type metadata for CustodianMessage.CodingKeys;
}

unint64_t sub_1001C8EA4()
{
  unint64_t result = qword_10032B308;
  if (!qword_10032B308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B308);
  }
  return result;
}

unint64_t sub_1001C8EFC()
{
  unint64_t result = qword_10032B310;
  if (!qword_10032B310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B310);
  }
  return result;
}

unint64_t sub_1001C8F54()
{
  unint64_t result = qword_10032B318;
  if (!qword_10032B318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B318);
  }
  return result;
}

void sub_1001C8FA8(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6, void *a7)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v11 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v39 - v18;
  if (a1 && (self, (uint64_t v20 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v21 = (void *)v20;
    id v22 = a1;
    id v23 = [v21 recordID];
    sub_1001D6474(a4, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v24 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v25 = (void *)swift_allocObject();
    uint64_t v26 = v43;
    Swift::String v25[2] = v42;
    void v25[3] = v26;
    v25[4] = a3;
    sub_1001D662C((uint64_t)v19, (uint64_t)v25 + v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    aBlock[4] = (uint64_t)sub_1001D6CB0;
    void aBlock[5] = (uint64_t)v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000C6CC0;
    aBlock[3] = (uint64_t)&unk_1003000C0;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    id v28 = a3;
    swift_release();
    [a7 deleteRecordWithID:v23 completionHandler:v27];
    _Block_release(v27);
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E718);
    sub_1001D6474(a4, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    id v30 = a3;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      aBlock[0] = v41;
      *(_DWORD *)uint64_t v33 = 138412546;
      os_log_t v40 = v31;
      uint64_t v45 = (uint64_t)v30;
      id v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v30;

      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v36 = UUID.uuidString.getter();
      uint64_t v45 = sub_100135190(v36, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      os_log_t v38 = v40;
      _os_log_impl((void *)&_mh_execute_header, v40, v32, "Did not find a CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v33, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001D6A68((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    }
    v42(0);
  }
}

void sub_1001C9434(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6, void *a7)
{
  uint64_t v41 = a5;
  uint64_t v12 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v12 - 8, v15);
  uint64_t v17 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)v40 - v19;
  if (a1 && (self, (uint64_t v21 = swift_dynamicCastObjCClass()) != 0))
  {
    id v22 = (void *)v21;
    id v23 = a1;
    id v24 = [v22 recordID];
    sub_1001D6474(a4, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v25 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v26 = a6;
    uint64_t v27 = (v25 + 40) & ~v25;
    id v28 = (void *)swift_allocObject();
    v28[2] = v41;
    void v28[3] = v26;
    v28[4] = a3;
    sub_1001D662C((uint64_t)v20, (uint64_t)v28 + v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    aBlock[4] = (uint64_t)sub_1001D5394;
    void aBlock[5] = (uint64_t)v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000C6CC0;
    aBlock[3] = (uint64_t)&unk_1002FFDC8;
    uint64_t v29 = _Block_copy(aBlock);
    swift_retain();
    id v30 = a3;
    swift_release();
    [a7 deleteRecordWithID:v24 completionHandler:v29];
    _Block_release(v29);
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E718);
    sub_1001D6474(a4, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    id v32 = a3;
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = (void *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      aBlock[0] = v40[0];
      *(_DWORD *)uint64_t v35 = 138412546;
      uint64_t v43 = (uint64_t)v32;
      v40[1] = a6;
      id v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v32;

      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v38 = UUID.uuidString.getter();
      uint64_t v43 = sub_100135190(v38, v39, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Did not find a CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v35, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001D6A68((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    v41(0);
  }
}

uint64_t sub_1001C98BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v35 = sub_100135190(v18, v19, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error deleting zone share from CloudKit (removeExistingShareIfAny): %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0);
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E718);
    sub_1001D6474(a6, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    id v21 = a5;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = (uint64_t)v21;
      uint64_t v36 = v34;
      *(_DWORD *)uint64_t v25 = 138412546;
      os_log_t v32 = v22;
      int v33 = v24;
      id v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v21;

      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v35 = sub_100135190(v27, v28, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      os_log_t v29 = v32;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v33, "Removed existing CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v25, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001D6A68((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    }
    return a3(1);
  }
}

uint64_t sub_1001C9D6C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v35 = sub_100135190(v19, v20, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error deleting zone share from CloudKit (removeExistingShareIfAny): %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a3(0);
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E718);
    sub_1001D6474(a6, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    id v22 = a5;
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      id v26 = (void *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v35 = (uint64_t)v22;
      uint64_t v36 = v32;
      *(_DWORD *)uint64_t v25 = 138412546;
      uint64_t v33 = a4;
      uint64_t v34 = a3;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v26 = v22;

      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v35 = sub_100135190(v28, v29, &v36);
      a3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Removed existing CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v25, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1001D6A68((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    return ((uint64_t (*)(uint64_t))a3)(1);
  }
}

uint64_t sub_1001CA1F8()
{
  type metadata accessor for BeneficiaryAccessKeyRepairHandler();
  sub_100009F04((uint64_t *)&unk_10032B490);
  uint64_t result = String.init<A>(describing:)();
  qword_10032B320 = result;
  *(void *)algn_10032B328 = v1;
  return result;
}

id sub_1001CA244()
{
  uint64_t v1 = OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext;
  int v2 = *(void **)(v0
                + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    id v3 = sub_1001D29E8(v0);
    unsigned int v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    id v5 = v3;
    sub_1001D2D28(v4);
  }
  sub_1001D2D38(v2);
  return v3;
}

uint64_t sub_1001CA2B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  HIDWORD(v19) = a2;
  uint64_t v20 = *v4;
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8, v9);
  uint64_t v10 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  sub_1001D6474(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v12 = (*(unsigned __int8 *)(v7 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = BYTE4(v19);
  sub_1001D662C((uint64_t)v10, v15 + v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  *(void *)(v15 + v13) = v11;
  os_log_type_t v16 = (void *)(v15 + v14);
  uint64_t v17 = v22;
  *os_log_type_t v16 = v21;
  v16[1] = v17;
  *(void *)(v15 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)) = v20;
  swift_retain();
  swift_retain();
  sub_1001CCB60(a1, (void (*)(uint64_t, uint64_t))sub_1001D0BA4, v15);
  swift_release();
  return swift_release();
}

uint64_t sub_1001CA494(void *a1, char a2, int a3, void *a4, void *a5, void (*a6)(void *), uint64_t a7, uint64_t a8)
{
  uint64_t v91 = a8;
  uint64_t v93 = a5;
  uint64_t v94 = a4;
  int v95 = a3;
  uint64_t v12 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v90 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v89 = *(void *)(v90 - 8);
  __chkstk_darwin(v90, v16);
  uint64_t v88 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v92 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v21 - 8, v22);
  os_log_type_t v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v26 = *(void *)(*(void *)(v25 - 8) + 64);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = __chkstk_darwin(v28, v29);
  __chkstk_darwin(v30, v31);
  uint64_t v34 = __chkstk_darwin((char *)&v80 - v32, v33);
  uint64_t v36 = (char *)&v80 - v35;
  uint64_t v38 = __chkstk_darwin(v34, v37);
  uint64_t v96 = (uint64_t)&v80 - v42;
  if (a2)
  {
    void *v15 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a6(v15);
    return sub_100006574((uint64_t)v15, &qword_100321CF0);
  }
  else
  {
    uint64_t v87 = v38;
    uint64_t v80 = v41;
    uint64_t v81 = v40;
    uint64_t v82 = v39;
    unint64_t v83 = (void (*)(void))a6;
    sub_10007B664(a1, 0);
    sub_10007B664(a1, 0);
    sub_100012918(a1, v101);
    uint64_t v86 = a1;
    uint64_t v84 = a7;
    if (v95)
    {
      int v85 = 1;
      uint64_t v43 = (uint64_t)v94;
    }
    else
    {
      uint64_t v43 = (uint64_t)v94;
      int v85 = *((unsigned __int8 *)v94 + *(int *)(v25 + 40));
    }
    uint64_t v45 = v101[0];
    unint64_t v46 = v101[1];
    sub_1001D6474(v43, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_1000190C0((uint64_t)v101, (uint64_t)&v102);
    if (*((void *)&v103 + 1))
    {
      long long v105 = v102;
      long long v106 = v103;
      long long v107 = v104;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      sub_100013140(v45, v46);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      JSONEncoder.init()();
      long long v97 = v105;
      long long v98 = v106;
      long long v99 = v107;
      sub_1000197DC();
      uint64_t v47 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      unint64_t v49 = v48;
      swift_release();
      sub_100019168((uint64_t)v101);
      uint64_t v43 = (uint64_t)v94;
    }
    else
    {
      uint64_t v47 = 0;
      unint64_t v49 = 0xF000000000000000;
    }
    uint64_t v50 = v96;
    uint64_t v94 = v93 + 2;
    uint64_t v51 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v24, 1, 1, v51);
    uint64_t v52 = type metadata accessor for Date();
    uint64_t v53 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v92, 1, 1, v52);
    sub_100014F58((uint64_t)v36, 0, 0, v47, v49, v85, (uint64_t)v24, v53, v50, 0, 0, 0);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100007288(v54, (uint64_t)qword_10033E778);
    uint64_t v55 = v87;
    sub_1001D6474(v50, v87, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      *(void *)&long long v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v59 = qword_10032B320;
      unint64_t v60 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v100 = sub_100135190(v59, v60, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      uint64_t v61 = v87;
      uint64_t v62 = sub_1000187A8();
      uint64_t v100 = sub_100135190(v62, v63, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68(v61, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s - created new BeneficiaryInfoRecord with updated accessKey - %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v50 = v96;
    }
    else
    {
      sub_1001D6A68(v55, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v65 = v89;
      uint64_t v66 = v88;
      uint64_t v67 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v90);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
      uint64_t v93 = sub_100008EF8(&v97, *((uint64_t *)&v98 + 1));
      uint64_t v92 = (char *)swift_allocObject();
      swift_beginAccess();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v68 = v81;
      sub_1001D6474(v50, v81, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v69 = v82;
      sub_1001D6474(v43, v82, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v70 = *(unsigned __int8 *)(v80 + 80);
      uint64_t v71 = (v70 + 16) & ~v70;
      unint64_t v72 = (v26 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v73 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v74 = (v70 + v73 + 8) & ~v70;
      uint64_t v75 = v74 + v26;
      uint64_t v76 = swift_allocObject();
      sub_1001D662C(v68, v76 + v71, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      uint64_t v77 = (void *)(v76 + v72);
      uint64_t v78 = v84;
      *uint64_t v77 = v83;
      v77[1] = v78;
      *(void *)(v76 + v73) = v92;
      sub_1001D662C(v69, v76 + v74, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      *(unsigned char *)(v76 + v75) = v95 & 1;
      *(void *)((v75 & 0xFFFFFFFFFFFFFFF8) + v76 + 8) = v91;
      swift_retain();
      swift_retain();
      uint64_t v79 = v96;
      sub_1000E80F4(v96, (uint64_t)sub_1001D303C, v76);
      swift_release();
      sub_100019168((uint64_t)v101);
      sub_10007B670(v86, 0);
      sub_1001D6A68(v79, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_release();
      return sub_100008EA8((uint64_t)&v97);
    }
    else
    {
      sub_100019168((uint64_t)v101);
      sub_10007B670(v86, 0);
      return sub_1001D6A68(v50, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
  }
}

uint64_t sub_1001CAF9C(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v67 = a8;
  int v66 = a7;
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v12 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v65 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v65 + 64);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v69 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v68 = (uint64_t)&v58 - v17;
  uint64_t v18 = sub_100009F04(&qword_100321CF0);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (uint64_t *)((char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (uint64_t *)((char *)&v58 - v24);
  sub_100019730(a1, (uint64_t)&v58 - v24, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v22 = *v25;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v22);
    swift_errorRelease();
    uint64_t v25 = v22;
  }
  else
  {
    uint64_t v26 = (uint64_t *)(a2 + *(int *)(v12 + 20));
    uint64_t v27 = v26[1];
    if (v27)
    {
      uint64_t v60 = *v26;
      uint64_t v61 = a2;
      uint64_t v28 = qword_100320B98;
      uint64_t v63 = v27;
      swift_bridgeObjectRetain();
      uint64_t v29 = a4;
      if (v28 != -1) {
        swift_once();
      }
      uint64_t v62 = v70 + 16;
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E778);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v34 = &unk_1002A9000;
      uint64_t v35 = &unk_100320000;
      uint64_t v36 = v71;
      uint64_t v64 = a3;
      if (v33)
      {
        uint64_t v59 = v29;
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        v73[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315138;
        if (qword_100320CA0 != -1) {
          swift_once();
        }
        uint64_t v38 = qword_10032B320;
        unint64_t v39 = *(void *)algn_10032B328;
        swift_bridgeObjectRetain();
        uint64_t v72 = sub_100135190(v38, v39, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - saved new BeneficiaryInfoRecord.", v37, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v29 = v59;
        uint64_t v36 = v71;
        a3 = v64;
        uint64_t v35 = (void *)&unk_100320000;
        uint64_t v34 = (void *)&unk_1002A9000;
      }
      else
      {
      }
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        v73[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = v34[309];
        if (v35[404] != -1) {
          swift_once();
        }
        uint64_t v43 = qword_10032B320;
        unint64_t v44 = *(void *)algn_10032B328;
        swift_bridgeObjectRetain();
        uint64_t v72 = sub_100135190(v43, v44, v73);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - notifying Beneficiary of Access Key Change...", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v36 = v71;
        a3 = v64;
      }
      else
      {
      }
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v62 = Strong;
        sub_1001D6474(v36, v68, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_1001D6474(v61, v69, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v46 = *(unsigned __int8 *)(v65 + 80);
        uint64_t v47 = (v46 + 33) & ~v46;
        uint64_t v48 = v13 + 7;
        unint64_t v49 = (v13 + 7 + v47) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v50 = (v46 + v49 + 8) & ~v46;
        uint64_t v51 = (void (*)(void))a3;
        unint64_t v52 = (v48 + v50) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v53 = swift_allocObject();
        *(void *)(v53 + 16) = v51;
        *(void *)(v53 + 24) = v29;
        LODWORD(v51) = v66 & 1;
        *(unsigned char *)(v53 + 32) = v66 & 1;
        sub_1001D662C(v68, v53 + v47, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v54 = v69;
        *(void *)(v53 + v49) = v70;
        sub_1001D662C(v54, v53 + v50, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v55 = (void *)(v53 + v52);
        uint64_t v56 = v63;
        *uint64_t v55 = v60;
        v55[1] = v56;
        *(void *)(v53 + ((v52 + 23) & 0xFFFFFFFFFFFFFFF8)) = v67;
        swift_retain();
        swift_retain();
        sub_1001CC7DC(v71, (int)v51, (uint64_t)sub_1001D3400, v53);
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_1001D6474(a2, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      swift_storeEnumTagMultiPayload();
      a3(v22);
      sub_100006574((uint64_t)v22, &qword_100321CF0);
    }
  }
  return sub_100006574((uint64_t)v25, &qword_100321CF0);
}

void sub_1001CB63C(uint64_t a1, void (*a2)(void *), uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v44 = a8;
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  LODWORD(v47) = a4;
  uint64_t v14 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 64);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  uint64_t v26 = (char *)&v42 - v24;
  if (a1)
  {
    *uint64_t v17 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v17);
    sub_100006574((uint64_t)v17, &qword_100321CF0);
    return;
  }
  uint64_t v27 = v25;
  uint64_t v43 = (void (*)(void))a2;
  uint64_t v29 = v45;
  uint64_t v28 = v46;
  sub_1001D6474(a5, (uint64_t)&v42 - v24, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  if (v47)
  {
    char v30 = v26[*(int *)(v18 + 40)];
    sub_1001D6A68((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    if ((v30 & 1) == 0)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        uint64_t v47 = a10;
        uint64_t v42 = a9;
        sub_1001D6474(v28, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        unint64_t v31 = (*(unsigned __int8 *)(v27 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        unint64_t v32 = (v19 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
        BOOL v33 = (void *)swift_allocObject();
        v33[2] = v43;
        v33[3] = a3;
        v33[4] = v29;
        sub_1001D662C((uint64_t)v22, (uint64_t)v33 + v31, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v34 = (void *)((char *)v33 + v32);
        uint64_t v35 = v42;
        void *v34 = v44;
        v34[1] = v35;
        *(void *)((char *)v33 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8)) = v47;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1001CC648(a5, (uint64_t)sub_1001D39DC, (uint64_t)v33);
        swift_release();
        swift_release();
      }
      return;
    }
  }
  else
  {
    sub_1001D6A68((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_100007288(v36, (uint64_t)qword_10033E778);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v39 = 136315138;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v40 = qword_10032B320;
    unint64_t v41 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    v48[3] = sub_100135190(v40, v41, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - skipping old beneficiary record cleanup and sharing of new record.", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_1001CBAD4(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v33 + 64);
  __chkstk_darwin(v13 - 8, v15);
  uint64_t v16 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    void *v19 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v19);
    sub_100006574((uint64_t)v19, &qword_100321CF0);
  }
  uint64_t v34 = (void (*)(void))a2;
  uint64_t v35 = a3;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100007288(v20, (uint64_t)qword_10033E778);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v30 = a5;
    uint64_t v31 = a6;
    uint64_t v32 = a7;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_10032B320;
    unint64_t v24 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_100135190(v25, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - attempting to share new beneficiary manatee record.", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a6 = v31;
    a7 = v32;
    a5 = v30;
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1001D6474(a5, (uint64_t)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v27 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v35;
    *(void *)(v28 + 16) = v34;
    *(void *)(v28 + 24) = v29;
    sub_1001D662C((uint64_t)v16, v28 + v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_retain();
    sub_1001CBF8C(a5, a6, a7, (void (*)(void))sub_1001D42B8, v28);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001CBE8C(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = (uint64_t *)((char *)&v13 - v10);
  if (a1)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
  }
  else
  {
    sub_1001D6474(a4, (uint64_t)&v13 - v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload();
  }
  a2(v11);
  return sub_100006574((uint64_t)v11, &qword_100321CF0);
}

void sub_1001CBF8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v51 = a3;
  uint64_t v52 = a1;
  uint64_t v9 = *v5;
  uint64_t v49 = a2;
  uint64_t v50 = v9;
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8, v13);
  uint64_t v48 = (uint64_t)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100324680);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v47 = sub_100007288(v19, (uint64_t)qword_10033E778);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v53 = a4;
  if (v22)
  {
    uint64_t v43 = v11;
    uint64_t v44 = v12;
    uint64_t v45 = v6;
    uint64_t v46 = a5;
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v57[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v24 = qword_10032B320;
    unint64_t v25 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_100135190(v24, v25, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - sharing BeneficiaryInfoRecord...", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a5 = v46;
    a4 = v53;
    uint64_t v6 = v45;
    uint64_t v12 = v44;
    uint64_t v11 = v43;
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v6 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage, v14);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v54, (uint64_t)v57);
    uint64_t v26 = swift_allocObject();
    swift_weakInit();
    uint64_t v27 = v52;
    uint64_t v28 = v48;
    sub_1001D6474(v52, v48, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v29 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v30 = (v12 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v26;
    sub_1001D662C(v28, v32 + v29, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v33 = (void *)(v32 + v30);
    uint64_t v34 = v51;
    void *v33 = v49;
    v33[1] = v34;
    uint64_t v35 = (void *)(v32 + v31);
    *uint64_t v35 = v53;
    v35[1] = a5;
    *(void *)(v32 + ((v31 + 23) & 0xFFFFFFFFFFFFFFF8)) = v50;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1001D4BD0(v27, (uint64_t)sub_1001D4540, v32);
    swift_release();
    swift_release();
    sub_100008EA8((uint64_t)v57);
  }
  else
  {
    uint64_t v55 = 0;
    memset(v54, 0, sizeof(v54));
    sub_100006574((uint64_t)v54, (uint64_t *)&unk_10032B4A0);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v36, v37))
    {
      os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v38 = 136315138;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v39 = qword_10032B320;
      unint64_t v40 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v56 = sub_100135190(v39, v40, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - shareBeneficiaryRecord could not get reference to CloudKitSharing", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v56 = 0;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011BAA8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v41 = (void *)v57[0];
    a4(v57[0]);
  }
}

uint64_t sub_1001CC648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100009F04(&qword_100324680);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a2;
  uint64_t v13[3] = a3;
  v13[4] = v7;
  swift_retain();
  sub_1001D3DBC(a1, (uint64_t)sub_1001D3AC8, (uint64_t)v13);
  swift_release();
  return sub_100008EA8((uint64_t)v16);
}

uint64_t sub_1001CC7DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v35 = a4;
  int v34 = a2;
  uint64_t v32 = *v4;
  uint64_t v33 = a3;
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v31 + 64);
  __chkstk_darwin(v7 - 8, v9);
  uint64_t v10 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  unint64_t v29 = sub_100008EF8(v36, v36[3]);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  sub_1001D6474(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v22 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  unint64_t v23 = (v22 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  sub_1001D662C((uint64_t)v10, v25 + v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v26 = v25 + v23;
  uint64_t v27 = v35;
  *(void *)unint64_t v26 = v33;
  *(void *)(v26 + 8) = v27;
  *(unsigned char *)(v26 + 16) = v34;
  *(void *)(v25 + v24) = v21;
  *(void *)(v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = v32;
  swift_retain();
  swift_retain();
  sub_1000ECA54((uint64_t)v15, (uint64_t)sub_1001D36D8, v25);
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v30);
  swift_release();
  return sub_100008EA8((uint64_t)v36);
}

void sub_1001CCB60(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v84 = a2;
  uint64_t v85 = a3;
  uint64_t v83 = *v3;
  uint64_t v5 = sub_100009F04(&qword_100321CD0);
  uint64_t v81 = *(void *)(v5 - 8);
  uint64_t v82 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v80 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v76 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = (void *)type metadata accessor for UUID();
  uint64_t v11 = (void *)*(v86 - 1);
  __chkstk_darwin(v86, v12);
  uint64_t v75 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v77 = *((void *)v14 - 1);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v78 = v17;
  uint64_t v79 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v72 - v19;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100007288(v21, (uint64_t)qword_10033E778);
  sub_1001D6474(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v87 = v3;
  if (v25)
  {
    uint64_t v73 = v22;
    uint64_t v74 = v11;
    uint64_t v26 = a1;
    uint64_t v27 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_10032B320;
    unint64_t v29 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v89 = sub_100135190(v28, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v89 = sub_100135190(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D6A68((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - generating new accessKey for beneficiaryID - %s.", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v26;
    uint64_t v11 = v74;
  }
  else
  {
    sub_1001D6A68((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  uint64_t v32 = sub_1001CA244();
  if (v32)
  {
    uint64_t v33 = (void (*)(char *, uint64_t, void *))v11[2];
    uint64_t v34 = (uint64_t)v75;
    uint64_t v74 = v32;
    v33(v75, a1, v86);
    uint64_t v35 = v14[5];
    uint64_t v36 = (uint64_t *)(a1 + v14[6]);
    uint64_t v37 = v36[1];
    uint64_t v73 = *v36;
    uint64_t v38 = *(void *)(a1 + v35 + 8);
    uint64_t v86 = *(void **)(a1 + v35);
    uint64_t v39 = (uint64_t)v76;
    sub_100019730(a1 + v14[11], (uint64_t)v76, (uint64_t *)&unk_100321CE0);
    uint64_t v40 = v14[13];
    unint64_t v41 = (uint64_t *)(a1 + v14[12]);
    uint64_t v42 = v41[1];
    uint64_t v72 = *v41;
    uint64_t v43 = a1 + v40;
    uint64_t v44 = *(void *)(a1 + v40);
    if (*(unsigned char *)(v43 + 8)) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = v44;
    }
    uint64_t v46 = (uint64_t *)(a1 + v14[14]);
    uint64_t v48 = *v46;
    uint64_t v47 = v46[1];
    id v49 = objc_allocWithZone((Class)AABeneficiaryInfo);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v76 = (char *)sub_1001D1848(v34, v73, v37, (uint64_t)v86, v38, v39, v72, v42, v45, v48, v47);
    uint64_t v50 = v80;
    uint64_t v51 = v81;
    uint64_t v52 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, (uint64_t)v87 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__securityManager, v82);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    uint64_t v86 = (void *)aBlock[0];
    uint64_t v53 = swift_allocObject();
    swift_weakInit();
    uint64_t v54 = v79;
    sub_1001D6474(a1, v79, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v55 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
    unint64_t v56 = (v78 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v85;
    *(void *)(v59 + 16) = v84;
    *(void *)(v59 + 24) = v60;
    sub_1001D662C(v54, v59 + v55, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v61 = v74;
    *(void *)(v59 + v56) = v74;
    id v62 = v76;
    *(void *)(v59 + v57) = v76;
    *(void *)(v59 + v58) = v53;
    *(void *)(v59 + ((v58 + 15) & 0xFFFFFFFFFFFFFFF8)) = v83;
    aBlock[4] = (uint64_t)sub_1001D1C64;
    void aBlock[5] = v59;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10004DAE8;
    aBlock[3] = (uint64_t)&unk_1002FFB48;
    uint64_t v63 = _Block_copy(aBlock);
    id v64 = v62;
    swift_retain();
    id v65 = v61;
    swift_release();
    [v86 createInheritanceAccessKeyForContact:v64 completion:v63];
    _Block_release(v63);

    swift_unknownObjectRelease();
  }
  else
  {
    int v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315138;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v69 = qword_10032B320;
      unint64_t v70 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100135190(v69, v70, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s - inheritanceContext is nil. Cannot proceed with updating accessKey", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v89 = 10;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011BAA8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v71 = (void *)aBlock[0];
    v84(aBlock[0], 1);
  }
}

void sub_1001CD500(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v74 = a7;
  id v76 = a6;
  uint64_t v15 = sub_100009F04(&qword_10032B478);
  uint64_t v72 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v71 = (char *)v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v22 - 8, v23);
  BOOL v25 = (char *)v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = a3;
      uint64_t v41 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v42 = qword_10032B320;
      unint64_t v43 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v78 = sub_100135190(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      uint64_t v78 = a2;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_10032B480);
      uint64_t v44 = String.init<A>(describing:)();
      uint64_t v78 = sub_100135190(v44, v45, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - error generating new access code: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v40;
      uint64_t v46 = a2;
      if (a2) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v46 = a2;
      if (a2)
      {
LABEL_25:
        swift_errorRetain();
        swift_errorRetain();
        a3(v46, 1);
        swift_errorRelease();
        swift_errorRelease();
        return;
      }
    }
    type metadata accessor for InheritanceError(0);
    uint64_t v78 = 0;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011BAA8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v46 = aBlock[0];
    goto LABEL_25;
  }
  uint64_t v68 = v15;
  unint64_t v70 = a3;
  uint64_t v26 = qword_100320B98;
  id v75 = a1;
  if (v26 != -1) {
    swift_once();
  }
  uint64_t v69 = a8 + 16;
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100007288(v27, (uint64_t)qword_10033E778);
  sub_1001D6474(a5, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  unint64_t v31 = &unk_100320000;
  if (os_log_type_enabled(v29, v30))
  {
    v66[1] = v28;
    uint64_t v67 = a4;
    uint64_t v32 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315394;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v34 = qword_10032B320;
    unint64_t v33 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_100135190(v34, v33, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v78 = sub_100135190(v35, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D6A68((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - created new accessKey for beneficiaryID - %s.", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v67;
    unint64_t v31 = (void *)&unk_100320000;
  }
  else
  {
    sub_1001D6A68((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  id v47 = v76;
  [v76 setAccessKey:v75];
  id v48 = [v74 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v21, v18);
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v47 setBeneficiaryIdentifier:v49];

  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v53 = v70;
  if (v52)
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    if (v31[404] != -1) {
      swift_once();
    }
    uint64_t v55 = qword_10032B320;
    unint64_t v56 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_100135190(v55, v56, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s - notifying IdMS of the accessKey change...", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    unint64_t v58 = v71;
    uint64_t v59 = v72;
    uint64_t v60 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__requestController, v68);
    Dependency.wrappedValue.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    uint64_t v61 = (void *)aBlock[0];
    id v62 = (void *)swift_allocObject();
    v62[2] = v53;
    v62[3] = a4;
    id v63 = v75;
    v62[4] = v75;
    v62[5] = a9;
    aBlock[4] = (uint64_t)sub_1001D1D78;
    void aBlock[5] = (uint64_t)v62;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    aBlock[3] = (uint64_t)&unk_1002FFB98;
    id v64 = _Block_copy(aBlock);
    id v65 = v63;
    swift_retain();
    swift_release();
    [v61 updateBeneficiaryWithInheritanceContext:v76 completion:v64];
    swift_unknownObjectRelease();

    _Block_release(v64);
  }
  else
  {
  }
}

uint64_t sub_1001CDF20(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v10 = qword_10032B320;
      unint64_t v11 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      sub_100135190(v10, v11, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v12 = String.init<A>(describing:)();
      sub_100135190(v12, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - error updating access code with IdMS: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E778);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_10032B320;
      unint64_t v20 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      sub_100135190(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - successfully updated AccessKey with IdMS", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return ((uint64_t (*)(uint64_t, void))a2)(a4, 0);
  }
}

void sub_1001CE33C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char a5)
{
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v68 = a2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v71 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  os_log_type_t v17 = (char *)&v67 - v16;
  uint64_t v18 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v22, v23);
  BOOL v25 = (uint64_t *)((char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v25, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001D662C((uint64_t)v25, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    uint64_t v38 = *(int *)(v11 + 36);
    if (v17[v38])
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100007288(v39, (uint64_t)qword_10033E778);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        v75[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 136315138;
        if (qword_100320CA0 != -1) {
          swift_once();
        }
        uint64_t v43 = qword_10032B320;
        unint64_t v44 = *(void *)algn_10032B328;
        swift_bridgeObjectRetain();
        uint64_t v76 = sub_100135190(v43, v44, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s - inheritanceHealthRecord is already in Manatee.", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      v72(0);
    }
    else
    {
      v17[v38] = a5 & 1;
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100007288(v45, (uint64_t)qword_10033E778);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        v75[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 136315394;
        if (qword_100320CA0 != -1) {
          swift_once();
        }
        uint64_t v49 = qword_10032B320;
        unint64_t v50 = *(void *)algn_10032B328;
        swift_bridgeObjectRetain();
        uint64_t v76 = sub_100135190(v49, v50, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2080;
        swift_beginAccess();
        uint64_t v51 = sub_1000E1C74();
        uint64_t v76 = sub_100135190(v51, v52, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s - saving updated InheritanceHealthRecord - %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v55 = v69;
        uint64_t v54 = v70;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v10, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v70);
        Dependency.wrappedValue.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v54);
        sub_100008EF8(v75, v75[3]);
        swift_beginAccess();
        uint64_t v56 = v71;
        sub_1001D6474((uint64_t)v17, v71, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        uint64_t v57 = swift_allocObject();
        *(void *)(v57 + 16) = v72;
        *(void *)(v57 + 24) = v73;
        swift_retain();
        sub_1000ECF2C(v56, (uint64_t)sub_1001D37CC, v57);
        swift_release();
        sub_1001D6A68(v56, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        sub_100008EA8((uint64_t)v75);
        uint64_t v58 = (uint64_t)v17;
LABEL_27:
        sub_1001D6A68(v58, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        return;
      }
    }
    uint64_t v58 = (uint64_t)v17;
    goto LABEL_27;
  }
  v75[0] = *v25;
  uint64_t v26 = v75[0];
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for InheritanceError(0);
  if (swift_dynamicCast())
  {
    uint64_t v27 = (void *)v76;
    v75[0] = v76;
    uint64_t v74 = 3;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10011BAA8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v28 = (void *)v76;
    uint64_t v74 = v76;
    char v29 = static _BridgedStoredNSError.== infix(_:_:)();

    if (v29)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E778);
      sub_1001D6474(v68, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        v75[0] = v71;
        *(_DWORD *)uint64_t v33 = 136315394;
        if (qword_100320CA0 != -1) {
          swift_once();
        }
        uint64_t v34 = qword_10032B320;
        unint64_t v35 = *(void *)algn_10032B328;
        swift_bridgeObjectRetain();
        uint64_t v76 = sub_100135190(v34, v35, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2080;
        type metadata accessor for UUID();
        sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v76 = sub_100135190(v36, v37, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001D6A68((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - there is no InheritanceHealthRecord for beneficiaryID - %s.", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001D6A68((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      }

      v72(0);
      swift_errorRelease();

      return;
    }
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  sub_100007288(v59, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    v75[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v62 = 136315394;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v63 = qword_10032B320;
    unint64_t v64 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_100135190(v63, v64, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2080;
    uint64_t v76 = v26;
    swift_errorRetain();
    uint64_t v65 = String.init<A>(describing:)();
    uint64_t v76 = sub_100135190(v65, v66, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s - error fetching InheritanceHealthRecord. Abandoning migration - %s", (uint8_t *)v62, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRetain();
  v72(v26);
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_1001CEFC0(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v7, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    swift_errorRetain();
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    a2(0);
    return sub_100006574((uint64_t)v7, &qword_10032B730);
  }
}

uint64_t sub_1001CF0BC(int a1, uint64_t a2, uint64_t a3, void **a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a7;
  uint64_t v34 = a6;
  unint64_t v32 = a5;
  int v33 = a1;
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8, v13);
  uint64_t v14 = sub_100009F04(&qword_10032B4B8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, result + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudSharingController, v14);
    Dependency.wrappedValue.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t v20 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    uint64_t v21 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1001D6474(a3, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v30 = (v22 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = a3;
    unint64_t v23 = (v22 + v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = v32;
    uint64_t v26 = swift_allocObject();
    sub_1001D662C((uint64_t)v21, v26 + v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v27 = v26 + v30;
    uint64_t v28 = v36;
    *(void *)unint64_t v27 = v34;
    *(void *)(v27 + 8) = v28;
    *(unsigned char *)(v27 + 16) = v33 & 1;
    *(void *)(v26 + v23) = v20;
    char v29 = (void ***)(v26 + v24);
    *char v29 = a4;
    v29[1] = (void **)v25;
    *(void *)(v26 + ((v24 + 23) & 0xFFFFFFFFFFFFFFF8)) = v35;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_10007AFB8(v31, a4, v25, (uint64_t)sub_1001D55DC, v26);
    swift_release();
    swift_release();
    return sub_100008EA8((uint64_t)v37);
  }
  return result;
}

uint64_t sub_1001CF3EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v80 = a7;
  uint64_t v81 = a8;
  int v82 = a5;
  uint64_t v83 = a3;
  uint64_t v84 = a2;
  uint64_t v11 = sub_100009F04(&qword_10032B4C0);
  uint64_t v78 = *(void *)(v11 - 8);
  uint64_t v79 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v77 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CloudShareInfo();
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)v73 - v20;
  uint64_t v22 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v24 = __chkstk_darwin(v22 - 8, v23);
  uint64_t v26 = (char *)v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  char v29 = (char *)v73 - v28;
  uint64_t v30 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v30, v31);
  int v33 = (void *)((char *)v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v33, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    id v75 = v26;
    sub_1001D662C((uint64_t)v33, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v45 = a6 + 16;
    uint64_t v46 = type metadata accessor for Logger();
    uint64_t v47 = sub_100007288(v46, (uint64_t)qword_10033E778);
    sub_1001D6474((uint64_t)v21, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v73[1] = v47;
      uint64_t v74 = v45;
      uint64_t v76 = a4;
      uint64_t v50 = swift_slowAlloc();
      v85[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v52 = qword_10032B320;
      unint64_t v51 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v87 = sub_100135190(v52, v51, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      type metadata accessor for URL();
      sub_10011BAA8((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = sub_100135190(v53, v54, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "%s - successfully shared BeneficiaryInfoRecord with URL - %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v76;
      uint64_t v45 = v74;
      if ((v82 & 1) == 0)
      {
LABEL_14:
        swift_beginAccess();
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v56 = v77;
          uint64_t v57 = v78;
          uint64_t v58 = v79;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger, v79);
          Dependency.wrappedValue.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
          sub_100008EF8(v85, v86);
          sub_100199250((uint64_t)v21, v84, v80, v81, v83, a4);
LABEL_26:
          sub_1001D6A68((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
          return sub_100008EA8((uint64_t)v85);
        }
        return sub_1001D6A68((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
      }
    }
    else
    {
      sub_1001D6A68((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);

      if ((v82 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v60 = (uint64_t)v75;
    sub_1001D6474(v84, (uint64_t)v75, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    os_log_type_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v74 = v45;
      uint64_t v76 = a4;
      uint64_t v63 = swift_slowAlloc();
      v85[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v64 = qword_10032B320;
      unint64_t v65 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v87 = sub_100135190(v64, v65, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v66 = (uint64_t)v75;
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = sub_100135190(v67, v68, v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D6A68(v66, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s - we removed the previous share, will send as new share for beneficiaryID - %s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v76;
    }
    else
    {
      sub_1001D6A68(v60, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }
    swift_beginAccess();
    uint64_t v69 = swift_weakLoadStrong();
    if (v69)
    {
      uint64_t v70 = v77;
      uint64_t v71 = v78;
      uint64_t v72 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v69 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger, v79);
      Dependency.wrappedValue.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
      sub_100008EF8(v85, v86);
      sub_100198980((uint64_t)v21, v80, v81, v84, v83, a4);
      goto LABEL_26;
    }
    return sub_1001D6A68((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  }
  uint64_t v34 = *v33;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100007288(v35, (uint64_t)qword_10033E778);
  sub_1001D6474(v84, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v76 = a4;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = (void *)swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    v85[0] = v84;
    *(_DWORD *)uint64_t v38 = 136315650;
    if (qword_100320CA0 != -1) {
      swift_once();
    }
    uint64_t v40 = qword_10032B320;
    unint64_t v41 = *(void *)algn_10032B328;
    swift_bridgeObjectRetain();
    uint64_t v87 = sub_100135190(v40, v41, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    type metadata accessor for UUID();
    sub_10011BAA8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v87 = sub_100135190(v42, v43, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D6A68((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    *(_WORD *)(v38 + 22) = 2112;
    uint64_t v44 = _convertErrorToNSError(_:)();
    uint64_t v87 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v39 = v44;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - failed to share BeneficiaryInfoRecord for beneficiaryID %s with error: %@", (uint8_t *)v38, 0x20u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001D6A68((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRetain();
  v83(v34);
  swift_errorRelease();
  return swift_errorRelease();
}

uint64_t sub_1001CFFA4(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v7, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v25 = a2;
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_10032B320;
      unint64_t v14 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_100135190(v15, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2112;
      uint64_t v16 = _convertErrorToNSError(_:)();
      uint64_t v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v16;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - failed to delete beneficiary record from cloud store: %@", (uint8_t *)v12, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a2 = v25;
    }
    else
    {
      swift_errorRelease();
    }
    swift_errorRetain();
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100006574((uint64_t)v7, &qword_1003229D0);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_10032B320;
      unint64_t v22 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_100135190(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - cloud store beneficiary record deleted successfully.", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_1001D0440()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__requestController;
  uint64_t v6 = sub_100009F04(&qword_10032B478);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__securityManager;
  uint64_t v8 = sub_100009F04(&qword_100321CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudSharingController;
  uint64_t v10 = sub_100009F04(&qword_10032B4B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger;
  uint64_t v12 = sub_100009F04(&qword_10032B4C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage;
  uint64_t v14 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  sub_1001D2D28(*(id *)(v0
                      + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext));

  return swift_deallocClassInstance();
}

uint64_t sub_1001D06A4()
{
  return type metadata accessor for BeneficiaryAccessKeyRepairHandler();
}

uint64_t type metadata accessor for BeneficiaryAccessKeyRepairHandler()
{
  uint64_t result = qword_10032B398;
  if (!qword_10032B398) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001D06F8()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_10032B5C0, (uint64_t *)&unk_100325A50);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, qword_10032B5E0, &qword_1003218C0);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_10032B3A8, (uint64_t *)&unk_100325A70);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, qword_10032B3B8, (uint64_t *)&unk_100325A60);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001D0964()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D099C()
{
  unint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001D0BA4(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  int v9 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v10 = *(void **)(v2 + v7);
  uint64_t v11 = *(void (**)(void *))(v2 + v8);
  uint64_t v12 = *(void *)(v2 + v8 + 8);
  uint64_t v13 = *(void *)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001CA494(a1, v4, v9, (void *)(v2 + v6), v10, v11, v12, v13);
}

uint64_t sub_1001D0C70(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v23 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v22 = a4;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v24 = sub_100135190(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error saving record to CloudKit: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v23;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v12 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v12);
    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v12, a5, v20);
    swift_storeEnumTagMultiPayload();
    a3(v12);
  }
  return sub_100006574((uint64_t)v12, &qword_1003229D0);
}

uint64_t sub_1001D0F58(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v24 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v23 = a4;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v25 = sub_100135190(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error saving record to CloudKit: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v24;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v12 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v12);
    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = a5 + *(int *)(type metadata accessor for InheritanceInvitationRecord() + 36);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v12, v20, v21);
    swift_storeEnumTagMultiPayload();
    a3(v12);
  }
  return sub_100006574((uint64_t)v12, &qword_1003229D0);
}

uint64_t sub_1001D1250(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v24 = a3;
      uint64_t v17 = (uint8_t *)v16;
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      uint64_t v23 = a4;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      uint64_t v25 = sub_100135190(v18, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error saving record to CloudKit: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v24;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v12 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v12);
    swift_errorRelease();
  }
  else
  {
    uint64_t v20 = a5 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 32);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v12, v20, v21);
    swift_storeEnumTagMultiPayload();
    a3(v12);
  }
  return sub_100006574((uint64_t)v12, &qword_1003229D0);
}

uint64_t sub_1001D1548(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v11 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v26 = a3;
      unint64_t v19 = (uint8_t *)v18;
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 136315138;
      uint64_t v25 = a4;
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      uint64_t v27 = sub_100135190(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error saving record to CloudKit: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v26;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v14 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v14);
    swift_errorRelease();
  }
  else
  {
    uint64_t v22 = a5 + *(int *)(a6(0) + 28);
    uint64_t v23 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v14, v22, v23);
    swift_storeEnumTagMultiPayload();
    a3(v14);
  }
  return sub_100006574((uint64_t)v14, &qword_1003229D0);
}

id sub_1001D1848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v14.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(a6, 1, v17) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a6, v17);
  }
  if (!a8)
  {
    NSString v20 = 0;
    if (a11) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v21 = 0;
    goto LABEL_11;
  }
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a11) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_11:
  id v22 = [v24 initWithBeneficiaryID:v14.super.isa benefactorAltDSID:v15 handle:v16 otPeerID:isa repairDate:v20 repairCount:a9 recordBuildVersion:v21];

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  return v22;
}

uint64_t sub_1001D1A48()
{
  unint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_1001D1C64(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001CD500(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void **)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001D1D38()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D1D78(uint64_t a1)
{
  return sub_1001CDF20(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_1001D1D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v34 + 64);
  __chkstk_darwin(v5, v7);
  uint64_t v8 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v5 + 40)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    unint64_t v9 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    unint64_t v9 = &qword_10033E9F8;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v10, v11);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_10000850C(0, &qword_100323560);
  uint64_t v14 = UUID.uuidString.getter();
  NSString v16 = v15;
  v17._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17._object = v18;
  v19._uint64_t countAndFlagsBits = v14;
  v19._object = v16;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v19, v17).super.isa;
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  id v24 = isa;
  v25._uint64_t countAndFlagsBits = v21;
  v25._object = v23;
  Class v26 = CKRecordID.init(recordName:zoneID:)(v25, (CKRecordZoneID)v24).super.isa;
  sub_1001D6474(a1, (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v27 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v28 = (v6 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v26;
  sub_1001D662C((uint64_t)v8, v29 + v27, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v30 = (void *)(v29 + v28);
  void *v30 = v35;
  v30[1] = a3;
  *(void *)(v29 + ((v28 + 23) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1001D6964;
  void aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_100300070;
  uint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = v26;
  swift_retain();
  id v33 = v13;
  swift_release();
  [v33 fetchRecordWithID:v32 completionHandler:v31];
  _Block_release(v31);
}

void sub_1001D2130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 48)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033E9F8;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  NSString v15 = sub_100058E64();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  aBlock[4] = sub_1001D605C;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFF30;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

void sub_1001D2418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianHealthRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033E9F8;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  NSString v15 = sub_1000590C8();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  aBlock[4] = sub_1001D5E5C;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFEE0;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

void sub_1001D2700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 40)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033E9F8;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  NSString v15 = sub_1000594A0();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  aBlock[4] = sub_1001D5CB8;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFE90;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

id sub_1001D29E8(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100325870);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__accountStore, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v7 = [*(id *)(*sub_100008EF8(v21, v21[3]) + 16) aa_primaryAppleAccount];
  if (v7 && (uint64_t v8 = v7, v9 = objc_msgSend(v7, "aa_altDSID"), v8, v9))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100008EA8((uint64_t)v21);
    id v10 = objc_allocWithZone((Class)AKInheritanceContext);
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v12 = [v10 initWithOwnerAltDSID:v11];
  }
  else
  {
    sub_100008EA8((uint64_t)v21);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)id v16 = 136315138;
      if (qword_100320CA0 != -1) {
        swift_once();
      }
      uint64_t v17 = qword_10032B320;
      unint64_t v18 = *(void *)algn_10032B328;
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_100135190(v17, v18, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - error creating inheritance context. No altDSID for owner found.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  return v12;
}

void sub_1001D2D28(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_1001D2D38(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_1001D2D48()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  unint64_t v14 = (v2 + ((((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  id v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v4 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v4 + v1[11];
  id v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v10 = v0 + v14;
  v7(v0 + v14, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v10 + v1[7]), *(void *)(v10 + v1[7] + 8));
  v7(v0 + v14 + v1[8], v5);
  sub_100013198(*(void *)(v10 + v1[9]), *(void *)(v10 + v1[9] + 8));
  unint64_t v11 = v0 + v14 + v1[11];
  if (!v9(v11, 1, v5)) {
    v7(v11, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v14 + v13) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1001D303C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  unint64_t v7 = (v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (v4 + v8 + 8) & ~v4;
  uint64_t v10 = v9 + v6;
  unint64_t v11 = *(void (**)(void *))(v1 + v7);
  uint64_t v12 = *(void *)(v1 + v7 + 8);
  uint64_t v13 = *(void *)(v1 + v8);
  int v14 = *(unsigned __int8 *)(v1 + v10);
  uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);

  return sub_1001CAF9C(a1, v1 + v5, v11, v12, v13, v1 + v9, v14, v15);
}

uint64_t sub_1001D310C()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 33) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64) + 7;
  unint64_t v14 = (v2 + ((v13 + v3) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v2;
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v4 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v4 + v1[11];
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v9(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v10 = v0 + v14;
  v7(v0 + v14, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v10 + v1[7]), *(void *)(v10 + v1[7] + 8));
  v7(v0 + v14 + v1[8], v5);
  sub_100013198(*(void *)(v10 + v1[9]), *(void *)(v10 + v1[9] + 8));
  unint64_t v11 = v0 + v14 + v1[11];
  if (!v9(v11, 1, v5)) {
    v7(v11, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v13 + v14) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_1001D3400(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 33) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64) + 7;
  unint64_t v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (v4 + v7 + 8) & ~v4;
  sub_1001CB63C(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), v1 + v5, *(void *)(v1 + v7), v1 + v8, *(void *)(v1 + ((v6 + v8) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v6 + v8) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((((v6 + v8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001D34D0()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v3 + v10 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_1001D36D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v7 = *(void *)(v1 + v5 + 8);
  char v8 = *(unsigned char *)(v1 + v5 + 16);

  sub_1001CE33C(a1, v1 + v4, v6, v7, v8);
}

uint64_t sub_1001D3794()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D37CC(uint64_t a1)
{
  return sub_1001CEFC0(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001D37D4()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001D39DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = (void (*)(void *))v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = *(void *)((char *)v1 + v5);
  uint64_t v10 = *(void *)((char *)v1 + v5 + 8);

  return sub_1001CBAD4(a1, v6, v7, v8, (uint64_t)v1 + v4, v9, v10);
}

uint64_t sub_1001D3A90()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D3AC8(uint64_t a1)
{
  return sub_1001CFFA4(a1, *(void (**)(void))(v1 + 16));
}

void sub_1001D3AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 44)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA18;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v15 = sub_1000595E8();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  aBlock[4] = sub_1001D6694;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_100300020;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

void sub_1001D3DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA18;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v15 = sub_100058D48();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  aBlock[4] = sub_1001D40A8;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFCD8;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

uint64_t sub_1001D40A8(uint64_t a1, uint64_t a2)
{
  return sub_1001D66C0(a1, a2, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001D1250);
}

uint64_t sub_1001D40D8()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_1001D42B8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  uint64_t v4 = *(void (**)(void *))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001CBE8C(a1, v4, v5, v6);
}

uint64_t sub_1001D432C()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001D4540(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void ***)(v1 + v5);
  unint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001CF0BC(a1, v7, v1 + v4, v8, v9, v10, v11, v12);
}

void sub_1001D4600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA18;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v15 = sub_100058F80();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  aBlock[4] = sub_1001D63C4;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFFD0;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

void sub_1001D48E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA18;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v15 = sub_100059358();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  aBlock[4] = sub_1001D6268;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFF80;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

void sub_1001D4BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v34 + 64);
  __chkstk_darwin(v5, v7);
  uint64_t v8 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v5 + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v10, v11);
  id v13 = [v12 privateCloudDatabase];
  swift_bridgeObjectRelease();

  sub_10000850C(0, &qword_100323560);
  uint64_t v14 = UUID.uuidString.getter();
  id v16 = v15;
  v17._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17._object = v18;
  v19._uint64_t countAndFlagsBits = v14;
  v19._object = v16;
  Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v19, v17).super.isa;
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  id v24 = isa;
  v25._uint64_t countAndFlagsBits = v21;
  v25._object = v23;
  Class v26 = CKRecordID.init(recordName:zoneID:)(v25, (CKRecordZoneID)v24).super.isa;
  sub_1001D6474(a1, (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v27 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  unint64_t v28 = (v6 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v26;
  sub_1001D662C((uint64_t)v8, v29 + v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v30 = (void *)(v29 + v28);
  void *v30 = v35;
  v30[1] = a3;
  *(void *)(v29 + ((v28 + 23) & 0xFFFFFFFFFFFFFFF8)) = v13;
  aBlock[4] = sub_1001D5180;
  void aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFD78;
  uint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = v26;
  swift_retain();
  id v33 = v13;
  swift_release();
  [v33 fetchRecordWithID:v32 completionHandler:v31];
  _Block_release(v31);
}

uint64_t sub_1001D4F78()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v11 = *(void *)(*((void *)v1 - 1) + 64);

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (((v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v9 + 8, v2 | 7);
}

uint64_t sub_1001D5180(uint64_t a1, uint64_t a2)
{
  return sub_1001D6990(a1, a2, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_1001C9434);
}

uint64_t sub_1001D51AC()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_1001D5394(uint64_t a1, uint64_t a2)
{
  return sub_1001D6CDC(a1, a2, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1001C9D6C);
}

uint64_t sub_1001D53C0()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((((v3 + v10 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1001D55DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  return sub_1001CF3EC(a1, v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_1001D56A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_10033E9F8;
  }
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  swift_bridgeObjectRetain();
  id v13 = sub_10028CC20(v11, v12);
  id v14 = [v13 privateCloudDatabase];
  swift_bridgeObjectRelease();

  uint64_t v15 = sub_100059210();
  id v16 = [v15 recordID];

  sub_1001D6474(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  sub_1001D662C((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  aBlock[4] = sub_1001D5AC0;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_1002FFE40;
  Swift::String v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v14 deleteRecordWithID:v16 completionHandler:v19];
  _Block_release(v19);
}

uint64_t sub_1001D5990()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001D5AC0(uint64_t a1, uint64_t a2)
{
  return sub_1001D6074(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001D5AD8()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

uint64_t sub_1001D5CB8(uint64_t a1, uint64_t a2)
{
  return sub_1001D6074(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_1001D5CD0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001D5E5C(uint64_t a1, uint64_t a2)
{
  return sub_1001D6074(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1001D5E74()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001D605C(uint64_t a1, uint64_t a2)
{
  return sub_1001D6074(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_1001D6074(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = *(void *)(a3(0) - 8);
  return sub_1001D0C70(a1, a2, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
}

uint64_t sub_1001D60F0()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001D6268(uint64_t a1, uint64_t a2)
{
  return sub_1001D63F0(a1, a2, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_1001D6294()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001D63C4(uint64_t a1, uint64_t a2)
{
  return sub_1001D63F0(a1, a2, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1001D63F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v8 = *(void *)(a3(0) - 8);
  return sub_1001D1548(a1, a2, *(void (**)(void))(v4 + 16), *(void *)(v4 + 24), v4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a4);
}

uint64_t sub_1001D6474(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D64DC()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001D662C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001D6694(uint64_t a1, uint64_t a2)
{
  return sub_1001D66C0(a1, a2, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001D0F58);
}

uint64_t sub_1001D66C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3(0) - 8);
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return a4(a1, a2, v8, v9, v10);
}

uint64_t sub_1001D675C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  unint64_t v11 = (((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v11 + 8, v2 | 7);
}

uint64_t sub_1001D6964(uint64_t a1, uint64_t a2)
{
  return sub_1001D6990(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_1001C8FA8);
}

uint64_t sub_1001D6990(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a3(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + v9);
  uint64_t v12 = *(void *)(v4 + v9 + 8);
  uint64_t v13 = *(void *)(v4 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));

  return a4(a1, a2, v10, v4 + v8, v11, v12, v13);
}

uint64_t sub_1001D6A68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001D6AC8()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  unint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

uint64_t sub_1001D6CB0(uint64_t a1, uint64_t a2)
{
  return sub_1001D6CDC(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_1001C98BC);
}

uint64_t sub_1001D6CDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v7 = *(void *)(a3(0) - 8);
  uint64_t v8 = v4[2];
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  uint64_t v11 = (char *)v4 + ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return a4(a1, a2, v8, v9, v10, v11);
}

void sub_1001D6DE4(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  id v9 = objc_allocWithZone((Class)AKAppleIDAuthenticationController);
  swift_retain();
  swift_retain();
  id v10 = [v9 init];
  if (v10)
  {
    uint64_t v11 = v10;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetching User Information", v15, 2u);
      swift_slowDealloc();
    }

    NSString v16 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1001D714C;
    void aBlock[5] = (uint64_t)v8;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10004DAE8;
    aBlock[3] = (uint64_t)&unk_100300120;
    unint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v11 getUserInformationForAltDSID:v16 completion:v17];
    _Block_release(v17);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E778);
    Swift::String v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "AuthController is nil", v21, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void aBlock[6] = -7057;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    NSString v16 = (NSString)aBlock[0];
    sub_100179334(0, aBlock[0], a3, a4, a5);
    swift_release();
  }
}

uint64_t sub_1001D710C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001D714C(void *a1, uint64_t a2)
{
  sub_100179334(a1, a2, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1001D7158()
{
  String.utf8CString.getter();
  int v0 = _set_user_dir_suffix();
  uint64_t result = swift_release();
  if (!v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1001D71E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v6 = v5;
  uint64_t v70 = a5;
  uint64_t v71 = a4;
  uint64_t v72 = a3;
  uint64_t v62 = a2;
  uint64_t v8 = sub_100009F04(&qword_10032B478);
  uint64_t v66 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  unint64_t v65 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v67 = v15;
  unint64_t v68 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v59 - v17;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_100007288(v19, (uint64_t)qword_10033E760);
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v64 = v12 + 16;
  v63(v18, a1, v11);
  uint64_t v69 = v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v60 = v6;
    aBlock[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v74 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v61 = a1;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v59 = v12;
    uint64_t v74 = sub_100135190(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v74 = sub_100135190(v27, v28, aBlock);
    a1 = v61;
    uint64_t v12 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: Starting cleanup for beneficiary with beneficiaryID - %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    uint64_t v6 = v60;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }

  if (v72)
  {
    uint64_t v29 = v12;
LABEL_8:
    id v30 = objc_allocWithZone((Class)AKInheritanceContext);
    swift_bridgeObjectRetain();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v32 = [v30 initWithOwnerAltDSID:v31];

    UUID.uuidString.getter();
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 setBeneficiaryIdentifier:v33];

    id v34 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v36 = [v34 initWithBeneficiairyIdentifier:isa];

    [v32 setAccessKey:v36];
    [v32 setManifest:0];
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Removing Beneficiary from IDMS...", v39, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = v65;
    uint64_t v41 = v66;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController, v8);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v8);
    uint64_t v42 = (void *)aBlock[0];
    uint64_t v43 = swift_allocObject();
    swift_weakInit();
    uint64_t v44 = v68;
    v63(v68, a1, v11);
    unint64_t v45 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
    uint64_t v46 = v11;
    unint64_t v47 = (v67 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v48 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v48 + v45, v44, v46);
    *(void *)(v48 + v47) = v43;
    os_log_type_t v49 = (void (**)(uint64_t))(v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v50 = v70;
    int *v49 = v71;
    v49[1] = v50;
    aBlock[4] = (uint64_t)sub_1001DD410;
    void aBlock[5] = v48;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    aBlock[3] = (uint64_t)&unk_100300480;
    unint64_t v51 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v42 removeBeneficiaryWithInheritanceContext:v32 completion:v51];
    _Block_release(v51);

    swift_unknownObjectRelease();
    return;
  }
  id v52 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v53 = [v52 aa_primaryAppleAccount];

  if (v53)
  {
    id v54 = [v53 aa_altDSID];

    if (v54)
    {
      uint64_t v29 = v12;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      goto LABEL_8;
    }
  }
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "No altDSID for owner found.", v57, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for InheritanceError(0);
  uint64_t v74 = 5;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v58 = (void *)aBlock[0];
  v71(aBlock[0]);
}

uint64_t sub_1001D7A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v39 = *(uint8_t **)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v35[1] = a3 + 16;
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    uint64_t v15 = sub_100007288(v14, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    v35[0] = v15;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v36 = a4;
    uint64_t v37 = a5;
    uint64_t v38 = a2;
    if (v18)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      uint64_t v40 = sub_100135190(v20, v21, v41);
      a2 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error removing Beneficiary from IdMS: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v27 = v39;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v13, a2, v10);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)id v30 = 136315138;
      uint64_t v39 = v30 + 4;
      sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v31, v32, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v27 + 1))(v13, v10);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Continuing with client removal of beneficiary %s following IDMS failure", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*((void (**)(char *, uint64_t))v27 + 1))(v13, v10);
    }

    uint64_t v34 = v36;
    uint64_t v33 = v37;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1001D7F8C(v38, v34, v33);
      swift_errorRelease();
      return swift_release();
    }
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E760);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully removed Beneficiary from IdMS", v25, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_1001D7F8C(a2, a4, a5);
      return swift_release();
    }
  }
  return result;
}

void sub_1001D7F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v37 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v37, v8);
  uint64_t v36 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04(&qword_100321CD0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E760);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v34 = v4;
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v33 = v7;
    aBlock[0] = v18;
    uint64_t v35 = a1;
    *(_DWORD *)os_log_type_t v17 = 136315138;
    v32[1] = v17 + 4;
    uint64_t v40 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v40 = sub_100135190(v19, v20, aBlock);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v4 = v34;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Removing Access Key…", v17, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v33;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__securityController, v9);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  unint64_t v21 = (void *)aBlock[0];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v24 = v36;
  uint64_t v25 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v36, a1, v37);
  unint64_t v26 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v27 = (v7 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v28 + v26, v24, v25);
  *(void *)(v28 + v27) = v23;
  os_log_type_t v29 = (void *)(v28 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v30 = v39;
  *os_log_type_t v29 = v38;
  v29[1] = v30;
  aBlock[4] = (uint64_t)sub_1001DD474;
  void aBlock[5] = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10025ED44;
  aBlock[3] = (uint64_t)&unk_100300250;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v21 removeInheritanceAccessKeyForBeneficiaryID:isa completion:v31];
  _Block_release(v31);
  swift_unknownObjectRelease();
}

uint64_t sub_1001D83F8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_getErrorValue();
      uint64_t v8 = Error.localizedDescription.getter();
      sub_100135190(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error removing benefactor from storage: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

uint64_t sub_1001D85FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v24 = a2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v21 = a3;
    v26[0] = v16;
    uint64_t v22 = v4;
    uint64_t v23 = a1;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v25 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v25 = sub_100135190(v17, v18, v26);
    uint64_t v4 = v22;
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: Removing BenefactorInfoRecord...", v15, 0xCu);
    swift_arrayDestroy();
    a3 = v21;
    swift_slowDealloc();
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_100008EF8(v26, v26[3]);
  uint64_t v19 = (void *)swift_allocObject();
  _OWORD v19[2] = v24;
  v19[3] = a3;
  v19[4] = v4;
  swift_retain();
  swift_retain();
  sub_1000EAD74(a1, (uint64_t)sub_1001DDC24, (uint64_t)v19);
  swift_release();
  return sub_100008EA8((uint64_t)v26);
}

uint64_t sub_1001D88FC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController;
  uint64_t v2 = sub_100009F04(&qword_10032B478);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__securityController;
  uint64_t v6 = sub_100009F04(&qword_100321CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1001D8A30()
{
  return type metadata accessor for InheritanceCleanupController();
}

uint64_t type metadata accessor for InheritanceCleanupController()
{
  uint64_t result = qword_10032B5B0;
  if (!qword_10032B5B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001D8A84()
{
  sub_10001BF34(319, (unint64_t *)&unk_10032B5C0, (uint64_t *)&unk_100325A50);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, qword_10032B5E0, &qword_1003218C0);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1001D8BB8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1001D8C80(a5);
      swift_release();
    }
    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_1001D8C80(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  uint64_t v24 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E760);
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = v6;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing Inheritance Health Record...", v16, 2u);
    uint64_t v6 = v23;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100008EF8(v25, v25[3]);
  uint64_t v17 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v24, a1, v4);
  unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v19 = (v6 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20 + v18, v17, v4);
  *(void *)(v20 + v19) = v2;
  swift_retain();
  sub_1000ECA54(a1, (uint64_t)sub_1001DDB48, v20);
  swift_release();
  return sub_100008EA8((uint64_t)v25);
}

uint64_t sub_1001D8FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v33 = a2;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v32 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v32, v6);
  uint64_t v31 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E760);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v30 = a1;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = v5;
    uint64_t v16 = (uint8_t *)v15;
    v37[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v28 = v16 + 4;
    uint64_t v36 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v36 = sub_100135190(v17, v18, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: Removing Invitation Record...", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v29;
    swift_slowDealloc();
  }

  uint64_t v19 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v35 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_100008EF8(v37, v37[3]);
  uint64_t v21 = v31;
  uint64_t v20 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v31, a1, v32);
  unint64_t v22 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v23 = (v5 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v24 + v22, v21, v20);
  uint64_t v25 = (void *)(v24 + v23);
  uint64_t v26 = v34;
  *uint64_t v25 = v33;
  v25[1] = v26;
  *(void *)(v24 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8)) = v19;
  swift_retain();
  swift_retain();
  sub_1000E53EC(a1, (uint64_t)sub_1001DD9D4, v24);
  swift_release();
  return sub_100008EA8((uint64_t)v37);
}

uint64_t sub_1001D938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v61 = a5;
  uint64_t v59 = a4;
  uint64_t v64 = a2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v63 - 8);
  uint64_t v14 = __chkstk_darwin(v63, v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = &unk_100320000;
  uint64_t v62 = v8;
  uint64_t v60 = v11;
  if (a1)
  {
    swift_errorRetain();
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    id v22 = [v21 code];

    if (v22 == (id)34)
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100007288(v23, (uint64_t)qword_10033E760);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Key not found in Octagon Trust. Delete record from CK.", v26, 2u);
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
      }
    }
    else
    {
      uint64_t v57 = a3;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E760);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        v65[0] = swift_slowAlloc();
        uint64_t v56 = v7;
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v55 = v38 + 4;
        uint64_t v66 = a1;
        swift_errorRetain();
        sub_100009F04((uint64_t *)&unk_100325850);
        uint64_t v39 = String.init<A>(describing:)();
        uint64_t v66 = sub_100135190(v39, v40, v65);
        uint64_t v7 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v20 = &unk_100320000;
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error removing access keys for beneficiary: %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      a3 = v57;
    }
  }
  else
  {
    uint64_t v57 = a3;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    uint64_t v28 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v19, v64, v63);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v56 = v7;
      v65[0] = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v55 = v31 + 4;
      sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v66 = sub_100135190(v33, v34, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v28);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Success removing access key for beneficiaryID: %s", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v7 = v56;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v28);
    }

    a3 = v57;
    uint64_t v20 = (void *)&unk_100320000;
  }
  if (v20[370] != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_100007288(v41, (uint64_t)qword_10033E760);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Deleting beneficiary record from CK.", v44, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v46 = result;
    uint64_t v47 = v63;
    uint64_t v48 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v64, v63);
    unint64_t v49 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v50 = (char *)swift_allocObject();
    uint64_t v51 = v61;
    *((void *)v50 + 2) = v59;
    *((void *)v50 + 3) = v51;
    *((void *)v50 + 4) = a3;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v50[v49], v16, v47);
    uint64_t v52 = v62;
    id v53 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v60, v46 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
    swift_retain();
    swift_retain();
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v7);
    sub_100008EF8(v65, v65[3]);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = sub_1001DD490;
    *(void *)(v54 + 24) = v50;
    swift_retain();
    sub_1000E7554(v48, (uint64_t)sub_1001DD508, v54);
    swift_release();
    sub_100008EA8((uint64_t)v65);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001D9BEC(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v73 = a5;
  uint64_t v75 = a4;
  uint64_t v76 = a2;
  uint64_t v77 = (void (*)(uint64_t))a3;
  uint64_t v78 = (char *)a1;
  uint64_t v5 = sub_100009F04(&qword_100321CD0);
  uint64_t v71 = *(void *)(v5 - 8);
  uint64_t v72 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v74 + 64);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v65 - v17;
  uint64_t v19 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v19, v20);
  id v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (uint64_t *)((char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730((uint64_t)v78, (uint64_t)v26, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v27 = *v26;
    swift_errorRetain();
    v76(v27);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v78 = v18;
    uint64_t v29 = v13;
    unint64_t v68 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1001DDC30((uint64_t)v26, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_100019730((uint64_t)&v22[*(int *)(v19 + 44)], (uint64_t)v11, (uint64_t *)&unk_100321CE0);
    uint64_t v30 = v74;
    int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v11, 1, v12);
    uint64_t v69 = v22;
    if (v31 == 1)
    {
      uint64_t v32 = (uint64_t)v22;
      uint64_t v33 = v12;
      sub_100006574((uint64_t)v11, (uint64_t *)&unk_100321CE0);
      uint64_t v35 = v76;
      unint64_t v34 = v77;
      uint64_t v36 = v73;
      uint64_t v37 = v29;
    }
    else
    {
      uint64_t v38 = v30;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      uint64_t v40 = (uint64_t)v78;
      v39(v78, v11, v12);
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      uint64_t v37 = v13;
      if (Strong)
      {
        uint64_t v42 = v71;
        os_log_type_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
        uint64_t v66 = (void (*)(unint64_t, char *, uint64_t))v39;
        uint64_t v44 = v13;
        unint64_t v45 = v70;
        uint64_t v46 = v72;
        v43(v70, Strong + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__securityController, v72);
        uint64_t v67 = v12;
        Dependency.wrappedValue.getter();
        swift_release();
        uint64_t v47 = v45;
        uint64_t v37 = v44;
        uint64_t v38 = v30;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v47, v46);
        uint64_t v48 = (void *)aBlock[0];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v50 = v68;
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v68, v78, v67);
        unint64_t v51 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
        uint64_t v52 = swift_allocObject();
        id v53 = v50;
        uint64_t v40 = (uint64_t)v78;
        v66(v52 + v51, v53, v67);
        aBlock[4] = sub_1001DD730;
        void aBlock[5] = v52;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10025ED44;
        aBlock[3] = &unk_100300318;
        uint64_t v54 = _Block_copy(aBlock);
        swift_release();
        [v48 removeInheritanceAccessKeyForBeneficiaryID:isa completion:v54];
        uint64_t v55 = v54;
        uint64_t v12 = v67;
        _Block_release(v55);
        swift_unknownObjectRelease();
      }
      uint64_t v33 = v12;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v12);
      uint64_t v35 = v76;
      unint64_t v34 = v77;
      uint64_t v36 = v73;
      uint64_t v30 = v38;
      uint64_t v32 = (uint64_t)v69;
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v56 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v68, v36, v33);
      unint64_t v57 = (*(unsigned __int8 *)(v30 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v58 = v37 + v57 + 7;
      uint64_t v59 = v30;
      unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v61 = swift_allocObject();
      *(void *)(v61 + 16) = v75;
      (*(void (**)(unint64_t, char *, uint64_t))(v59 + 32))(v61 + v57, v56, v33);
      uint64_t v62 = (void (**)(uint64_t))(v61 + v60);
      *uint64_t v62 = v35;
      v62[1] = v34;
      swift_retain();
      swift_retain();
      uint64_t v63 = (uint64_t)v69;
      sub_1001DAB30((uint64_t)v69, (uint64_t)sub_1001DD5FC, v61);
      swift_release();
      swift_release();
      uint64_t v64 = v63;
    }
    else
    {
      uint64_t v64 = v32;
    }
    return sub_1001DDCBC(v64, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

void sub_1001DA26C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v24 = a1;
      uint64_t v25 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v24 = sub_100135190(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v10, "Error removing access keys for beneficiary: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v21 = v23;
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E760);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v24 = sub_100135190(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Success removing access key for otPeerID: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

uint64_t sub_1001DA6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v35 = v13;
  uint64_t v36 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v34 = a4;
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v31 = a2;
      v38[0] = v18;
      uint64_t v32 = v10;
      uint64_t v33 = a5;
      *(_DWORD *)os_log_type_t v17 = 136315138;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v37 = sub_100135190(v19, v20, v38);
      uint64_t v10 = v32;
      a5 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error removing Beneficiary from storage: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    a4 = v34;
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E760);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Removing Beneficiary local records.", v24, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v26 = swift_allocObject();
    swift_weakInit();
    uint64_t v27 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v36, a3, v10);
    uint64_t v28 = v10;
    unint64_t v29 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v30 = (char *)swift_allocObject();
    *((void *)v30 + 2) = a4;
    *((void *)v30 + 3) = a5;
    *((void *)v30 + 4) = v26;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v30[v29], v27, v28);
    swift_retain();
    swift_retain();
    sub_1001D8FA8(a3, (uint64_t)sub_1001DD89C, (uint64_t)v30);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1001DAB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E760);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = v4;
    os_log_type_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v25 = a2;
    v28[0] = v18;
    uint64_t v26 = a3;
    *(_DWORD *)os_log_type_t v17 = 136315138;
    os_log_type_t v23 = v17 + 4;
    uint64_t v27 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v27 = sub_100135190(v19, v20, v28);
    a3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Removing BeneficiaryInfoRecord...", v17, 0xCu);
    swift_arrayDestroy();
    a2 = v25;
    swift_slowDealloc();
    uint64_t v4 = v24;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v8);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100008EF8(v28, v28[3]);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  swift_retain();
  sub_1000E884C(a1, (uint64_t)sub_1001DD7A0, v21);
  swift_release();
  return sub_100008EA8((uint64_t)v28);
}

uint64_t sub_1001DAE34(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100321CF0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (void *)((char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  os_log_type_t v17 = (void *)((char *)v27 - v16);
  sub_100019730(a1, (uint64_t)v27 - v16, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v27[1] = a3;
      uint64_t v28 = v18;
      uint64_t v29 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      v27[0] = v22 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v28 = sub_100135190(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error fetching beneficiaries for removal: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v14 = v18;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v14);
    swift_errorRelease();
    return sub_100006574((uint64_t)v14, &qword_100321CF0);
  }
  else
  {
    sub_1001DDC30((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_100018ABC((uint64_t)v9, (uint64_t)v14);
    swift_storeEnumTagMultiPayload();
    a2(v14);
    sub_100006574((uint64_t)v14, &qword_100321CF0);
    return sub_1001DDCBC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_1001DB1B4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = a3;
    unint64_t v20 = v32;
    uint64_t v21 = *v19;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = v21;
      v34[0] = v26;
      *(_DWORD *)unint64_t v25 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v33 = sub_100135190(v27, v28, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error fetching benefactors for removal: %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v20(v21);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_1001DDC30((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_100008EF8(v34, v34[3]);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v32;
    *(void *)(v29 + 24) = a3;
    swift_retain();
    sub_1000EBF58((uint64_t)v15, (uint64_t)sub_1001DDC98, v29);
    swift_release();
    sub_1001DDCBC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    return sub_100008EA8((uint64_t)v34);
  }
}

uint64_t sub_1001DB5EC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  uint64_t v7 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v10, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v21 = a4;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v22 = v11;
      uint64_t v23 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v22 = sub_100135190(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v21, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(v11);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100006574((uint64_t)v10, &qword_1003229D0);
    return ((uint64_t (*)(void))a2)(0);
  }
}

void sub_1001DB890(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v53 = a2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = &v50[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v54 = v16;
  uint64_t v55 = v17;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = &v50[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v21, v22);
  os_log_type_t v24 = (uint64_t *)&v50[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100019730(a1, (uint64_t)v24, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001DDC30((uint64_t)v24, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(v11, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
    sub_100008EF8(v60, v60[3]);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v56;
    *(void *)(v40 + 24) = v57;
    swift_retain();
    sub_1000E6700((uint64_t)v15, (uint64_t)sub_1001DDA80, v40);
    swift_release();
    sub_1001DDCBC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    sub_100008EA8((uint64_t)v60);
    return;
  }
  uint64_t v25 = *v24;
  v60[0] = *v24;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for InheritanceError(0);
  if (swift_dynamicCast())
  {
    uint64_t v26 = (void *)v59;
    v60[0] = v59;
    uint64_t v58 = 3;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v27 = (void *)v59;
    uint64_t v58 = v59;
    char v28 = static _BridgedStoredNSError.== infix(_:_:)();

    if (v28)
    {
      id v52 = v26;
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_100007288(v29, (uint64_t)qword_10033E760);
      uint64_t v31 = v54;
      uint64_t v30 = v55;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v55 + 16))(v20, v53, v54);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        v60[0] = v53;
        *(_DWORD *)uint64_t v35 = 136315394;
        uint64_t v59 = type metadata accessor for InheritanceCleanupController();
        sub_100009F04(&qword_10032B718);
        uint64_t v36 = String.init<A>(describing:)();
        int v51 = v34;
        uint64_t v59 = sub_100135190(v36, v37, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v59 = sub_100135190(v38, v39, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v20, v31);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v51, "%s: There is no InheritanceInvitationRecord for beneficiaryID - %s.", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v20, v31);
      }

      uint64_t v59 = 11;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v49 = (void *)v60[0];
      v56(v60[0]);
      swift_errorRelease();

      return;
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_100007288(v41, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v59 = v25;
    v60[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315138;
    swift_errorRetain();
    uint64_t v46 = String.init<A>(describing:)();
    uint64_t v59 = sub_100135190(v46, v47, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error fetching invitation for removal: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v48 = v56;
  swift_errorRetain();
  v48(v25);
  swift_errorRelease();
  swift_errorRelease();
}

void sub_1001DC0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a2;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v45 = v14;
  uint64_t v46 = v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1001DDC30((uint64_t)v22, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a3 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v5);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_100008EF8(v49, v49[3]);
    sub_1000ED66C((uint64_t)v13, (uint64_t)sub_1001DC818, 0);
    sub_1001DDCBC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    sub_100008EA8((uint64_t)v49);
    return;
  }
  uint64_t v23 = *v22;
  v49[0] = *v22;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for InheritanceError(0);
  if (swift_dynamicCast())
  {
    os_log_type_t v24 = (void *)v48;
    v49[0] = v48;
    uint64_t v47 = 3;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v25 = (void *)v48;
    uint64_t v47 = v48;
    char v26 = static _BridgedStoredNSError.== infix(_:_:)();

    if (v26)
    {
      if (qword_100320B90 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_100007288(v27, (uint64_t)qword_10033E760);
      uint64_t v28 = v45;
      uint64_t v29 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v18, v44, v45);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v49[0] = v44;
        *(_DWORD *)uint64_t v32 = 136315394;
        uint64_t v48 = type metadata accessor for InheritanceCleanupController();
        sub_100009F04(&qword_10032B718);
        uint64_t v33 = String.init<A>(describing:)();
        uint64_t v48 = sub_100135190(v33, v34, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12) = 2080;
        sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v48 = sub_100135190(v35, v36, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v28);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s: There is no InheritanceHealthRecord for beneficiaryID - %s.", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_14:
        swift_errorRelease();
        return;
      }
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v28);

      return;
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100007288(v37, (uint64_t)qword_10033E760);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    uint64_t v48 = v23;
    v49[0] = v41;
    *(_DWORD *)uint64_t v40 = 136315138;
    swift_errorRetain();
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v48 = sub_100135190(v42, v43, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Error fetching Health Record for removal: %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_14;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
}

void sub_1001DC818(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v5, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = *v5;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v6;
      uint64_t v15 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v14 = sub_100135190(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error removing the Health Record: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100006574((uint64_t)v5, &qword_1003229D0);
  }
}

uint64_t sub_1001DCA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a4;
  uint64_t v79 = a3;
  uint64_t v67 = a2;
  uint64_t v9 = sub_100009F04(&qword_10032B478);
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v70 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v73 = v16;
  uint64_t v74 = (char *)v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v65 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_1001DD3C4;
  *(void *)(v21 + 24) = v20;
  uint64_t v77 = v21;
  uint64_t v22 = qword_100320B90;
  swift_retain();
  uint64_t v78 = v20;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_100007288(v23, (uint64_t)qword_10033E760);
  unint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v69 = v13 + 16;
  v68(v19, a1, v12);
  uint64_t v76 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    v65[0] = a5;
    uint64_t v28 = v27;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v81 = type metadata accessor for InheritanceCleanupController();
    sub_100009F04(&qword_10032B718);
    uint64_t v66 = a1;
    uint64_t v29 = String.init<A>(describing:)();
    v65[1] = a6;
    uint64_t v81 = sub_100135190(v29, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    sub_1001DD428((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v81 = sub_100135190(v31, v32, aBlock);
    a1 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: Starting cleanup for beneficiary with beneficiaryID - %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = (void (*)(uint64_t))v65[0];
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }

  if (v79) {
    goto LABEL_7;
  }
  id v58 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v59 = [v58 aa_primaryAppleAccount];

  if (v59)
  {
    id v60 = [v59 aa_altDSID];

    if (v60)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_7:
      uint64_t v33 = v13;
      id v34 = objc_allocWithZone((Class)AKInheritanceContext);
      swift_bridgeObjectRetain();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = [v34 initWithOwnerAltDSID:v35];

      UUID.uuidString.getter();
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v36 setBeneficiaryIdentifier:v37];

      id v38 = objc_allocWithZone((Class)AKInheritanceAccessKey);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v40 = [v38 initWithBeneficiairyIdentifier:isa];

      [v36 setAccessKey:v40];
      [v36 setManifest:0];
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Removing Beneficiary from IDMS...", v43, 2u);
        swift_slowDealloc();
      }

      uint64_t v44 = v70;
      uint64_t v45 = v71;
      uint64_t v46 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v75 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController, v72);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
      uint64_t v47 = (void *)aBlock[0];
      uint64_t v48 = swift_allocObject();
      swift_weakInit();
      unint64_t v49 = v74;
      v68(v74, a1, v12);
      uint64_t v50 = v33;
      unint64_t v51 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      unint64_t v52 = (v73 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v53 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v53 + v51, v49, v12);
      *(void *)(v53 + v52) = v48;
      uint64_t v54 = (void (**)(uint64_t))(v53 + ((v52 + 15) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v55 = (void (*)(uint64_t))v77;
      void *v54 = sub_1001DD3CC;
      v54[1] = v55;
      aBlock[4] = (uint64_t)sub_1001DD410;
      void aBlock[5] = v53;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10025ED44;
      aBlock[3] = (uint64_t)&unk_100300200;
      uint64_t v56 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v47 removeBeneficiaryWithInheritanceContext:v36 completion:v56];
      _Block_release(v56);
      swift_release();
      swift_release();

      return swift_unknownObjectRelease();
    }
  }
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "No altDSID for owner found.", v63, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for InheritanceError(0);
  uint64_t v81 = 5;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001DD428((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v64 = (void *)aBlock[0];
  swift_retain();
  sub_1000D624C((uint64_t)v64, a5);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_1001DD38C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DD3C4(uint64_t a1)
{
  return sub_1000C94B0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void sub_1001DD3CC(uint64_t a1)
{
  sub_1000C5B48(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001DD3D4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DD410(uint64_t a1)
{
  return sub_1001DDDE0(a1, sub_1001D7A40);
}

uint64_t sub_1001DD428(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DD474(uint64_t a1)
{
  return sub_1001DDDE0(a1, sub_1001D938C);
}

uint64_t sub_1001DD490(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = (void (*)(uint64_t))v1[2];
  uint64_t v5 = (void (*)(uint64_t))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001D9BEC(a1, v4, v5, v6, v7);
}

uint64_t sub_1001DD508(uint64_t a1)
{
  return sub_1001DAE34(a1, *(void (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001DD510()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001DD5FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_1001DA6DC(a1, v5, v6, v8, v9);
}

uint64_t sub_1001DD6A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1001DD730(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1001DA26C(a1, v4);
}

uint64_t sub_1001DD7A0(uint64_t a1)
{
  return sub_1001DB5EC(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error removing the beneficiary: %s");
}

uint64_t sub_1001DD7C8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001DD89C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = (void (*)(uint64_t))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1001D8BB8(a1, v4, v5, v6, v7);
}

uint64_t sub_1001DD914()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1001DD9D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);

  sub_1001DB890(a1, v1 + v4, v7, v8, v6);
}

uint64_t sub_1001DDA80(uint64_t a1)
{
  return sub_1001DB5EC(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error removing the invitation: %s");
}

uint64_t sub_1001DDAA4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_1001DDB48(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1001DC0A4(a1, v1 + v4, v5);
}

uint64_t sub_1001DDBE4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001DDC24(uint64_t a1)
{
  return sub_1001DB1B4(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1001DDC30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001DDC98(uint64_t a1)
{
  return sub_1001DB5EC(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error removing the benefactor: %s");
}

uint64_t sub_1001DDCBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001DDD20()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001DDDE0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v2 + v5;
  uint64_t v8 = *(void *)(v2 + v6);
  uint64_t v9 = (uint64_t *)(v2 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a2(a1, v7, v8, v10, v11);
}

uint64_t sub_1001DDECC(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v11);
  uint64_t v16 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v22;
  *(void *)(v17 + 16) = v21;
  *(void *)(v17 + 24) = v18;
  aBlock[4] = sub_1001DE31C;
  void aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1003004E0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = &_swiftEmptyArrayStorage;
  sub_1000DEE54();
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v23);
  return swift_release();
}

uint64_t sub_1001DE210()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    swift_retain();
    uint64_t result = swift_release();
    if (v1)
    {
      sub_1000304BC();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1001DE280()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonActivityScheduler()
{
  return self;
}

uint64_t sub_1001DE2DC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DE31C()
{
  return sub_1001DE210();
}

uint64_t sub_1001DE324(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  switch(a3)
  {
    case 4:
      return sub_100030A8C();
    case 3:
      return sub_100030A68();
    case 2:
      return a4();
  }
  return result;
}

BOOL sub_1001DE380(char *a1, char *a2)
{
  return qword_1002B04E0[*a1] == qword_1002B04E0[*a2];
}

Swift::Int sub_1001DE3A4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B04E0[v1]);
  return Hasher._finalize()();
}

void sub_1001DE3F4()
{
  Hasher._combine(_:)(qword_1002B04E0[*v0]);
}

Swift::Int sub_1001DE42C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B04E0[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001DE478@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001DF76C(*a1);
  *a2 = result;
  return result;
}

void sub_1001DE4A4(void *a1@<X8>)
{
  *a1 = qword_1002B04E0[*v1];
}

void sub_1001DE4BC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v3 = sub_100009F04(&qword_100326FF0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v104 = (uint64_t)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v109 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PushMessage();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (void *)((char *)v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14[16] = sub_100220CAC((uint64_t)_swiftEmptyArrayStorage);
  *uint64_t v14 = a1;
  id v15 = a1;
  id v16 = [v15 userInfo];
  if (!v16)
  {
    __break(1u);
    goto LABEL_112;
  }
  uint64_t v18 = v16;
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  long long v107 = v14;
  uint64_t v108 = v19;
  v14[2] = v19;
  uint64_t v20 = qword_100320B70;
  swift_bridgeObjectRetain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_100007288(v6, (uint64_t)qword_10033E700);
  uint64_t v22 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v9, v21, v6);
  id v23 = v15;
  uint64_t v24 = v6;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v25, v26))
  {

    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v24);
    goto LABEL_8;
  }
  uint64_t v100 = v24;
  uint64_t v101 = v21;
  uint64_t v105 = v11;
  uint64_t v102 = v10;
  uint64_t v27 = (uint8_t *)swift_slowAlloc();
  *(void *)&long long v113 = swift_slowAlloc();
  *(_DWORD *)uint64_t v27 = 136315138;
  id v28 = [v23 userInfo];
  uint64_t v17 = &v118;
  id v103 = v23;
  if (!v28)
  {
LABEL_112:

    __break(1u);
    return;
  }
  uint64_t v29 = v28;
  v99[1] = v27 + 4;
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v30 = Dictionary.description.getter();
  unint64_t v32 = v31;
  swift_bridgeObjectRelease();
  *(void *)&long long v115 = sub_100135190(v30, v32, (uint64_t *)&v113);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  id v23 = v103;

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v25, v26, "Received push message with userInfo: %s", v27, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v109 + 8))(v9, v100);
  uint64_t v10 = v102;
  uint64_t v11 = v105;
LABEL_8:
  *(void *)&long long v115 = 6581603;
  *((void *)&v115 + 1) = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v34 = (uint64_t)v107;
  uint64_t v33 = v108;
  if (*(void *)(v108 + 16) && (unint64_t v35 = sub_100135A98((uint64_t)&v113), (v36 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v33 + 56) + 32 * v35, (uint64_t)&v115);
  }
  else
  {
    long long v115 = 0u;
    long long v116 = 0u;
  }
  sub_100098CF0((uint64_t)&v113);
  if (*((void *)&v116 + 1))
  {
    NSString v37 = v23;
    int v38 = swift_dynamicCast();
    if (v38) {
      uint64_t v39 = v111;
    }
    else {
      uint64_t v39 = 0;
    }
    char v40 = v38 ^ 1;
  }
  else
  {
    NSString v37 = v23;
    sub_100006574((uint64_t)&v115, &qword_100328490);
    uint64_t v39 = 0;
    char v40 = 1;
  }
  char v41 = sub_1001DF5A0(v39, v40);
  char v42 = v41;
  if (v41 == 6)
  {
    swift_bridgeObjectRelease();
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      uint64_t v46 = "Push Message has invalid command. Ignoring";
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v43, v44, v46, v45, 2u);
      swift_slowDealloc();
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  *(unsigned char *)(v34 + 8) = v41;
  *(void *)&long long v115 = 0x6469736461;
  *((void *)&v115 + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v33 + 16) && (unint64_t v47 = sub_100135A98((uint64_t)&v113), (v48 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v33 + 56) + 32 * v47, (uint64_t)&v115);
  }
  else
  {
    long long v115 = 0u;
    long long v116 = 0u;
  }
  sub_100098CF0((uint64_t)&v113);
  if (*((void *)&v116 + 1))
  {
    int v49 = swift_dynamicCast();
    uint64_t v51 = *((void *)&v111 + 1);
    uint64_t v50 = v111;
    if (!v49)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
  }
  else
  {
    sub_100006574((uint64_t)&v115, &qword_100328490);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  *(void *)(v34 + 24) = v50;
  *(void *)(v34 + 32) = v51;
  *(void *)&long long v111 = 0x64696E7874;
  *((void *)&v111 + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v33 + 16) && (unint64_t v52 = sub_100135A98((uint64_t)&v113), (v53 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v33 + 56) + 32 * v52, (uint64_t)&v115);
  }
  else
  {
    long long v115 = 0u;
    long long v116 = 0u;
  }
  sub_100098CF0((uint64_t)&v113);
  if (*((void *)&v116 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v54 = *((void *)&v111 + 1);
      *(void *)(v34 + 40) = v111;
      *(void *)(v34 + 48) = v54;
      *(void *)&long long v115 = 0x79656B6C7275;
      *((void *)&v115 + 1) = 0xE600000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v33 + 16))
      {
        unint64_t v55 = sub_100135A98((uint64_t)&v113);
        uint64_t v56 = v37;
        if (v57)
        {
          sub_100047DD4(*(void *)(v33 + 56) + 32 * v55, (uint64_t)&v115);
        }
        else
        {
          long long v115 = 0u;
          long long v116 = 0u;
        }
      }
      else
      {
        long long v115 = 0u;
        long long v116 = 0u;
        uint64_t v56 = v37;
      }
      sub_100098CF0((uint64_t)&v113);
      if (*((void *)&v116 + 1))
      {
        int v58 = swift_dynamicCast();
        uint64_t v60 = *((void *)&v111 + 1);
        uint64_t v59 = v111;
        if (!v58)
        {
          uint64_t v59 = 0;
          uint64_t v60 = 0;
        }
      }
      else
      {
        sub_100006574((uint64_t)&v115, &qword_100328490);
        uint64_t v59 = 0;
        uint64_t v60 = 0;
      }
      *(void *)(v34 + 56) = v59;
      *(void *)(v34 + 64) = v60;
      *(void *)&long long v115 = 6580589;
      *((void *)&v115 + 1) = 0xE300000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v33 + 16) && (unint64_t v61 = sub_100135A98((uint64_t)&v113), (v62 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v33 + 56) + 32 * v61, (uint64_t)&v115);
      }
      else
      {
        long long v115 = 0u;
        long long v116 = 0u;
      }
      sub_100098CF0((uint64_t)&v113);
      if (*((void *)&v116 + 1))
      {
        int v63 = swift_dynamicCast();
        uint64_t v65 = *((void *)&v111 + 1);
        uint64_t v64 = v111;
        if (!v63)
        {
          uint64_t v64 = 0;
          uint64_t v65 = 0;
        }
      }
      else
      {
        sub_100006574((uint64_t)&v115, &qword_100328490);
        uint64_t v64 = 0;
        uint64_t v65 = 0;
      }
      *(void *)(v34 + 72) = v64;
      *(void *)(v34 + 80) = v65;
      *(void *)&long long v111 = 7565409;
      *((void *)&v111 + 1) = 0xE300000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v33 + 16) && (unint64_t v66 = sub_100135A98((uint64_t)&v113), (v67 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v33 + 56) + 32 * v66, (uint64_t)&v115);
      }
      else
      {
        long long v115 = 0u;
        long long v116 = 0u;
      }
      sub_100098CF0((uint64_t)&v113);
      if (*((void *)&v116 + 1))
      {
        sub_100009F04((uint64_t *)&unk_10032DBD0);
        if (swift_dynamicCast())
        {
          uint64_t v68 = v111;
          if ((void)v111)
          {
            if (*(void *)(v111 + 16) && (unint64_t v69 = sub_1001358B8(0x7472656C61, 0xE500000000000000), (v70 & 1) != 0))
            {
              sub_100047DD4(*(void *)(v68 + 56) + 32 * v69, (uint64_t)&v113);
            }
            else
            {
              long long v113 = 0u;
              long long v114 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v114 + 1))
            {
              sub_100009F04((uint64_t *)&unk_10032DBD0);
              int v97 = swift_dynamicCast();
              uint64_t v71 = v108;
              if (v97)
              {
                unint64_t v72 = v115;
                goto LABEL_74;
              }
LABEL_73:
              unint64_t v72 = sub_100220CAC((uint64_t)_swiftEmptyArrayStorage);
LABEL_74:
              sub_1000A0480(v72, (uint64_t)&v115);
              char v73 = v117;
              long long v74 = v116;
              *(_OWORD *)(v34 + 88) = v115;
              *(_OWORD *)(v34 + 104) = v74;
              *(unsigned char *)(v34 + 120) = v73;
              v110._uint64_t countAndFlagsBits = 0x706574537478656ELL;
              v110._object = (void *)0xE800000000000000;
              AnyHashable.init<A>(_:)();
              if (*(void *)(v71 + 16) && (unint64_t v75 = sub_100135A98((uint64_t)&v113), (v76 & 1) != 0))
              {
                sub_100047DD4(*(void *)(v71 + 56) + 32 * v75, (uint64_t)&v111);
              }
              else
              {
                long long v111 = 0u;
                long long v112 = 0u;
              }
              sub_100098CF0((uint64_t)&v113);
              if (*((void *)&v112 + 1))
              {
                if (swift_dynamicCast())
                {
                  char v77 = sub_1001F7E58(v110);
LABEL_83:
                  *(unsigned char *)(v34 + 121) = v77;
                  v110._uint64_t countAndFlagsBits = 0x61746164756663;
                  v110._object = (void *)0xE700000000000000;
                  AnyHashable.init<A>(_:)();
                  if (*(void *)(v71 + 16) && (unint64_t v78 = sub_100135A98((uint64_t)&v113), (v79 & 1) != 0))
                  {
                    sub_100047DD4(*(void *)(v71 + 56) + 32 * v78, (uint64_t)&v111);
                  }
                  else
                  {
                    long long v111 = 0u;
                    long long v112 = 0u;
                  }
                  sub_100098CF0((uint64_t)&v113);
                  if (*((void *)&v112 + 1))
                  {
                    sub_100009F04((uint64_t *)&unk_10032DBD0);
                    if (swift_dynamicCast())
                    {
                      uint64_t countAndFlagsBits = v110._countAndFlagsBits;
                      swift_bridgeObjectRelease();
                      *(void *)(v34 + 128) = countAndFlagsBits;
                    }
                  }
                  else
                  {
                    sub_100006574((uint64_t)&v111, &qword_100328490);
                  }
                  v110._uint64_t countAndFlagsBits = 0x6177647273;
                  v110._object = (void *)0xE500000000000000;
                  AnyHashable.init<A>(_:)();
                  if (*(void *)(v71 + 16) && (unint64_t v81 = sub_100135A98((uint64_t)&v113), (v82 & 1) != 0))
                  {
                    sub_100047DD4(*(void *)(v71 + 56) + 32 * v81, (uint64_t)&v111);
                  }
                  else
                  {
                    long long v111 = 0u;
                    long long v112 = 0u;
                  }
                  swift_bridgeObjectRelease();
                  sub_100098CF0((uint64_t)&v113);
                  if (*((void *)&v112 + 1))
                  {
                    sub_100009F04((uint64_t *)&unk_10032DBD0);
                    if (swift_dynamicCast())
                    {
                      uint64_t v105 = v11;
                      uint64_t v83 = v34 + *(int *)(v10 + 56);
                      uint64_t v84 = swift_bridgeObjectRetain();
                      sub_1000A23EC(v84, v83);
                      uint64_t v85 = v83;
                      uint64_t v86 = v104;
                      sub_10010E7B0(v85, v104);
                      uint64_t v87 = type metadata accessor for WalrusWebAccessInfo(0);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 1, v87) == 1)
                      {
                        sub_100006574(v86, &qword_100326FF0);
                        swift_bridgeObjectRetain();
                        uint64_t v88 = Logger.logObject.getter();
                        os_log_type_t v89 = static os_log_type_t.error.getter();
                        if (os_log_type_enabled(v88, v89))
                        {
                          uint64_t v90 = (uint8_t *)swift_slowAlloc();
                          *(void *)&long long v113 = swift_slowAlloc();
                          *(_DWORD *)uint64_t v90 = 136315138;
                          swift_bridgeObjectRetain();
                          uint64_t v102 = v10;
                          uint64_t v91 = Dictionary.description.getter();
                          id v103 = v56;
                          uint64_t v92 = v91;
                          unint64_t v94 = v93;
                          swift_bridgeObjectRelease();
                          *(void *)&long long v111 = sub_100135190(v92, v94, (uint64_t *)&v113);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          swift_bridgeObjectRelease_n();
                          swift_bridgeObjectRelease();
                          _os_log_impl((void *)&_mh_execute_header, v88, v89, "Push message has invalid web access info: %s", v90, 0xCu);
                          uint64_t v10 = v102;
                          swift_arrayDestroy();
                          uint64_t v34 = (uint64_t)v107;
                          swift_slowDealloc();
                          swift_slowDealloc();
                        }
                        else
                        {

                          swift_bridgeObjectRelease_n();
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRelease();

                        sub_100006574(v86, &qword_100326FF0);
                      }
                      uint64_t v11 = v105;
                      goto LABEL_110;
                    }
                  }
                  else
                  {

                    sub_100006574((uint64_t)&v111, &qword_100328490);
                  }
                  uint64_t v95 = v34 + *(int *)(v10 + 56);
                  uint64_t v96 = type metadata accessor for WalrusWebAccessInfo(0);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v95, 1, 1, v96);
LABEL_110:
                  uint64_t v98 = v106;
                  sub_1001DF708(v34, v106);
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v98, 0, 1, v10);
                  sub_1001E0B7C(v34, (uint64_t (*)(void))type metadata accessor for PushMessage);
                  return;
                }
              }
              else
              {
                sub_100006574((uint64_t)&v111, &qword_100328490);
              }
              char v77 = 6;
              goto LABEL_83;
            }
LABEL_72:
            sub_100006574((uint64_t)&v113, &qword_100328490);
            uint64_t v71 = v108;
            goto LABEL_73;
          }
        }
      }
      else
      {
        sub_100006574((uint64_t)&v115, &qword_100328490);
      }
      long long v113 = 0u;
      long long v114 = 0u;
      goto LABEL_72;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100006574((uint64_t)&v115, &qword_100328490);
  }
  unint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    uint64_t v46 = "Push Message has invalid message ID. Ignoring";
    goto LABEL_42;
  }
LABEL_43:

  swift_bridgeObjectRelease();
  if (v42 != 6) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v106, 1, 1, v10);
}

unint64_t sub_1001DF494()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  id v1 = *v0;
  id v2 = [v1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  return 0xD000000000000025;
}

uint64_t type metadata accessor for PushMessage()
{
  uint64_t result = qword_10032B850;
  if (!qword_10032B850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001DF5A0(uint64_t a1, char a2)
{
  if (a2)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E700);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      Swift::String v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Push with empty command sent to topic", v6, 2u);
      swift_slowDealloc();
    }

    return 6;
  }
  if (a1 > 5199)
  {
    switch(a1)
    {
      case 5200:
        return 5;
      case 6000:
        return 3;
      case 6001:
        return 4;
    }
    return 6;
  }
  if (a1 == 5000) {
    return 0;
  }
  if (a1 != 5100)
  {
    if (a1 == 5101) {
      return 2;
    }
    return 6;
  }
  return 1;
}

uint64_t sub_1001DF708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PushMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DF76C(uint64_t a1)
{
  if (a1 > 5199)
  {
    switch(a1)
    {
      case 5200:
        return 5;
      case 6000:
        return 3;
      case 6001:
        return 4;
    }
  }
  else
  {
    switch(a1)
    {
      case 5000:
        return 0;
      case 5100:
        return 1;
      case 5101:
        return 2;
    }
  }
  return 6;
}

char *sub_1001DF7F8(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  os_log_type_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    a1[8] = *((unsigned char *)a2 + 8);
    uint64_t v8 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v8;
    uint64_t v9 = a2[5];
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v9;
    uint64_t v10 = a2[7];
    *((void *)a1 + 6) = a2[6];
    *((void *)a1 + 7) = v10;
    uint64_t v11 = a2[9];
    *((void *)a1 + 8) = a2[8];
    *((void *)a1 + 9) = v11;
    *((void *)a1 + 10) = a2[10];
    uint64_t v12 = a2[12];
    uint64_t v13 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12 == (char *)1)
    {
      long long v14 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = v14;
      a1[120] = *((unsigned char *)a2 + 120);
    }
    else
    {
      *((void *)a1 + 11) = a2[11];
      *((void *)a1 + 12) = v12;
      id v15 = a2[14];
      *((void *)a1 + 13) = a2[13];
      *((void *)a1 + 14) = v15;
      a1[120] = *((unsigned char *)a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    a1[121] = *((unsigned char *)a2 + 121);
    *((void *)a1 + 16) = a2[16];
    uint64_t v16 = *(int *)(a3 + 56);
    uint64_t v17 = &a1[v16];
    uint64_t v18 = (char **)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for WalrusWebAccessInfo(0);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      uint64_t v22 = sub_100009F04(&qword_100326FF0);
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v23 = v18[1];
      *(void *)uint64_t v17 = *v18;
      *((void *)v17 + 1) = v23;
      uint64_t v24 = v18[3];
      *((void *)v17 + 2) = v18[2];
      *((void *)v17 + 3) = v24;
      uint64_t v25 = v18[5];
      *((void *)v17 + 4) = v18[4];
      *((void *)v17 + 5) = v25;
      uint64_t v26 = v18[7];
      *((void *)v17 + 6) = v18[6];
      *((void *)v17 + 7) = v26;
      uint64_t v27 = v18[9];
      *((void *)v17 + 8) = v18[8];
      *((void *)v17 + 9) = v27;
      uint64_t v28 = v18[11];
      *((void *)v17 + 10) = v18[10];
      *((void *)v17 + 11) = v28;
      uint64_t v29 = v18[13];
      *((void *)v17 + 12) = v18[12];
      *((void *)v17 + 13) = v29;
      uint64_t v30 = v18[15];
      *((void *)v17 + 14) = v18[14];
      *((void *)v17 + 15) = v30;
      uint64_t v31 = v18[17];
      *((void *)v17 + 16) = v18[16];
      *((void *)v17 + 17) = v31;
      uint64_t v32 = v18[19];
      *((void *)v17 + 18) = v18[18];
      *((void *)v17 + 19) = v32;
      *((void *)v17 + 20) = v18[20];
      uint64_t v33 = *(int *)(v19 + 60);
      uint64_t v34 = &v17[v33];
      unint64_t v35 = (void *)((char *)v18 + v33);
      uint64_t v36 = *(void *)((char *)v18 + v33);
      uint64_t v37 = v35[1];
      *(void *)uint64_t v34 = v36;
      *((void *)v34 + 1) = v37;
      uint64_t v38 = v35[3];
      *((void *)v34 + 2) = v35[2];
      *((void *)v34 + 3) = v38;
      uint64_t v39 = v35[5];
      *((void *)v34 + 4) = v35[4];
      *((void *)v34 + 5) = v39;
      uint64_t v40 = v35[7];
      *((void *)v34 + 6) = v35[6];
      *((void *)v34 + 7) = v40;
      uint64_t v64 = v20;
      uint64_t v41 = v35[9];
      *((void *)v34 + 8) = v35[8];
      *((void *)v34 + 9) = v41;
      uint64_t v42 = v35[11];
      *((void *)v34 + 10) = v35[10];
      *((void *)v34 + 11) = v42;
      unint64_t v60 = v35[13];
      uint64_t v62 = v35[12];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100013140(v62, v60);
      *((void *)v34 + 12) = v62;
      *((void *)v34 + 13) = v60;
      uint64_t v43 = v35[15];
      *((void *)v34 + 14) = v35[14];
      *((void *)v34 + 15) = v43;
      *((void *)v34 + 16) = v35[16];
      os_log_type_t v44 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      uint64_t v45 = v44[13];
      unint64_t v61 = &v34[v45];
      uint64_t v46 = (char *)v35 + v45;
      uint64_t v47 = type metadata accessor for P384.KeyAgreement.PublicKey();
      uint64_t v63 = v19;
      char v48 = *(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16);
      swift_bridgeObjectRetain();
      v48(v61, v46, v47);
      uint64_t v49 = v44[14];
      uint64_t v50 = (uint64_t *)&v34[v49];
      uint64_t v51 = (void *)((char *)v35 + v49);
      uint64_t v52 = *v51;
      unint64_t v53 = v51[1];
      sub_100013140(*v51, v53);
      *uint64_t v50 = v52;
      v50[1] = v53;
      *(void *)&v34[v44[15]] = *(void *)((char *)v35 + v44[15]);
      uint64_t v54 = v44[16];
      unint64_t v55 = &v34[v54];
      uint64_t v56 = (void *)((char *)v35 + v54);
      uint64_t v57 = v56[1];
      *(void *)unint64_t v55 = *v56;
      *((void *)v55 + 1) = v57;
      int v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(v17, 0, 1, v63);
    }
  }
  return a1;
}

uint64_t sub_1001DFC44(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 56);
  uint64_t v5 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v4 + *(int *)(v5 + 60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013198(*(void *)(v7 + 96), *(void *)(v7 + 104));
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v9 = v7 + *(int *)(v8 + 52);
    uint64_t v10 = type metadata accessor for P384.KeyAgreement.PublicKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    sub_100013198(*(void *)(v7 + *(int *)(v8 + 56)), *(void *)(v7 + *(int *)(v8 + 56) + 8));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001DFE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  id v12 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 == 1)
  {
    long long v13 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v13;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  }
  else
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v11;
    uint64_t v14 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v14;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v15 = *(int *)(a3 + 56);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48);
  swift_bridgeObjectRetain();
  if (v20(v17, 1, v18))
  {
    uint64_t v21 = sub_100009F04(&qword_100326FF0);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v22 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v22;
    uint64_t v23 = v17[3];
    void v16[2] = v17[2];
    void v16[3] = v23;
    uint64_t v24 = v17[5];
    v16[4] = v17[4];
    void v16[5] = v24;
    uint64_t v25 = v17[7];
    void v16[6] = v17[6];
    v16[7] = v25;
    uint64_t v26 = v17[9];
    v16[8] = v17[8];
    v16[9] = v26;
    uint64_t v27 = v17[11];
    v16[10] = v17[10];
    v16[11] = v27;
    uint64_t v28 = v17[13];
    v16[12] = v17[12];
    v16[13] = v28;
    uint64_t v29 = v17[15];
    v16[14] = v17[14];
    v16[15] = v29;
    uint64_t v30 = v17[17];
    v16[16] = v17[16];
    v16[17] = v30;
    uint64_t v31 = v17[19];
    v16[18] = v17[18];
    v16[19] = v31;
    v16[20] = v17[20];
    uint64_t v32 = *(int *)(v18 + 60);
    uint64_t v33 = (void *)((char *)v16 + v32);
    uint64_t v34 = (void *)((char *)v17 + v32);
    uint64_t v35 = *(void *)((char *)v17 + v32);
    uint64_t v36 = v34[1];
    void *v33 = v35;
    v33[1] = v36;
    uint64_t v37 = v34[3];
    v33[2] = v34[2];
    v33[3] = v37;
    uint64_t v38 = v34[5];
    v33[4] = v34[4];
    void v33[5] = v38;
    uint64_t v39 = v34[7];
    v33[6] = v34[6];
    v33[7] = v39;
    uint64_t v63 = v19;
    uint64_t v40 = v34[9];
    v33[8] = v34[8];
    v33[9] = v40;
    uint64_t v41 = v34[11];
    v33[10] = v34[10];
    v33[11] = v41;
    unint64_t v59 = v34[13];
    uint64_t v61 = v34[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013140(v61, v59);
    v33[12] = v61;
    v33[13] = v59;
    uint64_t v42 = v34[15];
    v33[14] = v34[14];
    v33[15] = v42;
    v33[16] = v34[16];
    uint64_t v43 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v44 = v43[13];
    unint64_t v60 = (char *)v33 + v44;
    uint64_t v45 = (char *)v34 + v44;
    uint64_t v46 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v62 = v18;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
    swift_bridgeObjectRetain();
    v47(v60, v45, v46);
    uint64_t v48 = v43[14];
    uint64_t v49 = (void *)((char *)v33 + v48);
    uint64_t v50 = (void *)((char *)v34 + v48);
    uint64_t v51 = *v50;
    unint64_t v52 = v50[1];
    sub_100013140(*v50, v52);
    uint64_t *v49 = v51;
    v49[1] = v52;
    *(void *)((char *)v33 + v43[15]) = *(void *)((char *)v34 + v43[15]);
    uint64_t v53 = v43[16];
    uint64_t v54 = (void *)((char *)v33 + v53);
    unint64_t v55 = (void *)((char *)v34 + v53);
    uint64_t v56 = v55[1];
    void *v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = *(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57(v16, 0, 1, v62);
  }
  return a1;
}

uint64_t sub_1001E0244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 88);
  uint64_t v10 = (long long *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) == 1)
  {
    if (v11 == 1)
    {
      long long v12 = *v10;
      long long v13 = *(_OWORD *)(a2 + 104);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *uint64_t v9 = v12;
      *(_OWORD *)(a1 + 104) = v13;
    }
    else
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v11 == 1)
  {
    sub_1001E0B28(a1 + 88);
    char v14 = *(unsigned char *)(a2 + 120);
    long long v15 = *(_OWORD *)(a2 + 104);
    *uint64_t v9 = *v10;
    *(_OWORD *)(a1 + 104) = v15;
    *(unsigned char *)(a1 + 120) = v14;
  }
  else
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  }
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 56);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      *uint64_t v17 = *v18;
      v17[1] = v18[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[2] = v18[2];
      void v17[3] = v18[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[4] = v18[4];
      void v17[5] = v18[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[6] = v18[6];
      v17[7] = v18[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[8] = v18[8];
      v17[9] = v18[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[10] = v18[10];
      v17[11] = v18[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[12] = v18[12];
      v17[13] = v18[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[14] = v18[14];
      v17[15] = v18[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[16] = v18[16];
      v17[17] = v18[17];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[18] = v18[18];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v17[19] = v18[19];
      v17[20] = v18[20];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(int *)(v19 + 60);
      uint64_t v44 = (void *)((char *)v17 + v43);
      uint64_t v45 = (void *)((char *)v18 + v43);
      *uint64_t v44 = *(void *)((char *)v18 + v43);
      v44[1] = *(void *)((char *)v18 + v43 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44[2] = v45[2];
      void v44[3] = v45[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44[4] = v45[4];
      id v44[5] = v45[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      void v44[6] = v45[6];
      v44[7] = v45[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44[8] = v45[8];
      v44[9] = v45[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44[10] = v45[10];
      v44[11] = v45[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v46 = v45[12];
      unint64_t v47 = v45[13];
      sub_100013140(v46, v47);
      uint64_t v48 = v44[12];
      unint64_t v49 = v44[13];
      v44[12] = v46;
      v44[13] = v47;
      sub_100013198(v48, v49);
      v44[14] = v45[14];
      v44[15] = v45[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v44[16] = v45[16];
      uint64_t v50 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      uint64_t v51 = v50[13];
      unint64_t v52 = (char *)v44 + v51;
      uint64_t v53 = (char *)v45 + v51;
      uint64_t v54 = type metadata accessor for P384.KeyAgreement.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 24))(v52, v53, v54);
      uint64_t v55 = v50[14];
      uint64_t v56 = (void *)((char *)v44 + v55);
      uint64_t v57 = (void *)((char *)v45 + v55);
      uint64_t v58 = *v57;
      unint64_t v59 = v57[1];
      sub_100013140(*v57, v59);
      uint64_t v60 = *v56;
      unint64_t v61 = v56[1];
      uint64_t *v56 = v58;
      v56[1] = v59;
      sub_100013198(v60, v61);
      *(void *)((char *)v44 + v50[15]) = *(void *)((char *)v45 + v50[15]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v62 = v50[16];
      uint64_t v63 = (void *)((char *)v44 + v62);
      uint64_t v64 = (void *)((char *)v45 + v62);
      *uint64_t v63 = *v64;
      v63[1] = v64[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001E0B7C((uint64_t)v17, type metadata accessor for WalrusWebAccessInfo);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    uint64_t v41 = sub_100009F04(&qword_100326FF0);
    memcpy(v17, v18, *(void *)(*(void *)(v41 - 8) + 64));
    return a1;
  }
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  v17[2] = v18[2];
  void v17[3] = v18[3];
  v17[4] = v18[4];
  void v17[5] = v18[5];
  v17[6] = v18[6];
  v17[7] = v18[7];
  v17[8] = v18[8];
  v17[9] = v18[9];
  v17[10] = v18[10];
  v17[11] = v18[11];
  v17[12] = v18[12];
  v17[13] = v18[13];
  v17[14] = v18[14];
  v17[15] = v18[15];
  v17[16] = v18[16];
  v17[17] = v18[17];
  v17[18] = v18[18];
  v17[19] = v18[19];
  v17[20] = v18[20];
  uint64_t v24 = *(int *)(v19 + 60);
  uint64_t v25 = (void *)((char *)v17 + v24);
  uint64_t v26 = (void *)((char *)v18 + v24);
  *uint64_t v25 = *(void *)((char *)v18 + v24);
  v25[1] = *(void *)((char *)v18 + v24 + 8);
  Swift::String v25[2] = *(void *)((char *)v18 + v24 + 16);
  void v25[3] = *(void *)((char *)v18 + v24 + 24);
  v25[4] = *(void *)((char *)v18 + v24 + 32);
  void v25[5] = *(void *)((char *)v18 + v24 + 40);
  v25[6] = *(void *)((char *)v18 + v24 + 48);
  v25[7] = *(void *)((char *)v18 + v24 + 56);
  v25[8] = *(void *)((char *)v18 + v24 + 64);
  uint64_t v69 = v20;
  v25[9] = *(void *)((char *)v18 + v24 + 72);
  v25[10] = *(void *)((char *)v18 + v24 + 80);
  v25[11] = *(void *)((char *)v18 + v24 + 88);
  unint64_t v65 = *(void *)((char *)v18 + v24 + 104);
  uint64_t v67 = *(void *)((char *)v18 + v24 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013140(v67, v65);
  v25[12] = v67;
  v25[13] = v65;
  v25[14] = v26[14];
  v25[15] = v26[15];
  v25[16] = v26[16];
  uint64_t v27 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v28 = v27[13];
  unint64_t v66 = (char *)v25 + v28;
  uint64_t v29 = (char *)v26 + v28;
  uint64_t v30 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v68 = v19;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
  swift_bridgeObjectRetain();
  v31(v66, v29, v30);
  uint64_t v32 = v27[14];
  uint64_t v33 = (void *)((char *)v25 + v32);
  uint64_t v34 = (void *)((char *)v26 + v32);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  sub_100013140(*v34, v36);
  uint64_t *v33 = v35;
  v33[1] = v36;
  *(void *)((char *)v25 + v27[15]) = *(void *)((char *)v26 + v27[15]);
  uint64_t v37 = v27[16];
  uint64_t v38 = (void *)((char *)v25 + v37);
  uint64_t v39 = (void *)((char *)v26 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  uint64_t v40 = *(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40(v17, 0, 1, v68);
  return a1;
}

uint64_t sub_1001E0B28(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001E0B7C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001E0BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  uint64_t v4 = *(int *)(a3 + 56);
  uint64_t v5 = (_OWORD *)(a2 + v4);
  Swift::String v6 = (_OWORD *)(a1 + v4);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v7 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7))
  {
    uint64_t v9 = sub_100009F04(&qword_100326FF0);
    memcpy(v6, v5, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    long long v10 = v5[1];
    *Swift::String v6 = *v5;
    v6[1] = v10;
    long long v11 = v5[3];
    id v6[2] = v5[2];
    v6[3] = v11;
    long long v12 = v5[5];
    v6[4] = v5[4];
    v6[5] = v12;
    long long v13 = v5[7];
    v6[6] = v5[6];
    v6[7] = v13;
    v6[8] = v5[8];
    *((void *)v6 + 18) = *((void *)v5 + 18);
    *(_OWORD *)((char *)v6 + 152) = *(_OWORD *)((char *)v5 + 152);
    uint64_t v14 = *(int *)(v7 + 60);
    long long v15 = (char *)v6 + v14;
    uint64_t v16 = (char *)v5 + v14;
    long long v17 = *(_OWORD *)((char *)v5 + v14 + 16);
    *(_OWORD *)long long v15 = *(_OWORD *)((char *)v5 + v14);
    *((_OWORD *)v15 + 1) = v17;
    long long v18 = *(_OWORD *)((char *)v5 + v14 + 48);
    *((_OWORD *)v15 + 2) = *(_OWORD *)((char *)v5 + v14 + 32);
    *((_OWORD *)v15 + 3) = v18;
    long long v19 = *(_OWORD *)((char *)v5 + v14 + 80);
    *((_OWORD *)v15 + 4) = *(_OWORD *)((char *)v5 + v14 + 64);
    *((_OWORD *)v15 + 5) = v19;
    long long v20 = *(_OWORD *)((char *)v5 + v14 + 112);
    *((_OWORD *)v15 + 6) = *(_OWORD *)((char *)v5 + v14 + 96);
    *((_OWORD *)v15 + 7) = v20;
    *((void *)v15 + 16) = *(void *)((char *)v5 + v14 + 128);
    uint64_t v21 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v22 = v21[13];
    int v23 = &v15[v22];
    uint64_t v24 = &v16[v22];
    uint64_t v25 = type metadata accessor for P384.KeyAgreement.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
    *(_OWORD *)&v15[v21[14]] = *(_OWORD *)&v16[v21[14]];
    *(void *)&v15[v21[15]] = *(void *)&v16[v21[15]];
    *(_OWORD *)&v15[v21[16]] = *(_OWORD *)&v16[v21[16]];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1001E0E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) == 1) {
    goto LABEL_4;
  }
  uint64_t v11 = *(void *)(a2 + 96);
  if (v11 == 1)
  {
    sub_1001E0B28(a1 + 88);
LABEL_4:
    long long v12 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v12;
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    goto LABEL_6;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
LABEL_6:
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(a3 + 56);
  long long v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v18 = *(void *)(v17 - 8);
  long long v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      uint64_t v40 = v16[1];
      void *v15 = *v16;
      v15[1] = v40;
      swift_bridgeObjectRelease();
      uint64_t v41 = v16[3];
      _OWORD v15[2] = v16[2];
      uint64_t v15[3] = v41;
      swift_bridgeObjectRelease();
      uint64_t v42 = v16[5];
      v15[4] = v16[4];
      void v15[5] = v42;
      swift_bridgeObjectRelease();
      uint64_t v43 = v16[7];
      v15[6] = v16[6];
      v15[7] = v43;
      swift_bridgeObjectRelease();
      uint64_t v44 = v16[9];
      v15[8] = v16[8];
      v15[9] = v44;
      swift_bridgeObjectRelease();
      uint64_t v45 = v16[11];
      v15[10] = v16[10];
      v15[11] = v45;
      swift_bridgeObjectRelease();
      uint64_t v46 = v16[13];
      v15[12] = v16[12];
      v15[13] = v46;
      swift_bridgeObjectRelease();
      uint64_t v47 = v16[15];
      v15[14] = v16[14];
      v15[15] = v47;
      swift_bridgeObjectRelease();
      uint64_t v48 = v16[17];
      v15[16] = v16[16];
      v15[17] = v48;
      swift_bridgeObjectRelease();
      v15[18] = v16[18];
      swift_bridgeObjectRelease();
      uint64_t v49 = v16[20];
      v15[19] = v16[19];
      v15[20] = v49;
      swift_bridgeObjectRelease();
      uint64_t v50 = *(int *)(v17 + 60);
      uint64_t v51 = (void *)((char *)v15 + v50);
      unint64_t v52 = (char *)v16 + v50;
      uint64_t v53 = *(void *)((char *)v16 + v50 + 8);
      *uint64_t v51 = *(void *)((char *)v16 + v50);
      v51[1] = v53;
      swift_bridgeObjectRelease();
      uint64_t v54 = *((void *)v52 + 3);
      v51[2] = *((void *)v52 + 2);
      void v51[3] = v54;
      swift_bridgeObjectRelease();
      uint64_t v55 = *((void *)v52 + 5);
      v51[4] = *((void *)v52 + 4);
      v51[5] = v55;
      swift_bridgeObjectRelease();
      uint64_t v56 = *((void *)v52 + 7);
      v51[6] = *((void *)v52 + 6);
      v51[7] = v56;
      swift_bridgeObjectRelease();
      uint64_t v57 = *((void *)v52 + 9);
      v51[8] = *((void *)v52 + 8);
      v51[9] = v57;
      swift_bridgeObjectRelease();
      uint64_t v58 = *((void *)v52 + 11);
      v51[10] = *((void *)v52 + 10);
      v51[11] = v58;
      swift_bridgeObjectRelease();
      uint64_t v59 = v51[12];
      unint64_t v60 = v51[13];
      *((_OWORD *)v51 + 6) = *((_OWORD *)v52 + 6);
      sub_100013198(v59, v60);
      uint64_t v61 = *((void *)v52 + 15);
      v51[14] = *((void *)v52 + 14);
      v51[15] = v61;
      swift_bridgeObjectRelease();
      v51[16] = *((void *)v52 + 16);
      uint64_t v62 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      uint64_t v63 = v62[13];
      uint64_t v64 = (char *)v51 + v63;
      unint64_t v65 = &v52[v63];
      uint64_t v66 = type metadata accessor for P384.KeyAgreement.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 40))(v64, v65, v66);
      uint64_t v67 = v62[14];
      uint64_t v68 = *(void *)((char *)v51 + v67);
      unint64_t v69 = *(void *)((char *)v51 + v67 + 8);
      *(_OWORD *)((char *)v51 + v67) = *(_OWORD *)&v52[v67];
      sub_100013198(v68, v69);
      *(void *)((char *)v51 + v62[15]) = *(void *)&v52[v62[15]];
      swift_bridgeObjectRelease();
      uint64_t v70 = v62[16];
      uint64_t v71 = (void *)((char *)v51 + v70);
      unint64_t v72 = &v52[v70];
      uint64_t v74 = *(void *)v72;
      uint64_t v73 = *((void *)v72 + 1);
      *uint64_t v71 = v74;
      v71[1] = v73;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001E0B7C((uint64_t)v15, type metadata accessor for WalrusWebAccessInfo);
    goto LABEL_11;
  }
  if (v21)
  {
LABEL_11:
    uint64_t v38 = sub_100009F04(&qword_100326FF0);
    memcpy(v15, v16, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  long long v22 = *((_OWORD *)v16 + 1);
  *(_OWORD *)long long v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v22;
  long long v23 = *((_OWORD *)v16 + 3);
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_OWORD *)v15 + 3) = v23;
  long long v24 = *((_OWORD *)v16 + 5);
  *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
  *((_OWORD *)v15 + 5) = v24;
  long long v25 = *((_OWORD *)v16 + 7);
  *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
  *((_OWORD *)v15 + 7) = v25;
  *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
  v15[18] = v16[18];
  *(_OWORD *)(v15 + 19) = *(_OWORD *)(v16 + 19);
  uint64_t v26 = *(int *)(v17 + 60);
  uint64_t v27 = (char *)v15 + v26;
  uint64_t v28 = (char *)v16 + v26;
  long long v29 = *(_OWORD *)((char *)v16 + v26 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)((char *)v16 + v26);
  *((_OWORD *)v27 + 1) = v29;
  long long v30 = *(_OWORD *)((char *)v16 + v26 + 48);
  *((_OWORD *)v27 + 2) = *(_OWORD *)((char *)v16 + v26 + 32);
  *((_OWORD *)v27 + 3) = v30;
  long long v31 = *(_OWORD *)((char *)v16 + v26 + 80);
  *((_OWORD *)v27 + 4) = *(_OWORD *)((char *)v16 + v26 + 64);
  *((_OWORD *)v27 + 5) = v31;
  long long v32 = *(_OWORD *)((char *)v16 + v26 + 112);
  *((_OWORD *)v27 + 6) = *(_OWORD *)((char *)v16 + v26 + 96);
  *((_OWORD *)v27 + 7) = v32;
  *((void *)v27 + 16) = *(void *)((char *)v16 + v26 + 128);
  uint64_t v33 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v34 = v33[13];
  uint64_t v35 = &v27[v34];
  unint64_t v36 = &v28[v34];
  uint64_t v37 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  *(_OWORD *)&v27[v33[14]] = *(_OWORD *)&v28[v33[14]];
  *(void *)&v27[v33[15]] = *(void *)&v28[v33[15]];
  *(_OWORD *)&v27[v33[16]] = *(_OWORD *)&v28[v33[16]];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_1001E1308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E131C);
}

uint64_t sub_1001E131C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100009F04(&qword_100326FF0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 56);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001E13D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E13E4);
}

void *sub_1001E13E4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100009F04(&qword_100326FF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 56);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1001E1490()
{
  sub_1001E1570();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1001E1570()
{
  if (!qword_10032B860)
  {
    type metadata accessor for WalrusWebAccessInfo(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032B860);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for PushMessage.Command(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E1694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushMessage.Command()
{
  return &type metadata for PushMessage.Command;
}

unint64_t sub_1001E16D0()
{
  unint64_t result = qword_10032B8B8;
  if (!qword_10032B8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032B8B8);
  }
  return result;
}

uint64_t sub_1001E1724(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  unsigned int v4 = v3;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v54 = a1;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (Class *)((char *)&isa - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v57 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v57 - 8);
  uint64_t v9 = *(void *)(v52 + 64);
  __chkstk_darwin(v57, v10);
  uint64_t v55 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v56 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v56, v13);
  long long v15 = (char *)&isa - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  unint64_t v60 = (char *)&isa - v17;
  uint64_t v18 = sub_100009F04(&qword_10032B9F0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  long long v22 = (char *)&isa - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v18);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  id v23 = [self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v23)
  {
    id v51 = v23;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Creating recovery keys.", v27, 2u);
      swift_slowDealloc();
    }

    uint64_t v28 = v60;
    Date.init()();
    uint64_t v29 = v54;
    uint64_t v53 = (void *)v53[7];
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v30 = v11;
    long long v31 = v28;
    uint64_t v32 = v56;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v31, v56);
    uint64_t v33 = v52;
    uint64_t v34 = v55;
    uint64_t v35 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v55, v29, v57);
    unint64_t v36 = (*(unsigned __int8 *)(v30 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    unint64_t v37 = (v12 + *(unsigned __int8 *)(v33 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v38 = (v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v39 + v36, v15, v32);
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v39 + v37, v34, v35);
    uint64_t v40 = (void *)(v39 + v38);
    uint64_t v41 = v59;
    *uint64_t v40 = v58;
    v40[1] = v41;
    aBlock[4] = sub_1001E62F8;
    void aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004DAE8;
    aBlock[3] = &unk_100300710;
    uint64_t v42 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    Class v44 = isa;
    uint64_t v43 = v51;
    [v53 createRecoveryKeyWithContext:v51 forUUID:isa completion:v42];
    _Block_release(v42);

    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v60, v32);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E700);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Not logged in to AppleAccount, unable to fetch", v49, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void aBlock[6] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v8 = aBlock[0];
    swift_storeEnumTagMultiPayload();
    v58(v8);
    return sub_1001E6294((uint64_t)v8);
  }
}

uint64_t sub_1001E1DB0(void *a1, uint64_t a2, uint64_t a3, NSObject *a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v104 = a6;
  uint64_t v105 = a5;
  uint64_t v107 = a2;
  id v100 = a1;
  uint64_t v102 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v102, v8);
  id v103 = (uint64_t *)&v92[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v96 = &v92[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = &v92[-v16];
  uint64_t v19 = __chkstk_darwin(v15, v18);
  long long v99 = &v92[-v20];
  __chkstk_darwin(v19, v21);
  id v23 = &v92[-v22];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = &v92[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27, v30);
  uint64_t v32 = &v92[-v31];
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = sub_100007288(v33, (uint64_t)qword_10033E748);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 16))(v32, a3, v24);
  uint64_t v36 = v108 + 16;
  uint64_t v35 = *(void (**)(unsigned char *, os_log_t, uint64_t))(v108 + 16);
  os_log_t v106 = a4;
  uint64_t v98 = v35;
  v35(v23, a4, v10);
  uint64_t v101 = v34;
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  int v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v40 = swift_slowAlloc();
    int v97 = v17;
    uint64_t v41 = v40;
    uint64_t v94 = swift_slowAlloc();
    v110[0] = v94;
    *(_DWORD *)uint64_t v41 = 134218242;
    uint64_t v95 = v36;
    Date.init()();
    int v93 = v39;
    Date.timeIntervalSince(_:)();
    uint64_t v43 = v42;
    Class v44 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
    v44(v29, v24);
    uint64_t v109 = v43;
    uint64_t v45 = v108;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v44(v32, v24);
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v46 = UUID.uuidString.getter();
    uint64_t v109 = sub_100135190(v46, v47, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v48 = *(void (**)(unsigned char *, uint64_t))(v45 + 8);
    v48(v23, v10);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v93, "⏰ %f secs to createRecoveryKey %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v17 = v97;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v32, v24);
    os_log_type_t v48 = *(void (**)(unsigned char *, uint64_t))(v108 + 8);
    v48(v23, v10);
  }

  os_log_t v49 = v106;
  uint64_t v50 = v107;
  if (v107)
  {
    swift_errorRetain();
    id v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 138412290;
      uint64_t v55 = _convertErrorToNSError(_:)();
      v110[0] = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v54 = v55;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error building recovery key: %@", v53, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v56 = v103;
    *id v103 = v50;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v105(v56);
    swift_errorRelease();
LABEL_10:
    uint64_t v57 = (uint64_t)v56;
    return sub_1001E6294(v57);
  }
  if (!v100)
  {
    unint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "No recovery keys returned.", v80, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v109 = -7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v56 = v103;
    *id v103 = v110[0];
    swift_storeEnumTagMultiPayload();
    v105(v56);
    goto LABEL_10;
  }
  uint64_t v58 = v98;
  uint64_t v59 = v99;
  v98(v99, v106, v10);
  v58(v17, v49, v10);
  id v60 = v100;
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.info.getter();
  int v63 = v62;
  uint64_t v64 = &off_10031D000;
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v65 = swift_slowAlloc();
    uint64_t v107 = swift_slowAlloc();
    v110[0] = v107;
    *(_DWORD *)uint64_t v65 = 136315650;
    sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v97 = v17;
    os_log_t v106 = v61;
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v109 = sub_100135190(v66, v67, v110);
    LODWORD(v101) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v48(v59, v10);
    *(_WORD *)(v65 + 12) = 2080;
    id v68 = [v60 custodianUUID];
    unint64_t v69 = v96;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v72 = v71;
    v48(v69, v10);
    uint64_t v109 = sub_100135190(v70, v72, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 22) = 2080;
    id v73 = [v60 custodianUUID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v74 = v97;
    LOBYTE(v73) = static UUID.== infix(_:_:)();
    unint64_t v75 = v69;
    uint64_t v64 = &off_10031D000;
    v48(v75, v10);
    if (v73) {
      uint64_t v76 = 8756450;
    }
    else {
      uint64_t v76 = 9215458;
    }
    uint64_t v109 = sub_100135190(v76, 0xA300000000000000, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    v48(v74, v10);

    os_log_t v77 = v106;
    _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v101, "Recovery keys created successfully. UUID Sent:%s Received:%s Matches:%s ", (uint8_t *)v65, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v48(v59, v10);

    v48(v17, v10);
  }
  id v81 = [v60 wrappingKey];
  uint64_t v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v84 = v83;

  id v85 = [v60 wrappedRKC];
  uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v88 = v87;

  id v89 = [v60 v64[466]];
  type metadata accessor for RecoveryKeys(0);
  uint64_t v90 = v103;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  *uint64_t v90 = v82;
  v90[1] = v84;
  v90[2] = v86;
  v90[3] = v88;
  swift_storeEnumTagMultiPayload();
  v105(v90);

  uint64_t v57 = (uint64_t)v90;
  return sub_1001E6294(v57);
}

void sub_1001E28AC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v56 = a2;
  uint64_t v57 = a3;
  uint64_t v53 = a1;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v55 - 8);
  uint64_t v5 = *(void *)(v52 + 64);
  __chkstk_darwin(v55, v6);
  uint64_t v54 = (char *)&isa - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v51 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v51, v9);
  uint64_t v11 = (char *)&isa - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&isa - v13;
  uint64_t v15 = sub_100009F04(&qword_10032B9F0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&isa - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v15);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  id v20 = [self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v20)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    id v50 = v20;
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E748);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Deleting recovery keys.", v24, 2u);
      swift_slowDealloc();
    }

    uint64_t v25 = v14;
    os_log_t v49 = v14;
    Date.init()();
    id v48 = *(id *)(v4 + 56);
    uint64_t v26 = v53;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v27 = v7;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v29 = v51;
    v28(v11, v25, v51);
    uint64_t v30 = v52;
    uint64_t v31 = v54;
    uint64_t v32 = v26;
    uint64_t v33 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v54, v32, v55);
    unint64_t v34 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    unint64_t v35 = (v8 + *(unsigned __int8 *)(v30 + 80) + v34) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v36 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v36 + v34, v11, v29);
    (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v36 + v35, v31, v33);
    unint64_t v37 = (void *)(v36 + ((v5 + v35 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v38 = v57;
    void *v37 = v56;
    v37[1] = v38;
    aBlock[4] = sub_1001E6190;
    void aBlock[5] = v36;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10025ED44;
    aBlock[3] = &unk_1003006C0;
    int v39 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    Class v40 = isa;
    uint64_t v41 = v50;
    [v48 deleteRecoveryKeyWithContext:v50 forUUID:isa completion:v39];
    _Block_release(v39);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v49, v29);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_100007288(v42, (uint64_t)qword_10033E700);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Not logged in to AppleAccount, unable to fetch", v45, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void aBlock[6] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v46 = (void *)aBlock[0];
    v56(aBlock[0]);
  }
}

uint64_t sub_1001E2ED4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v65 = a5;
  uint64_t v70 = a4;
  uint64_t v72 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  unint64_t v69 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v64 = (char *)&v59 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v59 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  os_log_type_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v59 - v25;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100007288(v27, (uint64_t)qword_10033E748);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v26, a2, v18);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v68 = a3;
  uint64_t v66 = v29;
  v29(v17, a3, v7);
  uint64_t v67 = v28;
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  int v32 = v31;
  BOOL v33 = os_log_type_enabled(v30, v31);
  uint64_t v71 = v8;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    uint64_t v74 = v62;
    *(_DWORD *)uint64_t v34 = 134218242;
    uint64_t v63 = v7;
    int v61 = v32;
    Date.init()();
    os_log_t v60 = v30;
    Date.timeIntervalSince(_:)();
    uint64_t v36 = v35;
    unint64_t v37 = *(void (**)(char *, uint64_t))(v19 + 8);
    v37(v23, v18);
    uint64_t v73 = v36;
    uint64_t v7 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v37(v26, v18);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v38 = UUID.uuidString.getter();
    uint64_t v73 = sub_100135190(v38, v39, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class v40 = *(void (**)(char *, uint64_t))(v71 + 8);
    v40(v17, v7);
    os_log_t v41 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v61, "⏰ %f secs to deleteRecoveryKey %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
    Class v40 = *(void (**)(char *, uint64_t))(v8 + 8);
    v40(v17, v7);
  }
  uint64_t v42 = v69;
  if (v72)
  {
    v66(v69, v68, v7);
    swift_errorRetain();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      uint64_t v46 = v7;
      unint64_t v47 = (void *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      uint64_t v74 = v68;
      *(_DWORD *)uint64_t v45 = 138412546;
      uint64_t v48 = _convertErrorToNSError(_:)();
      uint64_t v73 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v47 = v48;
      *(_WORD *)(v45 + 12) = 2080;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_100135190(v49, v50, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v40(v42, v46);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Error deleting recovery key: %@ for %s", (uint8_t *)v45, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v40(v42, v7);
    }

    uint64_t v57 = v72;
    swift_errorRetain();
    v70(v57);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v51 = v64;
    v66(v64, v68, v7);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_100135190(v55, v56, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v40(v51, v7);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Recovery keys deleted successfully for %s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v40(v51, v7);
    }

    return ((uint64_t (*)(void))v70)(0);
  }
}

void sub_1001E36D0(uint64_t a1, void (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a2;
  uint64_t v65 = a1;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v60 = v9;
  int v61 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v66 = (char *)&v53 - v11;
  uint64_t v64 = (void *)type metadata accessor for UUID();
  uint64_t v12 = *(v64 - 1);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v15 = __chkstk_darwin(v64, v14);
  uint64_t v59 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = sub_100009F04(&qword_10032B9F0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  os_log_type_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v19);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  id v24 = [self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v24)
  {
    id v55 = v24;
    uint64_t v56 = v6;
    uint64_t v57 = a3;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E748);
    uint64_t v26 = v64;
    uint64_t v54 = *(void (**)(char *, uint64_t, void *))(v12 + 16);
    v54(v18, v65, v64);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      os_log_type_t v53 = v29 + 4;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v68 = sub_100135190(v30, v31, aBlock);
      uint64_t v26 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void *))(v12 + 8))(v18, v26);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Check Custodian Recovery key exists for otPeerID: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, void *))(v12 + 8))(v18, v26);
    }

    unint64_t v37 = v66;
    Date.init()();
    uint64_t v64 = (void *)*((void *)isa + 7);
    uint64_t v38 = v65;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    Class v40 = v61;
    uint64_t v39 = v62;
    uint64_t v41 = v56;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v61, v37, v56);
    uint64_t v42 = v59;
    v54(v59, v38, v26);
    unint64_t v43 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    unint64_t v44 = (v60 + *(unsigned __int8 *)(v12 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v45 = v26;
    unint64_t v46 = (v13 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v47 + v43, v40, v41);
    (*(void (**)(unint64_t, char *, void *))(v12 + 32))(v47 + v44, v42, v45);
    uint64_t v48 = (void *)(v47 + v46);
    uint64_t v49 = v57;
    *uint64_t v48 = v63;
    v48[1] = v49;
    aBlock[4] = (uint64_t)sub_1001E6078;
    void aBlock[5] = v47;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100050910;
    aBlock[3] = (uint64_t)&unk_100300670;
    unint64_t v50 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    Class v51 = isa;
    uint64_t v52 = v55;
    [v64 checkCustodianRecoveryKey:isa withContext:v55 completion:v50];
    _Block_release(v50);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v66, v41);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E700);
    BOOL v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not logged in to AppleAccount, unable to fetch. Check presence of Custodian Recovery key in Octagon is aborted.", v35, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v68 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v36 = (void *)aBlock[0];
    v63(0, aBlock[0]);
  }
}

uint64_t sub_1001E3E58(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, uint64_t), uint64_t a6)
{
  uint64_t v68 = a6;
  unint64_t v69 = a5;
  uint64_t v76 = a2;
  int v75 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v73 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v66 = (char *)&v63 - v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v63 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  id v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v63 - v26;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = sub_100007288(v28, (uint64_t)qword_10033E748);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v27, a3, v19);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v72 = a4;
  uint64_t v70 = v30;
  v30(v18, a4, v8);
  uint64_t v71 = v29;
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  int v33 = v32;
  BOOL v34 = os_log_type_enabled(v31, v32);
  uint64_t v67 = v9;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v74 = (void (*)(char *, uint64_t))v8;
    uint64_t v36 = v35;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v78 = v65;
    *(_DWORD *)uint64_t v36 = 134218242;
    int v64 = v33;
    Date.init()();
    os_log_t v63 = v31;
    Date.timeIntervalSince(_:)();
    uint64_t v38 = v37;
    uint64_t v39 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39(v24, v19);
    uint64_t v77 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v39(v27, v19);
    *(_WORD *)(v36 + 12) = 2080;
    sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_100135190(v40, v41, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v9 + 8);
    v42(v18, (uint64_t)v74);
    os_log_t v43 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v64, "⏰ %f secs to checkCustodianRecoveryKey %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = (uint64_t)v74;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v9 + 8);
    v42(v18, v8);
  }
  uint64_t v44 = v76;
  uint64_t v45 = v73;
  if (v76)
  {
    v70(v73, v72, v8);
    swift_errorRetain();
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v74 = v42;
      uint64_t v49 = v45;
      uint64_t v50 = v48;
      Class v51 = (void *)swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 138412546;
      uint64_t v52 = _convertErrorToNSError(_:)();
      uint64_t v77 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Class v51 = v52;
      *(_WORD *)(v50 + 12) = 2080;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = sub_100135190(v53, v54, &v78);
      uint64_t v44 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v74(v49, v8);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Error checking Custodian Recovery key: %@ for %s", (uint8_t *)v50, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v42(v45, v8);
    }

    int v61 = v69;
    swift_errorRetain();
    v61(v75 & 1, v44);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    id v55 = v66;
    v70(v66, v72, v8);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 67109378;
      LODWORD(v77) = v75 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 8) = 2080;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = sub_100135190(v59, v60, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42(v55, v8);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Custodian recovery key present: %{BOOL}d for otPeerID: %s ", (uint8_t *)v58, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v42(v55, v8);
    }

    return ((uint64_t (*)(void, void))v69)(v75 & 1, 0);
  }
}

uint64_t sub_1001E46B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100009F04(&qword_100329BA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_1001E36D0(a3, (void (*)(void, uint64_t))sub_1001E5EA4, v10);
  return swift_release();
}

uint64_t sub_1001E4800(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100009F04(&qword_100329BA0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_100009F04(&qword_100329BA0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1001E4874(uint64_t a1, void *a2, void *a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1001E62FC(a1, a2, a3, a4, a5, a6, a7);
  swift_release();

  return swift_release();
}

void sub_1001E48B8(uint64_t a1, void *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v92 = a3;
  int v93 = a4;
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v89 = v10;
  uint64_t v90 = &v75[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v11);
  uint64_t v98 = &v75[-v12];
  uint64_t v84 = (void *)type metadata accessor for RecoveryKeys(0);
  uint64_t v86 = *(v84 - 1);
  uint64_t v14 = __chkstk_darwin(v84, v13);
  int v97 = &v75[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v87 = v15;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = &v75[-v17];
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v94 = &v75[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v85 = v23;
  __chkstk_darwin(v22, v24);
  uint64_t v26 = &v75[-v25];
  uint64_t v27 = sub_100009F04(&qword_10032B9F0);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  unint64_t v31 = &v75[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v88 = v5;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 16))(v31, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v27);
  Dependency.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v28 + 8))(v31, v27);
  id v32 = [self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v32)
  {
    id v82 = v32;
    uint64_t v91 = v6;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v83 = v7;
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E748);
    uint64_t v34 = v20;
    uint64_t v35 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v81 = v20 + 16;
    uint64_t v80 = v35;
    v35(v26, v96, v19);
    sub_1001E5F48((uint64_t)v95, (uint64_t)v18);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    int v38 = v37;
    BOOL v39 = os_log_type_enabled(v36, v37);
    uint64_t v79 = v20;
    uint64_t v78 = v19;
    if (v39)
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      aBlock[0] = v77;
      *(_DWORD *)uint64_t v40 = 136315394;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v76 = v38;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v34 + 8))(v26, v19);
      *(_WORD *)(v40 + 12) = 2080;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E5FAC((uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v76, "Preflighting Custodian Recovery for custodianID: %s otPeerID: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v26, v19);
      sub_1001E5FAC((uint64_t)v18);
    }

    uint64_t v50 = v95;
    uint64_t v51 = v95[2];
    unint64_t v52 = v95[3];
    uint64_t v53 = *v95;
    unint64_t v54 = v95[1];
    id v55 = objc_allocWithZone((Class)CDPCustodianRecoveryInfo);
    sub_100013140(v51, v52);
    sub_100013140(v53, v54);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v57 = Data._bridgeToObjectiveC()().super.isa;
    Class v58 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v84 = [v55 initWithWrappedRKC:isa wrappingKey:v57 custodianUUID:v58];

    sub_100013198(v53, v54);
    sub_100013198(v51, v52);
    uint64_t v59 = v98;
    Date.init()();
    uint64_t v88 = (void *)v88[7];
    uint64_t v60 = v83;
    uint64_t v62 = v90;
    uint64_t v61 = v91;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v83 + 16))(v90, v59, v91);
    uint64_t v63 = v78;
    v80(v94, v96, v78);
    sub_1001E5F48((uint64_t)v50, (uint64_t)v97);
    unint64_t v64 = (*(unsigned __int8 *)(v60 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v65 = v79;
    unint64_t v66 = (v89 + *(unsigned __int8 *)(v79 + 80) + v64) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    unint64_t v67 = (v85 + *(unsigned __int8 *)(v86 + 80) + v66) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
    unint64_t v68 = (v87 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = swift_allocObject();
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v60 + 32))(v69 + v64, v62, v61);
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v65 + 32))(v69 + v66, v94, v63);
    sub_1001E600C((uint64_t)v97, v69 + v67);
    uint64_t v70 = (void (**)(uint64_t))(v69 + v68);
    uint64_t v71 = v93;
    *uint64_t v70 = v92;
    v70[1] = v71;
    aBlock[4] = (uint64_t)sub_1001E6070;
    void aBlock[5] = v69;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    aBlock[3] = (uint64_t)&unk_100300620;
    uint64_t v72 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v73 = v84;
    uint64_t v74 = v82;
    [v88 validateRecoveryKey:v84 withContext:v82 completion:v72];
    _Block_release(v72);

    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v98, v91);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E700);
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not logged in to AppleAccount, unable to fetch. Preflight Custodian Recovery aborted.", v48, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v100 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v49 = (void *)aBlock[0];
    v92(aBlock[0]);
  }
}

uint64_t sub_1001E5280(char *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v81 = a6;
  id v82 = a5;
  uint64_t v86 = (void *)a4;
  uint64_t v80 = type metadata accessor for RecoveryKeys(0);
  uint64_t v10 = __chkstk_darwin(v80, v9);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v79 = (uint64_t)&v73 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v87 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v78 = (char *)&v73 - v21;
  __chkstk_darwin(v20, v22);
  uint64_t v88 = (char *)&v73 - v23;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  id v32 = (char *)&v73 - v31;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  uint64_t v34 = sub_100007288(v33, (uint64_t)qword_10033E748);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v32, a2, v24);
  uint64_t v35 = *(void (**)(char *, void (*)(void, void), uint64_t))(v89 + 16);
  uint64_t v85 = a3;
  uint64_t v83 = v35;
  v35(v88, (void (*)(void, void))a3, v15);
  uint64_t v84 = v34;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v77 = v12;
    uint64_t v40 = v39;
    uint64_t v76 = swift_slowAlloc();
    v91[0] = v76;
    *(_DWORD *)uint64_t v40 = 134218242;
    int v75 = v38;
    Date.init()();
    os_log_t v74 = v36;
    Date.timeIntervalSince(_:)();
    uint64_t v42 = v41;
    uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
    v43(v29, v24);
    uint64_t v90 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v43(v32, v24);
    *(_WORD *)(v40 + 12) = 2080;
    sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v44 = v88;
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v90 = sub_100135190(v45, v46, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
    v47(v44, v15);
    os_log_t v48 = v74;
    _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v75, "⏰ %f secs to preflightCustodianRecovery %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v77;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v32, v24);
    os_log_type_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
    v47(v88, v15);
  }
  uint64_t v49 = v87;
  if (a1)
  {
    v83(v87, (void (*)(void, void))v85, v15);
    sub_1001E5F48((uint64_t)v86, (uint64_t)v12);
    swift_errorRetain();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v85 = v47;
      uint64_t v53 = v49;
      uint64_t v54 = v52;
      id v55 = (void *)swift_slowAlloc();
      uint64_t v86 = v55;
      uint64_t v87 = (char *)swift_slowAlloc();
      v91[0] = (uint64_t)v87;
      *(_DWORD *)uint64_t v54 = 138412802;
      uint64_t v56 = _convertErrorToNSError(_:)();
      uint64_t v88 = a1;
      uint64_t v57 = v56;
      uint64_t v90 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v55 = v57;
      *(_WORD *)(v54 + 12) = 2080;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v90 = sub_100135190(v58, v59, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v85(v53, v15);
      *(_WORD *)(v54 + 22) = 2080;
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v90 = sub_100135190(v60, v61, v91);
      a1 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E5FAC((uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Error preflighting custodian recovery: %@ for custodianID: %s otPeerID: %s", (uint8_t *)v54, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v47(v49, v15);
      sub_1001E5FAC((uint64_t)v12);
    }

    uint64_t v71 = v82;
    swift_errorRetain();
    v71(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v62 = v78;
    v83(v78, (void (*)(void, void))v85, v15);
    uint64_t v63 = v79;
    sub_1001E5F48((uint64_t)v86, v79);
    unint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v88 = (char *)swift_slowAlloc();
      v91[0] = (uint64_t)v88;
      *(_DWORD *)uint64_t v66 = 136315394;
      uint64_t v87 = (char *)(v66 + 4);
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v90 = sub_100135190(v67, v68, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v47(v62, v15);
      *(_WORD *)(v66 + 12) = 2080;
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v90 = sub_100135190(v69, v70, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E5FAC(v63);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Preflight Custodian Recovery successful for custodianID: %s otPeerID: %s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v47(v62, v15);
      sub_1001E5FAC(v63);
    }

    return ((uint64_t (*)(void))v82)(0);
  }
}

uint64_t sub_1001E5C30()
{
  sub_100008EA8(v0 + 16);

  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider;
  uint64_t v2 = sub_100009F04(&qword_10032B9F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001E5CE4()
{
  return type metadata accessor for DaemonSecurityController(0);
}

uint64_t type metadata accessor for DaemonSecurityController(uint64_t a1)
{
  return sub_10000698C(a1, (uint64_t *)&unk_10032B8F0);
}

void sub_1001E5D0C()
{
  sub_1001E5DB4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001E5DB4()
{
  if (!qword_10032B900)
  {
    sub_1000112CC((uint64_t *)&unk_10032D6F0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032B900);
    }
  }
}

uint64_t sub_1001E5E10()
{
  uint64_t v1 = sub_100009F04(&qword_100329BA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001E5EA4(uint64_t a1, uint64_t a2)
{
  sub_100009F04(&qword_100329BA0);

  return sub_1001E4800(a1, a2);
}

uint64_t type metadata accessor for RecoveryKeys(uint64_t a1)
{
  return sub_10000698C(a1, qword_10032BA50);
}

uint64_t sub_1001E5F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E5FAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E600C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E6078(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v2 + v9;
  uint64_t v11 = v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *(void (**)(void, uint64_t))v11;
  uint64_t v13 = *(void *)(v11 + 8);

  return sub_1001E3E58(a1, a2, v2 + v6, v10, v12, v13);
}

uint64_t sub_1001E6190(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1 + v7;
  uint64_t v9 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void (**)(uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_1001E2ED4(a1, v1 + v4, v8, v10, v11);
}

uint64_t sub_1001E6294(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100322980);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001E62FC(uint64_t a1, void *a2, void *a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v101 = a2;
  uint64_t v102 = a1;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v96 = *(void *)(v12 - 8);
  uint64_t v97 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v95 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = v15;
  __chkstk_darwin(v14, v16);
  id v103 = (char *)&v81 - v17;
  uint64_t v88 = (void *)type metadata accessor for RecoveryKeys(0);
  uint64_t v90 = *(v88 - 1);
  uint64_t v19 = __chkstk_darwin(v88, v18);
  uint64_t v94 = (uint64_t)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v20;
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v81 - v22;
  uint64_t v104 = type metadata accessor for UUID();
  uint64_t v100 = *(void *)(v104 - 8);
  uint64_t v25 = __chkstk_darwin(v104, v24);
  long long v99 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = v26;
  __chkstk_darwin(v25, v27);
  uint64_t v87 = (char *)&v81 - v28;
  uint64_t v29 = sub_100009F04(&qword_10032B9F0);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  uint64_t v33 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v34 + 2) = a4;
  *((void *)v34 + 3) = a5;
  *((void *)v34 + 4) = a6;
  *((void *)v34 + 5) = a7;
  uint64_t v98 = v34;
  uint64_t v92 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v33, (uint64_t)a3 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v29);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
  id v35 = [self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v35)
  {
    id v86 = v35;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100007288(v36, (uint64_t)qword_10033E748);
    uint64_t v37 = v100;
    int v38 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
    uint64_t v39 = v87;
    uint64_t v40 = v104;
    uint64_t v85 = v100 + 16;
    uint64_t v84 = v38;
    v38(v87, v102, v104);
    sub_1001E5F48((uint64_t)v101, (uint64_t)v23);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    int v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      aBlock[0] = v83;
      *(_DWORD *)uint64_t v44 = 136315394;
      int v82 = v43;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v81 = v41;
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v106 = sub_100135190(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
      *(_WORD *)(v44 + 12) = 2080;
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v106 = sub_100135190(v47, v48, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001E5FAC((uint64_t)v23);
      os_log_t v49 = v81;
      _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v82, "Preflighting Custodian Recovery for custodianID: %s otPeerID: %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v40);
      sub_1001E5FAC((uint64_t)v23);
    }
    id v55 = v101;
    uint64_t v56 = v101[2];
    unint64_t v57 = v101[3];
    uint64_t v58 = *v101;
    unint64_t v59 = v101[1];
    id v60 = objc_allocWithZone((Class)CDPCustodianRecoveryInfo);
    sub_100013140(v56, v57);
    sub_100013140(v58, v59);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v62 = Data._bridgeToObjectiveC()().super.isa;
    Class v63 = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v88 = [v60 initWithWrappedRKC:isa wrappingKey:v62 custodianUUID:v63];

    sub_100013198(v58, v59);
    sub_100013198(v56, v57);
    unint64_t v64 = v103;
    Date.init()();
    uint64_t v92 = (void *)v92[7];
    os_log_type_t v65 = v95;
    uint64_t v66 = v96;
    uint64_t v67 = v97;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v95, v64, v97);
    v84(v99, v102, v104);
    uint64_t v68 = (uint64_t)v55;
    uint64_t v69 = v94;
    sub_1001E5F48(v68, v94);
    unint64_t v70 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    uint64_t v71 = v100;
    unint64_t v72 = (v93 + *(unsigned __int8 *)(v100 + 80) + v70) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
    unint64_t v73 = (v89 + *(unsigned __int8 *)(v90 + 80) + v72) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
    unint64_t v74 = (v91 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v75 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v66 + 32))(v75 + v70, v65, v67);
    (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v75 + v72, v99, v104);
    sub_1001E600C(v69, v75 + v73);
    uint64_t v76 = (uint64_t (**)(uint64_t))(v75 + v74);
    uint64_t v77 = v98;
    char *v76 = sub_1001E7768;
    v76[1] = v77;
    aBlock[4] = (uint64_t)sub_1001E6070;
    void aBlock[5] = v75;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    aBlock[3] = (uint64_t)&unk_100300800;
    uint64_t v78 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    uint64_t v79 = v88;
    uint64_t v80 = v86;
    [v92 validateRecoveryKey:v88 withContext:v86 completion:v78];
    _Block_release(v78);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v103, v67);
    swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100007288(v50, (uint64_t)qword_10033E700);
    os_log_type_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Not logged in to AppleAccount, unable to fetch. Preflight Custodian Recovery aborted.", v53, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v106 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v54 = (void *)aBlock[0];
    sub_100044640(aBlock[0], a4, a5, a6);
    swift_release();
  }
}

uint64_t sub_1001E6D3C(uint64_t a1, void *a2, void (*a3)(char *), uint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v65 = a1;
  uint64_t isa = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(isa, v11);
  id v60 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t v68 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v61 = v15;
  unint64_t v64 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for Date();
  uint64_t v66 = *(void *)(v69 - 8);
  uint64_t v16 = *(void *)(v66 + 64);
  uint64_t v18 = __chkstk_darwin(v69, v17);
  Class v62 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v71 = (char *)&v58 - v20;
  uint64_t v21 = sub_100009F04(&qword_10032B9F0);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v26 + 2) = a3;
  *((void *)v26 + 3) = a4;
  *((void *)v26 + 4) = a5;
  *((void *)v26 + 5) = a6;
  unint64_t v70 = v26;
  Class v63 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v21);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  uint64_t v27 = (char *)[self contextForPrimaryAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v27)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    id v60 = v27;
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Creating recovery keys.", v31, 2u);
      swift_slowDealloc();
    }

    uint64_t v32 = v71;
    Date.init()();
    Class v63 = (void *)v63[7];
    uint64_t v33 = v65;
    uint64_t isa = (uint64_t)UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v34 = v66;
    id v35 = v62;
    uint64_t v36 = v69;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v62, v32, v69);
    uint64_t v37 = v67;
    int v38 = v64;
    uint64_t v39 = v33;
    uint64_t v40 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v64, v39, v68);
    unint64_t v41 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    unint64_t v42 = (v16 + *(unsigned __int8 *)(v37 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    unint64_t v43 = (v61 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v44 + v41, v35, v36);
    (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v44 + v42, v38, v40);
    uint64_t v45 = (uint64_t (**)(uint64_t))(v44 + v43);
    unint64_t v46 = v70;
    char *v45 = sub_1001E749C;
    v45[1] = v46;
    aBlock[4] = sub_1001E62F8;
    void aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004DAE8;
    aBlock[3] = &unk_100300788;
    uint64_t v47 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    os_log_t v49 = (void *)isa;
    unint64_t v48 = v60;
    [v63 createRecoveryKeyWithContext:v60 forUUID:isa completion:v47];
    _Block_release(v47);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v71, v36);
  }
  else
  {
    uint64_t v50 = a6;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100007288(v51, (uint64_t)qword_10033E700);
    os_log_type_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    id v55 = v60;
    if (v54)
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Not logged in to AppleAccount, unable to fetch", v56, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t aBlock[6] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *(void *)id v55 = aBlock[0];
    swift_storeEnumTagMultiPayload();
    sub_10011E2A4((uint64_t)v55, a3, a4, a5, v50);
    sub_1001E6294((uint64_t)v55);
  }
  return swift_release();
}

uint64_t sub_1001E745C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001E749C(uint64_t a1)
{
  return sub_10011E2A4(a1, *(void (**)(char *))(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1001E74AC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, v11 + 16, v10);
}

uint64_t sub_1001E7614(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v2 + v9);
  uint64_t v11 = v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *(void (**)(uint64_t *))v11;
  uint64_t v13 = *(void *)(v11 + 8);

  return sub_1001E1DB0(a1, a2, v2 + v6, v10, v12, v13);
}

uint64_t sub_1001E7728()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001E7768(uint64_t a1)
{
  return sub_10003D4D4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001E7778()
{
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v18 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (int *)(type metadata accessor for RecoveryKeys(0) - 8);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = (v8 + v9 + v11) & ~v11;
  uint64_t v17 = v2 | v7 | v11 | 7;
  unint64_t v13 = (*(void *)(*(void *)v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v18);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v14(v0 + v8, v5);
  uint64_t v15 = v0 + v12;
  sub_100013198(*(void *)v15, *(void *)(v15 + 8));
  sub_100013198(*(void *)(v15 + 16), *(void *)(v15 + 24));
  v14(v15 + v10[8], v5);
  swift_release();

  return _swift_deallocObject(v0, v13 + 16, v17);
}

uint64_t sub_1001E7978(char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for RecoveryKeys(0) - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v1 + v10;
  uint64_t v12 = v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = *(void (**)(char *))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  return sub_1001E5280(a1, v1 + v4, (void (*)(char *, uint64_t))(v1 + v7), v11, v13, v14);
}

uint64_t *sub_1001E7AE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100013140(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100013140(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_1001E7BDC(uint64_t a1, uint64_t a2)
{
  sub_100013198(*(void *)a1, *(void *)(a1 + 8));
  sub_100013198(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1001E7C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100013140(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_1001E7D0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100013198(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100013140(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100013198(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_1001E7DC8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1001E7E44(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100013198(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100013198(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1001E7EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E7EF8);
}

uint64_t sub_1001E7EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001E7FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E7FC8);
}

void *sub_1001E7FC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001E8078()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_1001E8138()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7, v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v11 = OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue;
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue);
  if (v12)
  {
    id v13 = *(id *)(v0 + OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue);
  }
  else
  {
    v18[2] = sub_1000093D0();
    static DispatchQoS.unspecified.getter();
    v18[3] = &_swiftEmptyArrayStorage;
    v18[1] = sub_10000A6F8((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_100009F04((uint64_t *)&unk_10032A870);
    sub_100009610((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
    uint64_t v14 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v15 = *(void **)(v0 + v11);
    *(void *)(v1 + v11) = v14;
    id v13 = v14;

    uint64_t v12 = 0;
  }
  id v16 = v12;
  return v13;
}

id sub_1001E83C0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for PushHelperService()) init];
  qword_10033E970 = (uint64_t)result;
  return result;
}

uint64_t sub_1001E83F0(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_100009F04(&qword_1003289E8);
    uint64_t v8 = Array.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    sub_100135190(v8, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting Push delegates to: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void sub_1001E85F0(void (*a1)(void, void, void), uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = *(void **)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection);
  if (v16)
  {
    uint64_t v37 = v7;
    int v38 = a1;
    uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    unint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
    id v39 = v16;
    if (v18 >> 60 == 15)
    {
      id v36 = sub_1001E8138();
      uint64_t v19 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v20 = (void *)swift_allocObject();
      uint64_t v21 = v38;
      void v20[2] = v39;
      void v20[3] = v19;
      v20[4] = v21;
      void v20[5] = a2;
      v20[6] = ObjectType;
      aBlock[4] = sub_1001EAFB0;
      void aBlock[5] = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100007244;
      aBlock[3] = &unk_1003008B0;
      uint64_t v22 = _Block_copy(aBlock);
      id v39 = v39;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v40 = _swiftEmptyArrayStorage;
      sub_10000A6F8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100009F04(&qword_10032BB00);
      sub_100009610((unint64_t *)&qword_1003229C0, &qword_10032BB00);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v23 = v36;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v22);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v6);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      swift_release();
      swift_release();
    }
    else
    {
      sub_1000196B4(v17, v18);
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E700);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "We already had a public token from this connection, no need to fetch a new one", v33, 2u);
        swift_slowDealloc();
      }

      sub_100013140(v17, v18);
      v38(v17, v18, 0);
      sub_1000196A0(v17, v18);
      sub_1000196A0(v17, v18);
      id v34 = v39;
    }
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E700);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Public token was requested but there was no active APSConnection", v27, 2u);
      swift_slowDealloc();
    }

    sub_1001EAF14();
    uint64_t v28 = swift_allocError();
    *(void *)uint64_t v29 = 1;
    *(unsigned char *)(v29 + 8) = 1;
    a1(v28, 0, 1);
    swift_errorRelease();
  }
}

uint64_t sub_1001E8BB4(void *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, void), uint64_t a4)
{
  uint64_t v101 = a4;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v100 = *(void (**)(char *, uint64_t))(v7 - 8);
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (id *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  id v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v93 - v18;
  id v20 = [a1 publicToken];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      os_log_type_t v26 = (void *)Strong;
      uint64_t v27 = (uint64_t *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
      uint64_t v28 = *(void *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
      unint64_t v29 = *(void *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
      *uint64_t v27 = v22;
      v27[1] = v24;
      sub_100013140(v22, v24);
      sub_1000196A0(v28, v29);
    }
    sub_100013140(v22, v24);
    a3(v22, v24, 0);
    sub_100013198(v22, v24);
    return sub_100013198(v22, v24);
  }
  else
  {
    uint64_t v95 = v7;
    uint64_t v31 = v100;
    uint64_t v96 = a2 + 16;
    id v93 = a1;
    uint64_t v97 = v19;
    uint64_t v98 = v12;
    uint64_t v99 = v11;
    uint64_t v94 = a3;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E700);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    id v36 = v31;
    uint64_t v37 = v95;
    if (v35)
    {
      int v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No public APS token for the current connection, waiting for a new token", v38, 2u);
      swift_slowDealloc();
    }

    static DispatchTime.now()();
    void *v10 = 30;
    (*((void (**)(void *, void, uint64_t))v36 + 13))(v10, enum case for DispatchTimeInterval.seconds(_:), v37);
    id v39 = v97;
    + infix(_:_:)();
    (*((void (**)(void *, uint64_t))v36 + 1))(v10, v37);
    uint64_t v40 = v98 + 8;
    unint64_t v41 = *(void (**)(char *, uint64_t))(v98 + 8);
    v41(v16, v99);
    swift_beginAccess();
    uint64_t v42 = swift_unknownObjectWeakLoadStrong();
    if (v42)
    {
      unint64_t v43 = (char *)v42;
      dispatch_semaphore_t v44 = dispatch_semaphore_create(0);
      uint64_t v45 = *(void **)&v43[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore];
      *(void *)&v43[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore] = v44;
    }
    swift_beginAccess();
    uint64_t v46 = swift_unknownObjectWeakLoadStrong();
    if (v46)
    {
      uint64_t v47 = (void *)v46;
      unint64_t v48 = *(void **)(v46 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore);
      id v49 = v48;

      if (v48)
      {
        OS_dispatch_semaphore.wait(timeout:)();
      }
    }
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      os_log_type_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Wait time for APS Token is done", v52, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v53 = swift_unknownObjectWeakLoadStrong();
    if (v53
      && (BOOL v54 = (void *)v53,
          uint64_t v55 = *(void *)(v53 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken),
          unint64_t v56 = *(void *)(v53 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8),
          sub_1000196B4(v55, v56),
          v54,
          v56 >> 60 != 15))
    {
      uint64_t v100 = v41;
      sub_100013140(v55, v56);
      sub_100013140(v55, v56);
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        v103[0] = v96;
        *(_DWORD *)uint64_t v71 = 136315138;
        uint64_t v95 = (uint64_t)(v71 + 4);
        uint64_t v102 = (uint64_t)sub_100254A64(v55, v56);
        sub_100009F04((uint64_t *)&unk_100328450);
        uint64_t v98 = v40;
        sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
        uint64_t v72 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v74 = v73;
        swift_bridgeObjectRelease();
        uint64_t v102 = sub_100135190(v72, v74, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v39 = v97;
        swift_bridgeObjectRelease();
        sub_1000196A0(v55, v56);
        sub_1000196A0(v55, v56);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Obtained public token %s via delegate", v71, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000196A0(v55, v56);
        sub_1000196A0(v55, v56);
      }

      uint64_t v89 = v99;
      uint64_t v90 = (uint64_t (*)(char *, uint64_t))v100;
      sub_100013140(v55, v56);
      v94(v55, v56, 0);
      sub_1000196A0(v55, v56);
      sub_1000196A0(v55, v56);
      return v90(v39, v89);
    }
    else
    {
      id v57 = v93;
      id v58 = [v93 publicToken:v93];
      if (v58)
      {
        unint64_t v59 = v58;
        uint64_t v100 = v41;
        uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;

        sub_100013140(v60, v62);
        sub_100013140(v60, v62);
        Class v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          uint64_t v95 = swift_slowAlloc();
          v103[0] = v95;
          *(_DWORD *)uint64_t v65 = 136315138;
          id v93 = v65 + 4;
          uint64_t v102 = (uint64_t)sub_100254A64(v60, v62);
          sub_100009F04((uint64_t *)&unk_100328450);
          uint64_t v98 = v40;
          sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
          uint64_t v66 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v68 = v67;
          swift_bridgeObjectRelease();
          uint64_t v102 = sub_100135190(v66, v68, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v39 = v97;
          swift_bridgeObjectRelease();
          sub_100013198(v60, v62);
          sub_100013198(v60, v62);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Obtained public token %s", v65, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100013198(v60, v62);
          sub_100013198(v60, v62);
        }

        swift_beginAccess();
        uint64_t v82 = swift_unknownObjectWeakLoadStrong();
        uint64_t v83 = v94;
        unint64_t v41 = v100;
        if (v82)
        {
          uint64_t v84 = (void *)v82;
          uint64_t v85 = (uint64_t *)(v82 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
          uint64_t v86 = *(void *)(v82 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
          unint64_t v87 = *(void *)(v82 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
          *uint64_t v85 = v60;
          v85[1] = v62;
          sub_100013140(v60, v62);
          sub_1000196A0(v86, v87);
        }
        sub_100013140(v60, v62);
        v83(v60, v62, 0);
        sub_100013198(v60, v62);
        sub_100013198(v60, v62);
        uint64_t v88 = v99;
      }
      else
      {
        uint64_t v75 = v57;
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v100 = v41;
          uint64_t v78 = (uint8_t *)swift_slowAlloc();
          uint64_t v79 = swift_slowAlloc();
          uint64_t v98 = v40;
          uint64_t v80 = (void *)v79;
          *(_DWORD *)uint64_t v78 = 138412290;
          v103[0] = (uint64_t)v75;
          os_log_t v81 = v75;
          unint64_t v41 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v80 = v75;

          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to obtain a public token for connection: %@", v78, 0xCu);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          id v39 = v97;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v76 = v75;
        }
        uint64_t v91 = (void (*)(void))v94;
        uint64_t v88 = v99;

        sub_1001EAF14();
        swift_allocError();
        *(void *)uint64_t v92 = 30;
        *(unsigned char *)(v92 + 8) = 0;
        v91();
        swift_errorRelease();
      }
      return ((uint64_t (*)(char *, uint64_t))v41)(v39, v88);
    }
  }
}

uint64_t sub_1001E9718()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = sub_1001E8138();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1001EAF0C;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_100300860;
  unint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = &_swiftEmptyArrayStorage;
  sub_10000A6F8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_100009610((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v14 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v13);
  swift_release();
  return swift_release();
}

void sub_1001E99F4()
{
  id v0 = [objc_allocWithZone((Class)AKURLBag) init];
  id v1 = [v0 APSEnvironment];

  if (v1)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
    unsigned int v5 = [self isValidEnvironment:v1];

    if (v5)
    {
      swift_beginAccess();
      uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v7 = (uint64_t *)&Strong[OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment];
        *uint64_t v7 = v2;
        v7[1] = v4;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100007288(v8, (uint64_t)qword_10033E700);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Server did not provide a valid APS environment. Staying in prod.", v11, 2u);
        swift_slowDealloc();
      }
    }
  }
  swift_beginAccess();
  uint64_t v12 = swift_unknownObjectWeakLoadStrong();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v15 = *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment);
    unint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v16;
  }
  sub_1000093D0();
  swift_bridgeObjectRetain();
  uint64_t v17 = (void *)static OS_dispatch_queue.main.getter();
  id v18 = objc_allocWithZone((Class)APSConnection);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v18 initWithEnvironmentName:v19 namedDelegatePort:v20 queue:v17];

  if (v21)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)swift_unknownObjectWeakLoadStrong();
    [v21 setDelegate:v22];

    swift_beginAccess();
    uint64_t isa = (void *)swift_unknownObjectWeakLoadStrong();
    if (isa)
    {
      swift_bridgeObjectRetain();

      uint64_t isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    [v21 _setEnabledTopics:isa];

    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v15, v14, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Push service started with environment: %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t v28 = (char *)swift_unknownObjectWeakLoadStrong();
    if (v28)
    {
      unint64_t v29 = *(void **)&v28[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection];
      *(void *)&v28[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection] = v21;
    }
    else
    {
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001E9EF8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032BAF0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PushMessage();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001DE4BC(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_1001EADB4((uint64_t)v7);
  }
  sub_1001EAE14((uint64_t)v7, (uint64_t)v12);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E700);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Informing delegates of incoming message", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates);
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v20 = v12[8];
    swift_bridgeObjectRetain();
    id v21 = (uint64_t *)(v18 + 40);
    do
    {
      uint64_t v22 = *v21;
      uint64_t ObjectType = swift_getObjectType();
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v20, ObjectType, v22))
      {
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 8);
        swift_unknownObjectRetain();
        v24(v12, ObjectType, v22);
        swift_unknownObjectRelease();
      }
      v21 += 2;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  return sub_1001EAE78((uint64_t)v12);
}

id sub_1001EA1A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection];
  if (v3)
  {
    uint64_t v4 = qword_100320B70;
    id v5 = v3;
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E700);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Shutting down APS connection...", v9, 2u);
      swift_slowDealloc();
    }

    [v5 shutdown];
    [v5 setDelegate:0];

    uint64_t v10 = *(void **)&v1[v2];
    *(void *)&v1[v2] = 0;
  }
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for PushHelperService();
  return [super dealloc];
}

id sub_1001EA3C4()
{
  *(void *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates] = _swiftEmptyArrayStorage;
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment];
  *uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1[1] = v2;
  *(_OWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken] = xmmword_1002AD240;
  *(void *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore] = 0;
  *(void *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics] = _swiftEmptyArrayStorage;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PushHelperService();
  return [super init];
}

uint64_t type metadata accessor for PushHelperService()
{
  return self;
}

void sub_1001EA4C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 && a3 >> 60 != 15)
  {
    uint64_t v5 = v3;
    sub_100013140(a2, a3);
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E700);
    sub_100013140(a2, a3);
    sub_100013140(a2, a3);
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      sub_100254A64(a2, a3);
      sub_100009F04((uint64_t *)&unk_100328450);
      uint64_t v19 = v3;
      sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
      uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      sub_100135190(v11, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v5 = v19;
      swift_bridgeObjectRelease();
      sub_1000196A0(a2, a3);
      sub_1000196A0(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "We received a new APS Token: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000196A0(a2, a3);
      sub_1000196A0(a2, a3);
    }

    uint64_t v14 = (uint64_t *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    uint64_t v15 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    unint64_t v16 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
    *uint64_t v14 = a2;
    v14[1] = a3;
    sub_100013140(a2, a3);
    sub_1000196A0(v15, v16);
    uint64_t v17 = *(void **)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore);
    if (v17)
    {
      id v18 = v17;
      OS_dispatch_semaphore.signal()();
      sub_1000196A0(a2, a3);
    }
    else
    {
      sub_1000196A0(a2, a3);
    }
  }
}

void sub_1001EA864(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v6 = a2;
    if (sub_1001EAB2C(v6))
    {
      sub_1001E9EF8(v6);
    }
    else
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_100007288(v2, (uint64_t)qword_10033E700);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Incoming message is for an unknown topic", v5, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1001EAB2C(void *a1)
{
  id v2 = [a1 topic];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    if (v4 == 0xD000000000000011 && v6 == 0x80000001002999F0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return 1;
    }
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
  }
  uint64_t result = (uint64_t)[a1 topic];
  if (!result) {
    return result;
  }
  os_log_type_t v9 = (void *)result;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  if (v10 == 0xD000000000000019 && v12 == 0x8000000100299A10) {
    goto LABEL_9;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

void sub_1001EAC78()
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E700);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    id v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "APNS status changed: %{BOOL}d", v2, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001EADB4(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032BAF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001EAE14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PushMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EAE78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001EAED4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001EAF0C()
{
}

unint64_t sub_1001EAF14()
{
  unint64_t result = qword_10032BB08;
  if (!qword_10032BB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032BB08);
  }
  return result;
}

uint64_t sub_1001EAF68()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001EAFB0()
{
  return sub_1001E8BB4(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, unint64_t, void))(v0 + 32), *(void *)(v0 + 40));
}

id sub_1001EAFC8(uint64_t a1)
{
  id v2 = [self customHealthCheckVersion];
  if (v2)
  {
    id v3 = v2;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E748);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v7 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Returning custom version - %ld.", v7, 0xCu);
      swift_slowDealloc();
    }

    return v3;
  }
  return (id)a1;
}

ValueMetadata *type metadata accessor for CustodianHealthCheckVersionProvider()
{
  return &type metadata for CustodianHealthCheckVersionProvider;
}

uint64_t sub_1001EB114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100009F04(&qword_100329BA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100103F4C(a3, (uint64_t)sub_1001F1B60, v10);
  return swift_release();
}

uint64_t sub_1001EB258()
{
  v1[15] = v0;
  v1[16] = *(void *)(type metadata accessor for CustodianRecord() - 8);
  v1[17] = swift_task_alloc();
  uint64_t v2 = sub_100009F04(&qword_100321FF8);
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  uint64_t v3 = sub_100009F04(&qword_100325870);
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  return _swift_task_switch(sub_1001EB3D4, 0, 0);
}

uint64_t sub_1001EB3D4()
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = sub_100007288(v1, (uint64_t)qword_10033E748);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching cached trusted contacts", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[22];
  uint64_t v5 = v0[23];
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[15];

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  id v9 = [*(id *)(*sub_100008EF8(v0 + 2, v0[5]) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)(v0 + 2));
  if (v9)
  {
    uint64_t v11 = v0[19];
    uint64_t v10 = v0[20];
    uint64_t v12 = v0[18];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v0[15] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v12);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    uint64_t v13 = *sub_100008EF8(v0 + 7, v0[10]);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[25] = v14;
    uint64_t v15 = sub_100009F04(&qword_10032BD50);
    *uint64_t v14 = v0;
    v14[1] = sub_1001EB7E8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 14, 0, 0, 0xD000000000000011, 0x800000010029FE30, sub_1001F1BF4, v13, v15);
  }
  else
  {
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not logged in to AppleAccount, unable to fetch", v18, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    v0[13] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_1001EB7E8()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001EBB88;
  }
  else {
    uint64_t v2 = sub_1001EB8FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EB8FC()
{
  uint64_t v1 = v0[14];
  sub_100008EA8((uint64_t)(v0 + 7));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[16];
    sub_1001F2278();
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    do
    {
      uint64_t v6 = v0[17];
      sub_1001F1A64(v4, v6, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      id v7 = sub_1000AC2B8(v6, 1, 1, 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Returning cached trusted contacts", v10, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v11, "FetchCustodians found 0 records", v12, 2u);
      swift_slowDealloc();
    }
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void *))v0[1];
  return v13(_swiftEmptyArrayStorage);
}

uint64_t sub_1001EBB88()
{
  sub_100008EA8(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001EBC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6[2] = a5;
  v6[3] = a6;
  id v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *id v7 = v6;
  v7[1] = sub_1001EBCA8;
  return sub_100005B9C();
}

uint64_t sub_1001EBCA8(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001EBE48;
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    uint64_t v5 = sub_1001EBDD0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001EBDD0()
{
  (*(void (**)(void, void))(v0 + 16))(*(void *)(v0 + 48), 0);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001EBE48()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(void, uint64_t))v0[2];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001EBED8()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001EC654;
  }
  else {
    uint64_t v2 = sub_1001EBFEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EBFEC()
{
  uint64_t v1 = v0[22];
  v0[46] = v1;
  sub_100008EA8((uint64_t)(v0 + 17));
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    dispatch_semaphore_t v44 = v0 + 7;
    uint64_t v4 = v0[36];
    uint64_t v3 = v0[37];
    uint64_t v5 = v0[35];
    uint64_t v7 = v0[32];
    uint64_t v6 = v0[33];
    uint64_t v8 = v0[29];
    uint64_t v43 = v0[26] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler;
    uint64_t v42 = *(void (**)(uint64_t))(v4 + 16);
    v42(v3);
    Dependency.wrappedValue.getter();
    unint64_t v41 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v41(v3, v5);
    sub_100008EF8(v0 + 12, v0[15]);
    uint64_t v9 = v1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v52 = *(void *)(v6 + 72);
    id v49 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v50 = (void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    unint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v45 = v1;
    uint64_t v46 = v8;
    uint64_t v10 = (void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    swift_bridgeObjectRetain();
    os_log_type_t v11 = _swiftEmptyArrayStorage;
    uint64_t v47 = v7;
    do
    {
      uint64_t v12 = v0[34];
      uint64_t v14 = v0[27];
      uint64_t v13 = v0[28];
      sub_1001F1A64(v9, v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      (*v50)(v14, v12 + *(int *)(v7 + 20), v13);
      (*v49)(v14, 0, 1, v13);
      sub_1001F19FC(v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if ((*v48)(v14, 1, v13) == 1)
      {
        sub_100006574(v0[27], (uint64_t *)&unk_100321CE0);
      }
      else
      {
        uint64_t v16 = v0[30];
        uint64_t v15 = v0[31];
        uint64_t v17 = v0[28];
        id v18 = *v10;
        (*v10)(v15, v0[27], v17);
        v18(v16, v15, v17);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          os_log_type_t v11 = (void *)sub_100168894(0, v11[2] + 1, 1, (unint64_t)v11);
        }
        unint64_t v20 = v11[2];
        unint64_t v19 = v11[3];
        if (v20 >= v19 >> 1) {
          os_log_type_t v11 = (void *)sub_100168894(v19 > 1, v20 + 1, 1, (unint64_t)v11);
        }
        uint64_t v21 = v0[30];
        uint64_t v22 = v0[28];
        uint64_t v11[2] = v20 + 1;
        v18((uint64_t)v11+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v20, v21, v22);
        uint64_t v7 = v47;
      }
      v9 += v52;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    BOOL v23 = sub_100178904();
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)(v0 + 12));
    if (!v23)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100007288(v24, (uint64_t)qword_10033E748);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not all custodians are confirmed with IdMS", v27, 2u);
        swift_slowDealloc();
      }
      uint64_t v28 = v0[37];
      uint64_t v29 = v0[35];

      ((void (*)(uint64_t, uint64_t, uint64_t))v42)(v28, v43, v29);
      Dependency.wrappedValue.getter();
      v41(v28, v29);
      sub_100008EF8(v44, v0[10]);
      sub_100178B64();
      sub_100008EA8((uint64_t)v44);
    }
    uint64_t v30 = v0[26];
    uint64_t v31 = sub_100009F04(&qword_10032BD58);
    uint64_t v32 = swift_task_alloc();
    v0[47] = v32;
    *(void *)(v32 + 16) = v45;
    *(void *)(v32 + 24) = v30;
    *(unsigned char *)(v32 + 32) = v23;
    uint64_t v33 = sub_100009F04(&qword_10032BD70);
    os_log_type_t v34 = (void *)swift_task_alloc();
    v0[48] = v34;
    void *v34 = v0;
    v34[1] = sub_1001EC71C;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 25, v31, v33, 0, 0, &unk_10032BD68, v32, v31);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E748);
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      int v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "FetchCustodians found 0 records", v38, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v39 = (uint64_t (*)(void *))v0[1];
    return v39(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001EC654()
{
  sub_100008EA8(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001EC71C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001EC850, 0, 0);
}

uint64_t sub_1001EC850()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001EC918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 280) = a5;
  *(void *)(v5 + 96) = a3;
  *(void *)(v5 + 104) = a4;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = a2;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 112) = v6;
  *(void *)(v5 + 120) = *(void *)(v6 - 8);
  *(void *)(v5 + 128) = swift_task_alloc();
  sub_100009F04(&qword_10032BD78);
  *(void *)(v5 + 136) = swift_task_alloc();
  uint64_t v7 = sub_100009F04(&qword_10032BD58);
  *(void *)(v5 + 144) = v7;
  *(void *)(v5 + 152) = *(void *)(v7 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  *(void *)(v5 + 168) = swift_task_alloc();
  *(void *)(v5 + 176) = swift_task_alloc();
  uint64_t v8 = sub_100009F04(&qword_10032BD80);
  *(void *)(v5 + 184) = v8;
  *(void *)(v5 + 192) = *(void *)(v8 - 8);
  *(void *)(v5 + 200) = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  *(void *)(v5 + 208) = v9;
  *(void *)(v5 + 216) = *(void *)(v9 + 64);
  *(void *)(v5 + 224) = swift_task_alloc();
  *(void *)(v5 + 232) = swift_task_alloc();
  sub_100009F04(&qword_100321C90);
  *(void *)(v5 + 240) = swift_task_alloc();
  *(void *)(v5 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_1001ECB9C, 0, 0);
}

uint64_t sub_1001ECB9C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 256) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 208);
    char v35 = *(unsigned char *)(v0 + 280);
    unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + v4;
    uint64_t v33 = *(void *)(v3 + 72);
    unint64_t v34 = v4;
    unint64_t v31 = ((*(void *)(v0 + 216) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unint64_t v32 = (*(void *)(v0 + 216) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v6 = type metadata accessor for TaskPriority();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v28 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v27 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    uint64_t v30 = v6;
    while (1)
    {
      uint64_t v10 = *(void *)(v0 + 240);
      uint64_t v9 = *(void *)(v0 + 248);
      uint64_t v11 = *(void *)(v0 + 232);
      uint64_t v12 = *(void *)(v0 + 104);
      v29(v9, 1, 1, v6);
      sub_1001F1A64(v5, v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = 0;
      uint64_t v14 = (void *)(v13 + 16);
      *(void *)(v13 + 24) = 0;
      sub_1001F1EC4(v11, v13 + v34, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(void *)(v13 + v32) = v12;
      *(unsigned char *)(v13 + v31) = v35;
      sub_1001F205C(v9, v10);
      LODWORD(v10) = (*v28)(v10, 1, v6);
      swift_retain();
      uint64_t v15 = *(void *)(v0 + 240);
      if (v10 == 1)
      {
        sub_100006574(*(void *)(v0 + 240), &qword_100321C90);
        if (!*v14) {
          goto LABEL_8;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*v27)(v15, v6);
        if (!*v14)
        {
LABEL_8:
          uint64_t v16 = 0;
          uint64_t v18 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v18 = v17;
      swift_unknownObjectRelease();
LABEL_9:
      uint64_t v19 = **(void **)(v0 + 88);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = &unk_10032BD98;
      *(void *)(v20 + 24) = v13;
      uint64_t v21 = v18 | v16;
      if (v18 | v16)
      {
        uint64_t v21 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v16;
        *(void *)(v0 + 40) = v18;
      }
      uint64_t v8 = *(void *)(v0 + 248);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v21;
      *(void *)(v0 + 64) = v19;
      swift_task_create();
      swift_release();
      sub_100006574(v8, &qword_100321C90);
      v5 += v33;
      --v2;
      uint64_t v6 = v30;
      if (!v2)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  TaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 264) = &_swiftEmptyDictionarySingleton;
  unint64_t v22 = sub_1001F21B4();
  BOOL v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v23;
  *BOOL v23 = v0;
  v23[1] = sub_1001ECF60;
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 136);
  return dispatch thunk of AsyncIteratorProtocol.next()(v25, v24, v22);
}

uint64_t sub_1001ECF60()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[24];
    uint64_t v3 = v2[25];
    uint64_t v5 = v2[23];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = OSTransaction.complete();
  }
  else
  {
    uint64_t v6 = sub_1001ED0A0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001ED0A0()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[19] + 48))(v2, 1, v1) != 1)
  {
    uint64_t v22 = v0[33];
    uint64_t v24 = v0[21];
    uint64_t v23 = v0[22];
    uint64_t v60 = v0[20];
    uint64_t v25 = v0[14];
    uint64_t v26 = v0[15];
    sub_1001F2210(v2, v23);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    uint64_t v28 = *(int *)(v1 + 48);
    v27(v24, v23, v25);
    uint64_t v29 = *(void **)(v23 + v28);
    *(void *)(v24 + v28) = v29;
    uint64_t v30 = *(int *)(v1 + 48);
    v27(v60, v23, v25);
    *(void *)(v60 + v30) = v29;
    id v31 = v29;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v0[9] = v22;
    unint64_t v33 = sub_1001359C4(v24);
    uint64_t v34 = *(void *)(v22 + 16);
    BOOL v35 = (v14 & 1) == 0;
    uint64_t v13 = v34 + v35;
    if (__OFADD__(v34, v35))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    char v36 = v14;
    if (*(void *)(v0[33] + 24) >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10022DF64();
      }
    }
    else
    {
      uint64_t v37 = v0[21];
      sub_10022B818(v13, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = sub_1001359C4(v37);
      if ((v36 & 1) != (v39 & 1))
      {
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v33 = v38;
    }
    uint64_t v43 = (void *)v0[9];
    if (v36)
    {
      uint64_t v44 = v43[7];
      uint64_t v45 = 8 * v33;

      *(void *)(v44 + v45) = v31;
    }
    else
    {
      uint64_t v46 = v0[21];
      uint64_t v47 = v0[14];
      uint64_t v48 = v0[15];
      v43[(v33 >> 6) + 8] |= 1 << v33;
      uint64_t v13 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v27)(v43[6] + *(void *)(v48 + 72) * v33, v46, v47);
      *(void *)(v43[7] + 8 * v33) = v31;
      uint64_t v49 = v43[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50)
      {
LABEL_32:
        __break(1u);
        return dispatch thunk of AsyncIteratorProtocol.next()(v13, v14, v15);
      }
      v43[2] = v51;
    }
    uint64_t v52 = v0[21];
    uint64_t v53 = v0[22];
    uint64_t v54 = v0[20];
    uint64_t v55 = v0[14];
    uint64_t v56 = v0[15];
    swift_bridgeObjectRelease();
    id v57 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v57(v52, v55);
    v57(v54, v55);
    sub_100006574(v53, &qword_10032BD58);
    v0[33] = v43;
    unint64_t v58 = sub_1001F21B4();
    unint64_t v59 = (void *)swift_task_alloc();
    v0[34] = v59;
    *unint64_t v59 = v0;
    v59[1] = sub_1001ECF60;
    uint64_t v14 = v0[23];
    uint64_t v13 = v0[17];
    unint64_t v15 = v58;
    return dispatch thunk of AsyncIteratorProtocol.next()(v13, v14, v15);
  }
  uint64_t v3 = v0[32];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  sub_100006574(v2, &qword_10032BD78);
  if (v3)
  {
    uint64_t v4 = v0[33];
    uint64_t v5 = v0[26];
    uint64_t v6 = v0[12] + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = v0[28];
      uint64_t v11 = v0[15];
      uint64_t v10 = v0[16];
      uint64_t v12 = v0[14];
      sub_1001F1A64(v6, v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
      uint64_t v13 = sub_1001F19FC(v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (!*(void *)(v4 + 16)) {
        break;
      }
      uint64_t v13 = sub_1001359C4(v0[16]);
      if ((v14 & 1) == 0) {
        goto LABEL_30;
      }
      uint64_t v16 = v0[16];
      uint64_t v17 = v0[14];
      uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0[15] + 8);
      id v19 = *(id *)(*(void *)(v4 + 56) + 8 * v13);
      v18(v16, v17);
      id v20 = v19;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      ++v8;
      uint64_t v21 = v0[32];
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v6 += v7;
      if (v8 == v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_16:
  unint64_t v41 = (void *)v0[10];
  swift_bridgeObjectRelease();
  *unint64_t v41 = _swiftEmptyArrayStorage;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = (uint64_t (*)(void))v0[1];
  return v42();
}

uint64_t sub_1001ED60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 372) = a6;
  *(void *)(v6 + 120) = a4;
  *(void *)(v6 + 128) = a5;
  *(void *)(v6 + 112) = a1;
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v6 + 136) = v7;
  *(void *)(v6 + 144) = *(void *)(v7 - 8);
  *(void *)(v6 + 152) = swift_task_alloc();
  *(void *)(v6 + 160) = swift_task_alloc();
  *(void *)(v6 + 168) = swift_task_alloc();
  *(void *)(v6 + 176) = swift_task_alloc();
  *(void *)(v6 + 184) = swift_task_alloc();
  *(void *)(v6 + 192) = swift_task_alloc();
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = type metadata accessor for CustodianRecord();
  *(void *)(v6 + 216) = swift_task_alloc();
  *(void *)(v6 + 224) = swift_task_alloc();
  *(void *)(v6 + 232) = swift_task_alloc();
  *(void *)(v6 + 240) = swift_task_alloc();
  *(void *)(v6 + 248) = swift_task_alloc();
  *(void *)(v6 + 256) = swift_task_alloc();
  *(void *)(v6 + 264) = swift_task_alloc();
  *(void *)(v6 + 272) = swift_task_alloc();
  *(void *)(v6 + 280) = swift_task_alloc();
  return _swift_task_switch(sub_1001ED7B4, 0, 0);
}

uint64_t sub_1001ED7B4()
{
  uint64_t v36 = v0;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 288) = sub_100007288(v3, (uint64_t)qword_10033E748);
  sub_1001F1A64(v2, v1, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 280);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = UUID.uuidString.getter();
    *(void *)(v0 + 104) = sub_100135190(v9, v10, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Checking CKShare and IdMS confirmation for trusted Contact: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001F19FC(*(void *)(v0 + 280), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  uint64_t v11 = *(void *)(v0 + 120);
  if (*(void *)(v11 + *(int *)(*(void *)(v0 + 208) + 36)) == 2)
  {
    Date.init()();
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1001EDE30;
    uint64_t v13 = *(void *)(v0 + 120);
    return sub_1001F048C(v13);
  }
  else
  {
    *(_WORD *)(v0 + 375) = 0;
    uint64_t v15 = *(void *)(v0 + 248);
    sub_1001F1A64(v11, *(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_1001F1A64(v11, v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 256);
    if (v18)
    {
      uint64_t v34 = *(void *)(v0 + 208);
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315906;
      uint64_t v22 = UUID.uuidString.getter();
      *(void *)(v0 + 64) = sub_100135190(v22, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001F19FC(v19, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v21 + 12) = 1024;
      *(_DWORD *)(v0 + 356) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 18) = 1024;
      *(_DWORD *)(v0 + 360) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 24) = 1024;
      int v24 = *(unsigned __int8 *)(v20 + *(int *)(v34 + 48));
      sub_1001F19FC(v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_DWORD *)(v0 + 364) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v21, 0x1Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F19FC(v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_1001F19FC(v19, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    sub_1001F1A64(*(void *)(v0 + 120), *(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = *(void *)(v0 + 240);
    if (v27)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v30 = sub_1002682DC();
      *(void *)(v0 + 56) = sub_100135190(v30, v31, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001F19FC(v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F19FC(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    Date.init()();
    unint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v32;
    *unint64_t v32 = v0;
    v32[1] = sub_1001EEE3C;
    uint64_t v33 = *(void *)(v0 + 120);
    return sub_1001EF634(v33);
  }
}

uint64_t sub_1001EDE30(char a1)
{
  *(unsigned char *)(*(void *)v1 + 373) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001EDF30, 0, 0);
}

uint64_t sub_1001EDF30()
{
  uint64_t v60 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (unsigned char *)(v0 + 372);
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t v4 = *(void *)(v1 + 192);
  uint64_t v5 = *(void *)(v1 + 200);
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 120);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  *(void *)(v1 + 304) = v9;
  *(void *)(v1 + 312) = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v4, v5, v6);
  sub_1001F1A64(v8, v3, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = *(void *)(v1 + 272);
    uint64_t v13 = *(void *)(v1 + 192);
    uint64_t v58 = *(void *)(v1 + 200);
    os_log_type_t type = v11;
    uint64_t v14 = *(void *)(v1 + 184);
    uint64_t v15 = *(void *)(v1 + 136);
    uint64_t v16 = *(void *)(v1 + 144);
    uint64_t v17 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 134218242;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v19 = v18;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v20(v14, v15);
    *(void *)(v1 + 88) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v20(v13, v15);
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = UUID.uuidString.getter();
    *(void *)(v1 + 96) = sub_100135190(v21, v22, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "⏰ Took %f secs to check isSharedAndAccepted for  %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v20(v58, v15);
  }
  else
  {
    uint64_t v23 = *(void *)(v1 + 272);
    int v24 = v2;
    uint64_t v25 = *(void *)(v1 + 192);
    uint64_t v26 = *(void *)(v1 + 200);
    uint64_t v27 = *(void *)(v1 + 136);
    uint64_t v28 = *(void *)(v1 + 144);

    sub_1001F19FC(v23, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v20(v25, v27);
    uint64_t v29 = v26;
    uint64_t v2 = v24;
    v20(v29, v27);
  }
  *(void *)(v1 + 320) = v20;
  int v30 = v2[1];
  if (v30 != 1 || (*v2 & 1) != 0)
  {
    v2[4] = v30;
    v2[3] = v30;
    uint64_t v36 = *(void *)(v1 + 248);
    uint64_t v37 = *(void *)(v1 + 120);
    sub_1001F1A64(v37, *(void *)(v1 + 256), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_1001F1A64(v37, v36, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v42 = *(void *)(v1 + 248);
    uint64_t v41 = *(void *)(v1 + 256);
    if (v40)
    {
      uint64_t v56 = *(void *)(v1 + 208);
      uint64_t v43 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315906;
      uint64_t v44 = UUID.uuidString.getter();
      *(void *)(v1 + 64) = sub_100135190(v44, v45, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001F19FC(v41, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v43 + 12) = 1024;
      *(_DWORD *)(v1 + 356) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 18) = 1024;
      *(_DWORD *)(v1 + 360) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 24) = 1024;
      int v46 = *(unsigned __int8 *)(v42 + *(int *)(v56 + 48));
      sub_1001F19FC(v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_DWORD *)(v1 + 364) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v43, 0x1Eu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F19FC(v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_1001F19FC(v41, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    sub_1001F1A64(*(void *)(v1 + 120), *(void *)(v1 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.info.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = *(void *)(v1 + 240);
    if (v49)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v52 = sub_1002682DC();
      *(void *)(v1 + 56) = sub_100135190(v52, v53, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001F19FC(v50, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F19FC(*(void *)(v1 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }

    Date.init()();
    uint64_t v54 = (void *)swift_task_alloc();
    *(void *)(v1 + 336) = v54;
    void *v54 = v1;
    v54[1] = sub_1001EEE3C;
    uint64_t v55 = *(void *)(v1 + 120);
    return sub_1001EF634(v55);
  }
  else
  {
    uint64_t v31 = *(void *)(v1 + 208);
    uint64_t v32 = *(void *)(v1 + 120);
    Date.init()();
    uint64_t v33 = v32 + *(int *)(v31 + 20);
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v1 + 328) = v34;
    void *v34 = v1;
    v34[1] = sub_1001EE694;
    return sub_1001EFDEC(v33);
  }
}

uint64_t sub_1001EE694(char a1)
{
  *(unsigned char *)(*(void *)v1 + 374) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001EE794, 0, 0);
}

uint64_t sub_1001EE794()
{
  uint64_t v46 = v0;
  uint64_t v1 = (unsigned __int8 *)(v0 + 374);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 120);
  (*(void (**)(void, void, void))(v0 + 304))(*(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 136));
  sub_1001F1A64(v3, v2, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v42 = *(void *)(v0 + 264);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v44 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134218242;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v12 = v11;
    v6(v7, v9);
    *(void *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v6(v8, v9);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = UUID.uuidString.getter();
    *(void *)(v0 + 80) = sub_100135190(v13, v14, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v42, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "⏰ %f secs to check IdMSConfirmed for %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    uint64_t v1 = (unsigned __int8 *)(v0 + 374);
    swift_slowDealloc();
    swift_slowDealloc();

    v6(v44, v9);
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v16 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v17 = *(void *)(v0 + 176);
    uint64_t v19 = *(void *)(v0 + 136);

    sub_1001F19FC(v16, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    v15(v18, v19);
    v15(v17, v19);
  }
  int v20 = *v1;
  v1[2] = 1;
  v1[1] = v20;
  uint64_t v21 = *(void *)(v0 + 248);
  uint64_t v22 = *(void *)(v0 + 120);
  sub_1001F1A64(v22, *(void *)(v0 + 256), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_1001F1A64(v22, v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v26 = *(void *)(v0 + 256);
  if (v25)
  {
    uint64_t v43 = *(void *)(v0 + 208);
    uint64_t v28 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315906;
    uint64_t v29 = UUID.uuidString.getter();
    *(void *)(v0 + 64) = sub_100135190(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(_WORD *)(v28 + 12) = 1024;
    *(_DWORD *)(v0 + 356) = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 18) = 1024;
    *(_DWORD *)(v0 + 360) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 24) = 1024;
    int v31 = *(unsigned __int8 *)(v27 + *(int *)(v43 + 48));
    sub_1001F19FC(v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(_DWORD *)(v0 + 364) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v28, 0x1Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001F19FC(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_1001F19FC(v26, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  sub_1001F1A64(*(void *)(v0 + 120), *(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void *)(v0 + 240);
  if (v34)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v37 = sub_1002682DC();
    *(void *)(v0 + 56) = sub_100135190(v37, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v35, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001F19FC(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  Date.init()();
  os_log_type_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v39;
  *os_log_type_t v39 = v0;
  v39[1] = sub_1001EEE3C;
  uint64_t v40 = *(void *)(v0 + 120);
  return sub_1001EF634(v40);
}

uint64_t sub_1001EEE3C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 377) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001EEF3C, 0, 0);
}

uint64_t sub_1001EEF3C()
{
  uint64_t v49 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 120);
  (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 16))(*(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 136));
  sub_1001F1A64(v2, v1, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v45 = *(void *)(v0 + 232);
    os_log_type_t type = v4;
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134218242;
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v11 = v10;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v12(v5, v8);
    *(void *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12(v7, v8);
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v13 = UUID.uuidString.getter();
    *(void *)(v0 + 48) = sub_100135190(v13, v14, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v45, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v3, type, "⏰ Took %f secs to checkCRK for %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 232);
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    sub_1001F19FC(v15, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  uint64_t v16 = (unsigned __int8 *)(v0 + 375);
  uint64_t v17 = *(void *)(v0 + 224);
  uint64_t v18 = *(void *)(v0 + 120);
  type metadata accessor for CustodianDefaults();
  swift_initStackObject();
  uint64_t v19 = UUID.uuidString.getter();
  char v21 = sub_10019F370(v19, v20);
  swift_bridgeObjectRelease();
  sub_1001F1A64(v18, v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    int v46 = *(unsigned __int8 *)(v0 + 377);
    int v42 = *(unsigned __int8 *)(v0 + 376);
    int v43 = *v16;
    uint64_t v24 = *(void *)(v0 + 224);
    char v44 = v21;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136316162;
    type metadata accessor for UUID();
    sub_100006F74((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_100135190(v26, v27, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(_WORD *)(v25 + 12) = 1024;
    *(_DWORD *)(v0 + 368) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 18) = 1024;
    *(_DWORD *)(v0 + 344) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 24) = 1024;
    *(_DWORD *)(v0 + 348) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 30) = 1024;
    *(_DWORD *)(v0 + 352) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Adding Custodian ID: %s\nisAcceptedAndShared: %{BOOL}d\nisIdMSConfirmed: %{BOOL}d\ncrkExists: %{BOOL}d\npreflightFailed: %{BOOL}d", (uint8_t *)v25, 0x24u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    char v21 = v44;
  }
  else
  {
    sub_1001F19FC(*(void *)(v0 + 224), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  int v40 = *v16;
  int v41 = *(unsigned __int8 *)(v0 + 376);
  uint64_t v28 = *(void *)(v0 + 216);
  uint64_t v29 = *(void *)(v0 + 160);
  uint64_t v30 = *(void *)(v0 + 144);
  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v32 = *(unsigned char *)(v0 + 377) & ~v21 & 1;
  uint64_t v33 = *(void *)(v0 + 112);
  uint64_t v34 = *(void *)(v0 + 120);
  uint64_t v35 = *(int *)(sub_100009F04(&qword_10032BD58) + 48);
  uint64_t v36 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v33, v34, v36);
  sub_1001F2278();
  sub_1001F1A64(v34, v28, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  id v37 = sub_1000AC2B8(v28, v41, v40, v32);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
  *(void *)(v33 + v35) = v37;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_1001EF634(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100322970);
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  return _swift_task_switch(sub_1001EF754, 0, 0);
}

uint64_t sub_1001EF754()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[9] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__securityController, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_100008EF8(v0 + 2, v0[5]);
  sub_1002686B4(v4);
  uint64_t v6 = *v5;
  uint64_t v7 = swift_task_alloc();
  v0[16] = v7;
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v4;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[17] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001EF8DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 20, 0, 0, 0xD00000000000001FLL, 0x800000010029FE10, sub_1001F1BEC, v7, &type metadata for Bool);
}

uint64_t sub_1001EF8DC()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001EFB88;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001EF9F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001EF9F8()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 160);
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
  sub_100008EA8(v0 + 16);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E748);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 156) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CRK exists on OT? %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v1);
}

uint64_t sub_1001EFB88()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100008EA8(v0 + 16);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109378;
    *(_DWORD *)(v0 + 152) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 8) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v7, 0x12u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10(0);
}

uint64_t sub_1001EFDEC(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = sub_100009F04(&qword_100324688);
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_1001EFEB0, 0, 0);
}

uint64_t sub_1001EFEB0()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[9] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *sub_100008EF8(v0 + 2, v0[5]);
  uint64_t v6 = swift_task_alloc();
  v0[13] = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001F0014;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD000000000000026, 0x800000010029FDE0, sub_1001F1BE4, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_1001F0014()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001F0260;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001F0130;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F0130()
{
  sub_100008EA8(v0 + 16);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E748);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Confirm custodian with IdMS finished successfully", v4, 2u);
    swift_slowDealloc();
  }

  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v6 = *(void *)(v0 + 120) == 0;
  return v5(v6);
}

uint64_t sub_1001F0260()
{
  swift_task_dealloc();
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Confirm custodian with IdMS finished with error %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(BOOL))v0[1];
  BOOL v8 = v0[15] == 0;
  return v7(v8);
}

uint64_t sub_1001F048C(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  v2[29] = type metadata accessor for CustodianRecord();
  v2[30] = swift_task_alloc();
  uint64_t v3 = sub_100009F04(&qword_100324680);
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  v2[34] = v4;
  v2[35] = *(void *)(v4 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = type metadata accessor for CustodianHealthRecord();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  return _swift_task_switch(sub_1001F0638, 0, 0);
}

uint64_t sub_1001F0638()
{
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[27];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[28] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = sub_100008EF8(v0 + 2, v0[5]);
  uint64_t v7 = v5 + *(int *)(v4 + 20);
  uint64_t v8 = *v6;
  uint64_t v9 = swift_task_alloc();
  v0[42] = v9;
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[43] = v10;
  void *v10 = v0;
  v10[1] = sub_1001F07A8;
  uint64_t v11 = v0[40];
  uint64_t v12 = v0[37];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, 0, 0, 0xD000000000000021, 0x800000010029FD90, sub_1001F19F4, v9, v12);
}

uint64_t sub_1001F07A8()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001F0C2C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001F08C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F08C4()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 224);
  sub_1001F1EC4(*(void *)(v0 + 320), *(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_100008EA8(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__cloudStorage, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    uint64_t v5 = *(void *)(v0 + 328);
    sub_100041E8C((long long *)(v0 + 56), v0 + 136);
    uint64_t v6 = *sub_100008EF8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 360) = v7;
    *(void *)(v7 + 16) = v6;
    *(void *)(v7 + 24) = v5;
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001F0FC4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 384, 0, 0, 0xD000000000000017, 0x800000010029FDC0, sub_1001F1A5C, v7, &type metadata for Bool);
  }
  else
  {
    *(void *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    sub_100006574(v0 + 56, (uint64_t *)&unk_10032B4A0);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Lost reference to CloudStorage. Assuming not shared", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void *)(v0 + 328);

    sub_1001F19FC(v13, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14(0);
  }
}

uint64_t sub_1001F0C2C()
{
  uint64_t v16 = v0;
  swift_task_dealloc();
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[27];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E748);
  sub_1001F1A64(v2, v1, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[30];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    type metadata accessor for UUID();
    sub_100006F74((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[23] = sub_100135190(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[22] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to fetch Health Record for custodianID %s.\nUnable to determine if Health record is shared and accepted. %@", (uint8_t *)v8, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_1001F19FC(v7, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12(0);
}

uint64_t sub_1001F0FC4()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001F11C8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001F10E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001F10E0()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 384);
  sub_1001F19FC(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_100008EA8(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001F11C8()
{
  os_log_type_t v23 = v0;
  swift_task_dealloc();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[41];
  uint64_t v3 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E748);
  sub_1001F1A64(v1, v2, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_1001F1A64(v1, v3, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[41];
  uint64_t v10 = v0[38];
  uint64_t v9 = v0[39];
  if (v7)
  {
    uint64_t v21 = v0[41];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    type metadata accessor for UUID();
    sub_100006F74((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[24] = sub_100135190(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v9, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[25] = sub_100135190(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001F19FC(v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[26] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to determine if HealthRecord %s\nfor custodian %s\nis shared and accepted due to error: %@", (uint8_t *)v11, 0x20u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v17 = v21;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    sub_1001F19FC(v10, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_1001F19FC(v9, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_errorRelease();
    uint64_t v17 = v8;
  }
  sub_1001F19FC(v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_100008EA8((uint64_t)(v0 + 17));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18(0);
}

uint64_t sub_1001F1610()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController;
  uint64_t v4 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler;
  uint64_t v6 = sub_100009F04(&qword_100324688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__securityController;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100322970);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__cloudStorage;
  uint64_t v10 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return swift_deallocClassInstance();
}

uint64_t sub_1001F17D4()
{
  return type metadata accessor for DaemonCustodianFetcher();
}

uint64_t type metadata accessor for DaemonCustodianFetcher()
{
  uint64_t result = qword_10032BB60;
  if (!qword_10032BB60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001F1828()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100324040, &qword_10032D770);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&unk_100327F40, (uint64_t *)&unk_100322460);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t sub_1001F19F4(uint64_t a1)
{
  return sub_10023E80C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F19FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001F1A5C(uint64_t a1)
{
  return sub_1001EB114(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F1A64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001F1ACC()
{
  uint64_t v1 = sub_100009F04(&qword_100329BA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001F1B60(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_100009F04(&qword_100329BA0);

  return sub_100193D54(a1, v3);
}

uint64_t sub_1001F1BE4(uint64_t a1)
{
  return sub_10017A4E4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F1BEC(uint64_t a1)
{
  return sub_1001E46B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F1BF4(uint64_t a1)
{
  return sub_10023D764(a1, v1);
}

uint64_t sub_1001F1BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v8 = *(unsigned char *)(v2 + 32);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = sub_100054724;
  return sub_1001EC918(a1, a2, v6, v7, v8);
}

uint64_t sub_1001F1CC0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  char v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1001F1EC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001F1F2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100025248;
  return sub_1001ED60C(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1001F205C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100321C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F20C4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F20FC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100025248;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10032BD90 + dword_10032BD90);
  return v6(a1, v4);
}

unint64_t sub_1001F21B4()
{
  unint64_t result = qword_10032BDA8;
  if (!qword_10032BDA8)
  {
    sub_1000112CC(&qword_10032BD80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10032BDA8);
  }
  return result;
}

uint64_t sub_1001F2210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032BD58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F2278()
{
  unint64_t result = qword_100324640;
  if (!qword_100324640)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100324640);
  }
  return result;
}

uint64_t sub_1001F22B8()
{
  type metadata accessor for AppleIDAvailabilityHealthCheck();
  sub_100009F04(&qword_10032C050);
  uint64_t result = String.init<A>(describing:)();
  qword_10032BDB8 = result;
  unk_10032BDC0 = v1;
  return result;
}

id sub_1001F2304()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321D50);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_1001F2B00())
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315138;
      if (qword_100320CB0 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_10032BDB8;
      unint64_t v27 = unk_10032BDC0;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_100135190(v26, v27, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - Could not get Continuation Key, Apple ID is NOT available.", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    uint64_t v21 = -4413;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__followUpController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v12 = v44;
  uint64_t v13 = v45;
  sub_100008EF8(v43, v44);
  char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  sub_100008EA8((uint64_t)v43);
  if (v14)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E778);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      if (qword_100320CB0 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_10032BDB8;
      unint64_t v20 = unk_10032BDC0;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_100135190(v19, v20, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - Renew Credentials CFU is posted, Apple ID is NOT available.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    uint64_t v21 = -4412;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v28 = self;
  id result = [v28 sharedInstance];
  if (!result)
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v30 = result;
  id v31 = [result contextForPrimaryAccount];

  if (!v31)
  {
    sub_100008EA8((uint64_t)v43);
    goto LABEL_26;
  }
  id result = [v28 sharedInstance];
  if (!result)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v32 = result;
  unsigned __int8 v33 = [result isOTEnabledForContext:v31];

  sub_100008EA8((uint64_t)v43);
  if ((v33 & 1) == 0)
  {
LABEL_26:
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E778);
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      int v40 = (uint8_t *)swift_slowAlloc();
      v43[0] = swift_slowAlloc();
      *(_DWORD *)int v40 = 136315138;
      if (qword_100320CB0 != -1) {
        swift_once();
      }
      uint64_t v41 = qword_10032BDB8;
      unint64_t v42 = unk_10032BDC0;
      swift_bridgeObjectRetain();
      uint64_t v46 = sub_100135190(v41, v42, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - Octagon trust is not healthy, Apple ID is NOT available.", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AAError(0);
    uint64_t v21 = -4414;
    goto LABEL_33;
  }
  id result = (id)sub_1001F679C();
  if (!result) {
    return result;
  }
  uint64_t v34 = result;
  id v35 = [result integerValue];

  int v36 = sub_10005720C((unint64_t)v35);
  if (v36 != 4 && v36 != 2) {
    return 0;
  }
  type metadata accessor for AAError(0);
  uint64_t v21 = -4416;
LABEL_33:
  uint64_t v46 = v21;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000DB23C();
  _BridgedStoredNSError.init(_:userInfo:)();
  return (id)v43[0];
}

BOOL sub_1001F2B00()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_1001F4578();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v7 = v15;
  if (!v6)
  {

LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  id v8 = v6;
  id v9 = [v7 continuationTokenForAccount:v8];
  if (!v9)
  {

    goto LABEL_6;
  }
  uint64_t v10 = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

LABEL_7:
  swift_bridgeObjectRelease();
  return v12 != 0;
}

uint64_t sub_1001F2C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[143] = a6;
  v6[142] = a5;
  v6[141] = a4;
  uint64_t v7 = sub_100009F04(&qword_10032C058);
  v6[144] = v7;
  v6[145] = *(void *)(v7 - 8);
  v6[146] = swift_task_alloc();
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v6[147] = v8;
  v6[148] = *(void *)(v8 - 8);
  v6[149] = swift_task_alloc();
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CB0);
  v6[150] = v9;
  v6[151] = *(void *)(v9 - 8);
  v6[152] = swift_task_alloc();
  uint64_t v10 = sub_100009F04(&qword_100325870);
  v6[153] = v10;
  v6[154] = *(void *)(v10 - 8);
  v6[155] = swift_task_alloc();
  return _swift_task_switch(sub_1001F2E9C, 0, 0);
}

uint64_t sub_1001F2E9C()
{
  uint64_t v1 = *(void *)(v0 + 1240);
  uint64_t v2 = *(void *)(v0 + 1232);
  uint64_t v3 = *(void *)(v0 + 1224);
  uint64_t v4 = *(void *)(v0 + 1128);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v5 = [*(id *)(*sub_100008EF8((void *)(v0 + 640), *(void *)(v0 + 664)) + 16) aa_primaryAppleAccount];
  if (v5 && (id v6 = v5, v7 = objc_msgSend(v5, "aa_altDSID"), v6, v7))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_100008EA8(v0 + 640);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v9)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  id v12 = [self analyticsEventWithName:v10 altDSID:v11 flowID:0];
  *(void *)(v0 + 1248) = v12;

  uint64_t v13 = off_10032B000;
  uint64_t v91 = (uint64_t *)(v0 + 160);
  if (v12)
  {
    id v14 = v12;

    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v14 setObject:isa forKeyedSubscript:kAAFDidSucceed];

    id v16 = v14;
    id v17 = sub_1001F4578();
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(v0 + 1216);
      uint64_t v20 = *(void *)(v0 + 1208);
      uint64_t v21 = *(void *)(v0 + 1200);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, *(void *)(v0 + 1128) + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v21);
      Dependency.wrappedValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      uint64_t v22 = *(void **)(v0 + 800);
      [v22 securityLevelForAccount:v18];
    }
    uint64_t v25 = *(void *)(v0 + 1192);
    uint64_t v26 = *(void *)(v0 + 1184);
    uint64_t v27 = *(void *)(v0 + 1176);
    uint64_t v28 = *(void *)(v0 + 1128);
    Class v29 = UInt._bridgeToObjectiveC()().super.super.isa;
    [v16 setObject:v29 forKeyedSubscript:kAAAnalyticsSecurityLevel];

    os_log_type_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
    v24(v25, v28 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v27);
    id v30 = v16;
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    sub_100056834();
    Class v31 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100008EA8(v0 + 720);
    [v30 setObject:v31 forKeyedSubscript:kAAAnalyticsCdpStatus];

    uint64_t v13 = off_10032B000;
    uint64_t v23 = *(void *)(v0 + 1184);
  }
  else
  {
    uint64_t v23 = *(void *)(v0 + 1184);
    os_log_type_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  }
  uint64_t v32 = *(void *)(v0 + 1192);
  uint64_t v33 = *(void *)(v0 + 1176);
  v24(v32, (uint64_t)v13[442] + *(void *)(v0 + 1128), v33);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v32, v33);
  uint64_t v34 = (void *)(v0 + 160);
  sub_100058204(v91);
  sub_100008EA8(v0 + 680);
  if (v12)
  {
    id v35 = (_OWORD *)(v0 + 592);
    sub_10002895C((uint64_t)v91, v0 + 64, &qword_10032C068);
    if (*(void *)(v0 + 64) == 1)
    {
      id v36 = v12;
    }
    else
    {
      long long v37 = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 416) = v37;
      *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 96);
      sub_10002895C(v0 + 400, v0 + 920, &qword_10032C070);
      sub_10002895C(v0 + 408, v0 + 912, &qword_10032C070);
      id v38 = v12;
      sub_1001F6ECC(v91, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
      sub_1001F6FA4((id *)(v0 + 912));
      sub_10002895C(v0 + 416, v0 + 904, &qword_10032C070);
      sub_1001F6FA4((id *)(v0 + 904));
      sub_10002895C(v0 + 432, v0 + 896, &qword_10032C070);
      sub_1001F6FA4((id *)(v0 + 896));
      sub_10002895C(v0 + 440, v0 + 888, &qword_10032C070);
      sub_1001F6FA4((id *)(v0 + 888));
      sub_10002895C(v0 + 920, v0 + 1024, &qword_10032C070);
      uint64_t v39 = *(void *)(v0 + 1024);
      if (v39)
      {
        *(void *)(v0 + 1088) = v39;
        sub_10000850C(0, (unint64_t *)&qword_100324670);
        uint64_t v40 = _bridgeAnythingToObjectiveC<A>(_:)();

LABEL_19:
        uint64_t v41 = (_OWORD *)(v0 + 496);
        [v12 setObject:v40 forKeyedSubscript:kAAAnalyticsEdpHealth];
        swift_unknownObjectRelease();

        sub_10002895C((uint64_t)v91, v0 + 592, &qword_10032C068);
        if (*(void *)v35 == 1)
        {
          id v42 = v12;
          uint64_t v43 = 0;
        }
        else
        {
          long long v44 = *(_OWORD *)(v0 + 608);
          *(_OWORD *)(v0 + 112) = *v35;
          *(_OWORD *)(v0 + 128) = v44;
          *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 624);
          sub_10002895C(v0 + 120, v0 + 880, &qword_10032C070);
          uint64_t v34 = (void *)(v0 + 160);
          sub_10002895C(v0 + 112, v0 + 872, &qword_10032C070);
          id v45 = v12;
          sub_1001F6ECC(v91, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
          sub_1001F6FA4((id *)(v0 + 872));
          sub_10002895C(v0 + 128, v0 + 864, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 864));
          sub_10002895C(v0 + 144, v0 + 856, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 856));
          sub_10002895C(v0 + 152, v0 + 848, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 848));
          sub_10002895C(v0 + 880, v0 + 1040, &qword_10032C070);
          uint64_t v46 = *(void *)(v0 + 1040);
          if (v46)
          {
            *(void *)(v0 + 1096) = v46;
            sub_10000850C(0, (unint64_t *)&qword_100324670);
            uint64_t v43 = _bridgeAnythingToObjectiveC<A>(_:)();
          }
          else
          {
            uint64_t v43 = 0;
          }
        }
        uint64_t v47 = (_OWORD *)(v0 + 16);
        [v12 setObject:v43 forKeyedSubscript:kAAAnalyticsEdpPrimaryRecordHealth];
        swift_unknownObjectRelease();

        sub_10002895C((uint64_t)v34, v0 + 496, &qword_10032C068);
        if (*(void *)v41 == 1)
        {
          id v48 = v12;
          uint64_t v49 = 0;
        }
        else
        {
          long long v50 = *(_OWORD *)(v0 + 512);
          *(_OWORD *)(v0 + 544) = *v41;
          *(_OWORD *)(v0 + 560) = v50;
          *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 528);
          sub_10002895C(v0 + 560, v0 + 840, &qword_10032C070);
          sub_10002895C(v0 + 544, v0 + 832, &qword_10032C070);
          id v51 = v12;
          sub_1001F6ECC(v34, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
          sub_1001F6F78((id *)(v0 + 840));
          sub_1001F6FA4((id *)(v0 + 832));
          sub_10002895C(v0 + 552, v0 + 824, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 824));
          sub_1001F6FA4((id *)(v0 + 840));
          sub_10002895C(v0 + 576, v0 + 816, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 816));
          sub_10002895C(v0 + 584, v0 + 808, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 808));
          sub_10002895C(v0 + 840, v0 + 1032, &qword_10032C070);
          uint64_t v52 = *(void *)(v0 + 1032);
          if (v52)
          {
            *(void *)(v0 + 1104) = v52;
            sub_10000850C(0, (unint64_t *)&qword_100324670);
            uint64_t v49 = _bridgeAnythingToObjectiveC<A>(_:)();
          }
          else
          {
            uint64_t v49 = 0;
          }
          uint64_t v34 = (void *)(v0 + 160);
        }
        unint64_t v53 = (_OWORD *)(v0 + 304);
        [v12 setObject:v49 forKeyedSubscript:kAAAnalyticsEdpRecoveryRecordHealth];
        swift_unknownObjectRelease();

        sub_10002895C((uint64_t)v34, v0 + 16, &qword_10032C068);
        if (*(void *)v47 == 1)
        {
          id v54 = v12;
          uint64_t v55 = 0;
        }
        else
        {
          uint64_t v90 = v0 + 1274;
          long long v56 = *(_OWORD *)(v0 + 32);
          *(_OWORD *)(v0 + 448) = *v47;
          *(_OWORD *)(v0 + 464) = v56;
          *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 48);
          sub_10002895C(v0 + 472, v0 + 1274, &qword_10032C078);
          sub_10002895C(v0 + 448, v0 + 792, &qword_10032C070);
          id v57 = v12;
          sub_1001F6ECC(v34, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
          sub_1001F6FA4((id *)(v0 + 792));
          sub_10002895C(v0 + 456, v0 + 784, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 784));
          sub_10002895C(v0 + 464, v0 + 776, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 776));
          sub_10002895C(v0 + 480, v0 + 768, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 768));
          sub_10002895C(v0 + 488, v0 + 760, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 760));
          sub_10002895C(v0 + 1274, v0 + 1273, &qword_10032C078);
          int v58 = *(unsigned __int8 *)(v0 + 1273);
          if (v58 == 2)
          {
            uint64_t v55 = 0;
          }
          else
          {
            *(unsigned char *)(v0 + 1272) = v58;
            uint64_t v55 = _bridgeAnythingToObjectiveC<A>(_:)();
          }
          uint64_t v34 = (void *)(v0 + 160);
        }
        uint64_t v59 = (_OWORD *)(v0 + 208);
        [v12 setObject:v55 forKeyedSubscript:kAAAnalyticsEDPPasswordVersionDoesMatch];
        swift_unknownObjectRelease();

        sub_10002895C((uint64_t)v34, v0 + 304, &qword_10032C068);
        if (*(void *)v53 == 1)
        {
          id v60 = v12;
          uint64_t v61 = 0;
        }
        else
        {
          long long v62 = *(_OWORD *)(v0 + 320);
          *(_OWORD *)(v0 + 352) = *v53;
          *(_OWORD *)(v0 + 368) = v62;
          *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 336);
          sub_10002895C(v0 + 384, v0 + 928, &qword_10032C070);
          sub_10002895C(v0 + 352, v0 + 936, &qword_10032C070);
          id v63 = v12;
          sub_1001F6ECC(v34, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
          sub_1001F6F78((id *)(v0 + 928));
          sub_1001F6FA4((id *)(v0 + 936));
          sub_10002895C(v0 + 360, v0 + 944, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 944));
          sub_10002895C(v0 + 368, v0 + 952, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 952));
          sub_1001F6FA4((id *)(v0 + 928));
          sub_10002895C(v0 + 392, v0 + 960, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 960));
          sub_10002895C(v0 + 928, v0 + 1016, &qword_10032C070);
          uint64_t v64 = *(void *)(v0 + 1016);
          if (v64)
          {
            *(void *)(v0 + 1120) = v64;
            sub_10000850C(0, (unint64_t *)&qword_100324670);
            uint64_t v61 = _bridgeAnythingToObjectiveC<A>(_:)();
          }
          else
          {
            uint64_t v61 = 0;
          }
          uint64_t v34 = (void *)(v0 + 160);
        }
        [v12 setObject:v61 forKeyedSubscript:kAAAnalyticsEdpRemainingPrimaryRecordAttempts];
        swift_unknownObjectRelease();

        sub_10002895C((uint64_t)v34, v0 + 208, &qword_10032C068);
        if (*(void *)v59 == 1)
        {
          id v65 = v12;
          uint64_t v66 = 0;
        }
        else
        {
          long long v67 = *(_OWORD *)(v0 + 224);
          *(_OWORD *)(v0 + 256) = *v59;
          *(_OWORD *)(v0 + 272) = v67;
          *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 240);
          sub_10002895C(v0 + 296, v0 + 968, &qword_10032C070);
          sub_10002895C(v0 + 256, v0 + 976, &qword_10032C070);
          id v68 = v12;
          sub_1001F6ECC(v34, (void (*)(void, void, void, void, void, void))sub_1001F6F0C);
          sub_1001F6F78((id *)(v0 + 968));
          sub_1001F6FA4((id *)(v0 + 976));
          sub_10002895C(v0 + 264, v0 + 984, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 984));
          sub_10002895C(v0 + 272, v0 + 992, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 992));
          sub_10002895C(v0 + 288, v0 + 1000, &qword_10032C070);
          sub_1001F6FA4((id *)(v0 + 1000));
          sub_1001F6FA4((id *)(v0 + 968));
          sub_10002895C(v0 + 968, v0 + 1008, &qword_10032C070);
          uint64_t v69 = *(void *)(v0 + 1008);
          if (v69)
          {
            *(void *)(v0 + 1112) = v69;
            sub_10000850C(0, (unint64_t *)&qword_100324670);
            uint64_t v66 = _bridgeAnythingToObjectiveC<A>(_:)();
          }
          else
          {
            uint64_t v66 = 0;
          }
        }
        [v12 setObject:v66 forKeyedSubscript:kAAAnalyticsEdpRemainingRecoveryRecordAttempts];
        swift_unknownObjectRelease();

        goto LABEL_48;
      }
    }
    uint64_t v40 = 0;
    goto LABEL_19;
  }
LABEL_48:
  uint64_t v70 = sub_1001F679C();
  if (v70)
  {
    uint64_t v71 = (void *)v70;
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    Class v72 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    char v73 = static NSObject.== infix(_:_:)();

    unsigned __int8 v74 = v73 & 1;
  }
  else
  {
    unsigned __int8 v74 = 1;
  }
  id v75 = v12;
  sub_1001F6DAC(v74, v12);

  sub_10000850C(0, &qword_10032C060);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  if ([ObjCClassFromMetadata respondsToSelector:Selector.init(_:)()])
  {
    if (v12)
    {
      uint64_t v77 = *(void *)(v0 + 1168);
      uint64_t v78 = *(void *)(v0 + 1160);
      uint64_t v79 = *(void *)(v0 + 1152);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v77, *(void *)(v0 + 1128) + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__deviceInfo, v79);
      id v80 = v75;
      Dependency.wrappedValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
      os_log_t v81 = *(void **)(v0 + 1080);
      id v82 = [v81 localSecretType];

      NSString v83 = String._bridgeToObjectiveC()();
      [v80 setObject:v82 forKeyedSubscript:v83];

LABEL_55:
      id v84 = v75;
      id v85 = sub_1001F2304();
      if (v85)
      {
        uint64_t v86 = v85;
        unint64_t v87 = (void *)_convertErrorToNSError(_:)();
      }
      else
      {
        unint64_t v87 = 0;
      }
      [v84 updateTaskResultWithError:v87];
    }
  }
  else if (v12)
  {
    goto LABEL_55;
  }
  sub_1001F4C9C(v12);
  uint64_t v88 = (void *)swift_task_alloc();
  *(void *)(v0 + 1256) = v88;
  void *v88 = v0;
  v88[1] = sub_1001F3ED4;
  return sub_1001F5074((uint64_t)v12);
}

uint64_t sub_1001F3ED4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1248);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 1264) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001F4060;
  return sub_1001F572C(v2);
}

uint64_t sub_1001F4060()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001F4188, 0, 0);
}

uint64_t sub_1001F4188()
{
  uint64_t v27 = v0;
  uint64_t v1 = (void *)v0[156];
  sub_1001F5DE4(v1);
  id v2 = sub_1001F4578();
  sub_1001F4828(v1, v2);

  sub_1001F6280(v1);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v3 = (void *)v0[156];
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E778);
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    if (qword_100320CB0 != -1) {
      swift_once();
    }
    uint64_t v9 = v0[156];
    uint64_t v10 = qword_10032BDB8;
    unint64_t v11 = unk_10032BDC0;
    swift_bridgeObjectRetain();
    v0[132] = sub_100135190(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    if (v9)
    {
      id v12 = (void *)v0[156];
      v0[134] = v12;
      id v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v14 = (void *)v0[156];
      id v15 = v14;
    }
    else
    {
      v0[133] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v15 = 0;
      id v14 = (void *)v0[156];
    }
    *uint64_t v25 = v15;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - Reporting AppleID Availability Healthcheck event %@", (uint8_t *)v8, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v16 = (void *)v0[156];
  }
  id v17 = (void *)v0[156];
  if (v17)
  {
    uint64_t v18 = *(void (**)(id))(v0[141]
                                    + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck_reportEvent);
    id v19 = v17;
    swift_retain();
    v18(v19);

    swift_release();
    uint64_t v20 = (void *)v0[156];
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (void (*)(void))v0[142];
  id v22 = sub_1001F2304();
  v21();

  sub_1001F6ECC(v0 + 20, (void (*)(void, void, void, void, void, void))sub_1001F6E60);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

id sub_1001F4578()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v12 = [*(id *)(*sub_100008EF8(v22, (uint64_t)v22[3]) + 16) aa_primaryAppleAccount];
  if (v12
    && (id v13 = v12, v14 = objc_msgSend(v12, "aa_altDSID"), v13, v14))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_100008EA8((uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v17 = v22[0];
  if (v16)
  {
    swift_bridgeObjectRetain();
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v17 authKitAccountWithAltDSID:v18];

    swift_bridgeObjectRelease_n();
  }
  else
  {

    return 0;
  }
  return v19;
}

void sub_1001F4828(void *a1, void *a2)
{
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v5);
      id v10 = a1;
      id v11 = a2;
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      id v12 = v34;
      id v13 = [v34 deviceRemovalReasonForAccount:v11];

      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      [v10 setObject:isa forKeyedSubscript:kAAAnalyticsDeviceRemovalReason];

      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100007288(v15, (uint64_t)qword_10033E778);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        NSString v18 = (uint8_t *)swift_slowAlloc();
        id v19 = (void *)swift_slowAlloc();
        uint64_t v33 = (uint64_t)v13;
        id v34 = v19;
        *(_DWORD *)NSString v18 = 136315138;
        type metadata accessor for AKRemoteDeviceRemovalReason(0);
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v33 = sub_100135190(v20, v21, (uint64_t *)&v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "AppleIDAvailabilityHealthCheck attachCKReason attached %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return;
    }
    uint64_t v25 = qword_100320B98;
    os_log_t v32 = a1;
    if (v25 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      Class v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "AppleIDAvailabilityHealthCheck attachCKReason account is nil", v29, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    os_log_t v32 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v23, "AppleIDAvailabilityHealthCheck attachCKReason event is nil", v24, 2u);
      swift_slowDealloc();
    }
  }
  os_log_t v30 = v32;
}

void sub_1001F4C9C(void *a1)
{
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = *(void **)(*sub_100008EF8(v23, v23[3]) + 16);
    id v22 = 0;
    [v8 walrusStatus:&v22];
    if (v22)
    {
      id v9 = v22;
      swift_willThrow();
      sub_100008EA8((uint64_t)v23);
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100007288(v10, (uint64_t)qword_10033E778);
      id v11 = v9;
      id v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v15 = (void *)swift_slowAlloc();
        v23[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315394;
        if (qword_100320CB0 != -1) {
          swift_once();
        }
        uint64_t v16 = qword_10032BDB8;
        unint64_t v17 = unk_10032BDC0;
        swift_bridgeObjectRetain();
        id v22 = (id)sub_100135190(v16, v17, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2112;
        id v18 = v11;
        id v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v22 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v15 = v19;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - Failed to attach Walrus Status: %@", (uint8_t *)v14, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    else
    {
      Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
      sub_100008EA8((uint64_t)v23);
      [a1 setObject:isa forKeyedSubscript:kAAAnalyticsAdvancedDataProtectionState];
    }
  }
}

uint64_t sub_1001F5074(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001F5138, 0, 0);
}

uint64_t sub_1001F5138()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    uint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323450 + dword_100323450);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F5288;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1001F5288(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001F5458;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_1001F53B0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001F53B0()
{
  uint64_t v1 = *(void **)(v0 + 72);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100008EA8(v0 + 16);
  [v1 setObject:isa forKeyedSubscript:kAAAnalyticsCliqueStatus];

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001F5458()
{
  id v12 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    if (qword_100320CB0 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_10032BDB8;
    unint64_t v6 = unk_10032BDC0;
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v7, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v4, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1001F572C(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1001F57F0, 0, 0);
}

uint64_t sub_1001F57F0()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    uint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323448 + dword_100323448);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1001F5940;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    unint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_1001F5940(int a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001F5B10;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    uint64_t v5 = sub_1001F5A68;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001F5A68()
{
  uint64_t v1 = *(void **)(v0 + 72);
  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  sub_100008EA8(v0 + 16);
  [v1 setObject:isa forKeyedSubscript:kAAAnalyticsCircleSyncingStatus];

  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001F5B10()
{
  id v12 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    if (qword_100320CB0 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_10032BDB8;
    unint64_t v6 = unk_10032BDC0;
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v7, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2112;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach SOS Status: %@", (uint8_t *)v4, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_1001F5DE4(void *a1)
{
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = sub_1001F4578();
  if (v8)
  {
    id v9 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    id v10 = v26;
    uint64_t v11 = [v26 adpCohortForAccount:v9];

    if (!v11)
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E778);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        id v26 = (id)swift_slowAlloc();
        *(_DWORD *)id v19 = 136315138;
        if (qword_100320CB0 != -1) {
          swift_once();
        }
        uint64_t v20 = qword_10032BDB8;
        unint64_t v21 = unk_10032BDC0;
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_100135190(v20, v21, (uint64_t *)&v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v18, "%s - Failed to attach ADP cohort type, cohort nil", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      goto LABEL_17;
    }
    if (a1)
    {
      [a1 setObject:v11 forKeyedSubscript:kAAAnalyticsADPCohortType];
LABEL_17:

      return;
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      id v26 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (qword_100320CB0 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_10032BDB8;
      unint64_t v16 = unk_10032BDC0;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_100135190(v15, v16, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v13, "%s - Failed to attach ADP cohort type, account nil", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v22 = v24;
    }
  }
}

void sub_1001F6280(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)sub_1001F679C();
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = [v2 integerValue];

      sub_10005720C((unint64_t)v4);
    }
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [a1 setObject:isa forKeyedSubscript:kAAAnalyticsRecordViabilityState];
  }
}

uint64_t sub_1001F635C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__followUpController;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__deviceInfo;
  uint64_t v10 = sub_100009F04(&qword_10032C058);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1001F6534()
{
  return type metadata accessor for AppleIDAvailabilityHealthCheck();
}

uint64_t type metadata accessor for AppleIDAvailabilityHealthCheck()
{
  uint64_t result = qword_10032BE20;
  if (!qword_10032BE20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001F6588()
{
  sub_10001BF34(319, (unint64_t *)&unk_100327F80, (uint64_t *)&unk_100321900);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
      if (v2 <= 0x3F)
      {
        sub_10001BEDC(319, (unint64_t *)&qword_100327F90, (unint64_t *)&qword_100321930);
        if (v3 <= 0x3F)
        {
          sub_10001BEDC(319, (unint64_t *)&unk_10032BE40, &qword_1003215E8);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t sub_1001F6770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F69B4(a3, a4);
}

uint64_t sub_1001F679C()
{
  uint64_t v1 = sub_100009F04(&qword_100325870);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v6 = [*(id *)(*sub_100008EF8(&v11, *((uint64_t *)&v12 + 1)) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)&v11);
  if (!v6)
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_10:
    sub_100058764((uint64_t)&v11);
    return 0;
  }
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 accountPropertyForKey:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_10002895C((uint64_t)v10, (uint64_t)&v11, &qword_100328490);
  if (!*((void *)&v12 + 1)) {
    goto LABEL_10;
  }
  sub_10000850C(0, (unint64_t *)&qword_100324670);
  if (swift_dynamicCast()) {
    return *(void *)&v10[0];
  }
  else {
    return 0;
  }
}

uint64_t sub_1001F69B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E778);
  long long v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v20 = v6;
    uint64_t v21 = a1;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    if (qword_100320CB0 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_10032BDB8;
    unint64_t v16 = unk_10032BDC0;
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_100135190(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - started.", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v20;
    a1 = v21;
  }
  else
  {
  }
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
  os_log_type_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  void v18[4] = v3;
  void v18[5] = a1;
  v18[6] = a2;
  v18[7] = v6;
  swift_retain();
  swift_retain();
  sub_100225A54((uint64_t)v10, (uint64_t)&unk_10032C048, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_1001F6C90()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001F6CD8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025248;
  return sub_1001F2C84(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001F6DAC(unsigned __int8 a1, void *a2)
{
  int v2 = a1;
  if (a1 == 2)
  {
    BOOL v3 = 0;
  }
  else
  {
    if (a2)
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      NSString v6 = String._bridgeToObjectiveC()();
      [a2 setObject:isa forKeyedSubscript:v6];
    }
    BOOL v3 = a2 == 0;
  }
  return v3 | ((v2 == 2) << 8);
}

void sub_1001F6E60(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  if (a1 != (void *)1)
  {
  }
}

void *sub_1001F6ECC(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

id sub_1001F6F0C(id result, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  if (result != (id)1)
  {
    uint64_t v9 = result;
    id v10 = a6;
    id v11 = v9;
    id v12 = a2;
    id v13 = a3;
    return a5;
  }
  return result;
}

id *sub_1001F6F78(id *a1)
{
  id v2 = *a1;
  return a1;
}

id *sub_1001F6FA4(id *a1)
{
  return a1;
}

void sub_1001F6FD0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PushMessage();
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v11 = (id *)((char *)v60 - v10);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v60 - v13;
  uint64_t v15 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v15 - 8, v16);
  os_log_type_t v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CustodianRecoveryData();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v23 = __chkstk_darwin(v19 - 8, v22);
  os_log_type_t v24 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)v60 - v26;
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    sub_1001F7918(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PushMessage);
    Class v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint64_t)v11;
      os_log_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v66 = (uint8_t *)v63;
      *(_DWORD *)os_log_t v32 = 136315138;
      uint64_t v61 = v32 + 4;
      long long v62 = v32;
      sub_1001F7918((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PushMessage);
      uint64_t v64 = 0;
      unint64_t v65 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      uint64_t v64 = 0xD000000000000025;
      unint64_t v65 = 0x800000010029FB80;
      id v33 = *v11;
      id v34 = [v33 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v37 = v36;

      v38._uint64_t countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);

      swift_bridgeObjectRelease();
      uint64_t v39 = v64;
      unint64_t v40 = v65;
      sub_1001F7C6C(v31, (uint64_t (*)(void))type metadata accessor for PushMessage);
      uint64_t v64 = sub_100135190(v39, v40, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001F7C6C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PushMessage);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Asked to process incoming message not meant for custodian, ignoring message: %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001F7C6C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PushMessage);
    }
  }
  else
  {
    uint64_t v41 = v11;
    int v42 = *(unsigned __int8 *)(a1 + 121);
    if (v42 == 6)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_100007288(v43, (uint64_t)qword_10033E748);
      sub_1001F7918(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PushMessage);
      long long v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        LODWORD(v63) = v46;
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        long long v62 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = v62;
        *(_DWORD *)uint64_t v47 = 136315138;
        v60[1] = v47 + 4;
        uint64_t v61 = v47;
        sub_1001F7918((uint64_t)v14, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for PushMessage);
        uint64_t v64 = 0;
        unint64_t v65 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        uint64_t v64 = 0xD000000000000025;
        unint64_t v65 = 0x800000010029FB80;
        id v48 = *v41;
        id v49 = [v48 description];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        v53._uint64_t countAndFlagsBits = v50;
        v53._object = v52;
        String.append(_:)(v53);

        swift_bridgeObjectRelease();
        uint64_t v54 = v64;
        unint64_t v55 = v65;
        sub_1001F7C6C((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for PushMessage);
        uint64_t v64 = sub_100135190(v54, v55, (uint64_t *)&v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1001F7C6C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PushMessage);
        _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v63, "Custodian push message did not contain recoveryStep, ignoring message: %s", v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1001F7C6C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PushMessage);
      }
    }
    else
    {
      uint64_t v56 = swift_bridgeObjectRetain();
      sub_100105FE0(v56, (uint64_t)v27);
      uint64_t v57 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v18, 1, 1, v57);
      sub_1001F7918((uint64_t)v27, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
      unint64_t v58 = (*(unsigned __int8 *)(v20 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = 0;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + 32) = v1;
      *(unsigned char *)(v59 + 40) = v42;
      sub_100113424((uint64_t)v24, v59 + v58);
      swift_retain();
      sub_100225A54((uint64_t)v18, (uint64_t)&unk_10032C138, v59);
      swift_release();
      sub_1001F7C6C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryData);
    }
  }
}

uint64_t sub_1001F7720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(unsigned char *)(v6 + 40) = a5;
  *(void *)(v6 + 16) = a4;
  *(void *)(v6 + 24) = a6;
  return _swift_task_switch(sub_1001F7744, 0, 0);
}

uint64_t sub_1001F7744()
{
  sub_100008EF8((void *)(*(void *)(v0 + 16) + 16), *(void *)(*(void *)(v0 + 16) + 40));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001F77F0;
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 40);
  return sub_10017EE80(v3, v2);
}

uint64_t sub_1001F77F0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t type metadata accessor for CustodianPushServiceDelegate()
{
  return self;
}

BOOL sub_1001F790C(char a1)
{
  return (a1 & 0x3F) == 0;
}

uint64_t sub_1001F7918(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001F7980()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryData();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 41) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v5 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  id v11 = (uint64_t *)(v5 + v1[11]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100013198(*v11, v12);
  }
  uint64_t v13 = (uint64_t *)(v5 + v1[12]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001F7B74()
{
  uint64_t v2 = *(void *)(type metadata accessor for CustodianRecoveryData() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v5;
  *(unsigned char *)(v6 + 40) = v4;
  *(void *)(v6 + 8) = sub_100025248;
  return _swift_task_switch(sub_1001F7744, 0, 0);
}

uint64_t sub_1001F7C6C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001F7CCC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t sub_1001F7CE4(char a1)
{
  unint64_t result = 0x676542656B617073;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6E6946656B617073;
      break;
    case 4:
      unint64_t result = 0x6D6F43656B617073;
      break;
    case 5:
      unint64_t result = 0x727245656B617073;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F7DD8(unsigned __int8 *a1, char *a2)
{
  return sub_1002533F8(*a1, *a2);
}

Swift::Int sub_1001F7DE4()
{
  return sub_1001BD8B4();
}

uint64_t sub_1001F7DEC()
{
  return sub_100253B94();
}

Swift::Int sub_1001F7DF4()
{
  return sub_1001BD9F8();
}

unint64_t sub_1001F7DFC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001F7E58(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001F7E2C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001F7CE4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001F7E58(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4388, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for CustodianRecoveryStep(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F7F70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryStep()
{
  return &type metadata for CustodianRecoveryStep;
}

unint64_t sub_1001F7FAC()
{
  unint64_t result = qword_10032C140;
  if (!qword_10032C140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C140);
  }
  return result;
}

unint64_t sub_1001F8000(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100013140(*a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = a2 + 2;
    unint64_t v10 = a2[3];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
    }
    else
    {
      uint64_t v12 = *v9;
      sub_100013140(*v9, a2[3]);
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v10;
    }
    uint64_t v13 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v13;
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v21 = *(int *)(a3 + 32);
    uint64_t v22 = (void *)(a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1001F81E8(uint64_t *a1, uint64_t a2)
{
  sub_100013198(*a1, a1[1]);
  unint64_t v4 = a1[3];
  if (v4 >> 60 != 15) {
    sub_100013198(a1[2], v4);
  }
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001F82E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  unint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_100013140(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v11 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    uint64_t v18 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v19 = *(int *)(a3 + 32);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1001F8478(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100013198(v8, v9);
  uint64_t v10 = a2 + 2;
  unint64_t v11 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v10;
      sub_100013140(*v10, a2[3]);
      a1[2] = v12;
      a1[3] = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)(a1 + 2));
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v10;
    goto LABEL_8;
  }
  uint64_t v13 = *v10;
  sub_100013140(*v10, a2[3]);
  uint64_t v14 = a1[2];
  unint64_t v15 = a1[3];
  a1[2] = v13;
  a1[3] = v11;
  sub_100013198(v14, v15);
LABEL_8:
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_13;
  }
  if (v23)
  {
LABEL_13:
    uint64_t v24 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_14:
  uint64_t v25 = *(int *)(a3 + 32);
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1001F86DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t *sub_1001F8814(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100013198(v6, v7);
  uint64_t v8 = (_OWORD *)(a2 + 16);
  unint64_t v9 = a1[3];
  if (v9 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(a2 + 24);
  if (v10 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)(a1 + 2));
LABEL_4:
    *((_OWORD *)a1 + 1) = *v8;
    goto LABEL_6;
  }
  uint64_t v11 = a1[2];
  a1[2] = *(void *)v8;
  a1[3] = v10;
  sub_100013198(v11, v9);
LABEL_6:
  uint64_t v12 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (char *)a1 + v13;
  unint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_11;
  }
  if (v20)
  {
LABEL_11:
    uint64_t v21 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_12:
  uint64_t v22 = *(int *)(a3 + 32);
  int v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *int v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001F8A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F8A34);
}

uint64_t sub_1001F8A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 28);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1001F8AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F8B08);
}

uint64_t sub_1001F8B08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryKeys()
{
  uint64_t result = qword_10032C1A0;
  if (!qword_10032C1A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001F8C00()
{
  sub_10001AAF8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1001F8CAC(char a1)
{
  unint64_t result = 0x5064657070617277;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x5264657070617277;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 3:
      unint64_t result = 0x646F74737543746FLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001F8D80(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_10032C1F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001F94EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v13 = v3[1];
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for CustodianRecoveryKeys();
    LOBYTE(v13) = 3;
    type metadata accessor for UUID();
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001F8FD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_10032C1E8);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianRecoveryKeys();
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v16 + 1) = xmmword_1002AD240;
  *((void *)v16 + 4) = 0;
  *((void *)v16 + 5) = 0;
  uint64_t v17 = (uint64_t)&v16[*(int *)(v13 + 36)];
  uint64_t v18 = type metadata accessor for UUID();
  int v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v33 = v17;
  v19(v17, 1, 1, v18);
  int v20 = &v16[*(int *)(v13 + 40)];
  *(void *)int v20 = 0;
  *((void *)v20 + 1) = 0;
  os_log_t v32 = v20;
  sub_100008EF8(a1, a1[3]);
  sub_1001F94EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v21 = v33;
    sub_100008EA8((uint64_t)a1);
    sub_1000196A0(*((void *)v16 + 2), *((void *)v16 + 3));
    swift_bridgeObjectRelease();
    sub_1000833BC(v21);
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = 0;
    sub_1000130EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)uint64_t v16 = v34;
    char v35 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *((_OWORD *)v16 + 1) = v34;
    LOBYTE(v34) = 2;
    *((void *)v16 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v16 + 5) = v22;
    LOBYTE(v34) = 3;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100018A54((uint64_t)v7, v33);
    LOBYTE(v34) = 4;
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
    uint64_t v26 = (uint64_t *)v32;
    swift_bridgeObjectRelease();
    *uint64_t v26 = v23;
    v26[1] = v25;
    sub_1001F9540((uint64_t)v16, v29);
    sub_100008EA8((uint64_t)a1);
    return sub_1001F95A4((uint64_t)v16);
  }
}

unint64_t sub_1001F9414()
{
  return sub_1001F8CAC(*v0);
}

uint64_t sub_1001F941C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001F980C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001F9444(uint64_t a1)
{
  unint64_t v2 = sub_1001F94EC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F9480(uint64_t a1)
{
  unint64_t v2 = sub_1001F94EC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F94BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F8FD8(a1, a2);
}

uint64_t sub_1001F94D4(void *a1)
{
  return sub_1001F8D80(a1);
}

unint64_t sub_1001F94EC()
{
  unint64_t result = qword_10032C1F0;
  if (!qword_10032C1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C1F0);
  }
  return result;
}

uint64_t sub_1001F9540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoveryKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F95A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecoveryKeys();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for CustodianRecoveryKeys.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001F96CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryKeys.CodingKeys()
{
  return &type metadata for CustodianRecoveryKeys.CodingKeys;
}

unint64_t sub_1001F9708()
{
  unint64_t result = qword_10032C200;
  if (!qword_10032C200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C200);
  }
  return result;
}

unint64_t sub_1001F9760()
{
  unint64_t result = qword_10032C208;
  if (!qword_10032C208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C208);
  }
  return result;
}

unint64_t sub_1001F97B8()
{
  unint64_t result = qword_10032C210;
  if (!qword_10032C210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C210);
  }
  return result;
}

uint64_t sub_1001F980C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5064657070617277 && a2 == 0xEB00000000434B52;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5264657070617277 && a2 == 0xEA0000000000434BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000010029E130 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100299F50)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

void sub_1001F9A68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushMessage();
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  char v6 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v4, v7);
  uint64_t v10 = (id *)((char *)v51 - v9);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v51 - v12;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100007288(v14, (uint64_t)qword_10033E700);
  sub_1001DF708(a1, (uint64_t)v13);
  uint64_t v56 = v15;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    uint64_t v57 = v53;
    uint64_t v54 = v6;
    *(_DWORD *)uint64_t v18 = 136315138;
    v51[1] = v18 + 4;
    uint64_t v52 = v18;
    sub_1001DF708((uint64_t)v13, (uint64_t)v10);
    *(void *)&long long v58 = 0;
    *((void *)&v58 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v58 = 0xD000000000000025;
    *((void *)&v58 + 1) = 0x800000010029FB80;
    id v19 = *v10;
    id v20 = [v19 description];
    uint64_t v21 = a1;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    v25._uint64_t countAndFlagsBits = v22;
    a1 = v21;
    v25._object = v24;
    String.append(_:)(v25);

    swift_bridgeObjectRelease();
    long long v26 = v58;
    sub_1001EAE78((uint64_t)v10);
    *(void *)&long long v58 = sub_100135190(v26, *((unint64_t *)&v26 + 1), &v57);
    char v6 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001EAE78((uint64_t)v13);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Terms push received. Processing message and posting CFU %s", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001EAE78((uint64_t)v13);
  }

  uint64_t v27 = *(void *)(a1 + 32);
  if (!v27) {
    goto LABEL_14;
  }
  uint64_t v28 = *(void *)(a1 + 24);
  id v29 = [*(id *)(*sub_100008EF8(v55 + 2, v55[5]) + 16) aa_primaryAppleAccount];
  if (!v29) {
    goto LABEL_14;
  }
  uint64_t v30 = v29;
  id v31 = [v29 aa_altDSID];

  if (!v31) {
    goto LABEL_14;
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  if (v32 == v28 && v27 == v34)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
LABEL_14:
      long long v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v37, v38))
      {
LABEL_17:

        return;
      }
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      unint64_t v40 = "Can't process this message, missing altDSID or doesn't match with primary account.";
      uint64_t v41 = v37;
      os_log_type_t v42 = v38;
      uint64_t v43 = v39;
      uint32_t v44 = 2;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v41, v42, v40, v43, v44);
      swift_slowDealloc();
      goto LABEL_17;
    }
  }
  int v45 = *(unsigned __int8 *)(a1 + 8);
  if (v45 == 4)
  {
    sub_100008EF8(v55 + 7, v55[10]);
    uint64_t v46 = *(void *)(a1 + 16);
    *(void *)&long long v58 = AAFollowUpIdentifierVerifyTerms;
    *((void *)&v58 + 1) = v46;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v59 = 0;
    char v62 = 1;
    id v47 = AAFollowUpIdentifierVerifyTerms;
    swift_bridgeObjectRetain();
    sub_1002507F0(&v58);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v45 != 3)
    {
      sub_1001DF708(a1, (uint64_t)v6);
      long long v37 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v37, v48))
      {
        sub_1001EAE78((uint64_t)v6);
        goto LABEL_17;
      }
      id v49 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v49 = 134217984;
      uint64_t v50 = qword_1002B0A70[v6[8]];
      sub_1001EAE78((uint64_t)v6);
      *(void *)&long long v58 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v40 = "TermsPushServiceDelegate process message invoked on unknown command: %ld";
      uint64_t v41 = v37;
      os_log_type_t v42 = v48;
      uint64_t v43 = v49;
      uint32_t v44 = 12;
      goto LABEL_16;
    }
    sub_1001F9FAC(a1);
  }
}

void sub_1001F9FAC(uint64_t a1)
{
  uint64_t v2 = v1;
  if (sub_1001FA1C4())
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = (void *)AAFollowUpUserInfoTermsDependentAltDSID;
    *(void *)&v15[0] = AAFollowUpUserInfoTermsDependentAltDSID;
    type metadata accessor for AAFollowUpUserInfo(0);
    sub_1001FA4C4();
    id v6 = v5;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v4 + 16) && (unint64_t v7 = sub_100135A98((uint64_t)&v16), (v8 & 1) != 0)) {
      sub_100047DD4(*(void *)(v4 + 56) + 32 * v7, (uint64_t)v15);
    }
    else {
      memset(v15, 0, sizeof(v15));
    }
    sub_100098CF0((uint64_t)&v16);
    sub_100008EF8((void *)(v2 + 56), *(void *)(v2 + 80));
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)&long long v16 = AAFollowUpIdentifierVerifyTerms;
    *((void *)&v16 + 1) = v9;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    char v20 = 1;
    id v10 = AAFollowUpIdentifierVerifyTerms;
    swift_bridgeObjectRetain();
    sub_10024F5C4(&v16, sub_1001FA2F0, 0);
    swift_bridgeObjectRelease();

    sub_100058764((uint64_t)v15);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E700);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Can't process this push, it does not contain required terms additional context.", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001FA1C4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (void *)AAFollowUpUserInfoTermsServerProvidedContext;
  *(void *)&long long v9 = AAFollowUpUserInfoTermsServerProvidedContext;
  type metadata accessor for AAFollowUpUserInfo(0);
  sub_1001FA4C4();
  id v3 = v2;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v4 = sub_100135A98((uint64_t)v8), (v5 & 1) != 0))
  {
    sub_100047DD4(*(void *)(v1 + 56) + 32 * v4, (uint64_t)&v9);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_100098CF0((uint64_t)v8);
  if (*((void *)&v10 + 1))
  {
    sub_100009F04((uint64_t *)&unk_1003284A0);
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100058764((uint64_t)&v9);
    return 0;
  }
}

uint64_t type metadata accessor for TermsPushServiceDelegate()
{
  return self;
}

uint64_t sub_1001FA2E0(char a1)
{
  return (0x18u >> a1) & 1;
}

void sub_1001FA2F0(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E700);
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      unint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)id v3 = 138412290;
      uint64_t v6 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v4 = v6;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Failed to post Terms notification with error %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

unint64_t sub_1001FA4C4()
{
  unint64_t result = qword_100321168;
  if (!qword_100321168)
  {
    type metadata accessor for AAFollowUpUserInfo(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321168);
  }
  return result;
}

uint64_t sub_1001FA51C(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_10032C380);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  long long v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_1001FB4A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = *v3;
  v11[14] = 0;
  sub_1000DC13C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for InheritanceInvitationMessage();
    v11[13] = 1;
    type metadata accessor for UUID();
    sub_100007124(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001FA720@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v3);
  uint64_t v33 = sub_100009F04(&qword_10032C390);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InheritanceInvitationMessage();
  __chkstk_darwin(v7, v8);
  long long v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001FB4A0();
  uint64_t v11 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return sub_100008EA8((uint64_t)a1);
  }
  uint64_t v34 = a1;
  uint64_t v28 = v7;
  os_log_type_t v12 = v10;
  uint64_t v13 = v31;
  char v37 = 0;
  sub_1000DC190();
  uint64_t v14 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *os_log_type_t v12 = v38;
  char v36 = 1;
  sub_100007124((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v28;
  uint64_t v16 = *(int *)(v28 + 20);
  long long v26 = v12;
  uint64_t v17 = *(void (**)(void))(v30 + 32);
  uint64_t v27 = &v12[v16];
  v17();
  char v35 = 2;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v14);
  uint64_t v21 = *(int *)(v15 + 24);
  uint64_t v22 = (uint64_t)v26;
  uint64_t v23 = (uint64_t *)&v26[v21];
  *uint64_t v23 = v18;
  v23[1] = v20;
  sub_1001FB4F4(v22, v29);
  sub_100008EA8((uint64_t)v34);
  return sub_1001FB558(v22);
}

uint64_t sub_1001FAAC4()
{
  unint64_t v1 = 0x69636966656E6562;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1001FAB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001FB7C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FAB50(uint64_t a1)
{
  unint64_t v2 = sub_1001FB4A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FAB8C(uint64_t a1)
{
  unint64_t v2 = sub_1001FB4A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FABC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FA720(a1, a2);
}

uint64_t sub_1001FABE0(void *a1)
{
  return sub_1001FA51C(a1);
}

uint64_t sub_1001FABF8()
{
  _StringGuts.grow(_:)(46);
  uint64_t v1 = type metadata accessor for InheritanceInvitationMessage();
  sub_100009F04(&qword_10032C2E0);
  uint64_t v2 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x800000010029C900;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  sub_100007124((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x800000010029FF40;
  String.append(_:)(v5);
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = (void *)v6[1];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t type metadata accessor for InheritanceInvitationMessage()
{
  uint64_t result = qword_10032C340;
  if (!qword_10032C340) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_1001FADB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *Swift::String v4 = *a2;
    Swift::String v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    Swift::String v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    os_log_type_t v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *os_log_type_t v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1001FAEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_bridgeObjectRelease();
}

unsigned char *sub_1001FAF2C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  os_log_type_t v12 = &a2[v10];
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_1001FAFD0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  os_log_type_t v12 = &a2[v10];
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *sub_1001FB088(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_1001FB120(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = &a1[v10];
  os_log_type_t v12 = (uint64_t *)&a2[v10];
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001FB1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FB1DC);
}

uint64_t sub_1001FB1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1001FB2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FB2B8);
}

uint64_t sub_1001FB2B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001FB37C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001FB41C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007124((unint64_t *)&unk_10032CFC0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationMessage);
  uint64_t result = sub_100007124(&qword_100329C98, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationMessage);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001FB4A0()
{
  unint64_t result = qword_10032C388;
  if (!qword_10032C388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C388);
  }
  return result;
}

uint64_t sub_1001FB4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InheritanceInvitationMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FB558(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InheritanceInvitationMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for InheritanceInvitationMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FB680);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationMessage.CodingKeys()
{
  return &type metadata for InheritanceInvitationMessage.CodingKeys;
}

unint64_t sub_1001FB6BC()
{
  unint64_t result = qword_10032C398;
  if (!qword_10032C398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C398);
  }
  return result;
}

unint64_t sub_1001FB714()
{
  unint64_t result = qword_10032C3A0;
  if (!qword_10032C3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3A0);
  }
  return result;
}

unint64_t sub_1001FB76C()
{
  unint64_t result = qword_10032C3A8;
  if (!qword_10032C3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3A8);
  }
  return result;
}

uint64_t sub_1001FB7C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029A0C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001FB928(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[0] = a4;
  v15[1] = a5;
  uint64_t v9 = sub_100009F04(&qword_10032C3C8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1001FC1E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  char v18 = 0;
  sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    LOBYTE(v16) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1001FBAAC()
{
  if (*v0) {
    return 0x617461646174656DLL;
  }
  else {
    return 0x6873614879656BLL;
  }
}

uint64_t sub_1001FBAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001FBEAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FBB10(uint64_t a1)
{
  unint64_t v2 = sub_1001FC1E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FBB4C(uint64_t a1)
{
  unint64_t v2 = sub_1001FC1E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FBB88@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001FBFA0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001FBBB8(void *a1)
{
  return sub_1001FB928(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001FBBD8(uint64_t a1, unint64_t a2)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1001FBD98();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_100013198(a1, a2);
  swift_release();
  sub_100013140(v5, v6);
  swift_bridgeObjectRetain();
  sub_100013198(v5, v6);
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1001FBD98()
{
  unint64_t result = qword_10032C3B0;
  if (!qword_10032C3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrustedContactKeyIntegrity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrustedContactKeyIntegrity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactKeyIntegrity()
{
  return &type metadata for TrustedContactKeyIntegrity;
}

uint64_t sub_1001FBEAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6873614879656BLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001FBFA0(void *a1)
{
  uint64_t v3 = sub_100009F04(&qword_10032C3B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  sub_100008EF8(a1, v8);
  sub_1001FC1E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100008EA8((uint64_t)a1);
  }
  else
  {
    char v13 = 0;
    sub_1000130EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v8 = v11;
    unint64_t v10 = v12;
    LOBYTE(v11) = 1;
    sub_100013140(v8, v12);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100013140(v8, v10);
    swift_bridgeObjectRetain();
    sub_100013198(v8, v10);
    sub_100008EA8((uint64_t)a1);
    sub_100013198(v8, v10);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1001FC1E8()
{
  unint64_t result = qword_10032C3C0;
  if (!qword_10032C3C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TrustedContactKeyIntegrity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001FC308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactKeyIntegrity.CodingKeys()
{
  return &type metadata for TrustedContactKeyIntegrity.CodingKeys;
}

unint64_t sub_1001FC344()
{
  unint64_t result = qword_10032C3D0;
  if (!qword_10032C3D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3D0);
  }
  return result;
}

unint64_t sub_1001FC39C()
{
  unint64_t result = qword_10032C3D8;
  if (!qword_10032C3D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3D8);
  }
  return result;
}

unint64_t sub_1001FC3F4()
{
  unint64_t result = qword_10032C3E0;
  if (!qword_10032C3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C3E0);
  }
  return result;
}

uint64_t sub_1001FC44C()
{
  *(void *)(v1 + 272) = v0;
  return _swift_task_switch(sub_1001FC46C, 0, 0);
}

uint64_t sub_1001FC46C()
{
  v0[30] = *sub_100008EF8((void *)(v0[34] + 16), *(void *)(v0[34] + 40));
  uint64_t v1 = swift_task_alloc();
  v0[35] = v1;
  *(void *)(v1 + 16) = v0 + 30;
  BOOL v2 = (void *)swift_task_alloc();
  v0[36] = v2;
  uint64_t v3 = sub_100009F04(&qword_10032C4D8);
  *BOOL v2 = v0;
  v2[1] = sub_1001FC588;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 32, 0, 0, 0xD000000000000014, 0x80000001002A0040, sub_1001FE5C8, v1, v3);
}

uint64_t sub_1001FC588()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    BOOL v2 = sub_1001FCB68;
  }
  else
  {
    swift_task_dealloc();
    BOOL v2 = sub_1001FC6A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

id sub_1001FC6A4()
{
  unint64_t v1 = *(void *)(v0 + 256);
  char v37 = (char *)_swiftEmptyArrayStorage;
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
LABEL_38:
    uint64_t v30 = *(uint64_t (**)(char *))(v0 + 8);
    return (id)v30(v29);
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_37;
  }
LABEL_3:
  uint64_t v3 = 0;
  uint64_t v4 = v0 + 56;
  char v35 = (_OWORD *)(v0 + 96);
  char v36 = (_OWORD *)(v0 + 128);
  unint64_t v34 = v1 & 0xC000000000000001;
  uint64_t v31 = v2;
  unint64_t v32 = v1;
  uint64_t v33 = v0 + 16;
  while (1)
  {
    if (v34) {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v5 = *(id *)(v1 + 8 * v3 + 32);
    }
    unsigned int v6 = v5;
    uint64_t v7 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v8 = v4;
    id v9 = [v5 appleID];
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      uint64_t v14 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v14 = sub_100168384(0, *((void *)v37 + 2) + 1, 1, v37);
      }
      unint64_t v16 = *((void *)v14 + 2);
      unint64_t v15 = *((void *)v14 + 3);
      if (v16 >= v15 >> 1) {
        uint64_t v14 = sub_100168384((char *)(v15 > 1), v16 + 1, 1, v14);
      }
      *((void *)v14 + 2) = v16 + 1;
      uint64_t v17 = &v14[16 * v16];
      *((void *)v17 + 4) = v11;
      *((void *)v17 + 5) = v13;
      char v37 = v14;
      uint64_t v2 = v31;
      unint64_t v1 = v32;
    }
    id result = [v6 dictionary];
    if (!result) {
      break;
    }
    uint64_t v19 = result;
    uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(v0 + 176) = 0xD000000000000016;
    *(void *)(v0 + 184) = 0x800000010029FFD0;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v20 + 16) && (unint64_t v21 = sub_100135A98(v33), (v22 & 1) != 0))
    {
      sub_100047DD4(*(void *)(v20 + 56) + 32 * v21, (uint64_t)v36);
    }
    else
    {
      _OWORD *v36 = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100098CF0(v33);
    if (*(void *)(v0 + 152))
    {
      sub_100009F04((uint64_t *)&unk_100328450);
      if (swift_dynamicCast()) {
        sub_10028C72C(*(void *)(v0 + 264));
      }
    }
    else
    {
      sub_100058764((uint64_t)v36);
    }
    id result = [v6 dictionary];
    if (!result) {
      goto LABEL_42;
    }
    uint64_t v23 = result;
    uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)(v0 + 224) = 0xD000000000000014;
    *(void *)(v0 + 232) = 0x800000010029FFF0;
    uint64_t v4 = v8;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v24 + 16) && (unint64_t v25 = sub_100135A98(v8), (v26 & 1) != 0))
    {
      sub_100047DD4(*(void *)(v24 + 56) + 32 * v25, (uint64_t)v35);
    }
    else
    {
      *char v35 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100098CF0(v8);
    if (*(void *)(v0 + 120))
    {
      if (swift_dynamicCast())
      {
        uint64_t v27 = *(void *)(v0 + 200);
        *(void *)(v0 + 160) = *(void *)(v0 + 192);
        *(void *)(v0 + 168) = v27;
        *(void *)(v0 + 208) = 44;
        *(void *)(v0 + 216) = 0xE100000000000000;
        sub_100080C64();
        uint64_t v28 = StringProtocol.components<A>(separatedBy:)();
        uint64_t v4 = v8;
        swift_bridgeObjectRelease();
        sub_10028C72C(v28);
      }
    }
    else
    {

      sub_100058764((uint64_t)v35);
    }
    ++v3;
    if (v7 == v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = v37;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1001FCB68()
{
  swift_task_dealloc();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 248) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error occured when fetching all family members: %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v7 = *(uint64_t (**)(void *))(v0 + 8);
  return v7(_swiftEmptyArrayStorage);
}

uint64_t sub_1001FCD7C()
{
  *(void *)(v1 + 32) = v0;
  return _swift_task_switch(sub_1001FCD9C, 0, 0);
}

uint64_t sub_1001FCD9C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = sub_100009F04(&qword_10032C4C8);
  *uint64_t v1 = v0;
  v1[1] = sub_1001FCE80;
  uint64_t v3 = *(void *)(v0 + 32);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000022, 0x80000001002A0010, sub_1001FE594, v3, v2);
}

uint64_t sub_1001FCE80()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001FCF94;
  }
  else {
    uint64_t v2 = sub_100172B8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001FCF94()
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error occured when fetching suggested family members: %@", v4, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_errorRelease();
  uint64_t v7 = *(uint64_t (**)(void *))(v0 + 8);
  return v7(_swiftEmptyArrayStorage);
}

uint64_t sub_1001FD198(unint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(unint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    char v9 = sub_1001FE260(a1, a3, a4);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(void, void))a5)(v9 & 1, 0);
  }
}

uint64_t sub_1001FD264(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *a1;
  id v12 = [*a1 appleID];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    if (v14 == a2 && v16 == a3)
    {
LABEL_46:
      swift_bridgeObjectRelease();
      return 1;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v18) {
      return 1;
    }
  }
  uint64_t result = (uint64_t)[v11 dictionary];
  if (result)
  {
    uint64_t v20 = (void *)result;
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v36 = 0xD000000000000016;
    unint64_t v37 = 0x800000010029FFD0;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v21 + 16) && (unint64_t v22 = sub_100135A98((uint64_t)v38), (v23 & 1) != 0))
    {
      sub_100047DD4(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v39);
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100098CF0((uint64_t)v38);
    if (*((void *)&v40 + 1))
    {
      sub_100009F04((uint64_t *)&unk_100328450);
      if (swift_dynamicCast())
      {
        uint64_t v24 = *(void *)(v36 + 16);
        if (v24)
        {
          uint64_t v35 = v3;
          unint64_t v25 = (void *)(v36 + 40);
          do
          {
            BOOL v26 = *(v25 - 1) == a2 && *v25 == a3;
            if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_46;
            }
            v25 += 2;
          }
          while (--v24);
        }
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_100058764((uint64_t)&v39);
    }
    uint64_t result = (uint64_t)[v11 dictionary:v35];
    if (result)
    {
      uint64_t v27 = (void *)result;
      uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v36 = 0xD000000000000014;
      unint64_t v37 = 0x800000010029FFF0;
      AnyHashable.init<A>(_:)();
      if (*(void *)(v28 + 16) && (unint64_t v29 = sub_100135A98((uint64_t)v38), (v30 & 1) != 0))
      {
        sub_100047DD4(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v39);
      }
      else
      {
        long long v39 = 0u;
        long long v40 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_100098CF0((uint64_t)v38);
      if (*((void *)&v40 + 1))
      {
        if (swift_dynamicCast())
        {
          v38[0] = v36;
          v38[1] = v37;
          CharacterSet.init(charactersIn:)();
          sub_100080C64();
          uint64_t v31 = StringProtocol.components(separatedBy:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v7);
          swift_bridgeObjectRelease();
          uint64_t v32 = *(void *)(v31 + 16);
          if (!v32)
          {
LABEL_43:
            swift_bridgeObjectRelease();
            return 0;
          }
          uint64_t v33 = (void *)(v31 + 40);
          while (1)
          {
            BOOL v34 = *(v33 - 1) == a2 && *v33 == a3;
            if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_46;
            }
            v33 += 2;
            if (!--v32) {
              goto LABEL_43;
            }
          }
        }
      }
      else
      {
        sub_100058764((uint64_t)&v39);
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001FD6D8(unint64_t a1, char a2, void (*a3)(void *, void))
{
  if ((a2 & 1) == 0)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v5 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return result;
        }
        long long v40 = a3;
        uint64_t v7 = 0;
        unint64_t v8 = a1 & 0xC000000000000001;
        uint64_t v9 = &selRef_dismissFollowUpWithIdentifier_completion_;
        unint64_t v10 = &selRef_dismissFollowUpWithIdentifier_completion_;
        do
        {
          if (v8) {
            id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v11 = *(id *)(a1 + 8 * v7 + 32);
          }
          id v12 = v11;
          if (([v11 v9[36]] & 1) != 0
            || (id v13 = [v12 v10[37]]) == 0)
          {
          }
          else
          {
            uint64_t v14 = v13;
            id v15 = [v12 appleID];
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v45 = v18;
              uint64_t v46 = v17;

              id v19 = [v12 firstName];
              if (v19)
              {
                uint64_t v20 = v19;
                uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v43 = v22;
                uint64_t v44 = v21;
              }
              else
              {
                uint64_t v43 = 0;
                uint64_t v44 = 0;
              }
              id v23 = [v12 lastName];
              if (v23)
              {
                uint64_t v24 = v23;
                uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v41 = v26;
                uint64_t v42 = v25;
              }
              else
              {
                uint64_t v41 = 0;
                uint64_t v42 = 0;
              }
              id v27 = [v12 fullName];
              if (v27)
              {
                uint64_t v28 = v27;
                uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v31 = v30;
              }
              else
              {
                uint64_t v29 = 0;
                uint64_t v31 = 0;
              }
              id v32 = [v12 memberTypeDisplayString];
              if (v32)
              {
                uint64_t v33 = v32;
                uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v36 = v35;
              }
              else
              {
                uint64_t v34 = 0;
                uint64_t v36 = 0;
              }
              char v37 = [v12 isChildAccount];
              id v38 = objc_allocWithZone((Class)AALocalContactInfo);
              id v39 = sub_1001FDEF4(v14, v44, v43, v42, v41, v29, v31, v46, v45, v34, v36, v37);

              unint64_t v8 = a1 & 0xC000000000000001;
              uint64_t v9 = &selRef_dismissFollowUpWithIdentifier_completion_;
              unint64_t v10 = &selRef_dismissFollowUpWithIdentifier_completion_;
              if (v39)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            else
            {
            }
          }
          ++v7;
        }
        while (v5 != v7);
        sub_100007844(a1, 0);
        v40(_swiftEmptyArrayStorage, 0);
        goto LABEL_37;
      }
    }
    sub_100007844(a1, 0);
    a3(_swiftEmptyArrayStorage, 0);
LABEL_37:
    return swift_bridgeObjectRelease();
  }
  swift_errorRetain();
  a3((void *)a1, 1);

  return sub_100007844(a1, 1);
}

uint64_t sub_1001FDA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032C4D0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(uint64_t (*)(uint64_t, char), uint64_t))(*(void *)a2 + 112))(sub_1001FE5A8, v9);
  return swift_release();
}

uint64_t sub_1001FDBC4(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_100009F04(&qword_10032C4D0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100009F04(&qword_10032C4D0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t type metadata accessor for DaemonFamilyManager()
{
  return self;
}

uint64_t sub_1001FDC5C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001FE910;
  v3[34] = v2;
  return _swift_task_switch(sub_1001FC46C, 0, 0);
}

uint64_t sub_1001FDD08()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1001FDD4C()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001FDDF8;
  v3[4] = v2;
  return _swift_task_switch(sub_1001FCD9C, 0, 0);
}

uint64_t sub_1001FDDF8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

id sub_1001FDEF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a3)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a5) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v17 = 0;
    uint64_t v18 = a11;
    if (a7) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  NSString v16 = 0;
  if (!a5) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v18 = a11;
  if (a7)
  {
LABEL_4:
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
LABEL_7:
  NSString v19 = 0;
LABEL_8:
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v18)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  LOBYTE(v24) = a12 & 1;
  id v22 = [v12 initWithFamilyDSID:a1 firstName:v16 lastName:v17 fullName:v19 appleID:v20 familyMemberType:v21 isChild:v24];

  return v22;
}

void sub_1001FE060(uint64_t a1, uint64_t a2)
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching suggested family members.", v7, 2u);
    swift_slowDealloc();
  }

  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  id v9 = objc_allocWithZone((Class)FAFetchFamilyCircleRequest);
  swift_retain();
  id v10 = [v9 init];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1001FE550;
  *(void *)(v11 + 24) = v8;
  v13[4] = sub_1001FE930;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_10004DAE8;
  uint64_t v13[3] = &unk_100300E48;
  id v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v10 startRequestWithCompletionHandler:v12];
  _Block_release(v12);
  swift_release();
}

uint64_t sub_1001FE260(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      id v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v16 = v8;
      char v11 = sub_1001FD264(&v16, a2, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v13 & 1;
      }
      char v12 = v11;

      if (v12)
      {
        swift_bridgeObjectRelease();
        char v13 = 1;
        return v13 & 1;
      }
      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char v13 = 0;
  return v13 & 1;
}

void sub_1001FE398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  id v9 = objc_allocWithZone((Class)FAFetchFamilyCircleRequest);
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = [v9 init];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1001FE538;
  *(void *)(v11 + 24) = v8;
  v13[4] = sub_1001FE548;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = sub_10004DAE8;
  uint64_t v13[3] = &unk_100300DD0;
  char v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v10 startRequestWithCompletionHandler:v12];
  _Block_release(v12);
  swift_release();
}

uint64_t sub_1001FE4F8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001FE538(unint64_t a1, char a2)
{
  return sub_1001FD198(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(unint64_t, uint64_t))(v2 + 32));
}

void sub_1001FE548(void *a1, uint64_t a2)
{
  sub_1002301B4(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1001FE550(unint64_t a1, char a2)
{
  return sub_1001FD6D8(a1, a2 & 1, *(void (**)(void *, void))(v2 + 16));
}

uint64_t sub_1001FE55C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FE594(uint64_t a1)
{
  return sub_1001FDA64(a1, v1);
}

uint64_t sub_1001FE59C()
{
  return sub_1001FE7D0(&qword_10032C4D0);
}

uint64_t sub_1001FE5A8(uint64_t a1, char a2)
{
  return sub_1001FE87C(a1, a2, &qword_10032C4D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1001FDBC4);
}

void sub_1001FE5CC(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032C4E0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  id v8 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1001FE85C;
  *(void *)(v9 + 24) = v7;
  aBlock[4] = sub_1001FE930;
  void aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004DAE8;
  aBlock[3] = &unk_100300EE8;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v8 startRequestWithCompletionHandler:v10];
  _Block_release(v10);
  swift_release();
}

uint64_t sub_1001FE7C4()
{
  return sub_1001FE7D0(&qword_10032C4E0);
}

uint64_t sub_1001FE7D0(uint64_t *a1)
{
  uint64_t v2 = sub_100009F04(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1001FE85C(uint64_t a1, char a2)
{
  return sub_1001FE87C(a1, a2, &qword_10032C4E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100230144);
}

uint64_t sub_1001FE87C(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = *(void *)(sub_100009F04(a3) - 8);
  uint64_t v8 = v4 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return a4(a1, v6, v8);
}

uint64_t sub_1001FE934(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v71 = a3;
  uint64_t v6 = sub_100009F04(&qword_10032C680);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  __chkstk_darwin(v17, v18);
  NSString v21 = (char *)v66 - v20;
  uint64_t v72 = a1;
  if (*(void *)(*(void *)(a1 + 144) + 16))
  {
    uint64_t v68 = v19;
    uint64_t v69 = a2;
    uint64_t v70 = v3;
    id v22 = *(void **)(*sub_100008EF8((void *)(v3 + 16), *(void *)(v3 + 40)) + 16);
    v74[0] = 0;
    id v23 = [v22 walrusStatus:v74];
    if (v74[0])
    {
      id v24 = v74[0];
      swift_willThrow();

      sub_100200EC0(v72, (uint64_t)v21, type metadata accessor for WalrusWebAccessInfo);
LABEL_18:
      sub_100200F28((uint64_t)v21, type metadata accessor for WalrusWebAccessInfo);
      uint64_t v34 = v70;
LABEL_19:
      sub_100200EC0(v72 + *(int *)(v15 + 60), (uint64_t)v14, type metadata accessor for WalrusPCSEncryptionMaterial);
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100007288(v40, (uint64_t)qword_10033E700);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Validating encryption material.", v43, 2u);
        uint64_t v34 = v70;
        swift_slowDealloc();
      }

      uint64_t v44 = sub_1000A204C();
      if (v45 >> 60 != 15)
      {
        uint64_t v46 = v44;
        unint64_t v47 = v45;
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v34 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__signatureValidator, v6);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        uint64_t v48 = *(int *)(v11 + 56);
        uint64_t v49 = *(void *)&v14[*(int *)(v11 + 60)];
        uint64_t v50 = *(void *)&v14[v48];
        unint64_t v51 = *(void *)&v14[v48 + 8];
        swift_bridgeObjectRetain();
        sub_100013140(v50, v51);
        BOOL v52 = sub_1000A0128(v46, v47, v49);
        sub_100013198(v50, v51);
        swift_bridgeObjectRelease();
        sub_100008EA8((uint64_t)v74);
        if (v52)
        {
          uint64_t v67 = v46;
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v53, v54))
          {
            unint64_t v55 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v55 = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Encryption material signature is valid!", v55, 2u);
            swift_slowDealloc();
          }

          uint64_t v56 = v68;
          sub_100200EC0(v72, v68, type metadata accessor for WalrusWebAccessInfo);
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v57, v58))
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc();
            v74[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v59 = 136315138;
            v66[1] = v59 + 4;
            uint64_t v61 = *(void *)(v56 + 112);
            unint64_t v60 = *(void *)(v56 + 120);
            swift_bridgeObjectRetain();
            uint64_t v73 = sub_100135190(v61, v60, (uint64_t *)v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100200F28(v56, type metadata accessor for WalrusWebAccessInfo);
            _os_log_impl((void *)&_mh_execute_header, v57, v58, "Fetching PCS keys for web session consent uuid: %s", v59, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100200F28(v56, type metadata accessor for WalrusWebAccessInfo);
          }

          sub_1001FF2A8(v72, (uint64_t)v69, v71);
          sub_1000196A0(v67, v47);
          return sub_100200F28((uint64_t)v14, type metadata accessor for WalrusPCSEncryptionMaterial);
        }
        sub_1000196A0(v46, v47);
      }
      char v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Failed to validate encryption material!", v64, 2u);
        swift_slowDealloc();
      }

      sub_1001A8424();
      swift_allocError();
      *unint64_t v65 = 1;
      v69();
      swift_errorRelease();
      return sub_100200F28((uint64_t)v14, type metadata accessor for WalrusPCSEncryptionMaterial);
    }
    id v32 = v23;
    sub_100200EC0(v72, (uint64_t)v21, type metadata accessor for WalrusWebAccessInfo);
    if (v32 != (id)1) {
      goto LABEL_18;
    }
    char v33 = sub_1000A2DA0();
    sub_100200F28((uint64_t)v21, type metadata accessor for WalrusWebAccessInfo);
    uint64_t v34 = v70;
    if (v33) {
      goto LABEL_19;
    }
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E700);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Can't provide PCS auth request, webAccessInfo validation failed.", v38, 2u);
      swift_slowDealloc();
    }

    sub_1001A8424();
    swift_allocError();
    *id v39 = 1;
    v69();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E700);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "WebAccessInfo is invalid, no app identities provided.", v28, 2u);
      swift_slowDealloc();
    }

    sub_1001A8424();
    uint64_t v29 = swift_allocError();
    unsigned char *v30 = 1;
    ((void (*)(uint64_t, void, uint64_t))a2)(v29, 0, 1);
    return swift_errorRelease();
  }
}

uint64_t sub_1001FF2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  uint64_t v7 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v29 + 64);
  __chkstk_darwin(v7 - 8, v9);
  id v10 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_10032C688);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E700);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = v8;
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Generating URL configuration for PCS auth request.", v19, 2u);
    id v10 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = v28;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v4 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__urlBagBuilder, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_100200EC0(a1, (uint64_t)v10, type metadata accessor for WalrusWebAccessInfo);
  unint64_t v20 = (*(unsigned __int8 *)(v29 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v4;
  sub_100202734((uint64_t)v10, v21 + v20, type metadata accessor for WalrusWebAccessInfo);
  id v22 = (void *)(v21 + ((v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
  *id v22 = v30;
  v22[1] = a3;
  id v23 = self;
  swift_retain();
  swift_retain();
  id v24 = [v23 sharedServer];
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_100201EF4;
  *(void *)(v25 + 24) = v21;
  aBlock[4] = sub_100201FD0;
  void aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C6CC0;
  aBlock[3] = &unk_100300F70;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v24 configurationWithCompletion:v26];
  _Block_release(v26);
  swift_release();

  return sub_100008EA8((uint64_t)v32);
}

uint64_t sub_1001FF6A4()
{
  sub_100008EA8(v0 + 16);

  sub_100008EA8(v0 + 64);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__urlBagBuilder;
  uint64_t v4 = sub_100009F04(&qword_10032C688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__signatureValidator;
  uint64_t v6 = sub_100009F04(&qword_10032C680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1001FF7F0()
{
  return type metadata accessor for WalrusPCSAuthRequestProvider(0);
}

uint64_t type metadata accessor for WalrusPCSAuthRequestProvider(uint64_t a1)
{
  return sub_10000698C(a1, (uint64_t *)&unk_10032C528);
}

void sub_1001FF818()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, &qword_10032C538, &qword_10032AB60);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_10032C540, &qword_10032AD00);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1001FF968(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), void (*a5)(void))
{
  sub_100019730(a1, (uint64_t)v18, &qword_10032C690);
  if (v19)
  {
    uint64_t v9 = *(void *)&v18[0];
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E700);
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      v17[0] = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v17[0];
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No URL configuration, unable to build PCS auth request: %@", v13, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    ((void (*)(uint64_t, void, uint64_t))a4)(v9, 0, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100041E8C(v18, (uint64_t)v17);
    uint64_t v15 = sub_100008EF8(v17, v17[3]);
    sub_100201558(a3, *v15, a4, a5, a2);
    return sub_100008EA8((uint64_t)v17);
  }
}

uint64_t sub_1001FFB90(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v78 = a3;
  uint64_t v13 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v18 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  id v24 = (char *)&v69 - v23;
  uint64_t v26 = __chkstk_darwin(v22, v25);
  uint64_t v30 = (char *)&v69 - v29;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E700);
    sub_100200EC0(a2, (uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = v78;
    if (v34)
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v77 = a4;
      os_log_type_t v37 = (uint8_t *)v36;
      *(void *)&v80[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v37 = 136315138;
      uint64_t v38 = *((void *)v24 + 16);
      unint64_t v39 = *((void *)v24 + 17);
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100135190(v38, v39, (uint64_t *)v80);
      uint64_t v35 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100200F28((uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to verify arming for service %s abandoning key fetch", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100200F28((uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);
    }

    swift_errorRetain();
    v35(a1, 0, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v70 = v26;
    uint64_t v71 = v28;
    uint64_t v72 = v27;
    uint64_t v76 = a7;
    uint64_t v74 = a5;
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E700);
    sub_100200EC0(a2, (uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v77 = a4;
    id v75 = v16;
    uint64_t v73 = a6;
    if (v43)
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(void *)&v80[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      uint64_t v69 = v44 + 4;
      uint64_t v45 = a2;
      uint64_t v47 = *((void *)v30 + 16);
      unint64_t v46 = *((void *)v30 + 17);
      swift_bridgeObjectRetain();
      uint64_t v48 = v47;
      a2 = v45;
      uint64_t v79 = sub_100135190(v48, v46, (uint64_t *)v80);
      uint64_t v16 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100200F28((uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Service %s is armed, continue with PCS key fetch", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100200F28((uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
    }

    uint64_t v50 = v76;
    uint64_t v51 = *(void *)(a2 + 144);
    int64_t v52 = *(void *)(v51 + 16);
    uint64_t v53 = _swiftEmptyArrayStorage;
    if (v52)
    {
      uint64_t v69 = (uint8_t *)a2;
      *(void *)&v80[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100228924(0, v52, 0);
      uint64_t v50 = v76;
      uint64_t v54 = 80;
      uint64_t v53 = *(void **)&v80[0];
      do
      {
        unint64_t v55 = sub_10024C910(*(unsigned char *)(v51 + v54));
        uint64_t v57 = v56;
        *(void *)&v80[0] = v53;
        unint64_t v59 = v53[2];
        unint64_t v58 = v53[3];
        if (v59 >= v58 >> 1)
        {
          sub_100228924(v58 > 1, v59 + 1, 1);
          uint64_t v50 = v76;
          uint64_t v53 = *(void **)&v80[0];
        }
        v53[2] = v59 + 1;
        unint64_t v60 = &v53[2 * v59];
        v60[4] = v55;
        uint64_t v60[5] = v57;
        v54 += 72;
        --v52;
      }
      while (v52);
      swift_bridgeObjectRelease();
      uint64_t v16 = v75;
      a2 = (uint64_t)v69;
    }
    sub_100200EC0(a2 + *(int *)(v70 + 60), (uint64_t)v16, type metadata accessor for WalrusPCSEncryptionMaterial);
    uint64_t v61 = v72;
    sub_100200EC0(a2, v72, type metadata accessor for WalrusWebAccessInfo);
    sub_100008A94(v50, (uint64_t)v80);
    unint64_t v62 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    unint64_t v63 = (v18 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v64 = swift_allocObject();
    unint64_t v65 = v73;
    *(void *)(v64 + 16) = v74;
    *(void *)(v64 + 24) = v65;
    sub_100202734(v61, v64 + v62, type metadata accessor for WalrusWebAccessInfo);
    sub_100041E8C(v80, v64 + v63);
    uint64_t v66 = (void *)(v64 + ((v63 + 47) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v67 = v77;
    void *v66 = v78;
    v66[1] = v67;
    swift_retain();
    id v68 = v65;
    swift_retain();
    sub_10020046C((uint64_t)v53, (uint64_t)v16, (uint64_t)sub_100202514, v64);
    swift_bridgeObjectRelease();
    swift_release();
    return sub_100200F28((uint64_t)v16, type metadata accessor for WalrusPCSEncryptionMaterial);
  }
}

uint64_t sub_10020029C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(void *, uint64_t, BOOL))
{
  uint64_t v26 = a6;
  uint64_t v10 = type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100009F04(&qword_10032C6A0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (void **)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v17, &qword_10032C6A0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *v17;
  }
  else
  {
    sub_100202734((uint64_t)v17, (uint64_t)v13, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
    uint64_t v21 = *(uint64_t *)((char *)v13 + *(int *)(v10 + 20));
    uint64_t v22 = sub_100008EF8(a5, a5[3]);
    uint64_t v20 = (void *)sub_100202824(a3, a4, v13, v21, *v22);
    uint64_t v19 = v23;
    sub_100200F28((uint64_t)v13, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  }
  v26(v20, v19, EnumCaseMultiPayload == 1);
  return sub_10010EBF4(v20, v19, EnumCaseMultiPayload == 1);
}

void sub_10020046C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8, v12);
  uint64_t v13 = *(void **)(v4 + 56);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100200EC0(a2, (uint64_t)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WalrusPCSEncryptionMaterial);
  unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a1;
  void v16[3] = a3;
  v16[4] = a4;
  void v16[5] = v4;
  sub_100202734((uint64_t)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, type metadata accessor for WalrusPCSEncryptionMaterial);
  aBlock[4] = sub_10020279C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100200C70;
  aBlock[3] = &unk_100301060;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v13 pcsKeysForServices:isa completion:v17];
  _Block_release(v17);
}

uint64_t sub_100200660(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_100009F04(&qword_10032C6A0);
  __chkstk_darwin(v12, v13);
  unint64_t v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      unint64_t v39 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v44 = v40;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v41 = v12;
      swift_bridgeObjectRetain();
      uint64_t v20 = Array.description.getter();
      os_log_type_t v42 = a4;
      uint64_t v21 = v20;
      unint64_t v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_100135190(v21, v23, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2112;
      uint64_t v24 = _convertErrorToNSError(_:)();
      uint64_t v43 = v24;
      a4 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v39 = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch encrypted keys for services %s with error: %@", (uint8_t *)v19, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t *v15 = a2;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4((uint64_t)v15);
    swift_errorRelease();
    return sub_100203834((uint64_t)v15);
  }
  if (!*(void *)(a1 + 16))
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain_n();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v42 = a4;
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v41 = v12;
      *(_DWORD *)os_log_type_t v33 = 136315138;
      uint64_t v40 = (uint64_t)(v33 + 4);
      swift_bridgeObjectRetain();
      uint64_t v34 = Array.description.getter();
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      uint64_t v43 = sub_100135190(v34, v36, &v44);
      a4 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "No keys found for any services %s.", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1001A8424();
    uint64_t v37 = swift_allocError();
    *uint64_t v38 = 2;
    uint64_t *v15 = v37;
    swift_storeEnumTagMultiPayload();
    a4((uint64_t)v15);
    return sub_100203834((uint64_t)v15);
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E700);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully fetched keys, time for encryption.", v28, 2u);
    swift_slowDealloc();
  }

  return sub_1002031C8(a1, a7, a4, a5);
}

void sub_100200C70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_100009F04(&qword_10032C698);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();
}

id sub_100200D24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100009F04((uint64_t *)&unk_10032DBD0);
  v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a13)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  id v20 = [v22 initWithAccount:a1 WebSessionID:v13 webSessionConsentUUID:v14 encryptionEnvelope:v15.super.isa appName:v16 responseIdentities:v17.super.isa serverInfo:v18 urlString:v19];

  return v20;
}

uint64_t sub_100200EC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100200F28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_100200F8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100009F04(&qword_10032DC20);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_10020115C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10018FE4C();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100201074(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100009F04(&qword_10032DAE0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100201358((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10018FE4C();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_10020115C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *uint64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_errorRetain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_errorRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100201358(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100201558(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v51 + 64);
  __chkstk_darwin(v10 - 8, v12);
  uint64_t v13 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  unint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57[3] = type metadata accessor for DaemonSetupServiceURLBag();
  v57[4] = &off_1002FAB18;
  v57[0] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a5 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__accountStore, v14);
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  id v19 = [*(id *)(*sub_100008EF8(aBlock, (uint64_t)v53) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)aBlock);
  if (v19)
  {
    unint64_t v46 = sub_100008EF8((void *)(a5 + 64), *(void *)(a5 + 88));
    uint64_t v20 = a1[15];
    uint64_t v47 = a1[14];
    uint64_t v48 = v20;
    uint64_t v49 = a1[16];
    uint64_t v45 = a4;
    uint64_t v50 = a1[17];
    sub_100200EC0((uint64_t)a1, (uint64_t)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WalrusWebAccessInfo);
    sub_100008A94((uint64_t)v57, (uint64_t)v56);
    unint64_t v21 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    unint64_t v22 = a3;
    unint64_t v23 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = swift_allocObject();
    sub_100202734((uint64_t)v13, v26 + v21, type metadata accessor for WalrusWebAccessInfo);
    os_log_type_t v27 = (void (**)(void))(v26 + v23);
    uint64_t v28 = v45;
    *os_log_type_t v27 = v22;
    v27[1] = v28;
    *(void *)(v26 + v24) = a5;
    *(void *)(v26 + v25) = v19;
    sub_100041E8C(v56, v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v29 = *(void **)(*v46 + 16);
    swift_retain();
    swift_retain();
    id v30 = v19;
    uint64_t v32 = v47;
    uint64_t v31 = v48;
    NSString v33 = String._bridgeToObjectiveC()();
    uint64_t v35 = v49;
    uint64_t v34 = v50;
    NSString v36 = String._bridgeToObjectiveC()();
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = v35;
    uint64_t v37[3] = v34;
    v37[4] = sub_1002021F4;
    uint64_t v37[5] = v26;
    v37[6] = v32;
    v37[7] = v31;
    uint64_t v54 = sub_100202300;
    unint64_t v55 = v37;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000C6CC0;
    uint64_t v53 = &unk_100300FE8;
    uint64_t v38 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    [v29 PCSAuthContextForWebSessionIdentifier:v33 serviceName:v36 completion:v38];
    _Block_release(v38);
    swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E700);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "No primary account found, abandoning key fetch.", v42, 2u);
      swift_slowDealloc();
    }

    sub_1001A8424();
    swift_allocError();
    unsigned char *v43 = 6;
    a3();
    swift_errorRelease();
  }
  return sub_100008EA8((uint64_t)v57);
}

uint64_t sub_100201A80(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = a2;
    unint64_t v4 = 0;
    uint64_t v28 = result + 32;
    unint64_t v25 = (void *)(a2 + 56);
    uint64_t v26 = _swiftEmptyArrayStorage;
    unint64_t v27 = *(void *)(result + 16);
    while (1)
    {
      if (v4 <= v2) {
        unint64_t v5 = v2;
      }
      else {
        unint64_t v5 = v4;
      }
      unint64_t v34 = v5;
      while (1)
      {
        if (v4 == v34) {
          goto LABEL_34;
        }
        uint64_t v6 = v28 + 72 * v4;
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v32 = *(void *)(v6 + 16);
        uint64_t v33 = *(void *)v6;
        uint64_t v8 = *(void *)(v6 + 40);
        uint64_t v31 = *(void *)(v6 + 32);
        char v9 = *(unsigned char *)(v6 + 48);
        uint64_t v10 = *(void *)(v6 + 64);
        uint64_t v29 = *(void *)(v6 + 56);
        ++v4;
        uint64_t v36 = *(void *)(v6 + 8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v30 = v9;
        uint64_t v11 = sub_10024C910(v9);
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v3 + 16);
        if (!v14) {
          goto LABEL_7;
        }
        uint64_t v15 = v11;
        if (*(char **)(a2 + 32) == v11 && *(void *)(a2 + 40) == v12) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
        if (v14 != 1)
        {
          uint64_t v17 = v25;
          uint64_t v18 = 1;
          while (1)
          {
            uint64_t v19 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            if ((char *)*(v17 - 1) == v15 && *v17 == v13) {
              goto LABEL_25;
            }
            uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result) {
              goto LABEL_25;
            }
            v17 += 2;
            ++v18;
            if (v19 == v14) {
              goto LABEL_7;
            }
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v3 = a2;
        if (v4 == v27) {
          return (uint64_t)v26;
        }
      }
LABEL_25:
      swift_bridgeObjectRelease();
      unint64_t v21 = v26;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_100228B78(0, v26[2] + 1, 1);
        unint64_t v21 = v26;
      }
      unint64_t v23 = v21[2];
      unint64_t v22 = v21[3];
      if (v23 >= v22 >> 1)
      {
        uint64_t result = sub_100228B78(v22 > 1, v23 + 1, 1);
        unint64_t v21 = v26;
      }
      void v21[2] = v23 + 1;
      uint64_t v26 = v21;
      unint64_t v24 = &v21[9 * v23];
      v24[4] = v33;
      void v24[5] = v36;
      uint64_t v3 = a2;
      v24[6] = v32;
      v24[7] = v7;
      v24[8] = v31;
      v24[9] = v8;
      *((unsigned char *)v24 + 80) = v30;
      v24[11] = v29;
      v24[12] = v10;
      unint64_t v2 = v27;
      if (v4 == v27) {
        return (uint64_t)v26;
      }
    }
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_100201D08()
{
  uint64_t v1 = (int *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + 96), *(void *)(v6 + 104));
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v8 = v6 + *(int *)(v7 + 52);
  uint64_t v9 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_100013198(*(void *)(v6 + *(int *)(v7 + 56)), *(void *)(v6 + *(int *)(v7 + 56) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100201EF4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = (void *)(v1 + v4);
  uint64_t v7 = (void (**)(void))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_1001FF968(a1, v5, v6, v8, v9);
}

uint64_t sub_100201F98()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100201FD0(void *a1, uint64_t a2)
{
  return sub_100263EB0(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_100201FD8()
{
  uint64_t v1 = (int *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v7 + v1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v8 + 96), *(void *)(v8 + 104));
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v10 = v8 + *(int *)(v9 + 52);
  uint64_t v11 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_100013198(*(void *)(v8 + *(int *)(v9 + 56)), *(void *)(v8 + *(int *)(v9 + 56) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  sub_100008EA8(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v4);
}

uint64_t sub_1002021F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(uint64_t, void, uint64_t))(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void **)(v1 + v7);

  return sub_1001FFB90(a1, v1 + v4, v8, v9, v10, v11, v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1002022B8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100202300(void *a1, uint64_t a2)
{
  sub_1001A7B10(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void))(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_100202310()
{
  uint64_t v1 = (int *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[17];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + 96), *(void *)(v6 + 104));
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v8 = v6 + *(int *)(v7 + 52);
  uint64_t v9 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_100013198(*(void *)(v6 + *(int *)(v7 + 56)), *(void *)(v6 + *(int *)(v7 + 56) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100008EA8(v0 + v5);
  swift_release();

  return _swift_deallocObject(v0, ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_100202514(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void **)(v1 + 24);
  uint64_t v8 = *(void (**)(void *, uint64_t, BOOL))(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8));

  return sub_10020029C(a1, v6, v7, (void *)(v1 + v4), (void *)(v1 + v5), v8);
}

uint64_t sub_1002025C4()
{
  uint64_t v1 = (int *)(type metadata accessor for WalrusPCSEncryptionMaterial(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + 96), *(void *)(v6 + 104));
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v3 + v1[15];
  uint64_t v8 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  sub_100013198(*(void *)(v6 + v1[16]), *(void *)(v6 + v1[16] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100202734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10020279C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for WalrusPCSEncryptionMaterial(0) - 8);
  uint64_t v6 = v2[2];
  uint64_t v7 = (void (*)(uint64_t))v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100200660(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_100202824(void *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  id v99 = a1;
  uint64_t v9 = type metadata accessor for SHA256();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for DaemonSetupServiceURLBag();
  uint64_t v124 = &off_1002FAB18;
  v122[0] = a5;
  uint64_t v14 = (char *)a2 + *(int *)(type metadata accessor for WalrusWebAccessInfo(0) + 60);
  uint64_t v15 = *((void *)v14 + 12);
  unint64_t v16 = *((void *)v14 + 13);
  swift_retain();
  SHA256.init()();
  uint64_t v17 = sub_100254E08((uint64_t)v13, v15, v16);
  unint64_t v19 = v18;
  uint64_t v20 = v13;
  uint64_t v21 = v17;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
  uint64_t v23 = *a3;
  unint64_t v22 = a3[1];
  type metadata accessor for HPKEEnvelope();
  sub_100013140(v23, v22);
  uint64_t v24 = P384.KeyAgreement.PublicKey.derRepresentation.getter();
  unint64_t v26 = v25;
  uint64_t v101 = a2;
  swift_bridgeObjectRetain();
  unint64_t v108 = v19;
  sub_100013140(v21, v19);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_100201A80(v27, a4);
  v98[1] = 0;
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v30 = *(void *)(v29 + 16);
  uint64_t v102 = v21;
  unint64_t v106 = v26;
  unint64_t v107 = v22;
  uint64_t v105 = v23;
  uint64_t v111 = v24;
  uint64_t v112 = v29;
  int64_t v100 = v30;
  if (v30)
  {
    uint64_t v121 = _swiftEmptyArrayStorage;
    sub_100228B48(0, v30, 0);
    uint64_t v110 = sub_100009F04(&qword_10032C6C0);
    long long v115 = &v120;
    uint64_t v31 = v29 + 48;
    long long v109 = xmmword_1002A9F00;
    id v103 = "receiverPublicKeyHash";
    uint64_t v104 = "com.apple.icloud.events";
    uint64_t v32 = (char *)v30;
    do
    {
      uint64_t v33 = *(void *)(v31 - 16);
      uint64_t v34 = *(void *)(v31 - 8);
      uint64_t v35 = *(void *)v31;
      uint64_t v36 = *(void *)(v31 + 8);
      uint64_t v37 = *(void *)(v31 + 24);
      uint64_t v38 = *(unsigned __int8 *)(v31 + 32);
      uint64_t v116 = *(void *)(v31 + 48);
      uint64_t v117 = v37;
      sub_100009F04((uint64_t *)&unk_10032E130);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v109;
      *(void *)(inited + 32) = v33;
      uint64_t v40 = inited + 32;
      *(void *)(inited + 40) = v34;
      unint64_t v41 = 0xEB0000000072656ELL;
      unint64_t v42 = 0x6E75726564616C42;
      uint64_t v43 = 2;
      switch(v38)
      {
        case 1:
          unint64_t v41 = 0xE800000000000000;
          unint64_t v42 = 0x6E6F697265707948;
          uint64_t v43 = 3;
          break;
        case 2:
          unint64_t v41 = 0xE90000000000006CLL;
          unint64_t v42 = 0x6F6F70726576694CLL;
          uint64_t v43 = 4;
          break;
        case 3:
          unint64_t v41 = 0xEA00000000007265;
          unint64_t v42 = 0x766F4D6F6E616950;
          uint64_t v43 = 7;
          break;
        case 4:
          unint64_t v41 = 0xE500000000000000;
          unint64_t v42 = 0x7365746F4ELL;
          uint64_t v43 = 9;
          break;
        case 5:
          unint64_t v41 = 0xE800000000000000;
          unint64_t v42 = 0x72617073646C6546;
          uint64_t v43 = 11;
          break;
        case 6:
          unint64_t v41 = 0xE700000000000000;
          unint64_t v42 = 0x676E6972616853;
          uint64_t v43 = 12;
          break;
        case 7:
          unint64_t v41 = 0xE600000000000000;
          unint64_t v42 = 0x697261666153;
          uint64_t v43 = 22;
          break;
        case 8:
          unint64_t v42 = 0xD000000000000013;
          unint64_t v41 = (unint64_t)v104 | 0x8000000000000000;
          uint64_t v43 = 210;
          break;
        case 9:
          unint64_t v42 = 0xD000000000000017;
          unint64_t v41 = (unint64_t)v103 | 0x8000000000000000;
          uint64_t v43 = 241;
          break;
        default:
          break;
      }
      uint64_t v114 = inited;
      *(void *)(inited + 80) = v35;
      uint64_t v44 = inited + 80;
      *(void *)(inited + 72) = &type metadata for Int;
      *(void *)(inited + 48) = v43;
      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 88) = v36;
      *(void *)(inited + 96) = v42;
      *(void *)(inited + 104) = v41;
      uint64_t v45 = (void *)static _DictionaryStorage.allocate(capacity:)();
      sub_100019730(v40, (uint64_t)&v118, &qword_10032DA70);
      uint64_t v47 = v118;
      uint64_t v46 = v119;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v48 = sub_1001358B8((uint64_t)v47, v46);
      if (v49)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x1002031A0);
      }
      long long v113 = v32;
      *(void *)((char *)v45 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v48;
      uint64_t v50 = (unint64_t **)(v45[6] + 16 * v48);
      *uint64_t v50 = v47;
      v50[1] = (unint64_t *)v46;
      sub_100009F48(v115, (_OWORD *)(v45[7] + 32 * v48));
      uint64_t v51 = v45[2];
      BOOL v52 = __OFADD__(v51, 1);
      uint64_t v53 = v51 + 1;
      if (v52) {
        goto LABEL_36;
      }
      void v45[2] = v53;
      sub_100019730(v44, (uint64_t)&v118, &qword_10032DA70);
      uint64_t v54 = v118;
      uint64_t v55 = v119;
      unint64_t v56 = sub_1001358B8((uint64_t)v118, v119);
      if (v57) {
        goto LABEL_37;
      }
      *(void *)((char *)v45 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v56;
      unint64_t v58 = (unint64_t **)(v45[6] + 16 * v56);
      *unint64_t v58 = v54;
      v58[1] = (unint64_t *)v55;
      sub_100009F48(v115, (_OWORD *)(v45[7] + 32 * v56));
      uint64_t v59 = v45[2];
      BOOL v52 = __OFADD__(v59, 1);
      uint64_t v60 = v59 + 1;
      if (v52) {
        goto LABEL_38;
      }
      void v45[2] = v60;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = v121;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100228B48(0, v61[2] + 1, 1);
        uint64_t v61 = v121;
      }
      unint64_t v62 = v113;
      unint64_t v64 = v61[2];
      unint64_t v63 = v61[3];
      if (v64 >= v63 >> 1)
      {
        sub_100228B48(v63 > 1, v64 + 1, 1);
        uint64_t v61 = v121;
      }
      v61[2] = v64 + 1;
      v61[v64 + 4] = v45;
      v31 += 72;
      uint64_t v32 = v62 - 1;
    }
    while (v32);
  }
  else
  {
    uint64_t v61 = _swiftEmptyArrayStorage;
  }
  id v65 = [[*(id *)(*sub_100008EF8(v122, v123) + 16) walrusWebAccessPCSAuthURL];
  unint64_t v66 = v108;
  if (v65)
  {
    uint64_t v67 = v65;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v116 = v69;
    uint64_t v117 = v68;
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v117 = 0;
  }
  uint64_t v70 = v101;
  uint64_t v71 = (uint64_t *)v101[12];
  uint64_t v110 = v101[13];
  uint64_t v72 = v101[15];
  uint64_t v114 = v101[14];
  long long v115 = v71;
  *(void *)&long long v109 = v72;
  sub_100009F04((uint64_t *)&unk_10032B140);
  uint64_t v73 = swift_initStackObject();
  *(_OWORD *)(v73 + 16) = xmmword_1002ABAF0;
  *(void *)(v73 + 32) = 0x6554726568706963;
  *(void *)(v73 + 40) = 0xEA00000000007478;
  long long v113 = (char *)v99;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(Swift::String *)(v73 + 48) = Data.base64EncodedString(options:)(0);
  uint64_t v104 = "com.apple.pcs.web-access";
  *(void *)(v73 + 64) = 0xD000000000000010;
  *(void *)(v73 + 72) = 0x80000001002A01C0;
  id v99 = (id)0x80000001002A01C0;
  *(Swift::String *)(v73 + 80) = Data.base64EncodedString(options:)(0);
  id v103 = "encapsulationKey";
  *(void *)(v73 + 96) = 0xD000000000000015;
  *(void *)(v73 + 104) = 0x80000001002A01E0;
  v98[0] = 0x80000001002A01E0;
  uint64_t v74 = v102;
  uint64_t v118 = sub_100254A64(v102, v66);
  sub_100009F04((uint64_t *)&unk_100328450);
  sub_100098EA8();
  uint64_t v75 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v77 = v76;
  swift_bridgeObjectRelease();
  *(void *)(v73 + 112) = v75;
  *(void *)(v73 + 120) = v77;
  unint64_t v78 = sub_100220A6C(v73);
  unint64_t v79 = sub_10024F258(v78);
  swift_bridgeObjectRelease();
  uint64_t v80 = v70[16];
  uint64_t v81 = v70[17];
  uint64_t v82 = v70[19];
  uint64_t v83 = v70[20];
  id v84 = objc_allocWithZone((Class)AAWalrusPCSAuthRequest);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v85 = sub_100200D24(v113, (uint64_t)v115, v110, v114, v109, v79, v80, v81, (uint64_t)v61, v82, v83, v117, v116);
  uint64_t v86 = (uint64_t)v85;
  int64_t v87 = v100;
  if (v100)
  {
    uint64_t v117 = (uint64_t)v85;
    uint64_t v88 = v105;
    uint64_t v118 = _swiftEmptyArrayStorage;
    sub_100228B28(0, v100, 0);
    uint64_t v89 = v118;
    unint64_t v90 = v118[2];
    uint64_t v91 = 80;
    unint64_t v92 = v106;
    do
    {
      char v93 = *(unsigned char *)(v112 + v91);
      uint64_t v118 = v89;
      unint64_t v94 = v89[3];
      if (v90 >= v94 >> 1)
      {
        sub_100228B28(v94 > 1, v90 + 1, 1);
        uint64_t v89 = v118;
      }
      v89[2] = v90 + 1;
      *((unsigned char *)v89 + v90 + 32) = v93;
      v91 += 72;
      ++v90;
      --v87;
    }
    while (v87);
    unint64_t v95 = v108;
    sub_100013198(v74, v108);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013198(v88, v107);
    sub_100013198(v111, v92);
    sub_100013198(v74, v95);
    swift_bridgeObjectRelease();
    uint64_t v86 = v117;
  }
  else
  {
    unint64_t v96 = v108;
    sub_100013198(v74, v108);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100013198(v105, v107);
    sub_100013198(v111, v106);
    sub_100013198(v74, v96);
    swift_bridgeObjectRelease();
  }
  sub_100008EA8((uint64_t)v122);
  return v86;
}

uint64_t sub_1002031C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v41 = a4;
  unint64_t v42 = a3;
  uint64_t v39 = sub_100009F04(&qword_10032C6A0);
  __chkstk_darwin(v39, v6);
  uint64_t v40 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(0);
  __chkstk_darwin(v37, v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for HPKEEnvelope();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v38 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  unint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100211BA8(0xD000000000000018, 0x80000001002A01A0);
  unint64_t v21 = v20;
  uint64_t v22 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + *(int *)(v22 + 52), v14);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v43 = a1;
  sub_100009F04(&qword_10032C6A8);
  sub_1002038B4();
  uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v36 = v10;
  uint64_t v25 = v24;
  swift_release();
  unint64_t v26 = v25;
  sub_1000F487C(v23, v25, v19, v21, v18, v38);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = sub_100201074(v27);
  unint64_t v35 = v21;
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  int64_t v30 = v38;
  uint64_t v31 = (uint64_t)v36;
  sub_100200EC0((uint64_t)v38, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for HPKEEnvelope);
  *(void *)(v31 + *(int *)(v37 + 20)) = v29;
  uint64_t v32 = v40;
  sub_100200EC0(v31, v40, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  swift_storeEnumTagMultiPayload();
  v42(v32);
  sub_100013198(v23, v26);
  sub_100013198(v19, v35);
  sub_100203834(v32);
  sub_100200F28(v31, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  sub_100200F28((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for HPKEEnvelope);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_100203834(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032C6A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(uint64_t a1)
{
  return sub_10000698C(a1, qword_10032C720);
}

unint64_t sub_1002038B4()
{
  unint64_t result = qword_10032C6B0;
  if (!qword_10032C6B0)
  {
    sub_1000112CC(&qword_10032C6A8);
    sub_100203930();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C6B0);
  }
  return result;
}

unint64_t sub_100203930()
{
  unint64_t result = qword_10032C6B8;
  if (!qword_10032C6B8)
  {
    sub_1000112CC(&qword_10032C698);
    sub_1000131F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C6B8);
  }
  return result;
}

uint64_t *sub_1002039A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100013140(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for HPKEEnvelope() + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for P384.KeyAgreement.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100203AA4(uint64_t a1)
{
  sub_100013198(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v2 = a1 + *(int *)(type metadata accessor for HPKEEnvelope() + 20);
  uint64_t v3 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100203B3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for HPKEEnvelope() + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100203BEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100013140(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100013198(v8, v9);
  uint64_t v10 = *(int *)(type metadata accessor for HPKEEnvelope() + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100203CB0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for HPKEEnvelope() + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t *sub_100203D50(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100013198(v6, v7);
  uint64_t v8 = *(int *)(type metadata accessor for HPKEEnvelope() + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100203E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100203E18);
}

uint64_t sub_100203E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HPKEEnvelope();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100203ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100203EEC);
}

uint64_t sub_100203EEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HPKEEnvelope();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100203FA8()
{
  uint64_t result = type metadata accessor for HPKEEnvelope();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InheritanceHealthCheckAnalyticsEvent()
{
  uint64_t result = qword_10032C7B8;
  if (!qword_10032C7B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10020409C()
{
  sub_1000C520C();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_100204174()
{
  *(void *)(v0 + qword_10032C758) = _swiftEmptyArrayStorage;
  *(void *)(v0 + qword_10032C760) = 0;
  *(unsigned char *)(v0 + qword_10032C768) = 0;
  *(unsigned char *)(v0 + qword_10032C770) = 0;
  *(unsigned char *)(v0 + qword_10032C778) = 0;
  *(void *)(v0 + qword_10032C780) = 0;
  *(unsigned char *)(v0 + qword_10032C788) = 0;
  *(unsigned char *)(v0 + qword_10032C790) = 0;
  *(unsigned char *)(v0 + qword_10032C798) = 0;
  *(unsigned char *)(v0 + qword_10032C7A0) = 0;
  *(void *)(v0 + qword_10032C7A8) = -1;
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);

  return AAFTimedAnalyticsEvent.init(eventName:initialData:)();
}

uint64_t sub_10020428C(int a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_100009F04(&qword_100325360);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AAUnderTest.getter();
  if (result) {
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, &v4[qword_10032C7B0], v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100008EF8(v73, v73[3]);
  sub_100009F04((uint64_t *)&unk_100325630);
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10024EC08(v72);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  unint64_t v71 = v13;
  sub_100008EA8((uint64_t)v73);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  uint64_t v16 = (char **)0x8000000000000000;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)isa, 0x6961706552646964, 0xE900000000000072, isUniquelyReferenced_nonNull_native);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v17 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v17, 0xD000000000000013, 0x800000010029E370, v18);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v19 = Int._bridgeToObjectiveC()().super.super.isa;
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v19, 0xD000000000000018, 0x800000010029E390, v20);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  NSString v21 = String._bridgeToObjectiveC()();
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v21, 0x6E6F6973726576, 0xE700000000000000, v22);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  NSString v23 = String._bridgeToObjectiveC()();
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v23, 0x6E6F6973726576, 0xE700000000000000, v24);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v25 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v25, 0xD000000000000011, 0x80000001002A02C0, v26);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v27 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v27, 0xD000000000000012, 0x80000001002A02E0, v28);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v29 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v30 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v29, 0xD000000000000013, 0x80000001002A0300, v30);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v31 = Int._bridgeToObjectiveC()().super.super.isa;
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v31, 0x6C6544746E756F63, 0xEA00000000006174, v32);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v33 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v33, 0xD000000000000012, 0x80000001002A0320, v34);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  Class v35 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  v73[0] = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v35, 0xD000000000000014, 0x80000001002A0340, v36);
  unint64_t v71 = v73[0];
  swift_bridgeObjectRelease();
  uint64_t v37 = &v4[qword_10032C758];
  swift_beginAccess();
  if (*(void *)v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v66) {
      goto LABEL_21;
    }
  }
  else if (!*(void *)((*(void *)v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_21;
  }
  uint64_t v38 = *(void *)v37;
  if ((*(void *)v37 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v67 < 2) {
        goto LABEL_21;
      }
      goto LABEL_10;
    }
    id v39 = *(id *)(v38 + 32);
  }
  uint64_t v16 = &off_10031D000;
  [v39 code];
  Class v40 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v70 = v71;
  unint64_t v3 = 0x8000000000000000;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C((uint64_t)v40, 0xD000000000000014, 0x800000010029C400, v41);
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v2 = &off_10031D000;
  uint64_t result = (uint64_t)[v39 domain];
  if (!result)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v42 = result;
  swift_beginAccess();
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v70 = v71;
  unint64_t v71 = 0x8000000000000000;
  sub_10022C68C(v42, 0xD000000000000016, 0x800000010029C420, v43);
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  swift_endAccess();

  if (*(void *)v37 >> 62) {
    goto LABEL_35;
  }
  if (*(uint64_t *)((*(void *)v37 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v44 = *(void *)v37;
  if ((*(void *)v37 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v68 < 3) {
        goto LABEL_21;
      }
LABEL_16:
      uint64_t v50 = *(void *)v37;
      if ((*(void *)v37 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL) {
          __break(1u);
        }
        id v51 = *(id *)(v50 + 48);
      }
      [v51 v16[168]];
      Class v52 = Int._bridgeToObjectiveC()().super.super.isa;
      swift_beginAccess();
      char v53 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v70 = v71;
      unint64_t v71 = 0x8000000000000000;
      sub_10022C68C((uint64_t)v52, 0xD000000000000014, 0x800000010029C480, v53);
      unint64_t v71 = v70;
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t result = (uint64_t)[v51 v2[182]];
      if (result)
      {
        uint64_t v54 = result;
        swift_beginAccess();
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v70 = v71;
        unint64_t v71 = 0x8000000000000000;
        sub_10022C68C(v54, 0xD000000000000016, 0x800000010029C4A0, v55);
        unint64_t v71 = v70;
        swift_bridgeObjectRelease();
        swift_endAccess();

        goto LABEL_21;
      }
LABEL_45:
      __break(1u);
      return result;
    }
    id v45 = *(id *)(v44 + 40);
  }
  [v45 v16[168]];
  Class v46 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess();
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v70 = v71;
  unint64_t v71 = v3;
  sub_10022C68C((uint64_t)v46, 0xD000000000000014, 0x800000010029C440, v47);
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t result = (uint64_t)[v45 v2[182]];
  if (!result)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v48 = result;
  swift_beginAccess();
  char v49 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v70 = v71;
  unint64_t v71 = v3;
  sub_10022C68C(v48, 0xD000000000000016, 0x800000010029C460, v49);
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  swift_endAccess();

  if (*(void *)v37 >> 62) {
    goto LABEL_39;
  }
  if (*(uint64_t *)((*(void *)v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3) {
    goto LABEL_16;
  }
LABEL_21:
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  sub_100007288(v56, (uint64_t)qword_10033E778);
  char v57 = v4;
  unint64_t v58 = Logger.logObject.getter();
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v69[3] = a1;
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 138412290;
    unint64_t v62 = *(Class *)((char *)&v57->isa + qword_10032C760);
    if (v62)
    {
      uint64_t v72 = *(uint64_t *)((char *)&v57->isa + qword_10032C760);
      id v63 = v62;
    }
    else
    {
      uint64_t v72 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v61 = v62;

    _os_log_impl((void *)&_mh_execute_header, v58, v59, "InheritanceHealthCheckAnalyticsEvent: reporting claimCode error %@", v60, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v58 = v57;
  }

  unint64_t v64 = *(Class *)((char *)&v57->isa + qword_10032C760);
  swift_beginAccess();
  id v65 = v64;
  swift_bridgeObjectRetain();
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100204F08()
{
}

uint64_t sub_100204F38()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + qword_10032C7B0;
  uint64_t v2 = sub_100009F04(&qword_100325360);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

id sub_100204FC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceHealthCheckAnalyticsEvent();
  return [super dealloc];
}

uint64_t sub_100205000(uint64_t a1)
{
  swift_bridgeObjectRelease();

  uint64_t v2 = a1 + qword_10032C7B0;
  uint64_t v3 = sub_100009F04(&qword_100325360);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_100205094()
{
  return type metadata accessor for InheritanceHealthCheckAnalyticsEvent();
}

uint64_t (*sub_10020509C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1002050F8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_10032C8A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_100205FC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = *v3;
  v11[14] = 0;
  sub_1000DC13C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for InheritanceInvitationResponseMessage();
    v11[13] = 1;
    type metadata accessor for UUID();
    sub_10000716C(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[12] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1002052F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v3);
  uint64_t v21 = sub_100009F04(&qword_10032C8B8);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v4);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InheritanceInvitationResponseMessage();
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100205FC8();
  uint64_t v11 = (uint64_t)v22;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11) {
    return sub_100008EA8((uint64_t)a1);
  }
  char v22 = a1;
  char v25 = 0;
  sub_1000DC190();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unsigned char *v10 = v26;
  char v24 = 1;
  sub_10000716C((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v12 = *(void (**)(void))(v18 + 32);
  v16[1] = &v10[*(int *)(v7 + 20)];
  v12();
  char v23 = 2;
  uint64_t v13 = v21;
  char v14 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v13);
  v10[*(int *)(v7 + 24)] = v14 & 1;
  sub_100163908((uint64_t)v10, v17);
  sub_100008EA8((uint64_t)v22);
  return sub_10020601C((uint64_t)v10);
}

uint64_t sub_1002056A0()
{
  uint64_t v1 = 0x69636966656E6562;
  if (*v0 != 1) {
    uint64_t v1 = 0x6465747065636361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100205700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100206284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100205728(uint64_t a1)
{
  unint64_t v2 = sub_100205FC8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100205764(uint64_t a1)
{
  unint64_t v2 = sub_100205FC8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002057A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002052F8(a1, a2);
}

uint64_t sub_1002057B8(void *a1)
{
  return sub_1002050F8(a1);
}

uint64_t sub_1002057D0()
{
  _StringGuts.grow(_:)(37);
  uint64_t v1 = type metadata accessor for InheritanceInvitationResponseMessage();
  sub_100009F04(&qword_10032C808);
  uint64_t v2 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x800000010029C900;
  v3._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  type metadata accessor for UUID();
  sub_10000716C((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x657470656363610ALL;
  v5._object = (void *)0xEC000000202D2064;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 24))) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t type metadata accessor for InheritanceInvitationResponseMessage()
{
  uint64_t result = qword_10032C868;
  if (!qword_10032C868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1002059A0(unsigned char *a1, void *a2, uint64_t a3)
{
  Swift::String v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *Swift::String v4 = *a2;
    Swift::String v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *((unsigned char *)v4 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

unsigned char *sub_100205A88(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100205B20(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100205BB8(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *sub_100205C50(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_100205CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100205CFC);
}

uint64_t sub_100205CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 2) {
      return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_100205DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100205DE4);
}

uint64_t sub_100205DE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t sub_100205EA4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100205F44(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10000716C((unint64_t *)&unk_10032CFD0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
  uint64_t result = sub_10000716C(&qword_100329CA0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100205FC8()
{
  unint64_t result = qword_10032C8B0;
  if (!qword_10032C8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C8B0);
  }
  return result;
}

uint64_t sub_10020601C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InheritanceInvitationResponseMessage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for InheritanceInvitationResponseMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100206144);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationResponseMessage.CodingKeys()
{
  return &type metadata for InheritanceInvitationResponseMessage.CodingKeys;
}

unint64_t sub_100206180()
{
  unint64_t result = qword_10032C8C0;
  if (!qword_10032C8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C8C0);
  }
  return result;
}

unint64_t sub_1002061D8()
{
  unint64_t result = qword_10032C8C8;
  if (!qword_10032C8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C8C8);
  }
  return result;
}

unint64_t sub_100206230()
{
  unint64_t result = qword_10032C8D0;
  if (!qword_10032C8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032C8D0);
  }
  return result;
}

uint64_t sub_100206284(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002063F0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28PostInstallActivityScheduler__xpcActivityScheduler;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1002064A4()
{
  return type metadata accessor for PostInstallActivityScheduler();
}

uint64_t type metadata accessor for PostInstallActivityScheduler()
{
  uint64_t result = qword_10032C910;
  if (!qword_10032C910) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002064F8()
{
  sub_10001465C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100206590(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Initializing verifier", v8, 2u);
    swift_slowDealloc();
  }

  char v22 = 0;
  id v9 = objc_allocWithZone((Class)SPAKE2Verifier);
  swift_bridgeObjectRetain();
  sub_100013140(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v9 initWithSalt:isa code:v11 error:&v22];
  sub_100013198(a1, a2);

  uint64_t v13 = v22;
  if (v22)
  {
    char v14 = v22;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v21 = v12;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      char v22 = v14;
      uint64_t v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v13;

      id v12 = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SPAKE verifier creation failed with error: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v15 = v14;
    }

    swift_willThrow();
  }
  else
  {
    a3[3] = sub_10000850C(0, &qword_10032CAA8);
    a3[4] = &off_100301260;
    a3[5] = &off_1003012A0;
    *a3 = v12;
  }
}

void sub_1002068C8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Initializing prover", v8, 2u);
    swift_slowDealloc();
  }

  char v22 = 0;
  id v9 = objc_allocWithZone((Class)SPAKE2Prover);
  swift_bridgeObjectRetain();
  sub_100013140(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v9 initWithSalt:isa code:v11 error:&v22];
  sub_100013198(a1, a2);

  uint64_t v13 = v22;
  if (v22)
  {
    char v14 = v22;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v21 = v12;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      char v22 = v14;
      uint64_t v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v13;

      id v12 = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SPAKE prover creation failed with error: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v15 = v14;
    }

    swift_willThrow();
  }
  else
  {
    a3[3] = sub_10000850C(0, &qword_10032CAA0);
    a3[4] = &off_1003012B8;
    *a3 = v12;
  }
}

void *sub_100206BF4()
{
  return sub_100206C78((SEL *)&selRef_getMsg1WithError_);
}

id sub_100206C20(uint64_t a1, uint64_t a2)
{
  return sub_100206D68(a1, a2, (SEL *)&selRef_processMsg1_error_);
}

void *sub_100206C4C()
{
  return sub_100206C78((SEL *)&selRef_getMsg2WithError_);
}

void *sub_100206C78(SEL *a1)
{
  id v6 = 0;
  id v2 = [v1 *a1:&v6];
  id v3 = v6;
  if (v2)
  {
    unsigned int v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unsigned int v4 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id sub_100206D3C(uint64_t a1, uint64_t a2)
{
  return sub_100206D68(a1, a2, (SEL *)&selRef_processMsg2_error_);
}

id sub_100206D68(uint64_t a1, uint64_t a2, SEL *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = 0;
  LODWORD(a3) = [v3 *a3 isa:&v8];

  if (a3) {
    return v8;
  }
  id v7 = v8;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

id sub_100206E24()
{
  return [*v0 isVerified];
}

void *sub_100206E48(uint64_t a1, uint64_t a2)
{
  return sub_100206EC4(a1, a2, (SEL *)&selRef_decryptMessage_error_);
}

void *sub_100206E74(uint64_t a1, uint64_t a2)
{
  return sub_100206EC4(a1, a2, (SEL *)&selRef_encryptMessage_error_);
}

uint64_t type metadata accessor for CustodianSPAKEFactory()
{
  return self;
}

void *sub_100206EC4(uint64_t a1, uint64_t a2, SEL *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = 0;
  id v6 = [v3 *a3 isa:&v10];

  id v7 = v10;
  if (v6)
  {
    id v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    id v8 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8;
}

uint64_t sub_100206F9C()
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E748);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Generating code", v3, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v16 = 0;
  id v4 = [self generateCodeWithError:&v16];
  uint64_t v5 = v16;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v5;

  if (v7)
  {
    id v8 = v7;
    swift_bridgeObjectRelease();
    id v9 = v8;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)id v12 = 138412290;
      os_log_type_t v16 = v9;
      uint64_t v13 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v5;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SPAKE verifier code creation failed with error: %@", v12, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v10 = v9;
    }

    swift_willThrow();
  }
  return v6;
}

id sub_100207260(uint64_t a1, uint64_t a2)
{
  return sub_100206C20(a1, a2);
}

id sub_100207278(uint64_t a1, uint64_t a2)
{
  return sub_100206D3C(a1, a2);
}

void *sub_100207290(uint64_t a1, uint64_t a2)
{
  return sub_100206E48(a1, a2);
}

void *sub_1002072A8(uint64_t a1, uint64_t a2)
{
  return sub_100206E74(a1, a2);
}

void *sub_1002072C0()
{
  return sub_100206BF4();
}

void *sub_1002072D8()
{
  return sub_100206C4C();
}

uint64_t sub_1002072F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v60 = a2;
  uint64_t v5 = sub_100009F04(&qword_10032CBB0);
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v66 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  uint64_t v70 = *(void *)(updated - 8);
  uint64_t v8 = *(void *)(v70 + 64);
  uint64_t v10 = __chkstk_darwin(updated, v9);
  uint64_t v72 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  unint64_t v71 = (char *)&v56 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v73 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  id v21 = (char *)&v56 - v20;
  __chkstk_darwin(v19, v22);
  char v24 = (char *)&v56 - v23;
  char v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25((char *)&v56 - v23, a1 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v13);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100007288(v26, (uint64_t)qword_10033E748);
  unint64_t v64 = v25;
  v25(v21, (uint64_t)v24, v13);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  Class v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  uint64_t v61 = v27;
  int v59 = v28;
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = a1;
  uint64_t v74 = v24;
  if (v29)
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v58 = v8;
    uint64_t v32 = v31;
    uint64_t v57 = swift_slowAlloc();
    v76[0] = v57;
    *(_DWORD *)uint64_t v32 = 136315650;
    sub_10002F8A4();
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v75[0] = sub_100135190(v33, v34, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class v35 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v62 = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v63 = v35;
    v35(v21, v13);
    *(_WORD *)(v32 + 12) = 1024;
    int v36 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted);
    swift_release();
    LODWORD(v75[0]) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v32 + 18) = 2080;
    swift_bridgeObjectRetain();
    v75[0] = sub_100135190(v60, a3, v76);
    char v24 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v37 = v61;
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v59, "Custodian invitation %s was accepted %{BOOL}d by %s", (uint8_t *)v32, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v8 = v58;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v62 = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v63 = v38;
    v38(v21, v13);

    swift_bridgeObjectRelease_n();
    swift_release();
  }
  if (*(unsigned char *)(v30 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted)) {
    uint64_t v39 = 2;
  }
  else {
    uint64_t v39 = 4;
  }
  uint64_t v40 = (uint64_t)v71;
  char v41 = v64;
  v64(v71, (uint64_t)v24, v13);
  uint64_t v42 = updated;
  *(void *)(v40 + *(int *)(updated + 20)) = v39;
  *(unsigned char *)(v40 + *(int *)(v42 + 24)) = 1;
  uint64_t v43 = v68;
  uint64_t v44 = v66;
  uint64_t v45 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v67 + OBJC_IVAR____TtC13appleaccountd31DaemonInvitationResponseHandler__statusUpdater, v69);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  uint64_t v46 = *sub_100008EF8(v76, v76[3]);
  sub_100008A94(v46 + 16, (uint64_t)v75);
  sub_100008EF8(v75, v75[3]);
  uint64_t v47 = (uint64_t)v73;
  v41(v73, v40, v13);
  uint64_t v48 = v72;
  sub_100207EC8(v40, v72);
  unint64_t v49 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
  unint64_t v50 = (v8 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = swift_allocObject();
  sub_100208034(v48, v51 + v49);
  *(void *)(v51 + v50) = v46;
  Class v52 = (void (**)(uint64_t))(v51 + ((v50 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint8_t *v52 = sub_100207A10;
  v52[1] = 0;
  swift_retain();
  sub_10023B75C(v47, (uint64_t)sub_100208098, v51);
  swift_release();
  uint64_t v53 = v47;
  uint64_t v54 = v63;
  v63((char *)v53, v13);
  sub_100008EA8((uint64_t)v75);
  sub_100208144(v40);
  v54(v74, v13);
  return sub_100008EA8((uint64_t)v76);
}

void sub_100207A10(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002081A0(a1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v16[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error updating status %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Status update successful!", v15, 2u);
      swift_slowDealloc();
    }

    sub_100208208((uint64_t)v5);
  }
}

uint64_t sub_100207CE4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd31DaemonInvitationResponseHandler__statusUpdater;
  uint64_t v2 = sub_100009F04(&qword_10032CBB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100207D88()
{
  return type metadata accessor for DaemonInvitationResponseHandler();
}

uint64_t type metadata accessor for DaemonInvitationResponseHandler()
{
  uint64_t result = qword_10032CAE0;
  if (!qword_10032CAE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100207DDC()
{
  sub_100207E6C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100207E6C()
{
  if (!qword_10032CAF0)
  {
    sub_1000112CC((uint64_t *)&unk_10032CAF8);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032CAF0);
    }
  }
}

uint64_t sub_100207EC8(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_100207F2C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100208034(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t sub_100208098(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_10025BF88(a1, v6, v7, v9, v10);
}

uint64_t sub_100208144(uint64_t a1)
{
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_1002081A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032E140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100208208(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032E140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100208268(char a1, uint64_t a2, unint64_t a3)
{
  _StringGuts.grow(_:)(55);
  v6._uint64_t countAndFlagsBits = 0xD000000000000022;
  v6._object = (void *)0x80000001002A0500;
  String.append(_:)(v6);
  if (a1) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001002A0530;
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  sub_1000196B4(a2, a3);
  sub_100009F04(&qword_10032CD70);
  v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_10020837C()
{
  return sub_100208268(*(unsigned char *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_100208388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v22 = a2;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6, v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100009F04((uint64_t *)&unk_100321940);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032AB40);
  Dependency.init(dependencyId:config:)();
  uint64_t v15 = v4 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  *(unsigned char *)uint64_t v15 = 0;
  *(_OWORD *)(v15 + 8) = xmmword_1002AD240;
  uint64_t v16 = OBJC_IVAR____TtC13appleaccountd11DataCryptor_serialQueue;
  sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter();
  char v25 = &_swiftEmptyArrayStorage;
  sub_100033B88();
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_10019F530();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v4 + v16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v17 = (void *)(v4 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainAccount);
  uint64_t v18 = v22;
  *uint64_t v17 = a1;
  v17[1] = v18;
  uint64_t v19 = (void *)(v4 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainService);
  uint64_t v20 = v24;
  void *v19 = v23;
  v19[1] = v20;
  return v4;
}

uint64_t sub_100208648@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  unint64_t v4 = *(void *)(v2 + 16);
  if (v4 >> 60 == 15) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  unint64_t v6 = 0xC000000000000000;
  if (v4 >> 60 != 15) {
    unint64_t v6 = v4;
  }
  *a2 = v5;
  a2[1] = v6;
  return sub_1000196B4(v3, v4);
}

void sub_100208698()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_10032CD78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__deviceInfoProvider, v2);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    int v8 = sub_100230AE4();
    sub_100008EA8((uint64_t)v17);
    if (v8 == 1)
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100007288(v9, (uint64_t)qword_10033E700);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cannot access the key before first unlock.", v12, 2u);
        swift_slowDealloc();
      }

      uint64_t v13 = *(void *)(v7 + 8);
      unint64_t v14 = *(void *)(v7 + 16);
      *(_OWORD *)(v7 + 8) = xmmword_1002AD240;
      sub_1000196A0(v13, v14);
      *(unsigned char *)uint64_t v7 = 0;
    }
    else
    {
      sub_1002088BC(v1);
    }
  }
}

void sub_1002088BC(uint64_t a1)
{
  uint64_t v3 = sub_100009F04(&qword_100321D20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)AAFKeychainItemDescriptor) init];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setAccount:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setService:v10];

  [v8 setItemClass:1];
  [v8 setSynchronizable:1];
  [v8 setItemAccessible:5];
  [v8 setUseDataProtection:2];
  os_log_type_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v63 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager;
  uint64_t v64 = v4 + 16;
  uint64_t v62 = v11;
  ((void (*)(char *))v11)(v7);
  Dependency.wrappedValue.getter();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  id v65 = v7;
  uint64_t v66 = v3;
  uint64_t v61 = v12;
  v12(v7, v3);
  uint64_t v13 = v69;
  uint64_t v14 = v70;
  sub_100008EF8(v68, v69);
  uint64_t v15 = *(uint64_t (**)(id, uint64_t, uint64_t))(v14 + 16);
  id v67 = v8;
  uint64_t v16 = v15(v8, v13, v14);
  if (v1)
  {
    sub_100008EA8((uint64_t)v68);
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v68[0] = swift_slowAlloc();
      uint64_t v59 = a1;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v60 = v20 + 4;
      uint64_t v71 = v1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v71 = sub_100135190(v21, v22, v68);
      a1 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Existing keychain item could not be fetched. Error - %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v23 = (void *)v16;
    sub_100008EA8((uint64_t)v68);
    if (v23)
    {
      id v24 = v23;
      id v25 = [v24 value];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {

        uint64_t v27 = 0;
        unint64_t v29 = 0xF000000000000000;
      }
      uint64_t v56 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
      uint64_t v57 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
      unint64_t v58 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
      *(void *)(v56 + 8) = v27;
      *(void *)(v56 + 16) = v29;
      goto LABEL_25;
    }
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100007288(v30, (uint64_t)qword_10033E700);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Creating new key.", v33, 2u);
    swift_slowDealloc();
  }

  uint64_t v34 = sub_100213DCC(0x20uLL);
  unint64_t v36 = v35;
  uint64_t v59 = a1;
  uint64_t v60 = 0;
  sub_100013140(v34, v35);
  uint64_t v37 = Logger.logObject.getter();
  uint64_t v38 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v37, (os_log_type_t)v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v38, "Persisting the key.", v39, 2u);
    swift_slowDealloc();
  }

  id v40 = objc_allocWithZone((Class)AAFKeychainItem);
  sub_100013140(v34, v36);
  id v41 = v67;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v43 = [v40 initWithDescriptor:v41 value:isa];
  sub_100013198(v34, v36);

  uint64_t v44 = v65;
  uint64_t v45 = v66;
  v62(v65, v63, v66);
  Dependency.wrappedValue.getter();
  v61(v44, v45);
  uint64_t v46 = v69;
  uint64_t v47 = v70;
  sub_100008EF8(v68, v69);
  uint64_t v48 = v60;
  unint64_t v49 = v60;
  (*(void (**)(id, uint64_t, uint64_t))(v47 + 8))(v43, v46, v47);
  if (!v49)
  {
    sub_100013198(v34, v36);

    sub_100008EA8((uint64_t)v68);
    uint64_t v55 = v34;
    uint64_t v56 = v59 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
    uint64_t v57 = *(void *)(v59 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
    unint64_t v58 = *(void *)(v59 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
    *(void *)(v56 + 8) = v55;
    *(void *)(v56 + 16) = v36;
LABEL_25:
    sub_1000196A0(v57, v58);
    *(unsigned char *)uint64_t v56 = 1;
    return;
  }

  sub_100013198(v34, v36);
  sub_100008EA8((uint64_t)v68);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v60 = v48;
    Class v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = (void *)swift_slowAlloc();
    uint64_t v66 = v34;
    *(_DWORD *)Class v52 = 138412290;
    swift_errorRetain();
    uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
    v68[0] = v54;
    uint64_t v34 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v53 = v54;
    uint64_t v48 = v60;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Random key could not be generated. Error - %@", v52, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  if (!v48) {
    sub_100013198(v34, v36);
  }
}

uint64_t sub_100209160(uint64_t a1, unint64_t a2)
{
  sub_100208698();
  if (!v3)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    Data.encrypt(using:)(v8, v9, a1, a2, (uint64_t *)&v10);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_1000719DC();
    uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
    sub_100013198(v8, v9);
    sub_100071A30((uint64_t *)&v10);
  }
  return v2;
}

uint64_t sub_1002092E8@<X0>(uint64_t *a1@<X8>)
{
  sub_100208698();
  if (v1)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E700);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(void *)&v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v15 = v1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v15 = sub_100135190(v7, v8, (uint64_t *)v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error decoding EncryptedData: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return swift_willThrow();
  }
  else
  {
    OS_dispatch_queue.sync<A>(execute:)();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10020A1BC();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    v14[0] = v13[0];
    v14[1] = v13[1];
    v14[2] = v13[2];
    uint64_t v9 = EncryptedData.decrypt(using:)(*(uint64_t *)&v13[0], *((unint64_t *)&v13[0] + 1));
    uint64_t v11 = v10;
    sub_100071A30((uint64_t *)v14);
    uint64_t result = sub_100013198(*(uint64_t *)&v13[0], *((unint64_t *)&v13[0] + 1));
    *a1 = v9;
    a1[1] = v11;
  }
  return result;
}

void sub_1002095F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_10032CD78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__deviceInfoProvider, v2);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    int v8 = sub_100230AE4();
    sub_100008EA8((uint64_t)v17);
    if (v8 == 1)
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100007288(v9, (uint64_t)qword_10033E700);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cannot access the key before first unlock.", v12, 2u);
        swift_slowDealloc();
      }

      uint64_t v13 = *(void *)(v7 + 8);
      unint64_t v14 = *(void *)(v7 + 16);
      *(_OWORD *)(v7 + 8) = xmmword_1002AD240;
      sub_1000196A0(v13, v14);
      *(unsigned char *)uint64_t v7 = 0;
    }
    else
    {
      sub_100209810(v1);
    }
  }
}

uint64_t sub_100209810(uint64_t a1)
{
  uint64_t v3 = sub_100009F04(&qword_100321D20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E700);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Deleting AAD Encryption key.", v11, 2u);
    swift_slowDealloc();
  }

  id v12 = [objc_allocWithZone((Class)AAFKeychainItemDescriptor) init];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setAccount:v13];

  NSString v14 = String._bridgeToObjectiveC()();
  [v12 setService:v14];

  [v12 setItemClass:1];
  [v12 setSynchronizable:1];
  [v12 setItemAccessible:5];
  [v12 setUseDataProtection:2];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v15 = v28;
  uint64_t v16 = v29;
  sub_100008EF8(v27, v28);
  (*(void (**)(id, uint64_t, uint64_t))(v16 + 24))(v12, v15, v16);
  if (v1)
  {

    sub_100008EA8((uint64_t)v27);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      v27[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v19 = 136315138;
      uint64_t v30 = v1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v30 = sub_100135190(v20, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "AAD Encryption key could not be deleted. Error - %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {

    sub_100008EA8((uint64_t)v27);
  }
  uint64_t v22 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  uint64_t v23 = *(void *)(v22 + 8);
  unint64_t v24 = *(void *)(v22 + 16);
  *(_OWORD *)(v22 + 8) = xmmword_1002AD240;
  uint64_t result = sub_1000196A0(v23, v24);
  *(unsigned char *)uint64_t v22 = 0;
  return result;
}

uint64_t sub_100209C90()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager;
  uint64_t v2 = sub_100009F04(&qword_100321D20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__deviceInfoProvider;
  uint64_t v4 = sub_100009F04(&qword_10032CD78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000196A0(*(void *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8), *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16));

  return swift_deallocClassInstance();
}

uint64_t sub_100209DC8()
{
  return type metadata accessor for DataCryptor();
}

uint64_t type metadata accessor for DataCryptor()
{
  uint64_t result = qword_10032CC10;
  if (!qword_10032CC10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100209E1C()
{
  sub_10001BF34(319, qword_10032D810, (uint64_t *)&unk_100321940);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_10032CC20, &qword_10032AB40);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t destroy for CryptorKeyContainer(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1 >> 60 != 15) {
    return sub_100013198(*(void *)(result + 8), v1);
  }
  return result;
}

uint64_t _s13appleaccountd19CryptorKeyContainerVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (uint64_t *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
  }
  else
  {
    uint64_t v5 = *v3;
    sub_100013140(*v3, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for CryptorKeyContainer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  unint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100013140(*v4, *(void *)(a2 + 16));
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v5;
      sub_100013198(v8, v9);
      return a1;
    }
    sub_1000AD378(a1 + 8);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *uint64_t v3 = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_100013140(*v4, *(void *)(a2 + 16));
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  return a1;
}

__n128 initializeWithTake for CryptorKeyContainer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CryptorKeyContainer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (void *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *v5;
      *(void *)(a1 + 16) = v7;
      sub_100013198(v8, v6);
      return a1;
    }
    sub_1000AD378(a1 + 8);
  }
  *unint64_t v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptorKeyContainer(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptorKeyContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptorKeyContainer()
{
  return &type metadata for CryptorKeyContainer;
}

uint64_t sub_10020A1A4@<X0>(void *a1@<X8>)
{
  return sub_10020A210(a1);
}

unint64_t sub_10020A1BC()
{
  unint64_t result = qword_10032CD68;
  if (!qword_10032CD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032CD68);
  }
  return result;
}

uint64_t sub_10020A210@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
  if (v3 >> 60 == 15) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  }
  unint64_t v5 = 0xC000000000000000;
  if (v3 >> 60 != 15) {
    unint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
  }
  *a1 = v4;
  a1[1] = v5;
  return sub_1000196B4(v2, v3);
}

uint64_t sub_10020A260()
{
  type metadata accessor for BenefactorAccessKeyHealthCheck();
  sub_100009F04(&qword_10032CE60);
  uint64_t result = String.init<A>(describing:)();
  qword_10032CD80 = result;
  *(void *)algn_10032CD88 = v1;
  return result;
}

uint64_t sub_10020A2AC(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_10032CD80;
      unint64_t v19 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100135190(v18, v19, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v23 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v20 = String.init<A>(describing:)();
      uint64_t v23 = sub_100135190(v20, v21, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - failed to fetch manatee status: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
    }

    swift_errorRetain();
    a3(a1);
    sub_100080A98(a1, 1);
    return sub_100080A98(a1, 1);
  }
  else if (a1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_10020A71C((uint64_t)a3, a4);
      return swift_release();
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E778);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v11 = qword_10032CD80;
      unint64_t v12 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100135190(v11, v12, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - manatee is not enabled, no benefactor access key checks needed.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a3)(0);
  }
  return result;
}

void sub_10020A71C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032DAB0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  unint64_t v12 = (void *)aBlock[0];
  NSString v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  _OWORD v13[3] = a2;
  v13[4] = v3;
  v13[5] = v6;
  aBlock[4] = sub_10020CAF4;
  void aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10020C294;
  void aBlock[3] = &unk_100301468;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v12 fetchBenefactorsWithCompletion:v14];
  _Block_release(v14);
}

uint64_t sub_10020A914()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032DAB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__storageController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10020AA00()
{
  return type metadata accessor for BenefactorAccessKeyHealthCheck();
}

uint64_t type metadata accessor for BenefactorAccessKeyHealthCheck()
{
  uint64_t result = qword_10032CDC8;
  if (!qword_10032CDC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10020AA54()
{
  sub_10020AB20();
  if (v0 <= 0x3F)
  {
    sub_10020AB78();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10020AB20()
{
  if (!qword_10032CDD8)
  {
    type metadata accessor for InheritanceRequestManager();
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032CDD8);
    }
  }
}

void sub_10020AB78()
{
  if (!qword_10032B5D0)
  {
    sub_1000112CC((uint64_t *)&unk_100321850);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10032B5D0);
    }
  }
}

uint64_t sub_10020ABD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10020C744(a3, a4);
}

uint64_t sub_10020AC00(unint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  unint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v22 = __chkstk_darwin(v20, v21);
  id v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    a3(a2);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v63 = v11;
    uint64_t v28 = v67;
    uint64_t v27 = v68;
    uint64_t v56 = v25;
    uint64_t v57 = v23;
    uint64_t v58 = v22;
    uint64_t v59 = a3;
    uint64_t v65 = a4;
    uint64_t v66 = v10;
    uint64_t v60 = v16;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    uint64_t v30 = Logger.logObject.getter();
    int v55 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v30, (os_log_type_t)v55);
    uint64_t v64 = v19;
    uint64_t v61 = v14;
    uint64_t v62 = v15;
    if (!v31)
    {
      unint64_t v35 = v19;

      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    os_log_t v54 = v30;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v53 = (void *)swift_slowAlloc();
    aBlock[0] = v53;
    *(_DWORD *)uint64_t v32 = 136315394;
    if (qword_100320CB8 != -1) {
      swift_once();
    }
    uint64_t v34 = qword_10032CD80;
    unint64_t v33 = *(void *)algn_10032CD88;
    swift_bridgeObjectRetain();
    uint64_t v69 = (void *)sub_100135190(v34, v33, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2048;
    if (!a1)
    {
      uint64_t v36 = 0;
      unint64_t v35 = v64;
      goto LABEL_16;
    }
    unint64_t v35 = v64;
    if (a1 >> 62) {
      goto LABEL_30;
    }
    uint64_t v36 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      uint64_t v69 = (void *)v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v37 = v54;
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v55, "%s - performing access key health check on %ld benefactors", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_17:
      uint64_t v38 = dispatch_group_create();
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = 0;
      uint64_t v41 = v65;
      uint64_t v40 = v66;
      if (!a1) {
        break;
      }
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        if (!v32) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v32) {
          goto LABEL_27;
        }
      }
      if (v32 >= 1)
      {
        uint64_t v42 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v43 = *(id *)(a1 + 8 * v42 + 32);
          }
          uint64_t v44 = v43;
          ++v42;
          aBlock[0] = v43;
          sub_10020B360(aBlock, v38, v28, v39, v27);
        }
        while (v32 != v42);
LABEL_27:
        swift_bridgeObjectRelease_n();
        uint64_t v41 = v65;
        uint64_t v40 = v66;
        unint64_t v35 = v64;
        break;
      }
      __break(1u);
LABEL_30:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    sub_10000850C(0, (unint64_t *)&qword_10032A860);
    uint64_t v46 = v56;
    uint64_t v45 = v57;
    uint64_t v47 = v58;
    (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, enum case for DispatchQoS.QoSClass.background(_:), v58);
    uint64_t v48 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
    unint64_t v49 = (void *)swift_allocObject();
    v49[2] = v59;
    v49[3] = v41;
    v49[4] = v39;
    aBlock[4] = sub_10004CEB8;
    void aBlock[5] = v49;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (void *)1107296256;
    aBlock[2] = sub_100007244;
    void aBlock[3] = &unk_1003014E0;
    unint64_t v50 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v69 = _swiftEmptyArrayStorage;
    sub_10000A788((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    os_log_type_t v51 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v50);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v40);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v35, v62);
    swift_release();
    return swift_release();
  }
}

void sub_10020B360(void **a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if ([v14 status] == (id)2)
  {
    dispatch_group_enter(a2);
    uint64_t v15 = (void *)swift_allocObject();
    void v15[2] = v14;
    uint64_t v15[3] = a4;
    v15[4] = a2;
    void v15[5] = a5;
    id v16 = v14;
    swift_retain();
    uint64_t v17 = a2;
    sub_10020BABC(v16, (uint64_t (*)(void))sub_10020CB88, (uint64_t)v15);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E778);
    id v19 = v14;
    uint64_t v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      int v31 = v21;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v33 = v30;
      *(_DWORD *)uint64_t v22 = 136315394;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v23 = qword_10032CD80;
      unint64_t v24 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v32 = sub_100135190(v23, v24, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      v29[1] = v22 + 14;
      id v25 = [v19 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v28 = v27;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      uint64_t v32 = sub_100135190(v26, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v31, "%s - BenefactorInfoRecord with beneficiaryID - %s is not accepted. Skipping health check.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_10020B738(uint64_t a1, void *a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v13 = (void *)(a3 + 16);
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E778);
    id v15 = a2;
    id v16 = Logger.logObject.getter();
    int v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      int v27 = v17;
      uint64_t v28 = v9;
      uint64_t v29 = a4;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v31[0] = v26;
      *(_DWORD *)uint64_t v18 = 136315394;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v19 = qword_10032CD80;
      unint64_t v20 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100135190(v19, v20, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      v25[1] = v18 + 14;
      id v21 = [v15 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v8);
      uint64_t v30 = sub_100135190(v22, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v27, "%s - health check failed for benefactor - %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v29;
    }
    else
    {
    }
    swift_beginAccess();
    *uint64_t v13 = a1;
    swift_errorRelease();
  }
  dispatch_group_leave(a4);
}

uint64_t sub_10020BABC(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v70 = a3;
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032DAB0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v69 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [a1 accessKey];

  if (v17)
  {
    uint64_t v66 = v14;
    uint64_t v67 = v13;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E778);
    id v19 = a1;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    unint64_t v23 = v69;
    if (v22)
    {
      uint64_t v68 = a2;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v72 = (void *)v65;
      *(_DWORD *)uint64_t v24 = 136315394;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_10032CD80;
      unint64_t v26 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_100135190(v25, v26, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2080;
      id v27 = [v19 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = v67;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v23, v28);
      uint64_t v71 = sub_100135190(v29, v31, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - BenefactorInfoRecord with beneficiaryID - %s has an access key. No repair needed.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v68(0);
    }
    else
    {

      return a2(0);
    }
  }
  else
  {
    uint64_t v65 = (uint64_t)v12;
    uint64_t v66 = v9;
    uint64_t v67 = v8;
    uint64_t v68 = a2;
    uint64_t v64 = v7;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v33 = v14;
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E778);
    id v35 = a1;
    uint64_t v36 = Logger.logObject.getter();
    int v37 = static os_log_type_t.info.getter();
    BOOL v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
    uint64_t v39 = v65;
    uint64_t v40 = v4;
    if (v38)
    {
      uint64_t v61 = v4;
      int v62 = v37;
      os_log_t v63 = v36;
      uint64_t v41 = swift_slowAlloc();
      uint64_t v72 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315394;
      if (qword_100320CB8 != -1) {
        swift_once();
      }
      uint64_t v42 = qword_10032CD80;
      unint64_t v43 = *(void *)algn_10032CD88;
      swift_bridgeObjectRetain();
      uint64_t v71 = sub_100135190(v42, v43, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      v60[1] = v41 + 14;
      id v44 = [v35 beneficiaryID];
      uint64_t v45 = (uint64_t)v69;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v48 = v47;
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v45, v13);
      uint64_t v71 = sub_100135190(v46, v48, (uint64_t *)&v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v49 = v63;
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v62, "%s - BenefactorInfoRecord with beneficiaryID - %s missing access key. Attempting repair by re-sending acceptance status.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v50 = v70;
      uint64_t v40 = v61;
    }
    else
    {

      uint64_t v45 = (uint64_t)v69;
      uint64_t v50 = v70;
    }
    uint64_t v51 = (uint64_t)v40 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager;
    uint64_t v53 = v66;
    uint64_t v52 = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v39, v51, v67);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v39, v52);
    os_log_t v54 = v72;
    id v55 = [v35 beneficiaryID];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = (void *)swift_allocObject();
    uint64_t v57 = v68;
    long long v56[2] = v35;
    v56[3] = v57;
    uint64_t v58 = v64;
    v56[4] = v50;
    v56[5] = v58;
    id v59 = v35;
    swift_retain();
    sub_1000CDA60(v45, 1, 2u, (uint64_t)sub_10020CBD4, (uint64_t)v56);

    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v45, v13);
  }
}

uint64_t sub_10020C294(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10000850C(0, &qword_100325988);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10020C338(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return a3(a1);
  }
  swift_errorRetain();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E778);
  swift_errorRetain();
  id v14 = a2;
  swift_errorRetain();
  id v15 = v14;
  uint64_t v16 = Logger.logObject.getter();
  int v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();

    return a3(a1);
  }
  int v31 = v17;
  os_log_t v32 = v16;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v18 = swift_slowAlloc();
  uint64_t v30 = swift_slowAlloc();
  uint64_t v36 = v30;
  *(_DWORD *)uint64_t v18 = 136315650;
  if (qword_100320CB8 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_10032CD80;
  unint64_t v20 = *(void *)algn_10032CD88;
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_100135190(v19, v20, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 12) = 2080;
  id v21 = [v15 beneficiaryID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10000A788((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v24 = v23;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v35 = sub_100135190(v22, v24, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 22) = 2080;
  uint64_t v35 = a1;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v35 = sub_100135190(v25, v26, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  os_log_t v27 = v32;
  _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v31, "%s - failed to send acceptance response for %s: %s", (uint8_t *)v18, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return v34(a1);
}

uint64_t sub_10020C744(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E778);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v21 = v3;
    uint64_t v22 = v6;
    uint64_t v23 = a1;
    uint64_t v24 = a2;
    id v15 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)id v15 = 136315138;
    if (qword_100320CB8 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_10032CD80;
    unint64_t v16 = *(void *)algn_10032CD88;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100135190(v17, v16, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - started.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v23;
    a2 = v24;
    uint64_t v3 = v21;
    uint64_t v6 = v22;
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__storageController, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (void *)swift_allocObject();
  _OWORD v19[2] = a1;
  v19[3] = a2;
  v19[4] = v18;
  void v19[5] = v6;
  swift_retain();
  swift_retain();
  sub_1000F02FC((uint64_t)sub_10020CADC, (uint64_t)v19);
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v26);
}

uint64_t sub_10020CA9C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020CAD4()
{
  return sub_10006FAE0(48);
}

uint64_t sub_10020CADC(uint64_t a1, char a2)
{
  return sub_10020A2AC(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10020CAEC()
{
  return sub_10006FAE0(48);
}

uint64_t sub_10020CAF4(unint64_t a1, uint64_t a2)
{
  return sub_10020AC00(a1, a2, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10020CB00()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020CB38()
{
  return sub_10006FAE0(40);
}

uint64_t sub_10020CB40()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10020CB88(uint64_t a1)
{
  sub_10020B738(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_10020CB94()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10020CBD4(uint64_t a1)
{
  return sub_10020C338(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10020CBE8(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_allocObject();
  void v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain();
  swift_retain();
  sub_1001FE060((uint64_t)sub_10020CF00, (uint64_t)v5);

  return swift_release();
}

uint64_t sub_10020CC74(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  id v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v24 - v17;
  if (a2)
  {
    swift_errorRetain();
    a4(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v19 = sub_100008EF8((void *)(a3 + 56), *(void *)(a3 + 80));
    unint64_t v20 = (void *)swift_allocObject();
    void v20[2] = a3;
    void v20[3] = a1;
    v20[4] = a4;
    void v20[5] = a5;
    id v21 = sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
    type metadata accessor for LocalCache();
    swift_retain();
    sub_100007850(a1, 0);
    swift_retain();
    sub_10000A280();
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v15, v10);
    sub_100008EF8((void *)(*v21 + 16), *(void *)(*v21 + 40));
    sub_1000B3744((uint64_t)v18, (uint64_t)sub_10020D408, (uint64_t)v20);
    v22(v18, v10);
    return swift_release();
  }
}

uint64_t type metadata accessor for CustodianFamilyManager()
{
  return self;
}

uint64_t sub_10020CEC0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10020CF00(uint64_t a1, char a2)
{
  return sub_10020CC74(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10020CF10(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    sub_100007850(a1, 0);
    unint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_10020D128(v7, a1);
    sub_100007844(a1, 0);
    swift_bridgeObjectRelease();
    a5((uint64_t)v8, 0);
    return swift_bridgeObjectRelease();
  }
}

void (*sub_10020CFF0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10020D0A0(v6, a2, a3);
  return sub_10020D058;
}

void sub_10020D058(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_10020D0A0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_10020D120;
  }
  __break(1u);
  return result;
}

void sub_10020D120(id *a1)
{
}

void *sub_10020D128(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0;
      uint64_t v27 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v28 = v3 & 0xC000000000000001;
      uint64_t v25 = a2;
      unint64_t v26 = v3 + 32;
      uint64_t v23 = v4;
      unint64_t v24 = v3;
      while (v28)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v7 = v6;
        if (__OFADD__(v5++, 1)) {
          goto LABEL_27;
        }
        uint64_t v9 = *(void *)(a2 + 16);
        if (v9)
        {
          unint64_t v29 = v5;
          uint64_t v10 = type metadata accessor for CustodianRecord();
          uint64_t v11 = a2
              + ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80));
          uint64_t v30 = *(void *)(*(void *)(v10 - 8) + 72);
          swift_bridgeObjectRetain();
          while (1)
          {
            uint64_t v12 = (uint64_t *)(v11 + *(int *)(v10 + 24));
            uint64_t v14 = *v12;
            uint64_t v13 = v12[1];
            id v15 = v7;
            id v16 = [v7 handle];
            uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v19 = v18;

            if (v14 == v17 && v13 == v19)
            {

              a2 = v25;
              swift_bridgeObjectRelease();
              goto LABEL_23;
            }
            char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v21) {
              break;
            }
            v11 += v30;
            --v9;
            unint64_t v7 = v15;
            if (!v9)
            {
              a2 = v25;
              swift_bridgeObjectRelease();
              uint64_t v4 = v23;
              unint64_t v3 = v24;
              unint64_t v5 = v29;
              goto LABEL_19;
            }
          }

          a2 = v25;
LABEL_23:
          swift_bridgeObjectRelease();
          uint64_t v4 = v23;
          unint64_t v3 = v24;
          unint64_t v5 = v29;
        }
        else
        {
LABEL_19:
          if ([v7 isChild])
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        if (v5 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v5 < *(void *)(v27 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v6 = *(id *)(v26 + 8 * v5);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10020D3C0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10020D408(uint64_t a1, char a2)
{
  return sub_10020CF10(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_10020D418@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CustodianRecoveryKeys();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002110C8(&qword_10032CFF0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryKeys);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100211060((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryKeys);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

uint64_t sub_10020D71C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002110C8((unint64_t *)&unk_10032CFC0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationMessage);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100211060((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

uint64_t sub_10020DA20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002110C8((unint64_t *)&unk_10032CFD0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseMessage);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100211060((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

uint64_t sub_10020DD24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002110C8(&qword_1003265A0, (void (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessage);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100211060((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

uint64_t sub_10020E028@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BeneficiaryRemovedMessage();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1002110C8(&qword_10032CFE0, (void (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessage);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100211060((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
}

id sub_10020E430()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceMessageProcessor();
  return [super dealloc];
}

uint64_t type metadata accessor for InheritanceMessageProcessor()
{
  return self;
}

uint64_t sub_10020E504(void *a1, char a2)
{
  uint64_t v4 = sub_100009F04(&qword_10032D048);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_100211404();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = a2;
  sub_1000DC13C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10020E648(uint64_t a1)
{
  unint64_t v2 = sub_100211404();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10020E684(uint64_t a1)
{
  unint64_t v2 = sub_100211404();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10020E6C0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100211298(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10020E6EC(void *a1)
{
  return sub_10020E504(a1, *v1);
}

uint64_t sub_10020E708(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for CustodianMessage, &qword_10032D020, (void (*)(uint64_t))type metadata accessor for CustodianMessage);
}

uint64_t sub_10020E750(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for CustodianInvitationMessage, &qword_10032CFF8, (void (*)(uint64_t))type metadata accessor for CustodianInvitationMessage);
}

uint64_t sub_10020E798(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  a3(0);
  sub_1002110C8(a4, a5);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  return v9;
}

uint64_t sub_10020E9C8(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for CustodianInvitationResponseMessage, &qword_10032D000, (void (*)(uint64_t))type metadata accessor for CustodianInvitationResponseMessage);
}

uint64_t sub_10020EA10(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for ShareMessage, &qword_10032D008, (void (*)(uint64_t))type metadata accessor for ShareMessage);
}

uint64_t sub_10020EA58(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for FinalizeCustodianSetupMessage, &qword_10032D010, (void (*)(uint64_t))type metadata accessor for FinalizeCustodianSetupMessage);
}

uint64_t sub_10020EAA0(uint64_t a1, uint64_t a2)
{
  return sub_10020E798(a1, a2, (void (*)(void))type metadata accessor for CustodianRemovedMessage, &qword_10032D018, (void (*)(uint64_t))type metadata accessor for CustodianRemovedMessage);
}

uint64_t sub_10020EAE8()
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10021100C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  return v1;
}

void sub_10020ECF0(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  v225 = a2;
  uint64_t v226 = a3;
  Class v228 = a1;
  uint64_t v7 = sub_100009F04(&qword_10032CF98);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v220 = (uint64_t)&v194 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage();
  uint64_t v219 = *((void *)v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v204 = (uint64_t)&v194 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v206 = (uint64_t)&v194 - v15;
  uint64_t v221 = type metadata accessor for UUID();
  uint64_t v210 = *(void *)(v221 - 8);
  __chkstk_darwin(v221, v16);
  uint64_t v209 = (char *)&v194 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_10032CFA0);
  uint64_t v20 = __chkstk_darwin(v18 - 8, v19);
  uint64_t v218 = (uint64_t)&v194 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  uint64_t v217 = (uint64_t)&v194 - v23;
  uint64_t v24 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v198 = (uint64_t)&v194 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  os_log_t v32 = (char *)&v194 - v31;
  uint64_t v34 = __chkstk_darwin(v30, v33);
  v227 = (char *)&v194 - v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v224 = (uint64_t)&v194 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v197 = (uint64_t)&v194 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v45 = (char *)&v194 - v44;
  uint64_t v47 = __chkstk_darwin(v43, v46);
  uint64_t v205 = (uint64_t)&v194 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  uint64_t v202 = (uint64_t)&v194 - v51;
  uint64_t v199 = v52;
  __chkstk_darwin(v50, v53);
  uint64_t v223 = (uint64_t)&v194 - v54;
  uint64_t v55 = sub_100009F04(&qword_10032CFA8);
  __chkstk_darwin(v55 - 8, v56);
  uint64_t v216 = (uint64_t)&v194 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for InheritanceInvitationResponseMessage();
  uint64_t v214 = *(void *)(v58 - 8);
  uint64_t v215 = v58;
  uint64_t v60 = __chkstk_darwin(v58, v59);
  uint64_t v208 = (uint64_t)&v194 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60, v62);
  uint64_t v203 = (uint64_t)&v194 - v63;
  uint64_t v64 = sub_100009F04((uint64_t *)&unk_10032CFB0);
  __chkstk_darwin(v64 - 8, v65);
  uint64_t v213 = (uint64_t)&v194 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for InheritanceInvitationMessage();
  uint64_t v211 = *(void *)(v67 - 8);
  uint64_t v212 = v67;
  uint64_t v69 = __chkstk_darwin(v67, v68);
  uint64_t v207 = (uint64_t)&v194 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v69, v71);
  uint64_t v201 = (uint64_t)&v194 - v72;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v74 = (uint64_t (*)(void))sub_100007288(v73, (uint64_t)qword_10033E760);
  swift_bridgeObjectRetain_n();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.info.getter();
  BOOL v77 = os_log_type_enabled(v75, v76);
  uint64_t v200 = v45;
  if (v77)
  {
    uint64_t v222 = v25;
    uint64_t v78 = swift_slowAlloc();
    uint64_t v196 = v5;
    unint64_t v79 = (uint8_t *)v78;
    uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
    unint64_t v195 = v32;
    *(_DWORD *)unint64_t v79 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v229 = sub_100135190(v226, a4, (uint64_t *)&v230);
    uint64_t v25 = v222;
    os_log_t v32 = v195;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Inheritance message processor will process message from %s.", v79, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v196;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v80 = [[*(id *)(*sub_100008EF8((void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore), *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore + 24))+ 16) aa_primaryAppleAccount];

  uint64_t v81 = (uint64_t)v227;
  if (v80)
  {
    switch(sub_10020EAE8())
    {
      case 1u:
        uint64_t v87 = v217;
        sub_10020DD24(v217);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v87, 1, v24) == 1)
        {
          sub_100006574(v87, &qword_10032CFA0);
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v83, v84)) {
            goto LABEL_28;
          }
          id v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v85 = 0;
          uint64_t v86 = "Unable to decode Inheritance Access Key message";
          goto LABEL_27;
        }
        uint64_t v98 = v223;
        sub_100211060(v87, v223, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        uint64_t v99 = v202;
        sub_100210F44(v98, v202, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        int64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.info.getter();
        BOOL v102 = os_log_type_enabled(v100, v101);
        uint64_t v194 = v24;
        uint64_t v222 = v25;
        if (v102)
        {
          id v103 = (uint8_t *)swift_slowAlloc();
          uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
          *(_DWORD *)id v103 = 136315138;
          Class v228 = v74;
          uint64_t v104 = sub_1000E3D60();
          uint64_t v229 = sub_100135190(v104, v105, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100210FAC(v99, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "Received Access Key Message - %s", v103, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100210FAC(v99, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        }

        uint64_t v126 = v205;
        sub_100210F44(v223, v205, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        uint64_t v127 = Logger.logObject.getter();
        os_log_type_t v128 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v127, v128))
        {
          uint64_t v129 = (uint8_t *)swift_slowAlloc();
          Class v228 = (uint64_t (*)(void))swift_slowAlloc();
          uint64_t v230 = v228;
          *(_DWORD *)uint64_t v129 = 136315138;
          v227 = (char *)(v129 + 4);
          type metadata accessor for URL();
          sub_1002110C8((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v130 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v229 = sub_100135190(v130, v131, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100210FAC(v126, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          _os_log_impl((void *)&_mh_execute_header, v127, v128, "Share URL - %s", v129, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100210FAC(v126, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        }

        if (qword_100320D00 != -1) {
          swift_once();
        }
        uint64_t v143 = qword_10033EA48;
        uint64_t v144 = *(void *)(qword_10033EA48 + 16);
        uint64_t v145 = v194;
        if (v144)
        {
          uint64_t v146 = *(int *)(v194 + 24);
          uint64_t v147 = (uint64_t *)(v223 + v146 + *(int *)(type metadata accessor for CloudShareInfo() + 20));
          uint64_t v148 = *v147;
          uint64_t v149 = v147[1];
          uint64_t v150 = (void *)(v143 + 40);
          do
          {
            BOOL v151 = *(v150 - 1) == v148 && *v150 == v149;
            if (v151 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              uint64_t v177 = *sub_100008EF8((void *)(v5+ OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler), *(void *)(v5+ OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler+ 24));
              uint64_t v178 = v223;
              uint64_t v179 = v210;
              uint64_t v180 = (uint64_t)v209;
              (*(void (**)(char *, uint64_t, uint64_t))(v210 + 16))(v209, v223 + *(int *)(v145 + 20), v221);
              Class v228 = (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage;
              uint64_t v181 = (uint64_t)v200;
              sub_100210F44(v178, (uint64_t)v200, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
              unint64_t v182 = (*(unsigned __int8 *)(v222 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
              unint64_t v183 = (v199 + v182 + 7) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v184 = swift_allocObject();
              *(void *)(v184 + 16) = v177;
              sub_100211060(v181, v184 + v182, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
              uint64_t v185 = (void *)(v184 + v183);
              uint64_t v186 = (void *)(v184 + ((v183 + 23) & 0xFFFFFFFFFFFFFFF8));
              *uint64_t v185 = 0;
              v185[1] = 0;
              uint64_t v187 = v226;
              void *v186 = v226;
              v186[1] = a4;
              swift_bridgeObjectRetain();
              swift_retain();
              goto LABEL_80;
            }
            v150 += 2;
            --v144;
          }
          while (v144);
        }
        uint64_t v152 = v197;
        sub_100210F44(v223, v197, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        unint64_t v153 = Logger.logObject.getter();
        os_log_type_t v154 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v153, v154))
        {
          uint64_t v155 = (uint8_t *)swift_slowAlloc();
          uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
          *(_DWORD *)uint64_t v155 = 136315138;
          uint64_t v156 = v152 + *(int *)(v145 + 24);
          uint64_t v157 = (uint64_t *)(v156 + *(int *)(type metadata accessor for CloudShareInfo() + 20));
          uint64_t v158 = *v157;
          unint64_t v159 = v157[1];
          swift_bridgeObjectRetain();
          uint64_t v229 = sub_100135190(v158, v159, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100210FAC(v152, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          _os_log_impl((void *)&_mh_execute_header, v153, v154, "Invalid container ID received %s", v155, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100210FAC(v152, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        }

        sub_100210FAC(v223, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        return;
      case 2u:
        uint64_t v88 = v218;
        sub_10020DD24(v218);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v88, 1, v24) == 1)
        {
          sub_100006574(v88, &qword_10032CFA0);
          uint64_t v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v83, v84)) {
            goto LABEL_28;
          }
          id v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v85 = 0;
          uint64_t v86 = "Unable to decode Update Inheritance Access Key message";
          goto LABEL_27;
        }
        uint64_t v106 = v224;
        sub_100211060(v88, v224, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        sub_100210F44(v106, v81, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        unint64_t v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.info.getter();
        BOOL v109 = os_log_type_enabled(v107, v108);
        uint64_t v194 = v24;
        uint64_t v222 = v25;
        if (v109)
        {
          uint64_t v110 = (uint8_t *)swift_slowAlloc();
          v225 = (uint64_t (*)(void))swift_slowAlloc();
          uint64_t v230 = v225;
          *(_DWORD *)uint64_t v110 = 136315138;
          Class v228 = v74;
          uint64_t v111 = sub_1000E3D60();
          uint64_t v229 = sub_100135190(v111, v112, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100210FAC(v81, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "Received Access Key Changed Message - %s", v110, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100210FAC(v81, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        }

        sub_100210F44(v224, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        uint64_t v132 = Logger.logObject.getter();
        os_log_type_t v133 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v132, v133))
        {
          uint64_t v134 = (uint8_t *)swift_slowAlloc();
          Class v228 = (uint64_t (*)(void))swift_slowAlloc();
          uint64_t v230 = v228;
          *(_DWORD *)uint64_t v134 = 136315138;
          v227 = (char *)(v134 + 4);
          type metadata accessor for URL();
          sub_1002110C8((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
          uint64_t v135 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v229 = sub_100135190(v135, v136, (uint64_t *)&v230);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100210FAC((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          _os_log_impl((void *)&_mh_execute_header, v132, v133, "Share URL - %s", v134, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100210FAC((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        }

        if (qword_100320D00 != -1) {
          swift_once();
        }
        uint64_t v160 = qword_10033EA48;
        uint64_t v161 = *(void *)(qword_10033EA48 + 16);
        uint64_t v162 = v194;
        if (!v161)
        {
LABEL_76:
          uint64_t v169 = v198;
          sub_100210F44(v224, v198, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          uint64_t v170 = Logger.logObject.getter();
          os_log_type_t v171 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v170, v171))
          {
            uint64_t v172 = (uint8_t *)swift_slowAlloc();
            uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
            *(_DWORD *)uint64_t v172 = 136315138;
            uint64_t v173 = v169 + *(int *)(v162 + 24);
            uint64_t v174 = (uint64_t *)(v173 + *(int *)(type metadata accessor for CloudShareInfo() + 20));
            uint64_t v175 = *v174;
            unint64_t v176 = v174[1];
            swift_bridgeObjectRetain();
            uint64_t v229 = sub_100135190(v175, v176, (uint64_t *)&v230);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100210FAC(v169, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
            _os_log_impl((void *)&_mh_execute_header, v170, v171, "Invalid container ID received %s", v172, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100210FAC(v169, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          }

          sub_100210FAC(v224, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
          return;
        }
        uint64_t v163 = *(int *)(v194 + 24);
        uint64_t v164 = (uint64_t *)(v224 + v163 + *(int *)(type metadata accessor for CloudShareInfo() + 20));
        uint64_t v165 = *v164;
        uint64_t v166 = v164[1];
        uint64_t v167 = (void *)(v160 + 40);
        while (1)
        {
          BOOL v168 = *(v167 - 1) == v165 && *v167 == v166;
          if (v168 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          v167 += 2;
          if (!--v161) {
            goto LABEL_76;
          }
        }
        uint64_t v188 = *sub_100008EF8((void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler), *(void *)(v5+ OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler+ 24));
        uint64_t v178 = v224;
        uint64_t v179 = v210;
        uint64_t v180 = (uint64_t)v209;
        (*(void (**)(char *, uint64_t, uint64_t))(v210 + 16))(v209, v224 + *(int *)(v162 + 20), v221);
        Class v228 = (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage;
        uint64_t v189 = (uint64_t)v200;
        sub_100210F44(v178, (uint64_t)v200, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        unint64_t v190 = (*(unsigned __int8 *)(v222 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80);
        unint64_t v191 = (v199 + v190 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v184 = swift_allocObject();
        *(void *)(v184 + 16) = v188;
        sub_100211060(v189, v184 + v190, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
        uint64_t v192 = (void *)(v184 + v191);
        unint64_t v193 = (void *)(v184 + ((v191 + 23) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v192 = 0;
        v192[1] = 0;
        uint64_t v187 = v226;
        *unint64_t v193 = v226;
        v193[1] = a4;
        swift_bridgeObjectRetain();
        swift_retain();
LABEL_80:
        sub_1001ADF40(v180, v187, a4, (uint64_t)sub_100210CF8, v184);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v180, v221);
        sub_100210FAC(v178, v228);
        break;
      case 3u:
        uint64_t v89 = v220;
        sub_10020E028(v220);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t (*)(void)))(v219 + 48))(v89, 1, v10) != 1)
        {
          Class v228 = v10;
          uint64_t v91 = v206;
          sub_100211060(v89, v206, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
          uint64_t v113 = v204;
          sub_100210F44(v91, v204, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
          uint64_t v114 = Logger.logObject.getter();
          os_log_type_t v115 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v114, v115))
          {
            uint64_t v116 = (uint8_t *)swift_slowAlloc();
            uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
            *(_DWORD *)uint64_t v116 = 136315138;
            uint64_t v117 = sub_1000DB9CC();
            uint64_t v229 = sub_100135190(v117, v118, (uint64_t *)&v230);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100210FAC(v113, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Received Beneficiary Removed Message - %s", v116, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100210FAC(v113, (uint64_t (*)(void))type metadata accessor for BeneficiaryRemovedMessage);
          }

          uint64_t v137 = sub_100008EF8((void *)(v5+ OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_beneficiaryRemovedMessageHandler), *(void *)(v5+ OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_beneficiaryRemovedMessageHandler+ 24));
          sub_100008EF8((void *)(*v137 + 16), *(void *)(*v137 + 40));
          uint64_t v138 = v210;
          uint64_t v139 = (uint64_t)v209;
          uint64_t v140 = v221;
          (*(void (**)(char *, uint64_t, uint64_t))(v210 + 16))(v209, v91 + *((int *)v228 + 5), v221);
          uint64_t v141 = swift_allocObject();
          *(void *)(v141 + 16) = 0;
          *(void *)(v141 + 24) = 0;
          uint64_t v142 = swift_allocObject();
          *(void *)(v142 + 16) = sub_100210CB4;
          *(void *)(v142 + 24) = v141;
          swift_retain();
          sub_1001D85FC(v139, (uint64_t)sub_1000D9CC0, v142);
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v139, v140);
          uint64_t v125 = type metadata accessor for BeneficiaryRemovedMessage;
          goto LABEL_51;
        }
        sub_100006574(v89, &qword_10032CF98);
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v83, v84)) {
          goto LABEL_28;
        }
        id v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v85 = 0;
        uint64_t v86 = "Unable to decode Beneficiary Removed message";
        goto LABEL_27;
      case 4u:
        uint64_t v90 = v213;
        sub_10020D71C(v213);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v90, 1, v212) != 1)
        {
          uint64_t v91 = v201;
          sub_100211060(v90, v201, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
          uint64_t v119 = v207;
          sub_100210F44(v91, v207, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
          uint64_t v120 = Logger.logObject.getter();
          os_log_type_t v121 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v120, v121))
          {
            uint64_t v122 = (uint8_t *)swift_slowAlloc();
            uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
            *(_DWORD *)uint64_t v122 = 136315138;
            uint64_t v123 = sub_1001FABF8();
            uint64_t v229 = sub_100135190(v123, v124, (uint64_t *)&v230);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100210FAC(v207, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
            _os_log_impl((void *)&_mh_execute_header, v120, v121, "Received Inheritance invitation message - %s", v122, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100210FAC(v119, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationMessage);
          }

          sub_100008EF8((void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationHandler), *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationHandler + 24));
          sub_1002489F0(v91, v226, a4, 0, 0);
          uint64_t v125 = type metadata accessor for InheritanceInvitationMessage;
          goto LABEL_51;
        }
        sub_100006574(v90, (uint64_t *)&unk_10032CFB0);
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v83, v84)) {
          goto LABEL_28;
        }
        id v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v85 = 0;
        uint64_t v86 = "Unable to decode Inheritance invitation!";
        goto LABEL_27;
      case 5u:
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v83, v84)) {
          goto LABEL_28;
        }
        id v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v85 = 0;
        uint64_t v86 = "Failed to decode data, unable to process message";
        goto LABEL_27;
      default:
        uint64_t v82 = v216;
        sub_10020DA20(v216);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v82, 1, v215) != 1)
        {
          uint64_t v91 = v203;
          sub_100211060(v82, v203, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
          uint64_t v92 = v208;
          sub_100210F44(v91, v208, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
          char v93 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v93, v94))
          {
            unint64_t v95 = (uint8_t *)swift_slowAlloc();
            uint64_t v230 = (uint64_t (*)(void))swift_slowAlloc();
            *(_DWORD *)unint64_t v95 = 136315138;
            uint64_t v96 = sub_1002057D0();
            uint64_t v229 = sub_100135190(v96, v97, (uint64_t *)&v230);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100210FAC(v208, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "Received Inheritance invitation response message - %s", v95, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_100210FAC(v92, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationResponseMessage);
          }

          sub_100008EF8((void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationResponseHandler), *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationResponseHandler + 24));
          sub_100162ACC(v91, v226, a4, 0, 0, 0);
          uint64_t v125 = type metadata accessor for InheritanceInvitationResponseMessage;
LABEL_51:
          sub_100210FAC(v91, (uint64_t (*)(void))v125);
          return;
        }
        sub_100006574(v82, &qword_10032CFA8);
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v83, v84)) {
          goto LABEL_28;
        }
        id v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v85 = 0;
        uint64_t v86 = "Unable to decode Inheritance invitation response";
        goto LABEL_27;
    }
  }
  else
  {
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      id v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v85 = 0;
      uint64_t v86 = "Not logged in to AppleAccount, unable to process message.";
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v83, v84, v86, v85, 2u);
      swift_slowDealloc();
    }
LABEL_28:
  }
}

uint64_t sub_100210C74()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100210CB4(uint64_t a1)
{
  return sub_100263E5C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100210CBC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100210D00()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceAccessKeyMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v4 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v5 + v1[8];
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = type metadata accessor for CloudShareInfo();
  swift_bridgeObjectRelease();

  if (*(void *)(v0 + v4)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100210E90(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceAccessKeyMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = (uint64_t *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];

  return sub_1001ADA20(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100210F44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100210FAC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10021100C()
{
  unint64_t result = qword_10032CFE8;
  if (!qword_10032CFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032CFE8);
  }
  return result;
}

uint64_t sub_100211060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002110C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InheritanceMessageProcessor.Message(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002111DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageProcessor.Message()
{
  return &type metadata for InheritanceMessageProcessor.Message;
}

unint64_t sub_100211214(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10021100C();
  unint64_t result = sub_100211244();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100211244()
{
  unint64_t result = qword_10032D028;
  if (!qword_10032D028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D028);
  }
  return result;
}

void *sub_100211298(void *a1)
{
  uint64_t v3 = sub_100009F04(&qword_10032D030);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100008EF8(a1, a1[3]);
  sub_100211404();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_100008EA8((uint64_t)a1);
  }
  else
  {
    sub_1000DC190();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = (void *)v10[15];
    sub_100008EA8((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_100211404()
{
  unint64_t result = qword_10032D038;
  if (!qword_10032D038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D038);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InheritanceMessageProcessor.Message.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002114F4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageProcessor.Message.CodingKeys()
{
  return &type metadata for InheritanceMessageProcessor.Message.CodingKeys;
}

unint64_t sub_100211530()
{
  unint64_t result = qword_10032D058;
  if (!qword_10032D058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D058);
  }
  return result;
}

unint64_t sub_100211588()
{
  unint64_t result = qword_10032D060;
  if (!qword_10032D060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D060);
  }
  return result;
}

unint64_t sub_1002115E0()
{
  unint64_t result = qword_10032D068;
  if (!qword_10032D068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D068);
  }
  return result;
}

void sub_100211634()
{
  if (qos_class_self() >= QOS_CLASS_USER_INITIATED) {
    [v0 setQualityOfService:25];
  }
  id v1 = [v0 configuration];
  if (!v1)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = v1;
  [v1 setAutomaticallyRetryNetworkFailures:0];

  id v3 = [v0 configuration];
  if (!v3)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v4 = v3;
  [v3 setDiscretionaryNetworkBehavior:0];
}

void *sub_1002116FC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  id v3 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = _swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_100228924(0, v7, 0);
      id v3 = _swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_100009F04(&qword_100326D20);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_1002A9C00;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        uint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_100228924(v19 > 1, v20 + 1, 1);
          id v3 = v29;
        }
        v3[2] = v20 + 1;
        uint64_t v21 = &v3[2 * v20];
        v21[4] = v2;
        uint64_t v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t Data.hash<A>(using:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness, v1);
  sub_1000F4C68();
  static HashFunction.hash<A>(data:)();
  swift_getAssociatedConformanceWitness();
  return Data.init<A>(_:)();
}

uint64_t sub_100211BA8(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100009F04(&qword_10032D088);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v38, (uint64_t)&v41);
    sub_100008EF8(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    sub_100008EA8((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_100006574((uint64_t)v38, &qword_10032D090);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      int64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      int64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_100213CA0(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_100213D04(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin(*(void *)&v38[0], v12);
  unint64_t v13 = (unint64_t)sub_10021342C((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1002145D0);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1002133B0(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1002133B0(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_1000196A0(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_1000196A0((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_1002120D8(uint64_t a1, unint64_t a2)
{
  void v28[3] = &type metadata for Data;
  v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_100008EF8(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_100013140(a1, a2);
      sub_100013140(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      sub_100256380(v8, v13, &v27);
      sub_100013198(v5, v6);
LABEL_27:
      sub_100013198(a1, a2);
      uint64_t v24 = v27;
      sub_100008EA8((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_100013140(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        BOOL v23 = v22;
      }
      else {
        BOOL v23 = 0;
      }
      sub_100256380(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_100013140(a1, a2);
      int64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_100013140(a1, a2);
      int64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_100256380(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t static Data.randomBytes(count:)(size_t a1)
{
  return sub_100213DCC(a1);
}

uint64_t Data.encrypt(using:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v59 = a3;
  unint64_t v60 = a4;
  uint64_t v58 = a5;
  uint64_t v8 = sub_100009F04(&qword_10032D070);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v57 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v64 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v16);
  BOOL v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SymmetricKey();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  BOOL v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v25) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      uint64_t v25 = (int)v25;
LABEL_6:
      if (v25 == 16) {
        goto LABEL_14;
      }
      if (v24)
      {
        if (v24 == 1)
        {
          LODWORD(v29) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v29 = (int)v29;
            goto LABEL_13;
          }
          goto LABEL_20;
        }
        uint64_t v31 = *(void *)(a1 + 16);
        uint64_t v30 = *(void *)(a1 + 24);
        BOOL v28 = __OFSUB__(v30, v31);
        uint64_t v29 = v30 - v31;
        if (v28)
        {
LABEL_21:
          __break(1u);
          JUMPOUT(0x1002128A0);
        }
      }
      else
      {
        uint64_t v29 = BYTE6(a2);
      }
LABEL_13:
      if (v29 != 32)
      {
LABEL_16:
        sub_100213F14();
        swift_allocError();
        *uint64_t v35 = 10;
        return swift_willThrow();
      }
LABEL_14:
      uint64_t v62 = a1;
      unint64_t v63 = a2;
      sub_100013140(a1, a2);
      SymmetricKey.init<A>(data:)();
      uint64_t v32 = sub_100213DCC(0x10uLL);
      if (v5) {
        return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      }
      uint64_t v36 = v32;
      unint64_t v37 = v33;
      uint64_t v62 = v32;
      unint64_t v63 = v33;
      sub_100013140(v32, v33);
      unint64_t v55 = sub_1000F4C68();
      AES.GCM.Nonce.init<A>(data:)();
      uint64_t v53 = v36;
      unint64_t v54 = v37;
      uint64_t v38 = v61;
      uint64_t v62 = v59;
      unint64_t v63 = v60;
      uint64_t v39 = v64;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v11, v18, v61);
      uint64_t v40 = v39;
      uint64_t v41 = v38;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v11, 0, 1, v38);
      static AES.GCM.seal<A>(_:using:nonce:)();
      sub_100006574((uint64_t)v11, &qword_10032D070);
      uint64_t v42 = AES.GCM.SealedBox.tag.getter();
      unint64_t v60 = v43;
      uint64_t v44 = AES.GCM.SealedBox.ciphertext.getter();
      uint64_t v46 = sub_1002120D8(v44, v45);
      uint64_t v59 = v47;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v15, v57);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v41);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      uint64_t v48 = v58;
      unint64_t v49 = v54;
      *uint64_t v58 = v53;
      v48[1] = v49;
      unint64_t v50 = v60;
      v48[2] = v42;
      v48[3] = v50;
      uint64_t v51 = v59;
      uint64_t v48[4] = v46;
      v48[5] = v51;
      return result;
    case 2uLL:
      uint64_t v27 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      BOOL v28 = __OFSUB__(v26, v27);
      uint64_t v25 = v26 - v27;
      if (!v28) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v25 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t EncryptedData.decrypt(using:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = type metadata accessor for SymmetricKey();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v23) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      uint64_t v23 = (int)v23;
LABEL_6:
      if (v23 == 16) {
        goto LABEL_14;
      }
      if (v22)
      {
        if (v22 == 1)
        {
          LODWORD(v27) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v27 = (int)v27;
            goto LABEL_13;
          }
          goto LABEL_21;
        }
        uint64_t v29 = *(void *)(a1 + 16);
        uint64_t v28 = *(void *)(a1 + 24);
        BOOL v26 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (v26)
        {
LABEL_22:
          __break(1u);
          JUMPOUT(0x100212D38);
        }
      }
      else
      {
        uint64_t v27 = BYTE6(a2);
      }
LABEL_13:
      if (v27 != 32)
      {
LABEL_16:
        sub_100213F14();
        swift_allocError();
        unsigned char *v31 = 10;
        swift_willThrow();
        return a1;
      }
LABEL_14:
      *(void *)&long long v39 = a1;
      *((void *)&v39 + 1) = a2;
      sub_100013140(a1, a2);
      SymmetricKey.init<A>(data:)();
      long long v42 = *v2;
      long long v39 = *v2;
      sub_100213F68((uint64_t)&v42);
      a1 = sub_1000F4C68();
      uint64_t v30 = v43;
      AES.GCM.Nonce.init<A>(data:)();
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      }
      else
      {
        uint64_t v43 = v17;
        (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v13, v16, v37);
        long long v32 = v2[2];
        long long v38 = v2[1];
        long long v39 = v32;
        long long v40 = v2[1];
        long long v41 = v32;
        sub_100213F68((uint64_t)&v41);
        sub_100213F68((uint64_t)&v40);
        AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
        a1 = static AES.GCM.open(_:using:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v37);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v43);
      }
      return a1;
    case 2uLL:
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v24 = *(void *)(a1 + 24);
      BOOL v26 = __OFSUB__(v24, v25);
      uint64_t v23 = v24 - v25;
      if (!v26) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v23 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t CryptoError.rawValue.getter(char a1)
{
  return qword_1002B1888[a1];
}

BOOL sub_100212D60(char *a1, char *a2)
{
  return qword_1002B1888[*a1] == qword_1002B1888[*a2];
}

Swift::Int sub_100212D84()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B1888[v1]);
  return Hasher._finalize()();
}

void sub_100212DD4()
{
  Hasher._combine(_:)(qword_1002B1888[*v0]);
}

Swift::Int sub_100212E0C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002B1888[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100212E58@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100212E84(void *a1@<X8>)
{
  *a1 = qword_1002B1888[*v1];
}

uint64_t sub_100212E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10021465C();
  unint64_t v5 = sub_10000D870();

  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t Data.hexadecimalString.getter(uint64_t a1, unint64_t a2)
{
  sub_1002116FC(a1, a2);
  sub_100009F04((uint64_t *)&unk_100328450);
  sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t EncryptedData.init(initializationVector:tag:cipherText:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t Data.hmac<A>(key:using:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v18 = a5;
  uint64_t v8 = type metadata accessor for HashedAuthenticationCode();
  __chkstk_darwin(v8, v9);
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1;
  unint64_t v20 = a2;
  sub_100013140(a1, a2);
  SymmetricKey.init<A>(data:)();
  uint64_t v19 = a4;
  unint64_t v20 = v18;
  sub_1000F4C68();
  static HMAC.authenticationCode<A>(for:using:)();
  swift_getWitnessTable();
  uint64_t v15 = Data.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

uint64_t EncryptedData.initializationVector.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100013140(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t EncryptedData.tag.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100013140(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t EncryptedData.cipherText.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100013140(v1, *(void *)(v0 + 40));
  return v1;
}

double EncryptedData.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100213F98(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t EncryptedData.encode(to:)(void *a1)
{
  sub_100008EF8(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_1000084BC((uint64_t)v3, v4);
  sub_1000131F0();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    sub_1000084BC((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    sub_1000084BC((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return sub_100008EA8((uint64_t)v3);
}

uint64_t sub_100213398(void *a1)
{
  return EncryptedData.encode(to:)(a1);
}

uint64_t sub_1002133B0(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

char *sub_10021342C(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_1002A9C60;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      double result = sub_100213AA0((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      double result = sub_100213AA0(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      double result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      double result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        double result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_100213730(uint64_t *a1, size_t count)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1002A9C60;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_13;
      }
      if (v9 < (int)v3) {
        goto LABEL_22;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v3, __DataStorage._offset.getter())) {
        goto LABEL_23;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v8 = v16;
LABEL_13:
      if (v9 < (int)v3) {
        goto LABEL_20;
      }
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_25;
      }
      uint64_t v18 = v17;
      uint64_t v19 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v3, v19)) {
        goto LABEL_21;
      }
      unint64_t v20 = (void *)(v18 + (int)v3 - v19);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes(kSecRandomDefault, count, v20);
      unint64_t v15 = v8 | 0x4000000000000000;
      *a1 = v3;
      break;
    case 2uLL:
      *(void *)&long long bytes = *a1;
      *((void *)&bytes + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v10 = *(void *)(bytes + 16);
      uint64_t v11 = __DataStorage._bytes.getter();
      if (!v11)
      {
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x100213A20);
      }
      uint64_t v12 = v11;
      uint64_t v13 = __DataStorage._offset.getter();
      if (__OFSUB__(v10, v13))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
      }
      uint64_t v14 = (void *)(v12 + v10 - v13);
      __DataStorage._length.getter();
      uint64_t result = SecRandomCopyBytes(kSecRandomDefault, count, v14);
      unint64_t v15 = *((void *)&bytes + 1) | 0x8000000000000000;
      *a1 = bytes;
      break;
    case 3uLL:
      *(void *)((char *)&bytes + 7) = 0;
      *(void *)&long long bytes = 0;
      return SecRandomCopyBytes(kSecRandomDefault, count, &bytes);
    default:
      LOWORD(bytes) = *a1;
      BYTE2(bytes) = BYTE2(v3);
      BYTE3(bytes) = BYTE3(v3);
      BYTE4(bytes) = BYTE4(v3);
      BYTE5(bytes) = BYTE5(v3);
      BYTE6(bytes) = BYTE6(v3);
      BYTE7(bytes) = HIBYTE(v3);
      WORD4(bytes) = v2;
      BYTE10(bytes) = BYTE2(v2);
      BYTE11(bytes) = BYTE3(v2);
      BYTE12(bytes) = BYTE4(v2);
      BYTE13(bytes) = BYTE5(v2);
      BYTE14(bytes) = BYTE6(v2);
      uint64_t result = SecRandomCopyBytes(kSecRandomDefault, count, &bytes);
      unint64_t v7 = DWORD2(bytes) | ((unint64_t)BYTE12(bytes) << 32) | ((unint64_t)BYTE13(bytes) << 40) | ((unint64_t)BYTE14(bytes) << 48);
      *a1 = bytes;
      a1[1] = v7;
      return result;
  }
  a1[1] = v15;
  return result;
}

void *sub_100213A30(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_100213AA0(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_100213B54@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100213BE0(uint64_t a1)
{
  uint64_t v9 = sub_100009F04(&qword_10032D098);
  uint64_t v10 = sub_100009610(&qword_10032D0A0, &qword_10032D098);
  v8[0] = a1;
  unint64_t v2 = sub_100008EF8(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_100256380(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100008EA8((uint64_t)v8);
  return v5;
}

unsigned char *sub_100213CA0(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_1002566B4(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_100256778((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_1002567F4((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_100213D04(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  if ((unint64_t)(a1 + 4320) > 0x14) {
    return 13;
  }
  else {
    return asc_1002A073E[a1 + 4320];
  }
}

uint64_t sub_100213DCC(size_t a1)
{
  uint64_t v12 = sub_100213D04(a1);
  unint64_t v13 = v3;
  int v4 = sub_100213730(&v12, a1);
  if (v1) {
    return sub_100013198(v12, v13);
  }
  int v5 = v4;
  if (v4)
  {
    static os_log_type_t.error.getter();
    sub_100009F04(&qword_100326D20);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1002A9C00;
    *(void *)(v6 + 56) = &type metadata for Int32;
    *(void *)(v6 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v6 + 32) = v5;
    sub_100104D3C();
    uint64_t v7 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    char v8 = _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(v5);
    sub_100213F14();
    swift_allocError();
    if (v8 == 13) {
      char v10 = 8;
    }
    else {
      char v10 = v8;
    }
    *uint64_t v9 = v10;
    swift_willThrow();
    return sub_100013198(v12, v13);
  }
  return v12;
}

unint64_t sub_100213F14()
{
  unint64_t result = qword_10032D078;
  if (!qword_10032D078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D078);
  }
  return result;
}

uint64_t sub_100213F68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100213F98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100008EF8(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return sub_100008EA8((uint64_t)a1);
  }
  sub_1000084BC((uint64_t)v9, v10);
  sub_1000130EC();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_1000084BC((uint64_t)v9, v10);
  sub_100013140(v7, v8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_1000084BC((uint64_t)v9, v10);
  uint64_t v11 = v7;
  sub_100013140(v7, v8);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  sub_100013140(v7, v8);
  sub_100008EA8((uint64_t)v9);
  sub_100013140(v7, v8);
  uint64_t v5 = v11;
  sub_100013140(v11, v8);
  sub_100013140(v7, v8);
  sub_100013198(v7, v8);
  sub_100013198(v5, v8);
  sub_100013198(v7, v8);
  sub_100008EA8((uint64_t)a1);
  sub_100013198(v7, v8);
  sub_100013198(v5, v8);
  uint64_t result = sub_100013198(v7, v8);
  *a2 = v7;
  a2[1] = v8;
  a2[2] = v5;
  a2[3] = v8;
  a2[4] = v7;
  a2[5] = v8;
  return result;
}

unint64_t sub_100214224()
{
  unint64_t result = qword_10032D080;
  if (!qword_10032D080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D080);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CryptoError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100214344);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoError()
{
  return &type metadata for CryptoError;
}

uint64_t destroy for EncryptedData(uint64_t *a1)
{
  sub_100013198(*a1, a1[1]);
  sub_100013198(a1[2], a1[3]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_100013198(v2, v3);
}

uint64_t *initializeWithCopy for EncryptedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_100013140(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_100013140(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for EncryptedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100013198(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100013140(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100013198(v10, v11);
  uint64_t v13 = a2[4];
  unint64_t v12 = a2[5];
  sub_100013140(v13, v12);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_100013198(v14, v15);
  return a1;
}

uint64_t *assignWithTake for EncryptedData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100013198(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100013198(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100013198(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EncryptedData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EncryptedData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedData()
{
  return &type metadata for EncryptedData;
}

void *sub_1002145D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_100213A30((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10021463C, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_10021463C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100213B54(a1, a2);
}

unint64_t sub_10021465C()
{
  unint64_t result = qword_10032D0A8;
  if (!qword_10032D0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D0A8);
  }
  return result;
}

uint64_t sub_1002146B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E700);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "fetchSuggestedCustodians for now fetching megadome and family.", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = 0;
  uint64_t v15[3] = 0;
  v15[4] = v3;
  void v15[5] = a1;
  v15[6] = a2;
  swift_retain();
  swift_retain();
  sub_100225A54((uint64_t)v9, (uint64_t)&unk_10032D170, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_100214888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = type metadata accessor for URL();
  v6[8] = v7;
  v6[9] = *(void *)(v7 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  return _swift_task_switch(sub_10021495C, 0, 0);
}

uint64_t sub_10021495C()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = v1[12];
  type metadata accessor for CustodianMegadomeSuggester();
  uint64_t inited = swift_initStackObject();
  v0[12] = inited;
  *(void *)(inited + 16) = v2;
  uint64_t v4 = v1 + 2;
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  sub_100008EF8(v4, v5);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 32) + **(int **)(v6 + 32));
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[13] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100214A94;
  return v9(v5, v6);
}

uint64_t sub_100214A94(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100214B94, 0, 0);
}

uint64_t sub_100214B94()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  sub_100008EF8(v1 + 2, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100214C98;
  return v6(v2, v3);
}

uint64_t sub_100214C98(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = *v1;
  *(void *)(v2 + 128) = a1;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 136) = v3;
  *uint64_t v3 = v5;
  v3[1] = sub_100214DC4;
  return sub_1001B0D08();
}

uint64_t sub_100214DC4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100214EC4, 0, 0);
}

uint64_t sub_100214EC4()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[7];
  uint64_t v17 = v0[9];
  uint64_t v18 = v0[8];
  uint64_t v8 = v0[5];
  uint64_t v15 = v0[6];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = sub_10021535C(v1, v2, v4);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  sub_10028C9E8((unint64_t)v9);
  uint64_t v10 = sub_100008EF8((void *)(v8 + 56), *(void *)(v8 + 80));
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v11[2] = v8;
  v11[3] = v3;
  v11[4] = v15;
  v11[5] = v7;
  uint64_t v16 = sub_100008EF8((void *)(*v10 + 16), *(void *)(*v10 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  os_log_type_t v12 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v12(v6, v18);
  sub_100008EF8((void *)(*v16 + 16), *(void *)(*v16 + 40));
  sub_1000B3744(v5, (uint64_t)sub_100215538, (uint64_t)v11);
  v12(v5, v18);
  swift_release();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1002150F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    sub_100007850(a1, 0);
    unint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_10020D128(v7, a1);
    sub_100007844(a1, 0);
    swift_bridgeObjectRelease();
    a5((uint64_t)v8, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002151E0()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianSuggestionsManager()
{
  return self;
}

uint64_t sub_10021524C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100215294(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025248;
  return sub_100214888(a1, v4, v5, v6, v7, v8);
}

void *sub_10021535C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v15 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(a1 + 56);
    do
    {
      uint64_t v10 = *(v9 - 2);
      uint64_t v11 = *(v9 - 1);
      uint64_t v12 = *v9;
      v14[0] = *(v9 - 3);
      v14[1] = v10;
      v14[2] = v11;
      _OWORD v14[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001AFB4C((uint64_t)v14, a3, &v13);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v9 += 4;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    return (void *)v15;
  }
  return result;
}

uint64_t sub_1002154F0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100215538(uint64_t a1, char a2)
{
  return sub_1002150F4(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_100215548()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectRelease();
  if (!Strong)
  {
    uint64_t v8 = sub_100009F04((uint64_t *)&unk_10032A640);
    Dependency.init(dependencyId:config:)();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_100007288(v9, (uint64_t)qword_10033E700);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    int v13 = v12;
    BOOL v14 = os_log_type_enabled(v11, v12);
    uint64_t v37 = v3;
    if (v14)
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v35 = v10;
      uint64_t v16 = v15;
      uint64_t v34 = swift_slowAlloc();
      v38[0] = v34;
      *(_DWORD *)uint64_t v16 = 136315394;
      int v33 = v13;
      Dependency.wrappedValue.getter();
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v36 = v8;
      uint64_t v39 = sub_100135190(v17, v18, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      v32[1] = v16 + 14;
      id v19 = [self callStackSymbols];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = Array.description.getter();
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_100135190(v20, v22, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v33, "Sync delegate found nil. Obtaining delegate from dependency registry: %s - %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    Dependency.wrappedValue.getter();
    sub_100009F04(&qword_10032D2A8);
    if (swift_dynamicCast()) {
      uint64_t v23 = v38[1];
    }
    else {
      uint64_t v23 = 0;
    }
    *(void *)(v1 + 24) = v23;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    swift_retain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      BOOL v26 = (uint8_t *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v26 = 136315138;
      uint64_t v36 = v2;
      uint64_t v27 = swift_unknownObjectWeakLoadStrong();
      uint64_t v28 = *(void *)(v1 + 24);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_100009F04(&qword_10032D2B0);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v39 = sub_100135190(v29, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "New sync delegete set: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v36);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v2);
    }
  }
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100215A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (a3)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_10032B480);
      uint64_t v10 = String.init<A>(describing:)();
      sub_100135190(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error updating zone - %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v16 = a3;
  }
  else
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E718);
    int v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Record zone is created.", v15, 2u);
      swift_slowDealloc();
    }

    uint64_t v16 = 0;
  }
  return a4(v16);
}

void sub_100215CD0(void *a1, void *a2)
{
  uint64_t v2 = (void *)sub_1001A8E98(a1);
  uint64_t v4 = v3;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E718);
  id v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  id v28 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v6;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    unint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    id v11 = v9;
    sub_100009F04(&qword_10032D2A0);
    uint64_t v12 = String.init<A>(describing:)();
    sub_100135190(v12, v13, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Client record is - %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = v4;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    unint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v18 = v4;
    id v19 = v14;
    sub_100009F04(&qword_10032D2A0);
    uint64_t v20 = String.init<A>(describing:)();
    sub_100135190(v20, v21, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Server record is - %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v22 = v28;
    if (!v18) {
      goto LABEL_13;
    }
  }
  else
  {

    unint64_t v22 = v28;
    if (!v4) {
      goto LABEL_13;
    }
  }
  id v23 = v14;
  if (sub_100215548())
  {
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1002AB070;
    *(void *)(v24 + 32) = v23;
    unint64_t v29 = v24;
    specialized Array._endMutation()();
    unint64_t v25 = v29;
    id v26 = v23;
    sub_10015AEB8(a2, v25);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    return;
  }

LABEL_13:
}

void sub_100216084(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    swift_errorRetain();
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v8 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "CK accountInfo call returned an error %@. This will result in storing CK Records in non manatee container.", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a3(a2, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else if (a1)
  {
    id v23 = a1;
    if (([v23 supportsDeviceToDeviceEncryption] & 1) != 0
      && [v23 hasValidCredentials])
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100007288(v10, (uint64_t)qword_10033E748);
      id v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        unint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Account and device are valid.", v13, 2u);
        swift_slowDealloc();
      }

      uint64_t v14 = 1;
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100007288(v15, (uint64_t)qword_10033E748);
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Account and device are invalid.", v18, 2u);
        swift_slowDealloc();
      }

      uint64_t v14 = 0;
    }
    a3(v14, 0);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "CK accountInfo call returned no error nor any account info.", v22, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    a3((uint64_t)v24, 1);
  }
}

uint64_t sub_100216554()
{
  sub_1000348FC(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitStore()
{
  return self;
}

void sub_1002165B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  id v7 = objc_allocWithZone((Class)CKDatabaseSubscription);
  swift_retain();
  id v8 = [v7 init];
  id v9 = [objc_allocWithZone((Class)CKNotificationInfo) init];
  [v9 setShouldSendContentAvailable:1];
  [v8 setNotificationInfo:v9];
  sub_100216BC0();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002AB070;
  *(void *)(v10 + 32) = v8;
  uint64_t v15 = (void *)v10;
  specialized Array._endMutation()();
  id v11 = v8;
  v17.value._rawValue = v15;
  v17.is_nil = 0;
  Class isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v17, v18).super.super.super.super.isa;
  os_log_type_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = sub_100216B80;
  void v12[4] = v6;
  id v13 = a3;
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
  sub_100211634();
  [v13 addOperation:isa];
}

uint64_t sub_100216764(uint64_t a1, char a2, void *a3, void (*a4)(void, void))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E718);
    id v17 = a3;
    Swift::OpaquePointer_optional v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v26 = a4;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      [v17 scope];
      id v21 = (id)CKDatabaseScopeString();
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      sub_100135190(v22, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a4 = v26;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create CKSubscription for database: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_errorRetain();
    a4(a1, 1);
    sub_100080A98(a1, 1);
    return sub_100080A98(a1, 1);
  }
  else
  {
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E730);
    id v7 = a3;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      [v7 scope];
      id v11 = (id)CKDatabaseScopeString();
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_100135190(v12, v14, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Created CKSubscription for database: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return ((uint64_t (*)(uint64_t, void))a4)(1, 0);
  }
}

uint64_t sub_100216B48()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100216B80(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

unint64_t sub_100216BC0()
{
  unint64_t result = qword_10032D298;
  if (!qword_10032D298)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032D298);
  }
  return result;
}

uint64_t sub_100216C00()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100216C40(uint64_t a1, char a2)
{
  return sub_100216764(a1, a2 & 1, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24));
}

uint64_t sub_100216C50(uint64_t a1, void *a2)
{
  return sub_100216E30(a1, a2, sub_100199B30);
}

uint64_t sub_100216CB0(uint64_t a1, void *a2)
{
  return sub_100216E30(a1, a2, sub_100199B78);
}

uint64_t sub_100216D10(uint64_t a1, void *a2)
{
  return sub_100216E30(a1, a2, sub_100199BC0);
}

uint64_t sub_100216D70(uint64_t a1, void *a2)
{
  return sub_100216E30(a1, a2, sub_100199C08);
}

uint64_t sub_100216DD0(uint64_t a1, void *a2)
{
  return sub_100216E30(a1, a2, sub_100199C50);
}

uint64_t sub_100216E30(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a3(a1);
  if (v13 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = objc_allocWithZone((Class)NSError);
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v14 initWithDomain:v15 code:4 userInfo:0];

    return swift_willThrow();
  }
  else
  {
    uint64_t v17 = v12;
    unint64_t v18 = v13;
    os_log_type_t v19 = *(void **)(v3 + 16);
    uint64_t v28 = v8;
    id v29 = v19;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1002AB070;
    *(void *)(v21 + 32) = a2;
    id v30 = (id)v21;
    specialized Array._endMutation()();
    sub_100219A84();
    id v22 = a2;
    Class v23 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v30 = 0;
    id v24 = [v29 sendMessage:isa destinations:v23 responseIdentifier:0 fireAndForget:0 requiredCapabilities:0 lackingCapabilities:0 error:&v30];

    id v25 = v30;
    if (v24)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      id v26 = v25;
      sub_1000196A0(v17, v18);

      return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v7);
    }
    else
    {
      id v27 = v30;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return sub_1000196A0(v17, v18);
    }
  }
}

uint64_t sub_1002170EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v36 = a3;
  uint64_t v35 = a2;
  uint64_t v6 = sub_100009F04(&qword_100322CE0);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6, v7);
  long long v32 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v29, v9);
  uint64_t v30 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CustodianRecord();
  uint64_t v12 = v11 - 8;
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v11, v15);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008A94(v4 + 56, (uint64_t)&v38);
  sub_100008EF8(&v38, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1 + *(int *)(v12 + 28), v16);
  uint64_t v31 = a1;
  sub_1002199BC(a1, (uint64_t)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v35;
  *(void *)(v22 + 24) = v4;
  sub_100219954((uint64_t)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_retain();
  sub_100239384((uint64_t)v20, (uint64_t)sub_1002185D8, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t result = sub_100008EA8((uint64_t)&v38);
  if (v36)
  {
    sub_100217EC4();
    uint64_t v24 = v30;
    sub_1002199BC(v31, v30, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = v4 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__notificationManager;
    id v26 = v32;
    uint64_t v27 = v33;
    uint64_t v28 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v32, v25, v34);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
    sub_100008EF8(v37, v37[3]);
    sub_1001C1B88((uint64_t)&v38);
    sub_10024F5C4(&v38, 0, 0);
    sub_10004CF70((uint64_t)&v38);
    sub_100219A24(v24, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    return sub_100008EA8((uint64_t)v37);
  }
  return result;
}

void sub_1002174EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v14, &qword_1003235A0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138412290;
      uint64_t v20 = _convertErrorToNSError(_:)();
      v22[1] = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v19 = v20;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error fetching recovery info: %@", v18, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100219954((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v21 = type metadata accessor for CustodianRecord();
    sub_1002177C0((uint64_t)v10, *(void *)(a4 + *(int *)(v21 + 24)), *(void *)(a4 + *(int *)(v21 + 24) + 8), a2 == 1);
    sub_100219A24((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
}

uint64_t sub_1002177C0(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int v44 = a4;
  unint64_t v45 = (void **)a2;
  uint64_t v40 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v40, v6);
  long long v41 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v42 + 64);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v47 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v43 = (uint64_t)&v39 - v14;
  __chkstk_darwin(v13, v15);
  os_log_type_t v17 = (char *)&v39 - v16;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  uint64_t v46 = a1;
  sub_1002199BC(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    v53[0] = v39;
    *(_DWORD *)uint64_t v21 = 136315394;
    type metadata accessor for UUID();
    sub_100219AC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v52[0] = sub_100135190(v22, v23, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100219A24((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v24 = v45;
    v52[0] = sub_100135190((uint64_t)v45, a3, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Sharing custodianship %s records with: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100219A24((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);

    swift_bridgeObjectRelease_n();
    uint64_t v24 = v45;
  }
  uint64_t v25 = v48;
  sub_100008A94(v48 + 96, (uint64_t)v53);
  id v26 = sub_100008EF8(v53, v53[3]);
  uint64_t v27 = v43;
  sub_1002199BC(v46, v43, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_1002199BC(v27, v47, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v28 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v29 = v28 + v9;
  unint64_t v30 = (v28 + v9) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  sub_100219954(v27, v31 + v28, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  int v32 = v44 & 1;
  *(unsigned char *)(v31 + v29) = v32;
  *(void *)(v30 + v31 + 8) = v25;
  uint64_t v33 = (void ***)(v31 + ((v30 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint8_t *v33 = v24;
  v33[1] = (void **)a3;
  sub_100008A94(*v26 + 56, (uint64_t)v51);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v49, (uint64_t)v52);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_10021986C;
    *(void *)(v34 + 24) = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10007AAD8(v46, v24, a3, (void **)3, (uint64_t)sub_100043814, v34);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100008EA8((uint64_t)v52);
    swift_release();
    uint64_t v35 = v47;
  }
  else
  {
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    sub_100006574((uint64_t)v49, (uint64_t *)&unk_10032B4A0);
    type metadata accessor for AACustodianError(0);
    v51[0] = -7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100219AC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v36 = (uint64_t)v41;
    *long long v41 = v52[0];
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = v47;
    sub_10021864C(v36, v47, v32, v48, (uint64_t)v24, a3);
    sub_100006574(v36, &qword_100322948);
    swift_release();
    uint64_t v35 = v37;
  }
  sub_100219A24(v35, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_bridgeObjectRelease();
  swift_release();
  return sub_100008EA8((uint64_t)v53);
}

uint64_t sub_100217EC4()
{
  uint64_t v1 = sub_100009F04(&qword_100325870);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__accountStore, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v6 = [[*(id *)(*sub_100008EF8(v21, v21[3]) + 16) aa_primaryAppleAccount];
  if (v6 && (uint64_t v7 = v6, v8 = objc_msgSend(v6, "aa_altDSID"), v7, v8))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v10)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [self analyticsEventWithName:v11 altDSID:v12 flowID:0];

  uint64_t result = sub_100008EA8((uint64_t)v21);
  if (v13)
  {
    id v15 = v13;
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v15 setObject:isa forKeyedSubscript:kAAFDidSucceed];

    id v17 = objc_allocWithZone((Class)type metadata accessor for AnalyticsRTCReporter());
    id v18 = v15;
    id v19 = [v17 init];
    [objc_msgSend(self, "reporter") sendEvent:v18];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10021817C()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__notificationManager;
  uint64_t v4 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100218280()
{
  return type metadata accessor for AcceptedStatusHandler();
}

uint64_t type metadata accessor for AcceptedStatusHandler()
{
  uint64_t result = qword_10032D2F0;
  if (!qword_10032D2F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002182D4()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1002183CC(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1002170EC(a1, a2, a3);
}

uint64_t sub_1002183F0()
{
  unint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  id v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1002185D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1002174EC(a1, v4, v5, v6);
}

void sub_10021864C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a5;
  uint64_t v82 = a6;
  uint64_t v80 = a4;
  int v79 = a3;
  uint64_t v78 = type metadata accessor for ShareMessageContext(0);
  uint64_t v9 = __chkstk_darwin(v78, v8);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v83 = (uint64_t)&v72 - v14;
  __chkstk_darwin(v13, v15);
  id v17 = (char *)&v72 - v16;
  uint64_t v18 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v22 - 8, v23);
  uint64_t v25 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v29, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v86 = (void *)0xD00000000000002CLL;
    unint64_t v87 = 0x80000001002A0800;
    type metadata accessor for UUID();
    sub_100219AC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v85._uint64_t countAndFlagsBits = 0x7272652068746977;
    v85._object = (void *)0xEB0000000020726FLL;
    uint64_t v31 = (void *)_convertErrorToNSError(_:)();
    id v32 = [v31 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    v36._uint64_t countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);

    swift_bridgeObjectRelease();
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E748);
    uint64_t v39 = (uint64_t)v86;
    unint64_t v38 = v87;
    swift_bridgeObjectRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      v85._uint64_t countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v84 = sub_100135190(v39, v38, &v85._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    swift_errorRelease();
  }
  else
  {
    BOOL v77 = v25;
    sub_100219954((uint64_t)v29, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v75 = type metadata accessor for Logger();
    uint64_t v43 = sub_100007288(v75, (uint64_t)qword_10033E748);
    uint64_t v44 = a2;
    sub_1002199BC(a2, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v74 = v43;
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    os_log_type_t v76 = v17;
    if (v47)
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      uint64_t v86 = (void *)v73;
      *(_DWORD *)uint64_t v48 = 136315138;
      uint64_t v72 = v48 + 4;
      type metadata accessor for UUID();
      sub_100219AC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      v85._uint64_t countAndFlagsBits = sub_100135190(v49, v50, (uint64_t *)&v86);
      uint64_t v44 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100219A24((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Created CKShare for custodianship: %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      id v17 = v76;
      swift_slowDealloc();
    }
    else
    {
      sub_100219A24((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    }

    uint64_t v51 = v44 + *(int *)(v18 + 20);
    uint64_t v52 = type metadata accessor for UUID();
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
    v53(v17, v51, v52);
    uint64_t v54 = v78;
    sub_1002199BC((uint64_t)v77, (uint64_t)&v17[*(int *)(v78 + 20)], (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    v17[*(int *)(v54 + 24)] = v79 & 1;
    sub_100008EF8((void *)(v80 + 16), *(void *)(v80 + 40));
    uint64_t v55 = v83;
    sub_1002199BC((uint64_t)v17, v83, type metadata accessor for ShareMessageContext);
    sub_1002199BC((uint64_t)v17, (uint64_t)v11, type metadata accessor for ShareMessageContext);
    type metadata accessor for ShareMessage(0);
    uint64_t v56 = swift_allocObject();
    *(unsigned char *)(v56 + 16) = 2;
    v53((char *)(v56 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID), (uint64_t)v11, v52);
    sub_1002199BC((uint64_t)&v11[*(int *)(v54 + 20)], v56 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    LOBYTE(v52) = v11[*(int *)(v54 + 24)];
    sub_100219A24((uint64_t)v11, type metadata accessor for ShareMessageContext);
    *(unsigned char *)(v56 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = v52;
    id v57 = objc_allocWithZone((Class)AAMessagingDestination);
    swift_bridgeObjectRetain();
    NSString v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v59 = [v57 initWithHandle:v58];

    if (v59)
    {
      uint64_t v60 = qword_100320B70;
      id v61 = v59;
      if (v60 != -1) {
        swift_once();
      }
      sub_100007288(v75, (uint64_t)qword_10033E700);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      BOOL v64 = os_log_type_enabled(v62, v63);
      uint64_t v65 = (uint64_t)v77;
      if (v64)
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Destination is valid!", v66, 2u);
        swift_slowDealloc();
      }

      sub_100216E30(v56, v61, sub_100199B78);
      uint64_t v67 = (uint64_t)v76;
      sub_100219154(0, v55);
      swift_release();
    }
    else
    {
      uint64_t v68 = Logger.logObject.getter();
      uint64_t v69 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v68, (os_log_type_t)v69))
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "Unable to generate destination from handle.", v70, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      v85._uint64_t countAndFlagsBits = -7004;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100219AC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v71 = v86;
      sub_100219154((uint64_t)v86, v55);
      swift_release();

      uint64_t v67 = (uint64_t)v76;
      uint64_t v65 = (uint64_t)v77;
    }
    sub_100219A24(v55, type metadata accessor for ShareMessageContext);
    sub_100219A24(v67, type metadata accessor for ShareMessageContext);
    sub_100219A24(v65, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  }
}

void sub_100219154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShareMessageContext(0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v28 - v10;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_getErrorValue();
      uint64_t v15 = Error.localizedDescription.getter();
      id v30 = (id)sub_100135190(v15, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v13, "Failed to send CKShare message: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v27 = v29;
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E748);
    sub_1002199BC(a2, (uint64_t)v11, type metadata accessor for ShareMessageContext);
    sub_1002199BC(a2, (uint64_t)v8, type metadata accessor for ShareMessageContext);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      type metadata accessor for URL();
      sub_100219AC4((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      id v30 = (id)sub_100135190(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100219A24((uint64_t)v11, type metadata accessor for ShareMessageContext);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v23 = &v8[*(int *)(v4 + 20)];
      id v30 = *(id *)&v23[*(int *)(type metadata accessor for CloudShareInfo() + 24)];
      id v24 = v30;
      sub_100009F04(&qword_1003236C0);
      uint64_t v25 = String.init<A>(describing:)();
      id v30 = (id)sub_100135190(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100219A24((uint64_t)v8, type metadata accessor for ShareMessageContext);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "CKShare sent with url: %s and token: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100219A24((uint64_t)v11, type metadata accessor for ShareMessageContext);
      sub_100219A24((uint64_t)v8, type metadata accessor for ShareMessageContext);
    }
  }
}

uint64_t sub_10021966C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((v3 + v12) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_10021986C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecoveryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = v1 + v4;
  int v7 = *(unsigned __int8 *)(v1 + v5);
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  unint64_t v9 = (uint64_t *)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  sub_10021864C(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10021991C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100219954(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002199BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100219A24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100219A84()
{
  unint64_t result = qword_100323EE0;
  if (!qword_100323EE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100323EE0);
  }
  return result;
}

uint64_t sub_100219AC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100219B0C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v2 = objc_allocWithZone((Class)UNUserNotificationCenter);
  uint64_t v3 = v0;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 initWithBundleIdentifier:v4];

  *(void *)&v3[OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter] = v5;
  v25.receiver = v3;
  v25.super_class = ObjectType;
  uint64_t v6 = (char *)[v25 init];
  NSString v7 = String._bridgeToObjectiveC()();
  sub_10000850C(0, (unint64_t *)&unk_10032D4F0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  id v10 = [self categoryWithIdentifier:v7 actions:isa intentIdentifiers:v9 options:1];

  uint64_t v11 = OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter;
  uint64_t v12 = *(void **)&v6[OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter];
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002AB070;
  *(void *)(inited + 32) = v10;
  unint64_t v24 = inited;
  specialized Array._endMutation()();
  if (v24 >> 62)
  {
    id v17 = v12;
    id v18 = v10;
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  uint64_t v14 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v15 = v12;
  id v16 = v10;
  if (v14) {
LABEL_3:
  }
    sub_10019D110(v24);
LABEL_5:
  swift_bridgeObjectRelease();
  sub_10000850C(0, &qword_10032D500);
  sub_10021AC18();
  Class v20 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 setNotificationCategories:v20];

  uint64_t v21 = *(void **)&v6[v11];
  [v21 setDelegate:v6];
  id v22 = v21;
  [v22 setWantsNotificationResponsesDelivered];

  return v6;
}

void sub_100219DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v8 - 8);
  uint64_t v53 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v50 = *(void *)(v15 - 8);
  uint64_t v51 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v48 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  id v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  NSString v24 = String._bridgeToObjectiveC()();
  [v23 setTitle:v24];

  NSString v25 = String._bridgeToObjectiveC()();
  [v23 setBody:v25];

  NSString v26 = String._bridgeToObjectiveC()();
  [v23 setCategoryIdentifier:v26];

  id v27 = [self defaultSound];
  [v23 setSound:v27];

  [v23 setInterruptionLevel:1];
  [v23 setShouldBackgroundDefaultAction:1];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  [v23 setDate:isa];

  sub_10024E480(a5);
  Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v23 setUserInfo:v29];

  if (!*(void *)(a5 + 16)) {
    goto LABEL_9;
  }
  sub_1001358B8(0xD000000000000010, 0x800000010029B9E0);
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = (uint64_t)v49;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = v50;
    uint64_t v32 = v51;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v31, 1, v51) != 1)
    {
      uint64_t v35 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v48, v31, v32);
      URL._bridgeToObjectiveC()(v36);
      unint64_t v38 = v37;
      [v23 setDefaultActionURL:v37];

      (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
      if (!*(void *)(a5 + 16)) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
    sub_1000B4848(v31);
  }
  if (!*(void *)(a5 + 16))
  {
LABEL_9:
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v53);
    goto LABEL_10;
  }
LABEL_6:
  sub_1001358B8(0xD000000000000010, 0x800000010029B9C0);
  if ((v34 & 1) == 0) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
LABEL_10:
  id v39 = v23;
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v41 = [self requestWithIdentifier:v40 content:v39 trigger:0];

  uint64_t v42 = *(void **)(v54 + OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter);
  uint64_t v43 = swift_allocObject();
  uint64_t v45 = v55;
  uint64_t v44 = v56;
  *(void *)(v43 + 16) = v55;
  *(void *)(v43 + 24) = v44;
  aBlock[4] = sub_10021A778;
  void aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10025ED44;
  void aBlock[3] = &unk_100301A50;
  os_log_type_t v46 = _Block_copy(aBlock);
  sub_100011D2C(v45);
  swift_release();
  [v42 addNotificationRequest:v41 withCompletionHandler:v46];
  _Block_release(v46);
}

void sub_10021A414(uint64_t a1, void (*a2)(uint64_t))
{
  if (!a1)
  {
LABEL_6:
    if (!a2) {
      return;
    }
    goto LABEL_7;
  }
  swift_errorRetain();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    type metadata accessor for NotificationController();
    sub_100009F04(&qword_10032D4E8);
    uint64_t v8 = String.init<A>(describing:)();
    sub_100135190(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v10 = String.init<A>(describing:)();
    sub_100135190(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - Error posting notification: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    goto LABEL_6;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

  if (!a2) {
    return;
  }
LABEL_7:
  a2(a1);
}

uint64_t type metadata accessor for NotificationController()
{
  return self;
}

uint64_t sub_10021A738()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10021A778(uint64_t a1)
{
  sub_10021A414(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10021A780(void *a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v2 - 8, v3);
  id v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  unint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v34 - v13;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E700);
  id v16 = a1;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = v7;
    id v39 = v16;
    uint64_t v35 = (void *)v20;
    Swift::String v36 = v19;
    uint64_t v37 = v14;
    *(_DWORD *)uint64_t v19 = 138412290;
    id v21 = v16;
    uint64_t v14 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v35 = v16;

    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received notification response: %@", v36, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    uint64_t v7 = v38;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v22 = [v16 notification];
  id v23 = [v22 request];

  id v24 = [v23 content];
  id v25 = [v24 defaultActionURL];

  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    return sub_1000B4848((uint64_t)v5);
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v26(v5, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1) {
    return sub_1000B4848((uint64_t)v5);
  }
  v26(v14, v5, v6);
  id v27 = [self defaultWorkspace];
  if (v27)
  {
    Class v29 = v27;
    URL._bridgeToObjectiveC()(v28);
    uint64_t v31 = v30;
    sub_100220CAC((uint64_t)_swiftEmptyArrayStorage);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v29 openSensitiveURL:v31 withOptions:isa];
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
}

unint64_t sub_10021AC18()
{
  unint64_t result = qword_10032D508;
  if (!qword_10032D508)
  {
    sub_10000850C(255, &qword_10032D500);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032D508);
  }
  return result;
}

void *sub_10021AC80()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8, v1);
  id v346 = (char *)v336 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DependencyRegistry.Entry();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)v336 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v371 = type metadata accessor for DependencyRegistry();
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003224C0);
  uint64_t v9 = type metadata accessor for AnalyticsEventFactory();
  uint64_t v10 = swift_allocObject();
  v7[3] = v9;
  *uint64_t v7 = v10;
  uint64_t v11 = enum case for DependencyRegistry.Entry.exact(_:);
  uint64_t v12 = *(void (**)(uint64_t *, void, uint64_t))(v4 + 104);
  uint64_t v370 = v4 + 104;
  v12(v7, enum case for DependencyRegistry.Entry.exact(_:), v3);
  uint64_t v13 = v12;
  uint64_t v349 = v8;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v14 = *(void (**)(uint64_t *, uint64_t))(v4 + 8);
  uint64_t v367 = v4 + 8;
  v372 = v14;
  v14(v7, v3);
  uint64_t v15 = (objc_class *)type metadata accessor for AnalyticsRTCReporter();
  id v16 = [objc_allocWithZone(v15) init];
  uint64_t v17 = sub_100009F04((uint64_t *)&unk_100322530);
  v7[3] = (uint64_t)v15;
  *uint64_t v7 = (uint64_t)v16;
  unsigned int v366 = v11;
  uint64_t v368 = v3;
  v369 = v13;
  v13(v7, v11, v3);
  id v363 = v16;
  uint64_t v357 = v17;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  os_log_type_t v18 = v372;
  v372(v7, v3);
  id v19 = [objc_allocWithZone((Class)AAContactsManager) init];
  v365[2] = v19;
  sub_100009F04((uint64_t *)&unk_100325960);
  v7[3] = swift_getObjectType();
  *uint64_t v7 = (uint64_t)v19;
  uint64_t v20 = v368;
  v13(v7, v11, v368);
  id v21 = v19;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v18(v7, v20);
  type metadata accessor for DaemonStorageFactory();
  swift_allocObject();
  sub_1000E4E84(&v386);
  swift_setDeallocating();
  swift_deallocClassInstance();
  id v22 = v365;
  id v23 = v365 + 3;
  sub_100041E8C(&v386, (uint64_t)(v365 + 3));
  sub_100009F04(&qword_100322490);
  uint64_t v24 = v22[6];
  id v25 = sub_100008EF8(v23, v24);
  v7[3] = v24;
  NSString v26 = sub_10003584C(v7);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v24 - 8) + 16))(v26, v25, v24);
  v369(v7, v366, v20);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v18(v7, v20);
  uint64_t v364 = v23;
  sub_100008A94((uint64_t)v23, (uint64_t)&v386);
  uint64_t v27 = sub_1000084BC((uint64_t)&v386, v387);
  __chkstk_darwin(v27, v27);
  Class v29 = (void *)((char *)v336 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v29;
  uint64_t v32 = type metadata accessor for StorageController();
  uint64_t v383 = v32;
  unint64_t v384 = &off_1002FBC50;
  *(void *)&long long v382 = v31;
  uint64_t v33 = type metadata accessor for CustodianStorageController();
  uint64_t v34 = (void *)swift_allocObject();
  uint64_t v35 = sub_1000084BC((uint64_t)&v382, v32);
  __chkstk_darwin(v35, v35);
  uint64_t v37 = (void *)((char *)v336 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v38 + 16))(v37);
  uint64_t v39 = *v37;
  uint64_t v34[5] = v32;
  v34[6] = &off_1002FBC50;
  v34[2] = v39;
  id v40 = v363;
  v34[7] = v363;
  id v347 = v40;
  sub_100008EA8((uint64_t)&v382);
  sub_100008EA8((uint64_t)&v386);
  id v41 = v365;
  v365[8] = v34;
  v41 += 8;
  uint64_t v41[3] = v33;
  v41[4] = &off_100301EB0;
  uint64_t v42 = sub_100009F04(&qword_100322470);
  uint64_t v43 = sub_100008EF8(v41, v33);
  v7[3] = v33;
  uint64_t v44 = sub_10003584C(v7);
  uint64_t v45 = *(void *)(v33 - 8);
  os_log_type_t v46 = *(void (**)(uint64_t *))(v45 + 16);
  uint64_t v344 = v45 + 16;
  uint64_t v345 = v33;
  uint64_t v342 = v45;
  Swift::String v343 = v46;
  ((void (*)(uint64_t *, void *, uint64_t))v46)(v44, v43, v33);
  uint64_t v47 = v20;
  uint64_t v48 = v20;
  uint64_t v49 = v369;
  v369(v7, v366, v48);
  uint64_t v348 = v34;
  swift_retain();
  uint64_t v360 = v42;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  v18(v7, v47);
  sub_100009F04(&qword_10032D700);
  uint64_t v50 = type metadata accessor for CustodianHealthCheckVersionProviderFactory();
  uint64_t v51 = swift_allocObject();
  v7[3] = v50;
  v7[4] = sub_10022070C((unint64_t *)&unk_10032D708, (void (*)(uint64_t))type metadata accessor for CustodianHealthCheckVersionProviderFactory);
  *uint64_t v7 = v51;
  uint64_t v52 = enum case for DependencyRegistry.Entry.factory(_:);
  uint64_t v53 = v368;
  v49(v7, enum case for DependencyRegistry.Entry.factory(_:), v368);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v54 = v53;
  v372(v7, v53);
  id v55 = [objc_allocWithZone((Class)AKCustodianController) init];
  uint64_t v387 = type metadata accessor for CustodianIDMSRequestManager();
  v388 = &off_1002F6598;
  uint64_t v56 = sub_10003584C((uint64_t *)&v386);
  Dependency.init(dependencyId:config:)();
  uint64_t *v56 = (uint64_t)v55;
  id v363 = v41;
  v356 = v41 + 5;
  sub_100041E8C(&v386, (uint64_t)(v41 + 5));
  uint64_t v57 = sub_100009F04((uint64_t *)&unk_100322480);
  uint64_t v58 = type metadata accessor for CustodianIDMSRequestManagerFactory();
  uint64_t v59 = swift_allocObject();
  v7[3] = v58;
  v7[4] = sub_10022070C((unint64_t *)&unk_10032D718, (void (*)(uint64_t))type metadata accessor for CustodianIDMSRequestManagerFactory);
  *uint64_t v7 = v59;
  unsigned int v362 = v52;
  v369(v7, v52, v54);
  uint64_t v341 = v57;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)();
  uint64_t v361 = v7;
  v372(v7, v54);
  uint64_t v60 = type metadata accessor for DaemonAccountStore();
  uint64_t v61 = swift_allocObject();
  unint64_t result = [self defaultStore];
  if (result)
  {
    *(void *)(v61 + 16) = result;
    *(void *)(v61 + 24) = [self sharedInstance];
    os_log_type_t v63 = v365;
    BOOL v64 = v365;
    v365[18] = v61;
    id v359 = v64 + 18;
    uint64_t v353 = v60;
    v63[21] = v60;
    v63[22] = &off_1002F66C0;
    id v65 = [self sharedService];
    v63[28] = v65;
    uint64_t v66 = type metadata accessor for DaemonDestinationBuilder();
    uint64_t v67 = swift_allocObject();
    v63[32] = v66;
    v63[33] = &off_1002FAE40;
    v63[29] = v67;
    sub_100008A94((uint64_t)(v63 + 29), (uint64_t)&v386);
    uint64_t v68 = sub_1000084BC((uint64_t)&v386, v387);
    __chkstk_darwin(v68, v68);
    uint64_t v70 = (void *)((char *)v336 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v71 + 16))(v70);
    uint64_t v72 = *v70;
    uint64_t v383 = v66;
    unint64_t v384 = &off_1002FAE40;
    *(void *)&long long v382 = v72;
    uint64_t v73 = type metadata accessor for DaemonCustodianMessenger();
    uint64_t v74 = (void *)swift_allocObject();
    uint64_t v75 = sub_1000084BC((uint64_t)&v382, v66);
    __chkstk_darwin(v75, v75);
    BOOL v77 = (void *)((char *)v336 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v78 + 16))(v77);
    uint64_t v79 = *v77;
    uint64_t v80 = v63;
    v74[6] = v66;
    v74[7] = &off_1002FAE40;
    v74[2] = v65;
    v74[3] = v79;
    id v81 = v65;
    sub_100008EA8((uint64_t)&v382);
    sub_100008EA8((uint64_t)&v386);
    v63[23] = v74;
    v63[26] = v73;
    v63[27] = &off_1002FF640;
    sub_100009F04((uint64_t *)&unk_1003224A0);
    v355 = v63 + 23;
    uint64_t v82 = sub_100008EF8(v63 + 23, v73);
    uint64_t v83 = v361;
    v361[3] = v73;
    uint64_t v84 = sub_10003584C(v83);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v73 - 8) + 16))(v84, v82, v73);
    uint64_t v85 = v368;
    v369(v83, v366, v368);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v372(v83, v85);
    if (qword_100320CA8 != -1) {
      swift_once();
    }
    uint64_t v86 = (void *)qword_10033E970;
    v63[37] = type metadata accessor for PushHelperService();
    v63[38] = &off_100300828;
    v63[34] = v86;
    uint64_t v87 = (uint64_t)v356;
    sub_100008A94((uint64_t)v356, (uint64_t)&v386);
    sub_100008A94((uint64_t)(v63 + 34), (uint64_t)&v389);
    sub_100008A94((uint64_t)v364, (uint64_t)&v390);
    uint64_t v88 = (uint64_t)v363;
    sub_100008A94((uint64_t)v363, (uint64_t)v391);
    uint64_t v89 = qword_100320B38;
    id v90 = v86;
    if (v89 != -1) {
      swift_once();
    }
    uint64_t v91 = qword_10033E6C0;
    uint64_t v92 = type metadata accessor for CustodianSPAKEFactory();
    uint64_t v93 = swift_allocObject();
    v391[11] = &off_1003012F8;
    v391[10] = v92;
    v391[7] = v93;
    v391[5] = v91;
    v391[6] = &off_1002F4AA8;
    sub_10021E598((uint64_t)&v386, (uint64_t)&v382);
    uint64_t v94 = type metadata accessor for CustodianRecoveryController();
    swift_allocObject();
    swift_retain();
    uint64_t v95 = sub_10017ED5C(&v382);
    id v358 = v80 + 39;
    v80[42] = v94;
    v80[43] = &off_1002FE3D0;
    v80[39] = v95;
    id v96 = [objc_allocWithZone((Class)AAFollowUpController) init];
    sub_100008A94(v88, (uint64_t)&v382);
    sub_100008A94(v87, (uint64_t)&v379);
    uint64_t v97 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v97, v97);
    uint64_t v99 = v80;
    int64_t v100 = (void *)((char *)v336 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v101 + 16))(v100);
    uint64_t v102 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v102, v102);
    uint64_t v104 = (char *)v336 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v105 + 16))(v104);
    uint64_t v106 = *v100;
    id v340 = v96;
    unint64_t v107 = sub_10021EB34(v106, (uint64_t)v104, (uint64_t)v340);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v108 = type metadata accessor for CustodianRecoveryFollowUpController();
    v99[47] = v108;
    v99[48] = &off_1002F6048;
    v99[44] = v107;
    sub_100008A94((uint64_t)v358, (uint64_t)&v382);
    uint64_t v109 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v109, v109);
    uint64_t v111 = (void *)((char *)v336 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v112 + 16))(v111);
    uint64_t v113 = *v111;
    uint64_t v380 = v94;
    uint64_t v381 = &off_1002FE3D0;
    *(void *)&long long v379 = v113;
    type metadata accessor for CustodianPushServiceDelegate();
    uint64_t v114 = (void *)swift_allocObject();
    uint64_t v115 = sub_1000084BC((uint64_t)&v379, v94);
    __chkstk_darwin(v115, v115);
    uint64_t v117 = (void *)((char *)v336 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v118 + 16))(v117);
    uint64_t v119 = *v117;
    v114[5] = v94;
    v114[6] = &off_1002FE3D0;
    v114[2] = v119;
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    v99[49] = v114;
    v99[50] = &off_1003009F0;
    sub_100008A94((uint64_t)(v99 + 44), (uint64_t)&v382);
    uint64_t v120 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v120, v120);
    uint64_t v122 = (void *)((char *)v336 - ((v121 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v123 + 16))(v122);
    uint64_t v124 = *v122;
    uint64_t v380 = v108;
    uint64_t v381 = &off_1002F6048;
    *(void *)&long long v379 = v124;
    type metadata accessor for EmbargoPushServiceDelegate();
    uint64_t v125 = (void *)swift_allocObject();
    uint64_t v126 = sub_1000084BC((uint64_t)&v379, v108);
    __chkstk_darwin(v126, v126);
    os_log_type_t v128 = (void *)((char *)v336 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v129 + 16))(v128);
    uint64_t v130 = *v128;
    v125[5] = v108;
    v125[6] = &off_1002F6048;
    void v125[2] = v130;
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    v99[51] = v125;
    v99[52] = &off_1002F6030;
    sub_100008A94((uint64_t)v363, (uint64_t)&v382);
    type metadata accessor for DaemonFamilyRequester();
    uint64_t v131 = swift_allocObject();
    uint64_t v132 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v132, v132);
    uint64_t v134 = (void *)((char *)v336 - ((v133 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v135 + 16))(v134);
    unint64_t v136 = sub_10021ED64(*v134, v131);
    sub_100008EA8((uint64_t)&v382);
    v351 = v99 + 59;
    v99[62] = type metadata accessor for CustodianFamilyManager();
    v99[63] = &off_100300D58;
    v99[59] = v136;
    sub_100008A94((uint64_t)v364, (uint64_t)&v382);
    uint64_t v137 = (uint64_t)v359;
    sub_100008A94((uint64_t)v359, (uint64_t)&v379);
    uint64_t v138 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v138, v138);
    uint64_t v140 = (void *)((char *)v336 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v141 + 16))(v140);
    uint64_t v142 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v142, v142);
    uint64_t v144 = (void *)((char *)v336 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v145 + 16))(v144);
    uint64_t v146 = sub_10021FDCC(*v140, *v144, (uint64_t (*)(void))type metadata accessor for DaemonAccountStore, (uint64_t)&off_1002F66C0, (void (*)(void))type metadata accessor for CustodianAutoAcceptValidator, (void (*)(void *, uint64_t))sub_100041E8C);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v350 = v99 + 75;
    v99[78] = type metadata accessor for CustodianAutoAcceptValidator();
    v99[79] = &off_100301DF0;
    v99[75] = v146;
    uint64_t v354 = sub_100009F04((uint64_t *)&unk_100322460);
    sub_100008A94(v137, (uint64_t)&v382);
    id v147 = [objc_allocWithZone((Class)CDPCustodianRecoveryKeyController) init];
    uint64_t v148 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v148, v148);
    uint64_t v150 = (void *)((char *)v336 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v151 + 16))(v150);
    uint64_t v152 = *v150;
    uint64_t v153 = v353;
    uint64_t v380 = v353;
    uint64_t v381 = &off_1002F66C0;
    *(void *)&long long v379 = v152;
    uint64_t v154 = type metadata accessor for DaemonSecurityController(0);
    v336[0] = v154;
    uint64_t v155 = (void *)swift_allocObject();
    uint64_t v156 = sub_1000084BC((uint64_t)&v379, v153);
    uint64_t v338 = *(void *)(*(void *)(v153 - 8) + 64);
    __chkstk_darwin(v156, v156);
    unint64_t v339 = (v157 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v158 = (void *)((char *)v336 - v339);
    uint64_t v160 = *(void (**)(char *))(v159 + 16);
    v336[2] = v159 + 16;
    uint64_t v337 = v160;
    v160((char *)v336 - v339);
    uint64_t v161 = *v158;
    v155[5] = v153;
    v155[6] = &off_1002F66C0;
    v155[2] = v161;
    v336[1] = sub_100009F04((uint64_t *)&unk_10032D6F0);
    Dependency.init(dependencyId:config:)();
    v155[7] = v147;
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v162 = v361;
    v361[3] = v154;
    *uint64_t v162 = (uint64_t)v155;
    uint64_t v164 = v368;
    uint64_t v163 = v369;
    v369(v162, v366, v368);
    uint64_t v165 = v163;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v166 = v372;
    v372(v162, v164);
    uint64_t v167 = sub_100009F04((uint64_t *)&unk_10032ACA0);
    uint64_t v168 = type metadata accessor for NotificationManagerFactory();
    uint64_t v169 = swift_allocObject();
    v162[3] = v168;
    v162[4] = sub_10022070C(&qword_10032D728, (void (*)(uint64_t))type metadata accessor for NotificationManagerFactory);
    *uint64_t v162 = v169;
    uint64_t v170 = v368;
    v165(v162, v362, v368);
    id v358 = (void *)v167;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v166(v162, v170);
    sub_100008A94((uint64_t)v355, (uint64_t)&v382);
    uint64_t v171 = (uint64_t)v363;
    sub_100008A94((uint64_t)v363, (uint64_t)&v379);
    sub_100008A94((uint64_t)v364, (uint64_t)&v376);
    uint64_t v172 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v172, v172);
    uint64_t v174 = (void *)((char *)v336 - ((v173 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v175 + 16))(v174);
    uint64_t v176 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v176, v176);
    uint64_t v178 = (void *)((char *)v336 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v179 + 16))(v178);
    uint64_t v180 = sub_1000084BC((uint64_t)&v376, v377);
    __chkstk_darwin(v180, v180);
    unint64_t v182 = (void *)((char *)v336 - ((v181 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v183 + 16))(v182);
    uint64_t v352 = sub_10021EFF8(*v174, *v178, *v182);
    sub_100008EA8((uint64_t)&v376);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v184 = (uint64_t)v359;
    sub_100008A94((uint64_t)v359, (uint64_t)&v382);
    sub_100008A94(v171, (uint64_t)&v379);
    sub_100008A94((uint64_t)v356, (uint64_t)&v376);
    sub_100008A94(v184, (uint64_t)v374);
    id v185 = [objc_allocWithZone((Class)CDPCustodianRecoveryKeyController) init];
    uint64_t v186 = sub_1000084BC((uint64_t)v374, v375);
    __chkstk_darwin(v186, v186);
    uint64_t v188 = (void *)((char *)v336 - ((v187 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v189 + 16))(v188);
    uint64_t v190 = *v188;
    uint64_t v191 = v353;
    v373[3] = v353;
    v373[4] = &off_1002F66C0;
    v373[0] = v190;
    uint64_t v192 = (void *)swift_allocObject();
    uint64_t v193 = sub_1000084BC((uint64_t)v373, v191);
    __chkstk_darwin(v193, v193);
    uint64_t v194 = (void *)((char *)v336 - v339);
    v337((char *)v336 - v339);
    uint64_t v195 = *v194;
    v192[5] = v191;
    v192[6] = &off_1002F66C0;
    v192[2] = v195;
    Dependency.init(dependencyId:config:)();
    v192[7] = v185;
    sub_100008EA8((uint64_t)v373);
    sub_100008EA8((uint64_t)v374);
    uint64_t v196 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v196, v196);
    uint64_t v198 = (void *)((char *)v336 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v199 + 16))(v198);
    uint64_t v200 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v200, v200);
    uint64_t v202 = (void *)((char *)v336 - ((v201 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v203 + 16))(v202);
    uint64_t v204 = sub_1000084BC((uint64_t)&v376, v377);
    __chkstk_darwin(v204, v204);
    uint64_t v206 = (char *)v336 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v207 + 16))(v206);
    uint64_t v208 = sub_10021F294(*v198, *v202, (uint64_t)v206, (uint64_t)v192);
    v356 = v208;
    sub_100008EA8((uint64_t)&v376);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    sub_100009F04((uint64_t *)&unk_10032D730);
    uint64_t v353 = type metadata accessor for CustodianCleanupController();
    v162[3] = v353;
    *uint64_t v162 = (uint64_t)v208;
    uint64_t v209 = v368;
    uint64_t v210 = v369;
    v369(v162, v366, v368);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v211 = v372;
    v372(v162, v209);
    sub_100009F04((uint64_t *)&unk_10032F8E0);
    uint64_t v212 = type metadata accessor for RecoveryFactorsControllerFactory();
    uint64_t v213 = swift_allocObject();
    v162[3] = v212;
    uint64_t v214 = v162;
    v162[4] = sub_10022070C((unint64_t *)&unk_10032D740, (void (*)(uint64_t))type metadata accessor for RecoveryFactorsControllerFactory);
    *uint64_t v162 = v213;
    uint64_t v215 = v162;
    uint64_t v216 = v368;
    v210(v215, v362, v368);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v211(v214, v216);
    uint64_t v217 = v353;
    uint64_t v383 = v353;
    unint64_t v384 = &off_1002F54D0;
    *(void *)&long long v382 = v356;
    type metadata accessor for DeclinedStatusHandler();
    uint64_t v218 = swift_allocObject();
    uint64_t v219 = sub_1000084BC((uint64_t)&v382, v217);
    __chkstk_darwin(v219, v219);
    uint64_t v221 = (void *)((char *)v336 - ((v220 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v222 + 16))(v221);
    uint64_t v223 = *v221;
    uint64_t v380 = v217;
    uint64_t v381 = &off_1002F54D0;
    *(void *)&long long v379 = v223;
    swift_retain();
    uint64_t v353 = sub_100009F04((uint64_t *)&unk_100321920);
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100321910);
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_100041E8C(&v379, v218 + 16);
    sub_100008EA8((uint64_t)&v382);
    sub_100008A94((uint64_t)v363, (uint64_t)&v382);
    uint64_t v224 = (uint64_t)v364;
    sub_100008A94((uint64_t)v364, (uint64_t)&v379);
    type metadata accessor for NotReachableStatusHandler();
    uint64_t v225 = swift_allocObject();
    uint64_t v226 = v352;
    swift_retain();
    unint64_t v339 = v218;
    swift_retain();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    uint64_t v227 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v227, v227);
    uint64_t v229 = (void *)((char *)v336 - ((v228 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v230 + 16))(v229);
    uint64_t v231 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v231, v231);
    uint64_t v233 = (void *)((char *)v336 - ((v232 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v234 + 16))(v233);
    uint64_t v235 = sub_10021F66C(*v229, *v233, v226, v218, v225);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v236 = v365;
    uint64_t v237 = type metadata accessor for CustodianStatusUpdater();
    v236[67] = v237;
    v236[68] = &off_100302EE0;
    v236[64] = v235;
    sub_100009F04((uint64_t *)&unk_10032CAF8);
    char v238 = sub_100008EF8(v236 + 64, v237);
    char v239 = v361;
    v361[3] = v237;
    uint64_t v240 = sub_10003584C(v239);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v237 - 8) + 16))(v240, v238, v237);
    uint64_t v241 = v368;
    v369(v239, v366, v368);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v372(v239, v241);
    uint64_t v242 = (uint64_t)v355;
    sub_100008A94((uint64_t)v355, (uint64_t)&v382);
    sub_100008A94((uint64_t)v351, (uint64_t)&v379);
    sub_100008A94(v224, (uint64_t)&v376);
    sub_100008A94((uint64_t)v350, (uint64_t)v374);
    uint64_t v243 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v243, v243);
    unint64_t v245 = (void *)((char *)v336 - ((v244 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v246 + 16))(v245);
    uint64_t v247 = sub_1000084BC((uint64_t)&v376, v377);
    __chkstk_darwin(v247, v247);
    uint64_t v249 = (void *)((char *)v336 - ((v248 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v250 + 16))(v249);
    uint64_t v251 = sub_1000084BC((uint64_t)v374, v375);
    __chkstk_darwin(v251, v251);
    NSString v253 = (void *)((char *)v336 - ((v252 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v254 + 16))(v253);
    uint64_t v350 = (void *)sub_10021F8F4(*v245, &v379, *v249, *v253);
    sub_100008EA8((uint64_t)v374);
    sub_100008EA8((uint64_t)&v376);
    sub_100008EA8((uint64_t)&v382);
    type metadata accessor for DaemonInvitationResponseHandler();
    v351 = (void *)swift_allocObject();
    Dependency.init(dependencyId:config:)();
    sub_100008A94(v242, (uint64_t)&v382);
    uint64_t v255 = (uint64_t)v364;
    sub_100008A94((uint64_t)v364, (uint64_t)&v379);
    uint64_t v256 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v256, v256);
    id v258 = (void *)((char *)v336 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v259 + 16))(v258);
    uint64_t v260 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v260, v260);
    uint64_t v262 = (void *)((char *)v336 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v263 + 16))(v262);
    v355 = (void *)sub_10021FB98(*v258, *v262);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v264 = type metadata accessor for DaemonSetupFinalizationHandler();
    uint64_t v265 = swift_allocObject();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_10032D750);
    Dependency.init(dependencyId:config:)();
    sub_100009F04(&qword_100329260);
    uint64_t v266 = v361;
    v361[3] = v264;
    *uint64_t v266 = v265;
    uint64_t v267 = v368;
    v369(v266, v366, v368);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v372(v266, v267);
    sub_100008A94(v255, (uint64_t)&v382);
    uint64_t v268 = (uint64_t)v363;
    sub_100008A94((uint64_t)v363, (uint64_t)&v379);
    uint64_t v269 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v269, v269);
    id v271 = (void *)((char *)v336 - ((v270 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v272 + 16))(v271);
    uint64_t v273 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v273, v273);
    id v275 = (void *)((char *)v336 - ((v274 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v276 + 16))(v275);
    uint64_t v277 = sub_10021FDCC(*v271, *v275, (uint64_t (*)(void))type metadata accessor for CustodianStorageController, (uint64_t)&off_100301EB0, (void (*)(void))type metadata accessor for DaemonCustodianRemovedHandler, (void (*)(void *, uint64_t))sub_100041E8C);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    sub_100008A94((uint64_t)v359, (uint64_t)&v382);
    uint64_t v278 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v278, v278);
    id v280 = (void *)((char *)v336 - ((v279 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v281 + 16))(v280);
    uint64_t v282 = *v280;
    uint64_t v283 = v265;
    uint64_t v338 = v265;
    swift_retain();
    uint64_t v284 = (uint64_t)v350;
    swift_retain();
    uint64_t v285 = (uint64_t)v351;
    swift_retain();
    uint64_t v286 = (uint64_t)v355;
    swift_retain();
    uint64_t v341 = v277;
    swift_retain();
    id v287 = sub_10021FFEC(v282, v284, v285, v286, v283, v277);
    sub_100008EA8((uint64_t)&v382);
    id v288 = v365;
    v365[69] = v287;
    [(id)v288[28] setCustodianDelegate:v287];
    v288[58] = [objc_allocWithZone((Class)AATrustedContactFlowPresenter) init];
    sub_100008A94(v268, (uint64_t)&v382);
    uint64_t v289 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v289, v289);
    id v291 = (void *)((char *)v336 - ((v290 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v292 + 16))(v291);
    uint64_t v293 = *v291;
    uint64_t v294 = v345;
    uint64_t v380 = v345;
    uint64_t v381 = &off_100301EB0;
    *(void *)&long long v379 = v293;
    uint64_t v295 = type metadata accessor for CustodianInvitationStatusChecker();
    uint64_t v296 = swift_allocObject();
    uint64_t v297 = sub_1000084BC((uint64_t)&v379, v294);
    __chkstk_darwin(v297, v297);
    v299 = (void *)((char *)v336 - ((v298 + 15) & 0xFFFFFFFFFFFFFFF0));
    v343(v299);
    uint64_t v300 = *v299;
    uint64_t v377 = v294;
    uint64_t v378 = &off_100301EB0;
    *(void *)&long long v376 = v300;
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_100041E8C(&v376, v296 + 16);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    v288[73] = v295;
    v288[74] = &off_1002F6100;
    v288[70] = v296;
    sub_100008EF8(v288 + 70, v295);
    uint64_t v301 = (uint64_t)v346;
    static DispatchQoS.background.getter();
    uint64_t v302 = swift_allocObject();
    *(unsigned char *)(v302 + 16) = 0;
    *(unsigned char *)(v302 + 17) = 1;
    *(_DWORD *)(v302 + 18) = v376;
    *(_WORD *)(v302 + 22) = WORD2(v376);
    *(int64x2_t *)(v302 + 24) = vdupq_n_s64(0x8CA0uLL);
    *(_OWORD *)(v302 + 40) = xmmword_1002B1AD0;
    uint64_t v303 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for XPCActivity();
    swift_allocObject();
    uint64_t v304 = sub_100033778(0xD000000000000037, (void *)0x80000001002A09D0, v301, (uint64_t)sub_100014B28, v302, (uint64_t)sub_100220530, v303);
    swift_release();
    swift_release();
    type metadata accessor for OSTransaction();
    swift_allocObject();
    uint64_t v305 = sub_100104754("com.apple.appleaccountd.custodian.invitationStatusCheck", 55, 2);
    sub_10004A4F4(v305, v304);
    swift_release();
    swift_release();
    sub_100009F04(&qword_10032D760);
    uint64_t v306 = type metadata accessor for AAAppleIDAuthenticationProviderFactory();
    uint64_t v307 = swift_allocObject();
    v266[3] = v306;
    v266[4] = sub_10022070C(&qword_10032D768, (void (*)(uint64_t))type metadata accessor for AAAppleIDAuthenticationProviderFactory);
    *uint64_t v266 = v307;
    uint64_t v308 = v362;
    uint64_t v309 = v368;
    id v310 = v369;
    v369(v266, v362, v368);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    uint64_t v311 = v372;
    v372(v266, v309);
    id v359 = (void *)sub_100009F04(&qword_10032D770);
    uint64_t v312 = type metadata accessor for CustodianIdMSConfirmationHandlerFactory();
    uint64_t v313 = swift_allocObject();
    v266[3] = v312;
    v266[4] = sub_10022070C(&qword_10032D778, (void (*)(uint64_t))type metadata accessor for CustodianIdMSConfirmationHandlerFactory);
    *uint64_t v266 = v313;
    uint64_t v314 = v368;
    v310(v266, v308, v368);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v311(v266, v314);
    sub_100009F04((uint64_t *)&unk_10032ACC0);
    uint64_t v315 = type metadata accessor for DaemonCustodianFetcher();
    uint64_t v316 = swift_allocObject();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_1003224B0);
    Dependency.init(dependencyId:config:)();
    v266[3] = v315;
    *uint64_t v266 = v316;
    id v317 = v369;
    v369(v266, v366, v314);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v318 = v372;
    v372(v266, v314);
    sub_100009F04(&qword_10032D780);
    uint64_t v319 = type metadata accessor for CustodianKeyRepairFactory();
    uint64_t v320 = swift_allocObject();
    v266[3] = v319;
    v266[4] = sub_10022070C(&qword_10032D788, (void (*)(uint64_t))type metadata accessor for CustodianKeyRepairFactory);
    *uint64_t v266 = v320;
    v317(v266, v362, v314);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();
    v318(v266, v314);
    sub_100008A94((uint64_t)v364, (uint64_t)&v382);
    sub_100008A94((uint64_t)v363, (uint64_t)&v379);
    uint64_t v321 = sub_1000084BC((uint64_t)&v382, v383);
    __chkstk_darwin(v321, v321);
    v323 = (void *)((char *)v336 - ((v322 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v324 + 16))(v323);
    uint64_t v325 = sub_1000084BC((uint64_t)&v379, v380);
    __chkstk_darwin(v325, v325);
    v327 = (void *)((char *)v336 - ((v326 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v328 + 16))(v327);
    uint64_t v329 = sub_100220538(*v323, *v327);
    sub_100008EA8((uint64_t)&v379);
    sub_100008EA8((uint64_t)&v382);
    uint64_t v330 = type metadata accessor for CustodianManateeMigrator();
    uint64_t v331 = v365;
    v365[56] = v330;
    v331[57] = &off_1002FC388;
    v331[53] = v329;
    uint64_t v332 = type metadata accessor for CustodianPreflightHealthCheck();
    swift_allocObject();
    uint64_t v333 = sub_100136330();
    unint64_t v384 = &off_1002FCB20;
    v385 = &off_1002FCA98;
    uint64_t v383 = v332;
    *(void *)&long long v382 = v333;
    uint64_t v334 = type metadata accessor for CustodianPreflightHealthCheckSequoiaB();
    uint64_t v335 = swift_allocObject();
    swift_retain();
    Dependency.init(dependencyId:config:)();
    Dependency.init(dependencyId:config:)();
    sub_1000DDC54(&v382, (_OWORD *)(v335 + 16));
    sub_100009F04((uint64_t *)&unk_10032ACD0);
    v266[3] = v334;
    *uint64_t v266 = v335;
    v369(v266, v366, v314);
    swift_retain();
    static DependencyRegistry.register<A>(_:entry:dependencyId:)();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100220754((uint64_t)&v386);
    v372(v266, v314);
    return v331;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021E27C@<X0>(void *a1@<X8>)
{
  sub_100008A94(v1 + 144, (uint64_t)v19);
  id v3 = [objc_allocWithZone((Class)CDPCustodianRecoveryKeyController) init];
  uint64_t v4 = sub_1000084BC((uint64_t)v19, v20);
  __chkstk_darwin(v4, v4);
  uint64_t v6 = (void *)((char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  uint64_t v8 = *v6;
  uint64_t v9 = type metadata accessor for DaemonAccountStore();
  v18[3] = v9;
  void v18[4] = &off_1002F66C0;
  v18[0] = v8;
  uint64_t v10 = type metadata accessor for DaemonSecurityController(0);
  uint64_t v11 = (void *)swift_allocObject();
  uint64_t v12 = sub_1000084BC((uint64_t)v18, v9);
  __chkstk_darwin(v12, v12);
  uint64_t v14 = (void *)((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = *v14;
  v11[5] = v9;
  void v11[6] = &off_1002F66C0;
  uint64_t v11[2] = v16;
  sub_100009F04((uint64_t *)&unk_10032D6F0);
  Dependency.init(dependencyId:config:)();
  v11[7] = v3;
  sub_100008EA8((uint64_t)v18);
  uint64_t result = sub_100008EA8((uint64_t)v19);
  a1[3] = v10;
  a1[4] = &off_100300598;
  *a1 = v11;
  return result;
}

uint64_t sub_10021E4AC()
{
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 24);
  sub_100008EA8(v0 + 64);
  sub_100008EA8(v0 + 104);
  sub_100008EA8(v0 + 144);
  sub_100008EA8(v0 + 184);
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 232);
  sub_100008EA8(v0 + 272);
  sub_100008EA8(v0 + 312);
  sub_100008EA8(v0 + 352);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 424);
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 472);
  sub_100008EA8(v0 + 512);
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 560);
  sub_100008EA8(v0 + 600);
  return v0;
}

uint64_t sub_10021E564()
{
  sub_10021E4AC();

  return swift_deallocClassInstance();
}

uint64_t sub_10021E598(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_10021E5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v22[3] = type metadata accessor for DaemonAccountStore();
  v22[4] = &off_1002F66C0;
  v22[0] = a1;
  v21[3] = type metadata accessor for DaemonInvitationHandler();
  v21[4] = &off_1002FDBD8;
  v21[0] = a2;
  void v20[3] = type metadata accessor for DaemonInvitationResponseHandler();
  v20[4] = &off_100301318;
  v20[0] = a3;
  v19[3] = type metadata accessor for DaemonShareHandler();
  v19[4] = &off_1002F5420;
  v19[0] = a4;
  v18[3] = type metadata accessor for DaemonSetupFinalizationHandler();
  void v18[4] = &off_1002FBD00;
  v18[0] = a5;
  void v17[3] = type metadata accessor for DaemonCustodianRemovedHandler();
  v17[4] = &off_1002F7CC0;
  v17[0] = a6;
  sub_100008A94((uint64_t)v22, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore);
  sub_100008A94((uint64_t)v21, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationHandler);
  sub_100008A94((uint64_t)v20, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationResponseHandler);
  sub_100008A94((uint64_t)v19, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_shareHandler);
  sub_100008A94((uint64_t)v18, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_setupFinalizationHandler);
  sub_100008A94((uint64_t)v17, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_custodianRemovedHandler);
  v16.receiver = a7;
  v16.super_class = (Class)type metadata accessor for CustodianMessageProcessor();
  id v14 = [super init];
  sub_100008EA8((uint64_t)v17);
  sub_100008EA8((uint64_t)v18);
  sub_100008EA8((uint64_t)v19);
  sub_100008EA8((uint64_t)v20);
  sub_100008EA8((uint64_t)v21);
  sub_100008EA8((uint64_t)v22);
  return v14;
}

uint64_t sub_10021E7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[3] = type metadata accessor for StorageController();
  v11[4] = &off_1002FBC50;
  v11[0] = a1;
  v10[3] = type metadata accessor for CustodianStorageController();
  v10[4] = &off_100301EB0;
  v10[0] = a2;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D780);
  Dependency.init(dependencyId:config:)();
  uint64_t v6 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup;
  *(void *)(a3 + v6) = dispatch_group_create();
  uint64_t v7 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *(void *)(a3 + v7) = v8;
  *uint64_t v8 = 0;
  *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) = 0;
  sub_100008A94((uint64_t)v11, a3 + 16);
  sub_100008A94((uint64_t)v10, a3 + 56);
  *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors) = _swiftEmptyArrayStorage;
  sub_1001230FC();
  if (qword_100320C48 != -1) {
    swift_once();
  }
  [objc_msgSend((id)qword_1003279C0, "setMaxConcurrentOperationCount:", 1, v10[0])];
  sub_100008EA8((uint64_t)v10);
  sub_100008EA8((uint64_t)v11);
  return a3;
}

uint64_t sub_10021E934(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = type metadata accessor for DaemonCustodianMessenger();
  id v19 = &off_1002FF640;
  *(void *)&long long v17 = a1;
  uint64_t v15 = type metadata accessor for StorageController();
  objc_super v16 = &off_1002FBC50;
  *(void *)&long long v14 = a3;
  uint64_t v12 = type metadata accessor for CustodianAutoAcceptValidator();
  uint64_t v13 = &off_100301DF0;
  *(void *)&long long v11 = a4;
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100041E8C(&v17, a5 + 16);
  sub_100041E8C(a2, a5 + 56);
  sub_100041E8C(&v14, a5 + 96);
  sub_100041E8C(&v11, a5 + 136);
  return a5;
}

uint64_t sub_10021EA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = type metadata accessor for DaemonCustodianMessenger();
  long long v17 = &off_1002FF640;
  *(void *)&long long v15 = a1;
  uint64_t v13 = type metadata accessor for CustodianStorageController();
  long long v14 = &off_100301EB0;
  *(void *)&long long v12 = a2;
  uint64_t v10 = type metadata accessor for StorageController();
  long long v11 = &off_1002FBC50;
  *(void *)&long long v9 = a3;
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACA0);
  Dependency.init(dependencyId:config:)();
  sub_100041E8C(&v15, a4 + 16);
  sub_100041E8C(&v12, a4 + 56);
  sub_100041E8C(&v9, a4 + 96);
  return a4;
}

void *sub_10021EB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianStorageController();
  void v28[3] = v6;
  v28[4] = &off_100301EB0;
  v28[0] = a1;
  uint64_t v7 = type metadata accessor for CustodianIDMSRequestManager();
  uint64_t v26 = v7;
  uint64_t v27 = &off_1002F6598;
  uint64_t v8 = sub_10003584C(v25);
  sub_1002207A8(a2, (uint64_t)v8);
  unint64_t v23 = sub_10022080C();
  uint64_t v24 = &off_1002FF8B0;
  *(void *)&long long v22 = a3;
  type metadata accessor for CustodianRecoveryFollowUpController();
  long long v9 = (void *)swift_allocObject();
  uint64_t v10 = sub_1000084BC((uint64_t)v28, v6);
  __chkstk_darwin(v10, v10);
  long long v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  uint64_t v14 = sub_1000084BC((uint64_t)v25, v26);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  uint64_t v18 = *v12;
  v9[5] = v6;
  void v9[6] = &off_100301EB0;
  v9[2] = v18;
  v9[10] = v7;
  v9[11] = &off_1002F6598;
  id v19 = sub_10003584C(v9 + 7);
  sub_1002207A8((uint64_t)v16, (uint64_t)v19);
  sub_100041E8C(&v22, (uint64_t)(v9 + 12));
  sub_100008EA8((uint64_t)v25);
  sub_100008EA8((uint64_t)v28);
  return v9;
}

void *sub_10021ED64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianStorageController();
  void v28[3] = v4;
  v28[4] = &off_100301EB0;
  v28[0] = a1;
  uint64_t v5 = type metadata accessor for DaemonFamilyRequester();
  uint64_t v26 = v5;
  uint64_t v27 = &off_100301DE0;
  v25[0] = a2;
  type metadata accessor for CustodianFamilyManager();
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = sub_1000084BC((uint64_t)v28, v4);
  __chkstk_darwin(v7, v7);
  long long v9 = (void *)((char *)&v24[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_1000084BC((uint64_t)v25, v26);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v9;
  uint64_t v16 = *v13;
  v6[10] = v4;
  v6[11] = &off_100301EB0;
  v6[7] = v15;
  void v24[3] = v5;
  v24[4] = &off_100301DE0;
  v24[0] = v16;
  uint64_t v17 = sub_1000084BC((uint64_t)v24, v5);
  __chkstk_darwin(v17, v17);
  id v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v19;
  v6[5] = v5;
  v6[6] = &off_100301DE0;
  _OWORD v6[2] = v21;
  sub_100008EA8((uint64_t)v24);
  sub_100008EA8((uint64_t)v25);
  sub_100008EA8((uint64_t)v28);
  return v6;
}

uint64_t sub_10021EFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = type metadata accessor for DaemonCustodianMessenger();
  uint64_t v30 = &off_1002FF640;
  v28[0] = a1;
  uint64_t v26 = type metadata accessor for CustodianStorageController();
  uint64_t v27 = &off_100301EB0;
  v25[0] = a2;
  uint64_t v23 = type metadata accessor for StorageController();
  uint64_t v24 = &off_1002FBC50;
  v22[0] = a3;
  type metadata accessor for AcceptedStatusHandler();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_1000084BC((uint64_t)v28, v29);
  __chkstk_darwin(v7, v7);
  long long v9 = (void *)((char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_1000084BC((uint64_t)v25, v26);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (void *)((char *)&v22[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_1000084BC((uint64_t)v22, v23);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)&v22[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_10021EA28(*v9, *v13, *v17, v6);
  sub_100008EA8((uint64_t)v22);
  sub_100008EA8((uint64_t)v25);
  sub_100008EA8((uint64_t)v28);
  return v19;
}

void *sub_10021F294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DaemonAccountStore();
  v45[3] = v8;
  v45[4] = &off_1002F66C0;
  v45[0] = a1;
  uint64_t v9 = type metadata accessor for CustodianStorageController();
  uint64_t v43 = v9;
  uint64_t v44 = &off_100301EB0;
  v42[0] = a2;
  uint64_t v10 = type metadata accessor for CustodianIDMSRequestManager();
  uint64_t v40 = v10;
  id v41 = &off_1002F6598;
  uint64_t v11 = sub_10003584C(v39);
  sub_1002207A8(a3, (uint64_t)v11);
  uint64_t v12 = type metadata accessor for DaemonSecurityController(0);
  uint64_t v37 = v12;
  uint64_t v38 = &off_100300598;
  v36[0] = a4;
  type metadata accessor for CustodianCleanupController();
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v14 = sub_1000084BC((uint64_t)v45, v8);
  __chkstk_darwin(v14, v14);
  uint64_t v16 = (void *)((char *)&v36[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = sub_1000084BC((uint64_t)v42, v43);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (void *)((char *)&v36[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = sub_1000084BC((uint64_t)v39, v40);
  __chkstk_darwin(v22, v22);
  uint64_t v24 = (char *)&v36[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v25 + 16))(v24);
  uint64_t v26 = sub_1000084BC((uint64_t)v36, v37);
  __chkstk_darwin(v26, v26);
  uint64_t v28 = (void *)((char *)&v36[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  uint64_t v30 = *v16;
  uint64_t v31 = *v20;
  uint64_t v32 = *v28;
  v13[5] = v8;
  void v13[6] = &off_1002F66C0;
  void v13[2] = v30;
  v13[10] = v9;
  v13[11] = &off_100301EB0;
  v13[7] = v31;
  v13[15] = v10;
  v13[16] = &off_1002F6598;
  uint64_t v33 = sub_10003584C(v13 + 12);
  sub_1002207A8((uint64_t)v24, (uint64_t)v33);
  v13[20] = v12;
  v13[21] = &off_100300598;
  v13[17] = v32;
  sub_100008EA8((uint64_t)v36);
  sub_100008EA8((uint64_t)v39);
  sub_100008EA8((uint64_t)v42);
  sub_100008EA8((uint64_t)v45);
  return v13;
}

uint64_t sub_10021F66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianStorageController();
  uint64_t v43[3] = v10;
  v43[4] = &off_100301EB0;
  v43[0] = a1;
  uint64_t v11 = type metadata accessor for StorageController();
  uint64_t v41 = v11;
  uint64_t v42 = &off_1002FBC50;
  v40[0] = a2;
  uint64_t v38 = type metadata accessor for AcceptedStatusHandler();
  uint64_t v39 = &off_100301988;
  *(void *)&long long v37 = a3;
  uint64_t v35 = type metadata accessor for DeclinedStatusHandler();
  uint64_t v36 = &off_1002FB528;
  *(void *)&long long v34 = a4;
  uint64_t v32 = type metadata accessor for NotReachableStatusHandler();
  uint64_t v33 = &off_1002F9278;
  *(void *)&long long v31 = a5;
  type metadata accessor for CustodianStatusUpdater();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_1000084BC((uint64_t)v43, v10);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000084BC((uint64_t)v40, v41);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (uint64_t *)((char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = *v15;
  uint64_t v22 = *v19;
  uint64_t v29 = v10;
  uint64_t v30 = &off_100301EB0;
  uint64_t v27 = &off_1002FBC50;
  *(void *)&long long v28 = v21;
  uint64_t v26 = v11;
  *(void *)&long long v25 = v22;
  sub_100041E8C(&v28, v12 + 16);
  sub_100041E8C(&v25, v12 + 56);
  sub_100041E8C(&v37, v12 + 96);
  sub_100041E8C(&v34, v12 + 136);
  sub_100041E8C(&v31, v12 + 176);
  sub_100008EA8((uint64_t)v40);
  sub_100008EA8((uint64_t)v43);
  return v12;
}

uint64_t sub_10021F8F4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = type metadata accessor for DaemonCustodianMessenger();
  uint64_t v32 = &off_1002FF640;
  v30[0] = a1;
  uint64_t v28 = type metadata accessor for StorageController();
  uint64_t v29 = &off_1002FBC50;
  v27[0] = a3;
  uint64_t v25 = type metadata accessor for CustodianAutoAcceptValidator();
  uint64_t v26 = &off_100301DF0;
  v24[0] = a4;
  type metadata accessor for DaemonInvitationHandler();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = sub_1000084BC((uint64_t)v30, v31);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)&v24[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_1000084BC((uint64_t)v27, v28);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v24[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000084BC((uint64_t)v24, v25);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)&v24[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_10021E934(*v11, a2, *v15, *v19, v8);
  sub_100008EA8((uint64_t)v24);
  sub_100008EA8((uint64_t)v27);
  sub_100008EA8((uint64_t)v30);
  return v21;
}

uint64_t sub_10021FB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DaemonCustodianMessenger();
  void v27[3] = v4;
  v27[4] = &off_1002FF640;
  v27[0] = a1;
  uint64_t v5 = type metadata accessor for StorageController();
  uint64_t v25 = v5;
  uint64_t v26 = &off_1002FBC50;
  v24[0] = a2;
  type metadata accessor for DaemonShareHandler();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_1000084BC((uint64_t)v27, v4);
  __chkstk_darwin(v7, v7);
  uint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  uint64_t v11 = sub_1000084BC((uint64_t)v24, v25);
  __chkstk_darwin(v11, v11);
  uint64_t v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = *v9;
  uint64_t v16 = *v13;
  uint64_t v22 = v4;
  uint64_t v23 = &off_1002FF640;
  uint64_t v20 = &off_1002FBC50;
  *(void *)&long long v21 = v15;
  uint64_t v19 = v5;
  *(void *)&long long v18 = v16;
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100041E8C(&v21, v6 + 16);
  sub_100041E8C(&v18, v6 + 56);
  sub_100008EA8((uint64_t)v24);
  sub_100008EA8((uint64_t)v27);
  return v6;
}

uint64_t sub_10021FDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(void), void (*a6)(void *, uint64_t))
{
  uint64_t v12 = type metadata accessor for StorageController();
  v33[3] = v12;
  v33[4] = &off_1002FBC50;
  v33[0] = a1;
  uint64_t v13 = a3(0);
  uint64_t v31 = v13;
  uint64_t v32 = a4;
  v30[0] = a2;
  a5(0);
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = sub_1000084BC((uint64_t)v33, v12);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (void *)((char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = sub_1000084BC((uint64_t)v30, v31);
  __chkstk_darwin(v19, v19);
  long long v21 = (void *)((char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = *v17;
  uint64_t v24 = *v21;
  uint64_t v28 = v12;
  uint64_t v29 = &off_1002FBC50;
  v26[4] = a4;
  *(void *)&long long v27 = v23;
  void v26[3] = v13;
  v26[0] = v24;
  sub_100041E8C(&v27, v14 + 16);
  a6(v26, v14 + 56);
  sub_100008EA8((uint64_t)v30);
  sub_100008EA8((uint64_t)v33);
  return v14;
}

id sub_10021FFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = type metadata accessor for DaemonAccountStore();
  uint64_t v56 = &off_1002F66C0;
  v54[0] = a1;
  uint64_t v52 = type metadata accessor for DaemonInvitationHandler();
  uint64_t v53 = &off_1002FDBD8;
  v51[0] = a2;
  uint64_t v49 = type metadata accessor for DaemonInvitationResponseHandler();
  uint64_t v50 = &off_100301318;
  v48[0] = a3;
  uint64_t v46 = type metadata accessor for DaemonShareHandler();
  uint64_t v47 = &off_1002F5420;
  v45[0] = a4;
  uint64_t v43 = type metadata accessor for DaemonSetupFinalizationHandler();
  uint64_t v44 = &off_1002FBD00;
  v42[0] = a5;
  uint64_t v41 = &off_1002F7CC0;
  uint64_t v40 = type metadata accessor for DaemonCustodianRemovedHandler();
  v39[0] = a6;
  id v12 = objc_allocWithZone((Class)type metadata accessor for CustodianMessageProcessor());
  uint64_t v13 = sub_1000084BC((uint64_t)v54, v55);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = sub_1000084BC((uint64_t)v51, v52);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (void *)((char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  uint64_t v21 = sub_1000084BC((uint64_t)v48, v49);
  __chkstk_darwin(v21, v21);
  uint64_t v23 = (void *)((char *)v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  uint64_t v25 = sub_1000084BC((uint64_t)v45, v46);
  __chkstk_darwin(v25, v25);
  long long v27 = (void *)((char *)v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  uint64_t v29 = sub_1000084BC((uint64_t)v42, v43);
  __chkstk_darwin(v29, v29);
  uint64_t v31 = (void *)((char *)v39 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  uint64_t v33 = sub_1000084BC((uint64_t)v39, v40);
  __chkstk_darwin(v33, v33);
  uint64_t v35 = (void *)((char *)v39 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v36 + 16))(v35);
  id v37 = sub_10021E5F4(*v15, *v19, *v23, *v27, *v31, *v35, v12);
  sub_100008EA8((uint64_t)v39);
  sub_100008EA8((uint64_t)v42);
  sub_100008EA8((uint64_t)v45);
  sub_100008EA8((uint64_t)v48);
  sub_100008EA8((uint64_t)v51);
  sub_100008EA8((uint64_t)v54);
  return v37;
}

uint64_t sub_1002204E8()
{
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002204F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100220530(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10004C024(a1, a2, a3, v3);
}

uint64_t sub_100220538(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = type metadata accessor for StorageController();
  uint64_t v20 = &off_1002FBC50;
  v18[0] = a1;
  uint64_t v16 = type metadata accessor for CustodianStorageController();
  uint64_t v17 = &off_100301EB0;
  v15[0] = a2;
  type metadata accessor for CustodianManateeMigrator();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_1000084BC((uint64_t)v18, v19);
  __chkstk_darwin(v5, v5);
  uint64_t v7 = (void *)((char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_1000084BC((uint64_t)v15, v16);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (void *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_10021E7A8(*v7, *v11, v4);
  sub_100008EA8((uint64_t)v15);
  sub_100008EA8((uint64_t)v18);
  return v13;
}

uint64_t sub_10022070C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100220754(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002207A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianIDMSRequestManager();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10022080C()
{
  unint64_t result = qword_10032ACF0;
  if (!qword_10032ACF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032ACF0);
  }
  return result;
}

unint64_t sub_10022084C(uint64_t a1)
{
  return sub_100221774(a1, &qword_10032DB38);
}

unint64_t sub_100220858(uint64_t a1)
{
  return sub_100221774(a1, &qword_10032DB30);
}

unint64_t sub_100220864(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032DB08);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04((uint64_t *)&unk_10032DAE8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = &v6[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100019730(v13, (uint64_t)v6, &qword_10032DB08);
    unint64_t result = sub_1001359C4((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    uint64_t v20 = v8[7] + 32 * v17;
    uint64_t v21 = *((void *)v10 + 2);
    uint64_t v22 = *((void *)v10 + 3);
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v10;
    *(void *)(v20 + 16) = v21;
    *(void *)(v20 + 24) = v22;
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100220A6C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB50);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001358B8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    unint64_t v12 = (void *)(v2[7] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100220B90(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04((uint64_t *)&unk_10032DAC0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    unint64_t result = sub_1001358B8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100220CAC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032C6C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100019730(v6, (uint64_t)&v15, &qword_10032DA70);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1001358B8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100009F48(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100220DE4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB10);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_100013140(v7, v8);
    unint64_t result = sub_1001358B8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100220F0C(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100329B88);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    unint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DBB0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100019730(v13, (uint64_t)v6, &qword_100329B88);
    unint64_t result = sub_100135ADC((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for URL();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221100(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB48);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100135930((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    void *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221218(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB58);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    char v5 = *(unsigned char *)v4;
    id v6 = *(v4 - 1);
    unint64_t result = sub_100135930((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    *(unsigned char *)(v2[7] + result) = v5;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221318(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04((uint64_t *)&unk_10032DB60);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100135930((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221424(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032DB78);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    char v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04((uint64_t *)&unk_10032DB80);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  char v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100019730(v13, (uint64_t)v6, &qword_10032DB78);
    unint64_t result = sub_1001359C4((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221618(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB18);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100019730(v6, (uint64_t)v15, (uint64_t *)&unk_10032DB20);
    unint64_t result = sub_100135A98((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100009F48(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10022175C(uint64_t a1)
{
  return sub_100221774(a1, &qword_10032DB40);
}

unint64_t sub_100221768(uint64_t a1)
{
  return sub_100221774(a1, &qword_10032DBE8);
}

unint64_t sub_100221774(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_1001358B8(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10022188C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DBF0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v14 = *v4;
    swift_bridgeObjectRetain();
    id v7 = (id)v14;
    swift_retain();
    unint64_t result = sub_1001358B8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v14;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002219C4(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032DC30);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    char v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DC28);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  char v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100019730(v13, (uint64_t)v6, &qword_10032DC30);
    unint64_t result = sub_1001359C4((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v6[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221BB8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_100328488);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001358B8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100221CCC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DC50);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100019730(v6, (uint64_t)&v13, &qword_10032DC58);
    uint64_t v7 = v13;
    unint64_t result = sub_100135930(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100009F48(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_100221DFC()
{
  return sub_100221E24(&OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager);
}

id sub_100221E10()
{
  return sub_100221E24(&OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager);
}

id sub_100221E24(void *a1, void *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_100325870);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v26[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5 + *a1, v11);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  id v16 = [*(id *)(*sub_100008EF8(v26, (uint64_t)v26[3]) + 16) aa_primaryAppleAccount];
  if (v16
    && (unint64_t v17 = v16, v18 = objc_msgSend(v16, "aa_altDSID"), v17, v18))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  sub_100008EA8((uint64_t)v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v5 + *a2, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v21 = v26[0];
  if (v20)
  {
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 authKitAccountWithAltDSID:v22];

    swift_bridgeObjectRelease_n();
  }
  else
  {

    return 0;
  }
  return v23;
}

void sub_1002220DC(void *a1)
{
  sub_100222514(a1, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
}

void sub_100222144(void *a1)
{
  if (a1)
  {
    uint64_t v2 = v1;
    uint64_t v4 = v1 + 2;
    uint64_t v5 = v1[5];
    uint64_t v6 = v1[7];
    sub_100008EF8(v1 + 2, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 80))(v23, v5, v6);
    uint64_t v7 = *(void **)(*sub_100008EF8(v23, v23[3]) + 16);
    id v22 = 0;
    [v7 walrusStatus:&v22];
    if (v22)
    {
      id v8 = v22;
      swift_willThrow();
      sub_100008EA8((uint64_t)v23);
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      sub_100007288(v9, (uint64_t)qword_10033E778);
      swift_retain_n();
      id v10 = v8;
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        id v21 = (void *)swift_slowAlloc();
        v23[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315394;
        uint64_t v14 = v2[5];
        uint64_t v15 = v2[7];
        sub_100008EF8(v4, v14);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 64))(v14, v15);
        id v22 = (id)sub_100135190(v16, v17, v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2112;
        id v18 = v10;
        uint64_t v19 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v22 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v21 = v19;

        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - Failed to attach Walrus Status: %@", (uint8_t *)v13, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
      sub_100008EA8((uint64_t)v23);
      [a1 setObject:isa forKeyedSubscript:kAAAnalyticsAdvancedDataProtectionState];
    }
  }
}

void sub_1002224AC(void *a1)
{
  sub_100222514(a1, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
}

void sub_100222514(void *a1, void *a2, void *a3)
{
  uint64_t v6 = v3;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v6 + *a2, v8);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v13 = *(void **)(*sub_100008EF8(v29, v29[3]) + 16);
    id v28 = 0;
    [v13 walrusStatus:&v28];
    if (v28)
    {
      id v14 = v28;
      swift_willThrow();
      sub_100008EA8((uint64_t)v29);
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100007288(v15, (uint64_t)qword_10033E778);
      swift_retain_n();
      id v16 = v14;
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = (void *)swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        id v21 = (uint64_t *)(v6 + *a3);
        uint64_t v22 = *v21;
        unint64_t v23 = v21[1];
        swift_bridgeObjectRetain();
        id v28 = (id)sub_100135190(v22, v23, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2112;
        id v24 = v16;
        uint64_t v25 = (void *)_swift_stdlib_bridgeErrorToNSError();
        id v28 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v20 = v25;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - Failed to attach Walrus Status: %@", (uint8_t *)v19, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
    }
    else
    {
      Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
      sub_100008EA8((uint64_t)v29);
      [a1 setObject:isa forKeyedSubscript:kAAAnalyticsAdvancedDataProtectionState];
    }
  }
}

uint64_t sub_1002228E8(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1002229AC, 0, 0);
}

uint64_t sub_1002229AC()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    uint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323450 + dword_100323450);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100222AFC;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100222AFC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100222C24;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_10022FF9C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100222C24()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100222F04(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return _swift_task_switch(sub_100222F24, 0, 0);
}

uint64_t sub_100222F24()
{
  if (v0[9])
  {
    uint64_t v1 = (void *)v0[10];
    uint64_t v2 = v1[5];
    uint64_t v3 = v1[7];
    sub_100008EF8(v1 + 2, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
    unint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_100323450 + dword_100323450);
    BOOL v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100223048;
    return v7();
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100223048(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100223210;
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v5 = sub_100223170;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100223170()
{
  uint64_t v1 = *(void **)(v0 + 72);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100008EA8(v0 + 16);
  [v1 setObject:isa forKeyedSubscript:kAAAnalyticsCliqueStatus];

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100223210()
{
  id v16 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = (void *)v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    id v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = v5[5];
    uint64_t v8 = v5[7];
    sub_100008EF8(v5 + 2, v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    v0[7] = sub_100135190(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1002234FC(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1002235C0, 0, 0);
}

uint64_t sub_1002235C0()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    uint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323450 + dword_100323450);
    BOOL v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100223710;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100223710(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100223838;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_1001F53B0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100223838()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100223B18(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100223BDC, 0, 0);
}

uint64_t sub_100223BDC()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    unint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323450 + dword_100323450);
    BOOL v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100223D2C;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100223D2C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100223E54;
  }
  else
  {
    *(void *)(v4 + 128) = a1;
    uint64_t v5 = sub_10022FF9C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100223E54()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100224130(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1002241F4, 0, 0);
}

uint64_t sub_1002241F4()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    unint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323448 + dword_100323448);
    BOOL v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100224344;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100224344(int a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10022446C;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    uint64_t v5 = sub_10022FFA0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022446C()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach SOS Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10022474C(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return _swift_task_switch(sub_10022476C, 0, 0);
}

uint64_t sub_10022476C()
{
  if (v0[9])
  {
    uint64_t v1 = (void *)v0[10];
    uint64_t v2 = v1[5];
    uint64_t v3 = v1[7];
    sub_100008EF8(v1 + 2, v2);
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v2, v3);
    unint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_100323448 + dword_100323448);
    BOOL v4 = (void *)swift_task_alloc();
    v0[11] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100224890;
    return v7();
  }
  else
  {
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100224890(int a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100224A58;
  }
  else
  {
    *(_DWORD *)(v4 + 104) = a1;
    uint64_t v5 = sub_1002249B8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002249B8()
{
  uint64_t v1 = *(void **)(v0 + 72);
  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  sub_100008EA8(v0 + 16);
  [v1 setObject:isa forKeyedSubscript:kAAAnalyticsCircleSyncingStatus];

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100224A58()
{
  id v16 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = (void *)v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    id v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v7 = v5[5];
    uint64_t v8 = v5[7];
    sub_100008EF8(v5 + 2, v7);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
    v0[7] = sub_100135190(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v14 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach SOS Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  os_log_type_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100224D44(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100224E08, 0, 0);
}

uint64_t sub_100224E08()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    uint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323448 + dword_100323448);
    BOOL v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100224F58;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100224F58(int a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100225080;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    uint64_t v5 = sub_1001F5A68;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100225080()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach SOS Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100225360(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100225424, 0, 0);
}

uint64_t sub_100225424()
{
  if (v0[9])
  {
    uint64_t v2 = v0[12];
    uint64_t v1 = v0[13];
    uint64_t v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController, v3);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    unint64_t v7 = (uint64_t (*)(void))((char *)&dword_100323448 + dword_100323448);
    BOOL v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *BOOL v4 = v0;
    v4[1] = sub_100225574;
    return v7();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100225574(int a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10022569C;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    uint64_t v5 = sub_10022FFA0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022569C()
{
  id v14 = v0;
  sub_100008EA8((uint64_t)(v0 + 2));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E778);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    os_log_type_t v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
    unint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
    swift_bridgeObjectRetain();
    v0[7] = sub_100135190(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[8] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v12 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - Failed to attach SOS Status: %@", (uint8_t *)v6, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  unint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

id sub_100225978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    NSString v9 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0;
    goto LABEL_6;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v11 = [(id)swift_getObjCClassFromMetadata() analyticsEventWithName:v8 altDSID:v9 flowID:v10];

  return v11;
}

uint64_t sub_100225A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100054BDC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_100225BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v8);
  uint64_t v44 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v15 - 8, v16);
  os_log_type_t v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BC8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E808);
  sub_10022EF40(a3, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v38 = a3;
    unint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v40 = v7;
    v47[0] = v24;
    uint64_t v39 = a4;
    *(_DWORD *)unint64_t v23 = 136315138;
    v37[1] = v23 + 4;
    sub_10022FF54((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_100135190(v25, v26, v47);
    a4 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10022F3A8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Stating Cleanup for %s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v40;
    swift_slowDealloc();
    a3 = v38;
    swift_slowDealloc();
  }
  else
  {
    sub_10022F3A8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }

  uint64_t v27 = a3;
  uint64_t v28 = UUID.uuidString.getter();
  uint64_t v30 = v29;
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = v41;
  v31[2] = v42;
  uint64_t v31[3] = v28;
  v31[4] = v30;
  void v31[5] = v32;
  v31[6] = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__inheritanceStorage, v10);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100008EF8(v47, v47[3]);
  uint64_t v34 = (uint64_t)v44;
  uint64_t v33 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v44, v27, v45);
  uint64_t v35 = (void *)swift_allocObject();
  void v35[2] = a4;
  void v35[3] = sub_10022EEB8;
  v35[4] = v31;
  swift_retain();
  swift_retain();
  sub_1000E7554(v34, (uint64_t)sub_10022EECC, (uint64_t)v35);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v34, v33);
  sub_100008EA8((uint64_t)v47);
  return swift_release();
}

uint64_t sub_1002260E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(uint64_t))
{
  if (a1)
  {
    uint64_t v12 = a1;
    uint64_t v13 = (uint64_t *)(a4 + 16);
    swift_errorRetain();
    id v14 = (void *)_convertErrorToNSError(_:)();
    id v15 = [v14 aa_partialErrorsByName];

    if (v15)
    {
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v16 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10022F6A8(v16, v13, a2, a3, a5, a6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        a1 = swift_bridgeObjectRelease();
        return a7(a1);
      }
      swift_bridgeObjectRelease();
    }
    if (a3)
    {
      uint64_t v17 = (void *)a3;
    }
    else
    {
      a2 = 0;
      uint64_t v17 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = a2;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = 58;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._uint64_t countAndFlagsBits = a5;
    v20._object = a6;
    String.append(_:)(v20);
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v13;
    *uint64_t v13 = 0x8000000000000000;
    sub_10022C0AC(v12, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
    *uint64_t v13 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    a1 = swift_errorRelease();
  }
  return a7(a1);
}

void sub_1002262E8(uint64_t a1, void (*a2)(NSObject *))
{
  BOOL v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    swift_beginAccess();
    uint64_t v7 = *v4;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v7;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_10022FF54((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E808);
    uint64_t v9 = v19;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v20 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v20;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to clean up beneficiary: %@", v12, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v10 = v9;
    }

    Swift::String v18 = v9;
    a2(v9);
  }
  else
  {
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E808);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully cleaning up beneficiary.", v17, 2u);
      swift_slowDealloc();
    }

    a2(0);
  }
}

uint64_t sub_100226668(uint64_t a1, void (*a2)(uint64_t, void, void), void (*a3)(uint64_t, void, void), uint64_t a4)
{
  uint64_t v40 = a2;
  uint64_t v41 = a4;
  uint64_t v6 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = __chkstk_darwin(v10 - 8, v13);
  id v15 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  Swift::String v18 = (char *)&v39 - v17;
  uint64_t v19 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v22, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v40 = a3;
    uint64_t v23 = *v22;
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E808);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      swift_errorRetain();
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v42 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v28 = v29;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error fetching beneficiary record: %@", v27, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v38 = v40;

    swift_errorRetain();
    v38(v23, 0, 0);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10022EED8((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_10022EF40((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = swift_allocObject();
    sub_10022EED8((uint64_t)v15, v32 + v30, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v33 = v40;
    *(void *)(v32 + v31) = v40;
    uint64_t v34 = (void *)(v32 + ((v31 + 15) & 0xFFFFFFFFFFFFFFF8));
    void *v34 = a3;
    v34[1] = v41;
    uint64_t v35 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v9, 1, 1, v35);
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = 0;
    void v36[3] = 0;
    v36[4] = v33;
    void v36[5] = sub_10022F1A8;
    v36[6] = v32;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_100225A54((uint64_t)v9, (uint64_t)&unk_10032DA80, (uint64_t)v36);
    swift_release();
    swift_release();
    return sub_10022F3A8((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

void sub_100226B14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = a5;
  uint64_t v40 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a1;
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = v6 - 8;
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v35 = v9;
  uint64_t v36 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_10032DAB0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (uint64_t *)(a2 + *(int *)(v7 + 32));
  uint64_t v16 = *(void *)(a2 + *(int *)(v7 + 28) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v16)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  id v33 = [objc_allocWithZone((Class)AABeneficiaryInfo) initWithBeneficiaryID:v17.super.isa benefactorAltDSID:v18 handle:v19];

  uint64_t v20 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v40 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__inheritanceRequestManager, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v21 = v41;
  uint64_t v22 = *v15;
  uint64_t v23 = v15[1];
  uint64_t v24 = v36;
  sub_10022EF40(a2, v36, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v25 = (*(unsigned __int8 *)(v34 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  os_log_type_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v37;
  uint64_t v28 = v38;
  void v26[2] = v20;
  void v26[3] = v28;
  uint64_t v29 = v39;
  v26[4] = v27;
  id v26[5] = v29;
  sub_10022EED8(v24, (uint64_t)v26 + v25, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  id v30 = v28;
  swift_retain();
  swift_retain();
  unint64_t v31 = v33;
  sub_1000C8114(v33, v22, v23, (void (*)(uint64_t))sub_10022F630, (uint64_t)v26);
  swift_release();
}

uint64_t sub_100226E18(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *, void, void), uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E808);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "👾 Failed cleaning up beneficiary with error: %@", v13, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    swift_retain();
    sub_10022FA5C(a3, 0, a1, a2, a2, "%s Finished reporting failed event.");
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E808);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      NSUUID v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSUUID v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "🌞 Successfully completed cleaning up beneficiary.", v17, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    sub_10022FA5C(a3, 1, 0, a2, a2, "%s Finished reporting successful event.");
    swift_release();
  }
  uint64_t v18 = type metadata accessor for BeneficiaryInfoRecord();
  return a4(a1, *(void *)(a6 + *(int *)(v18 + 20)), *(void *)(a6 + *(int *)(v18 + 20) + 8));
}

void sub_100227164(uint64_t a1, const char *a2)
{
  if (qword_100320BC8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E808);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
    unint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t sub_100227344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CB0);
  v6[21] = v8;
  v6[22] = *(void *)(v8 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v9 = sub_100009F04(&qword_100325870);
  v6[24] = v9;
  v6[25] = *(void *)(v9 - 8);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_1002274CC, 0, 0);
}

uint64_t sub_1002274CC()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[15];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__accountStore, v3);
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v5 = [*(id *)(*sub_100008EF8(v0 + 2, v0[5]) + 16) aa_primaryAppleAccount];
  if (v5 && (os_log_type_t v6 = v5, v7 = objc_msgSend(v5, "aa_altDSID"), v6, v7))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_100008EA8((uint64_t)(v0 + 2));
  swift_release();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v9)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  id v12 = [self analyticsEventWithName:v10 altDSID:v11 flowID:0];
  v0[27] = v12;

  if (v12)
  {
    swift_retain();
    id v13 = sub_100221E24(&OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__accountStore, &OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__akAccountManager);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v16 = v0[22];
      uint64_t v15 = v0[23];
      uint64_t v17 = v0[21];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v0[15] + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__akAccountManager, v17);
      Dependency.wrappedValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      uint64_t v18 = (void *)v0[14];
      [v18 securityLevelForAccount:v14];
    }
    swift_release();
    uint64_t v27 = v0[19];
    uint64_t v26 = v0[20];
    uint64_t v28 = v0[18];
    uint64_t v29 = v0[15];
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    [v12 setObject:isa forKeyedSubscript:kAAAnalyticsSecurityLevel];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController, v28);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_100056834();
    Class v31 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100008EA8((uint64_t)(v0 + 7));
    [v12 setObject:v31 forKeyedSubscript:kAAAnalyticsCdpStatus];

    id v32 = v12;
    sub_100222514(v12, &OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController, &OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
    uint64_t v34 = (uint64_t (*)(uint64_t))((char *)&dword_10032DAA0 + dword_10032DAA0);
    id v33 = (void *)swift_task_alloc();
    v0[28] = v33;
    void *v33 = v0;
    v33[1] = sub_1002279E0;
    return v34((uint64_t)v12);
  }
  else
  {
    if (qword_100320BC8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E808);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "createEvent: Self is nil. Aborting Report Event.", v22, 2u);
      swift_slowDealloc();
    }
    uint64_t v23 = (void (*)(void))v0[16];

    v23(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_1002279E0()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 216);
  swift_task_dealloc();

  return _swift_task_switch(sub_100227AF4, 0, 0);
}

uint64_t sub_100227AF4()
{
  uint64_t v4 = (uint64_t (*)(id))((char *)&dword_10032DAA8 + dword_10032DAA8);
  id v1 = *(id *)(v0 + 216);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 232) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100227BB0;
  return v4(v1);
}

uint64_t sub_100227BB0()
{
  id v1 = *(void **)(*(void *)v0 + 216);
  swift_task_dealloc();

  return _swift_task_switch(sub_100227CC4, 0, 0);
}

uint64_t sub_100227CC4()
{
  uint64_t v20 = v0;
  if (qword_100320BC8 != -1) {
    swift_once();
  }
  id v1 = (void *)v0[27];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E808);
  swift_retain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  id v7 = (void *)v0[27];
  uint64_t v8 = v0[15];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
    unint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName + 8);
    swift_bridgeObjectRetain();
    v0[12] = sub_100135190(v11, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v0[13] = v7;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - Event created %@", (uint8_t *)v9, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  id v13 = (void *)v0[27];
  uint64_t v14 = (void (*)(void *))v0[16];
  id v15 = v13;
  v14(v13);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100227FA0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__inheritanceStorage;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__inheritanceRequestManager;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032DAB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__followUpController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController;
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__accountStore;
  uint64_t v10 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__akAccountManager;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_100321CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__keychainManager;
  uint64_t v14 = sub_100009F04(&qword_100321D20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1002281EC()
{
  sub_100227FA0();

  return swift_deallocClassInstance();
}

uint64_t sub_100228244()
{
  return type metadata accessor for InheritanceRecordsCleaner();
}

uint64_t type metadata accessor for InheritanceRecordsCleaner()
{
  uint64_t result = qword_10032D7F8;
  if (!qword_10032D7F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100228298()
{
  sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
  if (v0 <= 0x3F)
  {
    sub_100228534(319, (unint64_t *)&qword_10032CDD8, (void (*)(uint64_t))type metadata accessor for InheritanceRequestManager);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100327F80, (uint64_t *)&unk_100321900);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
          if (v4 <= 0x3F)
          {
            sub_100228534(319, (unint64_t *)&qword_100327F90, (void (*)(uint64_t))sub_100228588);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, qword_10032D810, (uint64_t *)&unk_100321940);
              if (v6 <= 0x3F) {
                swift_updateClassMetadata2();
              }
            }
          }
        }
      }
    }
  }
}

void sub_100228534(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Dependency();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_100228588()
{
  unint64_t result = qword_100321930;
  if (!qword_100321930)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100321930);
  }
  return result;
}

uint64_t sub_1002285C8()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner_checkName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100228608(uint64_t a1, uint64_t a2)
{
  return sub_100228630(a1, a2, (uint64_t *)&unk_1003228A0, &OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__cdpController);
}

uint64_t sub_10022861C(uint64_t a1, uint64_t a2)
{
  return sub_100228630(a1, a2, &qword_100325870, &OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__accountStore);
}

uint64_t sub_100228630(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = sub_100009F04(a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 16))(v10, *v4 + *a4, v6);
  Dependency.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100228730()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, *v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRecordsCleaner__akAccountManager, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v7[1];
}

uint64_t sub_100228830(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_100228868@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_100228898(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100228B98(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002288B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100229554(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10032DAF8, (uint64_t *)&unk_100321D10);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002288E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_100328A30, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228924(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100228D24(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100228944(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100228E90(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228964(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_10032DC48, type metadata accessor for KeyRepairContext);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002289A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_1003289D0, (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002289DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_10032DB70, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228A18(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10032DB90, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228A54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10022903C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100228A74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_100328A28, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228AB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_100328A20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228AEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002291BC(a1, a2, a3, (void *)*v3, &qword_10032DC60, (uint64_t (*)(void))&type metadata accessor for SQL);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228B28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100229404(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100228B48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100229554(a1, a2, a3, (void *)*v3, &qword_10032DBC8, (uint64_t *)&unk_10032DBD0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_100228B78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002296E4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_100228B98(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DBF8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100009F04(&qword_10032DC00);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100228D24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DAE0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100228E90(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DC20);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100009F04((uint64_t *)&unk_100325850);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10022901C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1002291BC(a1, a2, a3, a4, (uint64_t *)&unk_10032DB90, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10022903C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DBB8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10022919C(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1002291BC(a1, a2, a3, a4, &qword_100328A28, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_1002291BC(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100009F04(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100229404(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DBC0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100229554(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100009F04(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    void v13[2] = v11;
    _OWORD v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_100009F04(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002296E4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_1003289D8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[72 * v8] || v12 >= &v13[72 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100229870(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04(&qword_10032DB50);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    id v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100229B98(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04((uint64_t *)&unk_10032DAC0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    BOOL v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_errorRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100229EB0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04(&qword_10032DB10);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100013140(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10022A1C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04(&qword_10032C6C0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100009F48(v24, v35);
      }
      else
      {
        sub_100047DD4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100009F48(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022A4C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04((uint64_t *)&unk_10032DBA0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022A794(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100009F04(&qword_10032DC28);
  int v48 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  char v42 = v2;
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v50 = v9;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v46 = v10;
  uint64_t v47 = v6;
  uint64_t v51 = v5;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    int64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v48)
    {
      (*v49)(v50, v29, v51);
      uint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
    }
    else
    {
      (*v45)(v50, v29, v51);
      id v33 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v31 = *v33;
      unint64_t v32 = v33[1];
      sub_100013140(*v33, v32);
    }
    sub_10022FF54((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v47;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v6 = v47;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v20 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v49)(*(void *)(v12 + 48) + v28 * v20, v50, v51);
    unint64_t v21 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v20);
    *unint64_t v21 = v31;
    v21[1] = v32;
    ++*(void *)(v12 + 16);
    uint64_t v10 = v46;
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v25 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v25, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v25 = -1 << v41;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_10022ABDC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100009F04(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  unint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    id v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_10022AEE8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04(&qword_100328488);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10022B1F4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100009F04(&qword_10032DC08);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}