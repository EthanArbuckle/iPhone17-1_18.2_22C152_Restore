uint64_t sub_100005338()
{
  uint64_t vars8;

  sub_100008AF8();

  return swift_deallocClassInstance();
}

uint64_t sub_100005390@<X0>(uint64_t *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)AKCustodianController) init];
  a1[3] = type metadata accessor for CustodianIDMSRequestManager();
  v3 = sub_10003584C(a1);
  sub_100009F04((uint64_t *)&unk_100322530);
  uint64_t result = Dependency.init(dependencyId:config:)();
  uint64_t *v3 = (uint64_t)v2;
  return result;
}

uint64_t sub_100005420@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t result = swift_allocObject();
  a2[3] = v3;
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AAAppleIDAuthenticationController()
{
  return self;
}

uint64_t sub_1000054C0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100005580()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10000566C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage;
  uint64_t v2 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianFetcher;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003245B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1000057A0()
{
  return swift_deallocClassInstance();
}

void sub_100005838(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), (unint64_t *)&qword_100324640);
}

void sub_100005864(objc_class *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  Class isa = a1;
  if (a1)
  {
    sub_10000850C(0, a4);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v7 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_100005908@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RecoveryFactorsController();
  uint64_t v3 = swift_allocObject();
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACC0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  uint64_t result = Dependency.init(dependencyId:config:)();
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for RecoveryFactorsController()
{
  uint64_t result = qword_1003261E8;
  if (!qword_1003261E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100005A30()
{
  swift_slowDealloc();
  swift_bridgeObjectRelease();

  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__setupFinalizationHandler;
  uint64_t v2 = sub_100009F04(&qword_100329458);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__authController;
  uint64_t v4 = sub_100009F04(&qword_100329460);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation));

  return swift_deallocClassInstance();
}

uint64_t sub_100005B9C()
{
  v1[26] = v0;
  sub_100009F04((uint64_t *)&unk_100321CE0);
  v1[27] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[28] = v2;
  v1[29] = *(void *)(v2 - 8);
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for CustodianRecord();
  v1[32] = v3;
  v1[33] = *(void *)(v3 - 8);
  v1[34] = swift_task_alloc();
  uint64_t v4 = sub_100009F04(&qword_100324688);
  v1[35] = v4;
  v1[36] = *(void *)(v4 - 8);
  v1[37] = swift_task_alloc();
  uint64_t v5 = sub_100009F04(&qword_100321FF8);
  v1[38] = v5;
  v1[39] = *(void *)(v5 - 8);
  v1[40] = swift_task_alloc();
  uint64_t v6 = sub_100009F04(&qword_100325870);
  v1[41] = v6;
  v1[42] = *(void *)(v6 - 8);
  v1[43] = swift_task_alloc();
  return _swift_task_switch(sub_1000069E4, 0, 0);
}

uint64_t type metadata accessor for CustodianRecord()
{
  uint64_t result = qword_100324DE0;
  if (!qword_100324DE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100005E64()
{
  sub_100005EBC();

  return swift_deallocClassInstance();
}

uint64_t sub_100005EBC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100322970);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage;
  uint64_t v6 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__idmsRequestController;
  uint64_t v8 = sub_100009F04(&qword_1003229A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__storageController;
  uint64_t v10 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__messenger;
  uint64_t v12 = sub_100009F04(&qword_100322958);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage;
  uint64_t v14 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__urlBagProvider;
  uint64_t v18 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__followUpController;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsEventFactory;
  uint64_t v22 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter;
  uint64_t v24 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  swift_release();

  return v0;
}

id sub_10000625C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DaemonAccountStore();
  uint64_t v3 = swift_allocObject();
  id result = [self defaultStore];
  if (result)
  {
    *(void *)(v3 + 16) = result;
    id result = [self sharedInstance];
    *(void *)(v3 + 24) = result;
    a1[3] = v2;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for DaemonAccountStore()
{
  return self;
}

uint64_t sub_100006574(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100009F04(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000065D0@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a1(0);
  swift_allocObject();
  uint64_t result = a2();
  a3[3] = v5;
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for DaemonCustodianIdMSConfirmationHandler()
{
  uint64_t result = qword_100329248;
  if (!qword_100329248) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_100006678()
{
  v11[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v11[0] - 8);
  __chkstk_darwin(v11[0], v2);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  v0[2] = 0;
  v0[3] = [objc_allocWithZone((Class)NSOperationQueue) init];
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  v11[1] = &_swiftEmptyArrayStorage;
  sub_1000094E8((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11[0]);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100009F04(&qword_100329260);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D760);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  *(void *)((char *)v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  v0[5] = v9;
  *uint64_t v9 = 0;
  return v0;
}

uint64_t sub_10000698C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CustodianKeyRepair(uint64_t a1)
{
  return sub_10000698C(a1, qword_100322448);
}

uint64_t sub_1000069E4()
{
  uint64_t v2 = v0[42];
  uint64_t v1 = v0[43];
  uint64_t v3 = v0[41];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[26] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v4 = [*(id *)(*sub_100008EF8(v0 + 2, v0[5]) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)(v0 + 2));
  if (v4)
  {
    uint64_t v6 = v0[39];
    uint64_t v5 = v0[40];
    uint64_t v7 = v0[38];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v0[26] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v8 = *sub_100008EF8(v0 + 17, v0[20]);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[44] = v9;
    uint64_t v10 = sub_100009F04(&qword_10032BD50);
    *uint64_t v9 = v0;
    v9[1] = sub_1001EBED8;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 22, 0, 0, 0xD000000000000011, 0x800000010029FE30, sub_1001F1BF4, v8, v10);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E748);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not logged in to AppleAccount, unable to fetch", v14, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    v0[23] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

void sub_100006DA8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_100006DF0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032C6C0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100263D28(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10007FF10(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100009F48(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for AACustodianError(uint64_t a1)
{
}

uint64_t sub_100006F30(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006F74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006FBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007004(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000704C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007094(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000070DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007124(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000716C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000071B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000071FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007244(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100007288(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000072C0(uint64_t a1, char a2)
{
  return sub_1000072D0(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000072D0(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_100325870);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  BOOL v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v34 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v23, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error fetching BeneficiaryInfoRecords : %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(a1, 1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController__accountStore, v9);
    swift_bridgeObjectRetain();
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    id v14 = [*(id *)(*sub_100008EF8(v35, v35[3]) + 16) aa_primaryAppleAccount];
    uint64_t v15 = v14;
    if (v14)
    {
      id v16 = [v14 aa_altDSID];

      if (v16)
      {
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    sub_100008EA8((uint64_t)v35);
    sub_100007850(a1, 0);
    v26 = sub_1000F0764(a1, v17, (uint64_t)v15);
    swift_bridgeObjectRelease();
    sub_100007844(a1, 0);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain();
    sub_100007850(a1, 0);
    swift_bridgeObjectRetain();
    v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134218240;
      uint64_t v31 = *(void *)(a1 + 16);
      sub_100007844(a1, 0);
      v35[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100007844(a1, 0);
      *(_WORD *)(v30 + 12) = 2048;
      uint64_t v32 = v26[2];
      swift_bridgeObjectRelease();
      v35[0] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully fetched %ld\nBeneficiaryInfoRecords of which %ld are beneficiaries", (uint8_t *)v30, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100007844(a1, 0);
      sub_100007844(a1, 0);

      swift_bridgeObjectRelease();
    }
    a3((uint64_t)v26, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100007844(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100007850(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_10000785C(uint64_t a1, char a2)
{
  return sub_100007868(a1, a2 & 1, *(void (**)(void, uint64_t))(v2 + 16));
}

uint64_t sub_100007868(uint64_t a1, char a2, void (*a3)(void, uint64_t))
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6 - 8, v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  id v14 = (char *)&v26 - v13;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    swift_errorRetain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      unint64_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      uint64_t v27 = (void *)v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v24 = v25;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error fetching beneficiaries from storage: %@", v23, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    id v16 = &_swiftEmptyArrayStorage;
    if (v15)
    {
      v26 = a3;
      uint64_t v27 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_10000850C(0, (unint64_t *)&qword_100325990);
      uint64_t v17 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      uint64_t v18 = *(void *)(v7 + 72);
      do
      {
        sub_1000D9320(v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_1000D9320((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        sub_100018B7C((uint64_t)v11);
        sub_1000D93F0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v17 += v18;
        --v15;
      }
      while (v15);
      a3 = v26;
      id v16 = v27;
    }
    a3(v16, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for BeneficiaryInfoRecord()
{
  uint64_t result = qword_100321730;
  if (!qword_100321730) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100007C2C(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), (unint64_t *)&qword_100325990);
}

uint64_t sub_100007C58()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, &qword_100321610, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_1002A9CC0, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_100168790, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_100007DD4(void *a1, void *a2)
{
  if ((sub_100008594(a2) & 1) == 0)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E700);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_23;
    }
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Client does not have any valid entitlemnts.", v25, 2u);
LABEL_22:
    swift_slowDealloc();
LABEL_23:

    return 0;
  }
  sub_10000850C(0, (unint64_t *)&unk_10032AC90);
  uint64_t v5 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  id v6 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener);
  char v7 = static NSObject.== infix(_:_:)();

  if ((v7 & 1) == 0)
  {
    id v8 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100007288(v39, (uint64_t)qword_10033E700);
      id v40 = a1;
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v23, v41))
      {

        return 0;
      }
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = (void *)swift_slowAlloc();
      *(_DWORD *)v42 = 138412290;
      v47[0] = v40;
      id v44 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v43 = v40;

      _os_log_impl((void *)&_mh_execute_header, v23, v41, "Fatal error! Unknown XPC listener: %@", v42, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_22;
    }
  }
  id v10 = *(id *)(v2 + v5);
  char v11 = static NSObject.== infix(_:_:)();

  if (v11)
  {
    uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer);
    uint64_t v48 = type metadata accessor for CustodianDaemonContainer();
    v49 = &off_100301A78;
    v47[0] = v12;
    type metadata accessor for CustodianDaemonService();
    uint64_t v13 = (void *)swift_allocObject();
    uint64_t v14 = sub_1000084BC((uint64_t)v47, v48);
    __chkstk_darwin(v14, v14);
    id v16 = (void *)((char *)&v47[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    uint64_t v18 = *v16;
    swift_retain_n();
    id v19 = a2;
    uint64_t v20 = sub_1001B92D0(v18, v19, v13);

    sub_100008EA8((uint64_t)v47);
    swift_release();
    [v19 setExportedObject:v20];
    id v21 = [self XPCInterface];
    [v19 setExportedInterface:v21];

    [v19 resume];
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  id v26 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener);
  char v27 = static NSObject.== infix(_:_:)();

  if (v27)
  {
    type metadata accessor for AccountUserNotificationDaemonService();
    uint64_t v28 = swift_allocObject();
    id v29 = a2;
    sub_100009F04((uint64_t *)&unk_10032ACA0);
    Dependency.init(dependencyId:config:)();
    *(void *)(v28 + 16) = v29;
    [v29 setExportedObject:v28];
    id v30 = [self XPCInterface];
    [v29 setExportedInterface:v30];

    [v29 resume];
    goto LABEL_12;
  }
LABEL_13:
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100007288(v31, (uint64_t)qword_10033E700);
  id v32 = a2;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = (void *)swift_slowAlloc();
    *(_DWORD *)v35 = 138412290;
    v47[0] = v32;
    id v37 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v36 = v32;

    _os_log_impl((void *)&_mh_execute_header, v33, v34, "New connection accepted: %@", v35, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    uint64_t v38 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    return 1;
  }
  return v38;
}

uint64_t type metadata accessor for CustodianDaemonContainer()
{
  return self;
}

uint64_t sub_1000084BC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000850C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for CustodianDaemonService()
{
  uint64_t result = qword_100323FE0;
  if (!qword_100323FE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100008594(void *a1)
{
  uint64_t v1 = 8;
  unint64_t v3 = &off_1002F41F8;
  do
  {
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [a1 valueForEntitlement:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v8, 0, sizeof(v8));
    }
    sub_1000086C4((uint64_t)v8, (uint64_t)v9);
    if (v10)
    {
      if (swift_dynamicCast() & 1) != 0 && (v7) {
        return 1;
      }
    }
    else
    {
      sub_100058764((uint64_t)v9);
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  return 0;
}

uint64_t sub_1000086C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100328490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008810(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  char v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v23 - v13;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E760);
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching stored BeneficiaryInfoRecords...", v18, 2u);
    swift_slowDealloc();
  }

  id v19 = sub_100008EF8((void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  id v21 = (void *)swift_allocObject();
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = v3;
  sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  swift_retain();
  swift_retain();
  sub_10000A7D0((uint64_t)v14, (uint64_t)sub_1000072C0, (uint64_t)v21);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v6);
}

uint64_t sub_100008A94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100008AF8()
{
  sub_100008EA8(v0 + 16);

  sub_100008EA8(v0 + 64);
  sub_100008EA8(v0 + 104);
  sub_100008EA8(v0 + 144);
  sub_100008EA8(v0 + 184);
  sub_100008EA8(v0 + 224);
  sub_100008EA8(v0 + 264);
  sub_100008EA8(v0 + 304);
  sub_100008EA8(v0 + 344);
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 392);
  sub_100008EA8(v0 + 432);
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__healthCheckScheduler;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__preflightScheduler;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003245D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__recoveryFactorsController;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_1003245F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__cloudStorage;
  uint64_t v8 = sub_100009F04(&qword_100324680);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__idmsHandler;
  uint64_t v10 = sub_100009F04(&qword_100324688);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__syncManager;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianFetcher;
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_1003245B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__keyRepair;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100328400);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianPreflight;
  uint64_t v18 = sub_100009F04((uint64_t *)&unk_1003245E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory;
  uint64_t v20 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter;
  uint64_t v22 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  return v0;
}

uint64_t sub_100008EA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *sub_100008EF8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100008F3C()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v12 = *(void *)(v1 - 8);
  uint64_t v13 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322460);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322480);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224A0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224B0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100320D40);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321900);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_1003224C0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100322530);
  Dependency.init(dependencyId:config:)();
  *(void *)(v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair____lazy_storage___custodianDefaults) = 0;
  uint64_t v9 = OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair_repairSerialQueue;
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = &_swiftEmptyArrayStorage;
  sub_100009458((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v13);
  *(void *)(v0 + v9) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

unint64_t sub_1000093D0()
{
  unint64_t result = qword_10032A860;
  if (!qword_10032A860)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10032A860);
  }
  return result;
}

uint64_t sub_100009410(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009458(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000094A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000094E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009530(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009578(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000095C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000112CC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009610(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000112CC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100009654()
{
  sub_100009D78();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
  uint64_t v1 = sub_10000850C(0, (unint64_t *)&qword_100325990);
  *(void *)(inited + 32) = v1;
  uint64_t v2 = sub_10000850C(0, &qword_1003283D0);
  *(void *)(inited + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(inited);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002A9F00;
  uint64_t v4 = sub_10000850C(0, (unint64_t *)&unk_100325A10);
  *(void *)(v3 + 32) = v4;
  uint64_t v5 = sub_10000850C(0, (unint64_t *)&qword_100321D00);
  *(void *)(v3 + 40) = v5;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v3);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002A9F00;
  uint64_t v7 = sub_10000850C(0, &qword_100325A20);
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v6);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002A9F00;
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v8);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_1002A9C00;
  *(void *)(v9 + 32) = v4;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v9);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002A9F00;
  uint64_t v11 = sub_10000850C(0, &qword_100325A28);
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v10);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002A9C00;
  *(void *)(v12 + 32) = v4;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v12);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_1002A9F00;
  *(void *)(v13 + 32) = v11;
  *(void *)(v13 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v13);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002A9F00;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v14);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1002A9F00;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v15);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1002A9C00;
  *(void *)(v16 + 32) = v4;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v16);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1002A9C00;
  uint64_t v18 = sub_10000850C(0, &qword_100325988);
  *(void *)(v17 + 32) = v18;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v17);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1002A9F00;
  *(void *)(v19 + 32) = v11;
  *(void *)(v19 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v19);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1002A9F00;
  *(void *)(v20 + 32) = v11;
  *(void *)(v20 + 40) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v20);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_1002A9C00;
  *(void *)(v21 + 32) = v18;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v21);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v22 = swift_initStackObject();
  *(_OWORD *)(v22 + 16) = xmmword_1002A9F00;
  *(void *)(v22 + 32) = sub_10000850C(0, (unint64_t *)&unk_100325970);
  *(void *)(v22 + 40) = v5;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v22);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_1002A9C00;
  uint64_t v24 = sub_10000850C(0, (unint64_t *)&unk_100325A30);
  *(void *)(v23 + 32) = v24;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v23);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_1002A9C00;
  *(void *)(v25 + 32) = v1;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v25);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_1002A9C00;
  *(void *)(v26 + 32) = v24;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v26);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_1002A9C00;
  *(void *)(v27 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v27);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v28 = swift_initStackObject();
  *(_OWORD *)(v28 + 16) = xmmword_1002A9C00;
  *(void *)(v28 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v28);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v29 = swift_initStackObject();
  *(_OWORD *)(v29 + 16) = xmmword_1002A9C00;
  *(void *)(v29 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v29);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_1002A9C00;
  *(void *)(v30 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v30);
  swift_setDeallocating();
  sub_100009D78();
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1002A9C00;
  *(void *)(v31 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v31);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_100009D78();
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1002A9C00;
  *(void *)(v32 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v32);
  swift_setDeallocating();
  return swift_deallocClassInstance();
}

uint64_t sub_100009D78()
{
  uint64_t v0 = sub_100009F04(&qword_1003220C8);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_100328470;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_10032A258;
  }

  return sub_100009F04(v2);
}

void *sub_100009DD8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = &_swiftEmptyArrayStorage;
    sub_100009F58(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = &_swiftEmptyArrayStorage;
    do
    {
      sub_100009F04(&qword_1003220C8);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100009F58(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100009F58(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v2[2] = v6 + 1;
      sub_100009F48(&v8, &v2[4 * v6 + 4]);
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_100009F04(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

_OWORD *sub_100009F48(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100009F58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100009F78(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100009F78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100009F04(&qword_10032DC68);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(uint64_t a1)
{
  sub_100009DD8(a1);
  id v1 = objc_allocWithZone((Class)NSSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithArray:isa];

  static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for LocalCache()
{
  return self;
}

uint64_t sub_10000A280()
{
  uint64_t v0 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v0 - 8, v1);
  id v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self defaultManager];
  id v10 = [v9 URLsForDirectory:5 inDomains:1];

  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v11 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v3, v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1000B4848((uint64_t)v3);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

unint64_t sub_10000A534()
{
  unint64_t result = qword_1003229C0;
  if (!qword_1003229C0)
  {
    sub_1000112CC(&qword_10032BB00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003229C0);
  }
  return result;
}

uint64_t sub_10000A590(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A5D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A620(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A668(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A6B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A6F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A788(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000A7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9518, (uint64_t)sub_100007C58, (uint64_t)&unk_1002F9530);
}

uint64_t sub_10000A810()
{
  return swift_release();
}

uint64_t sub_10000A818()
{
  return swift_release();
}

uint64_t sub_10000A820()
{
  return swift_release();
}

uint64_t sub_10000A828()
{
  return swift_release();
}

uint64_t sub_10000A830()
{
  return swift_release();
}

uint64_t sub_10000A838()
{
  return swift_release();
}

uint64_t sub_10000A840()
{
  return swift_release();
}

uint64_t sub_10000A848()
{
  return swift_release();
}

uint64_t sub_10000A850()
{
  return swift_release();
}

uint64_t sub_10000A858()
{
  return swift_release();
}

uint64_t sub_10000A860()
{
  return swift_release();
}

uint64_t sub_10000A868()
{
  return swift_release();
}

uint64_t sub_10000A870()
{
  return swift_release();
}

uint64_t sub_10000A878()
{
  return swift_release();
}

uint64_t sub_10000A880()
{
  return swift_release();
}

uint64_t sub_10000A888()
{
  return swift_release();
}

uint64_t sub_10000A890()
{
  return swift_release();
}

uint64_t sub_10000A898()
{
  return swift_release();
}

uint64_t sub_10000A8A0()
{
  return swift_release();
}

uint64_t sub_10000A8A8()
{
  return swift_release();
}

uint64_t sub_10000A8B0()
{
  return swift_release();
}

uint64_t sub_10000A8B8()
{
  return swift_release();
}

uint64_t sub_10000A8C0()
{
  return swift_release();
}

uint64_t sub_10000A8C8()
{
  return swift_release();
}

uint64_t sub_10000A8D0()
{
  return swift_release();
}

uint64_t sub_10000A8D8()
{
  return swift_release();
}

uint64_t sub_10000A8E0()
{
  return swift_release();
}

uint64_t sub_10000A8E8()
{
  return swift_release();
}

uint64_t sub_10000A8F0()
{
  return swift_release();
}

uint64_t sub_10000A8F8()
{
  return swift_release();
}

uint64_t sub_10000A900()
{
  return swift_release();
}

uint64_t sub_10000A908()
{
  return swift_release();
}

uint64_t sub_10000A910()
{
  return swift_release();
}

uint64_t sub_10000A918()
{
  return swift_release();
}

uint64_t sub_10000A920()
{
  return swift_release();
}

uint64_t sub_10000A928()
{
  return swift_release();
}

uint64_t sub_10000A930()
{
  return swift_release();
}

uint64_t sub_10000A938()
{
  return swift_release();
}

uint64_t sub_10000A940()
{
  return swift_release();
}

uint64_t sub_10000A948()
{
  return swift_release();
}

uint64_t sub_10000A950()
{
  return swift_release();
}

uint64_t sub_10000A958()
{
  return swift_release();
}

uint64_t sub_10000A960()
{
  return swift_release();
}

uint64_t sub_10000A968()
{
  return swift_release();
}

uint64_t sub_10000A970()
{
  return swift_release();
}

uint64_t sub_10000A978()
{
  return swift_release();
}

uint64_t sub_10000A980()
{
  return swift_release();
}

uint64_t sub_10000A988()
{
  return swift_release();
}

uint64_t sub_10000A990()
{
  return swift_release();
}

uint64_t sub_10000A998()
{
  return swift_release();
}

uint64_t sub_10000A9A0()
{
  return swift_release();
}

uint64_t sub_10000A9A8()
{
  return swift_release();
}

uint64_t sub_10000A9B0()
{
  return swift_release();
}

uint64_t sub_10000A9B8()
{
  return swift_release();
}

uint64_t sub_10000A9C0()
{
  return swift_release();
}

uint64_t sub_10000A9C8()
{
  return swift_release();
}

uint64_t sub_10000A9D0()
{
  return swift_release();
}

uint64_t sub_10000A9D8()
{
  return swift_release();
}

uint64_t sub_10000A9E0()
{
  return swift_release();
}

uint64_t sub_10000A9E8()
{
  return swift_release();
}

uint64_t sub_10000A9F0()
{
  return swift_release();
}

uint64_t sub_10000A9F8()
{
  return swift_release();
}

uint64_t sub_10000AA08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AA98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ABF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000AD98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ADA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ADB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ADC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000ADD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

void sub_10000ADEC(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10000ADF8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10000AE00()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000AE10@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000065D0((uint64_t (*)(void))type metadata accessor for DaemonCustodianIdMSConfirmationHandler, (uint64_t (*)(void))sub_100006678, a1);
}

uint64_t sub_10000AE3C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100005420((uint64_t (*)(void))type metadata accessor for AAAppleIDAuthenticationController, a1);
}

uint64_t sub_10000AE54()
{
  return swift_deallocClassInstance();
}

uint64_t sub_10000AE64@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000065D0(type metadata accessor for CustodianKeyRepair, sub_100008F3C, a1);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v4 = type metadata accessor for AppleAccountDaemon();
  swift_allocObject();
  uint64_t v5 = sub_1001B1A90();
  qword_100320B28 = v4;
  unk_100320B30 = &off_1002FF4C0;
  qword_100320B10 = v5;
  sub_1001B3BE4();
  id v7 = [self currentRunLoop];
  [v7 run];

  return 0;
}

uint64_t variable initialization expression of OSActivity.activityState()
{
  return 0;
}

uint64_t variable initialization expression of InheritanceSecurityController._accountStore()
{
  sub_100009F04((uint64_t *)&unk_100321920);

  return Dependency.init(dependencyId:config:)();
}

uint64_t variable initialization expression of InheritanceSecurityController._urlBagProvider()
{
  sub_100009F04(&qword_100320D40);

  return Dependency.init(dependencyId:config:)();
}

uint64_t sub_10000B074(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321028, type metadata accessor for AACustodianRecoveryError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B0E0(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321028, type metadata accessor for AACustodianRecoveryError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B150(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000B1BC(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321110, type metadata accessor for AAError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B228(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321110, type metadata accessor for AAError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B294(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_10000B300()
{
  return *v0;
}

uint64_t sub_10000B308(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100320D70, type metadata accessor for InheritanceError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B374(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100320D70, type metadata accessor for InheritanceError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B3E0(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

NSNumber sub_10000B44C()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_10000B454(uint64_t a1, uint64_t a2)
{
  uint64_t result = static Int._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_10000B4A8(uint64_t a1, uint64_t a2)
{
  char v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_10000B500@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_10000B528(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_1003210D8, type metadata accessor for AACustodianError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B594(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_1003210D8, type metadata accessor for AACustodianError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B600(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000B66C(uint64_t a1, uint64_t a2)
{
  return sub_10000D3EC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000B690(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100320FF0, type metadata accessor for EscrowRecordError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B6FC(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100320FF0, type metadata accessor for EscrowRecordError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B768(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000B7D4(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321068, type metadata accessor for AASignInError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000B840(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321068, type metadata accessor for AASignInError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000B8AC(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_10000B918(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10000B920@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10000B934@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10000B948@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10000B95C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10000B98C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10000B9B8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10000B9DC(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10000B9F0(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10000BA04(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10000BA18@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10000BA2C(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000BA40(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10000BA54(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10000BA68()
{
  return *v0 == 0;
}

uint64_t sub_10000BA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10000BA90(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_10000BAA4(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_1003210A0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000BB10(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_1003210A0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000BB7C(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10000BBE8(uint64_t a1, uint64_t a2)
{
  return sub_10000D3EC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000BC0C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10000BC84(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10000BD04@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000BD4C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000BD5C(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000BDC8(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000BE34(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000BEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000BF44()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000BF54(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000BFC0(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C02C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000C0BC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10000C0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void *sub_10000C170@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_10000C180()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000C190(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C1FC(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C268(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000C2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000C374(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C3E0(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C44C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000C4DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000C558()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000C568(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C5D4(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C640(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000C6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000C74C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000C75C(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C7C8(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000C834(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000C8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000C940()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10000C950(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000C9BC(uint64_t a1)
{
  uint64_t v2 = sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000CA28(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10000CAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000CB34()
{
  return Hasher._finalize()();
}

uint64_t sub_10000CB94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000F200(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_10000CBD4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10000CBE0()
{
  sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000CC64()
{
  sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

BOOL sub_10000CCE8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000CCFC()
{
  sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000CD80()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10000CE3C()
{
  sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000CEC0()
{
  sub_10000D6A8(&qword_100321208, type metadata accessor for AAFollowUpIdentifier);
  sub_10000D6A8((unint64_t *)&unk_100321210, type metadata accessor for AAFollowUpIdentifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10000CF7C()
{
  sub_10000D6A8(&qword_100321158, type metadata accessor for AKTrustedContactsSyncOperation);
  sub_10000D6A8(&qword_100321160, type metadata accessor for AKTrustedContactsSyncOperation);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10000D038()
{
  sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000D0BC()
{
  sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000D140()
{
  sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t sub_10000D1C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10000D1F0()
{
  sub_10000D6A8((unint64_t *)&qword_100321168, type metadata accessor for AAFollowUpUserInfo);
  sub_10000D6A8(&qword_100321170, type metadata accessor for AAFollowUpUserInfo);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10000D2AC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000D2F4()
{
  sub_10000D6A8((unint64_t *)&qword_100321148, type metadata accessor for FileAttributeKey);
  sub_10000D6A8(&qword_100321150, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10000D3B0()
{
  return Int.hashValue.getter(*v0);
}

void sub_10000D3B8()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_10000D3E4(uint64_t a1)
{
  return static Hasher._hash(seed:_:)(a1, *v1);
}

uint64_t sub_10000D3EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10000D430()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000D484()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000D4F8()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

__n128 sub_10000D584(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000D594(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000D5B4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for InheritanceError(uint64_t a1)
{
}

uint64_t sub_10000D618()
{
  return sub_10000D6A8((unint64_t *)&unk_100320D60, type metadata accessor for InheritanceError);
}

uint64_t sub_10000D660()
{
  return sub_10000D6A8((unint64_t *)&unk_1003259A0, type metadata accessor for InheritanceError);
}

uint64_t sub_10000D6A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D6F0()
{
  return sub_10000D6A8(&qword_100320D70, type metadata accessor for InheritanceError);
}

uint64_t sub_10000D738()
{
  return sub_10000D6A8(&qword_100320D78, type metadata accessor for InheritanceError);
}

uint64_t sub_10000D780()
{
  return sub_10000D6A8(&qword_100320D80, type metadata accessor for InheritanceError);
}

uint64_t sub_10000D7C8()
{
  return sub_10000D6A8(&qword_100320D88, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_10000D824()
{
  return sub_10000D6A8(&qword_100320D90, type metadata accessor for Code);
}

unint64_t sub_10000D870()
{
  unint64_t result = qword_100320D98;
  if (!qword_100320D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320D98);
  }
  return result;
}

uint64_t sub_10000D8C4()
{
  return sub_10000D6A8((unint64_t *)&unk_100320DA0, type metadata accessor for Code);
}

uint64_t sub_10000D90C()
{
  return sub_10000D6A8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for RecoveryFactors(uint64_t a1)
{
}

void type metadata accessor for EscrowRecordError(uint64_t a1)
{
}

void type metadata accessor for AACustodianRecoveryError(uint64_t a1)
{
}

void type metadata accessor for AKRemoteDeviceRemovalReason(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for PCSGuitarfishFlags(uint64_t a1)
{
}

void type metadata accessor for AASignInError(uint64_t a1)
{
}

void type metadata accessor for AKTrustedContactsSyncOperation(uint64_t a1)
{
}

void type metadata accessor for AAFollowUpUserInfo(uint64_t a1)
{
}

void type metadata accessor for Status(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for AAError(uint64_t a1)
{
}

uint64_t sub_10000DA80()
{
  return sub_10000D6A8(&qword_100320EF8, type metadata accessor for AAError);
}

uint64_t sub_10000DAC8()
{
  return sub_10000D6A8(&qword_100320F00, type metadata accessor for AAError);
}

uint64_t sub_10000DB10()
{
  return sub_10000D6A8(&qword_100320F08, type metadata accessor for AACustodianError);
}

uint64_t sub_10000DB58()
{
  return sub_10000D6A8(&qword_100320F10, type metadata accessor for AACustodianError);
}

uint64_t sub_10000DBA0()
{
  return sub_10000D6A8(&qword_100320F18, type metadata accessor for CKError);
}

uint64_t sub_10000DBE8()
{
  return sub_10000D6A8(&qword_100320F20, type metadata accessor for CKError);
}

uint64_t sub_10000DC30()
{
  return sub_10000D6A8(&qword_100320F28, type metadata accessor for Status);
}

uint64_t sub_10000DC78()
{
  return sub_10000D6A8(&qword_100320F30, type metadata accessor for Status);
}

uint64_t sub_10000DCC0()
{
  return sub_10000D6A8(&qword_100320F38, type metadata accessor for Status);
}

uint64_t sub_10000DD08()
{
  return sub_10000D6A8(&qword_100320F40, type metadata accessor for AAFollowUpUserInfo);
}

uint64_t sub_10000DD50()
{
  return sub_10000D6A8(&qword_100320F48, type metadata accessor for AAFollowUpUserInfo);
}

uint64_t sub_10000DD98()
{
  return sub_10000D6A8(&qword_100320F50, type metadata accessor for AKTrustedContactsSyncOperation);
}

uint64_t sub_10000DDE0()
{
  return sub_10000D6A8(&qword_100320F58, type metadata accessor for AKTrustedContactsSyncOperation);
}

uint64_t sub_10000DE28()
{
  return sub_10000D6A8(&qword_100320F60, type metadata accessor for AKTrustedContactsSyncOperation);
}

uint64_t sub_10000DE70()
{
  return sub_10000D6A8(&qword_100320F68, type metadata accessor for AASignInError);
}

uint64_t sub_10000DEB8()
{
  return sub_10000D6A8(&qword_100320F70, type metadata accessor for AASignInError);
}

uint64_t sub_10000DF00()
{
  return sub_10000D6A8(&qword_100320F78, type metadata accessor for PCSGuitarfishFlags);
}

uint64_t sub_10000DF48()
{
  return sub_10000D6A8(&qword_100320F80, type metadata accessor for PCSGuitarfishFlags);
}

uint64_t sub_10000DF90()
{
  return sub_10000D6A8(&qword_100320F88, type metadata accessor for PCSGuitarfishFlags);
}

uint64_t sub_10000DFD8()
{
  return sub_10000D6A8(&qword_100320F90, type metadata accessor for PCSGuitarfishFlags);
}

uint64_t sub_10000E020()
{
  return sub_10000D6A8(&qword_100320F98, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E068()
{
  return sub_10000D6A8(&qword_100320FA0, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E0B0()
{
  return sub_10000D6A8(&qword_100320FA8, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E0F8()
{
  return sub_10000D6A8(&qword_100320FB0, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E140()
{
  return sub_10000D6A8(&qword_100320FB8, type metadata accessor for RecoveryFactors);
}

uint64_t sub_10000E188()
{
  return sub_10000D6A8(&qword_100320FC0, type metadata accessor for RecoveryFactors);
}

uint64_t sub_10000E1D0()
{
  return sub_10000D6A8(&qword_100320FC8, type metadata accessor for RecoveryFactors);
}

uint64_t sub_10000E218()
{
  return sub_10000D6A8(&qword_100320FD0, type metadata accessor for RecoveryFactors);
}

uint64_t sub_10000E260()
{
  return sub_10000D6A8(&qword_100320FD8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000E2A8()
{
  return sub_10000D6A8(&qword_100320FE0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000E2F0()
{
  return sub_10000D6A8(&qword_100320FE8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10000E338()
{
  return sub_10000D6A8(&qword_100320FF0, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E380()
{
  return sub_10000D6A8(&qword_100320FF8, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E3C8()
{
  return sub_10000D6A8(&qword_100321000, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E410()
{
  return sub_10000D6A8(&qword_100321008, _s3__C4CodeOMa_5);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
}

uint64_t sub_10000E46C()
{
  return sub_10000D6A8(&qword_100321010, _s3__C4CodeOMa_5);
}

uint64_t sub_10000E4B4()
{
  return sub_10000D6A8(&qword_100321018, _s3__C4CodeOMa_5);
}

uint64_t sub_10000E4FC()
{
  return sub_10000D6A8(&qword_100321020, type metadata accessor for EscrowRecordError);
}

uint64_t sub_10000E544()
{
  return sub_10000D6A8(&qword_100321028, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E58C()
{
  return sub_10000D6A8(&qword_100321030, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E5D4()
{
  return sub_10000D6A8(&qword_100321038, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E61C()
{
  return sub_10000D6A8(&qword_100321040, _s3__C4CodeOMa_4);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
}

uint64_t sub_10000E678()
{
  return sub_10000D6A8(&qword_100321048, _s3__C4CodeOMa_4);
}

uint64_t sub_10000E6C0()
{
  return sub_10000D6A8((unint64_t *)&unk_100321050, _s3__C4CodeOMa_4);
}

uint64_t sub_10000E708()
{
  return sub_10000D6A8((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
}

uint64_t sub_10000E750()
{
  return sub_10000D6A8(&qword_100321060, type metadata accessor for AAFollowUpUserInfo);
}

uint64_t sub_10000E798()
{
  return sub_10000D6A8(&qword_100321068, type metadata accessor for AASignInError);
}

uint64_t sub_10000E7E0()
{
  return sub_10000D6A8(&qword_100321070, type metadata accessor for AASignInError);
}

uint64_t sub_10000E828()
{
  return sub_10000D6A8(&qword_100321078, type metadata accessor for AASignInError);
}

uint64_t sub_10000E870()
{
  return sub_10000D6A8(&qword_100321080, _s3__C4CodeOMa_3);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
}

uint64_t sub_10000E8CC()
{
  return sub_10000D6A8(&qword_100321088, _s3__C4CodeOMa_3);
}

uint64_t sub_10000E914()
{
  return sub_10000D6A8(&qword_100321090, _s3__C4CodeOMa_3);
}

uint64_t sub_10000E95C()
{
  return sub_10000D6A8((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);
}

uint64_t sub_10000E9A4()
{
  return sub_10000D6A8(&qword_1003210A0, type metadata accessor for CKError);
}

uint64_t sub_10000E9EC()
{
  return sub_10000D6A8(&qword_1003210A8, type metadata accessor for CKError);
}

uint64_t sub_10000EA34()
{
  return sub_10000D6A8(&qword_1003210B0, type metadata accessor for CKError);
}

uint64_t sub_10000EA7C()
{
  return sub_10000D6A8(&qword_1003210B8, _s3__C4CodeOMa_2);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_10000EAD8()
{
  return sub_10000D6A8(&qword_1003210C0, _s3__C4CodeOMa_2);
}

uint64_t sub_10000EB20()
{
  return sub_10000D6A8(&qword_1003210C8, _s3__C4CodeOMa_2);
}

uint64_t sub_10000EB68()
{
  return sub_10000D6A8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
}

uint64_t sub_10000EBB0()
{
  return sub_10000D6A8(&qword_1003210D8, type metadata accessor for AACustodianError);
}

uint64_t sub_10000EBF8()
{
  return sub_10000D6A8(&qword_1003210E0, type metadata accessor for AACustodianError);
}

uint64_t sub_10000EC40()
{
  return sub_10000D6A8(&qword_1003210E8, type metadata accessor for AACustodianError);
}

uint64_t sub_10000EC88()
{
  return sub_10000D6A8(&qword_1003210F0, _s3__C4CodeOMa_1);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_10000ECE4()
{
  return sub_10000D6A8(&qword_1003210F8, _s3__C4CodeOMa_1);
}

uint64_t sub_10000ED2C()
{
  return sub_10000D6A8((unint64_t *)&unk_100321100, _s3__C4CodeOMa_1);
}

uint64_t sub_10000ED74()
{
  return sub_10000D6A8((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
}

uint64_t sub_10000EDBC()
{
  return sub_10000D6A8(&qword_100321110, type metadata accessor for AAError);
}

uint64_t sub_10000EE04()
{
  return sub_10000D6A8(&qword_100321118, type metadata accessor for AAError);
}

uint64_t sub_10000EE4C()
{
  return sub_10000D6A8(&qword_100321120, type metadata accessor for AAError);
}

uint64_t sub_10000EE94()
{
  return sub_10000D6A8(&qword_100321128, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10000EEF0()
{
  return sub_10000D6A8(&qword_100321130, _s3__C4CodeOMa_0);
}

uint64_t sub_10000EF38()
{
  return sub_10000D6A8(&qword_100321138, _s3__C4CodeOMa_0);
}

uint64_t sub_10000EF80()
{
  return sub_10000D6A8((unint64_t *)&qword_100321140, type metadata accessor for AAError);
}

void type metadata accessor for WritingOptions(uint64_t a1)
{
}

void type metadata accessor for ParticipantPermission(uint64_t a1)
{
}

void type metadata accessor for AAFollowUpIdentifier(uint64_t a1)
{
}

uint64_t sub_10000F008()
{
  return sub_10000D6A8(&qword_1003211D0, type metadata accessor for AAFollowUpIdentifier);
}

uint64_t sub_10000F050()
{
  return sub_10000D6A8(&qword_1003211D8, type metadata accessor for AAFollowUpIdentifier);
}

uint64_t sub_10000F098()
{
  return sub_10000D6A8(&qword_1003211E0, type metadata accessor for AAFollowUpIdentifier);
}

uint64_t sub_10000F0E0()
{
  return sub_10000D6A8(&qword_1003211E8, type metadata accessor for WritingOptions);
}

uint64_t sub_10000F128()
{
  return sub_10000D6A8(&qword_1003211F0, type metadata accessor for WritingOptions);
}

uint64_t sub_10000F170()
{
  return sub_10000D6A8(&qword_1003211F8, type metadata accessor for WritingOptions);
}

uint64_t sub_10000F1B8()
{
  return sub_10000D6A8(&qword_100321200, type metadata accessor for WritingOptions);
}

uint64_t sub_10000F200(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void InheritanceSecurityController.contextForAccount(_:)()
{
}

BOOL sub_10000F2A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000F2BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000F304()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000F330()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for DaemonCDPFollowUpHandler()
{
  return self;
}

void sub_10000F398()
{
}

void sub_10000F3EC(char a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
      id v2 = [self contextForStateRepair];
      goto LABEL_8;
    case 2:
      id v2 = [self contextForConfirmExistingSecret];
      goto LABEL_8;
    case 3:
      id v2 = [self contextForOfflinePasscodeChange];
      goto LABEL_8;
    case 4:
      id v2 = [self contextForADPStateHealing];
      goto LABEL_8;
    default:
      if (a2)
      {
        id v2 = [self contextForWalrusCreatePasscodeWithCDPContext:a2];
LABEL_8:
        id v3 = v2;
        if (v3)
        {
          uint64_t v4 = v3;
          id v5 = objc_allocWithZone((Class)CDPFollowUpController);
          uint64_t v6 = v4;
          id v7 = [v5 init];
          id v15 = 0;
          if ([v7 postFollowUpWithContext:v6 error:&v15])
          {
            id v8 = v15;
          }
          else
          {
            id v13 = v15;
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }

          goto LABEL_18;
        }
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_100007288(v9, (uint64_t)qword_10033E700);
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v6, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          uint64_t v12 = "WalrusVerifyPasscode context nil, can't post followup!";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v6, v10, v12, v11, 2u);
          swift_slowDealloc();
        }
      }
      else
      {
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        sub_100007288(v14, (uint64_t)qword_10033E700);
        uint64_t v6 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v6, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v11 = 0;
          uint64_t v12 = "CDPContext nil, can't create followup context for create passcode.";
          goto LABEL_15;
        }
      }
LABEL_18:

      return;
  }
}

void sub_10000F6E8()
{
  id v0 = [objc_allocWithZone((Class)CDPFollowUpController) init];
  Swift::UInt v1 = self;
  id v2 = [v1 contextForConfirmExistingSecret];
  id v10 = 0;
  unsigned int v3 = [v0 clearFollowUpWithContext:v2 error:&v10];

  id v4 = v10;
  if (v3
    && (id v5 = v10,
        id v6 = [v1 contextForOfflinePasscodeChange],
        id v10 = 0,
        unsigned __int8 v7 = [v0 clearFollowUpWithContext:v6 error:&v10],
        v6,
        id v4 = v10,
        (v7 & 1) != 0))
  {
    id v8 = v10;
  }
  else
  {
    id v9 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10000F834()
{
  id v0 = [objc_allocWithZone((Class)CDPFollowUpController) init];
  id v1 = [objc_allocWithZone((Class)CDPContext) init];
  id v2 = [self contextForWalrusCreatePasscodeWithCDPContext:v1];

  id v6 = 0;
  unsigned __int8 v3 = [v0 clearFollowUpWithContext:v2 error:&v6];

  if (v3)
  {
    id v4 = v6;
  }
  else
  {
    id v5 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10000F954(char a1)
{
  id v2 = self;
  unsigned __int8 v3 = &selRef_contextForEDPStateRepair;
  if (a1) {
    unsigned __int8 v3 = &selRef_contextForCDPEDPStateRepair;
  }
  id v4 = [v2 *v3];
  id v5 = [objc_allocWithZone((Class)CDPFollowUpController) init];
  id v8 = 0;
  if ([v5 postFollowUpWithContext:v4 error:&v8])
  {
    id v6 = v8;
  }
  else
  {
    id v7 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10000FA64()
{
}

void sub_10000FAB8()
{
}

void sub_10000FB0C(SEL *a1)
{
  id v2 = [objc_allocWithZone((Class)CDPFollowUpController) init];
  id v3 = [self *a1];
  id v7 = 0;
  unsigned __int8 v4 = [v2 clearFollowUpWithContext:v3 error:&v7];

  if (v4)
  {
    id v5 = v7;
  }
  else
  {
    id v6 = v7;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for FollowUpType(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FollowUpType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FollowUpType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000FD6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_10000FD94(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000FDA0(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FollowUpType()
{
  return &type metadata for FollowUpType;
}

unint64_t sub_10000FDBC()
{
  unint64_t result = qword_100321358;
  if (!qword_100321358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321358);
  }
  return result;
}

void *sub_10000FE10()
{
  type metadata accessor for CustodianSessionManager();
  uint64_t v0 = swift_allocObject();
  unint64_t result = sub_100011068();
  qword_10033E6C0 = v0;
  return result;
}

uint64_t sub_10000FE4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v81 = a5;
  id v76 = a1;
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v87 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  id v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v86 = (char *)&v75 - v15;
  uint64_t v79 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v79, v16);
  v80 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for UUID();
  uint64_t v85 = *(void *)(v91 - 8);
  uint64_t v19 = __chkstk_darwin(v91, v18);
  v78 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = v20;
  __chkstk_darwin(v19, v21);
  v90 = (char *)&v75 - v22;
  uint64_t v23 = type metadata accessor for CustodianRecoveryData();
  uint64_t v25 = __chkstk_darwin(v23 - 8, v24);
  uint64_t v27 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v28);
  uint64_t v30 = (char *)&v75 - v29;
  uint64_t v89 = v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 32));
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v32 = sub_100007288(v31, (uint64_t)qword_10033E748);
  sub_100011ABC(a2, (uint64_t)v30);
  uint64_t v75 = v32;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v88 = v9;
  uint64_t v83 = a4;
  v84 = v13;
  uint64_t v82 = a3;
  if (v35)
  {
    v36 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)v36 = 136315138;
    uint64_t v37 = sub_100107BF4();
    uint64_t v94 = sub_100135190(v37, v38, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100011B20((uint64_t)v30);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Generating recovery session with data: %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100011B20((uint64_t)v30);
  }

  sub_100011ABC(a2, (uint64_t)v27);
  type metadata accessor for CustodianRecoverySession();
  swift_allocObject();
  uint64_t v39 = sub_100112A2C((uint64_t)v27);
  id v40 = *(os_unfair_lock_s **)(v39 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock);
  os_unfair_lock_lock(v40);
  sub_100112B78(v39);
  os_unfair_lock_unlock(v40);
  uint64_t v41 = v89;
  swift_beginAccess();
  swift_retain();
  sub_10027FC30(&v94, v39);
  swift_endAccess();
  swift_release();
  uint64_t v42 = 900;
  uint64_t v94 = 900;
  if (v76)
  {
    id v43 = v76;
    if ((uint64_t)[v43 maxSessionTime] < 1 || (uint64_t)objc_msgSend(v43, "maxSessionTime") > 7199)
    {

      uint64_t v42 = 900;
    }
    else
    {
      uint64_t v42 = (uint64_t)[v43 maxSessionTime];

      uint64_t v94 = v42;
    }
  }
  swift_retain_n();
  id v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315394;
    sub_100009410((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    v92 = (void *)sub_100135190(v47, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2048;
    v92 = (void *)v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Starting countdown for session with Id: %s of %ld seconds", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v49 = v89;
    swift_slowDealloc();

    uint64_t v50 = v85;
    v51 = v90;
  }
  else
  {

    swift_release_n();
    uint64_t v50 = v85;
    v51 = v90;
    uint64_t v49 = v41;
  }
  v52 = v78;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v54 = v91;
  v53(v51, v39 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, v91);
  uint64_t v55 = swift_allocObject();
  swift_weakInit();
  v53(v52, (uint64_t)v51, v54);
  unint64_t v56 = (*(unsigned __int8 *)(v50 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  unint64_t v57 = (v77 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = v55;
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v58 + v56, v52, v54);
  v59 = v81;
  *(void *)(v58 + v57) = v81;
  aBlock[4] = (uint64_t)sub_100011C9C;
  aBlock[5] = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100007244;
  aBlock[3] = (uint64_t)&unk_1002F4B38;
  _Block_copy(aBlock);
  v92 = _swiftEmptyArrayStorage;
  sub_100009410((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  id v60 = v59;
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v61 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  uint64_t v62 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask;
  *(void *)(v39 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask) = v61;
  swift_release();
  v63 = (uint64_t *)(v39 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  uint64_t v64 = *(void *)(v39 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  uint64_t v65 = v82;
  uint64_t v66 = v83;
  uint64_t *v63 = v82;
  v63[1] = v66;
  sub_100011D2C(v65);
  sub_100011358(v64);
  id v67 = *(id *)(v49 + 24);
  v68 = v84;
  static DispatchTime.now()();
  swift_beginAccess();
  v69 = v86;
  + infix(_:_:)();
  uint64_t v70 = v88;
  v71 = *(uint64_t (**)(char *, uint64_t))(v87 + 8);
  uint64_t result = v71(v68, v88);
  uint64_t v73 = *(void *)(v39 + v62);
  uint64_t v74 = v91;
  if (v73)
  {
    swift_retain();
    OS_dispatch_queue.asyncAfter(deadline:execute:)();

    swift_release();
    v71(v69, v70);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 32));
    (*(void (**)(char *, uint64_t))(v50 + 8))(v90, v74);
    return v39;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000107E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10001098C(a2, a3, 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100010860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)AACustodianRecoveryConfiguration) init];
  [v6 setMaxSessionTime:60];
  type metadata accessor for AACustodianRecoveryError(0);
  id v7 = v6;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_100009410((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v8 = sub_10000FE4C(v6, a1, a2, a3, v10);

  return v8;
}

void sub_10001098C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  id v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v37 - v15;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 32));
  uint64_t v42 = v4 + 16;
  swift_beginAccess();
  uint64_t v17 = *(void *)(v4 + 16);
  uint64_t v44 = a1;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10017E7F0((uint64_t (*)(uint64_t *))sub_100011314, (uint64_t)v43, v17);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 32));
  if (v18)
  {
    int v41 = a3;
    type metadata accessor for CustodianRecoverySession();
    uint64_t v19 = swift_dynamicCastClass();
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v40 = a2;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 32));
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007288(v21, (uint64_t)qword_10033E748);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a1, v8);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        v45[0] = v39;
        unint64_t v38 = v24;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v37 = v24 + 4;
        sub_100009410((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v46 = sub_100135190(v25, v26, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Terminating session with ID: %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      }

      uint64_t v33 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock);
      os_unfair_lock_lock(v33);
      uint64_t v34 = v40;
      if (*(void *)(v20 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction))
      {
        *(void *)(v20 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction) = 0;
        swift_unknownObjectRelease();
        os_unfair_lock_unlock(v33);
        if (*(void *)(v20 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask))
        {
          swift_retain();
          dispatch thunk of DispatchWorkItem.cancel()();
          swift_release();
        }
        BOOL v35 = *(void (**)(uint64_t, uint64_t))(v20
                                                      + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
        if (v35)
        {
          uint64_t v36 = v41 & 1;
          swift_retain();
          v35(v34, v36);
          sub_100011358((uint64_t)v35);
        }
        swift_beginAccess();
        sub_10001161C(v20);
        swift_endAccess();
        swift_release();
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 32));
        swift_release();
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_release();
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E748);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    sub_100009410((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_100135190(v31, v32, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Asked to terminate a session that was already terminated or not found: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
}

uint64_t sub_100010FC4()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100011004()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianSessionManager()
{
  return self;
}

void *sub_100011068()
{
  v11[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v11[0] - 8);
  __chkstk_darwin(v11[0], v2);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  v0[2] = &_swiftEmptySetSingleton;
  sub_1000093D0();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_100009410((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v11[0]);
  v0[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = (_DWORD *)swift_slowAlloc();
  *uint64_t v9 = 0;
  v0[4] = v9;
  return v0;
}

uint64_t sub_1000112CC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100011314()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100011358(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

Swift::Int sub_100011368(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100009F04(&qword_100321498);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CustodianRecoverySession();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v15;
        if (*(void *)(v15 + 24) <= *(void *)(v15 + 16))
        {
          sub_100280364();
          uint64_t v2 = v15;
        }
        Hasher.init(_seed:)();
        Swift::UInt v3 = ObjectIdentifier.hashValue.getter();
        Hasher._combine(_:)(v3);
        Swift::Int result = Hasher._finalize()();
        uint64_t v5 = v2 + 56;
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v7 = result & ~v6;
        unint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6))) != 0)
        {
          unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 56 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v8 == v11;
            if (v8 == v11) {
              unint64_t v8 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)(v5 + 8 * v8);
          }
          while (v13 == -1);
          unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        *(void *)(*(void *)(v2 + 48) + 8 * v9) = v14;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

unint64_t sub_100011574(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Swift::UInt v4 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v4);
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_10001161C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0) {
      uint64_t v4 = *v1;
    }
    else {
      uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    char v5 = __CocoaSet.contains(_:)();
    swift_release();
    if (v5)
    {
      uint64_t v6 = sub_1000117B4(v4, a1);
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Swift::UInt v7 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v7);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v3 + 48);
  if (*(void *)(v11 + 8 * v10) != a1)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_15;
      }
    }
    while (*(void *)(v11 + 8 * v10) != a1);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v1;
  uint64_t v16 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100281290();
    uint64_t v14 = v16;
  }
  uint64_t v6 = *(void *)(*(void *)(v14 + 48) + 8 * v10);
  sub_1000118FC(v10);
  *uint64_t v1 = v16;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000117B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = __CocoaSet.count.getter();
  uint64_t v5 = swift_unknownObjectRetain();
  Swift::Int v6 = sub_100011368(v5, v4);
  Swift::Int v15 = v6;
  Hasher.init(_seed:)();
  swift_retain();
  Swift::UInt v7 = ObjectIdentifier.hashValue.getter();
  Hasher._combine(_:)(v7);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v6 + 48);
    if (*(void *)(v11 + 8 * v10) == a2)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v6 + 48) + 8 * v10);
      sub_1000118FC(v10);
      if (v13 == a2)
      {
        *uint64_t v2 = v15;
        return a2;
      }
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v12;
        if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * v10) == a2) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000118FC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        Swift::UInt v10 = ObjectIdentifier.hashValue.getter();
        Hasher._combine(_:)(v10);
        Swift::Int v11 = Hasher._finalize()();
        swift_release();
        unint64_t v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 < v9) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(v3 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v2);
          Swift::Int v15 = (void *)(v13 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100011ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoveryData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100011B20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecoveryData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100011B7C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100011BB4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100011C9C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000107E8(v3, v0 + v2, v4);
}

uint64_t sub_100011D2C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100011D3C()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x676E697070617277;
  }
}

uint64_t sub_100011DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100012C4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100011DD8()
{
  return 0;
}

void sub_100011DE4(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100011DF0(uint64_t a1)
{
  unint64_t v2 = sub_100013098();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100011E2C(uint64_t a1)
{
  unint64_t v2 = sub_100013098();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100011E68(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_1003214B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_100013098();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  v11[15] = 0;
  sub_1000131F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

double sub_100012008@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100012DBC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10001204C(void *a1)
{
  return sub_100011E68(a1);
}

uint64_t sub_100012064(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  if ((sub_100012680(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }
  if (v2 == v6 && v3 == v7 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v10 & 1) != 0))
  {
    if (v4 == v8 && v5 == v9)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

id sub_10001214C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithBeneficiairyIdentifier:isa];

  id v7 = v6;
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  [v7 setWrappingKeyData:v8];

  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setWrappingKeyString:v9];

  NSString v10 = String._bridgeToObjectiveC()();
  [v7 setClaimTokenString:v10];

  sub_100013244(a2);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
  return v7;
}

uint64_t sub_10001227C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  id v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100013140(a2, a3);
      NSString v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1000124E0);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100013198(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      BOOL v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1000124F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10001227C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000125C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10001227C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100012680(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x1000128E8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100013140(a3, a4);
                  sub_100013140(a1, a2);
                  char v17 = sub_1000125C8((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_100013198(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100013140(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1000125C8(v21, v22, v20, a3, a4);
                  sub_100013198(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100013140(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100013140(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1000124F0(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_100013198(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100012918(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 wrappingKeyData];
  if (!v4)
  {

    uint64_t v5 = 0;
    unint64_t v7 = 0;
LABEL_8:
    uint64_t v10 = 0;
    id v8 = 0;
    goto LABEL_9;
  }
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  id v8 = [a1 wrappingKeyString];
  if (!v8)
  {

    sub_100013198(v5, v7);
    uint64_t v5 = 0;
    unint64_t v7 = 0;
    id v4 = 0;
    uint64_t v10 = 0;
LABEL_9:
    uint64_t v14 = 0;
    goto LABEL_10;
  }
  id v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  id v11 = [a1 claimTokenString];
  if (!v11)
  {
    swift_bridgeObjectRelease();

    sub_100013198(v5, v7);
    uint64_t v5 = 0;
    unint64_t v7 = 0;
    id v4 = 0;
    goto LABEL_8;
  }
  uint64_t v12 = v11;
  id v8 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

LABEL_10:
  *a2 = v5;
  a2[1] = v7;
  a2[2] = (uint64_t)v4;
  a2[3] = v10;
  a2[4] = (uint64_t)v8;
  a2[5] = v14;
}

uint64_t sub_100012A68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100013294();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_100013198(a1, a2);
  swift_release();
  sub_100013140(v7, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013198(v7, v8);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v9;
  a3[3] = v10;
  a3[4] = v11;
  a3[5] = v12;
  return result;
}

uint64_t sub_100012C4C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E697070617277 && a2 == 0xEF6174614479654BLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100299E00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100299E20)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100012DBC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100009F04(&qword_1003214A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100013098();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100008EA8((uint64_t)a1);
  }
  char v27 = 0;
  sub_1000130EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v25;
  unint64_t v10 = v26;
  LOBYTE(v25) = 1;
  sub_100013140(v11, v26);
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  LOBYTE(v25) = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v24 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v23 = v15;
  v18(v9, v5);
  sub_100013140(v11, v10);
  swift_bridgeObjectRetain();
  sub_100013198(v11, v10);
  sub_100008EA8((uint64_t)a1);
  sub_100013198(v11, v10);
  swift_bridgeObjectRelease();
  uint64_t v19 = v24;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v23;
  a2[5] = v17;
  return result;
}

unint64_t sub_100013098()
{
  unint64_t result = qword_1003214A8;
  if (!qword_1003214A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003214A8);
  }
  return result;
}

unint64_t sub_1000130EC()
{
  unint64_t result = qword_100323980;
  if (!qword_100323980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323980);
  }
  return result;
}

uint64_t sub_100013140(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100013198(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_1000131F0()
{
  unint64_t result = qword_100321660;
  if (!qword_100321660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321660);
  }
  return result;
}

uint64_t sub_100013244(uint64_t a1)
{
  return a1;
}

unint64_t sub_100013294()
{
  unint64_t result = qword_1003214B8;
  if (!qword_1003214B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003214B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InheritanceAccessKeyRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for InheritanceAccessKeyRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100013444);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyRecord.CodingKeys()
{
  return &type metadata for InheritanceAccessKeyRecord.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for InheritanceAccessKeyRecord(uint64_t a1)
{
  sub_100013198(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100013198(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for InheritanceAccessKeyRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100013198(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InheritanceAccessKeyRecord(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceAccessKeyRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyRecord()
{
  return &type metadata for InheritanceAccessKeyRecord;
}

unint64_t sub_1000136FC()
{
  unint64_t result = qword_1003214C0;
  if (!qword_1003214C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003214C0);
  }
  return result;
}

unint64_t sub_100013754()
{
  unint64_t result = qword_1003214C8;
  if (!qword_1003214C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003214C8);
  }
  return result;
}

unint64_t sub_1000137AC()
{
  unint64_t result = qword_1003214D0;
  if (!qword_1003214D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003214D0);
  }
  return result;
}

uint64_t sub_100013800(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  sub_100009F04((uint64_t *)&unk_100325DA0);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100325EA0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002A9C00;
  uint64_t v8 = type metadata accessor for AppleIDAvailabilityHealthCheck();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  sub_100009F04((uint64_t *)&unk_100321900);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321910);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, (unint64_t *)&qword_100321930);
  Dependency.init(dependencyId:config:)();
  sub_10000850C(0, &qword_1003215E8);
  Dependency.init(dependencyId:config:)();
  unint64_t v10 = (void *)(v9 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck_reportEvent);
  *unint64_t v10 = a1;
  v10[1] = a2;
  *(void *)(v7 + 56) = v8;
  *(void *)(v7 + 64) = &off_1003009A8;
  *(void *)(v7 + 32) = v9;
  uint64_t v23 = v7;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E778);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100009F04(&qword_1003215F0);
    uint64_t v15 = Array.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_100135190(v15, v17, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "activities: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v18 = v23;
  type metadata accessor for AppleIDAvailabilityActivityProvider();
  uint64_t v19 = swift_allocObject();
  swift_bridgeObjectRetain();
  Dependency.init(dependencyId:config:)();
  *(void *)(v19 + 16) = v18;
  *(unsigned char *)(v19 + 24) = a3 & 1;
  swift_release();
  *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider) = v19;
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100013C20()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8, v3);
  unint64_t v5 = (char *)&v33[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321600);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v33[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E778);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Scheduling Apple ID Availability activity", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v1 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler__xpcActivityScheduler, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v15 = sub_100008EF8(v33, v33[3]);
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider);
  uint64_t v17 = *v15;
  swift_retain_n();
  uint64_t v18 = static String._fromUTF8Repairing(_:)();
  uint64_t v20 = v19;
  if (*(unsigned char *)(v16 + 24) == 1)
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Time interval for AppleID Availability activity is being overridden.", v23, 2u);
      swift_slowDealloc();
    }

    unint64_t v24 = 60;
  }
  else
  {
    unint64_t v24 = 86400;
  }
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  swift_bridgeObjectRetain();
  static DispatchQoS.background.getter();
  uint64_t v26 = swift_allocObject();
  *(_WORD *)(v26 + 16) = 257;
  *(void *)(v26 + 24) = v24 >> 1;
  *(void *)(v26 + 32) = v24 >> 1;
  *(void *)(v26 + 40) = v24;
  *(void *)(v26 + 48) = 8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_100014B10;
  *(void *)(v27 + 24) = v25;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain();
  uint64_t v28 = sub_100033778(v18, v20, (uint64_t)v5, (uint64_t)sub_100014B28, v26, (uint64_t)sub_100014B30, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v17 + 16) = v28;
  swift_release();
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for OSTransaction();
  swift_allocObject();
  uint64_t v30 = sub_100104754("com.apple.appleaccountd.appleid.availability", 44, 2);
  sub_1001DDECC(v30, v29);
  swift_release_n();
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v33);
}

uint64_t sub_10001409C(void (*a1)(NSObject *), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v28[0] = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E778);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting on-demand Apple ID Availability activity", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a1;
  *(void *)(v23 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v22 + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore, v6);
  swift_retain_n();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v24 = [*(id *)(*sub_100008EF8(v29, v29[3]) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)v29);
  if (v24)
  {
    sub_1000A6064(0, v28[0], v17, (uint64_t)sub_100014738, v23);
    swift_release();
    swift_release();
  }
  else
  {
    sub_100009F04(&qword_1003215F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = 0x72456E496E676953;
    *(void *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    v28[1] = -8014;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100014A90((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *(void *)(inited + 48) = v29[0];
    unint64_t v26 = sub_100220B90(inited);
    sub_100014744(v26, a1);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000144B8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler__xpcActivityScheduler;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10001456C()
{
  return type metadata accessor for AppleIDAvailabilityScheduler();
}

uint64_t type metadata accessor for AppleIDAvailabilityScheduler()
{
  uint64_t result = qword_100321510;
  if (!qword_100321510) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000145C0()
{
  sub_10001465C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10001465C()
{
  if (!qword_100321520)
  {
    sub_1000112CC((uint64_t *)&unk_100325DA0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100321520);
    }
  }
}

uint64_t sub_1000146B8()
{
  return sub_100013C20();
}

uint64_t sub_1000146DC(void (*a1)(NSObject *), uint64_t a2)
{
  return sub_10001409C(a1, a2);
}

uint64_t sub_100014700()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100014738(uint64_t a1, uint64_t a2)
{
  sub_100014744(a2, *(void (**))(v2 + 16));
}

void sub_100014744(uint64_t a1, void (*a2)(NSObject *))
{
  if (*(void *)(a1 + 16))
  {
    type metadata accessor for AAError(0);
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = a1;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_100014A90((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E778);
    uint64_t v7 = v17;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v10 = 138412290;
      uint64_t v18 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v18;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Overall on-demand Apple ID Availability activity failed: %@", v10, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v8 = v7;
    }

    uint64_t v16 = v7;
    a2(v7);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Overall on-demand Apple ID Availability activity completed.", v15, 2u);
      swift_slowDealloc();
    }

    a2(0);
  }
}

uint64_t sub_100014A90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100014AD8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_100014B10(uint64_t a1)
{
  return sub_1000A58EC(a1);
}

uint64_t sub_100014B18()
{
  return _swift_deallocObject(v0, 56, 7);
}

double sub_100014B28@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10004BFFC(v1 + 16, a1).n128_u64[0];
  return result;
}

uint64_t sub_100014B30(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1001DE324(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100014B40@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v7 = a3 + v6[11];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  os_log_type_t v9 = (void *)(a3 + v6[12]);
  *os_log_type_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = a3 + v6[13];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = (void *)(a3 + v6[14]);
  *uint64_t v11 = 0;
  v11[1] = 0;
  id v12 = [a1 accessKey];
  if (v12)
  {
    id v13 = v12;
    sub_100012918(v13, v38);
    sub_1000190C0((uint64_t)v38, (uint64_t)&v39);
    if (*((void *)&v40 + 1))
    {
      long long v42 = v39;
      long long v43 = v40;
      long long v44 = v41;
      id v14 = [a1 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      sub_1000197DC();
      uint64_t v15 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      uint64_t v17 = v16;
      swift_release();
      uint64_t v18 = (uint64_t *)(a3 + v6[7]);
      *uint64_t v18 = v15;
      v18[1] = v17;
      self;
      uint64_t v19 = swift_dynamicCastObjCClass();
      if (v19)
      {
        os_log_type_t v20 = (void *)v19;
        swift_unknownObjectRetain();
        id v21 = [v20 handle];
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          swift_unknownObjectRelease();
        }
        else
        {
          swift_unknownObjectRelease();
          uint64_t v23 = 0;
          uint64_t v25 = 0;
        }
        uint64_t v27 = (uint64_t *)(a3 + v6[5]);
        *uint64_t v27 = v23;
        v27[1] = v25;
      }
      else
      {
        unint64_t v26 = (void *)(a3 + v6[5]);
        void *v26 = 0;
        v26[1] = 0;
      }
      id v28 = [a1 benefactorAltDSID];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      unint64_t v32 = (uint64_t *)(a3 + v6[6]);
      *unint64_t v32 = v29;
      v32[1] = v31;
      UUID.init()();

      swift_unknownObjectRelease();
      uint64_t result = sub_100019168((uint64_t)v38);
      *(_OWORD *)(a3 + v6[9]) = xmmword_1002A9C60;
      *(unsigned char *)(a3 + v6[10]) = a2 & 1;
      return result;
    }
  }
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100007288(v34, (uint64_t)qword_10033E760);
  BOOL v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "The beneficiary does not have accessKey created yet. Cannot proceed to create a BeneficiaryInfoRecord", v37, 2u);
    swift_slowDealloc();
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100014F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v103 = a8;
  uint64_t v104 = a7;
  unint64_t v102 = a5;
  uint64_t v105 = a4;
  uint64_t v94 = a3;
  uint64_t v91 = a2;
  int v93 = a6;
  uint64_t v14 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v89 = *(void *)(v14 - 8);
  uint64_t v90 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v88 = (uint64_t)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v96 = (uint64_t)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v99 = *(void *)(v20 - 8);
  uint64_t v100 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v87 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v23 - 8, v24);
  unint64_t v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v86 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  unint64_t v32 = *(void (**)(void))(v28 + 56);
  uint64_t v95 = a9 + v31[11];
  uint64_t v85 = v32;
  v32();
  uint64_t v33 = (uint64_t *)(a9 + v31[12]);
  *uint64_t v33 = 0;
  v33[1] = 0;
  v97 = v33;
  uint64_t v34 = a9 + v31[13];
  *(void *)uint64_t v34 = 0;
  v92 = (uint64_t *)v34;
  *(unsigned char *)(v34 + 8) = 1;
  BOOL v35 = (void *)(a9 + v31[14]);
  void *v35 = 0;
  v35[1] = 0;
  v101 = v35;
  os_log_type_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v36(a9, a1, v27);
  uint64_t v37 = v31[6];
  uint64_t v38 = *(void *)(a1 + v37);
  uint64_t v39 = *(void *)(a1 + v37 + 8);
  long long v40 = (void *)(a9 + v37);
  *long long v40 = v38;
  v40[1] = v39;
  v36(a9 + v31[8], a1 + v31[8], v27);
  int v41 = v93;
  if (v93 == 2 || ((((v93 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v31[10])) & 1) != 0)
  {
    uint64_t v42 = v31[9];
    uint64_t v43 = *(void *)(a1 + v42);
    unint64_t v44 = *(void *)(a1 + v42 + 8);
    os_log_type_t v45 = (uint64_t *)(a9 + v42);
    *os_log_type_t v45 = v43;
    v45[1] = v44;
    sub_100013140(v43, v44);
  }
  else
  {
    *(_OWORD *)(a9 + v31[9]) = xmmword_1002A9C60;
  }
  uint64_t v46 = v31[5];
  unint64_t v47 = v102;
  uint64_t v48 = v94;
  if (v94)
  {
    uint64_t v49 = (void *)(a9 + v46);
    *uint64_t v49 = v91;
    v49[1] = v48;
  }
  else
  {
    uint64_t v51 = *(void *)(a1 + v46);
    uint64_t v50 = *(void *)(a1 + v46 + 8);
    v52 = (void *)(a9 + v46);
    void *v52 = v51;
    v52[1] = v50;
    swift_bridgeObjectRetain();
  }
  uint64_t v53 = v31[7];
  if (v47 >> 60 == 15)
  {
    uint64_t v54 = *(void *)(a1 + v53);
    unint64_t v55 = *(void *)(a1 + v53 + 8);
    unint64_t v56 = (uint64_t *)(a9 + v53);
    *unint64_t v56 = v54;
    v56[1] = v55;
    sub_100013140(v54, v55);
    if (v41 != 2)
    {
LABEL_10:
      *(unsigned char *)(a9 + v31[10]) = v41 & 1;
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v57 = (void *)(a9 + v53);
    *unint64_t v57 = v105;
    v57[1] = v47;
    if (v41 != 2) {
      goto LABEL_10;
    }
  }
  *(unsigned char *)(a9 + v31[10]) = *(unsigned char *)(a1 + v31[10]);
LABEL_13:
  sub_100019730(v104, (uint64_t)v26, (uint64_t *)&unk_100321CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    swift_bridgeObjectRetain();
    sub_1000196B4(v105, v47);
    sub_100006574((uint64_t)v26, (uint64_t *)&unk_100321CE0);
    sub_1000196C8(a1 + v31[11], v95);
  }
  else
  {
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    v59 = v86;
    v58(v86, v26, v27);
    swift_bridgeObjectRetain();
    sub_1000196B4(v105, v47);
    uint64_t v60 = v95;
    sub_100006574(v95, (uint64_t *)&unk_100321CE0);
    v58((char *)v60, v59, v27);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v85)(v60, 0, 1, v27);
  }
  uint64_t v61 = a11;
  uint64_t v62 = v103;
  uint64_t v63 = v96;
  sub_100019730(v103, v96, &qword_100324D80);
  uint64_t v64 = v99;
  uint64_t v65 = v100;
  int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v63, 1, v100);
  uint64_t v98 = a1;
  if (v66 == 1)
  {
    sub_1000196A0(v105, v47);
    sub_100006574(v62, &qword_100324D80);
    sub_100006574(v104, (uint64_t *)&unk_100321CE0);
    sub_100006574(v63, &qword_100324D80);
    id v67 = (uint64_t *)(a1 + v31[12]);
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    uint64_t v70 = v97;
    swift_bridgeObjectRetain();
  }
  else
  {
    v71 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v87, v63, v65);
    uint64_t v72 = v88;
    sub_100015654(v88);
    uint64_t v68 = Date.ISO8601Format(_:)();
    uint64_t v69 = v73;
    sub_1000196A0(v105, v47);
    sub_100006574(v62, &qword_100324D80);
    sub_100006574(v104, (uint64_t *)&unk_100321CE0);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v72, v90);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v71, v65);
    uint64_t v70 = v97;
  }
  swift_bridgeObjectRelease();
  *uint64_t v70 = v68;
  v70[1] = v69;
  if (a11)
  {
    uint64_t v75 = v101;
    uint64_t v76 = v98;
  }
  else
  {
    uint64_t v76 = v98;
    uint64_t v77 = (uint64_t *)(v98 + v31[14]);
    a10 = *v77;
    uint64_t v61 = v77[1];
    uint64_t v75 = v101;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  *uint64_t v75 = a10;
  v75[1] = v61;
  uint64_t v78 = v76 + v31[13];
  uint64_t v79 = *(void *)v78;
  char v80 = *(unsigned char *)(v78 + 8);
  uint64_t result = sub_100018B20(v76);
  if (a12) {
    uint64_t v82 = 1;
  }
  else {
    uint64_t v82 = v79;
  }
  char v83 = (a12 ^ 1) & v80;
  if ((a12 ^ 1) & 1) != 0 || (v80) {
    goto LABEL_29;
  }
  uint64_t v82 = v79 + 1;
  if (v79 != -1)
  {
    char v83 = 0;
LABEL_29:
    v84 = v92;
    uint64_t *v92 = v82;
    *((unsigned char *)v84 + 8) = v83;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100015654@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_1003216B0);
  __chkstk_darwin(v1 - 8, v2);
  BOOL v35 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for TimeZone();
  uint64_t v4 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v5);
  uint64_t v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v7 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  __chkstk_darwin(v21, v22);
  (*(void (**)(char *, void))(v24 + 104))((char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  uint64_t v25 = v16;
  uint64_t v26 = v34;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v25);
  uint64_t v27 = v10;
  uint64_t v28 = v35;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v11);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v27, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v33);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v28, 1, v26);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v31, v28, v26);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

unint64_t sub_100015A54(char a1)
{
  unint64_t result = 0x656C646E6168;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x69636966656E6562;
      break;
    case 2:
      unint64_t result = 0x654B737365636361;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0x444964726F636572;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0x444972656550746FLL;
      break;
    case 8:
      unint64_t result = 0x6144726961706572;
      break;
    case 9:
      unint64_t result = 0x6F43726961706572;
      break;
    case 10:
      unint64_t result = 0xD000000000000012;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100015BD8()
{
  return sub_100015A54(*v0);
}

uint64_t sub_100015BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000191EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100015C08(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100015C14(uint64_t a1)
{
  unint64_t v2 = sub_100018A00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100015C50(uint64_t a1)
{
  unint64_t v2 = sub_100018A00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100015C8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v59 = (char *)&v54 - v14;
  uint64_t v60 = sub_100009F04(&qword_100321630);
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v15);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = &v22[*(int *)(v20 + 44)];
  uint64_t v69 = v8;
  (*(void (**)(void))(v8 + 56))();
  uint64_t v23 = &v22[v18[12]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v65 = v18;
  int v66 = v23;
  uint64_t v24 = &v22[v18[13]];
  *(void *)uint64_t v24 = 0;
  v24[8] = 1;
  uint64_t v25 = v18[14];
  id v67 = v22;
  uint64_t v26 = &v22[v25];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v64 = v26;
  uint64_t v27 = a1[3];
  uint64_t v62 = a1;
  sub_100008EF8(a1, v27);
  sub_100018A00();
  uint64_t v61 = v17;
  uint64_t v28 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28)
  {
    sub_100008EA8((uint64_t)v62);
    sub_100006574((uint64_t)v68, (uint64_t *)&unk_100321CE0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = v12;
    unint64_t v56 = (uint64_t *)v24;
    uint64_t v63 = v6;
    LOBYTE(v70) = 1;
    sub_100019794((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    uint64_t v31 = (uint64_t)v67;
    v30(v67, v59, v7);
    LOBYTE(v70) = 0;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v33 = v65;
    unint64_t v55 = (void (*)(uint64_t, char *, char *))v30;
    v59 = (char *)v7;
    uint64_t v34 = (uint64_t *)(v31 + v65[5]);
    *uint64_t v34 = v32;
    v34[1] = v35;
    char v71 = 2;
    sub_1000130EC();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v31 + v33[7]) = v70;
    LOBYTE(v70) = 3;
    uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v37 = (uint64_t *)(v31 + v33[6]);
    *uint64_t v37 = v36;
    v37[1] = v38;
    LOBYTE(v70) = 4;
    uint64_t v39 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v55(v31 + v33[8], v29, v39);
    char v71 = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v31 + v33[9]) = v70;
    LOBYTE(v70) = 6;
    *(unsigned char *)(v31 + v33[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v70) = 7;
    uint64_t v40 = (uint64_t)v63;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100018A54(v40, (uint64_t)v68);
    LOBYTE(v70) = 8;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v43 = v42;
    unint64_t v44 = (uint64_t *)v66;
    swift_bridgeObjectRelease();
    *unint64_t v44 = v41;
    v44[1] = v43;
    LOBYTE(v70) = 9;
    uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v46 = v56;
    *unint64_t v56 = v45;
    *((unsigned char *)v46 + 8) = v47 & 1;
    LOBYTE(v70) = 10;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v50 = v49;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v60);
    uint64_t v51 = (uint64_t *)v64;
    swift_bridgeObjectRelease();
    uint64_t *v51 = v48;
    v51[1] = v50;
    uint64_t v52 = (uint64_t)v67;
    sub_100018ABC((uint64_t)v67, v57);
    sub_100008EA8((uint64_t)v62);
    return sub_100018B20(v52);
  }
}

uint64_t sub_1000164B8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321650);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100018A00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 1;
  type metadata accessor for UUID();
  sub_100019794(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
    LOBYTE(v16) = 0;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v15 = v10;
    long long v16 = *(_OWORD *)(v3 + *(int *)(v10 + 28));
    char v17 = 2;
    unint64_t v11 = sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v14 = v11;
    uint64_t v12 = v15;
    LOBYTE(v16) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v16) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v16 = *(_OWORD *)(v3 + *(int *)(v12 + 36));
    char v17 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v16) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v16) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v16) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v16) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10001686C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v138 = a2;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v7 = __chkstk_darwin(v5 - 8, v6);
  v136 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v142 = (uint64_t)&v127 - v11;
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)&v127 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  v135 = (char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  v141 = (char *)&v127 - v22;
  __chkstk_darwin(v21, v23);
  v144 = (char *)&v127 - v24;
  uint64_t v25 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v26 = *(void (**)(void))(v16 + 56);
  uint64_t v145 = a3 + v25[11];
  uint64_t v147 = v15;
  v134 = v26;
  v26();
  uint64_t v27 = (uint64_t *)(a3 + v25[12]);
  *uint64_t v27 = 0;
  v27[1] = 0;
  uint64_t v28 = a3 + v25[13];
  *(void *)uint64_t v28 = 0;
  v137 = (uint64_t *)v28;
  *(unsigned char *)(v28 + 8) = 1;
  v139 = v25;
  uint64_t v140 = a3;
  uint64_t v29 = (uint64_t *)(a3 + v25[14]);
  *uint64_t v29 = 0;
  v29[1] = 0;
  v146 = v29;
  v148 = a1;
  if (CKRecord.recordType.getter() == 0xD000000000000020 && v30 == 0x8000000100299F70)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      type metadata accessor for InheritanceError(0);
      uint64_t v151 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_100019794((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      goto LABEL_16;
    }
  }
  v143 = v27;
  id v32 = v148;
  id v33 = [v148 recordID];
  id v34 = [v33 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v35 = v16;
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v37 = v147;
  if (v36(v14, 1, v147) == 1)
  {
    sub_100006574((uint64_t)v14, (uint64_t *)&unk_100321CE0);
    type metadata accessor for InheritanceError(0);
    uint64_t v151 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100019794((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

LABEL_16:
    uint64_t v51 = v145;
LABEL_19:
    sub_100006574(v51, (uint64_t *)&unk_100321CE0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v132 = v35;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v38(v144, v14, v37);
  id v39 = [v32 encryptedValuesByKey];
  NSString v40 = String._bridgeToObjectiveC()();
  id v133 = v39;
  id v41 = [v39 objectForKeyedSubscript:v40];

  if (!v41 || (uint64_t v151 = (uint64_t)v41, sub_100009F04(&qword_1003239A0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100007288(v44, (uint64_t)qword_10033E760);
    uint64_t v45 = v148;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 138412290;
      uint64_t v149 = (uint64_t)v45;
      uint64_t v50 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v45;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Missing Inheritance beneficiaryID - %@", v48, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v46 = v45;
    }
    uint64_t v52 = v132;
    uint64_t v51 = v145;

    type metadata accessor for InheritanceError(0);
    uint64_t v151 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100019794((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v52 + 8))(v144, v147);
    goto LABEL_19;
  }
  uint64_t v42 = v142;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = v147;
  if (v36((char *)v42, 1, v147) == 1)
  {
    sub_100006574(v42, (uint64_t *)&unk_100321CE0);
    goto LABEL_11;
  }
  v38(v141, (char *)v42, v43);
  NSString v54 = String._bridgeToObjectiveC()();
  id v55 = [v133 objectForKeyedSubscript:v54];

  if (!v55 || (uint64_t v151 = (uint64_t)v55, (swift_dynamicCast() & 1) == 0))
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100007288(v63, (uint64_t)qword_10033E760);
    uint64_t v64 = v148;
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      id v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      *(_DWORD *)id v67 = 138412290;
      uint64_t v149 = (uint64_t)v64;
      uint64_t v69 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v68 = v64;

      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Missing Inheritance accessKey - %@", v67, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v65 = v64;
    }
    uint64_t v70 = v132;
    uint64_t v51 = v145;

    type metadata accessor for InheritanceError(0);
    uint64_t v151 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100019794((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_40;
  }
  v131 = (void (*)(uint64_t, char *, uint64_t))v38;
  unint64_t v56 = v150;
  uint64_t v142 = v149;
  NSString v57 = String._bridgeToObjectiveC()();
  id v58 = [v133 objectForKeyedSubscript:v57];

  if (!v58 || (uint64_t v151 = (uint64_t)v58, (swift_dynamicCast() & 1) == 0))
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_100007288(v71, (uint64_t)qword_10033E760);
    uint64_t v72 = v148;
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      v148 = (void *)swift_slowAlloc();
      uint64_t v149 = (uint64_t)v72;
      *(_DWORD *)uint64_t v75 = 138412290;
      unint64_t v76 = v56;
      uint64_t v77 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v148 = v72;

      unint64_t v56 = v76;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Missing benefactorAltDSID - %@", v75, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v73 = v72;
    }
    uint64_t v70 = v132;
    uint64_t v51 = v145;

    type metadata accessor for InheritanceError(0);
    uint64_t v151 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100019794((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_100013198(v142, v56);
    swift_unknownObjectRelease();

LABEL_40:
    uint64_t v78 = *(void (**)(char *, uint64_t))(v70 + 8);
    uint64_t v79 = v147;
    v78(v141, v147);
    v78(v144, v79);
    goto LABEL_19;
  }
  unint64_t v130 = v56;
  uint64_t v129 = v149;
  unint64_t v128 = v150;
  NSString v59 = String._bridgeToObjectiveC()();
  id v60 = [v133 objectForKeyedSubscript:v59];

  if (v60)
  {
    uint64_t v151 = (uint64_t)v60;
    if (swift_dynamicCast())
    {
      uint64_t v61 = (uint64_t)v136;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = v147;
      if (v36((char *)v61, 1, v147) == 1)
      {
        sub_100006574(v61, (uint64_t *)&unk_100321CE0);
      }
      else
      {
        char v80 = v135;
        v81 = v131;
        v131((uint64_t)v135, (char *)v61, v62);
        uint64_t v82 = v145;
        sub_100006574(v145, (uint64_t *)&unk_100321CE0);
        v81(v82, v80, v62);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v134)(v82, 0, 1, v62);
      }
    }
  }
  NSString v83 = String._bridgeToObjectiveC()();
  id v84 = [v133 objectForKeyedSubscript:v83];

  uint64_t v85 = v132;
  v86 = v143;
  if (v84)
  {
    uint64_t v151 = (uint64_t)v84;
    if (swift_dynamicCast())
    {
      uint64_t v87 = v149;
      unint64_t v88 = v150;
      uint64_t v89 = v146;
      swift_bridgeObjectRelease();
      *uint64_t v89 = v87;
      v89[1] = v88;
    }
  }
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v133 objectForKeyedSubscript:v90];

  if (v91)
  {
    uint64_t v151 = (uint64_t)v91;
    if (swift_dynamicCast())
    {
      uint64_t v92 = v149;
      unint64_t v93 = v150;
      swift_bridgeObjectRelease();
      uint64_t *v86 = v92;
      v86[1] = v93;
    }
  }
  NSString v94 = String._bridgeToObjectiveC()();
  id v95 = [v133 objectForKeyedSubscript:v94];

  id v96 = v148;
  if (v95)
  {
    uint64_t v149 = (uint64_t)v95;
    if (swift_dynamicCast())
    {
      v97 = v137;
      uint64_t *v137 = v151;
      *((unsigned char *)v97 + 8) = 0;
    }
  }
  id v98 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [v96 encodeSystemFieldsWithCoder:v98];
  [v98 finishEncoding];
  uint64_t v99 = v96;
  id v100 = [v98 encodedData];
  uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v103 = v102;

  uint64_t v104 = v139;
  uint64_t v105 = v140;
  v106 = (uint64_t *)(v140 + v139[9]);
  uint64_t *v106 = v101;
  v106[1] = v103;
  v107 = *(void (**)(uint64_t, char *, uint64_t))(v85 + 16);
  v108 = v144;
  uint64_t v109 = v147;
  v107(v105 + v104[8], v144, v147);
  uint64_t v110 = v105;
  v111 = v141;
  v107(v110, v141, v109);
  NSString v112 = String._bridgeToObjectiveC()();
  id v113 = [v133 objectForKeyedSubscript:v112];
  swift_unknownObjectRelease();

  v114 = *(void (**)(char *, uint64_t))(v85 + 8);
  v114(v111, v109);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v114)(v108, v109);
  if (v113)
  {
    uint64_t v151 = (uint64_t)v113;
    uint64_t result = swift_dynamicCast();
    uint64_t v115 = v149;
    unint64_t v116 = v150;
    if (!result)
    {
      uint64_t v115 = 0;
      unint64_t v116 = 0;
    }
  }
  else
  {
    uint64_t v115 = 0;
    unint64_t v116 = 0;
  }
  v117 = v139;
  char v118 = v138;
  uint64_t v119 = v142;
  uint64_t v120 = v129;
  unint64_t v121 = v128;
  uint64_t v122 = v140;
  v123 = (uint64_t *)(v140 + v139[5]);
  uint64_t *v123 = v115;
  v123[1] = v116;
  v124 = (uint64_t *)(v122 + v117[7]);
  unint64_t v125 = v130;
  uint64_t *v124 = v119;
  v124[1] = v125;
  v126 = (uint64_t *)(v122 + v117[6]);
  uint64_t *v126 = v120;
  v126[1] = v121;
  *(unsigned char *)(v122 + v117[10]) = v118 & 1;
  return result;
}

uint64_t sub_1000179D0(id *a1)
{
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v60 = (uint64_t)&v57 - v9;
  [*a1 encryptedValuesByKey];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v10 = v63;
  uint64_t v11 = UUID.uuidString.getter();
  NSString v59 = v7;
  if (!*((void *)&v10 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v14 = UUID.uuidString.getter();
    *((void *)&v64 + 1) = &type metadata for String;
    uint64_t v65 = &protocol witness table for String;
    *(void *)&long long v63 = v14;
    *((void *)&v63 + 1) = v15;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  if (v10 == __PAIR128__(v12, v11))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  long long v16 = v63;
  uint64_t v17 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v61 = v1;
  uint64_t v62 = (int *)v17;
  uint64_t v18 = (unint64_t *)(v1 + *(int *)(v17 + 20));
  unint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  if (*((void *)&v16 + 1))
  {
    if (!v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
LABEL_16:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_17;
    }
    if (v16 == __PAIR128__(v19, v20))
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_15:
      *((void *)&v64 + 1) = &type metadata for String;
      uint64_t v65 = &protocol witness table for String;
      *(void *)&long long v63 = v20;
      *((void *)&v63 + 1) = v19;
      goto LABEL_16;
    }
  }
  else if (v19)
  {
    goto LABEL_15;
  }
LABEL_17:
  CKRecordKeyValueSetting.subscript.getter();
  long long v22 = v63;
  uint64_t v23 = (uint64_t *)(v61 + v62[7]);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_100013140(*v23, v25);
  if (*((void *)&v22 + 1) >> 60 == 15)
  {
    sub_1000196A0(v22, *((unint64_t *)&v22 + 1));
    sub_1000196A0(v24, v25);
    uint64_t v26 = v61;
LABEL_20:
    *((void *)&v64 + 1) = &type metadata for Data;
    uint64_t v65 = &protocol witness table for Data;
    *(void *)&long long v63 = v24;
    *((void *)&v63 + 1) = v25;
    sub_100013140(v24, v25);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_21;
  }
  sub_1000196B4(v22, *((unint64_t *)&v22 + 1));
  char v27 = sub_100012680(v22, *((unint64_t *)&v22 + 1), v24, v25);
  sub_100013198(v24, v25);
  sub_1000196A0(v22, *((unint64_t *)&v22 + 1));
  sub_1000196A0(v22, *((unint64_t *)&v22 + 1));
  uint64_t v26 = v61;
  if ((v27 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v28 = (unint64_t *)(v26 + v62[6]);
  unint64_t v30 = *v28;
  unint64_t v29 = v28[1];
  if (!*((void *)&v63 + 1)) {
    goto LABEL_25;
  }
  if (v63 == __PAIR128__(v29, v30))
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
LABEL_25:
    *((void *)&v64 + 1) = &type metadata for String;
    uint64_t v65 = &protocol witness table for String;
    *(void *)&long long v63 = v30;
    *((void *)&v63 + 1) = v29;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_26:
  CKRecordKeyValueSetting.subscript.getter();
  long long v32 = v63;
  uint64_t v33 = v26 + v62[11];
  uint64_t v34 = v60;
  sub_100019730(v33, v60, (uint64_t *)&unk_100321CE0);
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  if (v37(v34, 1, v35) == 1)
  {
    sub_100006574(v34, (uint64_t *)&unk_100321CE0);
    if (!*((void *)&v32 + 1)) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  uint64_t v58 = v32;
  uint64_t v57 = UUID.uuidString.getter();
  uint64_t v39 = v38;
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
  if (!*((void *)&v32 + 1))
  {
    if (!v39) {
      goto LABEL_41;
    }
    goto LABEL_36;
  }
  if (!v39)
  {
LABEL_36:
    swift_bridgeObjectRelease();
LABEL_37:
    uint64_t v40 = (uint64_t)v59;
    sub_100019730(v33, (uint64_t)v59, (uint64_t *)&unk_100321CE0);
    if (v37(v40, 1, v35) == 1)
    {
      sub_100006574(v40, (uint64_t *)&unk_100321CE0);
      long long v63 = 0u;
      long long v64 = 0u;
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v41 = UUID.uuidString.getter();
      *((void *)&v64 + 1) = &type metadata for String;
      uint64_t v65 = &protocol witness table for String;
      *(void *)&long long v63 = v41;
      *((void *)&v63 + 1) = v42;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v35);
    }
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_41;
  }
  if (v58 == v57 && *((void *)&v32 + 1) == (void)v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_41:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v43 = v61;
  uint64_t v44 = (unint64_t *)(v61 + v62[14]);
  unint64_t v46 = *v44;
  unint64_t v45 = v44[1];
  if (*((void *)&v63 + 1))
  {
    if (!v45)
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
LABEL_50:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_51;
    }
    if (v63 == __PAIR128__(v45, v46))
    {
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {
LABEL_49:
      *((void *)&v64 + 1) = &type metadata for String;
      uint64_t v65 = &protocol witness table for String;
      *(void *)&long long v63 = v46;
      *((void *)&v63 + 1) = v45;
      goto LABEL_50;
    }
  }
  else if (v45)
  {
    goto LABEL_49;
  }
LABEL_51:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v48 = (unint64_t *)(v43 + v62[12]);
  unint64_t v50 = *v48;
  unint64_t v49 = v48[1];
  if (*((void *)&v63 + 1))
  {
    if (!v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = 0;
      long long v63 = 0u;
      long long v64 = 0u;
LABEL_60:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_61;
    }
    if (v63 == __PAIR128__(v49, v50))
    {
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
    char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v51 & 1) == 0)
    {
LABEL_59:
      *((void *)&v64 + 1) = &type metadata for String;
      uint64_t v65 = &protocol witness table for String;
      *(void *)&long long v63 = v50;
      *((void *)&v63 + 1) = v49;
      goto LABEL_60;
    }
  }
  else if (v49)
  {
    goto LABEL_59;
  }
LABEL_61:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v52 = (uint64_t *)(v43 + v62[13]);
  uint64_t v53 = *v52;
  char v54 = *((unsigned char *)v52 + 8);
  if (BYTE8(v63))
  {
    if (v54) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_67;
  }
  if (v54)
  {
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
LABEL_68:
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if ((void)v63 != v53)
  {
LABEL_67:
    *((void *)&v64 + 1) = &type metadata for UInt;
    uint64_t v65 = &protocol witness table for UInt;
    *(void *)&long long v63 = v53;
    goto LABEL_68;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_100018360@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100015C8C(a1, a2);
}

uint64_t sub_100018378(void *a1)
{
  return sub_1000164B8(a1);
}

uint64_t sub_100018390()
{
  uint64_t v1 = type metadata accessor for SHA256();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SHA256Digest();
  uint64_t v22 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 28));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_100013140(*v10, v12);
  sub_100019794((unint64_t *)&unk_100321690, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(v12 >> 62)
  {
    case 1uLL:
      if (v11 >> 32 < (int)v11) {
        __break(1u);
      }
      uint64_t v21 = v6;
      sub_100013140(v11, v12);
      uint64_t v6 = v21;
      sub_1002565D4((int)v11, v11 >> 32);
      break;
    case 2uLL:
      uint64_t v21 = v6;
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v14 = *(void *)(v11 + 24);
      sub_100013140(v11, v12);
      swift_retain();
      swift_retain();
      uint64_t v15 = v14;
      uint64_t v6 = v21;
      sub_1002565D4(v13, v15);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v23, 0, 14);
      goto LABEL_7;
    default:
      v23[0] = v11;
      LOWORD(v23[1]) = v12;
      BYTE2(v23[1]) = BYTE2(v12);
      BYTE3(v23[1]) = BYTE3(v12);
      BYTE4(v23[1]) = BYTE4(v12);
      BYTE5(v23[1]) = BYTE5(v12);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_100013198(v11, v12);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_100013198(v11, v12);
  sub_100019794(&qword_100327840, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  uint64_t v16 = Digest.makeIterator()();
  uint64_t v18 = sub_100018F50(v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100213BE0(v18);
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v6);
  return v19;
}

uint64_t sub_1000187A8()
{
  _StringGuts.grow(_:)(36);
  type metadata accessor for BeneficiaryInfoRecord();
  sub_100009F04(&qword_100321668);
  uint64_t v0 = String.init<A>(describing:)();
  swift_bridgeObjectRelease();
  v1._object = (void *)0x8000000100299EF0;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_100019794((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x656C646E61680A2CLL;
  v3._object = (void *)0xEB00000000202D20;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  sub_100009F04(&qword_100321678);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100018924(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100019794(&qword_100321610, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t result = sub_100019794(&qword_100321618, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000189A8(uint64_t a1)
{
  uint64_t result = sub_100019794((unint64_t *)&unk_100321620, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100018A00()
{
  unint64_t result = qword_100321638;
  if (!qword_100321638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321638);
  }
  return result;
}

uint64_t sub_100018A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018B20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeneficiaryInfoRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100018B7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  long long v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  NSString v12 = String._bridgeToObjectiveC()();
  if (*(void *)(a1 + v11[5] + 8))
  {
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v13 = 0;
  }
  sub_100019730(a1 + v11[11], (uint64_t)v9, (uint64_t *)&unk_100321CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  uint64_t v31 = v2;
  uint64_t v15 = *(void *)(a1 + v11[12] + 8);
  uint64_t v30 = v3;
  if (v15)
  {
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v16 = 0;
  }
  uint64_t v17 = a1 + v11[13];
  if (*(unsigned char *)(v17 + 8)) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)v17;
  }
  if (*(void *)(a1 + v11[14] + 8))
  {
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v19 = 0;
  }
  id v20 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithBeneficiaryID:v10.super.isa benefactorAltDSID:v12 handle:v13 otPeerID:isa repairDate:v16 repairCount:v18 recordBuildVersion:v19];

  uint64_t v21 = (uint64_t *)(a1 + v11[7]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  id v24 = v20;
  sub_100013140(v22, v23);
  sub_100012A68(v22, v23, v33);
  uint64_t v25 = v33[0];
  unint64_t v26 = v33[1];
  sub_1000190C0((uint64_t)v33, (uint64_t)&v34);
  id v27 = v24;
  if (*((void *)&v35 + 1))
  {
    v37[0] = v34;
    v37[1] = v35;
    v37[2] = v36;
    sub_100019128();
    uint64_t v28 = (uint64_t)v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, a1, v31);
    sub_100013140(v25, v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v27 = sub_10001214C(v28, (uint64_t)v37);
    [v24 setAccessKey:v27];
    sub_100019168((uint64_t)v33);
  }
  sub_100018B20(a1);
  return v24;
}

uint64_t sub_100018F50(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      uint64_t v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v6 = result;
      unint64_t result = swift_bridgeObjectRetain();
      size_t v4 = 0;
      uint64_t v7 = &_swiftEmptyArrayStorage[4];
      while (1)
      {
        char v8 = *(unsigned char *)(v6 + v5 + 32);
        if (!v4)
        {
          unint64_t v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_29;
          }
          int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v10;
          }
          sub_100009F04((uint64_t *)&unk_1003216A0);
          NSString v12 = (void *)swift_allocObject();
          size_t v13 = 2 * j__malloc_size(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          unint64_t v14 = (unint64_t)(v12 + 4);
          size_t v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32) {
              memmove(v12 + 4, v3 + 4, v15);
            }
            v3[2] = 0;
          }
          uint64_t v7 = (unsigned char *)(v14 + v15);
          size_t v4 = (v13 >> 1) - v15;
          unint64_t result = swift_release();
          uint64_t v3 = v12;
        }
        BOOL v17 = __OFSUB__(v4--, 1);
        if (v17) {
          break;
        }
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          unint64_t result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  size_t v4 = 0;
LABEL_24:
  unint64_t v18 = v3[3];
  if (v18 < 2) {
    return (uint64_t)v3;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  unint64_t v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000190C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321680);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100019128()
{
  unint64_t result = qword_100325980;
  if (!qword_100325980)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100325980);
  }
  return result;
}

uint64_t sub_100019168(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000191A0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    sub_100013198(result, a2);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000191EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C646E6168 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654B737365636361 && a2 == 0xED00006174614479 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029A0C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x444972656550746FLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6144726961706572 && a2 == 0xEA00000000006574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F43726961706572 && a2 == 0xEB00000000746E75 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100299F50)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_1000196A0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100013198(a1, a2);
  }
  return a1;
}

uint64_t sub_1000196B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100013140(a1, a2);
  }
  return a1;
}

uint64_t sub_1000196C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019730(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100009F04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100019794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000197DC()
{
  unint64_t result = qword_1003216D0;
  if (!qword_1003216D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003216D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BeneficiaryInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BeneficiaryInfoRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001998CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryInfoRecord.CodingKeys()
{
  return &type metadata for BeneficiaryInfoRecord.CodingKeys;
}

char *sub_1000199C4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v44 = *(void *)(v7 - 8);
    int v8 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    NSString v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    unint64_t v14 = &a1[v10];
    size_t v15 = &a2[v10];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)unint64_t v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = a3[7];
    unint64_t v18 = (uint64_t *)&a1[v17];
    unint64_t v19 = (uint64_t *)&a2[v17];
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013140(v20, v21);
    *unint64_t v18 = v20;
    v18[1] = v21;
    v8(&a1[a3[8]], &a2[a3[8]], v7);
    uint64_t v22 = a3[9];
    unint64_t v23 = (uint64_t *)&a1[v22];
    id v24 = (uint64_t *)&a2[v22];
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    sub_100013140(*v24, v26);
    *unint64_t v23 = v25;
    v23[1] = v26;
    uint64_t v27 = a3[11];
    a1[a3[10]] = a2[a3[10]];
    uint64_t v28 = &a1[v27];
    unint64_t v29 = &a2[v27];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(&a2[v27], 1, v7))
    {
      uint64_t v30 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v8(v28, v29, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v28, 0, 1, v7);
    }
    uint64_t v32 = a3[12];
    uint64_t v33 = a3[13];
    long long v34 = &a1[v32];
    long long v35 = &a2[v32];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)long long v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = &a1[v33];
    uint64_t v38 = &a2[v33];
    v37[8] = v38[8];
    *(void *)uint64_t v37 = *(void *)v38;
    uint64_t v39 = a3[14];
    uint64_t v40 = &a1[v39];
    uint64_t v41 = &a2[v39];
    uint64_t v42 = *((void *)v41 + 1);
    *(void *)uint64_t v40 = *(void *)v41;
    *((void *)v40 + 1) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100019C50(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  v6(a1 + a2[8], v4);
  sub_100013198(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v7 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100019DB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = (void *)(a1 + v9);
  unint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = (uint64_t *)(a1 + v16);
  unint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013140(v19, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  v7(a1 + a3[8], a2 + a3[8], v6);
  uint64_t v21 = a3[9];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  unint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_100013140(*v23, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(a2 + v26, 1, v6))
  {
    uint64_t v29 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v27, 0, 1, v6);
  }
  uint64_t v30 = a3[12];
  uint64_t v31 = a3[13];
  uint64_t v32 = (void *)(a1 + v30);
  uint64_t v33 = (void *)(a2 + v30);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = a1 + v31;
  uint64_t v36 = a2 + v31;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  *(void *)uint64_t v35 = *(void *)v36;
  uint64_t v37 = a3[14];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (void *)(a2 + v37);
  uint64_t v40 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_100019FF0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)&a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_100013140(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *uint64_t v16 = v18;
  v16[1] = v19;
  sub_100013198(v20, v21);
  v8(&a1[a3[8]], &a2[a3[8]], v6);
  uint64_t v22 = a3[9];
  unint64_t v23 = (uint64_t *)&a1[v22];
  uint64_t v24 = (uint64_t *)&a2[v22];
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_100013140(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_100013198(v27, v28);
  a1[a3[10]] = a2[a3[10]];
  uint64_t v29 = a3[11];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v23) = v32(&a1[v29], 1, v6);
  int v33 = v32(v31, 1, v6);
  if (!v23)
  {
    if (!v33)
    {
      v8(v30, v31, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
    goto LABEL_6;
  }
  if (v33)
  {
LABEL_6:
    uint64_t v34 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v30, v31, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
LABEL_7:
  uint64_t v35 = a3[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[13];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v41 = *(void *)v40;
  v39[8] = v40[8];
  *(void *)uint64_t v39 = v41;
  uint64_t v42 = a3[14];
  uint64_t v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  *(void *)uint64_t v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10001A2F4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v8(&a1[v10], &a2[v10], v6);
  uint64_t v11 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  a1[v11] = a2[v11];
  uint64_t v12 = a3[11];
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v12], 1, v6))
  {
    uint64_t v15 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v8(v13, v14, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  }
  uint64_t v16 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  return a1;
}

char *sub_10001A4C0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[7];
  uint64_t v20 = *(void *)&a1[v19];
  unint64_t v21 = *(void *)&a1[v19 + 8];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  sub_100013198(v20, v21);
  unint64_t v46 = v8;
  v8(&a1[a3[8]], &a2[a3[8]], v6);
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void *)&a1[v22];
  unint64_t v24 = *(void *)&a1[v22 + 8];
  *(_OWORD *)&a1[v22] = *(_OWORD *)&a2[v22];
  sub_100013198(v23, v24);
  uint64_t v25 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  unint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  unint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v29 = v28(&a1[v25], 1, v6);
  int v30 = v28(v27, 1, v6);
  if (!v29)
  {
    if (!v30)
    {
      v46(v26, v27, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v6);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    uint64_t v31 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v26, v27, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v26, 0, 1, v6);
LABEL_7:
  uint64_t v32 = a3[12];
  int v33 = &a1[v32];
  uint64_t v34 = (uint64_t *)&a2[v32];
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *(void *)int v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[13];
  uint64_t v38 = a3[14];
  uint64_t v39 = &a1[v37];
  uint64_t v40 = &a2[v37];
  *(void *)uint64_t v39 = *(void *)v40;
  v39[8] = v40[8];
  uint64_t v41 = &a1[v38];
  uint64_t v42 = (uint64_t *)&a2[v38];
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *(void *)uint64_t v41 = v44;
  *((void *)v41 + 1) = v43;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001A768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001A77C);
}

uint64_t sub_10001A77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 44);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_10001A8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001A8C4);
}

uint64_t sub_10001A8C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 44);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_10001A9F8()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10001AAF8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10001AAF8()
{
  if (!qword_100321740)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100321740);
    }
  }
}

unint64_t sub_10001AB54()
{
  unint64_t result = qword_100321798;
  if (!qword_100321798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321798);
  }
  return result;
}

unint64_t sub_10001ABAC()
{
  unint64_t result = qword_1003217A0;
  if (!qword_1003217A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003217A0);
  }
  return result;
}

unint64_t sub_10001AC04()
{
  unint64_t result = qword_1003217A8;
  if (!qword_1003217A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003217A8);
  }
  return result;
}

uint64_t sub_10001AC58(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v41 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100321C78);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v40 = v11;
    swift_errorRetain();
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E7F0);
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v38 = v10;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v39 = a5;
      uint64_t v37 = (void *)v26;
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v27 = a4;
      uint64_t v28 = a3;
      uint64_t v29 = a1;
      uint64_t v30 = _convertErrorToNSError(_:)();
      v42[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v30;
      a1 = v29;
      a3 = v28;
      a4 = v27;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to fetch invitations %@", v25, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a5 = v39;
      swift_slowDealloc();
      uint64_t v10 = v38;
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    uint64_t v31 = v40;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Continuing with preflight....", v34, 2u);
      swift_slowDealloc();
    }

    uint64_t v35 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v41, a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v10);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v35, v10);
    sub_100008EF8(v42, v43);
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = a3;
    v36[3] = a4;
    v36[4] = a5;
    swift_retain();
    swift_retain();
    sub_100008810((uint64_t)sub_1000289D0, (uint64_t)v36);
    swift_release();
    sub_100008EA8((uint64_t)v42);
    return sub_100007844(a1, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceRecordCleaner, v14);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t v19 = (char *)*sub_100008EF8(v42, v43);
    swift_retain();
    swift_retain();
    sub_10022E500(a1, v19, a3, a4, a5);
    swift_release();
    swift_release();
    return sub_100008EA8((uint64_t)v42);
  }
}

uint64_t sub_10001B118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100024820(a2, a3, a4);
}

uint64_t sub_10001B128(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void (*)(void))a4;
  if ((a2 & 1) == 0) {
    return sub_10001B3D4(a1, a4, a5);
  }
  swift_errorRetain();
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E7F0);
  sub_100007850(a1, 1);
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v16 = v5;
    uint64_t v14 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v15 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2112;
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v5 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v17;
    sub_100007844(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - error fetching inheritance records: %@", (uint8_t *)v12, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_100007844(a1, 1);
  }

  swift_errorRetain();
  v5(a1);
  sub_100007844(a1, 1);
  return sub_100007844(a1, 1);
}

uint64_t sub_10001B3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8, v10);
  os_log_type_t v11 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_100220B90((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = sub_10001C220(a1);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v16 = a1 + ((v15 + 32) & ~v15);
    uint64_t v17 = *(void **)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue);
    uint64_t v35 = *(void *)(v8 + 72);
    id v36 = v17;
    uint64_t v33 = v15 | 7;
    uint64_t v34 = (v15 + 24) & ~v15;
    unint64_t v32 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = a1;
    unint64_t v19 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = v18;
    swift_bridgeObjectRetain();
    do
    {
      sub_100018ABC(v16, (uint64_t)v11);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v3;
      sub_100024CE0((uint64_t)v11, v20 + v34);
      *(void *)(v20 + v32) = v13;
      *(void *)(v20 + v19) = v12;
      uint64_t v21 = (objc_class *)type metadata accessor for AsyncOperation();
      uint64_t v22 = objc_allocWithZone(v21);
      v22[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      os_log_type_t v23 = (uint64_t (**)(uint64_t, uint64_t))&v22[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *os_log_type_t v23 = sub_100024D44;
      v23[1] = (uint64_t (*)(uint64_t, uint64_t))v20;
      v38.receiver = v22;
      v38.super_class = v21;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      id v24 = [super init];
      [v36 addOperation:v24];

      v16 += v35;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v30;
    a3 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v25 = *(void **)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v12;
  v26[3] = v3;
  v26[4] = a2;
  v26[5] = a3;
  aBlock[4] = sub_100024E48;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F5040;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v25 addBarrierBlock:v27];
  _Block_release(v27);
  return swift_release();
}

uint64_t sub_10001B700()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController;
  uint64_t v4 = sub_100009F04(&qword_100321CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__urlBagProvider;
  uint64_t v6 = sub_100009F04(&qword_100321CD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  uint64_t v8 = sub_100009F04(&qword_100321CF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceRecordCleaner;
  uint64_t v10 = sub_100009F04(&qword_100321C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__preferences;
  uint64_t v12 = sub_100009F04(&qword_100321C70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__followUpController;
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_100321D50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController;
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore;
  uint64_t v18 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager;
  uint64_t v20 = sub_100009F04((uint64_t *)&unk_100321CB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__keychainManager;
  uint64_t v22 = sub_100009F04(&qword_100321D20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001BA6C()
{
  sub_10001B700();

  return swift_deallocClassInstance();
}

uint64_t sub_10001BAC4()
{
  return type metadata accessor for InheritancePreflightHealthCheck();
}

uint64_t type metadata accessor for InheritancePreflightHealthCheck()
{
  uint64_t result = qword_100321838;
  if (!qword_100321838) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10001BB18()
{
  sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, qword_10032B5E0, &qword_1003218C0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100327F60, &qword_100320D40);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, &qword_1003218C8, &qword_1003218D0);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, &qword_1003218D8, (uint64_t *)&unk_1003218E0);
          if (v4 <= 0x3F)
          {
            sub_10001BEDC(319, (unint64_t *)&qword_100325770, (unint64_t *)&unk_1003218F0);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100327F80, (uint64_t *)&unk_100321900);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
                if (v7 <= 0x3F)
                {
                  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
                  if (v8 <= 0x3F)
                  {
                    sub_10001BEDC(319, (unint64_t *)&qword_100327F90, (unint64_t *)&qword_100321930);
                    if (v9 <= 0x3F)
                    {
                      sub_10001BF34(319, qword_10032D810, (uint64_t *)&unk_100321940);
                      if (v10 <= 0x3F) {
                        swift_updateClassMetadata2();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10001BEDC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_10000850C(255, a3);
    unint64_t v4 = type metadata accessor for Dependency();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10001BF34(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_1000112CC(a3);
    unint64_t v4 = type metadata accessor for Dependency();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_10001BF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100024244(a3, a4);
}

uint64_t sub_10001BFB0()
{
  return 0;
}

uint64_t sub_10001BFB8()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001BFF8(uint64_t a1, uint64_t a2)
{
  return sub_10001C020(a1, a2, (uint64_t *)&unk_1003228A0, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController);
}

uint64_t sub_10001C00C(uint64_t a1, uint64_t a2)
{
  return sub_10001C020(a1, a2, &qword_100325870, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore);
}

uint64_t sub_10001C020(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = sub_100009F04(a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 16))(v10, *v4 + *a4, v6);
  Dependency.wrappedValue.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_10001C120()
{
  uint64_t v1 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, *v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v1);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v7[1];
}

void *sub_10001C220(uint64_t a1)
{
  uint64_t v3 = sub_100009F04(&qword_100321D20);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__keychainManager, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v8 = v34;
  uint64_t v9 = v35;
  sub_100008EF8(v33, v34);
  id v10 = [objc_allocWithZone((Class)AAFKeychainItemDescriptor) init];
  [v10 setItemClass:3];
  [v10 setUseDataProtection:2];
  NSString v11 = String._bridgeToObjectiveC()();
  [v10 setAccessGroup:v11];

  uint64_t v12 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v9 + 16))(v10, v8, v9);
  sub_100008EA8((uint64_t)v33);
  if (v12 && (id v13 = [v12 value]) != 0)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    id v32 = 0;
    sub_10000850C(0, &qword_100321D28);
    sub_100009F04((uint64_t *)&unk_100321D30);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1002A9F00;
    *(void *)(v18 + 32) = sub_10000850C(0, &qword_1003283D0);
    *(void *)(v18 + 40) = sub_10000850C(0, (unint64_t *)&unk_100321D40);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)();
    swift_bridgeObjectRelease();
    if (v34)
    {
      if (swift_dynamicCast()) {
        id v24 = (void *)v31[4];
      }
      else {
        id v24 = 0;
      }
    }
    else
    {
      sub_100006574((uint64_t)v33, &qword_100328490);
      id v24 = 0;
    }

    id v32 = v24;
    v33[0] = &_swiftEmptyDictionarySingleton;
    uint64_t v25 = *(void *)(a1 + 16);
    if (v25)
    {
      uint64_t v26 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
      uint64_t v27 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      uint64_t v28 = *(void *)(v26 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100020EF8(v27, &v32, v33);
        v27 += v28;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
      sub_100013198(v15, v17);
      os_log_type_t v23 = (void *)v33[0];
    }
    else
    {
      sub_100013198(v15, v17);
      os_log_type_t v23 = &_swiftEmptyDictionarySingleton;
    }
    id v29 = v32;
  }
  else
  {
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E7F0);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Wrapped key data is nil.", v22, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v23 = (void *)sub_100220DE4((uint64_t)&_swiftEmptyArrayStorage);
  }
  return v23;
}

uint64_t sub_10001CB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v10 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v10 - 8, v11);
  id v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8, v17);
  uint64_t v44 = (uint64_t)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E7F0);
  swift_retain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v38 = v15;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v39 = v16;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v40 = a4;
    uint64_t v48 = v23;
    uint64_t v42 = a5;
    uint64_t v43 = a6;
    *(_DWORD *)uint64_t v22 = 136315138;
    uint64_t v41 = v13;
    uint64_t v24 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v25 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v26 = v24;
    uint64_t v15 = v38;
    uint64_t v47 = sub_100135190(v26, v25, &v48);
    id v13 = v41;
    a6 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a5 = v42;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - Creating analytics event.", v22, 0xCu);
    swift_arrayDestroy();
    a4 = v40;
    swift_slowDealloc();
    uint64_t v16 = v39;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v27 = v44;
  sub_100018ABC(a4, v44);
  unint64_t v28 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v29 = (v16 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a3;
  sub_100024CE0(v27, v31 + v28);
  *(void *)(v31 + v29) = a5;
  *(void *)(v31 + v30) = a6;
  id v32 = (void *)(v31 + ((v30 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v33 = v45;
  *id v32 = v46;
  v32[1] = v33;
  uint64_t v34 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v13, 1, 1, v34);
  uint64_t v35 = (void *)swift_allocObject();
  v35[2] = 0;
  v35[3] = 0;
  v35[4] = a3;
  uint64_t v35[5] = sub_10002506C;
  v35[6] = v31;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100225A54((uint64_t)v13, (uint64_t)&unk_100321CA0, (uint64_t)v35);
  swift_release();
  return swift_release();
}

void sub_10001CF08(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(void))
{
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v66 = a4;
  uint64_t v13 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v62 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v62 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  uint64_t v17 = &v57[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16, v18);
  os_log_type_t v20 = &v57[-v19];
  uint64_t v21 = qword_100320BC0;
  id v22 = a1;
  uint64_t v65 = v22;
  if (a2)
  {
    uint64_t v34 = v22;
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E7F0);
    id v36 = v34;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 138412290;
      id v41 = v36;
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v68 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v42;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Preflight event creation failed with error: %@", v39, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    a7();
    char v56 = v65;
  }
  else
  {
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E7F0);
    sub_100018ABC(v66, (uint64_t)v20);
    swift_retain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    int v26 = v25;
    BOOL v27 = os_log_type_enabled(v24, v25);
    uint64_t v61 = a3;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v60 = a7;
      uint64_t v29 = v28;
      uint64_t v59 = swift_slowAlloc();
      uint64_t v68 = v59;
      *(_DWORD *)uint64_t v29 = 136315394;
      int v58 = v26;
      uint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v30 = *(void *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v67 = sub_100135190(v31, v30, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v67 = sub_100135190(v32, v33, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v58, "%s - Event created. Starting Preflight for %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v60;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100018B20((uint64_t)v20);
    }

    uint64_t v43 = UUID.uuidString.getter();
    uint64_t v45 = v63;
    if (*(void *)(v63 + 16) && (unint64_t v46 = sub_1001358B8(v43, v44), (v47 & 1) != 0))
    {
      uint64_t v48 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v46);
      uint64_t v49 = *v48;
      unint64_t v50 = v48[1];
      sub_100013140(*v48, v50);
    }
    else
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0xF000000000000000;
    }
    uint64_t v51 = v62;
    swift_bridgeObjectRelease();
    uint64_t v52 = v66;
    sub_100018ABC(v66, (uint64_t)v17);
    unint64_t v53 = (*(unsigned __int8 *)(v51 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = v64;
    sub_100024CE0((uint64_t)v17, v54 + v53);
    id v55 = (void (**)(void))(v54 + ((v14 + v53 + 7) & 0xFFFFFFFFFFFFFFF8));
    *id v55 = a7;
    v55[1] = a8;
    swift_retain();
    swift_retain();
    char v56 = v65;
    sub_10001DB80(v52, v49, v50, v65, (uint64_t)sub_100025534, v54);
    sub_1000196A0(v49, v50);
    swift_release();
  }
}

uint64_t sub_10001D4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (a1)
  {
    uint64_t v6 = a1;
    uint64_t v7 = (uint64_t *)(a2 + 16);
    swift_errorRetain();
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    id v9 = [v8 aa_partialErrorsByName];

    if (v9)
    {
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v10 + 16))
      {
        __chkstk_darwin(v11, v12);
        v24[2] = v7;
        v24[3] = a3;
        sub_10001D820((void (*)(void *))sub_100028940, (uint64_t)v24, v10);
        swift_errorRelease();
        a1 = swift_bridgeObjectRelease();
        return a4(a1);
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    uint64_t v13 = (uint64_t *)(a3 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 20));
    uint64_t v14 = v13[1];
    if (v14) {
      uint64_t v15 = *v13;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v14) {
      uint64_t v16 = (void *)v13[1];
    }
    else {
      uint64_t v16 = (void *)0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 58;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = v26;
    uint64_t v21 = v27;
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    sub_10022C0AC(v6, v20, v21, isUniquelyReferenced_nonNull_native);
    *uint64_t v7 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    a1 = swift_errorRelease();
  }
  return a4(a1);
}

uint64_t sub_10001D6C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = (uint64_t *)(a3 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 20));
  uint64_t v8 = v7[1];
  if (v8) {
    uint64_t v9 = *v7;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = (void *)v7[1];
  }
  else {
    uint64_t v10 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 59;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v4;
  v15._object = v5;
  String.append(_:)(v15);
  swift_beginAccess();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *a2;
  *a2 = 0x8000000000000000;
  sub_10022C0AC(v6, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
  *a2 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_10001D820(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v21 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (v9)
  {
    unint64_t v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v13 = v12 | (v11 << 6);
LABEL_5:
    Swift::String v14 = (void *)(*(void *)(a3 + 48) + 16 * v13);
    uint64_t v15 = v14[1];
    uint64_t v16 = *(void *)(*(void *)(a3 + 56) + 8 * v13);
    v20[0] = *v14;
    v20[1] = v15;
    v20[2] = v16;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    a1(v20);
    swift_bridgeObjectRelease();
    uint64_t result = swift_errorRelease();
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v11);
  if (v18)
  {
LABEL_19:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_5;
  }
  int64_t v19 = v11 + 1;
  if (v11 + 1 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 2;
  if (v11 + 2 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 3;
  if (v11 + 3 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_18;
  }
  int64_t v19 = v11 + 4;
  if (v11 + 4 >= v21) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_18:
    int64_t v11 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v21) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v6 + 8 * v11);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10001D9F0(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(*(void *)(a3 + 56) + 8 * v14);
    swift_errorRetain();
    a1(&v18);
    uint64_t result = swift_errorRelease();
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v12);
  if (v16)
  {
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10001DB80(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v158 = a1;
  uint64_t v149 = sub_100009F04(&qword_100321CD0);
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149, v13);
  uint64_t v147 = (char *)v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_100009F04(&qword_100321CD8);
  v143 = *(void (**)(char *, uint64_t, uint64_t))(v151 - 8);
  __chkstk_darwin(v151, v15);
  unint64_t v150 = (char *)v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v144 = *((void *)v157 - 1);
  uint64_t v18 = __chkstk_darwin(v157, v17);
  uint64_t v142 = (char *)v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v146 = (uint64_t)v135 - v22;
  uint64_t v145 = v23;
  __chkstk_darwin(v21, v24);
  uint64_t v139 = (uint64_t)v135 - v25;
  uint64_t v26 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v26 - 8, v27);
  uint64_t v138 = (uint64_t)v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = (void *)type metadata accessor for UUID();
  uint64_t v29 = *(v141 - 1);
  __chkstk_darwin(v141, v30);
  uint64_t v140 = (char *)v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  unint64_t v33 = (void *)sub_100007288(v32, (uint64_t)qword_10033E7F0);
  swift_retain();
  id v156 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v155 = a6;
  uint64_t v154 = a5;
  v153 = a4;
  if (v36)
  {
    uint64_t v137 = v29;
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    v162[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    unint64_t v152 = a3;
    uint64_t v38 = v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName;
    uint64_t v39 = a2;
    uint64_t v40 = v7;
    uint64_t v42 = *(void *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v41 = *(void *)(v38 + 8);
    swift_bridgeObjectRetain();
    uint64_t v43 = v42;
    uint64_t v7 = v40;
    a2 = v39;
    v161[0] = sub_100135190(v43, v41, v162);
    a6 = v155;
    a3 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v29 = v137;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - Starting Preflight!", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v44 = (uint64_t *)(v158 + v157[7]);
  uint64_t v45 = *v44;
  unint64_t v46 = v44[1];
  sub_100013140(*v44, v46);
  sub_100012A68(v45, v46, v161);
  uint64_t v48 = v161[0];
  unint64_t v47 = v161[1];
  uint64_t v49 = v161[5];
  sub_10002895C((uint64_t)v161, (uint64_t)v162, (uint64_t *)&unk_100321680);
  if (v162[3])
  {
    if (a3 >> 60 == 15)
    {
      uint64_t v50 = (uint64_t)v142;
      sub_100018ABC(v158, (uint64_t)v142);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        unint64_t v53 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v53 = 136315138;
        uint64_t v54 = sub_1000187A8();
        uint64_t v160 = sub_100135190(v54, v55, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100018B20(v50);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Wrapped key is nil for beneficiary: %s", v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100018B20(v50);
      }

      uint64_t v75 = v153;
      type metadata accessor for InheritanceError(0);
      uint64_t v160 = 2105;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000255D8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      unint64_t v76 = (void *)aBlock[0];
      swift_retain();
      id v77 = v75;
      swift_retain();
      id v78 = v76;
      sub_100025B4C(v77, 0, v158, (uint64_t)v76, v7, v7, v77, v154, a6, v78, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))sub_100256B34);
      swift_release();

      swift_release();
LABEL_34:
      sub_100019168((uint64_t)v161);
      return;
    }
    v135[1] = v49;
    uint64_t v61 = a2;
    uint64_t v137 = v162[0];
    v135[2] = v162[1];
    uint64_t v62 = v158;
    uint64_t v63 = v138;
    sub_100019730(v158 + v157[11], v138, (uint64_t *)&unk_100321CE0);
    uint64_t v64 = v139;
    sub_100018ABC(v62, v139);
    uint64_t v65 = v141;
    int v66 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v29 + 48))(v63, 1, v141);
    unint64_t v152 = a3;
    if (v66 == 1)
    {
      uint64_t v67 = *(void (**)(char *, uint64_t, void *))(v29 + 16);
      uint64_t v142 = (char *)v7;
      unint64_t v68 = a3;
      uint64_t v69 = v140;
      v67(v140, v64, v65);
      uint64_t v7 = (uint64_t)v142;
      sub_100013140(v61, v68);
      sub_100018B20(v64);
      sub_100006574(v63, (uint64_t *)&unk_100321CE0);
    }
    else
    {
      sub_100013140(v61, a3);
      sub_100018B20(v64);
      uint64_t v69 = v140;
      (*(void (**)(char *, uint64_t, void *))(v29 + 32))(v140, v63, v65);
    }
    uint64_t v79 = v65;
    id v80 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v82 = (char *)[v80 initWithBeneficiairyIdentifier:isa];

    (*(void (**)(char *, void *))(v29 + 8))(v69, v79);
    Class v83 = Data._bridgeToObjectiveC()().super.isa;
    [v82 setWrappedKeyData:v83];

    Class v84 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v142 = v82;
    [v82 setWrappingKeyData:v84];

    sub_100013140(v48, v47);
    swift_bridgeObjectRetain();
    uint64_t v85 = v61;
    swift_bridgeObjectRetain();
    sub_100013140(v48, v47);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.debug.getter();
    BOOL v88 = os_log_type_enabled(v86, v87);
    uint64_t v136 = v85;
    if (v88)
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 136315138;
      Swift::String v90 = Data.base64EncodedString(options:)(0);
      uint64_t v160 = sub_100135190(v90._countAndFlagsBits, (unint64_t)v90._object, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100019168((uint64_t)v161);
      sub_100019168((uint64_t)v161);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "wrappingKey:%s", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100019168((uint64_t)v161);
      sub_100019168((uint64_t)v161);
    }

    id v91 = v143;
    uint64_t v92 = v158 + v157[13];
    if (*(unsigned char *)(v92 + 8)) {
      unint64_t v93 = 0;
    }
    else {
      unint64_t v93 = *(void *)v92;
    }
    uint64_t v94 = v7;
    uint64_t v95 = v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__urlBagProvider;
    id v96 = (void (*)(char *, uint64_t, uint64_t))*((void *)v143 + 2);
    v97 = v150;
    uint64_t v98 = v151;
    v96(v150, v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__urlBagProvider, v151);
    Dependency.wrappedValue.getter();
    uint64_t v99 = (void (*)(char *, uint64_t))*((void *)v91 + 1);
    v99(v97, v98);
    id v100 = self;
    uint64_t v101 = (uint64_t)[v100 maxRepairCountForBeneficiaries];
    v143 = v96;
    v141 = v99;
    if (v101 < 1)
    {
      sub_100008EA8((uint64_t)aBlock);
    }
    else
    {
      unint64_t v102 = v101;
      sub_100008EA8((uint64_t)aBlock);
      if (v93 < v102)
      {
        uint64_t v103 = v150;
        uint64_t v104 = v151;
        v96(v150, v95, v151);
        Dependency.wrappedValue.getter();
        v99(v103, v104);
        unsigned int v105 = [v100 canRepairBeneficiary];
        sub_100008EA8((uint64_t)aBlock);
LABEL_30:
        uint64_t v106 = v94;
        swift_retain();
        v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.debug.getter();
        BOOL v109 = os_log_type_enabled(v107, v108);
        LODWORD(v157) = v105;
        if (v109)
        {
          uint64_t v110 = (_DWORD *)swift_slowAlloc();
          id v156 = v100;
          v111 = v110;
          *uint64_t v110 = 134218496;
          aBlock[0] = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *((_WORD *)v111 + 6) = 2048;
          NSString v112 = v150;
          uint64_t v113 = v95;
          uint64_t v114 = v151;
          v143(v150, v113, v151);
          Dependency.wrappedValue.getter();
          ((void (*)(char *, uint64_t))v141)(v112, v114);
          id v115 = [v156 maxRepairCountForBeneficiaries];
          sub_100008EA8((uint64_t)aBlock);
          aBlock[0] = (uint64_t)v115;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *((_WORD *)v111 + 11) = 1024;
          LODWORD(aBlock[0]) = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "Beneficiary repair count  %lu < IdMS maxRepairCount %ld. Can repair beneficiaries: %{BOOL}d", (uint8_t *)v111, 0x1Cu);
          swift_slowDealloc();
        }
        else
        {

          swift_release();
        }
        uint64_t v116 = v148;
        v117 = v147;
        uint64_t v118 = v149;
        (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v147, v106 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v149);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v118);
        uint64_t v119 = v158;
        uint64_t v120 = (void *)aBlock[0];
        Class v121 = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v122 = v146;
        sub_100018ABC(v119, v146);
        unint64_t v123 = (*(unsigned __int8 *)(v144 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
        uint64_t v124 = v123 + v145;
        unint64_t v125 = (v123 + v145) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v126 = (v125 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v127 = swift_allocObject();
        *(void *)(v127 + 16) = v106;
        sub_100024CE0(v122, v127 + v123);
        *(unsigned char *)(v127 + v124) = (_BYTE)v157;
        unint64_t v128 = v153;
        *(void *)(v125 + v127 + 8) = v153;
        uint64_t v129 = (void *)(v127 + v126);
        uint64_t v130 = v155;
        *uint64_t v129 = v154;
        v129[1] = v130;
        v131 = v142;
        *(void *)(v127 + ((v126 + 23) & 0xFFFFFFFFFFFFFFF8)) = v142;
        aBlock[4] = (uint64_t)sub_1000264E0;
        aBlock[5] = v127;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10025ED44;
        aBlock[3] = (uint64_t)&unk_1002F5108;
        uint64_t v132 = _Block_copy(aBlock);
        swift_retain();
        id v133 = v128;
        swift_retain();
        id v134 = v131;
        swift_release();
        [v120 preflightInheritanceRecoveryForBeneficiaryID:v121 accessKey:v134 completion:v132];
        _Block_release(v132);

        swift_unknownObjectRelease();
        sub_1000196A0(v136, v152);
        goto LABEL_34;
      }
    }
    unsigned int v105 = 0;
    goto LABEL_30;
  }
  swift_retain();
  char v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    int v58 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)int v58 = 136315138;
    uint64_t v59 = *(void *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v60 = *(void *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v160 = sub_100135190(v59, v60, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a6 = v155;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s - Error creating InheritanceAccessKeyRecord", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v70 = v154;
  uint64_t v71 = v153;
  type metadata accessor for InheritanceError(0);
  uint64_t v160 = 2;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_1000255D8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v72 = (void *)aBlock[0];
  swift_retain();
  id v73 = v71;
  swift_retain();
  id v74 = v72;
  sub_100025B4C(v73, 0, v158, (uint64_t)v72, v7, v7, v73, v70, a6, v74, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))sub_1002578F0);
  swift_release();

  swift_release();
}

void sub_10001ED84(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v5 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    uint64_t v26 = -4408;
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v7;
    swift_beginAccess();
    uint64_t v8 = *v5;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v8;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_1000255D8((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E7F0);
    id v10 = v27;
    swift_retain();
    int64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      id v27 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      sub_100135190(v15, v16, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2112;
      uint64_t v26 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v26;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - failed: %@", (uint8_t *)v13, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    id v23 = v10;
    a3(v10);
  }
  else
  {
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E7F0);
    swift_retain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v22 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      id v27 = (id)sub_100135190(v21, v22, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - successful.", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    a3(0);
  }
}

uint64_t sub_10001F280(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_10001FF14(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight did not begin. Invalid InheritanceAccessKeyRecord. Event reported: %s\"");
}

uint64_t sub_10001F28C(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_10001FF14(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight did not begin. Missing Wrapped Key in keychain. Event reported: %s\"");
}

void sub_10001F298(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v94 = a8;
  id v100 = a5;
  uint64_t v101 = a7;
  LODWORD(v98) = a4;
  uint64_t v12 = sub_100009F04(&qword_100321CD0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  unint64_t v93 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v17 = *(void *)(*(void *)(v16 - 8) + 64);
  uint64_t v19 = __chkstk_darwin(v16 - 8, v18);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  id v23 = (char *)&v86 - v22;
  __chkstk_darwin(v21, v24);
  id v27 = (char *)&v86 - v26;
  if (a1)
  {
    uint64_t v90 = v25;
    uint64_t v91 = v13;
    uint64_t v92 = v12;
    swift_errorRetain();
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = sub_100007288(v28, (uint64_t)qword_10033E7F0);
    uint64_t v99 = a3;
    sub_100018ABC(a3, (uint64_t)v23);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v95 = v29;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    v97 = (uint64_t (*)(void))a6;
    uint64_t v89 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v96 = a2;
      uint64_t v34 = v33;
      os_log_type_t v87 = (void *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      aBlock[0] = v88;
      *(_DWORD *)uint64_t v34 = 136315650;
      uint64_t v36 = *(void *)(v96 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v35 = *(void *)(v96 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v103 = sub_100135190(v36, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v103 = sub_100135190(v37, v38, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v23);
      *(_WORD *)(v34 + 22) = 2112;
      uint64_t v39 = _convertErrorToNSError(_:)();
      uint64_t v103 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v87 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - failed for beneficiaryID %s    error: %@", (uint8_t *)v34, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v96;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100018B20((uint64_t)v23);
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v50 = (void *)_convertErrorToNSError(_:)();
    id v51 = [v50 code];
    uint64_t v52 = v99;
    if (v51 == (id)32 || [v50 code] == (id)34)
    {
      if (v98)
      {
        id v98 = v50;
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v96 = a2;
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          char v56 = (void *)swift_slowAlloc();
          *(_DWORD *)unint64_t v55 = 138412290;
          swift_errorRetain();
          uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
          aBlock[0] = v57;
          a2 = v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *char v56 = v57;
          uint64_t v52 = v99;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Recreating PeerID due to preflight error: %@", v55, 0xCu);
          sub_100009F04((uint64_t *)&unk_1003216C0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v70 = (uint64_t)v89;

        sub_100018ABC(v52, v70);
        unint64_t v71 = (*(unsigned __int8 *)(v90 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
        unint64_t v72 = (v17 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
        id v74 = (void *)swift_allocObject();
        uint64_t v75 = v101;
        v74[2] = v97;
        v74[3] = v75;
        v74[4] = a2;
        sub_100024CE0(v70, (uint64_t)v74 + v71);
        unint64_t v76 = v93;
        id v77 = v94;
        *(void *)((char *)v74 + v72) = v94;
        id v78 = v100;
        *(void *)((char *)v74 + v73) = v100;
        uint64_t v80 = v91;
        uint64_t v79 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v76, a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v92);
        swift_retain();
        swift_retain();
        id v81 = v77;
        id v82 = v78;
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v76, v79);
        Class v83 = (void *)aBlock[0];
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = sub_100026F54;
        *(void *)(v84 + 24) = v74;
        aBlock[4] = (uint64_t)sub_10002704C;
        aBlock[5] = v84;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_10004DAE8;
        aBlock[3] = (uint64_t)&unk_1002F5180;
        uint64_t v85 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        [v83 recreateInheritanceKeyWithAccessKey:v81 completion:v85];
        _Block_release(v85);
        swift_unknownObjectRelease();
        swift_errorRelease();
        swift_release();

        return;
      }
    }
    else if (v98)
    {
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v60, v61))
      {
        swift_errorRelease();
        swift_errorRelease();
        goto LABEL_24;
      }
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 138412290;
      swift_errorRetain();
      uint64_t v64 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v64;
      uint64_t v52 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v63 = v64;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Preflight error other than error 32 or error 34. Error: %@", v62, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_23;
    }
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v60, v65))
    {
LABEL_24:
      uint64_t v67 = v97;

      swift_retain();
      swift_errorRetain();
      uint64_t v68 = v101;
      swift_retain();
      id v69 = v100;
      sub_1000265D0(v69, 0, v52, a1, a2, a2, v69, v67, v68, a1);
      swift_errorRelease();

      swift_release();
      swift_release();
      swift_errorRelease();
      return;
    }
    int v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v66 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v65, "Feature flag turned off, not recreating new access key.", v66, 2u);
LABEL_23:
    swift_slowDealloc();
    goto LABEL_24;
  }
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  sub_100007288(v40, (uint64_t)qword_10033E7F0);
  sub_100018ABC(a3, (uint64_t)v27);
  swift_retain();
  unint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v99 = a3;
    uint64_t v44 = v43;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315394;
    v97 = (uint64_t (*)(void))a6;
    uint64_t v45 = a2;
    uint64_t v46 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v47 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    uint64_t v103 = sub_100135190(v46, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v103 = sub_100135190(v48, v49, aBlock);
    a6 = (uint64_t)v97;
    a2 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018B20((uint64_t)v27);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - succeeded for beneficiaryID %s", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v99;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_100018B20((uint64_t)v27);
  }

  swift_retain();
  uint64_t v58 = v101;
  swift_retain();
  id v59 = v100;
  sub_100027D40(v59, 1, a3, 0, a2, a2, v59, a6, v58, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t))sub_1002594F0);
  swift_release();

  swift_release();
}

uint64_t sub_10001FF08(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  return sub_10001FF14(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight event reported. %s");
}

uint64_t sub_10001FF14(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, char *a6)
{
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E7F0);
  id v12 = a2;
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    format = a6;
    uint64_t v24 = a3;
    uint64_t v16 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v16, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    id v18 = [v12 debugDescription];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    sub_100135190(v19, v21, &v25);
    a3 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, format, (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return a3(a5);
}

uint64_t sub_100020180(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  id v82 = a8;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  uint64_t v22 = __chkstk_darwin(*(void *)(v20 + 64), v21);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  if (a2)
  {
    swift_errorRetain();
    a3(a2);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v79 = v19;
    uint64_t v80 = v16;
    uint64_t v81 = a4;
    if (a1)
    {
      BOOL v32 = a7;
      uint64_t v33 = (char *)v68 - v27;
      uint64_t v72 = v26;
      uint64_t v75 = v30;
      uint64_t v76 = v29;
      uint64_t v77 = v28;
      id v78 = v32;
      uint64_t v34 = qword_100320BC0;
      id v35 = a1;
      if (v34 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E7F0);
      uint64_t v37 = a6;
      sub_100018ABC(a6, (uint64_t)v33);
      id v38 = v35;
      swift_retain();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      int v41 = v40;
      BOOL v42 = os_log_type_enabled(v39, v40);
      uint64_t v73 = a5;
      id v74 = v38;
      if (v42)
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v84 = v71;
        *(_DWORD *)uint64_t v43 = 136315650;
        v68[1] = v43 + 4;
        os_log_t v69 = v39;
        int v70 = v41;
        uint64_t v45 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
        unint64_t v44 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
        swift_bridgeObjectRetain();
        uint64_t v83 = sub_100135190(v45, v44, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v46 = v15;
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v83 = sub_100135190(v47, v48, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100018B20((uint64_t)v33);
        *(_WORD *)(v43 + 22) = 2080;
        id v49 = [v38 beneficiaryID];
        uint64_t v50 = v79;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v53 = v52;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v50, v46);
        uint64_t v83 = sub_100135190(v51, v53, &v84);
        uint64_t v37 = a6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v54 = v69;
        _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v70, "%s - successfully recreated inheritanceKey for beneficiaryID %s and new OTPeerID %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
        sub_100018B20((uint64_t)v33);
      }
      unint64_t v55 = v82;
      char v56 = a3;
      uint64_t v57 = v76;
      sub_100018ABC(v37, v76);
      unint64_t v58 = (*(unsigned __int8 *)(v75 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      unint64_t v59 = (v72 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v60 = (void *)swift_allocObject();
      uint64_t v61 = v73;
      v60[2] = v73;
      v60[3] = v56;
      uint64_t v62 = v61;
      v60[4] = v81;
      sub_100024CE0(v57, (uint64_t)v60 + v58);
      *(void *)((char *)v60 + v59) = v55;
      uint64_t v63 = v77;
      sub_100018ABC(v37, v77);
      uint64_t v64 = (void *)swift_allocObject();
      v64[2] = v62;
      v64[3] = sub_100027058;
      v64[4] = v60;
      sub_100024CE0(v63, (uint64_t)v64 + v58);
      os_log_type_t v65 = v74;
      *(void *)((char *)v64 + v59) = v74;
      swift_retain_n();
      id v66 = v65;
      swift_retain();
      id v67 = v55;
      swift_retain();
      sub_100022E80(v78, v66, (void (*)(void *))sub_100027270);
      swift_release();

      return swift_release();
    }
    else
    {
      return ((uint64_t (*)(void))a3)(0);
    }
  }
}

uint64_t sub_1000207B0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E7F0);
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v38 = a4;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v37 = a3;
      uint64_t v40 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v22 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_100135190(v23, v22, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "  %s - failed to verify and update BeneficiaryInfoRecord", v20, 0xCu);
      swift_arrayDestroy();
      a3 = v37;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    swift_errorRetain();
    a3(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7F0);
    sub_100018ABC(a5, (uint64_t)v15);
    swift_retain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v40 = v35;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v36 = a6;
      uint64_t v37 = a3;
      uint64_t v28 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_100135190(v28, v29, &v40);
      uint64_t v38 = a4;
      uint64_t v39 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      a3 = v37;
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v31, v32, &v40);
      a4 = v38;
      a6 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - succeeded for beneficiaryID %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100018B20((uint64_t)v15);
    }

    swift_retain();
    id v34 = a6;
    swift_retain();
    sub_100027D40(v34, 1, a5, 0, a2, a2, v34, (uint64_t)a3, a4, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t))sub_10025A258);
    swift_release();

    return swift_release();
  }
}

uint64_t sub_100020C94(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E7F0);
  id v7 = a2;
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    os_log_type_t v18 = a3;
    uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v12, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    id v13 = [v7 debugDescription];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_100135190(v14, v16, &v19);
    a3 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] 🌈 Preflight event reported. %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return a3(0);
}

void sub_100020EF8(uint64_t a1, id *a2, void *a3)
{
  uint64_t v7 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a2)
  {
    long long v28 = 0u;
    long long v29 = 0u;
LABEL_10:
    sub_100006574((uint64_t)&v28, &qword_100328490);
    goto LABEL_11;
  }
  id v11 = *a2;
  *(void *)&v27[0] = UUID.uuidString.getter();
  *((void *)&v27[0] + 1) = v12;
  swift_bridgeObjectRetain();
  id v13 = [v11 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  sub_10002895C((uint64_t)v27, (uint64_t)&v28, &qword_100328490);
  swift_bridgeObjectRelease();
  if (!*((void *)&v29 + 1)) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    uint64_t v14 = Data.init(base64Encoded:options:)();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = UUID.uuidString.getter();
      uint64_t v19 = v18;
      sub_100013140(v14, v16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v28 = *a3;
      *a3 = 0x8000000000000000;
      sub_10022C21C(v14, v16, v17, v19, isUniquelyReferenced_nonNull_native);
      *a3 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000196A0(v14, v16);
      return;
    }
  }
LABEL_11:
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E7F0);
  sub_100018ABC(a1, (uint64_t)v10);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v30 = v3;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    type metadata accessor for UUID();
    sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&v27[0] = sub_100135190(v25, v26, (uint64_t *)&v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100018B20((uint64_t)v10);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Wrapped key not found in keychain! UUID %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100018B20((uint64_t)v10);
  }
}

uint64_t sub_1000212D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_1003228A0);
  v6[20] = v7;
  v6[21] = *(void *)(v7 - 8);
  v6[22] = swift_task_alloc();
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CB0);
  v6[23] = v8;
  v6[24] = *(void *)(v8 - 8);
  v6[25] = swift_task_alloc();
  uint64_t v9 = sub_100009F04(&qword_100325870);
  v6[26] = v9;
  v6[27] = *(void *)(v9 - 8);
  v6[28] = swift_task_alloc();
  return _swift_task_switch(sub_100021460, 0, 0);
}

uint64_t sub_100021460()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[17];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v3);
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v5 = [*(id *)(*sub_100008EF8(v0 + 2, v0[5]) + 16) aa_primaryAppleAccount];
  if (v5 && (uint64_t v6 = v5, v7 = objc_msgSend(v5, "aa_altDSID"), v6, v7))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_100008EA8((uint64_t)(v0 + 2));
  swift_release();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v9)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  id v12 = [self analyticsEventWithName:v10 altDSID:v11 flowID:0];
  v0[29] = v12;

  if (v12)
  {
    swift_retain();
    id v13 = sub_100221DFC();
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v16 = v0[24];
      uint64_t v15 = v0[25];
      uint64_t v17 = v0[23];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v0[17] + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v17);
      Dependency.wrappedValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      uint64_t v18 = (void *)v0[16];
      [v18 securityLevelForAccount:v14];
    }
    swift_release();
    uint64_t v28 = v0[21];
    uint64_t v27 = v0[22];
    uint64_t v29 = v0[20];
    uint64_t v30 = v0[17];
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    [v12 setObject:isa forKeyedSubscript:kAAAnalyticsSecurityLevel];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v30 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v29);
    Dependency.wrappedValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    sub_100056834();
    Class v32 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100008EA8((uint64_t)(v0 + 7));
    [v12 setObject:v32 forKeyedSubscript:kAAAnalyticsCdpStatus];

    id v33 = v12;
    sub_1002220DC(v12);
    uint64_t v35 = (uint64_t (*)(id))((char *)&dword_10032DAD8 + dword_10032DAD8);
    id v34 = (void *)swift_task_alloc();
    v0[30] = v34;
    *id v34 = v0;
    v34[1] = sub_1000219D4;
    return v35(v12);
  }
  else
  {
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E7F0);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "createEvent: Self is nil. Aborting Report Event.", v22, 2u);
      swift_slowDealloc();
    }
    os_log_type_t v23 = (void (*)(void *, uint64_t))v0[18];

    type metadata accessor for InheritanceError(0);
    v0[12] = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000255D8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v24 = (void *)v0[13];
    v23(v24, 1);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_1000219D4()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 232);
  swift_task_dealloc();

  return _swift_task_switch(sub_100021AE8, 0, 0);
}

uint64_t sub_100021AE8()
{
  uint64_t v4 = (uint64_t (*)(id))((char *)&dword_10032DAD0 + dword_10032DAD0);
  id v1 = *(id *)(v0 + 232);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100021BA4;
  return v4(v1);
}

uint64_t sub_100021BA4()
{
  id v1 = *(void **)(*(void *)v0 + 232);
  swift_task_dealloc();

  return _swift_task_switch(sub_100021CB8, 0, 0);
}

uint64_t sub_100021CB8()
{
  uint64_t v20 = v0;
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  id v1 = (void *)v0[29];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E7F0);
  swift_retain_n();
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  id v7 = (void *)v0[29];
  uint64_t v8 = v0[17];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v0[14] = sub_100135190(v11, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2112;
    v0[15] = v7;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - Event created %@", (uint8_t *)v9, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  id v13 = (void *)v0[29];
  uint64_t v14 = (void (*)(void *, void))v0[18];
  id v15 = v13;
  v14(v13, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100021F98(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(void))
{
  return sub_100028494(a2, a3, a4, a5, a6);
}

uint64_t sub_100021FB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    uint64_t v4 = a2;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    BOOL v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v11;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error creating accessKey. Error: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    a1 = 0;
    a2 = v4;
  }
  return a3(a1, a2);
}

void sub_100022188(void *a1, uint64_t a2, void (*a3)(void *), void (*a4)(void *), uint64_t a5, void *a6)
{
  uint64_t v68 = (void *)a5;
  os_log_t v69 = a3;
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v66 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  id v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v18 = __chkstk_darwin(v14 - 8, v17);
  uint64_t v65 = (uint64_t)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v28 = qword_100320BC0;
    id v29 = a1;
    if (v28 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E7F0);
    swift_retain();
    id v31 = v29;
    Class v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      id v67 = a4;
      uint64_t v35 = v34;
      uint64_t v36 = (void *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v68 = a1;
      v71[0] = v37;
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v38 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v39 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v70 = sub_100135190(v38, v39, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v70 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v36 = v40;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - old accessKey properties do not match new accessKey properties. Error: %@", (uint8_t *)v35, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      a1 = v68;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    id v59 = v31;
    v69(a1);
  }
  else
  {
    uint64_t v63 = v25;
    uint64_t v64 = v24;
    id v41 = [a6 beneficiaryID];
    id v67 = a4;
    id v42 = v41;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100018ABC((uint64_t)v68, (uint64_t)v21);
    uint64_t v43 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v44 = (v43 + 24) & ~v43;
    uint64_t v60 = v43 | 7;
    uint64_t v61 = v16 + 7;
    uint64_t v62 = v27;
    unint64_t v45 = (v16 + 7 + v44) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v46 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = a2;
    sub_100024CE0((uint64_t)v21, v47 + v44);
    unint64_t v48 = (void (**)(void *))(v47 + v45);
    uint64_t v49 = v66;
    uint64_t v50 = v67;
    *unint64_t v48 = v69;
    v48[1] = v50;
    *(void *)(v47 + v46) = a6;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v13, a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v10);
    swift_retain();
    swift_retain();
    id v51 = a6;
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v10);
    sub_100008EF8(v71, v71[3]);
    uint64_t v52 = (uint64_t)v68;
    uint64_t v53 = v65;
    sub_100018ABC((uint64_t)v68, v65);
    uint64_t v54 = (v43 + 16) & ~v43;
    unint64_t v55 = (v61 + v54) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v56 = swift_allocObject();
    sub_100024CE0(v53, v56 + v54);
    uint64_t v57 = (uint64_t (**)(uint64_t))(v56 + v55);
    *uint64_t v57 = sub_100027548;
    v57[1] = (uint64_t (*)(uint64_t))v47;
    swift_retain();
    uint64_t v58 = (uint64_t)v62;
    sub_1000E8C3C(v52, (uint64_t)v62, (uint64_t)sub_1000277E8, v56);
    swift_release();
    sub_100008EA8((uint64_t)v71);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v58, v64);
  }
}

uint64_t sub_10002276C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, void *a6)
{
  uint64_t v57 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v13);
  uint64_t v15 = &v52[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v20 = &v52[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18, v21);
  uint64_t v23 = &v52[-v22];
  if (a1)
  {
    uint64_t v58 = a5;
    swift_errorRetain();
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E7F0);
    sub_100018ABC(a3, (uint64_t)v20);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v60 = v55;
      *(_DWORD *)uint64_t v27 = 136315650;
      uint64_t v56 = a4;
      uint64_t v30 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v30, v29, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v31, v32, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v20);
      *(_WORD *)(v27 + 22) = 2112;
      uint64_t v33 = _convertErrorToNSError(_:)();
      uint64_t v59 = v33;
      a4 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v33;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, " %s - failed to update and save BeneficiaryInfoRecord %s     error: %@", (uint8_t *)v27, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100018B20((uint64_t)v20);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v56 = a4;
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E7F0);
    sub_100018ABC(a3, (uint64_t)v23);
    id v35 = a6;
    swift_retain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    int v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v58 = a5;
      uint64_t v40 = v39;
      uint64_t v55 = swift_slowAlloc();
      uint64_t v60 = v55;
      *(_DWORD *)uint64_t v40 = 136315650;
      os_log_t v54 = v36;
      int v53 = v38;
      uint64_t v41 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v42 = *(void *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100135190(v41, v42, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2080;
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v43 = v57;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v59 = sub_100135190(v44, v45, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v23);
      *(_WORD *)(v40 + 22) = 2080;
      id v46 = [v35 beneficiaryID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v49 = v48;
      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v15, v43);
      uint64_t v59 = sub_100135190(v47, v49, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v50 = v54;
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v53, "%s - successfully updated and saved inheritanceKey for beneficiaryID\n%s and new OTPeerID %s", (uint8_t *)v40, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      sub_100018B20((uint64_t)v23);
    }
    return ((uint64_t (*)(void))v56)(0);
  }
}

void sub_100022E80(void *a1, void *a2, void (*a3)(void *))
{
  uint64_t v4 = v3;
  id v8 = [a1 wrappedKeyData];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v12 = 0xF000000000000000;
  }
  id v13 = [a2 wrappedKeyData];
  if (!v13)
  {
    if (v12 >> 60 == 15) {
      goto LABEL_18;
    }
    uint64_t v15 = 0;
    unint64_t v17 = 0xF000000000000000;
    goto LABEL_11;
  }
  uint64_t v14 = v13;
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  if (v12 >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      sub_1000196B4(v10, v12);
      char v24 = sub_100012680(v10, v12, v15, v17);
      sub_1000196A0(v15, v17);
      sub_1000196A0(v10, v12);
      sub_1000196A0(v10, v12);
      if (v24) {
        goto LABEL_18;
      }
LABEL_12:
      if (qword_100320BC0 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100007288(v18, (uint64_t)qword_10033E7F0);
      swift_retain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v19, v20)) {
        goto LABEL_50;
      }
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      unint64_t v22 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain();
      sub_100135190(v23, v22, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - Wrapped key in new inheritanceKey does not match the existing wrapped key.", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_51;
    }
LABEL_11:
    sub_1000196A0(v10, v12);
    sub_1000196A0(v15, v17);
    goto LABEL_12;
  }
  if (v17 >> 60 != 15) {
    goto LABEL_11;
  }
LABEL_18:
  id v25 = [a1 wrappingKeyData];
  if (v25)
  {
    os_log_type_t v26 = v25;
    uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v29 = 0xF000000000000000;
  }
  id v30 = [a2 wrappingKeyData];
  if (!v30)
  {
    if (v29 >> 60 == 15) {
      goto LABEL_35;
    }
    uint64_t v32 = 0;
    unint64_t v34 = 0xF000000000000000;
    goto LABEL_28;
  }
  uint64_t v31 = v30;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v34 = v33;

  if (v29 >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      sub_1000196B4(v27, v29);
      char v40 = sub_100012680(v27, v29, v32, v34);
      sub_1000196A0(v32, v34);
      sub_1000196A0(v27, v29);
      sub_1000196A0(v27, v29);
      if (v40) {
        goto LABEL_35;
      }
      goto LABEL_29;
    }
LABEL_28:
    sub_1000196A0(v27, v29);
    sub_1000196A0(v32, v34);
LABEL_29:
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E7F0);
    swift_retain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v36)) {
      goto LABEL_50;
    }
    os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v37 = 136315138;
    uint64_t v38 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v39 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    sub_100135190(v38, v39, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v36, "%s - Wrapping key in new inheritanceKey does not match existing wrapping key.", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_51:
    type metadata accessor for InheritanceError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000255D8((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v56 = v58;
    a3(v58);

    return;
  }
  if (v34 >> 60 != 15) {
    goto LABEL_28;
  }
LABEL_35:
  id v41 = [a1 claimTokenData];
  if (v41)
  {
    unint64_t v42 = v41;
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v45 = 0xF000000000000000;
  }
  id v46 = [a2 claimTokenData];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v50 = v49;

    if (v45 >> 60 == 15)
    {
      if (v50 >> 60 == 15) {
        goto LABEL_53;
      }
      goto LABEL_45;
    }
    if (v50 >> 60 == 15)
    {
LABEL_45:
      sub_1000196A0(v43, v45);
      sub_1000196A0(v48, v50);
      goto LABEL_46;
    }
    sub_1000196B4(v43, v45);
    char v57 = sub_100012680(v43, v45, v48, v50);
    sub_1000196A0(v48, v50);
    sub_1000196A0(v43, v45);
    sub_1000196A0(v43, v45);
    if ((v57 & 1) == 0)
    {
LABEL_46:
      if (qword_100320BC0 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100007288(v51, (uint64_t)qword_10033E7F0);
      swift_retain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v52))
      {
        int v53 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = (void *)swift_slowAlloc();
        *(_DWORD *)int v53 = 136315138;
        uint64_t v54 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
        unint64_t v55 = *(void *)(v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
        swift_bridgeObjectRetain();
        sub_100135190(v54, v55, (uint64_t *)&v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v52, "%s - Claim code in new inheritanceKey does not match existing claim code.", v53, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_51;
      }
LABEL_50:

      swift_release();
      goto LABEL_51;
    }
  }
  else if (v45 >> 60 != 15)
  {
    uint64_t v48 = 0;
    unint64_t v50 = 0xF000000000000000;
    goto LABEL_45;
  }
LABEL_53:
  a3(0);
}

uint64_t sub_100023710(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E7F0);
    sub_100018ABC(a2, (uint64_t)v12);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)char v24 = 136315138;
      unint64_t v34 = v24 + 4;
      uint64_t v35 = a3;
      type metadata accessor for UUID();
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_100135190(v25, v26, &v37);
      a3 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to update BeneficiaryInfoRecord for beneficiaryUUID: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100018B20((uint64_t)v12);
    }

    swift_errorRetain();
    a3(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320BC0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7F0);
    sub_100018ABC(a2, (uint64_t)v15);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v35 = a4;
      *(_DWORD *)id v30 = 136315138;
      unint64_t v34 = v30 + 4;
      type metadata accessor for UUID();
      sub_1000255D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_100135190(v31, v32, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100018B20((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully updated BeneficiaryInfoRecord for beneficiaryUUID: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100018B20((uint64_t)v15);
    }

    a3(0);
    return sub_100006574((uint64_t)v19, &qword_100321CF0);
  }
}

void *sub_100023BFC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  sub_1002288B8(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 8)
    {
      swift_bridgeObjectRetain();
      sub_100009F04((uint64_t *)&unk_10032DBD0);
      sub_100009F04((uint64_t *)&unk_100321D10);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002288B8(0, _swiftEmptyArrayStorage[2] + 1, 1);
        uint64_t v3 = _swiftEmptyArrayStorage;
      }
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1)
      {
        sub_1002288B8(v5 > 1, v6 + 1, 1);
        uint64_t v3 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v6 + 1;
      _swiftEmptyArrayStorage[v6 + 4] = v8;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_100023D4C(uint64_t (*a1)(void))
{
  uint64_t result = a1();
  if (result) {
    return _swift_stdlib_bridgeErrorToNSError();
  }
  return result;
}

uint64_t sub_100023D7C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100023DA4(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_100023E5C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

unint64_t sub_100023E8C(uint64_t a1, void *a2)
{
  uint64_t v33 = type metadata accessor for DaemonAccountStore();
  unint64_t v34 = &off_1002F66C0;
  v32[0] = a1;
  uint64_t v4 = *(void **)(*sub_100008EF8(v32, v33) + 16);
  swift_retain();
  id v5 = [v4 aa_primaryAppleAccount];
  if (v5)
  {
    unint64_t v6 = v5;
    id v7 = [v5 aa_altDSID];

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v9 = [a2 authKitAccountWithAltDSID:v8];

      if (v9)
      {
        id v10 = [a2 beneficiaryInfoForAccount:v9];
        if (v10)
        {
          uint64_t v11 = v10;
          sub_100009F04((uint64_t *)&unk_10032DBD0);
          uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v13 = sub_100023BFC(v12);
          swift_bridgeObjectRelease();
          if (v13)
          {
            if (qword_100320B98 != -1) {
              swift_once();
            }
            uint64_t v14 = type metadata accessor for Logger();
            sub_100007288(v14, (uint64_t)qword_10033E778);
            uint64_t v15 = Logger.logObject.getter();
            os_log_type_t v16 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v15, v16))
            {
              uint64_t v17 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v17 = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, v16, "Parsing beneficiaryInfo...", v17, 2u);
              swift_slowDealloc();
            }

            uint64_t v31 = &_swiftEmptyDictionarySingleton;
            uint64_t v18 = v13[2];
            if (v18)
            {
              swift_bridgeObjectRetain();
              for (uint64_t i = 0; i != v18; ++i)
              {
                uint64_t v20 = v13[i + 4];
                uint64_t v30 = v20;
                sub_10025592C(&v30, (uint64_t *)&v31);
              }
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            uint64_t v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v21, v22))
            {
              os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_type_t v23 = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "Finished parsing beneficiaryInfo...", v23, 2u);
              swift_slowDealloc();
            }

            unint64_t v24 = (unint64_t)v31;
            goto LABEL_23;
          }
        }
      }
    }
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E778);
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failure to fetch beneficiaryInfo.", v28, 2u);
    swift_slowDealloc();
  }

  unint64_t v24 = sub_100220864((uint64_t)_swiftEmptyArrayStorage);
LABEL_23:
  sub_100008EA8((uint64_t)v32);
  return v24;
}

uint64_t sub_100024244(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100321C70);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_100007288(v15, (uint64_t)qword_10033E7F0);
  swift_retain();
  uint64_t v48 = v16;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v45 = v11;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v47 = a2;
    uint64_t v20 = (uint8_t *)v19;
    unint64_t v44 = (void *)swift_slowAlloc();
    v51[0] = v44;
    uint64_t v46 = v7;
    *(_DWORD *)uint64_t v20 = 136315138;
    unint64_t v42 = v20 + 4;
    uint64_t v43 = v20;
    uint64_t v21 = v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName;
    os_log_type_t v22 = v14;
    uint64_t v23 = v10;
    uint64_t v24 = v6;
    uint64_t v25 = a1;
    uint64_t v26 = v3;
    uint64_t v28 = *(void *)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v27 = *(void *)(v21 + 8);
    swift_bridgeObjectRetain();
    uint64_t v29 = v28;
    uint64_t v3 = v26;
    a1 = v25;
    uint64_t v6 = v24;
    uint64_t v10 = v23;
    uint64_t v14 = v22;
    uint64_t v50 = sub_100135190(v29, v27, (uint64_t *)v51);
    uint64_t v7 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v11 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - started.", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v47;
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__preferences, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  id v30 = v51[0];
  unsigned int v31 = [v51[0] isLCDeletionChangeCKStatusToDeclinedEnabled];

  unint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  if (v31)
  {
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "lcDeletionChangeCKStatusToDeclined is on", v35, 2u);
      swift_slowDealloc();
    }

    uint64_t v36 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v49, v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v36, v6);
    sub_100008EF8(v51, v52);
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = v3;
    v37[3] = a1;
    _OWORD v37[4] = a2;
    swift_retain();
    swift_retain();
    sub_1000E5174((uint64_t)sub_10002480C, (uint64_t)v37);
  }
  else
  {
    if (v34)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "lcDeletionChangeCKStatusToDeclined is off", v38, 2u);
      swift_slowDealloc();
    }

    unint64_t v39 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v49, v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v39, v6);
    sub_100008EF8(v51, v52);
    char v40 = (void *)swift_allocObject();
    v40[2] = v3;
    v40[3] = a1;
    v40[4] = a2;
    swift_retain();
    swift_retain();
    sub_100008810((uint64_t)sub_1000247F8, (uint64_t)v40);
  }
  swift_release();
  return sub_100008EA8((uint64_t)v51);
}

uint64_t sub_1000247F8(uint64_t a1, char a2)
{
  return sub_10001B128(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_10002480C(uint64_t a1, char a2)
{
  return sub_10001AC58(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100024820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E7F0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cleaned up stale records. Continuing with preflight....", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_100008EF8(v18, v18[3]);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  swift_retain();
  swift_retain();
  sub_100008810((uint64_t)sub_1000289D0, (uint64_t)v15);
  swift_release();
  return sub_100008EA8((uint64_t)v18);
}

uint64_t sub_100024A64()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100024AA4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100024ADC()
{
  id v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100024CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100024D44(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10001CB10(a1, a2, v8, v2 + v6, v9, v10);
}

uint64_t sub_100024E00()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100024E48()
{
  sub_10001ED84(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_100024E54()
{
  id v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_10002506C(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v2 + 16);
  uint64_t v10 = *(void *)(v2 + v7);
  uint64_t v11 = *(void *)(v2 + v8);
  uint64_t v12 = v2 + v6;
  os_log_type_t v13 = (void (**)(void))(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];

  sub_10001CF08(a1, v4, v9, v12, v10, v11, v14, v15);
}

uint64_t sub_100025138()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100025180(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100025248;
  return sub_1000212D8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100025248()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10002533C()
{
  id v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100025534(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10001D4B0(a1, v5, v1 + v4, v6);
}

uint64_t sub_1000255D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100025620(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9)
{
  return sub_100025680(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight did not begin. Missing Wrapped Key in keychain. Event reported: %s\"");
}

uint64_t sub_100025650(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9)
{
  return sub_100025680(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight did not begin. Invalid InheritanceAccessKeyRecord. Event reported: %s\"");
}

uint64_t sub_100025680(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v12 = a4;
  if (a1)
  {
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
    uint64_t v56 = sub_10000850C(0, (unint64_t *)&qword_100321D00);
    v55[0] = (uint64_t)a1;
    sub_100009F48(v55, v54);
    id v19 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10022C3A4(v54, v16, v18, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_getErrorValue();
      swift_errorRetain();
      sub_100034F24(v52, v53);
      swift_getErrorValue();
      id v21 = sub_100034F88(v50, v51);
      id v22 = objc_allocWithZone((Class)NSError);
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v25 = [v22 initWithDomain:v23 code:v21 userInfo:isa];

      uint64_t v26 = (void *)_convertErrorToNSError(_:)();
      [a3 populateUnderlyingErrorsStartingWithRootError:v26];

      swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v28 = v19;
      uint64_t v29 = (void *)_convertErrorToNSError(_:)();

      [a3 populateUnderlyingErrorsStartingWithRootError:v29];
    }
    uint64_t v12 = a4;
  }
  else
  {
    if (a2) {
      unint64_t v27 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      unint64_t v27 = 0;
    }
    [a3 populateUnderlyingErrorsStartingWithRootError:v27];
  }
  uint64_t v31 = a9;
  id v30 = a10;
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100007288(v32, (uint64_t)qword_10033E7F0);
  id v33 = a3;
  swift_retain();
  BOOL v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    v55[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315394;
    uint64_t v47 = a8;
    uint64_t v37 = *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v38 = *(void *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    *(void *)&v54[0] = sub_100135190(v37, v38, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    id v39 = [v33 debugDescription];
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v12;
    unint64_t v42 = a7;
    unint64_t v44 = v43;

    uint64_t v31 = a9;
    *(void *)&v54[0] = sub_100135190(v40, v44, v55);
    a8 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a7 = v42;
    uint64_t v12 = v41;
    id v30 = a10;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - Reporting Preflight Event %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  [*(id *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter) sendEvent:v33];
  return sub_10001FF14(a5, a6, a7, a8, v31, v30);
}

uint64_t sub_100025B4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, void (*a11)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))
{
  uint64_t v76 = a3;
  uint64_t v77 = a8;
  id v78 = a11;
  uint64_t v79 = a4;
  uint64_t v15 = sub_100009F04(&qword_100321CD0);
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v74 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v72 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v18);
  uint64_t v66 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100009F04(&qword_100325870);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v20);
  uint64_t v63 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100009F04(&qword_100321CF8);
  uint64_t v68 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  id v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = a6;
  swift_retain();
  id v71 = a7;
  uint64_t v80 = a9;
  swift_retain();
  id v70 = a10;
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v75 = a1;
  [a1 setObject:isa forKeyedSubscript:kAAFDidSucceed];

  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E7F0);
  swift_retain();
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    v84[0] = swift_slowAlloc();
    *(_DWORD *)id v30 = 136315138;
    uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))(v30 + 4);
    uint64_t v31 = a5;
    uint64_t v32 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v33 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v83[0] = sub_100135190(v32, v33, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a5 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - Verifying claim code", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v34 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  uint64_t v35 = v68;
  uint64_t v36 = a5;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
  uint64_t v37 = v25;
  unint64_t v38 = v25;
  uint64_t v39 = v22;
  v62(v38, v34, v22);
  Dependency.wrappedValue.getter();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  v40(v37, v22);
  uint64_t v41 = v64;
  unint64_t v42 = v63;
  uint64_t v43 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v36 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v65);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  uint64_t v44 = v67;
  uint64_t v45 = v66;
  uint64_t v46 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v36 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v69);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  uint64_t v47 = v82;
  uint64_t v48 = sub_100008EF8(v83, v83[3]);
  unint64_t v49 = sub_100023E8C(*v48, v47);

  sub_100008EA8((uint64_t)v83);
  sub_100008EA8((uint64_t)v84);
  v62(v37, v34, v39);
  Dependency.wrappedValue.getter();
  v40(v37, v39);
  uint64_t v50 = v72;
  uint64_t v51 = v73;
  uint64_t v52 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v36 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v74);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  uint64_t v53 = v83[0];
  swift_retain();
  uint64_t v54 = v79;
  swift_errorRetain();
  id v55 = v75;
  uint64_t v56 = v81;
  swift_retain();
  id v57 = v71;
  uint64_t v58 = v80;
  swift_retain();
  id v59 = v70;
  swift_retain();
  swift_errorRetain();
  id v60 = v55;
  v78(v76, v49, v53, v54, v60, v36, v56, v57, v77, v58, v59);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_100008EA8((uint64_t)v84);
  swift_release();

  return swift_release();
}

uint64_t sub_1000262C8()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (v3 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v9 + v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v10 + 8, v2 | 7);
}

void sub_1000264E0(unint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  int v8 = *(unsigned __int8 *)(v1 + v5);
  unint64_t v9 = *(void **)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = *(void **)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  sub_10001F298(a1, v7, v1 + v4, v8, v9, v10, v11, v12);
}

uint64_t sub_1000265A0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(void), uint64_t a8, uint64_t a9)
{
  return sub_100025680(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight event reported. %s");
}

uint64_t sub_1000265D0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10)
{
  id v78 = a8;
  unint64_t v79 = a4;
  uint64_t v77 = a3;
  uint64_t v14 = sub_100009F04(&qword_100321CD0);
  uint64_t v74 = *(void *)(v14 - 8);
  uint64_t v75 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v73 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v17);
  uint64_t v68 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100009F04(&qword_100325870);
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v19);
  uint64_t v65 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100009F04(&qword_100321CF8);
  uint64_t v70 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = a6;
  swift_retain();
  id v72 = a7;
  uint64_t v80 = a9;
  swift_retain();
  uint64_t v81 = a10;
  swift_errorRetain();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v76 = a1;
  [a1 setObject:isa forKeyedSubscript:kAAFDidSucceed];

  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100007288(v26, (uint64_t)qword_10033E7F0);
  swift_retain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    v85[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v29 = 136315138;
    uint64_t v64 = (void (*)(char *, uint64_t, uint64_t))(v29 + 4);
    uint64_t v30 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName;
    uint64_t v31 = a5;
    uint64_t v32 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v33 = *(void *)(v30 + 8);
    swift_bridgeObjectRetain();
    uint64_t v34 = v32;
    a5 = v31;
    v84[0] = sub_100135190(v34, v33, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - Verifying claim code", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v35 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  uint64_t v36 = v70;
  uint64_t v37 = a5;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  unint64_t v38 = v24;
  uint64_t v39 = v24;
  uint64_t v40 = v21;
  v64(v39, v35, v21);
  Dependency.wrappedValue.getter();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v38, v21);
  uint64_t v42 = v66;
  uint64_t v43 = v65;
  uint64_t v44 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v37 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v67);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  uint64_t v45 = v69;
  uint64_t v46 = v68;
  uint64_t v47 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v37 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v71);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  uint64_t v48 = v83;
  unint64_t v49 = sub_100008EF8(v84, v84[3]);
  unint64_t v50 = sub_100023E8C(*v49, v48);

  sub_100008EA8((uint64_t)v84);
  sub_100008EA8((uint64_t)v85);
  v64(v38, v35, v40);
  Dependency.wrappedValue.getter();
  v41(v38, v40);
  uint64_t v51 = v73;
  uint64_t v52 = v74;
  uint64_t v53 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v37 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v75);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
  uint64_t v54 = v84[0];
  swift_retain();
  unint64_t v55 = v79;
  swift_errorRetain();
  id v56 = v76;
  uint64_t v57 = v82;
  swift_retain();
  id v58 = v72;
  uint64_t v59 = v80;
  swift_retain();
  uint64_t v60 = v81;
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  id v61 = v56;
  sub_1002586AC(v77, v50, v54, v55, (uint64_t)v61, v37, v57, v58, v78, v59, v60);
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_100008EA8((uint64_t)v85);
  swift_release();

  swift_release();
  return swift_errorRelease();
}

uint64_t sub_100026D48()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v10 + 8, v2 | 7);
}

uint64_t sub_100026F54(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (void (*)(uint64_t))v2[2];
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  uint64_t v11 = *(void **)((char *)v2 + v7);
  uint64_t v12 = *(void **)((char *)v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100020180(a1, a2, v8, v9, v10, (uint64_t)v2 + v6, v11, v12);
}

uint64_t sub_100027014()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002704C(uint64_t a1, uint64_t a2)
{
  return sub_100021FB4(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100027058(uint64_t a1)
{
  return sub_100027288(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))sub_1000207B0);
}

uint64_t sub_100027074()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v11 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v9 + 8, v2 | 7);
}

uint64_t sub_100027270(uint64_t a1)
{
  return sub_100027288(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))sub_100022188);
}

uint64_t sub_100027288(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *((void *)v2 + 2);
  uint64_t v7 = *((void *)v2 + 3);
  uint64_t v8 = *((void *)v2 + 4);
  uint64_t v9 = *(void *)&v2[(*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8];

  return a2(a1, v6, v7, v8, &v2[v5], v9);
}

uint64_t sub_100027340()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v11 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (((v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v9 + 8, v2 | 7);
}

uint64_t sub_100027548(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void (**)(void))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);
  unint64_t v9 = *(void **)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_10002276C(a1, v6, v1 + v4, v7, v8, v9);
}

uint64_t sub_1000275F8()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000277E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeneficiaryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void (**)(void))v6;
  uint64_t v8 = *(void (**)(void))(v6 + 8);

  return sub_100023710(a1, v5, v7, v8);
}

uint64_t sub_100027888(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(void))
{
  uint64_t v8 = a4;
  if (a1)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    uint64_t v49 = sub_10000850C(0, (unint64_t *)&qword_100321D00);
    v48[0] = (uint64_t)a1;
    sub_100009F48(v48, v47);
    id v15 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10022C3A4(v47, v12, v14, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_getErrorValue();
      swift_errorRetain();
      sub_100034F24(v45, v46);
      swift_getErrorValue();
      id v17 = sub_100034F88(v43, v44);
      id v18 = objc_allocWithZone((Class)NSError);
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v21 = [v18 initWithDomain:v19 code:v17 userInfo:isa];

      uint64_t v22 = (void *)_convertErrorToNSError(_:)();
      [a3 populateUnderlyingErrorsStartingWithRootError:v22];

      swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v24 = v15;
      id v25 = (void *)_convertErrorToNSError(_:)();

      [a3 populateUnderlyingErrorsStartingWithRootError:v25];
    }
    uint64_t v8 = a4;
  }
  else
  {
    if (a2) {
      uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v23 = 0;
    }
    [a3 populateUnderlyingErrorsStartingWithRootError:v23];
  }
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100007288(v26, (uint64_t)qword_10033E7F0);
  id v27 = a3;
  swift_retain();
  os_log_type_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    os_log_type_t type = v29;
    uint64_t v31 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v32 = *(void *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    *(void *)&v47[0] = sub_100135190(v31, v32, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    id v33 = [v27 debugDescription];
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = a7;
    unint64_t v37 = v36;

    *(void *)&v47[0] = sub_100135190(v34, v37, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a7 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, type, "%s - Reporting Preflight Event %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  [*(id *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter) sendEvent:v27];
  return sub_100020C94(a5, a6, a7);
}

uint64_t sub_100027D40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t))
{
  uint64_t v73 = a3;
  uint64_t v74 = a8;
  uint64_t v75 = a10;
  uint64_t v76 = a4;
  uint64_t v14 = sub_100009F04(&qword_100321CD0);
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v71 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v69 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_100009F04((uint64_t *)&unk_100321CB0);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v17);
  uint64_t v64 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100009F04(&qword_100325870);
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v19);
  id v61 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100009F04(&qword_100321CF8);
  uint64_t v66 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  id v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = a6;
  swift_retain();
  id v68 = a7;
  uint64_t v77 = a9;
  swift_retain();
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v72 = a1;
  [a1 setObject:isa forKeyedSubscript:kAAFDidSucceed];

  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100007288(v26, (uint64_t)qword_10033E7F0);
  swift_retain();
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    v81[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v29 = 136315138;
    uint64_t v60 = (void (*)(char *, uint64_t, uint64_t))(v29 + 4);
    uint64_t v31 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v30 = *(void *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    v80[0] = sub_100135190(v31, v30, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - Verifying claim code", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v32 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  uint64_t v33 = v66;
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  uint64_t v34 = v24;
  uint64_t v35 = v24;
  uint64_t v36 = v21;
  v60(v35, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol, v21);
  Dependency.wrappedValue.getter();
  uint64_t v37 = a5;
  unint64_t v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v38(v34, v21);
  uint64_t v39 = v62;
  uint64_t v40 = v61;
  uint64_t v41 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v63);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  uint64_t v42 = v65;
  uint64_t v43 = v64;
  uint64_t v44 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v67);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  uint64_t v45 = v79;
  uint64_t v46 = sub_100008EF8(v80, v80[3]);
  unint64_t v47 = sub_100023E8C(*v46, v45);

  sub_100008EA8((uint64_t)v80);
  sub_100008EA8((uint64_t)v81);
  v60(v34, v32, v36);
  Dependency.wrappedValue.getter();
  v38(v34, v36);
  uint64_t v48 = v69;
  uint64_t v49 = v70;
  uint64_t v50 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v71);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  uint64_t v51 = v80[0];
  swift_retain();
  uint64_t v52 = v76;
  swift_errorRetain();
  id v53 = v72;
  uint64_t v54 = v78;
  swift_retain();
  id v55 = v68;
  uint64_t v56 = v77;
  swift_retain();
  swift_retain();
  swift_errorRetain();
  id v57 = v53;
  v75(v73, v47, v51, v52, v57, v37, v54, v55, v74, v56);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_release();

  sub_100008EA8((uint64_t)v81);
  swift_release();

  return swift_release();
}

uint64_t sub_100028494(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a4;
  if (a1)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
    uint64_t v45 = sub_10000850C(0, (unint64_t *)&qword_100321D00);
    v44[0] = (uint64_t)a1;
    sub_100009F48(v44, v43);
    id v13 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10022C3A4(v43, v10, v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_getErrorValue();
      swift_errorRetain();
      sub_100034F24(v41, v42);
      swift_getErrorValue();
      id v15 = sub_100034F88(v39, v40);
      id v16 = objc_allocWithZone((Class)NSError);
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v19 = [v16 initWithDomain:v17 code:v15 userInfo:isa];

      uint64_t v20 = (void *)_convertErrorToNSError(_:)();
      [a3 populateUnderlyingErrorsStartingWithRootError:v20];

      swift_errorRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      id v22 = v13;
      uint64_t v23 = (void *)_convertErrorToNSError(_:)();

      [a3 populateUnderlyingErrorsStartingWithRootError:v23];
    }
    uint64_t v6 = a4;
  }
  else
  {
    if (a2) {
      uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v21 = 0;
    }
    [a3 populateUnderlyingErrorsStartingWithRootError:v21];
  }
  if (qword_100320BC0 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007288(v24, (uint64_t)qword_10033E7F0);
  id v25 = a3;
  swift_retain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v29 = *(void *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    unint64_t v30 = *(void *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain();
    *(void *)&v43[0] = sub_100135190(v29, v30, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    id v31 = [v25 debugDescription];
    uint64_t v32 = a5;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    uint64_t v36 = v33;
    a5 = v32;
    *(void *)&v43[0] = sub_100135190(v36, v35, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - Reporting Preflight Event %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return a5([*(id *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter) sendEvent:v25]);
}

uint64_t sub_100028940(uint64_t *a1)
{
  return sub_10001D6C8(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002895C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100009F04(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for WalrusError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WalrusError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100028B30);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WalrusError()
{
  return &type metadata for WalrusError;
}

unint64_t sub_100028B6C()
{
  unint64_t result = qword_100321D60;
  if (!qword_100321D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321D60);
  }
  return result;
}

uint64_t sub_100028BCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100253764(*a1, *a2);
}

Swift::Int sub_100028BD8()
{
  return Hasher._finalize()();
}

uint64_t sub_100028C7C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100028D0C()
{
  return Hasher._finalize()();
}

unint64_t sub_100028DAC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100029608(*a1);
  *a2 = result;
  return result;
}

void sub_100028DDC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE900000000000067;
  uint64_t v5 = 0x6E69747563657865;
  if (v2 != 1)
  {
    uint64_t v5 = 0x64656873696E6966;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7964616572;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100028E3C(char a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 willChangeValueForKey:v4];

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 willChangeValueForKey:v5];

  *((unsigned char *)v1 + v3) = a1;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 didChangeValueForKey:v6];

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 didChangeValueForKey:v7];
}

uint64_t sub_10002916C()
{
  if ([v0 isCancelled])
  {
    if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state]
      && v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v1 & 1) == 0)
      {
        char v2 = 1;
        return v2 & 1;
      }
    }
  }
  if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state]
    && v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] != 1)
  {
    char v2 = 1;
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1000292B8()
{
  uint64_t result = (uint64_t)[v0 isCancelled];
  if ((result & 1) == 0)
  {
    sub_100028E3C(1);
    char v2 = *(void (**)(void (*)(), uint64_t))&v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    swift_retain();
    swift_retain();
    v2(sub_10002968C, v3);
    swift_release();
    return swift_release_n();
  }
  return result;
}

void sub_100029374()
{
  id Strong = (id)swift_unknownObjectUnownedLoadStrong();
  sub_100028E3C(2);
}

id sub_100029440()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return [super dealloc];
}

uint64_t type metadata accessor for AsyncOperation()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for AsyncOperation.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100029578);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AsyncOperation.State()
{
  return &type metadata for AsyncOperation.State;
}

unint64_t sub_1000295B4()
{
  unint64_t result = qword_100321DA0;
  if (!qword_100321DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321DA0);
  }
  return result;
}

unint64_t sub_100029608(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F3FB8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100029654()
{
  swift_unknownObjectUnownedDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10002968C()
{
}

BOOL sub_100029694(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000296AC()
{
  if (*v0) {
    return 0x6169646F74737563;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1000296E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002A2A8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100029710(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002971C(uint64_t a1)
{
  unint64_t v2 = sub_100029F04();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100029758(uint64_t a1)
{
  unint64_t v2 = sub_100029F04();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100029794()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100029834()
{
  return type metadata accessor for CustodianRemovedMessage();
}

uint64_t type metadata accessor for CustodianRemovedMessage()
{
  uint64_t result = qword_100321DD0;
  if (!qword_100321DD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100029888()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100029924(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  v16[0] = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  NSString v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_100321EA0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100029F04();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = *(unsigned char *)(v2 + 16);
  char v18 = 0;
  sub_100029FAC();
  uint64_t v13 = v16[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    uint64_t v14 = v16[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v16[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v4);
    char v17 = 1;
    sub_100006F30(&qword_1003263A0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_100029B8C(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100321E88);
  uint64_t v7 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100029F04();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v11 = v17;
    type metadata accessor for CustodianRemovedMessage();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = v7;
    char v19 = 0;
    sub_100029F58();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = v17;
    *(unsigned char *)(v17 + 16) = v20;
    char v18 = 1;
    sub_100006F30((unint64_t *)&unk_100321640);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v11 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v6, v3);
  }
  sub_100008EA8((uint64_t)a1);
  return v11;
}

uint64_t sub_100029E84@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CustodianRemovedMessage();
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_100029B8C(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100029EE0(void *a1)
{
  return sub_100029924(a1);
}

unint64_t sub_100029F04()
{
  unint64_t result = qword_100321E90;
  if (!qword_100321E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321E90);
  }
  return result;
}

unint64_t sub_100029F58()
{
  unint64_t result = qword_100321E98;
  if (!qword_100321E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321E98);
  }
  return result;
}

unint64_t sub_100029FAC()
{
  unint64_t result = qword_100321EA8;
  if (!qword_100321EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321EA8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustodianRemovedMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CustodianRemovedMessage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002A15CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10002A184(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRemovedMessage.CodingKeys()
{
  return &type metadata for CustodianRemovedMessage.CodingKeys;
}

unint64_t sub_10002A1A4()
{
  unint64_t result = qword_100321EB0;
  if (!qword_100321EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321EB0);
  }
  return result;
}

unint64_t sub_10002A1FC()
{
  unint64_t result = qword_100321EB8;
  if (!qword_100321EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321EB8);
  }
  return result;
}

unint64_t sub_10002A254()
{
  unint64_t result = qword_100321EC0;
  if (!qword_100321EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321EC0);
  }
  return result;
}

uint64_t sub_10002A2A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10002A3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v31 = a2;
  uint64_t v6 = sub_100009F04(&qword_100321FF8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v32 - 8);
  uint64_t v11 = v35;
  uint64_t v12 = *(void *)(v35 + 64);
  uint64_t v14 = __chkstk_darwin(v32, v13);
  uint64_t v36 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  unint64_t v34 = (char *)&v30 - v16;
  uint64_t v33 = *(void (**)(void))(v11 + 16);
  v33();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  char v18 = (uint64_t (*)(char))swift_allocObject();
  *((void *)v18 + 2) = v17;
  *((void *)v18 + 3) = a1;
  uint64_t v37 = v17;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3 + OBJC_IVAR____TtC13appleaccountd18DaemonShareHandler__custodianStorage, v6);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  unint64_t v30 = sub_100008EF8(v39, v39[3]);
  char v19 = v36;
  uint64_t v20 = (uint64_t)v34;
  uint64_t v21 = v32;
  ((void (*)(char *, char *, uint64_t))v33)(v36, v34, v32);
  uint64_t v22 = v35;
  unint64_t v23 = (*(unsigned __int8 *)(v35 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v25 + v23, v19, v21);
  uint64_t v26 = (void *)(v25 + v24);
  uint64_t v27 = v38;
  void *v26 = v31;
  v26[1] = v27;
  uint64_t v28 = (uint64_t (**)(char))(v25 + ((v24 + 23) & 0xFFFFFFFFFFFFFFF8));
  NSObject *v28 = sub_10002B640;
  v28[1] = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10023C384(v20, (uint64_t)sub_10002BE24, v25);
  swift_release();
  sub_100008EA8((uint64_t)v39);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  return swift_release();
}

uint64_t sub_10002A728(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CloudShareInfo();
  uint64_t result = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t result = (uint64_t)[self isSimulateUnhealthyCustodianEnabled];
    if ((result & 1) == 0)
    {
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        sub_100008A94(result + 56, (uint64_t)v17);
        swift_release();
        uint64_t v15 = sub_100008EF8(v17, v17[3]);
        sub_10002C920(a3 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
        uint64_t v16 = *v15;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100110180((uint64_t)v14, 1, v16, a3, a2, a4, a5);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        sub_10002CD90((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
        return sub_100008EA8((uint64_t)v17);
      }
    }
  }
  return result;
}

void sub_10002A8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(NSObject **)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v67 - v20;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v24 = 138412290;
      uint64_t v26 = _convertErrorToNSError(_:)();
      v79[0] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v26;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v23, "Failed to accept share: %@", v24, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v39 = v75;
    }
  }
  else
  {
    uint64_t v70 = a4;
    uint64_t v74 = (char *)v19;
    uint64_t v27 = a3 + 16;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    uint64_t v28 = sub_100007288(v69, (uint64_t)qword_10033E748);
    swift_retain_n();
    uint64_t v73 = v28;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v71 = a5;
    if (v31)
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v68 = v27;
      uint64_t v33 = v10;
      unint64_t v34 = (uint8_t *)v32;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v75 = v11;
      v79[0] = v35;
      id v72 = v17;
      *(_DWORD *)unint64_t v34 = 136315138;
      uint64_t v67 = v34 + 4;
      ((void (*)(char *, uint64_t, uint64_t))v75[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v33);
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v38 = v37;
      ((void (*)(char *, uint64_t))v75[1].isa)(v21, v33);
      v78[0] = sub_100135190(v36, v38, v79);
      uint64_t v17 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Share for %s was accepted successfully.", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v11 = v75;
      swift_slowDealloc();
      uint64_t v10 = v33;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      ((void (*)(char *, uint64_t, uint64_t))v11[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
      sub_10002C988((uint64_t)v21);
      swift_release();
      ((void (*)(char *, uint64_t))v11[1].isa)(v21, v10);
    }
    if (*(unsigned char *)(a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) == 1)
    {
      swift_retain_n();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = swift_slowAlloc();
        id v72 = v17;
        uint64_t v43 = (uint8_t *)v42;
        uint64_t v44 = swift_slowAlloc();
        uint64_t v75 = v11;
        uint64_t v68 = v44;
        v78[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315138;
        uint64_t v67 = v43 + 4;
        ((void (*)(char *, uint64_t, uint64_t))v11[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
        sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v47 = v46;
        ((void (*)(char *, uint64_t))v75[1].isa)(v21, v10);
        uint64_t v77 = (void *)sub_100135190(v45, v47, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "This is a setup flow, let's finalize %s with owner.", v43, 0xCu);
        swift_arrayDestroy();
        uint64_t v11 = v75;
        swift_slowDealloc();
        uint64_t v17 = v72;
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v49 = Strong;
        Class isa = (void (*)(char *, uint64_t, uint64_t))v11[2].isa;
        isa(v17, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
        sub_100008EF8((void *)(v49 + 16), *(void *)(v49 + 40));
        isa(v74, (uint64_t)v17, v10);
        isa(v21, (uint64_t)v17, v10);
        type metadata accessor for FinalizeCustodianSetupMessage();
        uint64_t v51 = swift_allocObject();
        *(unsigned char *)(v51 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
        *(unsigned char *)(v51 + 16) = 3;
        ((void (*)(uint64_t, char *, uint64_t))v11[4].isa)(v51 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v21, v10);
        id v52 = objc_allocWithZone((Class)AAMessagingDestination);
        swift_bridgeObjectRetain();
        NSString v53 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v54 = [v52 initWithHandle:v53];

        if (v54)
        {
          id v55 = v17;
          uint64_t v56 = qword_100320B70;
          id v57 = v54;
          if (v56 != -1) {
            swift_once();
          }
          sub_100007288(v69, (uint64_t)qword_10033E700);
          id v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v60 = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Destination is valid!", v60, 2u);
            swift_slowDealloc();
          }

          sub_100216C50(v51, v57);
          uint64_t v65 = (uint64_t)v74;
          sub_10002C420(0, (uint64_t)v74);
          swift_release();

          uint64_t v17 = v55;
        }
        else
        {
          id v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v63 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v63 = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unable to generate destination from handle.", v63, 2u);
            swift_slowDealloc();
          }

          type metadata accessor for AACustodianError(0);
          uint64_t v76 = -7004;
          sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
          sub_10002CDF0((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v64 = v77;
          uint64_t v65 = (uint64_t)v74;
          sub_10002C420((uint64_t)v77, (uint64_t)v74);
          swift_release();
        }
        uint64_t v66 = (void (*)(uint64_t, uint64_t))v11[1].isa;
        v66(v65, v10);
        swift_release();
        v66((uint64_t)v17, v10);
      }
    }
  }
}

uint64_t sub_10002B3C0()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd18DaemonShareHandler__custodianStorage;
  uint64_t v2 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10002B474()
{
  return type metadata accessor for DaemonShareHandler();
}

uint64_t type metadata accessor for DaemonShareHandler()
{
  uint64_t result = qword_100321EF8;
  if (!qword_100321EF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002B4C8()
{
  sub_10002B564();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10002B564()
{
  if (!qword_100327F30)
  {
    sub_1000112CC(&qword_100322470);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100327F30);
    }
  }
}

uint64_t sub_10002B5C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002B5F8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002B640(char a1)
{
  return sub_10002A728(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10002B64C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v54 = a6;
  id v55 = a5;
  uint64_t v52 = a2;
  unint64_t v53 = a4;
  uint64_t v51 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)&v50 - v19;
  __chkstk_darwin(v18, v21);
  os_log_type_t v23 = (char *)&v50 - v22;
  uint64_t v24 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C854(a1, (uint64_t)v27);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10002C8BC((uint64_t)v27, (uint64_t)v23);
    uint64_t v34 = *(void *)&v23[*(int *)(v12 + 28)];
    sub_10002C920((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v52, v7);
    if (v34 == 2)
    {
      char v35 = static UUID.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_10002CD90((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      sub_10002C920((uint64_t)v23, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      if (v35)
      {
        uint64_t v36 = &v16[*(int *)(v12 + 24)];
        unint64_t v37 = v53;
        if (*(void *)v36 == v51 && *((void *)v36 + 1) == v53)
        {
          sub_10002CD90((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
LABEL_26:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          uint64_t v46 = type metadata accessor for Logger();
          sub_100007288(v46, (uint64_t)qword_10033E748);
          unint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v49 = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Successfully fetched Custodianship owner, start processing share ...", v49, 2u);
            swift_slowDealloc();
          }

          uint64_t v45 = 1;
LABEL_24:
          v55(v45);
          return sub_10002CD90((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        }
        char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_10002CD90((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        if (v39) {
          goto LABEL_26;
        }
LABEL_18:
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E748);
        swift_bridgeObjectRetain_n();
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          uint64_t v57 = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v56 = sub_100135190(v51, v37, &v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "No Custodianship owner found, will drop the share message from %s.", v44, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v45 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_10002CD90((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      sub_10002C920((uint64_t)v23, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    }
    sub_10002CD90((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    unint64_t v37 = v53;
    goto LABEL_18;
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E748);
  swift_errorRetain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    BOOL v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v31 = 138412290;
    uint64_t v33 = _convertErrorToNSError(_:)();
    uint64_t v57 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v33;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error fetching custodianship info records: %@", v31, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  v55(0);
  return swift_errorRelease();
}

uint64_t sub_10002BD60()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10002BE24(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  unint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void (**)(uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_10002B64C(a1, v6, v7, v8, v10, v11);
}

void sub_10002BED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v26 - v11;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v28 = sub_100135190(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v19 = _convertErrorToNSError(_:)();
      uint64_t v28 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed performing initial health check for %s. Error: %@", (uint8_t *)v16, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E748);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v23 = 136315138;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v28 = sub_100135190(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Completed initial health check for %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }
  }
}

void sub_10002C420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v13 = _convertErrorToNSError(_:)();
      uint64_t v24 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v13;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v10, "Failed to send setup finalization message: %@", v11, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v20 = v22;
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v23 = sub_100135190(v18, v19, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Custodian setup finalization sent for %s.", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

uint64_t sub_10002C854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100324590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianshipInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002C988(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v6;
  __chkstk_darwin(v5, v8);
  os_log_type_t v10 = (char *)v21 - v9;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E748);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v24(v10, a1, v2);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v22 = v7;
    uint64_t v27 = v15;
    uint64_t v23 = a1;
    *(_DWORD *)uint64_t v14 = 136315138;
    v21[1] = v14 + 4;
    sub_10002CDF0((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = sub_100135190(v16, v17, &v27);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting initial health check for %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v22;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }

  type metadata accessor for CustodianHealthCheck();
  swift_allocObject();
  sub_100009F04(&qword_100322470);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_10032D700);
  Dependency.init(dependencyId:config:)();
  v24(v7, a1, v2);
  unint64_t v18 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v19 + v18, v7, v2);
  sub_1000BA64C(a1, (uint64_t)sub_10002CEC8, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_10002CD90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002CDF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002CE38()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10002CEC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10002BED4(a1, v4);
}

void sub_10002CF38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v38 = a3;
  uint64_t v9 = type metadata accessor for CustodianRecord();
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v34 + 64);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v36 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v31 - v14;
  id v16 = [objc_allocWithZone((Class)AKCustodianContext) init];
  id v17 = [a2 aa_altDSID];
  [v16 setAltDSID:v17];

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v37 = v16;
  [v16 setCustodianUUID:isa];

  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100007288(v19, (uint64_t)qword_10033E748);
  uint64_t v35 = a1;
  sub_10002F4D4(a1, (uint64_t)v15);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v32 = v4;
    uint64_t v40 = v23;
    *(_DWORD *)os_log_type_t v22 = 136315138;
    uint64_t v33 = a4;
    type metadata accessor for UUID();
    sub_10002F8A4();
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = sub_100135190(v24, v25, &v40);
    a4 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002F538((uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Revoke from IdMS %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v5 = v32;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002F538((uint64_t)v15);
  }

  sub_100008EF8((void *)(v5 + 96), *(void *)(v5 + 120));
  uint64_t v26 = v36;
  sub_10002F4D4(v35, v36);
  unint64_t v27 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v5;
  sub_10002F79C(v26, v28 + v27);
  uint64_t v29 = (void *)(v28 + ((v10 + v27 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v29 = v38;
  v29[1] = a4;
  swift_retain();
  swift_retain();
  os_log_type_t v30 = v37;
  sub_10004DD28((uint64_t)v37, (uint64_t)sub_10002F800, v28);
  swift_release();
}

uint64_t sub_10002D2E0()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);
  sub_100008EA8(v0 + 136);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianCleanupController()
{
  return self;
}

uint64_t sub_10002D354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = &unk_100320000;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v22 = a3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v23 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v21 = v23;
      uint64_t v8 = (void *)&unk_100320000;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error revoking with idMS: %@", v12, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v22;
      swift_slowDealloc();

      swift_errorRelease();
      goto LABEL_12;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v14, "idMS revoke successful", v15, 2u);
      swift_slowDealloc();
    }
  }

LABEL_12:
  if (v8[369] != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E748);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Continuing to Remove CRK on OT", v19, 2u);
    swift_slowDealloc();
  }

  return sub_10002D6B0(a3, a4, a5);
}

uint64_t sub_10002D6B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v38 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v36 + 64);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v37 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  os_log_type_t v14 = (char *)&v32 - v13;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  sub_10002F4D4(a1, (uint64_t)v14);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = v4;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v33 = v9;
    uint64_t v43 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v34 = v7;
    sub_10002F8A4();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v42 = sub_100135190(v21, v22, &v43);
    uint64_t v7 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002F538((uint64_t)v14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing CRK for custodianID: %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v9 = v33;
    swift_slowDealloc();
    uint64_t v4 = v35;
    swift_slowDealloc();
  }
  else
  {
    sub_10002F538((uint64_t)v14);
  }

  uint64_t v23 = v39;
  sub_100008EF8((void *)(v39 + 136), *(void *)(v39 + 160));
  uint64_t v24 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v7, a1 + *(int *)(v8 + 20), v4);
  uint64_t v25 = v37;
  sub_10002F4D4(a1, v37);
  unint64_t v26 = (*(unsigned __int8 *)(v36 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v27 = (v9 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  sub_10002F79C(v25, v28 + v26);
  *(void *)(v28 + v27) = v23;
  uint64_t v29 = (void *)(v28 + ((v27 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v30 = v40;
  *uint64_t v29 = v38;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  sub_1001E28AC((uint64_t)v7, (void (*)(void))sub_10002FB0C, v28);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v7, v4);
}

uint64_t sub_10002DA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v98 = a3;
  uint64_t v99 = a5;
  uint64_t v97 = a4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(char **)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  unint64_t v93 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v96 = (char *)&v81 - v18;
  uint64_t v92 = v19;
  __chkstk_darwin(v17, v20);
  unint64_t v22 = ((char *)&v81 - v21);
  uint64_t v23 = type metadata accessor for CustodianRecord();
  uint64_t v89 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v91 = (uint64_t)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v81 - v29;
  uint64_t v32 = __chkstk_darwin(v28, v31);
  uint64_t v34 = (char *)&v81 - v33;
  uint64_t v90 = v35;
  __chkstk_darwin(v32, v36);
  uint64_t v38 = (char *)&v81 - v37;
  uint64_t v95 = (void (*)(void, void, void))v10;
  if (a1)
  {
    uint64_t v94 = v30;
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100007288(v39, (uint64_t)qword_10033E748);
    sub_10002F4D4(a2, (uint64_t)v34);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v85 = (void *)swift_slowAlloc();
      uint64_t v87 = swift_slowAlloc();
      v101[0] = v87;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v86 = v12;
      os_log_t v84 = v40;
      sub_10002F8A4();
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v43, v44, v101);
      uint64_t v88 = (void *)v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002F538((uint64_t)v34);
      *(_WORD *)(v42 + 12) = 2112;
      swift_errorRetain();
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v100 = v45;
      uint64_t v23 = (uint64_t)v88;
      uint64_t v12 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v85 = v45;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v46 = v84;
      _os_log_impl((void *)&_mh_execute_header, v84, v41, "Error removing CRK for custodianID: %s %@", (uint8_t *)v42, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_10002F538((uint64_t)v34);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v30 = v94;
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_100007288(v47, (uint64_t)qword_10033E748);
    uint64_t v87 = a2;
    sub_10002F4D4(a2, (uint64_t)v38);
    os_log_type_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v88 = (void *)v11;
      uint64_t v51 = (uint8_t *)v50;
      v101[0] = swift_slowAlloc();
      uint64_t v86 = v12;
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v94 = v30;
      sub_10002F8A4();
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v52, v53, v101);
      uint64_t v30 = v94;
      uint64_t v12 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002F538((uint64_t)v38);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Success removing CRK for custodianID: %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = (uint64_t)v88;
      swift_slowDealloc();
    }
    else
    {
      sub_10002F538((uint64_t)v38);
    }

    a2 = v87;
  }
  uint64_t v54 = v95;
  id v55 = v96;
  sub_100019730(a2 + *(int *)(v23 + 64), (uint64_t)v95, (uint64_t *)&unk_100321CE0);
  if ((*((unsigned int (**)(void, uint64_t, uint64_t))v12 + 6))(v54, 1, v11) == 1)
  {
    sub_100006574((uint64_t)v54, (uint64_t *)&unk_100321CE0);
    return sub_10002EB84(a2 + *(int *)(v23 + 20), v97, v99);
  }
  else
  {
    uint64_t v88 = (void *)v23;
    uint64_t v95 = (void (*)(void, void, void))*((void *)v12 + 4);
    uint64_t v96 = v12 + 32;
    v95(v22, v54, v11);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100007288(v57, (uint64_t)qword_10033E748);
    uint64_t v94 = (char *)*((void *)v12 + 2);
    ((void (*)(char *, NSObject *, uint64_t))v94)(v55, v22, v11);
    sub_10002F4D4(a2, (uint64_t)v30);
    id v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    int v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      v101[0] = v83;
      *(_DWORD *)uint64_t v61 = 136315394;
      os_log_t v81 = v58;
      sub_10002F8A4();
      uint64_t v87 = a2;
      int v82 = v60;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v62, v63, v101);
      os_log_t v84 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v64 = (char *)*((void *)v12 + 1);
      uint64_t v85 = (void *)((unint64_t)(v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v86 = v64;
      ((void (*)(char *, uint64_t))v64)(v55, v11);
      *(_WORD *)(v61 + 12) = 2080;
      a2 = v87;
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = sub_100135190(v65, v66, v101);
      unint64_t v22 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v67 = v12;
      swift_bridgeObjectRelease();
      sub_10002F538((uint64_t)v30);
      os_log_t v68 = v81;
      _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v82, "Removing CRK for otPeerID:%s for custodian:%s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v69 = (char *)*((void *)v12 + 1);
      uint64_t v85 = (void *)((unint64_t)(v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      uint64_t v86 = v69;
      ((void (*)(char *, uint64_t))v69)(v55, v11);
      sub_10002F538((uint64_t)v30);

      uint64_t v67 = v12;
    }
    uint64_t v70 = v98;
    uint64_t v88 = sub_100008EF8((void *)(v98 + 136), *(void *)(v98 + 160));
    uint64_t v71 = v93;
    ((void (*)(char *, NSObject *, uint64_t))v94)(v93, v22, v11);
    uint64_t v72 = v91;
    sub_10002F4D4(a2, v91);
    unint64_t v73 = (v67[80] + 16) & ~(unint64_t)v67[80];
    unint64_t v74 = (v92 + *(unsigned __int8 *)(v89 + 80) + v73) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    unint64_t v75 = (v90 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v76 = (uint64_t)v22;
    uint64_t v77 = v11;
    uint64_t v78 = swift_allocObject();
    v95(v78 + v73, v71, v77);
    sub_10002F79C(v72, v78 + v74);
    *(void *)(v78 + v75) = v70;
    unint64_t v79 = (void *)(v78 + ((v75 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v80 = v99;
    *unint64_t v79 = v97;
    v79[1] = v80;
    swift_retain();
    swift_retain();
    sub_1001E28AC(v76, (void (*)(void))sub_10002FE18, v78);
    swift_release();
    return ((uint64_t (*)(uint64_t, uint64_t))v86)(v76, v77);
  }
}

uint64_t sub_10002E500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a5;
  uint64_t v55 = a4;
  uint64_t v56 = a3;
  uint64_t v53 = type metadata accessor for CustodianRecord();
  uint64_t v10 = __chkstk_darwin(v53, v9);
  uint64_t v12 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  uint64_t v15 = &v47[-v14];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = &v47[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19, v22);
  uint64_t v24 = &v47[-v23];
  if (!a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E748);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v24, a2, v16);
    sub_10002F4D4(v56, (uint64_t)v15);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    int v40 = v39;
    if (os_log_type_enabled(v26, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v58 = v51;
      *(_DWORD *)uint64_t v41 = 136315394;
      sub_10002F8A4();
      LODWORD(v50) = v40;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_100135190(v42, v43, &v58);
      uint64_t v52 = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v24, v16);
      *(_WORD *)(v41 + 12) = 2080;
      uint64_t v33 = v53;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_100135190(v44, v45, &v58);
      a6 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002F538((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v50, "Success removing CRK for otPeerID:%s for custodian:%s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return sub_10002EB84(v56 + *(int *)(v33 + 20), v54, a6);
    }
    (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v24, v16);
    sub_10002F538((uint64_t)v15);
LABEL_12:

    uint64_t v33 = v53;
    return sub_10002EB84(v56 + *(int *)(v33 + 20), v54, a6);
  }
  swift_errorRetain();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100007288(v25, (uint64_t)qword_10033E748);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v21, a2, v16);
  sub_10002F4D4(v56, (uint64_t)v12);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  int v28 = v27;
  if (!os_log_type_enabled(v26, v27))
  {
    swift_errorRelease();
    (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v21, v16);
    sub_10002F538((uint64_t)v12);
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_12;
  }
  uint64_t v29 = swift_slowAlloc();
  os_log_t v50 = v26;
  uint64_t v30 = v29;
  os_log_type_t v49 = (void *)swift_slowAlloc();
  uint64_t v51 = swift_slowAlloc();
  uint64_t v58 = v51;
  *(_DWORD *)uint64_t v30 = 136315650;
  uint64_t v52 = a6;
  sub_10002F8A4();
  int v48 = v28;
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v57 = sub_100135190(v31, v32, &v58);
  a6 = v52;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v21, v16);
  *(_WORD *)(v30 + 12) = 2080;
  uint64_t v33 = v53;
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v57 = sub_100135190(v34, v35, &v58);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10002F538((uint64_t)v12);
  *(_WORD *)(v30 + 22) = 2112;
  swift_errorRetain();
  uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v57 = v36;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *os_log_type_t v49 = v36;
  swift_errorRelease();
  swift_errorRelease();
  os_log_t v37 = v50;
  _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v48, "Error removing CRK for otPeerID:%s for custodian:%s %@", (uint8_t *)v30, 0x20u);
  sub_100009F04((uint64_t *)&unk_1003216C0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return sub_10002EB84(v56 + *(int *)(v33 + 20), v54, a6);
}

uint64_t sub_10002EB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  unint64_t v35 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v31 - v12;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E748);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v38 = a1;
  uint64_t v34 = v15;
  v15(v13, a1, v6);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v40 = v32;
    uint64_t v33 = v3;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v31 = v18 + 4;
    sub_10002F8A4();
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = sub_100135190(v19, v20, &v40);
    uint64_t v4 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleting Custodianship records for %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }

  uint64_t v21 = sub_100008EF8((void *)(v4 + 56), *(void *)(v4 + 80));
  uint64_t v22 = v35;
  uint64_t v23 = v38;
  v34(v35, v38, v6);
  unint64_t v24 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v25 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v25 + v24, v22, v6);
  uint64_t v26 = (void *)(v25 + ((v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = v37;
  void *v26 = v36;
  v26[1] = v27;
  uint64_t v28 = *v21;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = sub_10002FFD0;
  v29[3] = v25;
  v29[4] = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002369EC(v23, (uint64_t)sub_1000300B0, (uint64_t)v29);
  swift_release();
  return swift_release();
}

uint64_t sub_10002EF30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v37 = a3;
    uint64_t v20 = *v19;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E748);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a2, v7);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      unint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v24 = 136315394;
      sub_10002F8A4();
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v25, v26, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      *(_WORD *)(v24 + 12) = 2112;
      uint64_t v27 = _convertErrorToNSError(_:)();
      uint64_t v39 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error deleting custodianship records for %s %@", (uint8_t *)v24, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v37(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E748);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, a2, v7);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v37 = a3;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v36 = (uint64_t)(v31 + 4);
      sub_10002F8A4();
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = sub_100135190(v32, v33, &v40);
      a3 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Deleted Custodianship records for %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    }

    a3(0);
    return sub_100006574((uint64_t)v19, &qword_1003229D0);
  }
}

uint64_t sub_10002F4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F538(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002F594()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10002F79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F800(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10002D354(a1, v5, v6, v8, v9);
}

unint64_t sub_10002F8A4()
{
  unint64_t result = qword_100321670;
  if (!qword_100321670)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321670);
  }
  return result;
}

uint64_t sub_10002F8FC()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_10002FB0C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = (uint64_t *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return sub_10002DA9C(a1, v6, v7, v9, v10);
}

uint64_t sub_10002FBB8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v7 = *(unsigned __int8 *)(*((void *)v6 - 1) + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v15 = *(void *)(*((void *)v6 - 1) + 64);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  uint64_t v10 = v0 + v8;
  v9(v0 + v8, v1);
  v9(v0 + v8 + v6[5], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(v0 + v8 + v6[10]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100013198(*v11, v12);
  }
  sub_100013198(*(void *)(v10 + v6[11]), *(void *)(v10 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v10 + v6[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1)) {
    v9(v13, v1);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v15 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_10002FE18(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v1 + v7;
  uint64_t v10 = *(void *)(v1 + v8);
  uint64_t v11 = (uint64_t *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];

  return sub_10002E500(a1, v1 + v4, v9, v10, v12, v13);
}

uint64_t sub_10002FF28()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10002FFD0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *(void (**)(uint64_t))v6;
  uint64_t v8 = *(void *)(v6 + 8);

  return sub_10002EF30(a1, v5, v7, v8);
}

uint64_t sub_100030070()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000300B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100240450(a1, a2, a3, a4, *(void (**)(void *))(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

void *sub_1000300BC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t result = (void *)sub_100228898(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v7 = _swiftEmptyArrayStorage[2];
        unint64_t v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1) {
          sub_100228898(v6 > 1, v7 + 1, 1);
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v7 + 1;
        uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
        v8[4] = v5;
        v8[5] = &off_1002FBDD8;
      }
      while (v2 != v4);
    }
    else
    {
      uint64_t v9 = (uint64_t *)(a1 + 32);
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = 2 * v10;
      do
      {
        uint64_t v12 = *v9;
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        swift_retain();
        if (v10 >= v13 >> 1) {
          sub_100228898(v13 > 1, v10 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v10 + 1;
        uint64_t v14 = &_swiftEmptyArrayStorage[v11];
        v14[4] = v12;
        v14[5] = &off_1002FBDD8;
        v11 += 2;
        ++v9;
        ++v10;
        --v2;
      }
      while (v2);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

void sub_100030260(void *a1)
{
  uint64_t v3 = a1[3];
  unint64_t v2 = a1[4];
  uint64_t v4 = String.utf8CString.getter();
  xpc_activity_unregister((const char *)(v4 + 32));
  swift_release();
  uint64_t v5 = a1[11];
  a1[11] = 0;
  a1[12] = 0;
  sub_100011358(v5);
  swift_unknownObjectWeakAssign();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E778);
  swift_retain();
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(v3, v2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - Unregistered criteria", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t sub_10003046C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100030494(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000304BC()
{
  uint64_t v1 = v0;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E778);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    v20[0] = (_xpc_activity_s *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v6 = *(void *)(v1 + 24);
    unint64_t v7 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100135190(v6, v7, (uint64_t *)v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s - updateCriteria called.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  os_log_type_t v8 = *(NSObject **)(v1 + 16);
  sub_100009F04(&qword_100322338);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v20[0])
  {
    sub_1000314EC(v20[0]);
    swift_unknownObjectRelease();
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 80);
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, (os_log_type_t)v11);
  if (v9 != 1)
  {
    if (v12)
    {
      uint64_t v16 = swift_slowAlloc();
      v20[0] = (_xpc_activity_s *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v17 = *(void *)(v1 + 24);
      unint64_t v18 = *(void *)(v1 + 32);
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_100135190(v17, v18, (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_100135190(v17, v18, (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "%s - No current activity -- hasn't checked in yet: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    goto LABEL_16;
  }
  if (v12)
  {
    uint64_t v13 = swift_slowAlloc();
    v20[0] = (_xpc_activity_s *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = *(void *)(v1 + 24);
    unint64_t v15 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100135190(v14, v15, (uint64_t *)v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_100135190(v14, v15, (uint64_t *)v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "%s - No current activity -- re-registering: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v10 = swift_allocObject();
  v10[2].Class isa = (Class)sub_100033BE0;
  v10[3].Class isa = (Class)v1;
  v20[4] = (_xpc_activity_s *)sub_100034EFC;
  v20[5] = (_xpc_activity_s *)v10;
  v20[0] = (_xpc_activity_s *)_NSConcreteStackBlock;
  v20[1] = (_xpc_activity_s *)1107296256;
  v20[2] = (_xpc_activity_s *)sub_100030494;
  void v20[3] = (_xpc_activity_s *)&unk_1002F5838;
  uint64_t v19 = _Block_copy(v20);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v19)
  {
    __break(1u);
LABEL_16:

    swift_release();
  }
}

BOOL sub_100030A68()
{
  return sub_100030AD4((uint64_t)sub_100034EE0, 3, "%s - defer called on invalidated XPCActivity");
}

BOOL sub_100030A8C()
{
  return sub_100030AD4((uint64_t)sub_100034EE0, 4, "%s - continue called on invalidated XPCActivity");
}

BOOL sub_100030AB0()
{
  return sub_100030AD4((uint64_t)sub_1000348B8, 5, "%s - done called on invalidated XPCActivity");
}

BOOL sub_100030AD4(uint64_t a1, xpc_activity_state_t a2, const char *a3)
{
  uint64_t v6 = v3;
  sub_100009F04(&qword_100322338);
  OS_dispatch_queue.sync<A>(execute:)();
  if (activity)
  {
    BOOL v7 = xpc_activity_set_state(activity, a2);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E778);
    swift_retain();
    int v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      xpc_activity_t activity = (xpc_activity_t)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = *(void *)(v6 + 24);
      unint64_t v13 = *(void *)(v6 + 32);
      swift_bridgeObjectRetain();
      sub_100135190(v12, v13, (uint64_t *)&activity);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, a3, v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    return 0;
  }
  return v7;
}

uint64_t sub_100030CDC(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = sub_100033C58;
  *(void *)(a1 + 96) = v2;
  swift_retain();
  sub_100011358(v3);
  v7[4] = sub_100033C58;
  v7[5] = v2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  void v7[2] = sub_10003101C;
  v7[3] = &unk_1002F5748;
  os_log_type_t v4 = _Block_copy(v7);
  swift_retain();
  swift_release();
  uint64_t v5 = String.utf8CString.getter();
  xpc_activity_register((const char *)(v5 + 32), XPC_ACTIVITY_CHECK_IN, v4);
  swift_release();
  _Block_release(v4);
  return swift_release();
}

uint64_t sub_100030E18(_xpc_activity_s *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E778);
    swift_unknownObjectRetain_n();
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_unknownObjectRetain();
      sub_100009F04(&qword_1003222E8);
      uint64_t v7 = String.init<A>(describing:)();
      sub_100135190(v7, v8, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "registered activity: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    sub_10003107C(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10003101C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10003107C(_xpc_activity_s *a1)
{
  uint64_t v2 = v1;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100007288(v4, (uint64_t)qword_10033E778);
  swift_retain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = *(void *)(v2 + 24);
    unint64_t v9 = *(void *)(v2 + 32);
    swift_bridgeObjectRetain();
    sub_100135190(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - calling activityHandler", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  type metadata accessor for OSTransaction();
  swift_allocObject();
  uint64_t v10 = sub_100104754("XPCActivity", 11, 2);
  sub_100031270(v10, a1, v2);
  return swift_release();
}

uint64_t sub_100031270(uint64_t a1, xpc_activity_t activity, uint64_t a3)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  unint64_t v7 = sub_100034028(state);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E778);
  swift_unknownObjectRetain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_unknownObjectRetain();
    sub_100009F04(&qword_1003222E8);
    uint64_t v12 = String.init<A>(describing:)();
    sub_100135190(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v14 = String.init<A>(describing:)();
    sub_100135190(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "activityHandler for %s -- state: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!(_BYTE)v7) {
      goto LABEL_7;
    }
  }
  else
  {

    swift_unknownObjectRelease_n();
    if (!(_BYTE)v7)
    {
LABEL_7:
      swift_unknownObjectWeakAssign();
      *(unsigned char *)(a3 + 80) = 1;
      unint64_t v7 = sub_1000314EC(activity);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a3 + 56))(a3, a1, v7);
}

unint64_t sub_1000314EC(_xpc_activity_s *a1)
{
  void (*v5)(void *__return_ptr, _OWORD *);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  xpc_object_t v26;
  xpc_activity_state_t state;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  xpc_object_t v51;
  uint64_t v52;
  long long aBlock;
  long long v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57[5];
  void v58[5];
  long long v59;
  long long v60;
  uint64_t (*v61)();
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[4];

  uint64_t v2 = (objc_class *)v1;
  uint64_t isEscapingClosureAtFileLocation = (uint64_t)a1;
  if (xpc_activity_copy_criteria(a1))
  {
    uint64_t v4 = (void *)swift_unknownObjectRetain();
    sub_100033EAC(v4, v57);
    sub_100034828((uint64_t)v57, (uint64_t)v62);
    if (LOBYTE(v62[0]) != 2)
    {
      v64[0] = v62[0];
      v64[1] = v62[1];
      *(void *)&v64[2] = v63;
      (*(void (**)(void *__return_ptr, uint64_t *))(v1 + 40))(v58, v57);
      sub_100034828((uint64_t)v58, (uint64_t)&v59);
      if (v59 != 2)
      {
        aBlock = v59;
        uint64_t v54 = v60;
        uint64_t v55 = v61;
        if (!sub_100033654((uint64_t)&aBlock, (uint64_t)v64))
        {
          if (qword_100320B98 != -1) {
            swift_once();
          }
          uint64_t v36 = type metadata accessor for Logger();
          sub_100007288(v36, (uint64_t)qword_10033E778);
          swift_retain();
          uint64_t v37 = Logger.logObject.getter();
          uint64_t v38 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = swift_slowAlloc();
            uint64_t v52 = swift_slowAlloc();
            *(_DWORD *)uint64_t v39 = 136315394;
            uint64_t v41 = *(void *)(v1 + 24);
            uint64_t v40 = *(void *)(v1 + 32);
            swift_bridgeObjectRetain();
            sub_100135190(v41, v40, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v39 + 12) = 2080;
            uint64_t v42 = String.init<A>(describing:)();
            sub_100135190(v42, v43, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - Existing criteria: %s", (uint8_t *)v39, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
          }
          swift_retain();
          uint64_t v44 = Logger.logObject.getter();
          unint64_t v45 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v44, v45))
          {
            os_log_t v46 = swift_slowAlloc();
            uint64_t v52 = swift_slowAlloc();
            *(_DWORD *)os_log_t v46 = 136315394;
            uint64_t v47 = *((void *)v2 + 3);
            int v48 = *((void *)v2 + 4);
            swift_bridgeObjectRetain();
            sub_100135190(v47, v48, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v46 + 12) = 2080;
            os_log_type_t v49 = String.init<A>(describing:)();
            sub_100135190(v49, v50, &v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - Registering updated  criteria: %s", (uint8_t *)v46, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
          }
          sub_100032088();
          xpc_activity_set_criteria((xpc_activity_t)isEscapingClosureAtFileLocation, v51);
          swift_unknownObjectRelease();
          goto LABEL_21;
        }
        if (qword_100320B98 == -1) {
          goto LABEL_25;
        }
        goto LABEL_38;
      }
      uint64_t v20 = *(NSObject **)(v1 + 16);
      unint64_t v7 = swift_allocObject();
      v7[2].Class isa = (Class)sub_100034890;
      v7[3].Class isa = v2;
      uint64_t v55 = sub_100034EFC;
      uint64_t v56 = (uint64_t)v7;
      *(void *)&aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&uint64_t v54 = sub_100030494;
      *((void *)&v54 + 1) = &unk_1002F57E8;
      uint64_t v21 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v20, v21);
      _Block_release(v21);
      LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      if ((v20 & 1) == 0) {
        return 6;
      }
      __break(1u);
      goto LABEL_16;
    }
    swift_unknownObjectRelease();
  }
  os_log_type_t v5 = *(void (**)(void *__return_ptr, _OWORD *))(v1 + 40);
  *(void *)&v64[0] = 2;
  memset((char *)v64 + 8, 0, 32);
  v5(v58, v64);
  sub_100034828((uint64_t)v58, (uint64_t)&v59);
  if (v59 != 2)
  {
    aBlock = v59;
    uint64_t v54 = v60;
    uint64_t v55 = v61;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    swift_retain();
    unint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 136315394;
      uint64_t v16 = *((void *)v2 + 3);
      uint64_t v17 = *((void *)v2 + 4);
      swift_bridgeObjectRetain();
      sub_100135190(v16, v17, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      unint64_t v18 = String.init<A>(describing:)();
      sub_100135190(v18, v19, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - Registering new criteria: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_100032088();
    xpc_activity_set_criteria((xpc_activity_t)isEscapingClosureAtFileLocation, v26);
    goto LABEL_21;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  os_log_type_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E778);
  swift_retain();
  unint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v7, v8))
  {
LABEL_16:

    swift_release();
    goto LABEL_17;
  }
  unint64_t v9 = (uint8_t *)swift_slowAlloc();
  *(void *)&aBlock = swift_slowAlloc();
  *(_DWORD *)unint64_t v9 = 136315138;
  os_log_type_t v10 = *((void *)v2 + 3);
  uint64_t v11 = *((void *)v2 + 4);
  swift_bridgeObjectRetain();
  sub_100135190(v10, v11, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - criteriaBlock returned nil", v9, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_17:
  uint64_t v22 = *((void *)v2 + 2);
  os_log_type_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_100034890;
  *(void *)(v23 + 24) = v2;
  uint64_t v55 = sub_100034EFC;
  uint64_t v56 = v23;
  *(void *)&aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&uint64_t v54 = sub_100030494;
  *((void *)&v54 + 1) = &unk_1002F5798;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v22, v24);
  _Block_release(v24);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return 6;
  }
  __break(1u);
LABEL_38:
  swift_once();
LABEL_25:
  uint64_t v28 = type metadata accessor for Logger();
  sub_100007288(v28, (uint64_t)qword_10033E778);
  swift_retain();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315394;
    uint64_t v32 = *((void *)v2 + 3);
    unint64_t v33 = *((void *)v2 + 4);
    swift_bridgeObjectRetain();
    sub_100135190(v32, v33, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    uint64_t v34 = String.init<A>(describing:)();
    sub_100135190(v34, v35, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - Keeping existing criteria for: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_unknownObjectRelease();

    goto LABEL_22;
  }

  swift_release();
LABEL_21:
  swift_unknownObjectRelease();
LABEL_22:
  xpc_activity_state_t state = xpc_activity_get_state((xpc_activity_t)isEscapingClosureAtFileLocation);
  return sub_100034028(state);
}

void sub_100032088()
{
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  uint64_t v2 = v1;
  uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  if (!*(unsigned char *)v0) {
    uint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  int v4 = *(unsigned __int8 *)(v0 + 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, *(unsigned char *)(v0 + 1));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(void *)(v0 + 8));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(void *)(v0 + 16));
  if (v4 == 1) {
    xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(void *)(v0 + 24));
  }
  uint64_t v5 = *(void *)(v0 + 32);
  if (v5)
  {
    if (!XPC_ACTIVITY_POWER_NAP)
    {
      __break(1u);
      goto LABEL_39;
    }
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POWER_NAP, 1);
  }
  if ((v5 & 4) == 0) {
    goto LABEL_11;
  }
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY, 1);
LABEL_11:
  if ((v5 & 2) == 0) {
    goto LABEL_14;
  }
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
LABEL_14:
  if ((v5 & 0x800) == 0) {
    goto LABEL_17;
  }
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
LABEL_17:
  if ((v5 & 8) == 0) {
    goto LABEL_20;
  }
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
LABEL_20:
  if ((v5 & 0x10) == 0) {
    goto LABEL_23;
  }
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
LABEL_23:
  if ((v5 & 0x20) != 0) {
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  }
  if ((v5 & 0x40) != 0)
  {
    if (XPC_ACTIVITY_MEMORY_INTENSIVE)
    {
      xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_MEMORY_INTENSIVE, 1);
      goto LABEL_28;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_28:
  if ((v5 & 0x80) == 0) {
    goto LABEL_31;
  }
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_CPU_INTENSIVE, 1);
LABEL_31:
  if ((v5 & 0x100) == 0) {
    goto LABEL_34;
  }
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_DISK_INTENSIVE, 1);
LABEL_34:
  if ((v5 & 0x400) == 0) {
    return;
  }
  if (!XPC_ACTIVITY_POST_INSTALL)
  {
LABEL_47:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POST_INSTALL, 1);
}

uint64_t sub_1000322E8()
{
  uint64_t result = String.init(cString:)();
  qword_1003220D0 = result;
  *(void *)algn_1003220D8 = v1;
  return result;
}

uint64_t sub_100032318(char *a1, char *a2)
{
  return sub_100253880(*a1, *a2);
}

Swift::Int sub_100032324()
{
  return Hasher._finalize()();
}

uint64_t sub_1000323B0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100032428()
{
  return Hasher._finalize()();
}

uint64_t sub_1000324B0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002F4020, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100032510(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7974696C697475;
  if (*v1) {
    uint64_t v2 = 0x616E65746E69616DLL;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xEB0000000065636ELL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100032558()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000325B8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100032608()
{
  if (*v0) {
    return 0x6E65746E69616D2ELL;
  }
  else {
    return 0x7974696C6974752ELL;
  }
}

unint64_t sub_10003264C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000340EC(*a1);
  *a2 = result;
  return result;
}

void sub_100032678(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100032684()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000326E4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100032734(__int16 a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v2 = sub_100168384(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  char v5 = &v2[16 * v4];
  *((void *)v5 + 4) = 0x614E7265776F702ELL;
  *((void *)v5 + 5) = 0xE900000000000070;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v7 = *((void *)v2 + 2);
    unint64_t v6 = *((void *)v2 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v2 = sub_100168384((char *)(v6 > 1), v7 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v7 + 1;
    uint64_t v8 = &v2[16 * v7];
    *((void *)v8 + 4) = 0x766544656B61772ELL;
    *((void *)v8 + 5) = 0xEB00000000656369;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v10 = *((void *)v2 + 2);
    unint64_t v9 = *((void *)v2 + 3);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_100168384((char *)(v9 > 1), v10 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v10 + 1;
    uint64_t v11 = &v2[16 * v10];
    *((void *)v11 + 4) = 0xD00000000000001ALL;
    *((void *)v11 + 5) = 0x800000010029A6F0;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v12 > 1), v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  uint64_t v14 = &v2[16 * v13];
  *((void *)v14 + 4) = 0xD000000000000010;
  *((void *)v14 + 5) = 0x800000010029A6D0;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_33:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v16 = *((void *)v2 + 2);
  unint64_t v15 = *((void *)v2 + 3);
  if (v16 >= v15 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v15 > 1), v16 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v16 + 1;
  uint64_t v17 = &v2[16 * v16];
  *((void *)v17 + 4) = 0xD00000000000001BLL;
  *((void *)v17 + 5) = 0x800000010029A6B0;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_38:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v19 = *((void *)v2 + 2);
  unint64_t v18 = *((void *)v2 + 3);
  if (v19 >= v18 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v18 > 1), v19 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v19 + 1;
  uint64_t v20 = &v2[16 * v19];
  strcpy(v20 + 32, ".allowBattery");
  *((_WORD *)v20 + 23) = -4864;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v22 = *((void *)v2 + 2);
  unint64_t v21 = *((void *)v2 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v21 > 1), v22 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v22 + 1;
  os_log_type_t v23 = &v2[16 * v22];
  *((void *)v23 + 4) = 0xD000000000000010;
  *((void *)v23 + 5) = 0x800000010029A690;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_48:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v25 = *((void *)v2 + 2);
  unint64_t v24 = *((void *)v2 + 3);
  if (v25 >= v24 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v24 > 1), v25 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v25 + 1;
  unint64_t v26 = &v2[16 * v25];
  strcpy(v26 + 32, ".cpuIntensive");
  *((_WORD *)v26 + 23) = -4864;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_53:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v28 = *((void *)v2 + 2);
  unint64_t v27 = *((void *)v2 + 3);
  if (v28 >= v27 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v27 > 1), v28 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v28 + 1;
  uint64_t v29 = &v2[16 * v28];
  strcpy(v29 + 32, ".diskIntensive");
  v29[47] = -18;
  if ((a1 & 0x200) == 0)
  {
LABEL_20:
    if ((a1 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }
LABEL_58:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v31 = *((void *)v2 + 2);
  unint64_t v30 = *((void *)v2 + 3);
  if (v31 >= v30 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v30 > 1), v31 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v31 + 1;
  uint64_t v32 = &v2[16 * v31];
  *((void *)v32 + 4) = 0xD000000000000019;
  *((void *)v32 + 5) = 0x800000010029A670;
  if ((a1 & 0x400) == 0)
  {
LABEL_21:
    if ((a1 & 0x800) == 0) {
      goto LABEL_73;
    }
    goto LABEL_68;
  }
LABEL_63:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v34 = *((void *)v2 + 2);
  unint64_t v33 = *((void *)v2 + 3);
  if (v34 >= v33 >> 1) {
    uint64_t v2 = sub_100168384((char *)(v33 > 1), v34 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v34 + 1;
  unint64_t v35 = &v2[16 * v34];
  strcpy(v35 + 32, ".postInstall");
  v35[45] = 0;
  *((_WORD *)v35 + 23) = -5120;
  if ((a1 & 0x800) != 0)
  {
LABEL_68:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_100168384(0, *((void *)v2 + 2) + 1, 1, v2);
    }
    unint64_t v37 = *((void *)v2 + 2);
    unint64_t v36 = *((void *)v2 + 3);
    if (v37 >= v36 >> 1) {
      uint64_t v2 = sub_100168384((char *)(v36 > 1), v37 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v37 + 1;
    uint64_t v38 = &v2[16 * v37];
    *((void *)v38 + 4) = 0x657269757165722ELL;
    *((void *)v38 + 5) = 0xEF417373616C4373;
  }
LABEL_73:
  sub_100009F04((uint64_t *)&unk_100328450);
  sub_100009610((unint64_t *)&qword_100322390, (uint64_t *)&unk_100328450);
  uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v41 = v40;
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = v39;
  v42._object = v41;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 93;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  return 91;
}

uint64_t sub_100032E74()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100032ED4()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100032F24()
{
  return sub_100032734(*v0);
}

uint64_t sub_100032F2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10000EFC8(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_100032F6C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100322318);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008EF8(a1, a1[3]);
  sub_100034684();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = *v3;
  char v17 = 0;
  sub_100034780();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *((void *)v3 + 4);
    v11[15] = 5;
    sub_1000347D4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10003319C()
{
  uint64_t result = 0x797469726F697270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E69746165706572;
      break;
    case 2:
      uint64_t result = 0x79616C6564;
      break;
    case 3:
      uint64_t result = 0x7265506563617267;
      break;
    case 4:
      uint64_t result = 0x6C61767265746E69;
      break;
    case 5:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100033268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100034150(a1, a2);
  *a3 = result;
  return result;
}

void sub_100033290(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10003329C(uint64_t a1)
{
  unint64_t v2 = sub_100034684();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000332D8(uint64_t a1)
{
  unint64_t v2 = sub_100034684();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100033314@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000343F0(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10003335C(void *a1)
{
  return sub_100032F6C(a1);
}

BOOL sub_100033374(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100033654((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_1000333C0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1000348FC(v0 + 72);
  sub_100011358(*(void *)(v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCActivity()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *double result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100033510);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

__n128 initializeWithCopy for XPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[40]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

unint64_t sub_100033600()
{
  unint64_t result = qword_1003222C0;
  if (!qword_1003222C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003222C0);
  }
  return result;
}

BOOL sub_100033654(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned char *)a1 == 0;
  if (*(unsigned char *)a1) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475;
  }
  if (v4) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  if (*(unsigned char *)a2) {
    uint64_t v7 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v7 = 0x7974696C697475;
  }
  if (*(unsigned char *)a2) {
    unint64_t v8 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v8 = 0xE700000000000000;
  }
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL result = 0;
    if ((v10 & 1) == 0) {
      return result;
    }
  }
  return ((*(unsigned __int8 *)(a1 + 1) ^ *(unsigned __int8 *)(a2 + 1)) & 1) == 0
      && *(void *)(a1 + 8) == *(void *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

uint64_t sub_100033778(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v41 = a3;
  unint64_t v35 = a2;
  uint64_t v33 = a1;
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v36, v9);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  char v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  unint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v7 + 80) = 0;
  unint64_t v34 = sub_1000093D0();
  *(void *)(v7 + 88) = 0;
  *(void *)(v7 + 96) = 0;
  strcpy((char *)&aBlock, "XPCActivity-");
  BYTE13(aBlock) = 0;
  HIWORD(aBlock) = -5120;
  v20._countAndFlagsBits = a1;
  unint64_t v21 = v35;
  v20._object = v35;
  String.append(_:)(v20);
  uint64_t v31 = *((void *)&aBlock + 1);
  uint64_t v32 = aBlock;
  uint64_t v29 = v16;
  uint64_t v30 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v41, v15);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  *(void *)&long long aBlock = &_swiftEmptyArrayStorage;
  sub_100033B88();
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_100009610((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v23 = v33;
  *(void *)(v7 + 16) = v22;
  *(void *)(v7 + 24) = v23;
  uint64_t v24 = v37;
  *(void *)(v7 + 32) = v21;
  *(void *)(v7 + 40) = v24;
  uint64_t v25 = v39;
  *(void *)(v7 + 48) = v38;
  *(void *)(v7 + 56) = v25;
  *(void *)(v7 + 64) = v40;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_100033BE0;
  *(void *)(v26 + 24) = v7;
  unint64_t v45 = sub_100033BF8;
  uint64_t v46 = v26;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  Swift::String v43 = sub_100030494;
  uint64_t v44 = &unk_1002F56F8;
  unint64_t v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync((dispatch_queue_t)v22, v27);
  _Block_release(v27);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v22)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v41, v30);
    return v7;
  }
  return result;
}

unint64_t sub_100033B88()
{
  unint64_t result = qword_1003222D0;
  if (!qword_1003222D0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003222D0);
  }
  return result;
}

uint64_t sub_100033BE0()
{
  return sub_100030CDC(v0);
}

uint64_t sub_100033BE8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033BF8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100033C20()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100033C58(_xpc_activity_s *a1)
{
  return sub_100030E18(a1);
}

uint64_t sub_100033C60(uint64_t result)
{
  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v1 = (void *)result;
  unint64_t result = xpc_dictionary_get_BOOL((xpc_object_t)result, XPC_ACTIVITY_POWER_NAP);
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unsigned int v2 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY);
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  int v3 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  int v4 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_A);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int v5 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unsigned __int8 v6 = result;
  BOOL v7 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY);
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  unsigned __int8 v8 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_MEMORY_INTENSIVE);
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unsigned __int8 v9 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_CPU_INTENSIVE);
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unsigned __int8 v10 = result;
  unint64_t result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_DISK_INTENSIVE);
  if (!XPC_ACTIVITY_POST_INSTALL)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  uint64_t v11 = v2;
  if (v3) {
    uint64_t v11 = v2 | 4;
  }
  if (v4) {
    v11 |= 2uLL;
  }
  if (v5) {
    v11 |= 0x800uLL;
  }
  if ((v6 & ((v11 & 8) == 0)) != 0) {
    v11 |= 8uLL;
  }
  if (v7 && (v11 & 0x10) == 0) {
    v11 |= 0x10uLL;
  }
  if ((v8 & ((v11 & 0x20) == 0)) != 0) {
    v11 |= 0x20uLL;
  }
  if ((v9 & ((v11 & 0x40) == 0)) != 0) {
    v11 |= 0x40uLL;
  }
  if ((v10 & ((v11 & 0x80) == 0)) != 0) {
    v11 |= 0x80uLL;
  }
  if ((result & ((v11 & 0x100) == 0)) != 0) {
    uint64_t v12 = v11 | 0x100;
  }
  else {
    uint64_t v12 = v11;
  }
  BOOL v13 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_POST_INSTALL);
  swift_unknownObjectRelease();
  if (v13 && (v12 & 0x400) == 0) {
    return v12 | 0x400;
  }
  else {
    return v12;
  }
}

uint64_t sub_100033EAC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (xpc_dictionary_get_string(a1, XPC_ACTIVITY_PRIORITY))
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    if (qword_100320B40 != -1) {
      swift_once();
    }
    if (v4 == qword_1003220D0 && v6 == *(void *)algn_1003220D8)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
    }
    else
    {
      int v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = ~v8 & 1;
    }
    BOOL v15 = xpc_dictionary_get_BOOL(a1, XPC_ACTIVITY_REPEATING);
    int64_t int64 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_DELAY);
    int64_t v11 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_GRACE_PERIOD);
    int64_t v12 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_INTERVAL);
    uint64_t result = sub_100033C60((uint64_t)a1);
    uint64_t v16 = 256;
    if (!v15) {
      uint64_t v16 = 0;
    }
    uint64_t v14 = v16 | v9;
  }
  else
  {
    swift_unknownObjectRelease();
    int64_t int64 = 0;
    int64_t v11 = 0;
    int64_t v12 = 0;
    uint64_t result = 0;
    uint64_t v14 = 2;
  }
  *a2 = v14;
  a2[1] = int64;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = result;
  return result;
}

unint64_t sub_100034028(unint64_t result)
{
  if (result >= 6)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_1000340EC(unint64_t result)
{
  if (result >= 7) {
    return 7;
  }
  return result;
}

unint64_t sub_1000340FC()
{
  unint64_t result = qword_1003222F0;
  if (!qword_1003222F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003222F0);
  }
  return result;
}

uint64_t sub_100034150(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x797469726F697270 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000343F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100009F04(&qword_1003222F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_100034684();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_100008EA8((uint64_t)a1);
  }
  char v24 = 0;
  sub_1000346D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v10 = v25;
  char v23 = 1;
  char v11 = KeyedDecodingContainer.decode(_:forKey:)();
  char v22 = 2;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  char v21 = 3;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 4;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  char v19 = 5;
  sub_10003472C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v12 = v18;
  uint64_t result = sub_100008EA8((uint64_t)a1);
  *(unsigned char *)a2 = v10;
  *(unsigned char *)(a2 + 1) = v11 & 1;
  uint64_t v14 = v16;
  *(void *)(a2 + 8) = v17;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v12;
  return result;
}

unint64_t sub_100034684()
{
  unint64_t result = qword_100322300;
  if (!qword_100322300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322300);
  }
  return result;
}

unint64_t sub_1000346D8()
{
  unint64_t result = qword_100322308;
  if (!qword_100322308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322308);
  }
  return result;
}

unint64_t sub_10003472C()
{
  unint64_t result = qword_100322310;
  if (!qword_100322310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322310);
  }
  return result;
}

unint64_t sub_100034780()
{
  unint64_t result = qword_100322320;
  if (!qword_100322320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322320);
  }
  return result;
}

unint64_t sub_1000347D4()
{
  unint64_t result = qword_100322328;
  if (!qword_100322328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322328);
  }
  return result;
}

uint64_t sub_100034828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100322330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100034890()
{
  sub_100030260(v0);
}

uint64_t sub_100034898()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000348A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000348B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1000348EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000348FC(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100034A80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.CodingKeys()
{
  return &type metadata for XPCActivity.Criteria.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

unsigned char *storeEnumTagSinglePayload for XPCActivity.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100034B94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

unint64_t sub_100034BD0()
{
  unint64_t result = qword_100322340;
  if (!qword_100322340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322340);
  }
  return result;
}

unint64_t sub_100034C28()
{
  unint64_t result = qword_100322348;
  if (!qword_100322348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322348);
  }
  return result;
}

unint64_t sub_100034C80()
{
  unint64_t result = qword_100322350;
  if (!qword_100322350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322350);
  }
  return result;
}

unint64_t sub_100034CD8()
{
  unint64_t result = qword_100322358;
  if (!qword_100322358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322358);
  }
  return result;
}

unint64_t sub_100034D30()
{
  unint64_t result = qword_100322360;
  if (!qword_100322360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322360);
  }
  return result;
}

unint64_t sub_100034D88()
{
  unint64_t result = qword_100322368;
  if (!qword_100322368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322368);
  }
  return result;
}

unint64_t sub_100034DE0()
{
  unint64_t result = qword_100322370;
  if (!qword_100322370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322370);
  }
  return result;
}

unint64_t sub_100034E38()
{
  unint64_t result = qword_100322378;
  if (!qword_100322378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322378);
  }
  return result;
}

unint64_t sub_100034E8C()
{
  unint64_t result = qword_100322380;
  if (!qword_100322380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322380);
  }
  return result;
}

uint64_t sub_100034EE0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000348B8(a1);
}

uint64_t sub_100034F24(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)sub_100034FC4(a1, a2);
  id v3 = [v2 domain];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

id sub_100034F88(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)sub_100034FC4(a1, a2);
  id v3 = [v2 code];

  return v3;
}

uint64_t sub_100034FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7, v5, a1);
  }
  uint64_t v8 = _convertErrorToNSError(_:)();
  swift_errorRelease();
  return v8;
}

uint64_t sub_10003510C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, a2);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v7, v5, a2);
  }
  uint64_t v8 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  id v10 = [v8 code];
  if (v10 == [v9 code])
  {
    id v11 = [v8 domain];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    id v15 = [v9 domain];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    if (v12 == v16 && v14 == v18) {
      char v20 = 1;
    }
    else {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    char v20 = 0;
  }
  return v20 & 1;
}

BOOL sub_100035340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a2);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a2);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v8, v6, a2);
  }
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v10 = [v9 underlyingErrors];
  sub_100009F04((uint64_t *)&unk_100325850);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_errorRetain();
  uint64_t v12 = sub_1000359D4(v11, a1);
  swift_errorRelease();

  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  return v13 != 0;
}

uint64_t sub_10003550C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)sub_100034FC4(v5, v8);
  id v10 = [v9 aa_partialErrorsByName];

  if (v10
    && (sub_100009F04((uint64_t *)&unk_100325850),
        uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v10,
        uint64_t v12 = sub_10016B53C(v11),
        swift_bridgeObjectRelease(),
        v12))
  {
    swift_getErrorValue();
    uint64_t v13 = sub_10003550C(v17[1], v17[2]);
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a1);
    uint64_t v14 = _getErrorEmbeddedNSError<A>(_:)();
    if (v14)
    {
      uint64_t v13 = v14;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    }
    else
    {
      uint64_t v13 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v15, v7, a1);
    }
  }
  return v13;
}

id sub_1000356E4(uint64_t a1, uint64_t a2)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100009F04((uint64_t *)&unk_10032E130);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 72) = a2;
  uint64_t v7 = sub_10003584C((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(v7, v2, a2);
  sub_100220CAC(inited);
  id v8 = objc_allocWithZone((Class)NSError);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v8 initWithDomain:v9 code:a1 userInfo:isa];

  return v11;
}

uint64_t *sub_10003584C(uint64_t *a1)
{
  Swift::String v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1000358B0(uint64_t a1)
{
}

void sub_1000358D8(uint64_t a1)
{
}

void sub_100035900(uint64_t a1)
{
}

void sub_100035928(uint64_t a1)
{
}

void sub_100035950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = objc_allocWithZone((Class)NSError);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 initWithDomain:v8 code:a4 userInfo:0];

  *a5 = v9;
}

uint64_t sub_1000359D4(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result + 32;
    do
    {
      if (v3 <= v2) {
        unint64_t v5 = v2;
      }
      else {
        unint64_t v5 = v3;
      }
      for (unint64_t i = v3; ; ++i)
      {
        if (v5 == i)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = *(void *)(v4 + 8 * i);
        unint64_t v3 = i + 1;
        swift_getErrorValue();
        swift_errorRetain();
        if (sub_10003510C(a2, v11)) {
          break;
        }
        unint64_t result = swift_errorRelease();
        if (v2 == v3) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = sub_100228944(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        unint64_t result = sub_100228944(v8 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
    }
    while (v2 - 1 != i);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_100035B44()
{
  type metadata accessor for CustodianKeyRepair(0);
  sub_100009F04((uint64_t *)&unk_100322930);
  uint64_t result = String.init<A>(describing:)();
  qword_1003223A0 = result;
  *(void *)algn_1003223A8 = v1;
  return result;
}

uint64_t sub_100035B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  if (!a1) {
    return sub_1000362D0(a3, a4, a5, (uint64_t)a6, a7);
  }
  swift_errorRetain();
  a6(a1);

  return swift_errorRelease();
}

void sub_100035C18(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = (void *)type metadata accessor for CustodianRecord();
  uint64_t v10 = *(v52 - 1);
  __chkstk_darwin(v52, v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v15);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E748);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to fetch custodians", v28, 2u);
      swift_slowDealloc();
    }

    swift_errorRetain();
    a4(a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v47 = a3;
    uint64_t v48 = a5;
    int64_t v18 = *(void *)(a1 + 16);
    char v19 = _swiftEmptyArrayStorage;
    if (v18)
    {
      uint64_t v46 = a4;
      uint64_t v54 = _swiftEmptyArrayStorage;
      sub_1002289A0(0, v18, 0);
      uint64_t v20 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      uint64_t v21 = *(void *)(v10 + 72);
      uint64_t v50 = v14 + 32;
      uint64_t v51 = v21;
      uint64_t v22 = v49;
      do
      {
        sub_100041DC4(v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, &v13[*((int *)v52 + 5)], v22);
        sub_100041E2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        char v19 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002289A0(0, v19[2] + 1, 1);
          uint64_t v22 = v49;
          char v19 = v54;
        }
        unint64_t v24 = v19[2];
        unint64_t v23 = v19[3];
        if (v24 >= v23 >> 1)
        {
          sub_1002289A0(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v49;
          char v19 = v54;
        }
        v19[2] = v24 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v24, v17, v22);
        uint64_t v54 = v19;
        v20 += v51;
        --v18;
      }
      while (v18);
      a4 = v46;
    }
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = sub_100122A24(v29);
    swift_bridgeObjectRelease();
    char v31 = sub_1000407E8((uint64_t)v19, v30);
    swift_bridgeObjectRelease();
    if (v31)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100007288(v32, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        uint64_t v54 = v52;
        *(_DWORD *)uint64_t v35 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v36 = Array.description.getter();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        uint64_t v53 = sub_100135190(v36, v38, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v39 = a4;
        uint64_t v40 = Array.description.getter();
        unint64_t v42 = v41;
        swift_bridgeObjectRelease();
        uint64_t v43 = v40;
        a4 = v39;
        uint64_t v53 = sub_100135190(v43, v42, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "No matching custodians found on device to repair. uuidsToRepair %s custodiansOnDevice: %s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for AACustodianError(0);
      uint64_t v53 = -7050;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v44 = v54;
      a4((uint64_t)v54);
    }
    else
    {
      swift_bridgeObjectRelease();
      a4(0);
    }
  }
}

uint64_t sub_1000362D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for KeyRepairContext(0);
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v40 + 64);
  __chkstk_darwin(v12 - 8, v14);
  uint64_t v15 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [objc_allocWithZone((Class)NSOperationQueue) init];
  [v16 setMaxConcurrentOperationCount:1];
  [v16 setQualityOfService:25];
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_100041BB0(a1, a2, a3);
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = _swiftEmptyArrayStorage;
  uint64_t v20 = v17[2];
  if (v20)
  {
    uint64_t v35 = a4;
    uint64_t v36 = a5;
    uint64_t v21 = *(unsigned __int8 *)(v40 + 80);
    uint64_t v22 = v6;
    id v41 = v16;
    os_log_type_t v34 = v17;
    uint64_t v23 = (uint64_t)v17 + ((v21 + 32) & ~v21);
    uint64_t v24 = *(void *)(v40 + 72);
    uint64_t v39 = (v21 + 24) & ~v21;
    uint64_t v40 = v24;
    unint64_t v37 = (v13 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = v21 | 7;
    unint64_t v25 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      sub_100041DC4(v23, (uint64_t)v15, type metadata accessor for KeyRepairContext);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v22;
      sub_10004381C((uint64_t)v15, v26 + v39, type metadata accessor for KeyRepairContext);
      *(void *)(v26 + v37) = v19;
      *(void *)(v26 + v25) = v18;
      os_log_type_t v27 = (objc_class *)type metadata accessor for AsyncOperation();
      unint64_t v28 = objc_allocWithZone(v27);
      v28[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      uint64_t v29 = (uint64_t (**)(uint64_t, uint64_t))&v28[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *uint64_t v29 = sub_100046A90;
      v29[1] = (uint64_t (*)(uint64_t, uint64_t))v26;
      v43.receiver = v28;
      v43.super_class = v27;
      swift_retain();
      swift_retain();
      swift_retain();
      id v30 = [super init:v34];
      [v41 addOperation:v30];

      v23 += v40;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    uint64_t v6 = v22;
    id v16 = v41;
    a4 = v35;
    a5 = v36;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  char v31 = (void *)swift_allocObject();
  v31[2] = v6;
  v31[3] = v19;
  v31[4] = v18;
  void v31[5] = a4;
  v31[6] = a5;
  aBlock[4] = sub_100046B9C;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F5EF0;
  uint64_t v32 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v16 addBarrierBlock:v32];
  _Block_release(v32);

  swift_release();
  return swift_release();
}

uint64_t sub_1000366B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a1;
  uint64_t v27 = a6;
  uint64_t v25 = a4;
  uint64_t v10 = type metadata accessor for KeyRepairContext(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8, v13);
  uint64_t v14 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100041DC4(a4, (uint64_t)v14, type metadata accessor for KeyRepairContext);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (void (*)(uint64_t))swift_allocObject();
  sub_10004381C((uint64_t)v14, (uint64_t)v20 + v15, type metadata accessor for KeyRepairContext);
  *(void *)((char *)v20 + v16) = a3;
  *(void *)((char *)v20 + v17) = a5;
  uint64_t v21 = (void *)((char *)v20 + v18);
  uint64_t v22 = v27;
  *uint64_t v21 = v26;
  v21[1] = a2;
  *(void *)((char *)v20 + v19) = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100037B84(v25, (void (*)(uint64_t))sub_100046D6C, v20);
  return swift_release();
}

uint64_t sub_100036864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v69 = a5;
  uint64_t v67 = a3;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v71 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v16 - 8);
  uint64_t v73 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v70 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for KeyRepairContext(0);
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v65 + 64);
  uint64_t v22 = __chkstk_darwin(v19 - 8, v21);
  uint64_t v66 = (uint64_t)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = (char *)&v60 - v25;
  __chkstk_darwin(v24, v27);
  uint64_t v29 = (char *)&v60 - v28;
  uint64_t v68 = a2;
  if (a1)
  {
    uint64_t v62 = a7;
    uint64_t v63 = v13;
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v64 = a6;
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E748);
    sub_100041DC4(a2, (uint64_t)v26, type metadata accessor for KeyRepairContext);
    swift_errorRetain();
    swift_errorRetain();
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      int v60 = (void *)swift_slowAlloc();
      uint64_t v61 = (void **)swift_slowAlloc();
      long long aBlock = v61;
      *(_DWORD *)uint64_t v33 = 136315394;
      type metadata accessor for UUID();
      sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = (void *)sub_100135190(v34, v35, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100041E2C((uint64_t)v26, type metadata accessor for KeyRepairContext);
      *(_WORD *)(v33 + 12) = 2112;
      swift_errorRetain();
      uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
      unint64_t v74 = (void *)v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v60 = v36;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Repair Failure: %s error: %@", (uint8_t *)v33, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100041E2C((uint64_t)v26, type metadata accessor for KeyRepairContext);
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v44 = v66;
    sub_100041DC4(v68, v66, type metadata accessor for KeyRepairContext);
    unint64_t v45 = (*(unsigned __int8 *)(v65 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    unint64_t v46 = (v20 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v62;
    sub_10004381C(v44, v47 + v45, type metadata accessor for KeyRepairContext);
    *(void *)(v47 + v46) = a1;
    uint64_t v48 = (void *)(v47 + ((v46 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v49 = v64;
    *uint64_t v48 = v69;
    v48[1] = v49;
    unint64_t v79 = sub_100047104;
    uint64_t v80 = v47;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v76 = 1107296256;
    uint64_t v77 = sub_100007244;
    uint64_t v78 = &unk_1002F6008;
    uint64_t v50 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    uint64_t v51 = v70;
    static DispatchQoS.unspecified.getter();
    unint64_t v74 = _swiftEmptyArrayStorage;
    sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    uint64_t v52 = v71;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v50);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v12);
  }
  else
  {
    uint64_t v63 = a4;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100007288(v37, (uint64_t)qword_10033E748);
    sub_100041DC4(a2, (uint64_t)v29, type metadata accessor for KeyRepairContext);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      id v41 = (void **)swift_slowAlloc();
      uint64_t v64 = a6;
      long long aBlock = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v61 = (void **)(v40 + 4);
      uint64_t v62 = v12;
      type metadata accessor for UUID();
      sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = (void *)sub_100135190(v42, v43, (uint64_t *)&aBlock);
      uint64_t v12 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100041E2C((uint64_t)v29, type metadata accessor for KeyRepairContext);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Repair Success: %s", v40, 0xCu);
      swift_arrayDestroy();
      a6 = v64;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100041E2C((uint64_t)v29, type metadata accessor for KeyRepairContext);
    }

    uint64_t v53 = v66;
    sub_100041DC4(v68, v66, type metadata accessor for KeyRepairContext);
    unint64_t v54 = (*(unsigned __int8 *)(v65 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v63;
    sub_10004381C(v53, v55 + v54, type metadata accessor for KeyRepairContext);
    uint64_t v56 = (void *)(v55 + ((v20 + v54 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v56 = v69;
    v56[1] = a6;
    unint64_t v79 = sub_100046F44;
    uint64_t v80 = v55;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v76 = 1107296256;
    uint64_t v77 = sub_100007244;
    uint64_t v78 = &unk_1002F5FB8;
    uint64_t v57 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    uint64_t v51 = v70;
    static DispatchQoS.unspecified.getter();
    unint64_t v74 = _swiftEmptyArrayStorage;
    sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    uint64_t v58 = v71;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v57);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v58, v12);
  }
  (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v73);
  return swift_release();
}

uint64_t sub_100037310(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (unint64_t *)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  swift_beginAccess();
  unint64_t v12 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v12 = sub_100168894(0, *(void *)(v12 + 16) + 1, 1, v12);
    *uint64_t v11 = v12;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    unint64_t v12 = sub_100168894(v14 > 1, v15 + 1, 1, v12);
    *uint64_t v11 = v12;
  }
  *(void *)(v12 + 16) = v15 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, v10, v6);
  uint64_t v16 = swift_endAccess();
  return a3(v16);
}

uint64_t sub_1000374C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  swift_beginAccess();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  sub_10022C0AC(a3, v7, v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16) = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_endAccess();
  return a4(v11);
}

uint64_t sub_1000375A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21[0] - 8);
  __chkstk_darwin(v21[0], v15);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  void v18[5] = a5;
  aBlock[4] = sub_100046C14;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F5F40;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, void))(v14 + 8))(v17, v21[0]);
  return swift_release();
}

void sub_100037874(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v17[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_beginAccess();
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    id v18 = (id)sub_100135190(v9, v11, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Finishing Custodian Repair for UUIDs: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for AAError(0);
  v17[13] = -4408;
  sub_100009F04((uint64_t *)&unk_10032E130);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  swift_beginAccess();
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
  *(void *)(inited + 48) = v14;
  swift_bridgeObjectRetain();
  sub_100220CAC(inited);
  sub_100009458((unint64_t *)&qword_100321140, type metadata accessor for AAError);
  _BridgedStoredNSError.init(_:userInfo:)();
  id v15 = v18;
  id v16 = v18;
  a3(v15);
}

void sub_100037B84(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t))
{
  uint64_t v4 = v3;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  uint64_t v58 = a1;
  uint64_t v60 = *v3;
  uint64_t v5 = type metadata accessor for KeyRepairContext(0);
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v57 + 64);
  __chkstk_darwin(v5 - 8, v7);
  uint64_t v59 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v8);
  uint64_t v62 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100321FF8);
  uint64_t v56 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  id v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100009F04(&qword_100325870);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v19);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  id v24 = [[*(id *)(*sub_100008EF8(v67, v68) + 16) aa_primaryAppleAccount];
  sub_100008EA8((uint64_t)v67);
  if (v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController, v14);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t v25 = *(void **)(*sub_100008EF8(v67, v68) + 24);
    uint64_t v66 = 0;
    if ([v25 isManateeAvailable:&v66])
    {
      id v26 = (id)v66;
      sub_100008EA8((uint64_t)v67);
      uint64_t v27 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v13, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v10);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
      sub_100008EF8(v67, v68);
      uint64_t v28 = v61;
      uint64_t v29 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v62, v58, v63);
      uint64_t v30 = swift_allocObject();
      swift_weakInit();
      uint64_t v31 = v59;
      sub_100041DC4(v29, v59, type metadata accessor for KeyRepairContext);
      unint64_t v32 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
      unint64_t v33 = (v6 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v30;
      *(void *)(v34 + 24) = v24;
      sub_10004381C(v31, v34 + v32, type metadata accessor for KeyRepairContext);
      unint64_t v35 = (void (**)(uint64_t))(v34 + v33);
      uint64_t v36 = v65;
      void *v35 = v64;
      v35[1] = v36;
      *(void *)(v34 + ((v33 + 23) & 0xFFFFFFFFFFFFFFF8)) = v60;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = sub_100043A00;
      *(void *)(v37 + 24) = v34;
      swift_retain();
      id v38 = v24;
      swift_retain();
      swift_retain();
      uint64_t v39 = v62;
      sub_1002369EC(v62, (uint64_t)sub_100043AE8, v37);

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v39, v63);
      swift_release();
      sub_100008EA8((uint64_t)v67);
    }
    else
    {
      id v47 = (id)v66;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      sub_100008EA8((uint64_t)v67);
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_100007288(v48, (uint64_t)qword_10033E778);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        id v51 = v24;
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        v67[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 136315138;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v53 = qword_1003223A0;
        unint64_t v54 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_100135190(v53, v54, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - no manatee available, stopping custodian key repair.", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v24 = v51;
      }
      else
      {
      }
      type metadata accessor for AACustodianError(0);
      uint64_t v66 = -7024;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v55 = (void *)v67[0];
      v64(v67[0]);
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E778);
    id v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = (uint8_t *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v43 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v44 = qword_1003223A0;
      unint64_t v45 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_100135190(v44, v45, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - not logged in to AppleAccount, unable to repair keys", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v66 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v46 = (void *)v67[0];
    v64(v67[0]);
  }
}

uint64_t sub_1000385D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), unint64_t a6)
{
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v15, v16);
  id v18 = (void *)((char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v18, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v29[1] = a6;
      uint64_t v23 = swift_slowAlloc();
      id v24 = (void *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v26 = qword_1003223A0;
      unint64_t v25 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_100135190(v26, v25, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      uint64_t v27 = _convertErrorToNSError(_:)();
      uint64_t v31 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v24 = v27;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - error fetching custodianship records, unable to repair: %@", (uint8_t *)v23, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }
    swift_errorRetain();
    a5(v19);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10004381C((uint64_t)v18, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1000389B8((uint64_t)v14, a3, a4, a5, a6);
      swift_release();
    }
    return sub_100041E2C((uint64_t)v14, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_1000389B8(uint64_t a1, void *a2, uint64_t a3, void *a4, unint64_t a5)
{
  unint64_t v71 = a5;
  unint64_t v79 = a4;
  id v76 = a2;
  uint64_t v89 = *v5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v8 - 8);
  uint64_t v87 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v84 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v81 = *(void *)(v11 - 8);
  int v82 = (void *)v11;
  __chkstk_darwin(v11, v12);
  uint64_t v80 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for KeyRepairContext(0);
  uint64_t v15 = v14 - 8;
  uint64_t v78 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v78 + 64);
  __chkstk_darwin(v14, v17);
  uint64_t v88 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  uint64_t v22 = __chkstk_darwin(v18 - 8, v21);
  uint64_t v70 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  unint64_t v25 = (char *)&v67 - v24;
  id v69 = sub_10003A3C4(*(void *)(a3 + *(int *)(v15 + 36)), *(void *)(a3 + *(int *)(v15 + 36) + 8));
  uint64_t v26 = swift_allocObject();
  uint64_t v85 = v5;
  swift_weakInit();
  uint64_t v72 = a1;
  sub_100041DC4(a1, (uint64_t)v25, type metadata accessor for CustodianshipRecords);
  uint64_t v83 = a3;
  sub_100041DC4(a3, (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for KeyRepairContext);
  unint64_t v27 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v28 = (v27 + 40) & ~v27;
  uint64_t v75 = v20 + 7;
  unint64_t v29 = (v20 + 7 + v28) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(unsigned __int8 *)(v78 + 80);
  uint64_t v74 = v30 + 8;
  uint64_t v31 = (v30 + 8 + v29) & ~v30;
  uint64_t v73 = v16 + 7;
  unint64_t v32 = (v16 + 7 + v31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v78 = v27 | v30 | 7;
  unint64_t v33 = (void *)swift_allocObject();
  uint64_t v34 = v79;
  v33[2] = v26;
  void v33[3] = v34;
  v33[4] = v71;
  uint64_t v77 = v25;
  sub_10004381C((uint64_t)v25, (uint64_t)v33 + v28, type metadata accessor for CustodianshipRecords);
  id v35 = v76;
  *(void *)((char *)v33 + v29) = v76;
  sub_10004381C(v88, (uint64_t)v33 + v31, type metadata accessor for KeyRepairContext);
  uint64_t v36 = v69;
  *(void *)((char *)v33 + v32) = v69;
  unint64_t v79 = v33;
  *(void *)((char *)v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8)) = v89;
  uint64_t v37 = qword_100320B98;
  swift_retain();
  id v38 = v35;
  id v76 = v36;
  if (v37 != -1) {
    swift_once();
  }
  unint64_t v71 = ~v27;
  uint64_t v39 = ~v30;
  uint64_t v40 = type metadata accessor for Logger();
  sub_100007288(v40, (uint64_t)qword_10033E778);
  uint64_t v41 = v72;
  uint64_t v42 = v70;
  sub_100041DC4(v72, v70, type metadata accessor for CustodianshipRecords);
  unint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  unint64_t v45 = v27;
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v68 = v39;
    id v69 = (id)v27;
    uint64_t v46 = swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315394;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v47 = qword_1003223A0;
    unint64_t v48 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v90 = sub_100135190(v47, v48, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v49 = sub_1002682DC();
    uint64_t v90 = sub_100135190(v49, v50, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100041E2C(v42, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v45 = (unint64_t)v69;
    uint64_t v39 = v68;
  }
  else
  {
    sub_100041E2C(v42, type metadata accessor for CustodianshipRecords);
  }
  id v51 = v85;
  uint64_t v52 = v80;
  uint64_t v53 = v81;
  unint64_t v54 = v82;
  (*(void (**)(char *, uint64_t, void *))(v81 + 16))(v80, (uint64_t)v85 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v82);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, void *))(v53 + 8))(v52, v54);
  int v82 = sub_100008EF8(v91, v91[3]);
  uint64_t v55 = v84;
  sub_1002686B4(v84);
  uint64_t v56 = (uint64_t)v77;
  sub_100041DC4(v41, (uint64_t)v77, type metadata accessor for CustodianshipRecords);
  uint64_t v57 = v88;
  sub_100041DC4(v83, v88, type metadata accessor for KeyRepairContext);
  uint64_t v58 = (v45 + 16) & v71;
  unint64_t v59 = (v75 + v58) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = (v74 + v60) & v39;
  unint64_t v62 = (v73 + v61) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v63 = swift_allocObject();
  sub_10004381C(v56, v63 + v58, type metadata accessor for CustodianshipRecords);
  uint64_t v64 = (void (**)(uint64_t))(v63 + v59);
  uint64_t v65 = (void (*)(uint64_t))v79;
  *uint64_t v64 = sub_100043F74;
  v64[1] = v65;
  *(void *)(v63 + v60) = v51;
  sub_10004381C(v57, v63 + v61, type metadata accessor for KeyRepairContext);
  *(void *)(v63 + v62) = v89;
  swift_retain();
  swift_retain();
  sub_1001E36D0(v55, (void (*)(void, uint64_t))sub_100044510, v63);

  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v55, v87);
  return sub_100008EA8((uint64_t)v91);
}

void sub_100039220(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v58 = *v5;
  uint64_t v59 = a2;
  uint64_t v10 = sub_100009F04(&qword_100324680);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v56 = v18;
  uint64_t v57 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v48 - v20;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100007288(v22, (uint64_t)qword_10033E778);
  sub_100041DC4(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_bridgeObjectRetain_n();
  uint64_t v54 = v23;
  unint64_t v24 = a3;
  unint64_t v25 = Logger.logObject.getter();
  int v53 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v53);
  unint64_t v60 = v24;
  if (v26)
  {
    uint64_t v50 = a1;
    id v51 = a4;
    uint64_t v52 = a5;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    v65[0] = v49;
    *(_DWORD *)uint64_t v27 = 136315650;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v28 = qword_1003223A0;
    unint64_t v29 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_100135190(v28, v29, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    type metadata accessor for UUID();
    sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_100135190(v30, v31, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100041E2C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    *(_WORD *)(v27 + 22) = 2080;
    unint64_t v32 = v60;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_100135190(v59, v32, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v53, "%s - re-sharing zone for %s with: %s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a5 = v52;
    a4 = v51;
    a1 = v50;
  }
  else
  {
    sub_100041E2C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v33 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v61 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v62, (uint64_t)v65);
    uint64_t v34 = v57;
    sub_100041DC4(a1, v57, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v35 = (*(unsigned __int8 *)(v55 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    unint64_t v36 = (v56 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v33;
    sub_10004381C(v34, v38 + v35, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v39 = (void *)(v38 + v36);
    unint64_t v40 = v60;
    *uint64_t v39 = v59;
    v39[1] = v40;
    uint64_t v41 = (void *)(v38 + v37);
    *uint64_t v41 = a4;
    v41[1] = a5;
    *(void *)(v38 + ((v37 + 23) & 0xFFFFFFFFFFFFFFF8)) = v58;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1001D1D84(a1, (uint64_t)sub_1000420B8, v38);
    swift_release();
    sub_100008EA8((uint64_t)v65);
  }
  else
  {
    uint64_t v63 = 0;
    memset(v62, 0, sizeof(v62));
    sub_100006574((uint64_t)v62, (uint64_t *)&unk_10032B4A0);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v42, v43))
    {
      os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v44 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v45 = qword_1003223A0;
      unint64_t v46 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_100135190(v45, v46, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - could not get reference to CloudKitSharing, abandoning re-share", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v64 = -7008;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v47 = (void *)v65[0];
    a4(v65[0]);
  }
}

uint64_t sub_100039A44(int a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v56 = a8;
  uint64_t v52 = a7;
  uint64_t v54 = a6;
  uint64_t v55 = a5;
  int v53 = a4;
  int v51 = a1;
  uint64_t v49 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v49, v10);
  uint64_t v50 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v16 = __chkstk_darwin(v12 - 8, v15);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v48 - v18;
  uint64_t v20 = sub_100009F04(&qword_100322950);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  unint64_t v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a2 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__storageController, v20);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  unint64_t v25 = sub_100008EF8(v62, v62[3]);
  uint64_t v48 = a3;
  sub_100041DC4(a3, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v57 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100041DC4((uint64_t)v19, v57, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v26 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v27 = v26 + v14;
  unint64_t v28 = (v26 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v31 + v26;
  uint64_t v33 = v52;
  uint64_t v34 = (uint64_t)v19;
  char v35 = v51;
  sub_10004381C(v34, v32, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  *(unsigned char *)(v31 + v27) = v35;
  *(void *)(v28 + v31 + 8) = a2;
  unint64_t v36 = v54;
  unint64_t v37 = (void ***)(v31 + v29);
  uint64_t v38 = v53;
  uint64_t v39 = v55;
  *unint64_t v37 = v53;
  v37[1] = (void **)v39;
  unint64_t v40 = (void (**)(uint64_t))(v31 + v30);
  *unint64_t v40 = v36;
  v40[1] = (void (*)(uint64_t))v33;
  *(void *)(v31 + ((v30 + 23) & 0xFFFFFFFFFFFFFFF8)) = v56;
  uint64_t v41 = a2;
  uint64_t v42 = v39;
  sub_100008A94(*v25 + 56, (uint64_t)v60);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  sub_100009F04((uint64_t *)&unk_1003224B0);
  sub_100009F04(&qword_100322940);
  if (swift_dynamicCast())
  {
    sub_100041E8C(v58, (uint64_t)v61);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = sub_100042394;
    *(void *)(v43 + 24) = v31;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10007AAD8(v48, v38, v42, (void **)3, (uint64_t)sub_100043814, v43);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100008EA8((uint64_t)v61);
    swift_release();
    uint64_t v44 = v57;
  }
  else
  {
    uint64_t v59 = 0;
    memset(v58, 0, sizeof(v58));
    sub_100006574((uint64_t)v58, (uint64_t *)&unk_10032B4A0);
    type metadata accessor for AACustodianError(0);
    v60[0] = -7000;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v45 = (uint64_t)v50;
    *uint64_t v50 = v61[0];
    swift_storeEnumTagMultiPayload();
    uint64_t v46 = v57;
    sub_10004285C(v45, v57, v35 & 1, v41, (uint64_t)v38, v42, v36, v33);
    sub_100006574(v45, &qword_100322948);
    swift_release();
    uint64_t v44 = v46;
  }
  sub_100041E2C(v44, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_100008EA8((uint64_t)v62);
}

uint64_t sub_100039FC4()
{
  return type metadata accessor for CustodianKeyRepair(0);
}

void sub_100039FCC()
{
  sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F40, (uint64_t *)&unk_100322460);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, &qword_100322478, (uint64_t *)&unk_100322480);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, &qword_100322498, (uint64_t *)&unk_1003224A0);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
                if (v7 <= 0x3F)
                {
                  sub_10001BF34(319, (unint64_t *)&unk_100327F60, &qword_100320D40);
                  if (v8 <= 0x3F)
                  {
                    sub_10001BF34(319, (unint64_t *)&unk_100327F80, (uint64_t *)&unk_100321900);
                    if (v9 <= 0x3F)
                    {
                      sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
                      if (v10 <= 0x3F)
                      {
                        sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
                        if (v11 <= 0x3F) {
                          swift_updateClassMetadata2();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

id sub_10003A3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100009F04(&qword_100323190);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100325870);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v28[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  id v15 = [*(id *)(*sub_100008EF8(v28, v28[3]) + 16) aa_primaryAppleAccount];
  if (v15
    && (uint64_t v16 = v15, v17 = objc_msgSend(v15, "aa_altDSID"), v16, v17))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100008EA8((uint64_t)v28);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsEventFactory, v5);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a2)
    {
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v20 = 0;
    }
    id v25 = [self analyticsEventWithName:v18 altDSID:v19 flowID:v20];
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v28);
  }
  else
  {
    sub_100008EA8((uint64_t)v28);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E790);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Account is nil. Not reporting repair failure", v24, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v25;
}

void sub_10003A7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v56 = a8;
  uint64_t v57 = a7;
  uint64_t v58 = a4;
  uint64_t v59 = (void (*)(uint64_t))a3;
  uint64_t v11 = sub_100009F04(&qword_100322CF0);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11, v12);
  int v53 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04((uint64_t *)&unk_100322990);
  __chkstk_darwin(v14 - 8, v15);
  id v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for RecoveryKeys(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v23, v24);
  unint64_t v26 = (uint64_t *)((char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v28 = Strong;
    sub_100019730(a1, (uint64_t)v26, (uint64_t *)&unk_100322980);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = *v26;
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E778);
      swift_errorRetain();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = (void *)swift_slowAlloc();
        id v61 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136315394;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v35 = qword_1003223A0;
        unint64_t v36 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v60 = sub_100135190(v35, v36, (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2112;
        uint64_t v37 = _convertErrorToNSError(_:)();
        uint64_t v60 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v34 = v37;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - AutoHeal: error creating recovery keys, unable to repair: %@", (uint8_t *)v33, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      uint64_t v46 = v59;
      uint64_t v47 = v56;
      if (v56)
      {
        swift_errorRetain();
        id v48 = v47;
        uint64_t v49 = (void *)_convertErrorToNSError(_:)();
        [v48 updateTaskResultWithError:v49];

        uint64_t v50 = v53;
        uint64_t v51 = v54;
        uint64_t v52 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v28 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter, v55);
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
        [v61 sendEvent:v48];

        swift_unknownObjectRelease();
      }
      else
      {
        swift_errorRetain();
      }
      v46(v29);
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      sub_10004381C((uint64_t)v26, (uint64_t)v22, type metadata accessor for RecoveryKeys);
      sub_100041DC4((uint64_t)v22, (uint64_t)v17, type metadata accessor for RecoveryKeys);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      sub_10003AF88(a5, (uint64_t)v17, a6, v57, (uint64_t)v59, v58);
      swift_release();
      sub_100006574((uint64_t)v17, (uint64_t *)&unk_100322990);
      sub_100041E2C((uint64_t)v22, type metadata accessor for RecoveryKeys);
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E778);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      id v61 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v42 = qword_1003223A0;
      unint64_t v43 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_100135190(v42, v43, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - AutoHeal: Self is nil. Abort Custodian Key Repair", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v44 = (void (*)(id))v59;
    type metadata accessor for AACustodianError(0);
    uint64_t v60 = -7022;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v45 = v61;
    v44(v61);
  }
}

id sub_10003AF88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v169 = a6;
  uint64_t v167 = a5;
  uint64_t v192 = a4;
  v170 = a3;
  uint64_t v191 = a2;
  uint64_t v168 = *v6;
  uint64_t v180 = type metadata accessor for KeyRepairContext(0);
  uint64_t v162 = *(void *)(v180 - 8);
  __chkstk_darwin(v180, v8);
  uint64_t v163 = v9;
  uint64_t v166 = (uint64_t)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v160 = *(void *)(v185 - 8);
  uint64_t v11 = __chkstk_darwin(v185, v10);
  uint64_t v165 = (uint64_t)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v164 = (uint64_t)&v149 - v15;
  uint64_t v161 = v16;
  __chkstk_darwin(v14, v17);
  uint64_t v182 = (uint64_t)&v149 - v18;
  uint64_t v154 = type metadata accessor for CustodianHealthRecord();
  uint64_t v20 = __chkstk_darwin(v154, v19);
  v159 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  uint64_t v181 = (uint64_t)&v149 - v23;
  uint64_t v153 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v25 = __chkstk_darwin(v153, v24);
  uint64_t v179 = (uint64_t)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  uint64_t v188 = (uint64_t)&v149 - v28;
  uint64_t v29 = sub_100009F04(&qword_100324D80);
  uint64_t v31 = __chkstk_darwin(v29 - 8, v30);
  uint64_t v158 = (char *)&v149 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v33);
  v157 = (char *)&v149 - v34;
  uint64_t v35 = type metadata accessor for CustodianRecord();
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v177 = (uint64_t)&v149 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v39);
  uint64_t v186 = (uint64_t)&v149 - v40;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v43);
  uint64_t v149 = (char *)&v149 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = sub_100009F04(&qword_1003229A0);
  __chkstk_darwin(v176, v45);
  uint64_t v47 = (char *)&v149 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100009F04((uint64_t *)&unk_100322990);
  uint64_t v50 = __chkstk_darwin(v48 - 8, v49);
  uint64_t v152 = (uint64_t)&v149 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __chkstk_darwin(v50, v52);
  uint64_t v156 = (uint64_t)&v149 - v54;
  uint64_t v56 = __chkstk_darwin(v53, v55);
  v171 = (char *)&v149 - v57;
  uint64_t v59 = __chkstk_darwin(v56, v58);
  v175 = (uint64_t *)((char *)&v149 - v60);
  __chkstk_darwin(v59, v61);
  uint64_t v63 = (char *)&v149 - v62;
  uint64_t v64 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v66 = __chkstk_darwin(v64 - 8, v65);
  v173 = (char *)&v149 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __chkstk_darwin(v66, v68);
  v174 = (char *)&v149 - v70;
  uint64_t v72 = __chkstk_darwin(v69, v71);
  uint64_t v155 = (uint64_t)&v149 - v73;
  uint64_t v75 = __chkstk_darwin(v72, v74);
  uint64_t v77 = (char *)&v149 - v76;
  __chkstk_darwin(v75, v78);
  uint64_t v80 = (char *)&v149 - v79;
  uint64_t v151 = v35;
  uint64_t v81 = *(int *)(v35 + 20);
  uint64_t v187 = a1;
  int v82 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v82((char *)&v149 - v79, a1 + v81, v41);
  v190 = *(void (**)(void))(v42 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))v190)(v80, 0, 1, v41);
  sub_100019730(v191, (uint64_t)v63, (uint64_t *)&unk_100322990);
  uint64_t v83 = type metadata accessor for RecoveryKeys(0);
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v85 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v84 + 48);
  uint64_t v183 = v84 + 48;
  v184 = v85;
  unsigned int v86 = v85((uint64_t *)v63, 1, v83);
  uint64_t v189 = v83;
  uint64_t v172 = v42 + 16;
  unint64_t v150 = v82;
  if (v86 == 1)
  {
    sub_100006574((uint64_t)v63, (uint64_t *)&unk_100322990);
    uint64_t v87 = 1;
  }
  else
  {
    v82(v77, (uint64_t)&v63[*(int *)(v83 + 24)], v41);
    sub_100041E2C((uint64_t)v63, type metadata accessor for RecoveryKeys);
    uint64_t v87 = 0;
  }
  uint64_t v178 = v42 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v190)(v77, v87, 1, v41);
  uint64_t v88 = (uint64_t)&v47[*(int *)(v176 + 48)];
  uint64_t v89 = (uint64_t *)&unk_100321CE0;
  sub_100019730((uint64_t)v80, (uint64_t)v47, (uint64_t *)&unk_100321CE0);
  sub_100019730((uint64_t)v77, v88, (uint64_t *)&unk_100321CE0);
  uint64_t v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v90((uint64_t)v47, 1, v41) == 1)
  {
    sub_100006574((uint64_t)v77, (uint64_t *)&unk_100321CE0);
    sub_100006574((uint64_t)v80, (uint64_t *)&unk_100321CE0);
    if (v90(v88, 1, v41) == 1)
    {
      int v91 = -1;
    }
    else
    {
      uint64_t v89 = &qword_1003229A0;
      int v91 = 0;
    }
    LODWORD(v176) = v91;
  }
  else
  {
    uint64_t v92 = v155;
    sub_100019730((uint64_t)v47, v155, (uint64_t *)&unk_100321CE0);
    if (v90(v88, 1, v41) == 1)
    {
      sub_100006574((uint64_t)v77, (uint64_t *)&unk_100321CE0);
      sub_100006574((uint64_t)v80, (uint64_t *)&unk_100321CE0);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v92, v41);
      LODWORD(v176) = 0;
      uint64_t v89 = &qword_1003229A0;
    }
    else
    {
      uint64_t v93 = v92;
      uint64_t v94 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v149, v88, v41);
      sub_100009458(&qword_100322928, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v176) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v95 = *(void (**)(char *, uint64_t))(v42 + 8);
      v95(v94, v41);
      uint64_t v89 = (uint64_t *)&unk_100321CE0;
      sub_100006574((uint64_t)v77, (uint64_t *)&unk_100321CE0);
      sub_100006574((uint64_t)v80, (uint64_t *)&unk_100321CE0);
      v95((char *)v93, v41);
    }
  }
  uint64_t v96 = v189;
  uint64_t v97 = v175;
  sub_100006574((uint64_t)v47, v89);
  id result = [self currentInfo];
  uint64_t v99 = (uint64_t)v171;
  if (result)
  {
    uint64_t v100 = result;
    id v101 = [result buildVersion];

    uint64_t v102 = (uint64_t)v157;
    uint64_t v103 = v187;
    if (v101)
    {
      v175 = (uint64_t *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v105 = v104;
    }
    else
    {
      v175 = 0;
      uint64_t v105 = 0;
    }
    sub_100041DC4(v103, v177, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_100019730(v191, (uint64_t)v97, (uint64_t *)&unk_100322990);
    if (v184(v97, 1, v96) == 1)
    {
      sub_100006574((uint64_t)v97, (uint64_t *)&unk_100322990);
      uint64_t v106 = 0;
      unint64_t v107 = 0xF000000000000000;
    }
    else
    {
      uint64_t v106 = *v97;
      unint64_t v107 = v97[1];
      sub_100013140(*v97, v107);
      sub_100041E2C((uint64_t)v97, type metadata accessor for RecoveryKeys);
    }
    uint64_t v108 = *(int *)(v180 + 20);
    if (*(unsigned char *)(v192 + v108)) {
      unsigned __int8 v109 = 1;
    }
    else {
      unsigned __int8 v109 = *(unsigned char *)(v103 + *(int *)(v151 + 48));
    }
    char v110 = v176 ^ 1;
    if (v176)
    {
      uint64_t v111 = (uint64_t)v174;
      v190();
      uint64_t v112 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v102, 1, 1, v112);
    }
    else
    {
      sub_100019730(v191, v99, (uint64_t *)&unk_100322990);
      uint64_t v113 = v189;
      if (v184((uint64_t *)v99, 1, v189) == 1)
      {
        sub_100006574(v99, (uint64_t *)&unk_100322990);
        uint64_t v114 = 1;
        uint64_t v103 = v187;
        uint64_t v111 = (uint64_t)v174;
      }
      else
      {
        uint64_t v115 = v99 + *(int *)(v113 + 24);
        uint64_t v116 = v99;
        uint64_t v111 = (uint64_t)v174;
        v150(v174, v115, v41);
        sub_100041E2C(v116, type metadata accessor for RecoveryKeys);
        uint64_t v114 = 0;
        uint64_t v103 = v187;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v190)(v111, v114, 1, v41);
      Date.init()();
      uint64_t v117 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v102, 0, 1, v117);
    }
    swift_bridgeObjectRetain();
    sub_1000A83E8(v177, 0, 0, 0, 1, v106, v107, v109, v186, v111, (uint64_t)v175, v105, v102, v110 & 1);
    uint64_t v118 = v103 + *(int *)(v185 + 20);
    sub_100041DC4(v118, v179, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v119 = v156;
    sub_100019730(v191, v156, (uint64_t *)&unk_100322990);
    if (v184((uint64_t *)v119, 1, v189) == 1)
    {
      sub_100006574(v119, (uint64_t *)&unk_100322990);
      uint64_t v120 = 0;
      unint64_t v121 = 0xF000000000000000;
    }
    else
    {
      uint64_t v120 = *(void *)(v119 + 16);
      unint64_t v121 = *(void *)(v119 + 24);
      sub_100013140(v120, v121);
      sub_100041E2C(v119, type metadata accessor for RecoveryKeys);
    }
    if (*(unsigned char *)(v192 + v108)) {
      unsigned __int8 v122 = 1;
    }
    else {
      unsigned __int8 v122 = *(unsigned char *)(v118 + *(int *)(v153 + 40));
    }
    uint64_t v123 = (uint64_t)v159;
    if (v176)
    {
      uint64_t v124 = 1;
    }
    else
    {
      uint64_t v125 = v152;
      sub_100019730(v191, v152, (uint64_t *)&unk_100322990);
      uint64_t v126 = v189;
      if (v184((uint64_t *)v125, 1, v189) == 1)
      {
        sub_100006574(v125, (uint64_t *)&unk_100322990);
        uint64_t v124 = 1;
      }
      else
      {
        v150(v173, v125 + *(int *)(v126 + 24), v41);
        sub_100041E2C(v125, type metadata accessor for RecoveryKeys);
        uint64_t v124 = 0;
      }
      uint64_t v103 = v187;
    }
    unsigned __int8 v127 = 1;
    uint64_t v128 = (uint64_t)v173;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v190)(v173, v124, 1, v41);
    sub_100288404(v179, 0, 0xF000000000000000, v120, v121, v122, v128, (uint64_t)v175, v188, v105);
    uint64_t v129 = v103 + *(int *)(v185 + 24);
    sub_100041DC4(v129, v123, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v130 = (uint64_t)v158;
    Date.init(timeIntervalSince1970:)();
    uint64_t v131 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v130, 0, 1, v131);
    if ((*(unsigned char *)(v192 + v108) & 1) == 0) {
      unsigned __int8 v127 = *(unsigned char *)(v129 + *(int *)(v154 + 36));
    }
    uint64_t v132 = v181;
    sub_1001B98C0(v123, v130, 0, 0xC000000000000000, v127, 0, 1, v181);
    uint64_t v133 = v182;
    sub_100041DC4(v186, v182, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v134 = v185;
    sub_100041DC4(v188, v133 + *(int *)(v185 + 20), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100041DC4(v132, v133 + *(int *)(v134 + 24), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    uint64_t v135 = v192;
    uint64_t v136 = (void (*)(void))sub_10003A3C4(*(void *)(v192 + *(int *)(v180 + 28)), *(void *)(v192 + *(int *)(v180 + 28) + 8));
    v190 = v136;
    uint64_t v191 = swift_allocObject();
    swift_weakInit();
    uint64_t v137 = v166;
    sub_100041DC4(v135, v166, type metadata accessor for KeyRepairContext);
    uint64_t v138 = v164;
    sub_100041DC4(v187, v164, type metadata accessor for CustodianshipRecords);
    uint64_t v139 = v165;
    sub_100041DC4(v133, v165, type metadata accessor for CustodianshipRecords);
    unint64_t v140 = (*(unsigned __int8 *)(v162 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80);
    uint64_t v141 = *(unsigned __int8 *)(v160 + 80);
    unint64_t v142 = (v163 + v141 + v140) & ~v141;
    unint64_t v143 = (v161 + v141 + v142) & ~v141;
    unint64_t v144 = (v161 + v143 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v145 = (void *)swift_allocObject();
    v145[2] = v191;
    v145[3] = v136;
    uint64_t v146 = v169;
    v145[4] = v167;
    v145[5] = v146;
    sub_10004381C(v137, (uint64_t)v145 + v140, type metadata accessor for KeyRepairContext);
    sub_10004381C(v138, (uint64_t)v145 + v142, type metadata accessor for CustodianshipRecords);
    sub_10004381C(v139, (uint64_t)v145 + v143, type metadata accessor for CustodianshipRecords);
    *(void *)((char *)v145 + v144) = v168;
    uint64_t v147 = v190;
    swift_retain();
    swift_retain();
    uint64_t v148 = v182;
    sub_10003E81C(v182, v170, v192, (uint64_t)sub_100045AE8, (uint64_t)v145);

    swift_release();
    sub_100041E2C(v148, type metadata accessor for CustodianshipRecords);
    sub_100041E2C(v181, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_100041E2C(v188, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100041E2C(v186, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003C1F4(int a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v69 = a7;
  int v79 = a1;
  uint64_t v12 = sub_100009F04(&qword_100321CD8);
  uint64_t v71 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v70 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v73 = *(void *)(v15 - 8);
  uint64_t v74 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v72 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v76, v18);
  uint64_t v77 = (uint64_t *)((char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100007288(v20, (uint64_t)qword_10033E778);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v78 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v65 = v12;
    uint64_t v75 = a6;
    uint64_t v66 = a3;
    uint64_t v67 = a5;
    uint64_t v68 = a4;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    v81[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315650;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_1003223A0;
    unint64_t v27 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v80 = sub_100135190(v26, v27, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 1024;
    LODWORD(v80) = v79 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 18) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v80 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v80 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v28 = 0;
    }
    *uint64_t v25 = v28;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - AutoHeal: CRK exists on OT? %{BOOL}d error:%@", (uint8_t *)v24, 0x1Cu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a5 = v67;
    a4 = v68;
    a3 = v66;
    a6 = v75;
    uint64_t v12 = v65;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v29 = a3 + *(int *)(type metadata accessor for CustodianshipRecords(0) + 20);
  unint64_t v30 = *(void *)(v29 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 32) + 8);
  if (v79)
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    if (v30 >> 60 == 15)
    {
      if (v33)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v35 = qword_1003223A0;
        unint64_t v36 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_100135190(v35, v36, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - AutoHeal: CRK exists on OT, RKC not present in CK. KeyRepair is needed. But, cannot delete keys from Octagon. Aborting KeyRepair.", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v37 = -7027;
    }
    else
    {
      if (v33)
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136315138;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v44 = qword_1003223A0;
        unint64_t v45 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_100135190(v44, v45, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - AutoHeal: CRK exists on OT, RKC present in CK. KeyRepair not needed. Aborting KeyRepair.", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v37 = -7025;
    }
LABEL_40:
    uint64_t v80 = v37;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v63 = (uint64_t)v77;
    *uint64_t v77 = v81[0];
    swift_storeEnumTagMultiPayload();
    a4((void *)v63);
    return sub_100006574(v63, (uint64_t *)&unk_100322980);
  }
  if (v30 >> 60 == 15)
  {
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v75 = a6;
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v41 = qword_1003223A0;
      unint64_t v42 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v80 = sub_100135190(v41, v42, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - AutoHeal: CRK not exists on OT, CRK never existed. Recovery Info Record is missing RKC. Attempting to create CRK on Octagon", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a6 = v75;
    }
    else
    {
    }
    uint64_t v55 = v72;
    uint64_t v56 = v73;
    uint64_t v57 = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, a6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v74);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
    sub_100008EF8(v81, v81[3]);
    uint64_t v58 = type metadata accessor for CustodianRecord();
    sub_1001E1724(a3 + *(int *)(v58 + 20), a4, a5);
    return sub_100008EA8((uint64_t)v81);
  }
  else
  {
    uint64_t v47 = v70;
    uint64_t v46 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, a6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__urlBagProvider, v12);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v12);
    unsigned int v48 = [self canRepairCustodian];
    sub_100008EA8((uint64_t)v81);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    if (!v48)
    {
      if (v51)
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v61 = qword_1003223A0;
        unint64_t v62 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v80 = sub_100135190(v61, v62, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - AutoHeal: CRK not exists on OT, But, Recovery Info Record has an RKC. decoupleCRK is not enabled. Aborting repair.", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v37 = -7026;
      goto LABEL_40;
    }
    if (v51)
    {
      uint64_t v75 = a6;
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      v81[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v53 = qword_1003223A0;
      unint64_t v54 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v80 = sub_100135190(v53, v54, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - AutoHeal: CRK not exists on OT, Recovery Info Record has an RKC. Invoking Preflight and repair.", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return sub_10003CE88(a3, v69, a4, a5);
  }
}

uint64_t sub_10003CE88(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v64 = *v4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  uint64_t v63 = v12;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for RecoveryKeys(0);
  __chkstk_darwin(v60, v16);
  uint64_t v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for CustodianRecord();
  os_log_type_t v23 = (uint64_t *)(a1 + *(int *)(v61 + 40));
  unint64_t v24 = v23[1];
  if (v24 >> 60 == 15
    || (uint64_t v25 = *v23,
        uint64_t v26 = a1 + *(int *)(v19 + 20),
        unint64_t v27 = (uint64_t *)(v26 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 32)),
        unint64_t v28 = v27[1],
        v28 >> 60 == 15))
  {
    type metadata accessor for AACustodianError(0);
    uint64_t v68 = -7019;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v10 = v67[0];
    swift_storeEnumTagMultiPayload();
    v65(v10);
    return sub_100006574((uint64_t)v10, (uint64_t *)&unk_100322980);
  }
  else
  {
    uint64_t v30 = *v27;
    sub_1000196B4(v25, v24);
    uint64_t v59 = v30;
    unint64_t v57 = v28;
    sub_1000196B4(v30, v28);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E778);
    sub_100041DC4(a1, (uint64_t)v22, type metadata accessor for CustodianshipRecords);
    os_log_type_t v32 = Logger.logObject.getter();
    int v33 = static os_log_type_t.debug.getter();
    BOOL v34 = os_log_type_enabled(v32, (os_log_type_t)v33);
    uint64_t v58 = v15;
    if (v34)
    {
      int v54 = v33;
      os_log_t v55 = v32;
      uint64_t v56 = v25;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      v67[0] = v53;
      *(_DWORD *)uint64_t v35 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v37 = qword_1003223A0;
      unint64_t v36 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v68 = sub_100135190(v37, v36, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v38 = sub_1002682DC();
      uint64_t v68 = sub_100135190(v38, v39, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100041E2C((uint64_t)v22, type metadata accessor for CustodianshipRecords);
      os_log_t v40 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v54, "%s - Starting to Preflight Custodian Recovery before repair for %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v25 = v56;
    }
    else
    {
      sub_100041E2C((uint64_t)v22, type metadata accessor for CustodianshipRecords);
    }
    uint64_t v41 = (uint64_t)v18 + *(int *)(v60 + 24);
    sub_1000196B4(v25, v24);
    uint64_t v42 = v25;
    uint64_t v43 = v59;
    unint64_t v44 = v57;
    sub_1000196B4(v59, v57);
    sub_1002686B4(v41);
    *uint64_t v18 = v42;
    v18[1] = v24;
    v18[2] = v43;
    v18[3] = v44;
    uint64_t v46 = v62;
    uint64_t v45 = v63;
    uint64_t v47 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v58, v5 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v62);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    unsigned int v48 = sub_100008EF8(v67, v67[3]);
    uint64_t v49 = a1 + *(int *)(v61 + 20);
    os_log_type_t v50 = (void *)*v48;
    uint64_t v51 = v66;
    swift_retain();
    swift_retain();
    sub_1001E4874(v49, v18, v50, v65, v51, v5, v64);
    sub_1000196A0(v43, v44);
    sub_1000196A0(v42, v24);
    sub_100041E2C((uint64_t)v18, type metadata accessor for RecoveryKeys);
    return sub_100008EA8((uint64_t)v67);
  }
}

uint64_t sub_10003D4D8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = a8;
  uint64_t v55 = a6;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v12 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v51 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v51 + 64);
  uint64_t v15 = __chkstk_darwin(v12 - 8, v14);
  uint64_t v52 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = sub_100009F04(&qword_100322CF0);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  os_log_type_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = Strong;
    if (a3)
    {
      uint64_t v50 = a7;
      id v26 = a3;
      if (a1) {
        unint64_t v27 = (void *)_convertErrorToNSError(_:)();
      }
      else {
        unint64_t v27 = 0;
      }
      [a3 updateTaskResultWithError:v27];

      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v25 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter, v19);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      [v58[0] sendEvent:a3];
      swift_release();

      swift_unknownObjectRelease();
      a7 = v50;
      if (!a1) {
        goto LABEL_17;
      }
LABEL_7:
      swift_errorRetain();
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100007288(v28, (uint64_t)qword_10033E778);
      swift_errorRetain();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        os_log_type_t v32 = (void *)swift_slowAlloc();
        v58[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315394;
        if (qword_100320B68 != -1) {
          swift_once();
        }
        uint64_t v33 = qword_1003223A0;
        unint64_t v34 = *(void *)algn_1003223A8;
        swift_bridgeObjectRetain();
        uint64_t v59 = sub_100135190(v33, v34, (uint64_t *)v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2112;
        uint64_t v35 = _convertErrorToNSError(_:)();
        uint64_t v59 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v32 = v35;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - error updating record: %@", (uint8_t *)v31, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      swift_errorRetain();
      v56(a1);
      swift_errorRelease();
      return swift_errorRelease();
    }
    swift_release();
  }
  if (a1) {
    goto LABEL_7;
  }
LABEL_17:
  char v37 = *(unsigned char *)(v55 + *(int *)(type metadata accessor for KeyRepairContext(0) + 20));
  sub_100041DC4(a7, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
  if (v37)
  {
    char v38 = v18[*(int *)(type metadata accessor for CustodianRecord() + 48)];
    sub_100041E2C((uint64_t)v18, type metadata accessor for CustodianshipRecords);
    if ((v38 & 1) == 0)
    {
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        uint64_t v39 = v52;
        sub_100041DC4(v53, v52, type metadata accessor for CustodianshipRecords);
        unint64_t v40 = (*(unsigned __int8 *)(v51 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
        uint64_t v41 = (void *)swift_allocObject();
        uint64_t v42 = v57;
        v41[2] = v56;
        v41[3] = v42;
        v41[4] = v54;
        sub_10004381C(v39, (uint64_t)v41 + v40, type metadata accessor for CustodianshipRecords);
        swift_retain();
        swift_retain();
        sub_10003DD4C(a7, (uint64_t)sub_100046584, (uint64_t)v41);
        swift_release();
        return swift_release();
      }
      return result;
    }
  }
  else
  {
    sub_100041E2C((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  sub_100007288(v43, (uint64_t)qword_10033E778);
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    v58[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315138;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v47 = qword_1003223A0;
    unint64_t v48 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v59 = sub_100135190(v47, v48, (uint64_t *)v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - skipping old custodian record cleanup and sharing of new record...", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return ((uint64_t (*)(void))v56)(0);
}

uint64_t sub_10003DC60(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    a2(a1);
    return swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v10 = a5 + *(int *)(type metadata accessor for CustodianshipRecords(0) + 20);
      uint64_t v11 = type metadata accessor for CustodianRecord();
      sub_100039220(v10, *(void *)(a5 + *(int *)(v11 + 24)), *(void *)(a5 + *(int *)(v11 + 24) + 8), a2, a3);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10003DD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v83 = a2;
  uint64_t v84 = a3;
  uint64_t v91 = a1;
  uint64_t v75 = *v3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v86 = v4;
  uint64_t v87 = v5;
  __chkstk_darwin(v4, v6);
  uint64_t v85 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v8);
  uint64_t v78 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v77 = (uint64_t)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v74 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v16 - 8, v17);
  uint64_t v72 = (uint64_t)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100009F04(&qword_100324680);
  uint64_t v93 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v19);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = (void (*)(void))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v22 = *((void *)v89 - 1);
  __chkstk_darwin(v89, v23);
  uint64_t v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v26, v27);
  uint64_t v82 = type metadata accessor for DispatchQoS();
  uint64_t v80 = *(void *)(v82 - 8);
  __chkstk_darwin(v82, v28);
  os_log_type_t v30 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v70 = dispatch_group_create();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v73 = sub_1000093D0();
  uint64_t v76 = v30;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100009458((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void (*)(void)))(v22 + 104))(v25, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v89);
  uint64_t v31 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_group_t v32 = v70;
  dispatch_group_enter(v70);
  uint64_t v33 = v93;
  uint64_t v89 = *(void (**)(void))(v93 + 16);
  v90 += OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage;
  uint64_t v34 = v71;
  v89(v21);
  Dependency.wrappedValue.getter();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v33 + 8);
  uint64_t v93 = v33 + 8;
  uint64_t v88 = v35;
  uint64_t v36 = v34;
  v35(v21, v34);
  uint64_t v37 = v91;
  uint64_t v38 = v72;
  sub_100041DC4(v91, v72, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v39 = (void *)swift_allocObject();
  uint64_t v40 = v92;
  v39[2] = v31;
  v39[3] = v40;
  uint64_t v41 = v75;
  v39[4] = v32;
  void v39[5] = v41;
  id v42 = v31;
  swift_retain();
  uint64_t v43 = v32;
  sub_1001D2130(v38, (uint64_t)sub_100046638, (uint64_t)v39);
  swift_release();
  sub_100041E2C(v38, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  sub_100008EA8((uint64_t)aBlock);
  dispatch_group_enter(v43);
  uint64_t v44 = v36;
  ((void (*)(char *, uint64_t, uint64_t))v89)(v21, v90, v36);
  Dependency.wrappedValue.getter();
  v88(v21, v36);
  uint64_t v72 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v45 = v74;
  sub_100041DC4(v37 + *(int *)(v72 + 24), v74, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  uint64_t v46 = (void *)swift_allocObject();
  uint64_t v47 = v92;
  v46[2] = v42;
  v46[3] = v47;
  v46[4] = v43;
  v46[5] = v41;
  uint64_t v48 = v41;
  id v49 = v42;
  swift_retain();
  uint64_t v50 = v43;
  sub_1001D2418(v45, (uint64_t)sub_100046694, (uint64_t)v46);
  swift_release();
  sub_100041E2C(v45, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  sub_100008EA8((uint64_t)aBlock);
  dispatch_group_enter(v50);
  ((void (*)(char *, uint64_t, uint64_t))v89)(v21, v90, v44);
  Dependency.wrappedValue.getter();
  v88(v21, v44);
  uint64_t v51 = v77;
  sub_100041DC4(v91 + *(int *)(v72 + 20), v77, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v52 = (void *)swift_allocObject();
  v52[2] = v49;
  v52[3] = v47;
  uint64_t v53 = v47;
  unsigned char v52[4] = v50;
  v52[5] = v48;
  uint64_t v54 = v48;
  id v55 = v49;
  uint64_t v56 = v53;
  swift_retain();
  uint64_t v57 = v50;
  sub_1001D2700(v51, (uint64_t)sub_100046738, (uint64_t)v52);
  swift_release();
  sub_100041E2C(v51, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100008EA8((uint64_t)aBlock);
  uint64_t v58 = v79;
  uint64_t v59 = v78;
  uint64_t v60 = v81;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v81);
  uint64_t v61 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  uint64_t v62 = (void *)swift_allocObject();
  long long v62[2] = v55;
  v62[3] = v56;
  uint64_t v63 = v84;
  v62[4] = v83;
  v62[5] = v63;
  void v62[6] = v54;
  aBlock[4] = sub_1000467D8;
  aBlock[5] = v62;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F5D10;
  uint64_t v64 = _Block_copy(aBlock);
  id v65 = v55;
  swift_retain();
  swift_retain();
  uint64_t v66 = v76;
  static DispatchQoS.unspecified.getter();
  uint64_t v94 = _swiftEmptyArrayStorage;
  sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  uint64_t v68 = v85;
  uint64_t v67 = v86;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v67);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v66, v82);
  swift_release();
  return swift_release();
}

uint64_t sub_10003E81C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v35 = a3;
  uint64_t v37 = a2;
  uint64_t v33 = a1;
  uint64_t v40 = *v5;
  uint64_t v8 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v36 + 64);
  __chkstk_darwin(v8 - 8, v10);
  uint64_t v11 = type metadata accessor for KeyRepairContext(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8, v14);
  uint64_t v15 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04(&qword_100321FF8);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v16);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t v34 = sub_100008EF8(v41, v41[3]);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  sub_100041DC4(v35, (uint64_t)v15, type metadata accessor for KeyRepairContext);
  sub_100041DC4(a1, (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
  unint64_t v22 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v23 = (v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v36 + 80) + v24 + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v37;
  *(void *)(v26 + 16) = v37;
  sub_10004381C((uint64_t)v15, v26 + v22, type metadata accessor for KeyRepairContext);
  *(void *)(v26 + v23) = v21;
  uint64_t v28 = (void *)(v26 + v24);
  uint64_t v29 = v39;
  void *v28 = v38;
  v28[1] = v29;
  sub_10004381C((uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25, type metadata accessor for CustodianshipRecords);
  *(void *)(v26 + ((v9 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = v40;
  id v30 = v27;
  swift_retain();
  swift_retain();
  sub_10023F408(v33, (uint64_t)sub_100046068, v26);
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v41);
}

uint64_t sub_10003EBD0(uint64_t a1, char *a2, NSObject *a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  os_log_t v54 = a3;
  id v55 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v56 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v21, v22);
  unint64_t v24 = (uint64_t *)((char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v24, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v25 = *v24;
    uint64_t v26 = a7 + *(int *)(type metadata accessor for CustodianRecord() + 20);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v27(v16, v26, v9);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100007288(v28, (uint64_t)qword_10033E778);
    uint64_t v29 = v56;
    v27(v56, (uint64_t)v16, v9);
    swift_errorRetain();
    swift_errorRetain();
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      os_log_t v54 = v30;
      id v55 = v16;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      v59[0] = v53;
      *(_DWORD *)uint64_t v32 = 136315650;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_1003223A0;
      unint64_t v33 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_100135190(v34, v33, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v35 = v56;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v60 = sub_100135190(v36, v37, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = v9;
      v38(v35, v9);
      *(_WORD *)(v32 + 22) = 2112;
      uint64_t v40 = _convertErrorToNSError(_:)();
      uint64_t v60 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v52 = v40;
      swift_errorRelease();
      swift_errorRelease();
      os_log_t v41 = v54;
      _os_log_impl((void *)&_mh_execute_header, v54, v31, "%s - failed to save custodianship records %s: %@", (uint8_t *)v32, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v16 = v55;
    }
    else
    {
      uint64_t v38 = *(void (**)(char *, uint64_t))(v10 + 8);
      uint64_t v39 = v9;
      v38(v29, v9);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    v57(v25);
    swift_errorRelease();
    swift_errorRelease();
    return ((uint64_t (*)(char *, uint64_t))v38)(v16, v39);
  }
  else
  {
    sub_10004381C((uint64_t)v24, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    id v42 = [objc_allocWithZone((Class)AKCustodianContext) init];
    id v43 = [v55 aa_altDSID];
    [v42 setAltDSID:v43];

    uint64_t v44 = type metadata accessor for CustodianRecord();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    [v42 setCustodianUUID:isa];

    Class v46 = 0;
    uint64_t v47 = &v20[*(int *)(v44 + 40)];
    unint64_t v48 = *((void *)v47 + 1);
    if (v48 >> 60 != 15)
    {
      uint64_t v49 = *(void *)v47;
      sub_100013140(*(void *)v47, *((void *)v47 + 1));
      Class v46 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000196A0(v49, v48);
    }
    [v42 setWrappingKeyRKC:v46];

    [v42 setCustodianSyncAction:*((unsigned __int8 *)&v54->isa + *(int *)(type metadata accessor for KeyRepairContext(0) + 24))];
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10003F290((uint64_t)v42, v57, v58);
      swift_release();
    }

    return sub_100041E2C((uint64_t)v20, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_10003F290(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = sub_100009F04(&qword_1003229A8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v22[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([self shouldSkipIdMSKeyUpdate])
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v17 = qword_1003223A0;
      unint64_t v18 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_100135190(v17, v18, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - 🚨 TCS IdMS Endpoint Testing: SkipIdMSKeyUpdate. Custodian recovery key update skipped.", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return a2(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__idmsRequestController, v8);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_100008EF8(v22, v22[3]);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = a2;
    void v20[3] = a3;
    v20[4] = v7;
    swift_retain();
    sub_10004DEDC(a1, (uint64_t)sub_1000461CC, (uint64_t)v20);
    swift_release();
    return sub_100008EA8((uint64_t)v22);
  }
}

uint64_t sub_10003F5E0(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v10 = qword_1003223A0;
      unint64_t v9 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      sub_100135190(v10, v9, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2112;
      uint64_t v18 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v18;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - error updating recovery key: %@", (uint8_t *)v7, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E778);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_1003223A0;
      unint64_t v16 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      sub_100135190(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - custodian recovery key update complete!", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

void sub_10003F9F8(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  Class v46 = a6;
  uint64_t v49 = a3;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100009F04(&qword_1003229D0);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (uint64_t *)((char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v23, &qword_1003229D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v43 = a4;
    uint64_t v44 = v16;
    uint64_t v45 = a2;
    uint64_t v24 = *v23;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v25 = a9;
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E778);
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v41 = a9;
      uint64_t v42 = v12;
      uint64_t v29 = swift_slowAlloc();
      id v30 = (void *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      aBlock[0] = v40;
      *(_DWORD *)uint64_t v29 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_1003223A0;
      unint64_t v31 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v52 = (void *)sub_100135190(v32, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2112;
      uint64_t v33 = _convertErrorToNSError(_:)();
      uint64_t v52 = (void *)v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v30 = v33;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, v46, (uint8_t *)v29, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v12 = v42;
      uint64_t v34 = v43;
      uint64_t v25 = v41;
    }
    else
    {
      swift_errorRelease();

      uint64_t v34 = v43;
    }
    uint64_t v35 = (void *)swift_allocObject();
    uint64_t v36 = v48;
    v35[2] = v49;
    v35[3] = v24;
    v35[4] = v34;
    aBlock[4] = v36;
    aBlock[5] = (uint64_t)v35;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100007244;
    aBlock[3] = v25;
    unint64_t v37 = _Block_copy(aBlock);
    swift_errorRetain();
    swift_retain();
    uint64_t v38 = v34;
    static DispatchQoS.unspecified.getter();
    uint64_t v52 = _swiftEmptyArrayStorage;
    sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    uint64_t v39 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v39);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v44);
    swift_release();
  }
  else
  {
    sub_100006574((uint64_t)v23, &qword_1003229D0);
    dispatch_group_leave(a4);
  }
}

void sub_10003FF74(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  sub_10022C0AC(a2, a4, a5, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16) = v11;
  swift_bridgeObjectRelease();
  swift_endAccess();
  dispatch_group_leave(a3);
}

uint64_t sub_100040028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v22[0] = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  aBlock[4] = sub_100046860;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F5D60;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22[1] = _swiftEmptyArrayStorage;
  sub_100009458((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release();
}

void sub_1000402E8(uint64_t a1, void (*a2)(id))
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  if (*(void *)(*(void *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    uint64_t v24 = -4408;
    sub_100009F04((uint64_t *)&unk_10032E130);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v6;
    swift_beginAccess();
    uint64_t v7 = *v4;
    *(void *)(inited + 72) = sub_100009F04((uint64_t *)&unk_100321C80);
    *(void *)(inited + 48) = v7;
    swift_bridgeObjectRetain();
    sub_100220CAC(inited);
    sub_100009458((unint64_t *)&qword_100321140, type metadata accessor for AAError);
    _BridgedStoredNSError.init(_:userInfo:)();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E778);
    id v9 = v25;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      id v25 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_1003223A0;
      unint64_t v14 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      sub_100135190(v15, v14, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2112;
      uint64_t v24 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v24;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - failed to delete all custodianship records from cloud store: %@", (uint8_t *)v12, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v22 = v9;
    a2(v9);
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E778);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v20 = qword_1003223A0;
      unint64_t v21 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      id v25 = (id)sub_100135190(v20, v21, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - custodianship records deleted successfully from cloud store.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    a2(0);
  }
}

uint64_t sub_1000407E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  id v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v33 - v11;
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v36 = *(void *)(a1 + 16);
  if (v36)
  {
    uint64_t v17 = a2;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v18 = v5 + 16;
    uint64_t v40 = a1 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
    uint64_t v43 = *(void *)(v18 + 56);
    uint64_t v44 = v19;
    unint64_t v37 = (void (**)(char *, char *, uint64_t))(v18 + 16);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 32);
    uint64_t v42 = a2 + 56;
    uint64_t v20 = (void (**)(char *, uint64_t))(v18 - 8);
    v33[2] = a1;
    swift_bridgeObjectRetain();
    uint64_t v21 = 0;
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 40);
    v33[1] = (v18 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v35 = v16;
    while (1)
    {
      v44(v16, v40 + v43 * v21, v4);
      id v22 = *v39;
      uint64_t v23 = 1;
      (*v39)(v16, 0, 1, v4);
      if ((*v38)(v16, 1, v4) == 1) {
        break;
      }
      uint64_t v41 = v21;
      uint64_t v34 = v22;
      (*v37)(v12, v16, v4);
      if (*(void *)(v17 + 16))
      {
        sub_100009458((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v25 = -1 << *(unsigned char *)(v17 + 32);
        unint64_t v26 = v24 & ~v25;
        if ((*(void *)(v42 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26))
        {
          uint64_t v27 = ~v25;
          while (1)
          {
            uint64_t v28 = v18;
            v44(v9, *(void *)(v17 + 48) + v26 * v43, v4);
            sub_100009458(&qword_100322928, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
            id v30 = *v20;
            (*v20)(v9, v4);
            if (v29) {
              break;
            }
            unint64_t v26 = (v26 + 1) & v27;
            uint64_t v18 = v28;
            if (((*(void *)(v42 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
              goto LABEL_4;
            }
          }
          v30(v12, v4);
          uint64_t v23 = 0;
          break;
        }
      }
LABEL_4:
      uint64_t v21 = v41 + 1;
      (*v20)(v12, v4);
      uint64_t v16 = v35;
      if (v21 == v36)
      {
        unint64_t v31 = v34;
        goto LABEL_16;
      }
    }
  }
  else
  {
    unint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
LABEL_16:
    uint64_t v23 = 1;
    v31(v16, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100040BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v122 = a6;
  uint64_t v124 = a5;
  uint64_t v120 = a4;
  uint64_t v100 = a3;
  uint64_t v99 = a2;
  uint64_t v102 = a1;
  uint64_t v121 = a14;
  uint64_t v125 = a13;
  uint64_t v126 = a15;
  id v119 = a12;
  uint64_t v105 = type metadata accessor for URL();
  uint64_t v104 = *(void *)(v105 - 8);
  uint64_t v18 = __chkstk_darwin(v105, v17);
  id v101 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  uint64_t v103 = (char *)&v96 - v21;
  uint64_t v98 = sub_100009F04(&qword_100321FF8);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98, v22);
  uint64_t v96 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v24);
  unint64_t v107 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = (void *)sub_100009F04(&qword_100325870);
  uint64_t v113 = *(v123 - 1);
  uint64_t v26 = v113;
  __chkstk_darwin(v123, v27);
  char v29 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = v29;
  id v30 = (void *)swift_allocObject();
  v30[2] = a7;
  uint64_t v30[3] = a8;
  uint64_t v110 = a9;
  v30[4] = a9;
  v30[5] = a10;
  v30[6] = a11;
  v30[7] = a12;
  uint64_t v31 = v121;
  v30[8] = a13;
  v30[9] = v31;
  v30[10] = v126;
  uint64_t v32 = (void *)swift_allocObject();
  uint64_t v33 = v123;
  v32[2] = v124;
  void v32[3] = sub_100041A98;
  uint64_t v115 = v32;
  uint64_t v34 = v122;
  v32[4] = v30;
  v32[5] = v34;
  (*(void (**)(char *, uint64_t, void *))(v26 + 16))(v29, v120 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v33);
  uint64_t v111 = a11;
  id v35 = a11;
  uint64_t v116 = a7;
  swift_retain_n();
  uint64_t v117 = a8;
  swift_retain_n();
  uint64_t v118 = a10;
  swift_bridgeObjectRetain_n();
  id v36 = v119;
  swift_retain_n();
  swift_retain_n();
  id v119 = v35;
  swift_bridgeObjectRetain();
  uint64_t v114 = v30;
  swift_retain();
  swift_retain();
  id v37 = v36;
  uint64_t v38 = v123;
  uint64_t v39 = v112;
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, void *))(v113 + 8))(v39, v38);
  id v40 = [[*(id *)(*sub_100008EF8(&v128, v129) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)&v128);
  if (!v40)
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_100007288(v56, (uint64_t)qword_10033E778);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = v118;
    if (v59)
    {
      id v106 = v37;
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v128 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v62 = qword_1003223A0;
      unint64_t v63 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      id v127 = (id)sub_100135190(v62, v63, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s - not logged in to AppleAccount, unable to repair keys", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v64 = v119;
      id v37 = v106;
    }
    else
    {

      id v64 = v119;
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v72 = -7002;
    goto LABEL_25;
  }
  uint64_t v41 = v120;
  uint64_t v42 = v108;
  uint64_t v43 = v107;
  uint64_t v44 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v107, v120 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController, v109);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  uint64_t v45 = *(void **)(*sub_100008EF8(&v128, v129) + 24);
  id v127 = 0;
  if (([v45 isManateeAvailable:&v127] & 1) == 0)
  {
    id v65 = v127;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_100008EA8((uint64_t)&v128);
    uint64_t v60 = v118;
    id v64 = v119;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100007288(v66, (uint64_t)qword_10033E778);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      id v106 = v37;
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v128 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v69 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v70 = qword_1003223A0;
      unint64_t v71 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      id v127 = (id)sub_100135190(v70, v71, (uint64_t *)&v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s - no manatee available, stopping custodian key repair.", v69, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v64 = v119;
      id v37 = v106;
    }
    else
    {
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v72 = -7024;
LABEL_25:
    id v127 = (id)v72;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v88 = v128;
    uint64_t v89 = v116;
    swift_retain();
    uint64_t v90 = v117;
    swift_retain();
    swift_bridgeObjectRetain();
    id v91 = v37;
    uint64_t v92 = v125;
    swift_retain();
    uint64_t v93 = v60;
    uint64_t v94 = v126;
    swift_retain();
    uint64_t v123 = v64;
    uint64_t v87 = v37;
    sub_100099B1C((uint64_t)v88, v124, v122, v89, v90, v110, v93, v111, v91, v92, v121, v94);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    goto LABEL_26;
  }
  id v46 = v127;
  sub_100008EA8((uint64_t)&v128);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_100007288(v47, (uint64_t)qword_10033E748);
  uint64_t v48 = v102;
  swift_bridgeObjectRetain_n();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.info.getter();
  BOOL v51 = os_log_type_enabled(v49, v50);
  id v106 = v37;
  if (v51)
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v128 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315138;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v53 = Array.description.getter();
    unint64_t v55 = v54;
    swift_bridgeObjectRelease();
    id v127 = (id)sub_100135190(v53, v55, (uint64_t *)&v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Starting Custodian Repair for UUIDs: %s", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v73 = (void *)swift_allocObject();
  v73[2] = v41;
  v73[3] = v48;
  uint64_t v74 = v100;
  v73[4] = v99;
  v73[5] = v74;
  uint64_t v75 = v115;
  v73[6] = sub_100041B18;
  v73[7] = v75;
  uint64_t v76 = v97;
  uint64_t v77 = v96;
  uint64_t v78 = v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v41 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v98);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
  uint64_t v79 = sub_100008EF8(&v128, v129);
  uint64_t v80 = (void *)swift_allocObject();
  v80[2] = v48;
  v80[3] = sub_100041B74;
  v80[4] = v73;
  uint64_t v81 = sub_100008EF8((void *)(*v79 + 16), *(void *)(*v79 + 40));
  type metadata accessor for LocalCache();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v82 = v101;
  sub_10000A280();
  uint64_t v83 = (uint64_t)v103;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v84 = *(void (**)(char *, uint64_t))(v104 + 8);
  uint64_t v85 = v82;
  uint64_t v86 = v105;
  v84(v85, v105);
  sub_100008EF8((void *)(*v81 + 16), *(void *)(*v81 + 40));
  sub_1000B3744(v83, (uint64_t)sub_100041BA0, (uint64_t)v80);
  v84((char *)v83, v86);
  swift_release();
  sub_100008EA8((uint64_t)&v128);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  id v64 = v119;
  uint64_t v87 = v106;
LABEL_26:
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100041A30()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100041A98()
{
  return sub_10009687C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_100041AD0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100041B18(uint64_t a1)
{
  return sub_100096F50(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100041B24()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100041B74(uint64_t a1)
{
  return sub_100035B90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100041B84()
{
  return sub_10004680C((void (*)(void))&_swift_bridgeObjectRelease, 40);
}

void sub_100041BA0(uint64_t a1, char a2)
{
  sub_100035C18(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

void *sub_100041BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v6 = (int *)type metadata accessor for KeyRepairContext(0);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v20 = v3;
    uint64_t v26 = _swiftEmptyArrayStorage;
    sub_100228964(0, v11, 0);
    uint64_t v12 = v26;
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v24 - 8);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v22 = v13 + 16;
    uint64_t v23 = v14;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v21 = *(void *)(v13 + 72);
    do
    {
      v23(v10, v15, v24);
      v10[v6[5]] = 1;
      v10[v6[6]] = 0;
      uint64_t v16 = &v10[v6[7]];
      *(void *)uint64_t v16 = v25;
      *((void *)v16 + 1) = a3;
      uint64_t v26 = v12;
      unint64_t v18 = v12[2];
      unint64_t v17 = v12[3];
      swift_bridgeObjectRetain();
      if (v18 >= v17 >> 1)
      {
        sub_100228964(v17 > 1, v18 + 1, 1);
        uint64_t v12 = v26;
      }
      v12[2] = v18 + 1;
      sub_10004381C((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v18, type metadata accessor for KeyRepairContext);
      v15 += v21;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_100041DC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100041E2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100041E8C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100041EA4()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1000420B8(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecoveryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void ***)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(void (**)(uint64_t))(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100039A44(a1, v7, v1 + v4, v8, v9, v10, v11, v12);
}

uint64_t sub_100042178()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((((((v3 + v12) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8, v2 | 7);
}

uint64_t sub_100042394(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianRecoveryInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1 + v4;
  int v8 = *(unsigned __int8 *)(v1 + v5);
  uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(void (**)(uint64_t))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  return sub_10004285C(a1, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_100042454(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v8 = qword_1003223A0;
      unint64_t v9 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      sub_100135190(v8, v9, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      sub_100135190(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - failed to send CKShare message: %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v16 = qword_1003223A0;
      unint64_t v17 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      sub_100135190(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - CKShare message sent.", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_10004285C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v108 = a7;
  uint64_t v104 = a5;
  uint64_t v105 = a6;
  uint64_t v100 = a4;
  int v107 = a3;
  uint64_t v110 = a2;
  uint64_t v10 = sub_100009F04(&qword_100322958);
  uint64_t v101 = *(void *)(v10 - 8);
  uint64_t v102 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v99 = (char *)v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for ShareMessageContext(0);
  uint64_t v14 = __chkstk_darwin(v103, v13);
  uint64_t v16 = (char *)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)v94 - v18;
  uint64_t v109 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v21 = __chkstk_darwin(v109, v20);
  uint64_t v23 = (char *)v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)v94 - v25;
  uint64_t v27 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v27 - 8, v28);
  id v30 = (char *)v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (void *)((char *)v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v34, &qword_100322948);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v35 = *v34;
    uint64_t v111 = 0;
    unint64_t v112 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v37 = qword_1003223A0;
    unint64_t v36 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v111 = v37;
    unint64_t v112 = v36;
    v38._object = (void *)0x800000010029A8A0;
    v38._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v38);
    type metadata accessor for UUID();
    sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 0x7272652068746977;
    v115._object = (void *)0xEB0000000020726FLL;
    id v40 = (void *)_convertErrorToNSError(_:)();
    id v41 = [v40 description];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;

    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);

    swift_bridgeObjectRelease();
    String.append(_:)(v115);
    swift_bridgeObjectRelease();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E778);
    uint64_t v48 = v111;
    unint64_t v47 = v112;
    swift_bridgeObjectRetain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      BOOL v51 = (uint8_t *)swift_slowAlloc();
      v115._countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)BOOL v51 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_100135190(v48, v47, &v115._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_errorRetain();
    v108(v35);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v98 = v19;
    id v106 = v30;
    sub_10004381C((uint64_t)v34, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    uint64_t v52 = sub_100007288(v96, (uint64_t)qword_10033E778);
    sub_100041DC4(v110, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v97 = a8;
    if (v55)
    {
      v94[1] = v52;
      uint64_t v56 = swift_slowAlloc();
      v94[0] = swift_slowAlloc();
      uint64_t v111 = v94[0];
      *(_DWORD *)uint64_t v56 = 136315650;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v58 = qword_1003223A0;
      unint64_t v57 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      v115._countAndFlagsBits = sub_100135190(v58, v57, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2080;
      type metadata accessor for UUID();
      sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      v115._countAndFlagsBits = sub_100135190(v59, v60, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100041E2C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      *(_WORD *)(v56 + 22) = 1024;
      LODWORD(v115._countAndFlagsBits) = v107 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s - created CKShare for custodianship: %s willFinalize: %{BOOL}d", (uint8_t *)v56, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100041E2C((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    }
    sub_100041DC4(v110, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = (uint64_t)v98;
    uint64_t v95 = v16;
    if (v64)
    {
      uint64_t v66 = swift_slowAlloc();
      uint64_t v111 = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v67 = qword_1003223A0;
      unint64_t v68 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      v115._countAndFlagsBits = sub_100135190(v67, v68, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v66 + 12) = 2080;
      uint64_t v69 = v109;
      type metadata accessor for UUID();
      sub_100009458((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
      v115._countAndFlagsBits = sub_100135190(v70, v71, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100041E2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s - sending new share to custodian %s", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v72 = v69;
      swift_slowDealloc();

      uint64_t v65 = (uint64_t)v98;
    }
    else
    {
      sub_100041E2C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);

      uint64_t v72 = v109;
    }
    uint64_t v73 = v110 + *(int *)(v72 + 20);
    uint64_t v74 = type metadata accessor for UUID();
    uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
    v75(v65, v73, v74);
    uint64_t v76 = v103;
    sub_100041DC4((uint64_t)v106, v65 + *(int *)(v103 + 20), (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    *(unsigned char *)(v65 + *(int *)(v76 + 24)) = v107 & 1;
    uint64_t v77 = v101;
    uint64_t v78 = v99;
    uint64_t v79 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v99, v100 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__messenger, v102);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    uint64_t v110 = *sub_100008EF8(&v111, v113);
    uint64_t v80 = (uint64_t)v95;
    sub_100041DC4(v65, (uint64_t)v95, type metadata accessor for ShareMessageContext);
    type metadata accessor for ShareMessage(0);
    uint64_t v81 = swift_allocObject();
    *(unsigned char *)(v81 + 16) = 2;
    v75(v81 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v80, v74);
    sub_100041DC4(v80 + *(int *)(v76 + 20), v81 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    LOBYTE(v78) = *(unsigned char *)(v80 + *(int *)(v76 + 24));
    swift_retain();
    sub_100041E2C(v80, type metadata accessor for ShareMessageContext);
    *(unsigned char *)(v81 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = (_BYTE)v78;
    id v82 = objc_allocWithZone((Class)AAMessagingDestination);
    swift_bridgeObjectRetain();
    NSString v83 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v84 = [v82 initWithHandle:v83];

    if (v84)
    {
      uint64_t v85 = qword_100320B70;
      id v86 = v84;
      if (v85 != -1) {
        swift_once();
      }
      sub_100007288(v96, (uint64_t)qword_10033E700);
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Destination is valid!", v89, 2u);
        swift_slowDealloc();
      }

      sub_100216CB0(v81, v86);
      sub_100042454(0, v108);
      swift_release();
      swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      sub_100007288(v96, (uint64_t)qword_10033E748);
      uint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unable to generate destination from handle.", v92, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v114 = -7004;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      countAndFlagsBits = (void *)v115._countAndFlagsBits;
      sub_100042454(v115._countAndFlagsBits, v108);
      swift_release();
      swift_release();
    }
    sub_100041E2C(v65, type metadata accessor for ShareMessageContext);
    sub_100041E2C((uint64_t)v106, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    return sub_100008EA8((uint64_t)&v111);
  }
}

uint64_t sub_100043814(uint64_t a1)
{
  return sub_10010F030(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004381C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for KeyRepairContext(uint64_t a1)
{
  return sub_10000698C(a1, qword_100322A30);
}

uint64_t sub_1000438A4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000438DC()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100043A00(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void **)(v1 + 24);
  uint64_t v8 = *(void (**)(uint64_t))(v1 + v5);
  unint64_t v9 = *(void *)(v1 + v5 + 8);

  return sub_1000385D8(a1, v6, v7, v1 + v4, v8, v9);
}

uint64_t sub_100043AB0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100235F38(a1, a2, a3, a4, *(void (**)(NSObject **))(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_100043AF0()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v31 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v29 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v30 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v28 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v32 = v0;
  uint64_t v3 = v0 + ((v31 + 40) & ~v31);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  uint64_t v7 = (int *)type metadata accessor for CustodianRecord();
  v6(v3 + v7[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v3 + v7[10]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v3 + v7[11]), *(void *)(v3 + v7[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v7[16];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v11(v10, 1, v4)) {
    v6(v10, v4);
  }
  uint64_t v12 = v1;
  uint64_t v13 = v3 + *(int *)(v1 + 20);
  v6(v13, v4);
  uint64_t v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v6(v13 + v14[5], v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v13 + v14[7]), *(void *)(v13 + v14[7] + 8));
  uint64_t v15 = (uint64_t *)(v13 + v14[8]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100013198(*v15, v16);
  }
  sub_100013198(*(void *)(v13 + v14[9]), *(void *)(v13 + v14[9] + 8));
  uint64_t v17 = v13 + v14[11];
  if (!v11(v17, 1, v4)) {
    v6(v17, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = v3 + *(int *)(v12 + 24);
  v6(v18, v4);
  uint64_t v19 = (int *)type metadata accessor for CustodianHealthRecord();
  v6(v18 + v19[5], v4);
  uint64_t v20 = v18 + v19[6];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = (uint64_t *)(v18 + v19[7]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100013198(*v22, v23);
  }
  unint64_t v24 = (v29 + ((v31 + 40) & ~v31) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (v24 + v30 + 8) & ~v30;
  unint64_t v26 = (v28 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100013198(*(void *)(v18 + v19[8]), *(void *)(v18 + v19[8] + 8));

  v6(v32 + v25, v4);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v32, ((v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v31 | v30 | 7);
}

void sub_100043F74(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_10003A7A4(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, *(void **)((char *)v1 + v5), (uint64_t)v1 + v7, *(void **)((char *)v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100044098()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v29 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v27 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v2 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v28 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v30 = v0;
  uint64_t v3 = v0 + ((v29 + 16) & ~v29);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  unint64_t v7 = (int *)type metadata accessor for CustodianRecord();
  v6(v3 + v7[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v3 + v7[10]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v3 + v7[11]), *(void *)(v3 + v7[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v7[16];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v11(v10, 1, v4)) {
    v6(v10, v4);
  }
  uint64_t v12 = v1;
  uint64_t v13 = v3 + *(int *)(v1 + 20);
  v6(v13, v4);
  uint64_t v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v6(v13 + v14[5], v4);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v13 + v14[7]), *(void *)(v13 + v14[7] + 8));
  uint64_t v15 = (uint64_t *)(v13 + v14[8]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100013198(*v15, v16);
  }
  sub_100013198(*(void *)(v13 + v14[9]), *(void *)(v13 + v14[9] + 8));
  uint64_t v17 = v13 + v14[11];
  if (!v11(v17, 1, v4)) {
    v6(v17, v4);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = v3 + *(int *)(v12 + 24);
  v6(v18, v4);
  uint64_t v19 = (int *)type metadata accessor for CustodianHealthRecord();
  v6(v18 + v19[5], v4);
  uint64_t v20 = v18 + v19[6];
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  uint64_t v22 = (uint64_t *)(v18 + v19[7]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100013198(*v22, v23);
  }
  unint64_t v24 = (((((v27 + ((v29 + 16) & ~v29) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + v28 + 8) & ~v28;
  sub_100013198(*(void *)(v18 + v19[8]), *(void *)(v18 + v19[8] + 8));
  swift_release();
  swift_release();
  v6(v30 + v24, v4);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v30, ((v26 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v29 | v28 | 7);
}

uint64_t sub_100044510(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v10 = *(void *)(v2 + v8);
  uint64_t v11 = *(void (**)(void *))(v2 + v7);
  uint64_t v12 = *(void *)(v2 + v7 + 8);
  uint64_t v13 = v2 + ((v8 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return sub_10003C1F4(a1, a2, v2 + v6, v11, v12, v10, v13);
}

uint64_t sub_100044640(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v73 = a4;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100322970);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  unint64_t v71 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v72 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100322980);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (void **)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
  {
    type metadata accessor for AACustodianError(0);
    uint64_t v79 = -7025;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100009458((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    *uint64_t v18 = v78[0];
    swift_storeEnumTagMultiPayload();
    a2(v18);
    return sub_100006574((uint64_t)v18, (uint64_t *)&unk_100322980);
  }
  uint64_t v67 = v12;
  uint64_t v68 = v11;
  uint64_t v70 = a2;
  swift_getErrorValue();
  uint64_t v19 = v78[14];
  swift_errorRetain();
  if (qword_100320B48 != -1) {
    swift_once();
  }
  uint64_t v69 = a3;
  int v76 = sub_10003510C(qword_10033E6E0, v19);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100007288(v20, (uint64_t)qword_10033E778);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v75 = v21;
  uint64_t v66 = v7;
  uint64_t v65 = v8;
  uint64_t v74 = v15;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315394;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_1003223A0;
    unint64_t v27 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v79 = sub_100135190(v26, v27, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v79) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - isMissingCRK: %{BOOL}d", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_getErrorValue();
  uint64_t v28 = v78[10];
  if (qword_100320B50 != -1) {
    swift_once();
  }
  int v29 = sub_10003510C(qword_10033E6E8, v28);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    BOOL v64 = v18;
    uint64_t v32 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315394;
    if (qword_100320B68 != -1) {
      swift_once();
    }
    uint64_t v33 = qword_1003223A0;
    unint64_t v34 = *(void *)algn_1003223A8;
    swift_bridgeObjectRetain();
    uint64_t v79 = sub_100135190(v33, v34, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 1024;
    LODWORD(v79) = v29 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - isUntrustedCRK: %{BOOL}d", (uint8_t *)v32, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v18 = v64;
  }
  else
  {
  }
  swift_getErrorValue();
  uint64_t v35 = v78[6];
  if (qword_100320B58 != -1) {
    swift_once();
  }
  if (sub_10003510C(qword_10033E6F0, v35))
  {
    swift_getErrorValue();
    uint64_t v36 = v77;
    if (qword_100320B60 != -1) {
      swift_once();
    }
    BOOL v37 = sub_100035340(qword_10033E6F8, v36);
    Swift::String v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      LODWORD(v64) = v29;
      uint64_t v40 = swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315394;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v42 = qword_1003223A0;
      unint64_t v41 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100135190(v42, v41, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 1024;
      LODWORD(v79) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - isError31WithUnderlyingError9: %{BOOL}d", (uint8_t *)v40, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      int v29 = (int)v64;
    }
    else
    {
    }
    if (((v76 | v29 | v37) & 1) == 0)
    {
LABEL_34:
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        os_log_type_t v50 = (uint8_t *)swift_slowAlloc();
        BOOL v51 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v50 = 138412290;
        swift_errorRetain();
        uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
        v78[0] = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v51 = v52;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Preflight error other than repairable errors: %@", v50, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      *uint64_t v18 = a1;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v70(v18);
      swift_errorRelease();
      return sub_100006574((uint64_t)v18, (uint64_t *)&unk_100322980);
    }
  }
  else
  {
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      LODWORD(v64) = v29;
      Swift::String v45 = (uint8_t *)swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)Swift::String v45 = 136315138;
      if (qword_100320B68 != -1) {
        swift_once();
      }
      uint64_t v46 = qword_1003223A0;
      unint64_t v47 = *(void *)algn_1003223A8;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_100135190(v46, v47, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s - isError31WithUnderlyingError9: false", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      int v29 = (int)v64;
    }
    else
    {
    }
    if (((v76 | v29) & 1) == 0) {
      goto LABEL_34;
    }
  }
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v53, v54))
  {
    BOOL v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v55 = 138412290;
    swift_errorRetain();
    uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
    v78[0] = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v56 = v57;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Recreating decoupled CRK due to preflight error: %@", v55, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v59 = v69;
  uint64_t v60 = v66;
  uint64_t v61 = v65;

  uint64_t v62 = (uint64_t)v72;
  UUID.init()();
  os_log_type_t v63 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v71, v73 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v60);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v60);
  sub_100008EF8(v78, v78[3]);
  sub_1001E1724(v62, v70, v59);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v62, v68);
  return sub_100008EA8((uint64_t)v78);
}

uint64_t sub_10004540C()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v45 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v45 + 48) & ~v45;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v47 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v48 = v4;
  uint64_t v5 = (v2 + v3 + v47) & ~v47;
  uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  swift_release();

  swift_release();
  uint64_t v7 = v0 + v2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + v5;
  v10(v0 + v5, v8);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecord();
  os_log_type_t v49 = v10;
  v10(v0 + v5 + v12[5], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t *)(v0 + v5 + v12[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[11]), *(void *)(v11 + v12[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v11 + v12[16];
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v46(v15, 1, v8)) {
    v10(v15, v8);
  }
  uint64_t v44 = v6;
  uint64_t v16 = v6 + v47;
  uint64_t v17 = v11 + *(int *)(v48 + 20);
  v49(v17, v8);
  uint64_t v18 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v49(v17 + v18[5], v8);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v17 + v18[7]), *(void *)(v17 + v18[7] + 8));
  uint64_t v19 = (uint64_t *)(v17 + v18[8]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100013198(*v19, v20);
  }
  uint64_t v21 = v16 + v5;
  sub_100013198(*(void *)(v17 + v18[9]), *(void *)(v17 + v18[9] + 8));
  uint64_t v22 = v17 + v18[11];
  if (!v46(v22, 1, v8)) {
    v49(v22, v8);
  }
  uint64_t v23 = v21 & ~v47;
  swift_bridgeObjectRelease();
  uint64_t v24 = v11 + *(int *)(v48 + 24);
  v49(v24, v8);
  uint64_t v25 = (int *)type metadata accessor for CustodianHealthRecord();
  v49(v24 + v25[5], v8);
  uint64_t v26 = v24 + v25[6];
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8);
  v42(v26, v27);
  uint64_t v28 = (uint64_t *)(v24 + v25[7]);
  unint64_t v29 = v28[1];
  if (v29 >> 60 != 15) {
    sub_100013198(*v28, v29);
  }
  sub_100013198(*(void *)(v24 + v25[8]), *(void *)(v24 + v25[8] + 8));
  uint64_t v30 = v0 + v23;
  v49(v0 + v23, v8);
  v49(v0 + v23 + v12[5], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v31 = (uint64_t *)(v0 + v23 + v12[10]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 != 15) {
    sub_100013198(*v31, v32);
  }
  sub_100013198(*(void *)(v30 + v12[11]), *(void *)(v30 + v12[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v30 + v12[16];
  if (!v46(v33, 1, v8)) {
    v49(v33, v8);
  }
  uint64_t v43 = v23;
  uint64_t v34 = v30 + *(int *)(v48 + 20);
  v49(v34, v8);
  v49(v34 + v18[5], v8);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v34 + v18[7]), *(void *)(v34 + v18[7] + 8));
  uint64_t v35 = (uint64_t *)(v34 + v18[8]);
  unint64_t v36 = v35[1];
  if (v36 >> 60 != 15) {
    sub_100013198(*v35, v36);
  }
  sub_100013198(*(void *)(v34 + v18[9]), *(void *)(v34 + v18[9] + 8));
  uint64_t v37 = v34 + v18[11];
  if (!v46(v37, 1, v8)) {
    v49(v37, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = v30 + *(int *)(v48 + 24);
  v49(v38, v8);
  v49(v38 + v25[5], v8);
  v42(v38 + v25[6], v27);
  os_log_type_t v39 = (uint64_t *)(v38 + v25[7]);
  unint64_t v40 = v39[1];
  if (v40 >> 60 != 15) {
    sub_100013198(*v39, v40);
  }
  sub_100013198(*(void *)(v38 + v25[8]), *(void *)(v38 + v25[8] + 8));

  return _swift_deallocObject(v0, ((v44 + v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v45 | v47 | 7);
}

uint64_t sub_100045AE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  return sub_10003D4D8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), v1 + v4, v1 + ((v4 + v5 + v7) & ~v7), v1 + ((*(void *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7));
}

uint64_t sub_100045C00()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v29 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v29 + 24) & ~v29;
  unint64_t v3 = (((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v28 = *(unsigned __int8 *)(*(void *)(v30 - 8) + 80);
  uint64_t v26 = *(void *)(*(void *)(v30 - 8) + 64);

  uint64_t v4 = v0 + v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v27 = (v3 + v28 + 16) & ~v28;
  uint64_t v8 = v0 + v27;
  v7(v0 + v27, v5);
  uint64_t v9 = (int *)type metadata accessor for CustodianRecord();
  v7(v0 + v27 + v9[5], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v0 + v27 + v9[10]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100013198(*v10, v11);
  }
  sub_100013198(*(void *)(v8 + v9[11]), *(void *)(v8 + v9[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v8 + v9[16];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v13(v12, 1, v5)) {
    v7(v12, v5);
  }
  uint64_t v14 = v8 + *(int *)(v30 + 20);
  v7(v14, v5);
  uint64_t v15 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v7(v14 + v15[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v14 + v15[7]), *(void *)(v14 + v15[7] + 8));
  uint64_t v16 = (uint64_t *)(v14 + v15[8]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100013198(*v16, v17);
  }
  sub_100013198(*(void *)(v14 + v15[9]), *(void *)(v14 + v15[9] + 8));
  uint64_t v18 = v14 + v15[11];
  if (!v13(v18, 1, v5)) {
    v7(v18, v5);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = v8 + *(int *)(v30 + 24);
  v7(v19, v5);
  unint64_t v20 = (int *)type metadata accessor for CustodianHealthRecord();
  v7(v19 + v20[5], v5);
  uint64_t v21 = v19 + v20[6];
  uint64_t v22 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);
  uint64_t v23 = (uint64_t *)(v19 + v20[7]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100013198(*v23, v24);
  }
  sub_100013198(*(void *)(v19 + v20[8]), *(void *)(v19 + v20[8] + 8));

  return _swift_deallocObject(v0, ((v26 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v29 | v28 | 7);
}

uint64_t sub_100046068(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  uint64_t v8 = *(char **)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + v5);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = v1 + ((v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_10003EBD0(a1, v8, (v1 + v4), v9, v10, v11, v12);
}

uint64_t sub_100046194()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000461CC(uint64_t a1)
{
  return sub_10003F5E0(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000461D8()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v25 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v23 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  uint64_t v26 = v0;
  uint64_t v24 = (v25 + 40) & ~v25;
  uint64_t v2 = v0 + v24;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v24, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v24 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(v0 + v24 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v1 + 24);
  v5(v16, v3);
  unint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  unint64_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));

  return _swift_deallocObject(v26, v24 + v23, v25 | 7);
}

uint64_t sub_100046584(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  uint64_t v4 = (void (*)(uint64_t))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10003DC60(a1, v4, v5, v6, v7);
}

uint64_t sub_1000465FC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100046638(uint64_t a1)
{
  sub_10003F9F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32), *(void *)(v1 + 40), "%s - failed to delete custodian record from cloud store: %@", (uint64_t)&unk_1002F5E38, (uint64_t)sub_100046930, (uint64_t)&unk_1002F5E50);
}

void sub_100046694(uint64_t a1)
{
  sub_10003F9F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32), *(void *)(v1 + 40), "%s - failed to delete health record from cloud store: %@", (uint64_t)&unk_1002F5DE8, (uint64_t)sub_1000468AC, (uint64_t)&unk_1002F5E00);
}

uint64_t sub_1000466F0()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100046738(uint64_t a1)
{
  sub_10003F9F8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32), *(void *)(v1 + 40), "%s - failed to delete recovery info record from cloud store: %@", (uint64_t)&unk_1002F5D98, (uint64_t)sub_100046870, (uint64_t)&unk_1002F5DB0);
}

uint64_t sub_100046790()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000467D8()
{
  return sub_100046BB4(sub_100040028);
}

uint64_t sub_1000467F0()
{
  return sub_10004680C((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10004680C(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

void sub_100046860()
{
  sub_1000402E8(*(void *)(v0 + 16), *(void (**)(id))(v0 + 24));
}

void sub_100046870()
{
  sub_10003FF74(*(void *)(v0 + 16), *(void *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000017, 0x800000010029A910);
}

void sub_1000468AC()
{
  sub_10003FF74(*(void *)(v0 + 16), *(void *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000020, 0x800000010029A930);
}

uint64_t sub_1000468E8()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100046930()
{
  sub_10003FF74(*(void *)(v0 + 16), *(void *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000014, 0x800000010029A960);
}

uint64_t sub_100046968()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100046A90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000366B0(a1, a2, v8, v2 + v6, v9, v10);
}

uint64_t sub_100046B4C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100046B9C()
{
  return sub_100046BB4(sub_1000375A0);
}

uint64_t sub_100046BB4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100046BCC()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100046C14()
{
  sub_100037874(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_100046C20()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100046D6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + v7);
  uint64_t v11 = *(void *)(v1 + v7 + 8);
  uint64_t v12 = *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100036864(a1, v1 + v4, v8, v9, v10, v11, v12);
}

uint64_t sub_100046E30()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100046F44()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100037310(v3, v0 + v2, v4);
}

uint64_t sub_100046FD8()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100047104()
{
  uint64_t v1 = *(void *)(type metadata accessor for KeyRepairContext(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000374C4(v4, v0 + v2, v5, v6);
}

void *sub_1000471A4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100047290(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100047308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000473A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100047458(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000474E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100047588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004759C);
}

uint64_t sub_10004759C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10004766C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047680);
}

uint64_t sub_100047680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

uint64_t sub_100047740()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_100047828(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 128);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_10;
  }
  unint64_t v5 = sub_1001358B8(0x736D657469, 0xE500000000000000);
  if ((v6 & 1) == 0) {
    goto LABEL_10;
  }
  sub_100047DD4(*(void *)(v3 + 56) + 32 * v5, (uint64_t)v41);
  sub_100009F04(&qword_100322B20);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E748);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_15;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    unint64_t v21 = "CFU Data did not contain any items to process or IdMS information";
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E700);
  swift_bridgeObjectRetain_n();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  uint64_t v37 = v8;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    buf = v12;
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_10032DBD0);
    uint64_t v13 = Array.description.getter();
    uint64_t v14 = v9;
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_100135190(v13, v16, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v9 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Embargo delegate service asked to process push with items: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  int v22 = *(unsigned __int8 *)(a1 + 8);
  if (v22 != 2)
  {
    if (v22 == 1)
    {
      uint64_t v23 = *(void *)(v40 + 16);
      if (v23)
      {
        uint64_t v24 = *(void *)(a1 + 40);
        unint64_t v25 = *(void *)(a1 + 48);
        uint64_t v38 = v24;
        swift_bridgeObjectRetain();
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = *(void *)(v40 + 8 * v26++ + 32);
          sub_100008EF8((void *)(v2 + 16), *(void *)(v2 + 40));
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_100047E30(v27, v38, v25, v37, v7);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v23 != v26);
LABEL_26:
        swift_bridgeObjectRelease_n();
        return;
      }
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    sub_100007288(v9, (uint64_t)qword_10033E748);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
    {
LABEL_15:

      return;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    unint64_t v21 = "Unknown command send to Embargo push delegate";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    swift_slowDealloc();
    goto LABEL_15;
  }
  uint64_t v28 = *(void *)(v40 + 16);
  if (v28)
  {
    os_log_type_t v39 = (void *)(v2 + 16);
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    do
    {
      ++v29;
      uint64_t v30 = sub_100008EF8(v39, *(void *)(v2 + 40));
      uint64_t v32 = *(void *)(*v30 + 120);
      uint64_t v31 = *(void *)(*v30 + 128);
      sub_100008EF8((void *)(*v30 + 96), v32);
      uint64_t v33 = AAFollowUpIdentifierCustodianEmbargo;
      uint64_t v34 = v2;
      uint64_t v35 = *(void (**)(uint64_t, void (*)(char, uint64_t), void, uint64_t, uint64_t))(v31 + 24);
      swift_bridgeObjectRetain();
      v35(v33, sub_10004865C, 0, v32, v31);
      uint64_t v2 = v34;
      swift_bridgeObjectRelease();
    }
    while (v28 != v29);
    goto LABEL_26;
  }
LABEL_31:
  swift_bridgeObjectRelease();
}

uint64_t sub_100047D64()
{
  sub_100008EA8(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EmbargoPushServiceDelegate()
{
  return self;
}

uint64_t sub_100047DC4(char a1)
{
  return (6u >> a1) & 1;
}

uint64_t sub_100047DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100047E30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v15 = Dictionary.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_100135190(v15, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(a2, a3, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(a4, a5, &v27);
    uint64_t v6 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Asked to verify CFU item: %s \n with IdMS Info: %s altDISD: %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  id v18 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v19 = [v18 aa_primaryAppleAccount];

  unint64_t v20 = Logger.logObject.getter();
  if (v19)
  {
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      int v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "There is already a primary account on this device, ignoring Notification", v22, 2u);
      swift_slowDealloc();
    }

    sub_100049728(0, a1, a2, a3, a4, a5, 0, 0);
  }
  else
  {
    uint64_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v23, "We don't have an account, Looking for custodian information ", v24, 2u);
      swift_slowDealloc();
    }

    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100049D48(a1, v6, v25, a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
  }
}

uint64_t sub_1000482E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v24 = a7;
      int v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)int v22 = 138412290;
      uint64_t v26 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v26;
      sub_10004A4E4(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ignoring CFU Item as we failed to get CRToken with error: %@", v22, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v24;
      swift_slowDealloc();
    }
    else
    {
      sub_10004A4E4(a1, a2, 1);
    }

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100049728(0, a5, a6, a7, a8, a9, 0, 0);
      sub_10004A4E4(a1, a2, 1);
      return swift_release();
    }
    return sub_10004A4E4(a1, a2, 1);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "We have a CRT stored. Posting CFU... ", v17, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_100048938(a5, a6, a7, a8, a9, a1, a2);
      return swift_release();
    }
  }
  return result;
}

void sub_10004865C(char a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E748);
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Successfully dismissed followups for custodian emabrgo", v4, 2u);
      swift_slowDealloc();
    }
LABEL_15:

    return;
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  unint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to dismiss followups for custodian embargo", v9, 2u);
    swift_slowDealloc();
  }

  if (a2)
  {
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v14 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v12 = v14;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Failed to dismiss CFU with error: %@", v11, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    goto LABEL_15;
  }
}

uint64_t sub_100048938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = &type metadata for String;
  *(void *)&long long v25 = a4;
  *((void *)&v25 + 1) = a5;
  sub_100009F48(&v25, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10022C3A4(v24, 0x44495344746C61, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v15 = v7[16];
  uint64_t v22 = v7[15];
  sub_100008EF8(v7 + 12, v22);
  uint64_t v21 = AAFollowUpIdentifierCustodianEmbargo;
  uint64_t v16 = sub_10024D93C(a1);
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  id v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = v17;
  v18[4] = a2;
  void v18[5] = a3;
  v18[6] = a4;
  v18[7] = a5;
  v18[8] = a6;
  v18[9] = a7;
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(char, uint64_t), void *, uint64_t, uint64_t))(v15 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v21, v16, sub_100049D14, v18, v22, v15);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_100048B0C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v45 = a8;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v18 = Dictionary.description.getter();
      uint64_t v42 = a5;
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      sub_100135190(v18, v20, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a5 = v42;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully posted CFU for Item: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a8 = v45;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      char v29 = 1;
      uint64_t v30 = a3;
      uint64_t v31 = a5;
      uint64_t v32 = a6;
      uint64_t v33 = a7;
      uint64_t v34 = a8;
LABEL_22:
      sub_100049728(v29, v30, v31, v32, v33, v34, a9, a10);
      return swift_release();
    }
  }
  else
  {
    uint64_t v21 = &unk_100320000;
    if (a2)
    {
      swift_errorRetain();
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100007288(v22, (uint64_t)qword_10033E748);
      swift_errorRetain();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        long long v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = (void *)swift_slowAlloc();
        *(_DWORD *)long long v25 = 138412290;
        v47[0] = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v43 = v47[0];
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to post CFU with error: %@", v25, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v21 = (void *)&unk_100320000;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    if (v21[369] != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100007288(v35, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v39 = Dictionary.description.getter();
      uint64_t v44 = a5;
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      sub_100135190(v39, v41, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a5 = v44;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to post CFU item %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      char v29 = 0;
      uint64_t v30 = a3;
      uint64_t v31 = a5;
      uint64_t v32 = a6;
      uint64_t v33 = a7;
      uint64_t v34 = a8;
      a9 = 0;
      a10 = 0;
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t sub_100049104(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, void, uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianRecoverySessionRecord();
  __chkstk_darwin(v10, v11);
  os_log_type_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10004A3BC(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412290;
      uint64_t v24 = _convertErrorToNSError(_:)();
      uint64_t v45 = (void *)v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v24;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to get recovery record with error: %@", v22, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(v18, 0, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10004A424((uint64_t)v17, (uint64_t)v13);
    long long v25 = &v13[*(int *)(v10 + 44)];
    uint64_t v26 = *((void *)v25 + 1);
    if (v26)
    {
      uint64_t v43 = a4;
      uint64_t v27 = *(void *)v25;
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100007288(v28, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      char v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v42 = a5;
        uint64_t v32 = (uint8_t *)v31;
        uint64_t v33 = swift_slowAlloc();
        uint64_t v41 = v27;
        uint64_t v45 = (void *)v33;
        *(_DWORD *)uint64_t v32 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_100135190(a2, a3, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found recovery record for sessionID: %s, posting CFU", v32, 0xCu);
        swift_arrayDestroy();
        uint64_t v27 = v41;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v43(v27, v26, 0);
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      unint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        uint64_t v42 = a5;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_100135190(a2, a3, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Found recovery record for sessionID: %s, but does not contain recovery token, failing...", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      type metadata accessor for AACustodianError(0);
      uint64_t v44 = -7005;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10004A318();
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v39 = v45;
      a4((uint64_t)v45, 0, 1);
    }
    return sub_10004A488((uint64_t)v13);
  }
}

uint64_t sub_100049728(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  id v12 = [objc_allocWithZone((Class)AKCustodianContext) init];
  if (*(void *)(a2 + 16))
  {
    unint64_t v13 = sub_1001358B8(0x6E6F697373657372, 0xEA00000000006449);
    if (v14)
    {
      sub_100047DD4(*(void *)(a2 + 56) + 32 * v13, (uint64_t)v28);
      if (swift_dynamicCast())
      {
        NSString v24 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v12 setRecoverySessionID:v24];
      }
    }
  }
  if (a8)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    [v12 setCustodianRecoveryToken:v15];
  }
  NSString v16 = String._bridgeToObjectiveC()();
  [v12 setTransactionID:v16];

  NSString v17 = String._bridgeToObjectiveC()();
  [v12 setAltDSID:v17];

  [v12 setNotificationAction:a1 & 1];
  if (*(void *)(a2 + 16) && (unint64_t v18 = sub_1001358B8(0x79654B6C72556266, 0xE800000000000000), (v19 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a2 + 56) + 32 * v18, (uint64_t)v28);
    int v20 = swift_dynamicCast();
    if (v20) {
      uint64_t v21 = v26;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20) {
      uint64_t v22 = v27;
    }
    else {
      uint64_t v22 = 0;
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  sub_100008EF8((void *)(v9 + 56), *(void *)(v9 + 80));
  sub_10004F5D8((uint64_t)v12, v21, v22, (uint64_t)sub_100049990, 0);

  return swift_bridgeObjectRelease();
}

void sub_100049990(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E748);
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v3 = 138412290;
      uint64_t v9 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v4 = v9;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Encountered error while sending cfu feedback to IdMS: %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Successfully sent cfu feedback to IdMS", v7, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100049C18()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);
  sub_100008EA8(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustodianRecoveryFollowUpController()
{
  return self;
}

uint64_t sub_100049C84()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100049CBC()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100049D14(char a1, uint64_t a2)
{
  return sub_100048B0C(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

void sub_100049D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSString v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  v16[7] = a8;
  uint64_t v17 = *(void *)(a1 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17
    && (unint64_t v18 = sub_1001358B8(0x6E6F697373657372, 0xEA00000000006449), (v19 & 1) != 0)
    && (sub_100047DD4(*(void *)(a1 + 56) + 32 * v18, (uint64_t)v41), swift_dynamicCast()))
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(v39, v40, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Asked to post CFU for sessionID: %s, fetching session data", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    uint64_t v34 = (void *)swift_allocObject();
    v34[2] = v39;
    v34[3] = v40;
    v34[4] = sub_10004A2E4;
    v34[5] = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10023EAA8(v39, v40, (uint64_t)sub_10004A3B0, (uint64_t)v34);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v38 = a8;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    long long v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v37 = a7;
      uint64_t v36 = a5;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v28 = a3;
      uint64_t v29 = Dictionary.description.getter();
      uint64_t v35 = a4;
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v32 = v29;
      a3 = v28;
      sub_100135190(v32, v31, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      a4 = v35;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to find sessionID on CFU Item: %s", v27, 0xCu);
      a7 = v37;
      swift_arrayDestroy();
      swift_slowDealloc();
      a5 = v36;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = (void *)v41[0];
    sub_1000482E4(v41[0], 0, 1, a3, a4, a5, a6, a7, v38);
    swift_release();
  }
}

uint64_t sub_10004A294()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004A2E4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000482E4(a1, a2, a3 & 1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

unint64_t sub_10004A318()
{
  unint64_t result = qword_100322910;
  if (!qword_100322910)
  {
    type metadata accessor for AACustodianError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322910);
  }
  return result;
}

uint64_t sub_10004A370()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004A3B0(uint64_t a1)
{
  return sub_100049104(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(uint64_t, void, uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10004A3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100322C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianRecoverySessionRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A488(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianRecoverySessionRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004A4E4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10004A4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  os_log_type_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  NSString v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v11);
  NSString v16 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v21;
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = v18;
  aBlock[4] = sub_10004BFD8;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F6148;
  char v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_10000A590((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v22);
  return swift_release();
}

uint64_t sub_10004A870(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Did dismiss previously posted custodian invitation CFUs? %{BOOL}d", v8, 8u);
    swift_slowDealloc();
  }

  return a3(a2);
}

uint64_t sub_10004A9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a1;
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v30 - v13;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  NSString v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v30 = a2;
    char v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = v6;
    uint64_t v34 = v5;
    v35[0] = v20;
    unint64_t v31 = v14;
    *(_DWORD *)char v19 = 136315138;
    sub_100009F04(&qword_100322CE8);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v34 = sub_100135190(v21, v22, v35);
    uint64_t v14 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - Starting scheduled invitation status check for all custodianships.", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v6 = v32;
    swift_slowDealloc();
    a2 = v30;
    swift_slowDealloc();
  }

  sub_100008A94((uint64_t)(v3 + 2), (uint64_t)v35);
  uint64_t v23 = sub_100008EF8(v35, v35[3]);
  uint64_t v24 = swift_allocObject();
  swift_weakInit();
  long long v25 = (void *)swift_allocObject();
  uint64_t v26 = v33;
  v25[2] = v24;
  uint64_t v25[3] = v26;
  v25[4] = a2;
  uint64_t v27 = sub_100008EF8((void *)(*v23 + 16), *(void *)(*v23 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v11, v6);
  sub_100008EF8((void *)(*v27 + 16), *(void *)(*v27 + 40));
  sub_1000B3370((uint64_t)v14, (uint64_t)sub_10004C900, (uint64_t)v25);
  v28(v14, v6);
  swift_release();
  swift_release();
  return sub_100008EA8((uint64_t)v35);
}

void sub_10004AD64(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v67 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E748);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v70 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v42 = String.init<A>(describing:)();
      uint64_t v70 = sub_100135190(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to fetch custodianships - %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a4(a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v62 = v23;
    uint64_t v63 = v21;
    uint64_t v64 = v20;
    uint64_t v65 = v10;
    uint64_t v66 = v9;
    uint64_t v24 = qword_100320B88;
    swift_bridgeObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v61 = sub_100007288(v25, (uint64_t)qword_10033E748);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully fetched Custodianship info.", v28, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v30 = Strong;
      uint64_t v60 = v14;
      uint64_t v61 = (uint64_t)a4;
      unint64_t v31 = dispatch_group_create();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = 0;
      swift_retain();
      uint64_t v33 = sub_10004C948(a1);
      swift_release();
      sub_100007844(a1, 0);
      uint64_t v34 = v33[2];
      uint64_t v59 = v15;
      if (v34)
      {
        uint64_t v58 = a5;
        uint64_t v35 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
        uint64_t v36 = (uint64_t)v33
            + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
        uint64_t v37 = *(void *)(v35 + 72);
        do
        {
          sub_10004B6C8(v36, v31, v30, v32);
          v36 += v37;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        a5 = v58;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1000093D0();
      BOOL v51 = v62;
      uint64_t v50 = v63;
      uint64_t v52 = v64;
      (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, enum case for DispatchQoS.QoSClass.default(_:), v64);
      uint64_t v53 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
      os_log_type_t v54 = (void *)swift_allocObject();
      _OWORD v54[2] = v61;
      v54[3] = a5;
      v54[4] = v32;
      aBlock[4] = (uint64_t)sub_10004CEB8;
      aBlock[5] = (uint64_t)v54;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100007244;
      aBlock[3] = (uint64_t)&unk_1002F6260;
      BOOL v55 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      uint64_t v56 = v67;
      static DispatchQoS.unspecified.getter();
      uint64_t v69 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10000A590((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100009F04(&qword_10032BB00);
      sub_10000A534();
      uint64_t v57 = v66;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_group.notify(qos:flags:queue:execute:)();

      swift_release();
      _Block_release(v55);

      (*(void (**)(char *, uint64_t))(v65 + 8))(v13, v57);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v60);
      swift_release();
      swift_release();
    }
    else
    {
      sub_100007844(a1, 0);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        uint64_t v69 = type metadata accessor for CustodianInvitationStatusChecker();
        sub_100009F04(&qword_100322CE8);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v69 = sub_100135190(v47, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s is nil", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v69 = -7000;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10000A590((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_type_t v49 = (void *)aBlock[0];
      a4(aBlock[0]);
    }
  }
}

uint64_t sub_10004B6C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v57 = a4;
  uint64_t v53 = a3;
  uint64_t v60 = a1;
  uint64_t v6 = sub_100009F04(&qword_100322CE0);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  __chkstk_darwin(v6, v7);
  os_log_type_t v54 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v52, v9);
  uint64_t v50 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v12 = __chkstk_darwin(v51, v11);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v46 - v16;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E748);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "CustodianshipRecord invitation has been pending for more than threshold time limit.", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = v60;
  sub_10004CEC4(v60, (uint64_t)v17);
  sub_10004CEC4(v22, (uint64_t)v14);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(void *)&v59[0] = v47;
    *(_DWORD *)uint64_t v25 = 136315394;
    uint64_t v49 = v4;
    uint64_t v26 = v51;
    type metadata accessor for UUID();
    unint64_t v48 = a2;
    sub_10000A590((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v58[0] = sub_100135190(v27, v28, (uint64_t *)v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D04C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v29 = (uint64_t *)&v14[*(int *)(v26 + 24)];
    uint64_t v30 = *v29;
    unint64_t v31 = v29[1];
    swift_bridgeObjectRetain();
    v58[0] = sub_100135190(v30, v31, (uint64_t *)v59);
    a2 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10004D04C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Notifying User for CustodianshipRecord - %s - %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10004D04C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10004D04C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);

    uint64_t v26 = v51;
  }
  dispatch_group_enter(a2);
  uint64_t v32 = sub_100009F04((uint64_t *)&unk_10032B160);
  uint64_t v33 = (uint64_t)v50;
  uint64_t v34 = &v50[*(int *)(v32 + 48)];
  uint64_t v35 = v60;
  uint64_t v36 = v60 + *(int *)(v26 + 20);
  uint64_t v37 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v33, v36, v37);
  uint64_t v38 = (void *)(v35 + *(int *)(v26 + 24));
  uint64_t v39 = v38[1];
  *(void *)uint64_t v34 = *v38;
  *((void *)v34 + 1) = v39;
  swift_storeEnumTagMultiPayload();
  os_log_type_t v40 = v54;
  uint64_t v42 = v55;
  uint64_t v41 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v53 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager, v56);
  swift_bridgeObjectRetain();
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v41);
  sub_100008EF8(v58, v58[3]);
  sub_1001C1B88((uint64_t)v59);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v57;
  *(void *)(v43 + 24) = a2;
  swift_retain();
  uint64_t v44 = a2;
  sub_10024F5C4(v59, sub_10004CF68, v43);
  swift_release();
  sub_10004CF70((uint64_t)v59);
  sub_10004D04C(v33, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
  return sub_100008EA8((uint64_t)v58);
}

void sub_10004BCBC(uint64_t a1, uint64_t a2, dispatch_group_t group)
{
  if (a1)
  {
    swift_beginAccess();
    *(void *)(a2 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  dispatch_group_leave(group);
}

uint64_t sub_10004BD2C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain();
  a1(v5);
  return swift_errorRelease();
}

uint64_t sub_10004BD98()
{
  sub_100008EA8(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager;
  uint64_t v2 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__accountStore;
  uint64_t v4 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10004BE8C()
{
  return type metadata accessor for CustodianInvitationStatusChecker();
}

uint64_t type metadata accessor for CustodianInvitationStatusChecker()
{
  uint64_t result = qword_100322C40;
  if (!qword_100322C40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004BEE0()
{
  sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10004BFD8()
{
}

__n128 sub_10004BFFC@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(unsigned char *)a1 & 1 | ((unint64_t)(*(unsigned char *)(a1 + 1) & 1) << 8);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_10004C024(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = sub_100009F04(&qword_100322CE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_100325870);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 4:
      return sub_100030A8C();
    case 3:
      return sub_100030A68();
    case 2:
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        uint64_t v18 = result;
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = a4;
        *(void *)(v19 + 24) = a1;
        uint64_t v31 = v19;
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v18 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__accountStore, v12);
        swift_retain_n();
        swift_retain_n();
        Dependency.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
        id v20 = [[*(id *)(*sub_100008EF8(v33, v34) + 16) aa_primaryAppleAccount];
        sub_100008EA8((uint64_t)v33);
        if (v20)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v18 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager, v7);
          Dependency.wrappedValue.getter();
          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
          uint64_t v21 = sub_100008EF8(v33, v34);
          uint64_t v30 = AAFollowUpIdentifierCustodianInvitationReminder;
          uint64_t v22 = swift_allocObject();
          uint64_t v23 = v31;
          *(void *)(v22 + 16) = sub_10004C58C;
          *(void *)(v22 + 24) = v23;
          os_log_type_t v24 = (void *)(*v21 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
          uint64_t v25 = v24[3];
          uint64_t v26 = v24[4];
          sub_100008EF8(v24, v25);
          uint64_t v29 = v18;
          uint64_t v27 = *(void (**)(uint64_t, id, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v26 + 48);
          swift_retain();
          v27(v30, v20, sub_10004C880, v22, v25, v26);
          swift_release();

          sub_100008EA8((uint64_t)v33);
          swift_release();
          swift_release();
          swift_release();
          return swift_release();
        }
        else
        {
          type metadata accessor for AACustodianError(0);
          v33[0] = -7002;
          sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
          sub_10000A590((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
          _BridgedStoredNSError.init(_:userInfo:)();
          unint64_t v28 = v32;
          swift_beginAccess();
          if (swift_weakLoadStrong())
          {
            swift_retain();
            sub_10004A9AC((uint64_t)sub_10004C840, a1);
            swift_release();

            swift_release();
            swift_release();
          }
          else
          {
            swift_release();
          }
          swift_release();
          swift_release();
          return swift_release();
        }
      }
      break;
  }
  return result;
}

uint64_t sub_10004C4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    sub_10004A9AC((uint64_t)sub_10004C840, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10004C54C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C58C(uint64_t a1)
{
  return sub_10004C4C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL sub_10004C594(uint64_t a1)
{
  if (!a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E748);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v8, "Scheduled Custodian Invitation Status check is complete.", v9, 2u);
      swift_slowDealloc();
    }
    goto LABEL_11;
  }
  swift_errorRetain();
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100007288(v1, (uint64_t)qword_10033E748);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v2, v3))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_11:

    return sub_100030AB0();
  }
  uint64_t v4 = (uint8_t *)swift_slowAlloc();
  uint64_t v11 = swift_slowAlloc();
  *(_DWORD *)uint64_t v4 = 136315138;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  uint64_t v5 = String.init<A>(describing:)();
  sub_100135190(v5, v6, &v11);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v2, v3, "Scheduled Custodian Invitation Status check completed with error: %s", v4, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return sub_100030AB0();
}

BOOL sub_10004C840(uint64_t a1)
{
  return sub_10004C594(a1);
}

uint64_t sub_10004C848()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004C880(uint64_t a1, uint64_t a2)
{
  return sub_10004A870(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10004C888()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004C8C0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10004C900(uint64_t a1, char a2)
{
  sub_10004AD64(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10004C910()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10004C948(uint64_t a1)
{
  uint64_t v3 = sub_100009F04(&qword_100324D80);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v60 = (uint64_t)v51 - v9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v59 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v58 = (char *)v51 - v16;
  uint64_t v61 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v18 = __chkstk_darwin(v61, v17);
  uint64_t v57 = (uint64_t)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v23 = (char *)v51 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v27 = (char *)v51 - v26;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v63 = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void *)(a1 + 16);
  if (v29)
  {
    unint64_t v53 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    os_log_type_t v54 = v7;
    uint64_t v30 = a1 + v53;
    uint64_t v62 = *(void *)(v25 + 72);
    uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v51[1] = v1;
    uint64_t v52 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v31 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v61;
    while (1)
    {
      sub_10004CEC4(v30, (uint64_t)v27);
      uint64_t v33 = *(void *)&v27[*(int *)(v32 + 28)];
      sub_10004CEC4((uint64_t)v27, (uint64_t)v23);
      if (v33 != 1)
      {
        sub_10004D04C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        goto LABEL_4;
      }
      uint64_t v34 = (uint64_t *)&v23[*(int *)(v32 + 32)];
      uint64_t v35 = *v34;
      unint64_t v36 = v34[1];
      sub_100013140(*v34, v36);
      id v37 = sub_100122698(v35, v36);
      sub_100013198(v35, v36);
      if (!v37) {
        break;
      }
      id v38 = [v37 creationDate];

      uint64_t v39 = v58;
      if (v38)
      {
        uint64_t v40 = (uint64_t)v54;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v41 = 0;
      }
      else
      {
        uint64_t v41 = 1;
        uint64_t v40 = (uint64_t)v54;
      }
      (*v56)(v40, v41, 1, v10);
      uint64_t v43 = v40;
      uint64_t v42 = v60;
      sub_10004D10C(v43, v60);
      if ((*v55)(v42, 1, v10) == 1) {
        goto LABEL_13;
      }
      (*v52)(v39, v42, v10);
LABEL_15:
      uint64_t v44 = v59;
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v46 = v45;
      uint64_t v47 = *v31;
      (*v31)(v44, v10);
      v47(v39, v10);
      sub_10004D04C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      uint64_t v32 = v61;
      if (v46 > 604800.0)
      {
        sub_10002C8BC((uint64_t)v27, v57);
        unint64_t v48 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002289DC(0, v48[2] + 1, 1);
          unint64_t v48 = v63;
        }
        unint64_t v50 = v48[2];
        unint64_t v49 = v48[3];
        if (v50 >= v49 >> 1)
        {
          sub_1002289DC(v49 > 1, v50 + 1, 1);
          unint64_t v48 = v63;
        }
        v48[2] = v50 + 1;
        sub_10002C8BC(v57, (uint64_t)v48 + v53 + v50 * v62);
        uint64_t v32 = v61;
        goto LABEL_5;
      }
LABEL_4:
      sub_10004D04C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
LABEL_5:
      v30 += v62;
      if (!--v29) {
        return v63;
      }
    }
    uint64_t v42 = v60;
    (*v56)(v60, 1, 1, v10);
    uint64_t v39 = v58;
LABEL_13:
    Date.init()();
    sub_10004D0AC(v42);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_10004CE78()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10004CEB8()
{
  return sub_10004BD2C(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10004CEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CustodianshipInfoRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004CF28()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004CF68(uint64_t a1)
{
  sub_10004BCBC(a1, *(void *)(v1 + 16), *(dispatch_group_t *)(v1 + 24));
}

uint64_t sub_10004CF70(uint64_t a1)
{
  return a1;
}

void *sub_10004CFA8(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:

      goto LABEL_4;
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      uint64_t result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004D04C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10004D0AC(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100324D80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004D10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100324D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10004D17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Setting up custodian with idMS", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  v15[4] = sub_10004FE50;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10004DAE8;
  v15[3] = &unk_1002F63C8;
  uint64_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  [v12 initiateCustodianSetupWithContext:a1 completion:v14];
  _Block_release(v14);
}

void sub_10004D330(void *a1, uint64_t a2, void (*a3)(uint64_t *))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v47 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v47;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error during idMS custodian setup: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    uint64_t v47 = a2;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 1;
    swift_errorRetain();
    a3(&v47);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  if (a1)
  {
    id v44 = a1;
    id v10 = [v44 encryptedPRKC];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      id v15 = [v44 ownerCustodianAltDSID];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_100007288(v20, (uint64_t)qword_10033E748);
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "idMS custodian setup was successful", v23, 2u);
          swift_slowDealloc();
        }

        uint64_t v47 = v12;
        unint64_t v48 = v14;
        uint64_t v49 = v17;
        uint64_t v50 = v19;
        char v51 = 0;
        sub_100013140(v12, v14);
        a3(&v47);
        sub_100013198(v12, v14);
        swift_bridgeObjectRelease();
        sub_100013198(v12, v14);

        return;
      }
      sub_100013198(v12, v14);
    }
    uint64_t v28 = 0xD000000000000018;
    id v29 = [v44 encryptedPRKC];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;

      sub_100013198(v31, v33);
      unint64_t v34 = 0;
      unint64_t v35 = 0xE000000000000000;
    }
    else
    {
      unint64_t v34 = 0xD000000000000019;
      unint64_t v35 = 0x800000010029AB60;
    }
    unint64_t v36 = v35;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease();
    id v37 = [v44 ownerCustodianAltDSID];
    if (v37)
    {

      uint64_t v28 = 0;
      id v38 = (void *)0xE000000000000000;
    }
    else
    {
      id v38 = (void *)0x800000010029AB80;
    }
    v39._countAndFlagsBits = v28;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      double v45 = (void *)sub_100135190(0xD00000000000002ELL, 0x800000010029AB30, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for AACustodianError(0);
    uint64_t v47 = -7009;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v47 = (uint64_t)v45;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 1;
    a3(&v47);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "idMS custodian setup did not return results.", v27, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v47 = (uint64_t)v46;
    unint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 1;
    a3(&v47);
  }
}

void sub_10004DAE8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10004DB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finalizing custodianship with idMS", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  v15[4] = sub_10004FD4C;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10025ED44;
  v15[3] = &unk_1002F6328;
  unint64_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  [v12 finalizeCustodianSetupWithContext:a1 completion:v14];
  _Block_release(v14);
}

void sub_10004DD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Revoking custodianship with idMS", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  v15[4] = sub_10004FD28;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10025ED44;
  v15[3] = &unk_1002F62D8;
  unint64_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  [v12 revokeCustodianWithContext:a1 completion:v14];
  _Block_release(v14);
}

void sub_10004DEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updating recovery key with idMS", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *v4;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  v15[4] = sub_10004FE7C;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10025ED44;
  v15[3] = &unk_1002F6468;
  unint64_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  [v12 updateCustodianRecoveryKeyWithContext:a1 completion:v14];
  _Block_release(v14);
}

void sub_10004E090(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
}

uint64_t sub_10004E0C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10004E16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7 = v6;
  sub_10004FD70();
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = sub_100225978(v14, v16, a3, a4, a1, a2);
  uint64_t v18 = *v7;
  type metadata accessor for CustodianIDMSRequestManager();
  sub_100009F04(&qword_100322CF0);
  Dependency.wrappedValue.getter();
  uint64_t v19 = v23[0];
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = v17;
  void v20[3] = v19;
  v20[4] = a5;
  v20[5] = a6;
  v23[4] = sub_10004FE44;
  v23[5] = v20;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_10004E0C0;
  uint64_t v23[3] = &unk_1002F6378;
  uint64_t v21 = _Block_copy(v23);
  id v22 = v17;
  swift_retain();
  swift_release();
  [v18 fetchCustodianRecoveryCodeConfigurationWithCompletion:v21];
  _Block_release(v21);
}

void sub_10004E30C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  if (a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v32 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v31 = v11 + 4;
      swift_bridgeObjectRetain();
      uint64_t v12 = a3;
      uint64_t v13 = Dictionary.description.getter();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      uint64_t v16 = v13;
      a3 = v12;
      sub_100135190(v16, v15, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Call to IdMS to fetch recovery configuration completed with result: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v12) {
        goto LABEL_15;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!a3)
      {
LABEL_15:
        swift_getObjectType();
        sub_100169BA4((uint64_t)a3);
        a5(a1, 0);
        return;
      }
    }
    [a3 updateTaskResultWithError:0, v31];
    goto LABEL_15;
  }
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      id v32 = (id)_convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v22 = v32;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Call to IdMS to fetch recovery configuration failed with error: %@", v21, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!a3) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_errorRelease();

      if (!a3)
      {
LABEL_25:
        swift_getObjectType();
        sub_100169BA4((uint64_t)a3);
        swift_errorRetain();
        a5(a2, 1);
        swift_errorRelease();
        swift_errorRelease();
        return;
      }
    }
    uint64_t v30 = (void *)_convertErrorToNSError(_:)();
    [a3 updateTaskResultWithError:v30];

    goto LABEL_25;
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E748);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "No Response was obtained from startCustodianRecoveryRequest", v26, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for AACustodianError(0);
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
  _BridgedStoredNSError.init(_:userInfo:)();
  if (a3)
  {
    id v27 = v32;
    uint64_t v28 = (void *)_convertErrorToNSError(_:)();

    [a3 updateTaskResultWithError:v28];
  }
  swift_getObjectType();
  sub_100169BA4((uint64_t)a3);
  id v29 = v32;
  a5((uint64_t)v32, 1);
}

void sub_10004E8DC(char a1, uint64_t a2, void (*a3)())
{
  if (a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100007288(v4, (uint64_t)qword_10033E748);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Call to IdMS for recovery transaction completed with success!", v7, 2u);
      swift_slowDealloc();
    }

    ((void (*)(void))a3)(0);
  }
  else if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100007288(v9, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v15 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v15;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Call to IdMS for recovery transaction completed with error: %@", v12, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    ((void (*)(uint64_t))a3)(a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a3();
  }
}

void sub_10004EC04(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t, uint64_t))
{
  if (a2)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      id v21 = (id)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      swift_bridgeObjectRetain();
      sub_100135190(a1, a2, (uint64_t *)&v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Spake flow verified successfully! obtained new token: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a4(a1, a2, 0);
  }
  else if (a3)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      id v21 = (id)_convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v21;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Call to IdMS to verify Spake and fetch new token failed with error: %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(a3, 0, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E748);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No Response was obtained from verifyRecoveryTransaction", v20, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a4((uint64_t)v21, 0, 1);
  }
}

void sub_10004F0B0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
}

void sub_10004F0E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(void), const char *a6, const char *a7, const char *a8)
{
  if (a1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = a5();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      id v31 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v16 = Dictionary.description.getter();
      unint64_t v18 = v17;
      swift_bridgeObjectRelease();
      sub_100135190(v16, v18, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a6, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a3(a1, 0);
  }
  else if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E748);
    swift_errorRetain();
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412290;
      id v31 = (id)_convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v25 = v31;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, a7, v24, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a3(a2, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, a8, v30, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006F74((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a3((uint64_t)v31, 1);
  }
}

void sub_10004F5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v9 = *v5;
  if (a3) {
    NSString v10 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v10 = 0;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  v13[4] = sub_10004FE58;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10025ED44;
  v13[3] = &unk_1002F6418;
  uint64_t v12 = _Block_copy(v13);
  swift_retain();
  swift_release();
  [v9 sendEmbargoEndNotificationFeedbackWithContext:a1 urlKey:v10 completion:v12];
  _Block_release(v12);
}

uint64_t sub_10004F6F0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)NSString v10 = 138412290;
      uint64_t v13 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v13;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a4, v10, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  return a2(a1);
}

uint64_t sub_10004F8C0(id a1, uint64_t a2, void (*a3)(uint64_t *))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v28 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v9 = v28;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error during IdMS trusted contacts sync call: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    uint64_t v28 = a2;
    long long v29 = 0u;
    long long v30 = 0u;
    unint64_t v31 = 0;
    char v32 = 1;
    swift_errorRetain();
    a3(&v28);
    swift_errorRelease();
    return swift_errorRelease();
  }
  if (!a1)
  {
    unint64_t v17 = sub_100221424((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v18 = 0;
    uint64_t v13 = 0;
    unint64_t v19 = 0xE000000000000000;
    unint64_t v15 = 0xE000000000000000;
LABEL_21:
    unint64_t v27 = sub_100221424((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_22;
  }
  id v11 = [a1 custodianListVersion];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0xE000000000000000;
  }
  id v20 = [a1 beneficiaryListVersion];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v22;
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
  }
  id v23 = [a1 custodianOperationsByID];
  if (v23)
  {
    uint64_t v24 = v23;
    type metadata accessor for UUID();
    type metadata accessor for AKTrustedContactsSyncOperation(0);
    sub_100006F74((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
    unint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v17 = sub_100221424((uint64_t)_swiftEmptyArrayStorage);
  }
  id v25 = [a1 beneficiaryOperationsByID];
  if (!v25) {
    goto LABEL_21;
  }
  os_log_type_t v26 = v25;
  type metadata accessor for UUID();
  type metadata accessor for AKTrustedContactsSyncOperation(0);
  sub_100006F74((unint64_t *)&qword_100322920, (void (*)(uint64_t))&type metadata accessor for UUID);
  unint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_22:
  uint64_t v28 = v13;
  *(void *)&long long v29 = v15;
  *((void *)&v29 + 1) = v18;
  *(void *)&long long v30 = v19;
  *((void *)&v30 + 1) = v17;
  unint64_t v31 = v27;
  char v32 = 0;
  a3(&v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004FCF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FD28(uint64_t a1)
{
  return sub_10004F6F0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error during idMS custodian revoke: %@");
}

uint64_t sub_10004FD4C(uint64_t a1)
{
  return sub_10004F6F0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error during idMS custodian setup: %@");
}

unint64_t sub_10004FD70()
{
  unint64_t result = qword_100329940;
  if (!qword_100329940)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100329940);
  }
  return result;
}

uint64_t type metadata accessor for CustodianIDMSRequestManager()
{
  uint64_t result = qword_100322D50;
  if (!qword_100322D50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10004FDFC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10004FE44(uint64_t a1, uint64_t a2)
{
  sub_10004E30C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

void sub_10004FE50(void *a1, uint64_t a2)
{
  sub_10004D330(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_10004FE58(uint64_t a1)
{
  return sub_10004F6F0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error during idMS notification feedback call: %@");
}

uint64_t sub_10004FE7C(uint64_t a1)
{
  return sub_10004F6F0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "Error during idMS update recovery key: %@");
}

uint64_t destroy for SetupResult(uint64_t a1)
{
  sub_100013198(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for SetupResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for SetupResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100013140(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100013198(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SetupResult(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for SetupResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100013198(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupResult()
{
  return &type metadata for SetupResult;
}

uint64_t *sub_10005008C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_unknownObjectRetain();
    uint64_t v9 = sub_100009F04(&qword_100322CF0);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_100050158(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100009F04(&qword_100322CF0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1000501D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  swift_unknownObjectRetain();
  uint64_t v7 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_100050258(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_1000502F0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100050370(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100050400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050414);
}

uint64_t sub_100050414(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100009F04(&qword_100322CF0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    id v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000504C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000504DC);
}

void *sub_1000504DC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100009F04(&qword_100322CF0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100050588()
{
  sub_100050620();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100050620()
{
  if (!qword_100322D60[0])
  {
    sub_1000112CC((uint64_t *)&unk_100322530);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, qword_100322D60);
    }
  }
}

uint64_t destroy for TrustedContactsSyncResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TrustedContactsSyncResult(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TrustedContactsSyncResult(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TrustedContactsSyncResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrustedContactsSyncResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrustedContactsSyncResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactsSyncResult()
{
  return &type metadata for TrustedContactsSyncResult;
}

void sub_100050910(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100050988(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  sub_100050F20(a1, a2, a3, a4, a5);
  swift_release();

  return swift_release();
}

uint64_t sub_1000509CC(char a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (qword_100320BD0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E820);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v26 = a5;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109378;
    LODWORD(v28[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain();
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&v28[0] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      *(void *)&v28[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v14 = 0;
    }
    *uint64_t v13 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "isWalrusStatusMismatchDetectionEnabled: Fetched new urlBag with success: %{BOOL}d and with error: %@", (uint8_t *)v12, 0x12u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a5 = v26;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [a3 configurationAtKey:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100009F48(&v27, v28);
    *(void *)&long long v27 = 0;
    *((void *)&v27 + 1) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    Swift::String v17 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v17._countAndFlagsBits == 49 && v17._object == (void *)0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v17._countAndFlagsBits == 1702195828 && v17._object == (void *)0xE400000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v17._countAndFlagsBits == 7562617 && v17._object == (void *)0xE300000000000000)
    {
      swift_bridgeObjectRelease();
      char v22 = 1;
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v25 = 67109120;
      LODWORD(v27) = v22 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "isWalrusStatusMismatchDetectionEnabled: %{BOOL}d", v25, 8u);
      swift_slowDealloc();
    }

    a5(v22 & 1);
    return sub_100008EA8((uint64_t)v28);
  }
  else
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "isWalrusStatusMismatchDetectionEnabled: configuration(atKey) nil", v20, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a5)(0);
  }
}

uint64_t sub_100050EBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UrlBagProvider()
{
  return self;
}

void sub_100050F20(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  os_log_type_t v11 = self;
  swift_retain();
  swift_retain();
  if ([v11 disableADPStateHealing])
  {
    if (qword_100320BD0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E820);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_13;
    }
    NSString v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v15 = 0;
    id v16 = "isWalrusStatusMismatchDetectionEnabled: Defaults are in place to prevent ADP State Healing";
    goto LABEL_12;
  }
  id v17 = [self sharedBag];
  if (v17)
  {
    uint64_t v18 = v17;
    os_log_type_t v19 = (void *)swift_allocObject();
    v19[2] = v18;
    v19[3] = a1;
    v19[4] = sub_100051290;
    v19[5] = v10;
    v23[4] = sub_1000512E4;
    v23[5] = v19;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_100050910;
    uint64_t v23[3] = &unk_1002F6698;
    id v20 = _Block_copy(v23);
    id v21 = v18;
    swift_retain();
    swift_retain();
    swift_release();
    [v21 requestNewURLBagIfNecessaryWithCompletion:v20];
    _Block_release(v20);
    swift_release();

    return;
  }
  if (qword_100320BD0 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100007288(v22, (uint64_t)qword_10033E820);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    NSString v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v15 = 0;
    id v16 = "isWalrusStatusMismatchDetectionEnabled: urlBag is nil";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
    swift_slowDealloc();
  }
LABEL_13:

  sub_10017603C(0, a2, a3, a4);

  swift_release();
}

uint64_t sub_100051250()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100051290(uint64_t a1)
{
  return sub_100174120(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10005129C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000512E4(char a1, uint64_t a2)
{
  return sub_1000509CC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void))(v2 + 32));
}

void *sub_1000512F0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = [v1 primaryAuthKitAccount];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  id v4 = [v1 DSIDForAccount:v2];
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = [v4 stringValue];

    uint64_t v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return v5;
}

uint64_t sub_1000513B0()
{
  return sub_1000514B0((SEL *)&selRef_custodianListVersionForAccount_);
}

void *sub_1000513BC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [v1 aa_primaryAppleAccount];
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = [v2 aa_altDSID];
    id v5 = [v1 aa_authKitAccountForAltDSID:v4];

    if (v5)
    {
      id v6 = [*(id *)(v0 + 24) custodianInfosForAccount:v5];
      if (v6)
      {
        uint64_t v7 = v6;
        sub_100009F04((uint64_t *)&unk_10032DBD0);
        uint64_t v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

        return v3;
      }
    }
    return 0;
  }
  return v3;
}

uint64_t sub_1000514A4()
{
  return sub_1000514B0((SEL *)&selRef_beneficiaryListVersionForAccount_);
}

uint64_t sub_1000514B0(SEL *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  id v4 = [v3 aa_primaryAppleAccount];
  if (!v4) {
    return 0;
  }
  id v5 = v4;
  id v6 = [v4 aa_altDSID];
  id v7 = [v3 aa_authKitAccountForAltDSID:v6];

  if (!v7) {
    return 0;
  }
  id v8 = [*(id *)(v1 + 24) *a1 v7];
  if (!v8)
  {

    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

unint64_t sub_100051594()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [v1 aa_primaryAppleAccount];
  unint64_t v3 = (unint64_t)v2;
  if (v2)
  {
    id v4 = [v2 aa_altDSID];
    id v5 = [v1 aa_authKitAccountForAltDSID:v4];

    if (!v5) {
      return 0;
    }
    id v6 = [self sharedInstance];
    unint64_t v3 = (unint64_t)[v6 securityLevelForAccount:v5];

    if ((v3 & 0x8000000000000000) != 0)
    {
      __break(1u);
      return 0;
    }
  }
  return v3;
}

id sub_100051674()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id result = [v1 aa_primaryAppleAccount];
  if (result)
  {
    unint64_t v3 = result;
    id v4 = [result aa_altDSID];
    id v5 = [v1 aa_authKitAccountForAltDSID:v4];

    if (v5)
    {
      id v6 = [self sharedInstance];
      id v7 = [v6 securityLevelForAccount:v5];

      return (id)(v7 == (id)4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_100051750(uint64_t a1)
{
  unint64_t v3 = *(void **)(v1 + 16);
  id v6 = 0;
  if ([v3 saveVerifiedAccount:a1 error:&v6]) {
    return v6;
  }
  id v5 = v6;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void sub_1000517FC(unsigned __int8 a1, unsigned __int8 a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v9 = *(void **)(v4 + 16);
  id v10 = [v9 aa_primaryAppleAccount];
  if (v10)
  {
    os_log_type_t v11 = v10;
    id v12 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
    NSString v13 = String._bridgeToObjectiveC()();
    [v11 setAccountProperty:v12 forKey:v13];

    id v14 = [objc_allocWithZone((Class)NSNumber) initWithInteger:a2];
    NSString v15 = String._bridgeToObjectiveC()();
    [v11 setAccountProperty:v14 forKey:v15];

    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    *(void *)(v16 + 24) = a4;
    aBlock[4] = sub_100051F14;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100050910;
    aBlock[3] = &unk_1002F6790;
    id v17 = _Block_copy(aBlock);
    id v18 = v11;
    swift_retain();
    swift_release();
    [v9 saveAccount:v18 withCompletionHandler:v17];
    _Block_release(v17);
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    void aBlock[6] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    id v18 = (id)aBlock[0];
    a3(aBlock[0]);
  }
}

uint64_t sub_100051A48(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return _swift_task_switch(sub_100051A68, 0, 0);
}

uint64_t sub_100051A68()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v0[17] + 16);
  sub_100221618((uint64_t)_swiftEmptyArrayStorage);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[18] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_100051BC4;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100051DB0;
  v0[13] = &unk_1002F6750;
  v0[14] = v4;
  [v2 discoverPropertiesForAccount:v1 options:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100051BC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_100051D40;
  }
  else {
    uint64_t v2 = sub_100051CD4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100051CD4()
{
  uint64_t v1 = *(void *)(v0 + 120);

  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100051D40()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100051DB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    os_log_type_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_100051E74((uint64_t)&v11, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100051E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100322FD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100051EDC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100051F14(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

void *sub_100051F40()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[7];
  sub_100008EF8(v0 + 2, v1);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 88))(v7, v1, v2);
  id v3 = [*(id *)(*sub_100008EF8(v7, v7[3]) + 16) aa_primaryAppleAccount];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 aa_altDSID];

    if (v5)
    {
      uint64_t v4 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  sub_100008EA8((uint64_t)v7);
  return v4;
}

id sub_100052028()
{
  uint64_t v1 = v0;
  sub_100051F40();
  uint64_t v3 = v2;
  uint64_t v4 = v0 + 2;
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[7];
  sub_100008EF8(v0 + 2, v5);
  id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 96))(v5, v6);
  if (v3)
  {
    swift_bridgeObjectRetain();
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 authKitAccountWithAltDSID:v8];

    swift_bridgeObjectRelease_n();
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v1[5];
    uint64_t v11 = v1[7];
    sub_100008EF8(v4, v10);
    id v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 96))(v10, v11);
    id v12 = [v7 securityLevelForAccount:v9];
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

uint64_t sub_100052164(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v12 - 8, v13);
  NSString v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(a1);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
    os_log_type_t v19 = (void *)swift_allocObject();
    v19[2] = 0;
    v19[3] = 0;
    v19[4] = v17;
    v19[5] = a5;
    v19[6] = a6;
    v19[7] = a7;
    v19[8] = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    sub_100225A54((uint64_t)v15, (uint64_t)&unk_100323180, (uint64_t)v19);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000522E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_100054724;
  return sub_1000523AC(a5, a6, a7, a8);
}

uint64_t sub_1000523AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[31] = a4;
  v5[32] = v4;
  v5[29] = a2;
  v5[30] = a3;
  v5[28] = a1;
  uint64_t v6 = sub_100009F04(&qword_100322CF0);
  v5[33] = v6;
  v5[34] = *(void *)(v6 - 8);
  v5[35] = swift_task_alloc();
  uint64_t v7 = sub_100009F04(&qword_100323190);
  v5[36] = v7;
  v5[37] = *(void *)(v7 - 8);
  v5[38] = swift_task_alloc();
  return _swift_task_switch(sub_1000524D8, 0, 0);
}

uint64_t sub_1000524D8()
{
  uint64_t v52 = v0;
  uint64_t v1 = v0[28];
  type metadata accessor for CustodianDefaults();
  uint64_t inited = swift_initStackObject();
  v0[39] = inited;
  uint64_t v4 = sub_10019E7A8(inited, v3);
  uint64_t v5 = sub_100053394(v1, v4);
  swift_bridgeObjectRelease();
  if (!v5[2])
  {
    swift_bridgeObjectRelease();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_11;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    uint64_t v16 = "CKRs state did not change from previous preflight run";
    goto LABEL_10;
  }
  uint64_t v6 = v0 + 2;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  v0[40] = v7;
  sub_100007288(v7, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134217984;
    uint64_t v11 = v5[2];
    swift_bridgeObjectRelease();
    v0[27] = v11;
    uint64_t v6 = v0 + 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "One or more CKRs state change to bad: %ld", v10, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v17 = (void *)v0[32];
  uint64_t v18 = v17[5];
  uint64_t v19 = v17[7];
  sub_100008EF8(v17 + 2, v18);
  (*(void (**)(uint64_t, uint64_t))(v19 + 88))(v18, v19);
  id v20 = [[*(id *)(*sub_100008EF8(v6, v0[5]) + 16) aa_primaryAppleAccount];
  if (!v20
    || (id v21 = v20, v22 = objc_msgSend(v20, "aa_altDSID"), v21, !v22))
  {
    sub_100008EA8((uint64_t)v6);
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    sub_100007288(v7, (uint64_t)qword_10033E790);
    swift_retain_n();
    char v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)unint64_t v34 = 136315138;
      uint64_t v35 = v17[5];
      uint64_t v36 = v17[7];
      sub_100008EF8(v17 + 2, v35);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 64))(v35, v36);
      v0[26] = sub_100135190(v37, v38, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s Account is nil. Not reporting Post Repair CFU Event.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n();
    }

    goto LABEL_24;
  }
  uint64_t v47 = v17 + 2;
  uint64_t v49 = v17;
  uint64_t v24 = v0[37];
  uint64_t v23 = v0[38];
  uint64_t v25 = v0[36];
  uint64_t v26 = v0[32];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100008EA8((uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v26 + OBJC_IVAR____TtC13appleaccountd37CustodianPreflightHealthCheckSequoiaB__analyticsEventFactory, v25);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [self analyticsEventWithName:v27 altDSID:v28 flowID:v29];
  v0[41] = v30;

  swift_bridgeObjectRelease();
  sub_100008EA8((uint64_t)(v0 + 7));
  if (v30)
  {
    if (v0[31])
    {
      swift_getErrorValue();
      sub_10003550C(v0[18], v0[19]);
      unint64_t v31 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
    }
    else
    {
      unint64_t v31 = 0;
    }
    [v30 updateTaskResultWithError:v31, v47];

    swift_retain();
    sub_100052028();
    swift_release();
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    [v30 setObject:isa forKeyedSubscript:kAAAnalyticsSecurityLevel];

    uint64_t v42 = v49[5];
    uint64_t v43 = v49[7];
    sub_100008EF8(v48, v42);
    (*(void (**)(uint64_t, uint64_t))(v43 + 80))(v42, v43);
    sub_100056834();
    Class v44 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100008EA8((uint64_t)(v0 + 12));
    [v30 setObject:v44 forKeyedSubscript:kAAAnalyticsCdpStatus];

    id v45 = v30;
    sub_100222144(v30);
    uint64_t v50 = (uint64_t (*)(uint64_t))((char *)&dword_10032DC40 + dword_10032DC40);
    double v46 = (void *)swift_task_alloc();
    v0[42] = v46;
    *double v46 = v0;
    v46[1] = sub_100052D64;
    return v50((uint64_t)v30);
  }
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    uint64_t v16 = "Telemetry event creation failed";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
    swift_slowDealloc();
  }
LABEL_11:

LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v39 = (uint64_t (*)(void))v0[1];
  return v39();
}

uint64_t sub_100052D64()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 328);
  swift_task_dealloc();

  return _swift_task_switch(sub_100052E78, 0, 0);
}

uint64_t sub_100052E78()
{
  uint64_t v4 = (uint64_t (*)(id))((char *)&dword_10032DC38 + dword_10032DC38);
  id v1 = *(id *)(v0 + 328);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100052F34;
  return v4(v1);
}

uint64_t sub_100052F34()
{
  id v1 = *(void **)(*(void *)v0 + 328);
  swift_task_dealloc();

  return _swift_task_switch(sub_100053048, 0, 0);
}

uint64_t sub_100053048()
{
  uint64_t v22 = v0;
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  id v1 = *(void **)(v0 + 328);
  sub_100007288(*(void *)(v0 + 320), (uint64_t)qword_10033E790);
  swift_retain_n();
  id v2 = v1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void **)(v0 + 328);
  uint64_t v7 = *(void **)(v0 + 256);
  if (v5)
  {
    uint64_t v8 = swift_slowAlloc();
    id v20 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = v7[5];
    uint64_t v10 = v7[7];
    sub_100008EF8(v7 + 2, v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 64))(v9, v10);
    *(void *)(v0 + 184) = sub_100135190(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v0 + 192) = v6;
    id v13 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v20 = v6;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Reporting Post Repair CFU Event %@", (uint8_t *)v8, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
  os_log_type_t v14 = *(void **)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 272);
  uint64_t v15 = *(void *)(v0 + 280);
  uint64_t v17 = *(void *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, *(void *)(v0 + 256) + OBJC_IVAR____TtC13appleaccountd37CustodianPreflightHealthCheckSequoiaB__analyticsRTCReporter, v17);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  [*(id *)(v0 + 176) sendEvent:v14];
  swift_unknownObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

void *sub_100053394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320BA0 != -1) {
LABEL_46:
  }
    swift_once();
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E790);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  uint64_t v72 = v3;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v74 = v9;
    uint64_t v10 = v3[5];
    uint64_t v11 = v3[7];
    sub_100008EF8(v3 + 2, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(v10, v11);
    sub_100135190(v12, v13, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s listOfCRKStateChangedToBad was called.", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v75 = &_swiftEmptySetSingleton;
  sub_1001468A8(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000546DC);
  sub_1001468A8(a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_100054700);
  uint64_t v14 = a2;
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_100121010(v15);
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = v16;
  uint64_t v3 = v72;
  uint64_t v19 = sub_100144728(v17, v18);
  swift_bridgeObjectRelease();
  int64_t v20 = 0;
  uint64_t v21 = v19 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(v19 + 56);
  uint64_t v69 = v72 + 2;
  int64_t v73 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v25 = v19;
  uint64_t v66 = v19;
  uint64_t v71 = v19 + 56;
  while (1)
  {
    while (v24)
    {
      unint64_t v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v27 = v26 | (v20 << 6);
      if (*(void *)(a1 + 16)) {
        goto LABEL_26;
      }
    }
    int64_t v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v28 >= v73) {
      goto LABEL_40;
    }
    unint64_t v29 = *(void *)(v21 + 8 * v28);
    ++v20;
    if (!v29)
    {
      int64_t v20 = v28 + 1;
      if (v28 + 1 >= v73) {
        goto LABEL_40;
      }
      unint64_t v29 = *(void *)(v21 + 8 * v20);
      if (!v29)
      {
        int64_t v20 = v28 + 2;
        if (v28 + 2 >= v73) {
          goto LABEL_40;
        }
        unint64_t v29 = *(void *)(v21 + 8 * v20);
        if (!v29) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v24 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v20 << 6);
    if (*(void *)(a1 + 16))
    {
LABEL_26:
      unint64_t v31 = (uint64_t *)(*(void *)(v25 + 48) + 16 * v27);
      uint64_t v32 = *v31;
      unint64_t v33 = v31[1];
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_1001358B8(v32, v33);
      if ((v35 & 1) != 0 && *(void *)(v14 + 16))
      {
        int v36 = *(unsigned __int8 *)(*(void *)(a1 + 56) + v34);
        swift_bridgeObjectRetain();
        unint64_t v37 = sub_1001358B8(v32, v33);
        if (v38)
        {
          int v39 = *(unsigned __int8 *)(*(void *)(v14 + 56) + v37);
          swift_bridgeObjectRelease();
          swift_retain();
          if (!v36 || (v39 & 1) != 0)
          {
            int v68 = v39;
            swift_retain();
            swift_bridgeObjectRetain();
            unint64_t v48 = Logger.logObject.getter();
            os_log_type_t type = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v48, type))
            {
              uint64_t v49 = swift_slowAlloc();
              uint64_t v74 = swift_slowAlloc();
              *(_DWORD *)uint64_t v49 = 136315906;
              uint64_t v50 = v3[5];
              uint64_t v51 = v72[7];
              sub_100008EF8(v69, v50);
              uint64_t v52 = v50;
              uint64_t v25 = v66;
              uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 64))(v52, v51);
              *(void *)(v49 + 4) = sub_100135190(v53, v54, &v74);
              swift_release_n();
              uint64_t v3 = v72;
              swift_bridgeObjectRelease();
              *(_WORD *)(v49 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v49 + 14) = sub_100135190(v32, v33, &v74);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v49 + 22) = 1024;
              *(_DWORD *)(v49 + 24) = v36;
              *(_WORD *)(v49 + 28) = 1024;
              *(_DWORD *)(v49 + 30) = v68;
              _os_log_impl((void *)&_mh_execute_header, v48, type, "%s Preflight result for uuid: %s, previous: %{BOOL}d, current: %{BOOL}d", (uint8_t *)v49, 0x22u);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v14 = a2;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            uint64_t v21 = v71;
          }
          else
          {
            swift_bridgeObjectRetain_n();
            swift_retain();
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v40, v41))
            {
              uint64_t v42 = swift_slowAlloc();
              uint64_t v74 = swift_slowAlloc();
              *(_DWORD *)uint64_t v42 = 136315394;
              uint64_t v43 = v3[5];
              uint64_t v44 = v72[7];
              sub_100008EF8(v69, v43);
              uint64_t v45 = v43;
              uint64_t v25 = v66;
              uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 64))(v45, v44);
              *(void *)(v42 + 4) = sub_100135190(v46, v47, &v74);
              swift_release_n();
              uint64_t v3 = v72;
              swift_bridgeObjectRelease();
              *(_WORD *)(v42 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v42 + 14) = sub_100135190(v32, v33, &v74);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s Preflight result for uuid: %s, transitioning from good to bad", (uint8_t *)v42, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v14 = a2;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            uint64_t v21 = v71;
            sub_10027FE90(&v74, v32, v33);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease_n();
          uint64_t v21 = v71;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v30 = v28 + 3;
  if (v30 < v73)
  {
    unint64_t v29 = *(void *)(v21 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        int64_t v20 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_45;
        }
        if (v20 >= v73) {
          goto LABEL_40;
        }
        unint64_t v29 = *(void *)(v21 + 8 * v20);
        ++v30;
        if (v29) {
          goto LABEL_25;
        }
      }
    }
    int64_t v20 = v30;
    goto LABEL_25;
  }
LABEL_40:
  swift_release();
  swift_retain_n();
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315394;
    uint64_t v58 = v3[5];
    uint64_t v59 = v3[7];
    sub_100008EF8(v69, v58);
    uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 64))(v58, v59);
    sub_100135190(v60, v61, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v62 = Set.description.getter();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    sub_100135190(v62, v64, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s listOfCRKStateChangedToBad: Returning %s.", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  return v75;
}

void sub_100053D28(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, const char *a5)
{
  if (qword_100320BA0 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E790);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v13 = a4[5];
    uint64_t v17 = a1;
    uint64_t v14 = a4[7];
    sub_100008EF8(a4 + 2, v13);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(v13, v14);
    sub_100135190(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100135190(v17, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a5, (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
}

uint64_t sub_100053FA0()
{
  sub_100008EA8(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd37CustodianPreflightHealthCheckSequoiaB__analyticsEventFactory;
  uint64_t v2 = sub_100009F04(&qword_100323190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd37CustodianPreflightHealthCheckSequoiaB__analyticsRTCReporter;
  uint64_t v4 = sub_100009F04(&qword_100322CF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100054094()
{
  return type metadata accessor for CustodianPreflightHealthCheckSequoiaB();
}

uint64_t type metadata accessor for CustodianPreflightHealthCheckSequoiaB()
{
  uint64_t result = qword_100323018;
  if (!qword_100323018) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000540E8()
{
  sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1000541DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  sub_100008EF8((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t sub_100054238()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  sub_100008EF8((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(v1, v2);
}

uint64_t sub_10005429C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  sub_100008EF8((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v2);
}

uint64_t sub_100054300()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 56);
  sub_100008EF8((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96))(v1, v2);
}

uint64_t sub_10005435C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)*v4;
  type metadata accessor for CustodianDefaults();
  uint64_t inited = swift_initStackObject();
  uint64_t v12 = sub_10019E7A8(inited, v11);
  uint64_t v13 = v9[5];
  uint64_t v14 = v9[6];
  sub_100008EF8(v9 + 2, v13);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  unint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a4;
  v16[4] = v15;
  v16[5] = v12;
  v16[6] = a1;
  v16[7] = a2;
  uint64_t v17 = *(void *)(v14 + 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v17 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v18(a1, a2, sub_100054574, v16, v13, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_100054498()
{
  uint64_t v1 = (void *)(*(void *)v0 + 16);
  uint64_t v2 = *(void *)(*(void *)v0 + 40);
  uint64_t v3 = *(void *)(*(void *)v0 + 48);
  sub_100008EF8(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 24))(v2) & 1;
}

uint64_t sub_1000544EC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100054524()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100054574(uint64_t a1)
{
  return sub_100052164(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100054584()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000545DC()
{
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100025248;
  os_log_type_t v7 = (void *)swift_task_alloc();
  _OWORD v6[2] = v7;
  *os_log_type_t v7 = v6;
  v7[1] = sub_100054724;
  return sub_1000523AC(v2, v3, v4, v5);
}

void sub_1000546DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100053D28(a1, a2, a3, v3, "%s Past Key: %s Bool: %{BOOL}d");
}

void sub_100054700(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100053D28(a1, a2, a3, v3, "%s Current Key: %s Bool: %{BOOL}d");
}

uint64_t type metadata accessor for DaemonMessageUtil()
{
  return self;
}

uint64_t sub_10005474C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  os_log_type_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100054724;
  return v7();
}

uint64_t type metadata accessor for DaemonTaskDispatcher()
{
  return self;
}

uint64_t sub_100054840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v4 - 8, v5);
  os_log_type_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  v10[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  swift_retain();
  if (a1 == 1)
  {
    sub_100054BDC((uint64_t)v7);
    uint64_t v11 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v12 = v13;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &unk_1003232D8;
  *(void *)(v14 + 24) = v10;
  if (v12 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    void v16[2] = v11;
    v16[3] = v12;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_100054A84()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100054AC4()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100025248;
  uint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100054724;
  return v6();
}

uint64_t sub_100054BDC(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100321C90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100054C3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100054C74(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025248;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_10032DA88 + dword_10032DA88);
  return v6(a1, v4);
}

uint64_t sub_100054D2C(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E700);
}

uint64_t sub_100054D48(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E718);
}

uint64_t sub_100054D68(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E730);
}

uint64_t sub_100054D90(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E748);
}

uint64_t *sub_100054DB4(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100054E18(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E760);
}

uint64_t sub_100054E40(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E778);
}

uint64_t sub_100054E68(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E790);
}

uint64_t sub_100054E8C(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E7A8);
}

uint64_t sub_100054EAC(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E7C0);
}

uint64_t sub_100054ED0(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E7D8);
}

uint64_t sub_100054EFC(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E7F0);
}

uint64_t sub_100054F20(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E808);
}

uint64_t sub_100054F44(uint64_t a1)
{
  return sub_100054F5C(a1, qword_10033E820);
}

uint64_t sub_100054F5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_100054DB4(v3, a2);
  sub_100007288(v3, (uint64_t)a2);
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

unint64_t sub_100054FE4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005720C(*a1);
  *a2 = result;
  return result;
}

void sub_100055010()
{
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_10032B480);
    uint64_t v3 = String.init<A>(describing:)();
    sub_100135190(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Error repairing walrus status - %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

id sub_100055208()
{
  uint64_t v1 = v0;
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E700);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Initiating combined walrus status fetch", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void **)(v1 + 16);
  id v14 = 0;
  id v7 = [v6 combinedWalrusStatus:&v14];
  id v8 = v7;
  if (v14)
  {
    uint64_t v9 = v14;

    swift_willThrow();
    id v8 = 0;
LABEL_14:

    return v8;
  }
  if (v7)
  {
    if (qword_100320BD0 != -1) {
      swift_once();
    }
    sub_100007288(v2, (uint64_t)qword_10033E820);
    uint64_t v9 = v8;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 134218496;
      id v14 = [v9 pcsWalrusStatus];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2048;
      id v14 = [v9 octagonWalrusStatus];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 22) = 2048;
      id v14 = [v9 escrowWalrusStatus];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "CombinedWalrusStatus: pcs:%lu octagon:%lu escrow:%lu", (uint8_t *)v12, 0x20u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v10 = v9;
    }

    id v8 = [v9 mismatchDetected];
    goto LABEL_14;
  }
  return v8;
}

uint64_t sub_100055500(char a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a2)
    {
      swift_errorRetain();
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100007288(v8, (uint64_t)qword_10033E700);
      swift_errorRetain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = a4;
        uint64_t v12 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v11 = 138412290;
        uint64_t v18 = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v12 = v18;
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error fetch walrus recovery key availability: %@", v11, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        a4 = v17;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
      }

      a4(1);
      swift_errorRelease();
    }
    else
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100007288(v13, (uint64_t)qword_10033E700);
      id v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v16 = 67109120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Walrus Recovery Key isAvailable: %{BOOL}d", v16, 8u);
        swift_slowDealloc();
      }

      a4(a1 & 1);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000557F0()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v25 = 0;
  if ([v1 verifyRecoveryKeyObservingSystemsHaveMatchingStateWithError:&v25])
  {
    id v2 = v25;
    return 1;
  }
  id v3 = v25;
  os_log_type_t v4 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  id v25 = v4;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  sub_10000850C(0, (unint64_t *)&qword_100321D00);
  if (swift_dynamicCast())
  {
    if (objc_msgSend(v23, "cdp_isCDPErrorWithCode:", -5317))
    {
      swift_errorRelease();
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100007288(v5, (uint64_t)qword_10033E700);
      id v6 = v23;
      id v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315138;
        id v10 = v6;
        id v11 = [v10 description];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v14 = v13;

        sub_100135190(v12, v14, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "recoveryKeyObservingSystemsHaveMatchingState error: %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_errorRelease();
      return 0;
    }
  }
  swift_errorRelease();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E700);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    return 1;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  id v25 = (id)swift_slowAlloc();
  *(_DWORD *)uint64_t v18 = 136315138;
  swift_errorRetain();
  uint64_t v19 = String.init<A>(describing:)();
  sub_100135190(v19, v20, (uint64_t *)&v25);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_errorRelease();
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "recoveryKeyObservingSystemsHaveMatchingState error: %s", v18, 0xCu);
  uint64_t v21 = 1;
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  swift_errorRelease();
  return v21;
}

uint64_t sub_100055C74()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v37 = 0;
  uint64_t v2 = 1;
  [v1 shouldPerformRepairWithOptionForceFetch:1 error:&v37];
  if (!v37) {
    return v2;
  }
  id v3 = v37;
  swift_willThrow();
  id v37 = v3;
  id v4 = v3;
  sub_100009F04((uint64_t *)&unk_100325850);
  sub_10000850C(0, (unint64_t *)&qword_100321D00);
  if (swift_dynamicCast())
  {
    id v5 = v35;
    unsigned int v6 = [v5 cdp_isCDPErrorWithCode:-5305];

    if (v6)
    {

      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_100007288(v7, (uint64_t)qword_10033E700);
      id v8 = v5;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        id v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)id v11 = 136315138;
        id v12 = v8;
        id v13 = [v12 description];
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        sub_100135190(v14, v16, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing escrow record detected: %s", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_errorRelease();
      return 2;
    }
    if (objc_msgSend(v5, "cdp_isCDPErrorWithCode:", -5322))
    {

      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E700);
      id v18 = v5;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        id v22 = v18;
        id v23 = [v22 description];
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        sub_100135190(v24, v26, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Out of sync escrow record detected: %s", v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      swift_errorRelease();
      return 4;
    }
  }
  swift_errorRelease();
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100007288(v27, (uint64_t)qword_10033E700);
  id v28 = v4;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v2, v29))
  {
    int64_t v30 = (uint8_t *)swift_slowAlloc();
    id v37 = (id)swift_slowAlloc();
    *(_DWORD *)int64_t v30 = 136315138;
    id v31 = v28;
    uint64_t v32 = String.init<A>(describing:)();
    sub_100135190(v32, v33, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, v29, "Could not determine escrow record state: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_willThrow();
  return v2;
}

uint64_t sub_1000562A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v5 = swift_allocError();
    *unsigned int v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10005635C(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v5 = swift_allocError();
    *unsigned int v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(_DWORD **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100056410(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = *(void **)(*(void *)(v6 + 64) + 40);
  *id v8 = a2;
  v8[1] = v7;
  _OWORD v8[2] = a4;
  id v9 = a4;

  return _swift_continuation_resume(v6);
}

uint64_t type metadata accessor for CDPRequestController()
{
  return self;
}

uint64_t sub_1000564C4(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      return result;
    case 2:
      type metadata accessor for EscrowRecordError(0);
      uint64_t v7 = -4500;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000587C4(&qword_100321020, type metadata accessor for EscrowRecordError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v3 = v8;
      type metadata accessor for AAError(0);
      sub_100009F04((uint64_t *)&unk_10032E130);
      goto LABEL_6;
    case 3:
      type metadata accessor for EscrowRecordError(0);
      uint64_t v7 = -4501;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000587C4(&qword_100321020, type metadata accessor for EscrowRecordError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v3 = v8;
      type metadata accessor for AAError(0);
      sub_100009F04((uint64_t *)&unk_10032E130);
      goto LABEL_6;
    case 4:
      type metadata accessor for EscrowRecordError(0);
      uint64_t v7 = -4502;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000587C4(&qword_100321020, type metadata accessor for EscrowRecordError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v3 = v8;
      type metadata accessor for AAError(0);
      sub_100009F04((uint64_t *)&unk_10032E130);
LABEL_6:
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v5;
      uint64_t v6 = _convertErrorToNSError(_:)();
      *(void *)(inited + 72) = sub_10000850C(0, (unint64_t *)&qword_100321D00);
      *(void *)(inited + 48) = v6;
      sub_100220CAC(inited);
      sub_1000587C4((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();

      uint64_t result = v7;
      break;
    default:
      type metadata accessor for AAError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_1000587C4((unint64_t *)&qword_100321140, type metadata accessor for AAError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t result = (uint64_t)v8;
      break;
  }
  return result;
}

id sub_100056834()
{
  id v0 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v1 = [v0 aa_primaryAppleAccount];

  if (v1)
  {
    id v2 = [v1 aa_personID];

    if (v2)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v3 = self;
      NSString v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v1 = [v3 isICDPEnabledForDSID:v4];
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_10005691C()
{
  return _swift_task_switch(sub_100056938, 0, 0);
}

uint64_t sub_100056938()
{
  id v1 = self;
  id v2 = [v1 sharedInstance];
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  id v4 = [v2 contextForPrimaryAccount];
  v0[16] = v4;

  if (v4)
  {
    id v2 = [v1 sharedInstance];
    v0[17] = v2;
    if (v2)
    {
      uint64_t v5 = v2;
      v0[2] = v0;
      v0[7] = v0 + 15;
      v0[3] = sub_100056B9C;
      uint64_t v6 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_1000562A8;
      v0[13] = &unk_1002F69F8;
      v0[14] = v6;
      [v5 octagonStatusForContext:v4 withCompletion:v0 + 10];
      id v2 = v0 + 2;
      return _swift_continuation_await(v2);
    }
LABEL_15:
    __break(1u);
    return _swift_continuation_await(v2);
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E700);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing context, reporting CliqueStatus.error", v10, 2u);
    swift_slowDealloc();
  }

  id v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(-1);
}

uint64_t sub_100056B9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    id v2 = sub_100056D1C;
  }
  else {
    id v2 = sub_100056CAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100056CAC()
{
  uint64_t v1 = *(void **)(v0 + 136);

  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100056D1C()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = (void *)v0[16];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100056D94()
{
  return _swift_task_switch(sub_100056DB0, 0, 0);
}

uint64_t sub_100056DB0()
{
  uint64_t v1 = self;
  id v2 = [v1 sharedInstance];
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = v2;
  id v4 = [v2 contextForPrimaryAccount];
  v0[15] = v4;

  if (v4)
  {
    id v2 = [v1 sharedInstance];
    v0[16] = v2;
    if (v2)
    {
      uint64_t v5 = v2;
      v0[2] = v0;
      v0[7] = v0 + 18;
      v0[3] = sub_100057014;
      uint64_t v6 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_10005635C;
      v0[13] = &unk_1002F69E0;
      v0[14] = v6;
      [v5 sosStatusForContext:v4 withCompletion:v0 + 10];
      id v2 = v0 + 2;
      return _swift_continuation_await(v2);
    }
LABEL_15:
    __break(1u);
    return _swift_continuation_await(v2);
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E700);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing context, reporting SOSCCStatus.error", v10, 2u);
    swift_slowDealloc();
  }

  id v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(0xFFFFFFFFLL);
}

uint64_t sub_100057014()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    id v2 = sub_100057194;
  }
  else {
    id v2 = sub_100057124;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100057124()
{
  uint64_t v1 = *(void **)(v0 + 128);

  uint64_t v2 = *(unsigned int *)(v0 + 144);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_100057194()
{
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = (void *)v0[15];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

unint64_t sub_10005720C(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_10005721C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  swift_retain();
  uint64_t v7 = a3;
  id v8 = (NSString *)String._bridgeToObjectiveC()();
  SEL v9 = NSSelectorFromString(v8);

  if ([*(id *)(a1 + 24) respondsToSelector:v9])
  {
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    id v11 = (void *)swift_allocObject();
    void v11[2] = v10;
    v11[3] = sub_100058938;
    v11[4] = v6;
    v22[4] = sub_100058D44;
    uint64_t v22[5] = v11;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1107296256;
    void v22[2] = sub_100050910;
    uint64_t v22[3] = &unk_1002F6B90;
    id v12 = _Block_copy(v22);
    swift_retain();
    swift_release();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E700);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v16, 2u);
      swift_slowDealloc();
    }

    [*(id *)(a1 + 24) performSelector:v9 withObject:v12];
    _Block_release(v12);
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E700);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v20, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    *(unsigned char *)(a2 + 16) = 0;
    dispatch_group_leave(v7);
  }
  return swift_release();
}

uint64_t sub_100057554(uint64_t a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, uint64_t a4)
{
  id v8 = (void *)swift_allocObject();
  _OWORD v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  swift_retain();
  swift_retain();
  SEL v9 = (NSString *)String._bridgeToObjectiveC()();
  SEL v10 = NSSelectorFromString(v9);

  if ([*(id *)(a1 + 24) respondsToSelector:v10])
  {
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    id v12 = (void *)swift_allocObject();
    v12[2] = v11;
    v12[3] = sub_1000588E8;
    v12[4] = v8;
    v23[4] = sub_100058D44;
    v23[5] = v12;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_100050910;
    uint64_t v23[3] = &unk_1002F6B18;
    uint64_t v13 = _Block_copy(v23);
    swift_retain();
    swift_release();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E700);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v17, 2u);
      swift_slowDealloc();
    }

    [*(id *)(a1 + 24) performSelector:v10 withObject:v13];
    _Block_release(v13);
    return swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E700);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v22, 2u);
      swift_slowDealloc();
    }

    sub_1000F40D4(0, a2, a3, a4);
    return swift_release();
  }
}

void sub_1000578B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  SEL v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  id v11 = a5;
  swift_retain();
  a4;
  id v12 = (NSString *)String._bridgeToObjectiveC()();
  SEL v13 = NSSelectorFromString(v12);

  if ([*(id *)(a1 + 24) respondsToSelector:v13])
  {
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    os_log_type_t v15 = (void *)swift_allocObject();
    v15[2] = v14;
    v15[3] = sub_100058854;
    v15[4] = v10;
    aBlock[4] = sub_10005889C;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100050910;
    aBlock[3] = &unk_1002F6AA0;
    os_log_type_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E700);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v20, 2u);
      swift_slowDealloc();
    }

    [*(id *)(a1 + 24) performSelector:v13 withObject:v16];
    _Block_release(v16);
    swift_release();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E700);
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v24, 2u);
      swift_slowDealloc();
    }

    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = 0x8000000000000000;
    sub_10022C68C((uint64_t)isa, 0x766F636552736168, 0xEE0079654B797265, isUniquelyReferenced_nonNull_native);
    *(void *)(a2 + 16) = v29;
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (a5)
    {
      id v27 = v11;
      a5 = (void *)sub_10016B5B0();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
}

id sub_100057CD4()
{
  id result = [self sharedInstance];
  if (result)
  {
    uint64_t v1 = result;
    id v2 = [result contextForPrimaryAccount];

    if (v2)
    {
      id v3 = [v2 edpState];

      return (id)(v3 == (id)2);
    }
    else
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100007288(v4, (uint64_t)qword_10033E700);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing primary context, returning EDP enabled as false", v7, 2u);
        swift_slowDealloc();
      }

      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100057E20()
{
  return _swift_task_switch(sub_100057E3C, 0, 0);
}

uint64_t sub_100057E3C()
{
  id v1 = [self sharedInstance];
  if (!v1)
  {
    __break(1u);
    return _swift_continuation_await(v1);
  }
  id v2 = v1;
  id v3 = [v1 contextForPrimaryAccount];
  v0[18] = v3;

  if (v3)
  {
    id v4 = [objc_allocWithZone((Class)CDPStateController) init];
    v0[19] = v4;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_1000580A8;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100056410;
    v0[13] = &unk_1002F6A10;
    v0[14] = v5;
    [v4 validateEDPIdentitiesWithContext:v3 completion:v0 + 10];
    id v1 = v0 + 2;
    return _swift_continuation_await(v1);
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E700);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    SEL v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)SEL v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing context, reporting EDPState.error", v9, 2u);
    swift_slowDealloc();
  }

  SEL v10 = (uint64_t (*)(uint64_t, void))v0[1];
  return v10(8, 0);
}

uint64_t sub_1000580A8()
{
  return _swift_task_switch(sub_100058188, 0, 0);
}

uint64_t sub_100058188()
{
  uint64_t v1 = *(void **)(v0 + 144);

  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_errorRelease();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v3, v2);
}

void sub_100058204(uint64_t *a1@<X8>)
{
  id v2 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v3 = [v2 aa_primaryAppleAccount];

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 accountPropertyForKey:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      int v12 = swift_dynamicCast();
      uint64_t v13 = v26;
      if (!v12) {
        uint64_t v13 = 0;
      }
      uint64_t v25 = v13;
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v25 = 0;
    }
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v3 accountPropertyForKey:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      if (swift_dynamicCast()) {
        uint64_t v6 = v26;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v6 = 0;
    }
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = [v3 accountPropertyForKey:v16];

    if (v17)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      if (swift_dynamicCast()) {
        uint64_t v7 = v26;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v7 = 0;
    }
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v3 accountPropertyForKey:v18];

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      if (swift_dynamicCast()) {
        uint64_t v8 = v26;
      }
      else {
        uint64_t v8 = 2;
      }
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v8 = 2;
    }
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v3 accountPropertyForKey:v20];

    if (v21)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      if (swift_dynamicCast()) {
        uint64_t v9 = v26;
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v9 = 0;
    }
    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v3 accountPropertyForKey:v22];

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_1000086C4((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      int v24 = swift_dynamicCast();
      uint64_t v10 = v26;
      if (!v24) {
        uint64_t v10 = 0;
      }
    }
    else
    {
      sub_100058764((uint64_t)v29);
      uint64_t v10 = 0;
    }
    uint64_t v11 = v25;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 1;
  }
  *a1 = v11;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
}

uint64_t sub_100058764(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_100328490);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000587C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005880C()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100058854(uint64_t a1)
{
  sub_100112260(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100058860()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005889C(char a1, uint64_t a2)
{
  return sub_100055500(a1, a2, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24));
}

uint64_t sub_1000588A8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000588E8(char a1)
{
  return sub_1000F40D4(a1, *(uint64_t (**)(uint64_t, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000588F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100058938(char a1)
{
  sub_1000DE8EC(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

unsigned char *storeEnumTagSinglePayload for EscrowRecordState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100058A10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EscrowRecordState()
{
  return &type metadata for EscrowRecordState;
}

void destroy for CachedEDPHealth(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for CachedEDPHealth(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  unsigned int v6 = *(void **)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  return a1;
}

uint64_t assignWithCopy for CachedEDPHealth(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v13 = *(void **)(a1 + 32);
  NSString v14 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v14;
  id v15 = v14;

  NSString v16 = *(void **)(a1 + 40);
  id v17 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v17;
  id v18 = v17;

  return a1;
}

uint64_t assignWithTake for CachedEDPHealth(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  id v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for CachedEDPHealth(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedEDPHealth(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedEDPHealth()
{
  return &type metadata for CachedEDPHealth;
}

unint64_t sub_100058CE0()
{
  unint64_t result = qword_100323460;
  if (!qword_100323460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323460);
  }
  return result;
}

void *sub_100058D48()
{
  uint64_t v1 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 44));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  if (!v10) {
    id v10 = sub_10006EDAC();
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  id v13 = v10;
  sub_1000179D0(&v13);
  return v10;
}

void *sub_100058E64()
{
  uint64_t v1 = type metadata accessor for CustodianRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 52));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  if (!v10) {
    id v10 = sub_10006EF88();
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  id v13 = v10;
  sub_1000AA344(&v13);
  return v10;
}

void *sub_100058F80()
{
  uint64_t v1 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 40));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  if (!v10) {
    id v10 = sub_10006F344((uint64_t)v5, (void (*)(void))type metadata accessor for BenefactorInfoRecord, 0xD00000000000001FLL, (void *)0x800000010029B110);
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  id v13 = v10;
  sub_1001BFC6C(&v13);
  return v10;
}

void *sub_1000590C8()
{
  uint64_t v1 = type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 40));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  if (!v10) {
    id v10 = sub_10006F160((uint64_t)v5, (void (*)(void))type metadata accessor for CustodianHealthRecord, 0xD000000000000015, (void *)0x800000010029B060);
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  id v13 = v10;
  sub_1001BA73C(&v13);
  return v10;
}

void *sub_100059210()
{
  uint64_t v1 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 40));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (!v10) {
    id v10 = sub_10006F160((uint64_t)v5, (void (*)(void))type metadata accessor for CustodianshipInfoRecord, 0xD000000000000017, (void *)0x800000010029AAB0);
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  id v13 = v10;
  sub_10011405C(&v13);
  return v10;
}

void *sub_100059358()
{
  uint64_t v1 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 40));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  if (!v10) {
    id v10 = sub_10006F344((uint64_t)v5, (void (*)(void))type metadata accessor for InheritanceHealthRecord, 0xD000000000000017, (void *)0x800000010029B040);
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  id v13 = v10;
  sub_1000E0214(&v13);
  return v10;
}

void *sub_1000594A0()
{
  uint64_t v1 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 44));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  if (!v10) {
    id v10 = sub_10006F160((uint64_t)v5, (void (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, 0xD00000000000001BLL, (void *)0x800000010029B0A0);
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  id v13 = v10;
  sub_1002896AC(&v13);
  return v10;
}

void *sub_1000595E8()
{
  uint64_t v1 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v2 + 48));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_100013140(*v7, v9);
  id v10 = sub_100122698(v8, v9);
  sub_100013198(v8, v9);
  sub_10007392C(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  if (!v10) {
    id v10 = sub_10006F528();
  }
  sub_1000751DC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  id v13 = v10;
  sub_10028FBA8(&v13);
  return v10;
}

uint64_t sub_100059704()
{
  type metadata accessor for BenefactorHealthCheck();
  sub_100009F04(&qword_100323540);
  uint64_t result = String.init<A>(describing:)();
  qword_100323468 = result;
  unk_100323470 = v1;
  return result;
}

uint64_t sub_100059750(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  int v76 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v74 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v21 = __chkstk_darwin(v19, v20);
  int v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    char v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = a3;
      uint64_t v38 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315394;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v39 = qword_100323468;
      unint64_t v40 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v77 = (void *)sub_100135190(v39, v40, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t v77 = (void *)a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v77 = (void *)sub_100135190(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - failed to start health check. An error occured while fetching benefactors. Error :- %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v37;
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }
    swift_errorRetain();
    a3(a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v73 = v16;
    uint64_t v25 = *(void **)(a1 + 16);
    if (v25)
    {
      uint64_t v66 = v22;
      uint64_t v67 = v21;
      uint64_t v68 = v13;
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v69 = v12;
      uint64_t v70 = a3;
      uint64_t v26 = type metadata accessor for Logger();
      sub_100007288(v26, (uint64_t)qword_10033E778);
      swift_bridgeObjectRetain();
      long long v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      uint64_t v72 = v27;
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v71 = a4;
      if (v29)
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        aBlock[0] = v65;
        *(_DWORD *)uint64_t v30 = 136315394;
        if (qword_100320BD8 != -1) {
          swift_once();
        }
        uint64_t v32 = qword_100323468;
        unint64_t v31 = unk_100323470;
        swift_bridgeObjectRetain();
        uint64_t v77 = (void *)sub_100135190(v32, v31, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2048;
        uint64_t v77 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100007844(a1, 0);
        unint64_t v33 = v72;
        _os_log_impl((void *)&_mh_execute_header, v72, v28, "%s - performing health check on %ld benefactors", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100007844(a1, 0);
      }
      uint64_t v50 = dispatch_group_create();
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = 0;
      uint64_t v52 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
      uint64_t v53 = a1 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
      uint64_t v54 = *(void *)(v52 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_10005A1A0(v53, v50, a5, v51, a6);
        v53 += v54;
        uint64_t v25 = (void *)((char *)v25 - 1);
      }
      while (v25);
      sub_100007844(a1, 0);
      sub_10000850C(0, (unint64_t *)&qword_10032A860);
      uint64_t v56 = v66;
      uint64_t v55 = v67;
      (*(void (**)(char *, void, uint64_t))(v66 + 104))(v24, enum case for DispatchQoS.QoSClass.background(_:), v67);
      uint64_t v57 = (void *)static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v55);
      uint64_t v58 = (void *)swift_allocObject();
      uint64_t v59 = v71;
      long long v58[2] = v70;
      id v58[3] = v59;
      v58[4] = v51;
      aBlock[4] = (uint64_t)sub_10004CEB8;
      aBlock[5] = (uint64_t)v58;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100007244;
      aBlock[3] = (uint64_t)&unk_1002F6D70;
      uint64_t v60 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      unint64_t v61 = v74;
      static DispatchQoS.unspecified.getter();
      uint64_t v77 = _swiftEmptyArrayStorage;
      sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100009F04(&qword_10032BB00);
      sub_10000A534();
      uint64_t v62 = v76;
      uint64_t v63 = v69;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_group.notify(qos:flags:queue:execute:)();

      _Block_release(v60);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v62, v63);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v73);
      swift_release();
      return swift_release();
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_100007288(v44, (uint64_t)qword_10033E778);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v45, v46))
      {
        unint64_t v47 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v47 = 136315138;
        if (qword_100320BD8 != -1) {
          swift_once();
        }
        uint64_t v48 = qword_100323468;
        unint64_t v49 = unk_100323470;
        swift_bridgeObjectRetain();
        uint64_t v77 = (void *)sub_100135190(v48, v49, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s - no benefactors found. Skipping Benefactor Health Check", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return ((uint64_t (*)(void))a3)(0);
    }
  }
}

void sub_10005A1A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a5;
  uint64_t v38 = a4;
  uint64_t v9 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v13 = __chkstk_darwin(v9 - 8, v12);
  uint64_t v14 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v35 - v17;
  if (*(void *)(a1 + *(int *)(v16 + 32)) == 2)
  {
    dispatch_group_enter(a2);
    uint64_t v36 = a1;
    sub_10007392C(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v35 = a3;
    uint64_t v20 = (v19 + 16) & ~v19;
    unint64_t v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = v5;
    unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = a2;
    uint64_t v24 = v38;
    uint64_t v25 = swift_allocObject();
    sub_100073BB4((uint64_t)v18, v25 + v20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    *(void *)(v25 + v21) = v24;
    *(void *)(v25 + v22) = v23;
    *(void *)(v25 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8)) = v37;
    swift_retain();
    uint64_t v26 = v23;
    sub_10005A928(v36, (uint64_t)sub_10006FC88, v25);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E778);
    sub_10007392C(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v39 = v5;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_100323468;
      unint64_t v31 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_100135190(v32, v31, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_100135190(v33, v34, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000751DC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - BenefactorInfoRecord with beneficiaryID - %s is not accepted. Skipping health check.", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000751DC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }
  }
}

void sub_10005A5E8(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = (void *)(a3 + 16);
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E778);
    sub_10007392C(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unint64_t v22 = a4;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v24[0] = v21;
      *(_DWORD *)uint64_t v16 = 136315394;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_100323468;
      unint64_t v17 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100135190(v18, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v23 = sub_100135190(v19, v20, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000751DC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - failed for benefactor - %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a4 = v22;
    }
    else
    {
      sub_1000751DC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    }
    swift_beginAccess();
    *uint64_t v12 = a1;
    swift_errorRelease();
  }
  dispatch_group_leave(a4);
}

uint64_t sub_10005A928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v51 = a3;
  uint64_t v48 = *v3;
  uint64_t v49 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v52 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v50 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v9 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v46 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  uint64_t v47 = (uint64_t)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v41 - v18;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100007288(v20, (uint64_t)qword_10033E778);
  sub_10007392C(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v53 = v6;
  if (v23)
  {
    uint64_t v42 = v14;
    uint64_t v43 = v3;
    uint64_t v44 = a1;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v55[0] = v41;
    *(_DWORD *)uint64_t v24 = 136315394;
    if (qword_100320BD8 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_100323468;
    unint64_t v25 = unk_100323470;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_100135190(v26, v25, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = v53;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_100135190(v27, v28, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000751DC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - fetching health record for beneficiaryID: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v43;
    a1 = v44;
    uint64_t v14 = v42;
  }
  else
  {
    sub_1000751DC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  uint64_t v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v45);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v29);
  uint64_t v45 = (uint64_t)sub_100008EF8(v55, v55[3]);
  uint64_t v30 = v52;
  uint64_t v31 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, a1, v6);
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = v47;
  sub_10007392C(a1, v47, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v34 = (*(unsigned __int8 *)(v46 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  unint64_t v35 = (v14 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = swift_allocObject();
  sub_100073BB4(v33, v37 + v34, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  uint64_t v38 = (void *)(v37 + v35);
  uint64_t v39 = v51;
  *uint64_t v38 = v49;
  v38[1] = v39;
  *(void *)(v37 + v36) = v32;
  *(void *)(v37 + ((v36 + 15) & 0xFFFFFFFFFFFFFFF8)) = v48;
  swift_retain();
  swift_retain();
  sub_1000ECA54(v31, (uint64_t)sub_10006FED4, v37);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v53);
  swift_release();
  return sub_100008EA8((uint64_t)v55);
}

uint64_t sub_10005AF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v5 = *v3;
  uint64_t v42 = a2;
  uint64_t v43 = v5;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v40 = v14;
  uint64_t v41 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v34 - v16;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E778);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v38(v17, a1, v10);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v35 = v7;
    uint64_t v36 = v6;
    uint64_t v37 = a1;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v47[0] = v34;
    *(_DWORD *)uint64_t v21 = 136315394;
    if (qword_100320BD8 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_100323468;
    unint64_t v22 = unk_100323470;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100135190(v23, v22, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_100135190(v24, v25, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - starting individual beneficiary health check for %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v36;
    a1 = v37;
    uint64_t v7 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  uint64_t v26 = v44;
  uint64_t v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v39, v44 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  sub_100008EF8(v47, v47[3]);
  unint64_t v28 = v41;
  v38(v41, a1, v10);
  unint64_t v29 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v30 = (v40 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v42;
  *((void *)v31 + 2) = v26;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v45;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v31[v29], v28, v10);
  *(void *)&v31[v30] = v43;
  swift_retain();
  swift_retain();
  sub_1000EAD74(a1, (uint64_t)sub_100073888, (uint64_t)v31);
  swift_release();
  return sub_100008EA8((uint64_t)v47);
}

uint64_t sub_10005B474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, (uint64_t *)&unk_100325860);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = a4;
    uint64_t v35 = (void (*)(uint64_t))a3;
    uint64_t v20 = *v19;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E778);
    uint64_t v22 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v11, v36, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v39 = v36;
      *(_DWORD *)uint64_t v25 = 136315650;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100323468;
      unint64_t v28 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v38 = sub_100135190(v27, v28, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_100135190(v29, v30, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v8);
      *(_WORD *)(v25 + 22) = 2112;
      uint64_t v31 = _convertErrorToNSError(_:)();
      uint64_t v38 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - error fetching beneficiary record for %s: %@", (uint8_t *)v25, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v8);
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v33 = v35;
    swift_errorRetain();
    v33(v20);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100073BB4((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10005A928((uint64_t)v15, a3, a4);
    return sub_1000751DC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_10005B970()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_10032B720);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__storageController;
  uint64_t v4 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_10005BA5C()
{
  return type metadata accessor for BenefactorHealthCheck();
}

uint64_t type metadata accessor for BenefactorHealthCheck()
{
  uint64_t result = qword_1003234B0;
  if (!qword_1003234B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10005BAB0()
{
  sub_10001BF34(319, (unint64_t *)&qword_10032B5D0, (uint64_t *)&unk_100321850);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_10005BB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006F744(a3, a4);
}

uint64_t sub_10005BBC4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v67 = a6;
  uint64_t v71 = a5;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v70 = (char *)a2;
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v68 = *(void *)(v74 - 8);
  __chkstk_darwin(v74, v7);
  uint64_t v69 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v63 = *(void **)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v65 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  uint64_t v66 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t v20 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v62 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v62 + 64);
  uint64_t v23 = __chkstk_darwin(v20 - 8, v22);
  uint64_t v64 = (uint64_t)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v60 - v25;
  uint64_t v27 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v27, v28);
  unint64_t v30 = (uint64_t *)((char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v30, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = *v30;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_100007288(v32, (uint64_t)qword_10033E778);
    uint64_t v33 = (uint64_t)v26;
    sub_10007392C((uint64_t)v70, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315650;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v37 = qword_100323468;
      unint64_t v38 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_100135190(v37, v38, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v76 = sub_100135190(v39, v40, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000751DC(v33, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v36 + 22) = 2080;
      uint64_t v76 = v31;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v76 = sub_100135190(v41, v42, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - failed to fetch InheritanceHealthRecord for %s. Error :- %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000751DC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v72(v31);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100073BB4((uint64_t)v30, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v44 = v63;
      ((void (*)(char *, uint64_t, uint64_t))v63[2])(v12, Strong + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v9);
      Dependency.wrappedValue.getter();
      swift_release();
      ((void (*)(char *, uint64_t))v44[1])(v12, v9);
      uint64_t v63 = sub_100008EF8(v75, v75[3]);
      uint64_t v45 = v68;
      uint64_t v46 = (uint64_t)v70;
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v69, v70, v74);
      uint64_t v47 = v64;
      sub_10007392C(v46, v64, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      unint64_t v61 = type metadata accessor for InheritanceHealthRecord;
      uint64_t v48 = v66;
      sub_10007392C((uint64_t)v19, v66, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      uint64_t v49 = *(unsigned __int8 *)(v62 + 80);
      uint64_t v70 = v19;
      uint64_t v50 = (v49 + 16) & ~v49;
      unint64_t v51 = (v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v53 = (*(unsigned __int8 *)(v65 + 80) + v52 + 8) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
      unint64_t v54 = (v14 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v55 = swift_allocObject();
      sub_100073BB4(v47, v55 + v50, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      uint64_t v56 = (void (**)(uint64_t))(v55 + v51);
      uint64_t v57 = v73;
      *uint64_t v56 = v72;
      v56[1] = v57;
      *(void *)(v55 + v52) = v71;
      sub_100073BB4(v48, v55 + v53, (uint64_t (*)(void))v61);
      *(void *)(v55 + v54) = v67;
      swift_retain();
      swift_retain();
      uint64_t v58 = v69;
      sub_1000E7554(v69, (uint64_t)sub_1000701E8, v55);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v58, v74);
      sub_1000751DC((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      return sub_100008EA8((uint64_t)v75);
    }
    else
    {
      return sub_1000751DC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    }
  }
}

uint64_t sub_10005C43C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, NSObject *a6)
{
  os_log_type_t v35 = a3;
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v14 - 8, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E778);
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v34 = a4;
      uint64_t v26 = swift_slowAlloc();
      v37[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315650;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_100323468;
      unint64_t v28 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_100135190(v27, v28, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_100135190(v29, v30, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v26 + 22) = 2080;
      uint64_t v36 = v22;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v36 = sub_100135190(v31, v32, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - failed to fetch BeneficiaryInfoRecord for %s. Error :- %s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    v35(v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100073BB4((uint64_t)v21, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10005C948(a6, (uint64_t)v13, (uint64_t)v35, a4);
      swift_release();
    }
    return sub_1000751DC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_10005C948(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v105 = a3;
  uint64_t v106 = a4;
  uint64_t v104 = *v4;
  uint64_t v103 = sub_100009F04(&qword_100322950);
  uint64_t v101 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v7);
  uint64_t v99 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for UUID();
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95, v9);
  uint64_t v92 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v96 - 8);
  __chkstk_darwin(v96, v12);
  uint64_t v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v102 = (uint64_t)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v91 - v20;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100007288(v22, (uint64_t)qword_10033E778);
  uint64_t v97 = a1;
  sub_10007392C((uint64_t)a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v107 = v23;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v98 = a2;
    uint64_t v94 = v15;
    uint64_t v26 = swift_slowAlloc();
    v109[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    if (qword_100320BD8 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_100323468;
    unint64_t v28 = unk_100323470;
    swift_bridgeObjectRetain();
    uint64_t v110 = sub_100135190(v27, v28, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v110 = sub_100135190(v29, v30, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000751DC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - verifying benefactor health record for beneficiaryID - %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = v94;
  }
  else
  {
    sub_1000751DC((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
  uint64_t v31 = sub_100018390();
  unint64_t v33 = v32;
  uint64_t v34 = swift_allocBox();
  uint64_t v36 = v35;
  sub_10007392C((uint64_t)v97, v35, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  Date.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v36 + *(int *)(v15 + 20), v14, v96);
  uint64_t v37 = (uint64_t *)(v36 + *(int *)(v15 + 24));
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_100013140(*v37, v39);
  char v40 = sub_100012680(v31, v33, v38, v39);
  sub_100013198(v38, v39);
  uint64_t v98 = v34;
  if (v40)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315138;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v44 = qword_100323468;
      unint64_t v45 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_100135190(v44, v45, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - verified accessKeyHash matches with healthRecord. We're good.", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v34 = v98;
    }
    else
    {
    }
    swift_retain_n();
    uint64_t v63 = Logger.logObject.getter();
    int v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      LODWORD(v107) = v64;
      uint64_t v65 = swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      v109[0] = (uint64_t)v97;
      *(_DWORD *)uint64_t v65 = 136315394;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v66 = qword_100323468;
      unint64_t v67 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_100135190(v66, v67, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v96 = v65 + 14;
      swift_beginAccess();
      uint64_t v68 = v93;
      uint64_t v69 = v92;
      uint64_t v70 = v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v92, v36, v95);
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v73 = v72;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      uint64_t v108 = sub_100135190(v71, v73, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v34 = v98;
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v107, "%s - benefactor Record %s is healthy!", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    swift_retain();
    sub_100013140(v31, v33);
    swift_retain();
    sub_100013140(v31, v33);
    uint64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.info.getter();
    uint64_t v97 = v46;
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      LODWORD(v95) = v47;
      uint64_t v96 = v33;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      v109[0] = v94;
      *(_DWORD *)uint64_t v48 = 136315650;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v49 = qword_100323468;
      unint64_t v50 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_100135190(v49, v50, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      swift_beginAccess();
      unint64_t v51 = (uint64_t *)(v36 + *(int *)(v15 + 24));
      uint64_t v52 = *v51;
      unint64_t v53 = v51[1];
      sub_100013140(*v51, v53);
      uint64_t v54 = Data.description.getter();
      unint64_t v56 = v55;
      sub_100013198(v52, v53);
      uint64_t v110 = sub_100135190(v54, v56, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v57 = v98;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2080;
      unint64_t v58 = v96;
      sub_100013140(v31, v96);
      uint64_t v59 = Data.description.getter();
      unint64_t v61 = v60;
      sub_100013198(v31, v58);
      uint64_t v110 = sub_100135190(v59, v61, v109);
      unint64_t v33 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100013198(v31, v58);
      sub_100013198(v31, v58);
      uint64_t v62 = v97;
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v95, "%s - accessKey hash did not match! Previous hash: %s New Hash: %s", (uint8_t *)v48, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v34 = v57;
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      sub_100013198(v31, v33);
      sub_100013198(v31, v33);
    }
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v94 = v15;
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      v109[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 136315138;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v77 = qword_100323468;
      unint64_t v78 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v110 = sub_100135190(v77, v78, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s - updating health record access key hash so owner knows we have the new hash.", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v34 = v98;
      uint64_t v15 = v94;
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t v79 = (uint64_t *)(v36 + *(int *)(v15 + 24));
    uint64_t v80 = *v79;
    unint64_t v81 = v79[1];
    *uint64_t v79 = v31;
    v79[1] = v33;
    sub_100013140(v31, v33);
    sub_100013198(v80, v81);
  }
  uint64_t v82 = v101;
  NSString v83 = v99;
  uint64_t v84 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v99, v100 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__storageController, v103);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
  sub_100008EF8(v109, v109[3]);
  swift_beginAccess();
  uint64_t v85 = v102;
  sub_10007392C(v36, v102, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  id v86 = (void *)swift_allocObject();
  uint64_t v87 = v105;
  uint64_t v88 = v106;
  v86[2] = v34;
  v86[3] = v87;
  uint64_t v89 = v104;
  v86[4] = v88;
  v86[5] = v89;
  swift_retain();
  swift_retain();
  sub_10005DFE8(v85, (uint64_t)sub_100070318, (uint64_t)v86);
  swift_release();
  sub_100013198(v31, v33);
  sub_1000751DC(v85, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  sub_100008EA8((uint64_t)v109);
  return swift_release();
}

uint64_t sub_10005D878(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v15, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v45 = a3;
    uint64_t v16 = *v15;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    int v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      LODWORD(v43) = v19;
      uint64_t v44 = a4;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v20 = 136315650;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v22 = qword_100323468;
      unint64_t v21 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_100135190(v22, v21, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      type metadata accessor for InheritanceHealthRecord();
      uint64_t v23 = swift_projectBox();
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v23, v7);
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      uint64_t v46 = sub_100135190(v24, v26, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2080;
      uint64_t v46 = v16;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v46 = sub_100135190(v27, v28, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v43, "%s - error updating InheritanceHealthRecord %s: %s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    v45(v16);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v44 = a4;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E778);
    swift_retain_n();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v43 = v8;
      unint64_t v45 = a3;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v32 = 136315394;
      if (qword_100320BD8 != -1) {
        swift_once();
      }
      uint64_t v33 = qword_100323468;
      unint64_t v34 = unk_100323470;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_100135190(v33, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v41 = v32 + 14;
      type metadata accessor for InheritanceHealthRecord();
      uint64_t v35 = swift_projectBox();
      swift_beginAccess();
      uint64_t v36 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v11, v35, v7);
      sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v39 = v38;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v7);
      uint64_t v46 = sub_100135190(v37, v39, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - inheritanceHealthRecord %s was updated.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v45(0);
    }
    else
    {

      swift_release_n();
      a3(0);
    }
    return sub_100006574((uint64_t)v15, &qword_10032B730);
  }
}

void sub_10005DFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = qword_100320CC8;
  swift_retain();
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for InheritanceHealthRecord() + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v9 = &qword_10033EA18;
  }
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  swift_bridgeObjectRetain();
  id v12 = sub_10028CC20(v11, v10);
  id v13 = [v12 sharedCloudDatabase];
  swift_bridgeObjectRelease();

  sub_100066AA0(a1, v13, (uint64_t)sub_100070378, (uint64_t)v7);
  swift_release();
}

uint64_t sub_10005E1B4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v33 = a4;
  uint64_t v7 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100009F04(&qword_10032B730);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (uint64_t *)((char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (uint64_t *)((char *)&v32 - v17);
  sub_100019730(a1, (uint64_t)&v32 - v17, &qword_10032B730);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = v19;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v32 = v23 + 4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v34 = sub_100135190(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving to shared DB: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v15 = v19;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v15);
    swift_errorRelease();
    return sub_100006574((uint64_t)v15, &qword_10032B730);
  }
  else
  {
    sub_100073BB4((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E7A8);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cloud record saved to shared DB in CloudKitStorage.", v30, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(a2 + 16), *(void *)(a2 + 40));
    sub_10005F44C((uint64_t)v10, 0, 2, (uint64_t)a3, v33);
    return sub_1000751DC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_10005E5DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100073488;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F73B0;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005E978(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianHealthRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_1000720C0;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F7090;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005ED14(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100072F4C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F72C0;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005F0B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_1000728A8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F71A8;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005F44C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100071994;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F6F78;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005F7E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100073264;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F7360;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005FB84(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_1000730C8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F7310;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_10005FF20(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_10007377C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F7450;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_1000602BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BeneficiaryManifestRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100073600;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F7400;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = &_swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_100060658(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v32 = a3;
  uint64_t v31 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8, v19);
  uint64_t v20 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v5 + 32);
  sub_10007392C(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v22 = (v21 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v6;
  sub_100073BB4((uint64_t)v20, v24 + v21, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  unint64_t v25 = v24 + v22;
  *(void *)unint64_t v25 = v31;
  *(unsigned char *)(v25 + 8) = v32;
  unint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v34;
  void *v26 = v33;
  v26[1] = v27;
  aBlock[4] = sub_100073C1C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  aBlock[3] = &unk_1002F74C8;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v39 = _swiftEmptyArrayStorage;
  sub_10000A5D8((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return swift_release();
}

uint64_t sub_1000609F4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v72 = a6;
  uint64_t v70 = a5;
  LODWORD(v65) = a4;
  uint64_t v67 = a3;
  uint64_t v71 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v71, v8);
  uint64_t v69 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URLResourceValues();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v53 - v27;
  unint64_t v68 = a1;
  type metadata accessor for BeneficiaryInfoRecord();
  sub_10000A5D8(&qword_100321618, (void (*)(uint64_t))type metadata accessor for BeneficiaryInfoRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v58 = v25;
  uint64_t v59 = v28;
  unint64_t v56 = v17;
  unint64_t v60 = v21;
  uint64_t v57 = v12;
  uint64_t v61 = v29;
  unint64_t v62 = v30;
  uint64_t v31 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  long long v33 = v76[0];
  Data.encrypt(using:)(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1), v61, v62, (uint64_t *)v76);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v73 = v76[0];
  long long v74 = v76[1];
  long long v75 = v76[2];
  sub_1000719DC();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  int v55 = v65;
  uint64_t v54 = v34;
  unint64_t v68 = v36;
  swift_release();
  sub_100013198(v33, *((unint64_t *)&v33 + 1));
  sub_100071A30((uint64_t *)v76);
  swift_release();
  uint64_t v53 = type metadata accessor for LocalCache();
  uint64_t v37 = v58;
  sub_10000A280();
  uint64_t v38 = (uint64_t)v59;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = v66 + 8;
  unint64_t v39 = *(void (**)(void, void))(v66 + 8);
  uint64_t v65 = (void (*)(char *, uint64_t))v39;
  v39(v37, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v38, 0);
  v39(v38, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v41 = v37;
  uint64_t v42 = v65;
  v65(v41, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v60;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = v40;
  unint64_t v45 = v42;
  swift_bridgeObjectRelease();
  v42((char *)v38, v13);
  LOBYTE(v42) = v55;
  uint64_t v46 = v54;
  Data.write(to:options:)();
  uint64_t v47 = (uint64_t)v69;
  uint64_t v48 = v70;
  if ((v42 & 1) == 0)
  {
    uint64_t v67 = v44;
    uint64_t v49 = v57;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v56;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v56, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v65;
    v65(v50, v13);
    uint64_t v52 = v49;
    unint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  }
  v45(v43, v13);
  sub_10007392C(v31, v47, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  swift_storeEnumTagMultiPayload();
  v48(v47);
  sub_100013198(v61, v62);
  sub_100013198(v46, v68);
  return sub_100006574(v47, &qword_100321CF0);
}

uint64_t sub_1000612A8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v72 = a5;
  LODWORD(v68) = a4;
  uint64_t v69 = a3;
  uint64_t v74 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v74, v8);
  long long v73 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for URLResourceValues();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v56 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v56 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (void (*)(char *, uint64_t))((char *)&v56 - v27);
  uint64_t v71 = a1;
  type metadata accessor for CustodianHealthRecord();
  sub_10000A5D8(&qword_100323588, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v31 = v30;
  unint64_t v62 = v25;
  uint64_t v63 = v28;
  unint64_t v60 = v17;
  uint64_t v64 = v21;
  uint64_t v61 = v12;
  uint64_t v65 = v29;
  uint64_t v32 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v35 = *((void *)&v79[0] + 1);
  uint64_t v34 = *(void *)&v79[0];
  Data.encrypt(using:)(*(uint64_t *)&v79[0], *((unint64_t *)&v79[0] + 1), v65, v31, (uint64_t *)v79);
  uint64_t v36 = (uint64_t)v73;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v76 = v79[0];
  long long v77 = v79[1];
  long long v78 = v79[2];
  sub_1000719DC();
  uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v57 = v31;
  int v59 = v68;
  uint64_t v71 = v37;
  unint64_t v68 = v39;
  swift_release();
  sub_100013198(v34, v35);
  sub_100071A30((uint64_t *)v79);
  swift_release();
  uint64_t v58 = type metadata accessor for LocalCache();
  uint64_t v40 = v62;
  sub_10000A280();
  uint64_t v41 = (uint64_t)v63;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v42 = v70 + 8;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v70 + 8);
  v43(v40, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v41, 0);
  v43((char *)v41, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  v43(v40, v13);
  UUID.uuidString.getter();
  uint64_t v44 = v64;
  URL.appendingPathComponent(_:)();
  uint64_t v45 = v42;
  uint64_t v46 = v43;
  swift_bridgeObjectRelease();
  uint64_t v47 = v41;
  unint64_t v48 = v68;
  v43((char *)v47, v13);
  LOBYTE(v31) = v59;
  Data.write(to:options:)();
  uint64_t v49 = v72;
  unint64_t v50 = v57;
  if ((v31 & 1) == 0)
  {
    unint64_t v51 = v57;
    uint64_t v63 = v46;
    uint64_t v69 = v45;
    uint64_t v52 = v70;
    uint64_t v53 = v61;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v54 = v60;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v60, v44, v13);
    URL.setResourceValues(_:)();
    uint64_t v46 = v63;
    v63(v54, v13);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v67);
    unint64_t v48 = v68;
    unint64_t v50 = v51;
  }
  unint64_t v55 = v50;
  v46(v44, v13);
  sub_10007392C(v32, v36, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  swift_storeEnumTagMultiPayload();
  v49(v36);
  sub_100013198(v65, v55);
  sub_100013198(v71, v48);
  return sub_100006574(v36, &qword_100323580);
}

uint64_t sub_100061B80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v72 = a5;
  LODWORD(v68) = a4;
  uint64_t v69 = a3;
  uint64_t v74 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v74, v8);
  long long v73 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for URLResourceValues();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v56 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v56 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (void (*)(char *, uint64_t))((char *)&v56 - v27);
  uint64_t v71 = a1;
  type metadata accessor for CustodianRecoveryInfoRecord();
  sub_10000A5D8(&qword_1003235A8, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v31 = v30;
  unint64_t v62 = v25;
  uint64_t v63 = v28;
  unint64_t v60 = v17;
  uint64_t v64 = v21;
  uint64_t v61 = v12;
  uint64_t v65 = v29;
  uint64_t v32 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v35 = *((void *)&v79[0] + 1);
  uint64_t v34 = *(void *)&v79[0];
  Data.encrypt(using:)(*(uint64_t *)&v79[0], *((unint64_t *)&v79[0] + 1), v65, v31, (uint64_t *)v79);
  uint64_t v36 = (uint64_t)v73;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v76 = v79[0];
  long long v77 = v79[1];
  long long v78 = v79[2];
  sub_1000719DC();
  uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v57 = v31;
  int v59 = v68;
  uint64_t v71 = v37;
  unint64_t v68 = v39;
  swift_release();
  sub_100013198(v34, v35);
  sub_100071A30((uint64_t *)v79);
  swift_release();
  uint64_t v58 = type metadata accessor for LocalCache();
  uint64_t v40 = v62;
  sub_10000A280();
  uint64_t v41 = (uint64_t)v63;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v42 = v70 + 8;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v70 + 8);
  v43(v40, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v41, 0);
  v43((char *)v41, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  v43(v40, v13);
  UUID.uuidString.getter();
  uint64_t v44 = v64;
  URL.appendingPathComponent(_:)();
  uint64_t v45 = v42;
  uint64_t v46 = v43;
  swift_bridgeObjectRelease();
  uint64_t v47 = v41;
  unint64_t v48 = v68;
  v43((char *)v47, v13);
  LOBYTE(v31) = v59;
  Data.write(to:options:)();
  uint64_t v49 = v72;
  unint64_t v50 = v57;
  if ((v31 & 1) == 0)
  {
    unint64_t v51 = v57;
    uint64_t v63 = v46;
    uint64_t v69 = v45;
    uint64_t v52 = v70;
    uint64_t v53 = v61;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v54 = v60;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v60, v44, v13);
    URL.setResourceValues(_:)();
    uint64_t v46 = v63;
    v63(v54, v13);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v67);
    unint64_t v48 = v68;
    unint64_t v50 = v51;
  }
  unint64_t v55 = v50;
  v46(v44, v13);
  sub_10007392C(v32, v36, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  swift_storeEnumTagMultiPayload();
  v49(v36);
  sub_100013198(v65, v55);
  sub_100013198(v71, v48);
  return sub_100006574(v36, &qword_1003235A0);
}

uint64_t sub_100062458(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v68 = a6;
  uint64_t v69 = a5;
  LODWORD(v62) = a4;
  uint64_t v63 = a3;
  uint64_t v67 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v67, v8);
  uint64_t v66 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for URLResourceValues();
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v10);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v52 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v52 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v52 - v27;
  uint64_t v65 = a1;
  type metadata accessor for CustodianRecord();
  sub_10000A5D8(&qword_100323590, (void (*)(uint64_t))type metadata accessor for CustodianRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v31 = v30;
  uint64_t v56 = v25;
  unint64_t v57 = v28;
  uint64_t v54 = v17;
  uint64_t v58 = v21;
  unint64_t v55 = v12;
  uint64_t v59 = v29;
  uint64_t v32 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v35 = *((void *)&v73[0] + 1);
  uint64_t v34 = *(void *)&v73[0];
  Data.encrypt(using:)(*(uint64_t *)&v73[0], *((unint64_t *)&v73[0] + 1), v59, v31, (uint64_t *)v73);
  uint64_t v36 = (uint64_t)v66;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v70 = v73[0];
  long long v71 = v73[1];
  long long v72 = v73[2];
  sub_1000719DC();
  uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v52 = v31;
  int v53 = v62;
  uint64_t v65 = v37;
  unint64_t v62 = v39;
  swift_release();
  sub_100013198(v34, v35);
  sub_100071A30((uint64_t *)v73);
  swift_release();
  type metadata accessor for LocalCache();
  uint64_t v40 = v56;
  sub_10000A280();
  uint64_t v41 = (uint64_t)v57;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v64 + 8);
  v42(v40, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v41, 0);
  v42((char *)v41, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  v42(v40, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v58;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = (void (*)(uint64_t, uint64_t))v42;
  LOBYTE(v42) = v53;
  swift_bridgeObjectRelease();
  uint64_t v45 = v41;
  unint64_t v46 = v62;
  v44(v45, v13);
  Data.write(to:options:)();
  unint64_t v47 = v52;
  if ((v42 & 1) == 0)
  {
    uint64_t v63 = v44;
    uint64_t v48 = v64;
    uint64_t v49 = v55;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v54;
    (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v54, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v50;
    uint64_t v44 = v63;
    v63((uint64_t)v51, v13);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v61);
    unint64_t v46 = v62;
  }
  v44((uint64_t)v43, v13);
  sub_10007392C(v32, v36, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload();
  v69(v36);
  sub_100013198(v59, v47);
  sub_100013198(v65, v46);
  return sub_100006574(v36, &qword_10032E140);
}

uint64_t sub_100062CF0(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v72 = a6;
  long long v70 = a5;
  LODWORD(v65) = a4;
  uint64_t v67 = a3;
  uint64_t v71 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v71, v8);
  uint64_t v69 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URLResourceValues();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v53 - v27;
  unint64_t v68 = a1;
  type metadata accessor for InheritanceHealthRecord();
  sub_10000A5D8(&qword_100323570, (void (*)(uint64_t))type metadata accessor for InheritanceHealthRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v58 = v25;
  uint64_t v59 = v28;
  uint64_t v56 = v17;
  uint64_t v60 = v21;
  unint64_t v57 = v12;
  uint64_t v61 = v29;
  unint64_t v62 = v30;
  uint64_t v31 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  long long v33 = v76[0];
  Data.encrypt(using:)(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1), v61, v62, (uint64_t *)v76);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v73 = v76[0];
  long long v74 = v76[1];
  long long v75 = v76[2];
  sub_1000719DC();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  int v55 = v65;
  uint64_t v54 = v34;
  unint64_t v68 = v36;
  swift_release();
  sub_100013198(v33, *((unint64_t *)&v33 + 1));
  sub_100071A30((uint64_t *)v76);
  swift_release();
  uint64_t v53 = type metadata accessor for LocalCache();
  uint64_t v37 = v58;
  sub_10000A280();
  uint64_t v38 = (uint64_t)v59;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = v66 + 8;
  unint64_t v39 = *(void (**)(void, void))(v66 + 8);
  uint64_t v65 = (void (*)(char *, uint64_t))v39;
  v39(v37, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v38, 0);
  v39(v38, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v41 = v37;
  uint64_t v42 = v65;
  v65(v41, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v60;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = v40;
  uint64_t v45 = v42;
  swift_bridgeObjectRelease();
  v42((char *)v38, v13);
  LOBYTE(v42) = v55;
  uint64_t v46 = v54;
  Data.write(to:options:)();
  uint64_t v47 = (uint64_t)v69;
  uint64_t v48 = v70;
  if ((v42 & 1) == 0)
  {
    uint64_t v67 = v44;
    uint64_t v49 = v57;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v56;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v56, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v65;
    v65(v50, v13);
    unint64_t v52 = v49;
    uint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  }
  v45(v43, v13);
  sub_10007392C(v31, v47, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  swift_storeEnumTagMultiPayload();
  v48(v47);
  sub_100013198(v61, v62);
  sub_100013198(v46, v68);
  return sub_100006574(v47, &qword_10032B730);
}

uint64_t sub_1000635A4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v72 = a6;
  long long v70 = a5;
  LODWORD(v65) = a4;
  uint64_t v67 = a3;
  uint64_t v71 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v71, v8);
  uint64_t v69 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URLResourceValues();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v53 - v27;
  unint64_t v68 = a1;
  type metadata accessor for InheritanceInvitationRecord();
  sub_10000A5D8(&qword_1003235B8, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v58 = v25;
  uint64_t v59 = v28;
  uint64_t v56 = v17;
  uint64_t v60 = v21;
  unint64_t v57 = v12;
  uint64_t v61 = v29;
  unint64_t v62 = v30;
  uint64_t v31 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  long long v33 = v76[0];
  Data.encrypt(using:)(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1), v61, v62, (uint64_t *)v76);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v73 = v76[0];
  long long v74 = v76[1];
  long long v75 = v76[2];
  sub_1000719DC();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  int v55 = v65;
  uint64_t v54 = v34;
  unint64_t v68 = v36;
  swift_release();
  sub_100013198(v33, *((unint64_t *)&v33 + 1));
  sub_100071A30((uint64_t *)v76);
  swift_release();
  uint64_t v53 = type metadata accessor for LocalCache();
  uint64_t v37 = v58;
  sub_10000A280();
  uint64_t v38 = (uint64_t)v59;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = v66 + 8;
  unint64_t v39 = *(void (**)(void, void))(v66 + 8);
  uint64_t v65 = (void (*)(char *, uint64_t))v39;
  v39(v37, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v38, 0);
  v39(v38, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v41 = v37;
  uint64_t v42 = v65;
  v65(v41, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v60;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = v40;
  uint64_t v45 = v42;
  swift_bridgeObjectRelease();
  v42((char *)v38, v13);
  LOBYTE(v42) = v55;
  uint64_t v46 = v54;
  Data.write(to:options:)();
  uint64_t v47 = (uint64_t)v69;
  uint64_t v48 = v70;
  if ((v42 & 1) == 0)
  {
    uint64_t v67 = v44;
    uint64_t v49 = v57;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v56;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v56, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v65;
    v65(v50, v13);
    unint64_t v52 = v49;
    uint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  }
  v45(v43, v13);
  sub_10007392C(v31, v47, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  swift_storeEnumTagMultiPayload();
  v48(v47);
  sub_100013198(v61, v62);
  sub_100013198(v46, v68);
  return sub_100006574(v47, &qword_100325890);
}

uint64_t sub_100063E58(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v72 = a5;
  LODWORD(v68) = a4;
  uint64_t v69 = a3;
  uint64_t v74 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v74, v8);
  long long v73 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for URLResourceValues();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v56 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v56 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (void (*)(char *, uint64_t))((char *)&v56 - v27);
  uint64_t v71 = a1;
  type metadata accessor for CustodianshipInfoRecord();
  sub_10000A5D8(&qword_1003235B0, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v31 = v30;
  unint64_t v62 = v25;
  uint64_t v63 = v28;
  uint64_t v60 = v17;
  uint64_t v64 = v21;
  uint64_t v61 = v12;
  uint64_t v65 = v29;
  uint64_t v32 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  unint64_t v35 = *((void *)&v79[0] + 1);
  uint64_t v34 = *(void *)&v79[0];
  Data.encrypt(using:)(*(uint64_t *)&v79[0], *((unint64_t *)&v79[0] + 1), v65, v31, (uint64_t *)v79);
  uint64_t v36 = (uint64_t)v73;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v76 = v79[0];
  long long v77 = v79[1];
  long long v78 = v79[2];
  sub_1000719DC();
  uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v57 = v31;
  int v59 = v68;
  uint64_t v71 = v37;
  unint64_t v68 = v39;
  swift_release();
  sub_100013198(v34, v35);
  sub_100071A30((uint64_t *)v79);
  swift_release();
  uint64_t v58 = type metadata accessor for LocalCache();
  uint64_t v40 = v62;
  sub_10000A280();
  uint64_t v41 = (uint64_t)v63;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v42 = v70 + 8;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v70 + 8);
  v43(v40, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v41, 0);
  v43((char *)v41, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  v43(v40, v13);
  UUID.uuidString.getter();
  uint64_t v44 = v64;
  URL.appendingPathComponent(_:)();
  uint64_t v45 = v42;
  uint64_t v46 = v43;
  swift_bridgeObjectRelease();
  uint64_t v47 = v41;
  unint64_t v48 = v68;
  v43((char *)v47, v13);
  LOBYTE(v31) = v59;
  Data.write(to:options:)();
  uint64_t v49 = v72;
  unint64_t v50 = v57;
  if ((v31 & 1) == 0)
  {
    unint64_t v51 = v57;
    uint64_t v63 = v46;
    uint64_t v69 = v45;
    uint64_t v52 = v70;
    uint64_t v53 = v61;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v54 = v60;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v60, v44, v13);
    URL.setResourceValues(_:)();
    uint64_t v46 = v63;
    v63(v54, v13);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v53, v67);
    unint64_t v48 = v68;
    unint64_t v50 = v51;
  }
  unint64_t v55 = v50;
  v46(v44, v13);
  sub_10007392C(v32, v36, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  swift_storeEnumTagMultiPayload();
  v49(v36);
  sub_100013198(v65, v55);
  sub_100013198(v71, v48);
  return sub_100006574(v36, (uint64_t *)&unk_100324590);
}

uint64_t sub_100064730(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v72 = a6;
  uint64_t v70 = a5;
  LODWORD(v65) = a4;
  uint64_t v67 = a3;
  uint64_t v71 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v71, v8);
  uint64_t v69 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URLResourceValues();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v53 - v27;
  unint64_t v68 = a1;
  type metadata accessor for BenefactorInfoRecord();
  sub_10000A5D8(&qword_1003235D0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v58 = v25;
  int v59 = v28;
  uint64_t v56 = v17;
  uint64_t v60 = v21;
  unint64_t v57 = v12;
  uint64_t v61 = v29;
  unint64_t v62 = v30;
  uint64_t v31 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  long long v33 = v76[0];
  Data.encrypt(using:)(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1), v61, v62, (uint64_t *)v76);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v73 = v76[0];
  long long v74 = v76[1];
  long long v75 = v76[2];
  sub_1000719DC();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  int v55 = v65;
  uint64_t v54 = v34;
  unint64_t v68 = v36;
  swift_release();
  sub_100013198(v33, *((unint64_t *)&v33 + 1));
  sub_100071A30((uint64_t *)v76);
  swift_release();
  uint64_t v53 = type metadata accessor for LocalCache();
  uint64_t v37 = v58;
  sub_10000A280();
  uint64_t v38 = (uint64_t)v59;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = v66 + 8;
  unint64_t v39 = *(void (**)(void, void))(v66 + 8);
  uint64_t v65 = (void (*)(char *, uint64_t))v39;
  v39(v37, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v38, 0);
  v39(v38, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v41 = v37;
  uint64_t v42 = v65;
  v65(v41, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v60;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = v40;
  uint64_t v45 = v42;
  swift_bridgeObjectRelease();
  v42((char *)v38, v13);
  LOBYTE(v42) = v55;
  uint64_t v46 = v54;
  Data.write(to:options:)();
  uint64_t v47 = (uint64_t)v69;
  unint64_t v48 = v70;
  if ((v42 & 1) == 0)
  {
    uint64_t v67 = v44;
    uint64_t v49 = v57;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v56;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v56, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v65;
    v65(v50, v13);
    uint64_t v52 = v49;
    uint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  }
  v45(v43, v13);
  sub_10007392C(v31, v47, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  swift_storeEnumTagMultiPayload();
  v48(v47);
  sub_100013198(v61, v62);
  sub_100013198(v46, v68);
  return sub_100006574(v47, (uint64_t *)&unk_100325860);
}

uint64_t sub_100064FE4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v72 = a6;
  uint64_t v70 = a5;
  LODWORD(v65) = a4;
  uint64_t v67 = a3;
  uint64_t v71 = sub_100009F04(&qword_1003235C0);
  __chkstk_darwin(v71, v8);
  uint64_t v69 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URLResourceValues();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  unint64_t v21 = (char *)&v53 - v20;
  uint64_t v23 = __chkstk_darwin(v19, v22);
  unint64_t v25 = (char *)&v53 - v24;
  __chkstk_darwin(v23, v26);
  unint64_t v28 = (char *)&v53 - v27;
  unint64_t v68 = a1;
  type metadata accessor for BeneficiaryManifestRecord();
  sub_10000A5D8(&qword_1003235C8, (void (*)(uint64_t))type metadata accessor for BeneficiaryManifestRecord);
  swift_retain();
  uint64_t v29 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  uint64_t v58 = v25;
  int v59 = v28;
  uint64_t v56 = v17;
  uint64_t v60 = v21;
  unint64_t v57 = v12;
  uint64_t v61 = v29;
  unint64_t v62 = v30;
  uint64_t v31 = a2;
  swift_release();
  swift_retain();
  sub_100208698();
  OS_dispatch_queue.sync<A>(execute:)();
  long long v33 = v76[0];
  Data.encrypt(using:)(*(uint64_t *)&v76[0], *((unint64_t *)&v76[0] + 1), v61, v62, (uint64_t *)v76);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v73 = v76[0];
  long long v74 = v76[1];
  long long v75 = v76[2];
  sub_1000719DC();
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  int v55 = v65;
  uint64_t v54 = v34;
  unint64_t v68 = v36;
  swift_release();
  sub_100013198(v33, *((unint64_t *)&v33 + 1));
  sub_100071A30((uint64_t *)v76);
  swift_release();
  uint64_t v53 = type metadata accessor for LocalCache();
  uint64_t v37 = v58;
  sub_10000A280();
  uint64_t v38 = (uint64_t)v59;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = v66 + 8;
  unint64_t v39 = *(void (**)(void, void))(v66 + 8);
  uint64_t v65 = (void (*)(char *, uint64_t))v39;
  v39(v37, v13);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v38, 0);
  v39(v38, v13);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v41 = v37;
  uint64_t v42 = v65;
  v65(v41, v13);
  UUID.uuidString.getter();
  uint64_t v43 = v60;
  URL.appendingPathComponent(_:)();
  uint64_t v44 = v40;
  uint64_t v45 = v42;
  swift_bridgeObjectRelease();
  v42((char *)v38, v13);
  LOBYTE(v42) = v55;
  uint64_t v46 = v54;
  Data.write(to:options:)();
  uint64_t v47 = (uint64_t)v69;
  unint64_t v48 = v70;
  if ((v42 & 1) == 0)
  {
    uint64_t v67 = v44;
    uint64_t v49 = v57;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    unint64_t v50 = v56;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v56, v43, v13);
    URL.setResourceValues(_:)();
    unint64_t v51 = v65;
    v65(v50, v13);
    uint64_t v52 = v49;
    uint64_t v45 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v52, v64);
  }
  v45(v43, v13);
  sub_10007392C(v31, v47, (uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord);
  swift_storeEnumTagMultiPayload();
  v48(v47);
  sub_100013198(v61, v62);
  sub_100013198(v46, v68);
  return sub_100006574(v47, &qword_1003235C0);
}

uint64_t sub_100065898(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v69 = a6;
  uint64_t v67 = a5;
  LODWORD(v62) = a4;
  uint64_t v63 = a3;
  uint64_t v68 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v68, v8);
  uint64_t v66 = &v50[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for URLResourceValues();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = &v50[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = &v50[-v21];
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = &v50[-v25];
  __chkstk_darwin(v24, v27);
  uint64_t v29 = &v50[-v28];
  uint64_t v65 = a1;
  type metadata accessor for CustodianRecoverySessionRecord();
  sub_10000A5D8(&qword_1003235D8, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySessionRecord);
  swift_retain();
  uint64_t v30 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v32 = v31;
  uint64_t v56 = v26;
  unint64_t v57 = v29;
  uint64_t v54 = v18;
  int v55 = v13;
  uint64_t v58 = v22;
  uint64_t v59 = a2;
  uint64_t v33 = v30;
  swift_release();
  swift_retain();
  uint64_t v34 = sub_100209160(v33, v32);
  unint64_t v37 = v36;
  uint64_t v52 = v33;
  unint64_t v53 = v32;
  int v51 = v62;
  uint64_t v65 = v34;
  swift_release();
  type metadata accessor for LocalCache();
  unint64_t v62 = v37;
  uint64_t v38 = v56;
  sub_10000A280();
  uint64_t v39 = (uint64_t)v57;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  uint64_t v41 = v14;
  v40((uint64_t)v38, v14);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v39, 0);
  v40(v39, v14);
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  v40((uint64_t)v38, v14);
  UUID.uuidString.getter();
  uint64_t v42 = v58;
  URL.appendingPathComponent(_:)();
  uint64_t v43 = v40;
  LOBYTE(v40) = v51;
  unint64_t v44 = v62;
  swift_bridgeObjectRelease();
  v43(v39, v14);
  Data.write(to:options:)();
  uint64_t v45 = (uint64_t)v66;
  uint64_t v46 = v67;
  if ((v40 & 1) == 0)
  {
    uint64_t v63 = v43;
    uint64_t v47 = v64;
    unint64_t v48 = v55;
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    uint64_t v49 = v54;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v54, v42, v41);
    URL.setResourceValues(_:)();
    uint64_t v43 = v63;
    v63((uint64_t)v49, v41);
    (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v48, v61);
    unint64_t v44 = v62;
  }
  v43((uint64_t)v42, v41);
  sub_10007392C(v59, v45, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  swift_storeEnumTagMultiPayload();
  v46(v45);
  sub_100013198(v65, v44);
  sub_100013198(v52, v53);
  return sub_100006574(v45, &qword_100322C00);
}

uint64_t sub_100065FAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10006ECCC(a1, a2, a3, a4, (unint64_t *)&qword_100323548, (uint64_t)CKRecord_ptr, (unint64_t *)&qword_10032B4B0);
}

void sub_100065FD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_100058D48();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100074F9C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F76A8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100066284(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for CustodianHealthRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_1000590C8();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100071C44;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F6FC8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100066538(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_1000594A0();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100072ADC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F71F8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_1000667EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for CustodianRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_100058E64();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_1000723C8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F70E0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100066AA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_100059358();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100070530;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F6EB0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100066D54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_1000595E8();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_1000753BC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F7770;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100067008(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_100059210();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100073DA8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F7518;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_1000672BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v8 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)CKModifyRecordsOperation) init];
  sub_100211634();
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = sub_100058F80();
  aBlock[0] = v14;
  specialized Array._endMutation()();
  sub_10000850C(0, (unint64_t *)&qword_100323548);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setRecordsToSave:isa];

  sub_10007392C(a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v4;
  sub_100073BB4((uint64_t)v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  *(void *)(v18 + v17) = a2;
  uint64_t v19 = (void *)(v18 + ((v17 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v19 = v23;
  v19[1] = a4;
  aBlock[4] = sub_100074800;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100065FAC;
  aBlock[3] = &unk_1002F75E0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_release();
  [v13 setModifyRecordsCompletionBlock:v20];
  _Block_release(v20);
  [v21 addOperation:v13];
}

void sub_100067570(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v61 = a8;
  unint64_t v62 = a7;
  unint64_t v57 = a6;
  uint64_t v58 = a4;
  uint64_t v60 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_1003235F0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v54 - v26;
  uint64_t v28 = sub_100009F04(&qword_100321CF0);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  uint64_t v59 = (uint64_t *)((char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v64[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v63;
      sub_10006ADE8(v63, v60, v57, v62, v61);
    }
    else
    {
      uint64_t v40 = v59;
      uint64_t *v59 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v62((uint64_t)v40);
      sub_100006574((uint64_t)v40, &qword_100321CF0);
    }
    return;
  }
  uint64_t v58 = v20;
  if (!a1) {
    return;
  }
  unint64_t v57 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v34 = v10;
    if (v53)
    {
LABEL_7:
      unint64_t v35 = v11;
      uint64_t v56 = v34;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v14;
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        uint64_t v11 = v14;
        id v36 = *(id *)(a1 + 32);
      }
      uint64_t v37 = v60;
      swift_bridgeObjectRelease();
      int v38 = *(unsigned __int8 *)(v37 + *(int *)(v19 + 40));
      uint64_t v39 = v36;
      sub_10001686C(v39, v38, (uint64_t)v18);
      id v55 = v39;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E718);
        sub_10007392C(v60, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v64[0] = v60;
          *(_DWORD *)uint64_t v44 = 136315394;
          uint64_t v63 = (void *)sub_100135190(0xD000000000000015, 0x800000010029B170, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 12) = 2080;
          uint64_t v58 = v44 + 14;
          uint64_t v45 = &v24[*(int *)(v19 + 32)];
          uint64_t v46 = v56;
          (*((void (**)(char *, char *, uint64_t))v35 + 2))(v11, v45, v56);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v48 = v35;
          uint64_t v49 = v47;
          unint64_t v51 = v50;
          (*((void (**)(char *, uint64_t))v48 + 1))(v11, v46);
          uint64_t v63 = (void *)sub_100135190(v49, v51, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s %s saved successfully", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        }

        uint64_t v52 = v59;
        sub_10007392C((uint64_t)v27, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        swift_storeEnumTagMultiPayload();
        v62((uint64_t)v52);

        sub_100006574((uint64_t)v52, &qword_100321CF0);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v34 = v10;
    if (v33) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_100067C8C(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, unsigned __int8 *a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v59 = a8;
  uint64_t v60 = a7;
  id v55 = a6;
  uint64_t v56 = a4;
  uint64_t v58 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_10032E120);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CustodianHealthRecord();
  uint64_t v20 = *(char **)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)v53 - v26;
  uint64_t v28 = sub_100009F04(&qword_100323580);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  unint64_t v57 = (void *)((char *)v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v62[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v61;
      sub_10006B41C(v61, (uint64_t)v58, v55, v60, v59);
    }
    else
    {
      uint64_t v42 = v57;
      *unint64_t v57 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v60((uint64_t)v42);
      sub_100006574((uint64_t)v42, &qword_100323580);
    }
    return;
  }
  uint64_t v56 = v20;
  if (!a1) {
    return;
  }
  id v55 = v30;
  uint64_t v33 = (unsigned __int8 *)(a1 & 0xFFFFFFFFFFFFFF8);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = v10;
    if (v52)
    {
LABEL_7:
      uint64_t v36 = v11;
      uint64_t v37 = v35;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        id v38 = *(id *)(a1 + 32);
      }
      uint64_t v39 = v38;
      uint64_t v33 = v58;
      swift_bridgeObjectRelease();
      int v40 = v33[*(int *)(v19 + 36)];
      uint64_t v41 = v39;
      sub_1001B9B90(v41, v40, (uint64_t)v18);
      uint64_t v58 = v41;
      (*((void (**)(char *, void, uint64_t, uint64_t))v56 + 7))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v43 = type metadata accessor for Logger();
        sub_100007288(v43, (uint64_t)qword_10033E718);
        sub_10007392C((uint64_t)v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v54 = swift_slowAlloc();
          v62[0] = v54;
          *(_DWORD *)uint64_t v46 = 136315394;
          uint64_t v61 = (void *)sub_100135190(0xD000000000000015, 0x800000010029B060, v62);
          uint64_t v56 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v46 + 12) = 2080;
          v53[1] = v46 + 14;
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v14, v24, v37);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v36;
          unint64_t v50 = v49;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v37);
          uint64_t v61 = (void *)sub_100135190(v47, v50, v62);
          uint64_t v27 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s %s saved successfully", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        }

        unint64_t v51 = v57;
        sub_10007392C((uint64_t)v27, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        swift_storeEnumTagMultiPayload();
        v60((uint64_t)v51);

        sub_100006574((uint64_t)v51, &qword_100323580);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v35 = v10;
    if (v34) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_10006838C(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, unsigned __int8 *a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v59 = a8;
  uint64_t v60 = a7;
  id v55 = a6;
  uint64_t v56 = a4;
  uint64_t v58 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_100323598);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v20 = *(char **)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)v53 - v26;
  uint64_t v28 = sub_100009F04(&qword_1003235A0);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  unint64_t v57 = (void *)((char *)v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v62[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v61;
      sub_10006BA50(v61, (uint64_t)v58, v55, v60, v59);
    }
    else
    {
      uint64_t v42 = v57;
      *unint64_t v57 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v60((uint64_t)v42);
      sub_100006574((uint64_t)v42, &qword_1003235A0);
    }
    return;
  }
  uint64_t v56 = v20;
  if (!a1) {
    return;
  }
  id v55 = v30;
  uint64_t v33 = (unsigned __int8 *)(a1 & 0xFFFFFFFFFFFFFF8);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = v10;
    if (v52)
    {
LABEL_7:
      uint64_t v36 = v11;
      uint64_t v37 = v35;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        id v38 = *(id *)(a1 + 32);
      }
      uint64_t v39 = v38;
      uint64_t v33 = v58;
      swift_bridgeObjectRelease();
      int v40 = v33[*(int *)(v19 + 40)];
      uint64_t v41 = v39;
      sub_1002887CC(v41, v40, (uint64_t)v18);
      uint64_t v58 = v41;
      (*((void (**)(char *, void, uint64_t, uint64_t))v56 + 7))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v43 = type metadata accessor for Logger();
        sub_100007288(v43, (uint64_t)qword_10033E718);
        sub_10007392C((uint64_t)v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v54 = swift_slowAlloc();
          v62[0] = v54;
          *(_DWORD *)uint64_t v46 = 136315394;
          uint64_t v61 = (void *)sub_100135190(0xD00000000000001BLL, 0x800000010029B0A0, v62);
          uint64_t v56 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v46 + 12) = 2080;
          v53[1] = v46 + 14;
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v14, v24, v37);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v36;
          unint64_t v50 = v49;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v37);
          uint64_t v61 = (void *)sub_100135190(v47, v50, v62);
          uint64_t v27 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s %s saved successfully", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
        }

        unint64_t v51 = v57;
        sub_10007392C((uint64_t)v27, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
        swift_storeEnumTagMultiPayload();
        v60((uint64_t)v51);

        sub_100006574((uint64_t)v51, &qword_1003235A0);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v35 = v10;
    if (v34) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_100068A8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v61 = a8;
  unint64_t v62 = a7;
  unint64_t v57 = a6;
  uint64_t v58 = a4;
  uint64_t v60 = (void (**)(char *, char *, void))a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (***)(char *, char *, void))(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_100328480);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CustodianRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = sub_100009F04(&qword_10032E140);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  uint64_t v59 = (uint64_t *)((char *)&v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v64[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v63;
      sub_10006C084(v63, (uint64_t)v60, v57, v62, v61);
    }
    else
    {
      int v40 = v59;
      uint64_t *v59 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v62((uint64_t)v40);
      sub_100006574((uint64_t)v40, &qword_10032E140);
    }
    return;
  }
  uint64_t v58 = v20;
  if (!a1) {
    return;
  }
  unint64_t v57 = v30;
  uint64_t v33 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = v10;
    if (v55)
    {
LABEL_7:
      uint64_t v36 = v11;
      uint64_t v56 = v35;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        id v37 = *(id *)(a1 + 32);
      }
      id v38 = v37;
      uint64_t v33 = (uint64_t)v60;
      swift_bridgeObjectRelease();
      int v39 = *(unsigned __int8 *)(v33 + *(int *)(v19 + 48));
      uint64_t v11 = v38;
      sub_1000A9178(v11, v39, (uint64_t)v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E718);
        sub_10007392C(v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = v11;
          uint64_t v45 = v44;
          v64[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 136315394;
          uint64_t v63 = (void *)sub_100135190(0x6169646F74737543, 0xEF64726F6365526ELL, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v45 + 12) = 2080;
          uint64_t v58 = v45 + 14;
          uint64_t v46 = v14;
          uint64_t v47 = v14;
          uint64_t v48 = v56;
          v36[2](v47, v24, v56);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v50 = v36;
          unint64_t v52 = v51;
          ((void (*)(char *, uint64_t))v50[1])(v46, v48);
          uint64_t v53 = v49;
          uint64_t v11 = v60;
          uint64_t v63 = (void *)sub_100135190(v53, v52, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s %s saved successfully", (uint8_t *)v45, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        }

        uint64_t v54 = v59;
        sub_10007392C((uint64_t)v27, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        swift_storeEnumTagMultiPayload();
        v62((uint64_t)v54);

        sub_100006574((uint64_t)v54, &qword_10032E140);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v35 = v10;
    if (v34) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_100069194(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v61 = a8;
  unint64_t v62 = a7;
  unint64_t v57 = a6;
  uint64_t v58 = a4;
  uint64_t v60 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_100323550);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v54 - v26;
  uint64_t v28 = sub_100009F04(&qword_10032B730);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  uint64_t v59 = (uint64_t *)((char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v64[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v63;
      sub_10006C6B8(v63, v60, v57, v62, v61);
    }
    else
    {
      int v40 = v59;
      uint64_t *v59 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v62((uint64_t)v40);
      sub_100006574((uint64_t)v40, &qword_10032B730);
    }
    return;
  }
  uint64_t v58 = v20;
  if (!a1) {
    return;
  }
  unint64_t v57 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v34 = v10;
    if (v53)
    {
LABEL_7:
      uint64_t v35 = v11;
      uint64_t v56 = v34;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v14;
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        uint64_t v11 = v14;
        id v36 = *(id *)(a1 + 32);
      }
      uint64_t v37 = v60;
      swift_bridgeObjectRelease();
      int v38 = *(unsigned __int8 *)(v37 + *(int *)(v19 + 36));
      id v39 = v36;
      sub_1000DF48C(v39, v38, v18);
      id v55 = v39;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E718);
        sub_10007392C(v60, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v64[0] = v60;
          *(_DWORD *)uint64_t v44 = 136315394;
          uint64_t v63 = (void *)sub_100135190(0xD000000000000017, 0x800000010029B040, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 12) = 2080;
          uint64_t v58 = v44 + 14;
          uint64_t v45 = &v24[*(int *)(v19 + 28)];
          uint64_t v46 = v56;
          (*((void (**)(char *, char *, uint64_t))v35 + 2))(v11, v45, v56);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v35;
          uint64_t v49 = v47;
          unint64_t v51 = v50;
          (*((void (**)(char *, uint64_t))v48 + 1))(v11, v46);
          uint64_t v63 = (void *)sub_100135190(v49, v51, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s %s saved successfully", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        }

        unint64_t v52 = v59;
        sub_10007392C((uint64_t)v27, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        swift_storeEnumTagMultiPayload();
        v62((uint64_t)v52);

        sub_100006574((uint64_t)v52, &qword_10032B730);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v34 = v10;
    if (v33) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_1000698B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v61 = a8;
  unint64_t v62 = a7;
  unint64_t v57 = a6;
  uint64_t v58 = a4;
  uint64_t v60 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_1003235F8);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v54 - v26;
  uint64_t v28 = sub_100009F04(&qword_100325890);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  uint64_t v59 = (uint64_t *)((char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v64[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v63;
      sub_10006CCEC(v63, v60, v57, v62, v61);
    }
    else
    {
      int v40 = v59;
      uint64_t *v59 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v62((uint64_t)v40);
      sub_100006574((uint64_t)v40, &qword_100325890);
    }
    return;
  }
  uint64_t v58 = v20;
  if (!a1) {
    return;
  }
  unint64_t v57 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v34 = v10;
    if (v53)
    {
LABEL_7:
      uint64_t v35 = v11;
      uint64_t v56 = v34;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v14;
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        uint64_t v11 = v14;
        id v36 = *(id *)(a1 + 32);
      }
      uint64_t v37 = v60;
      swift_bridgeObjectRelease();
      int v38 = *(unsigned __int8 *)(v37 + *(int *)(v19 + 44));
      id v39 = v36;
      sub_10028E3A8(v39, v38, (uint64_t)v18);
      id v55 = v39;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E718);
        sub_10007392C(v60, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v64[0] = v60;
          *(_DWORD *)uint64_t v44 = 136315394;
          uint64_t v63 = (void *)sub_100135190(0xD00000000000001BLL, 0x800000010029B0C0, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 12) = 2080;
          uint64_t v58 = v44 + 14;
          uint64_t v45 = &v24[*(int *)(v19 + 36)];
          uint64_t v46 = v56;
          (*((void (**)(char *, char *, uint64_t))v35 + 2))(v11, v45, v56);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v35;
          uint64_t v49 = v47;
          unint64_t v51 = v50;
          (*((void (**)(char *, uint64_t))v48 + 1))(v11, v46);
          uint64_t v63 = (void *)sub_100135190(v49, v51, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s %s saved successfully", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        }

        unint64_t v52 = v59;
        sub_10007392C((uint64_t)v27, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        swift_storeEnumTagMultiPayload();
        v62((uint64_t)v52);

        sub_100006574((uint64_t)v52, &qword_100325890);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v34 = v10;
    if (v33) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_100069FCC(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, unsigned __int8 *a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v59 = a8;
  uint64_t v60 = a7;
  id v55 = a6;
  uint64_t v56 = a4;
  uint64_t v58 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_1003235E0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v20 = *(char **)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)v53 - v26;
  uint64_t v28 = sub_100009F04((uint64_t *)&unk_100324590);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  unint64_t v57 = (void *)((char *)v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v62[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v61;
      sub_10006D320(v61, (uint64_t)v58, v55, v60, v59);
    }
    else
    {
      uint64_t v42 = v57;
      *unint64_t v57 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v60((uint64_t)v42);
      sub_100006574((uint64_t)v42, (uint64_t *)&unk_100324590);
    }
    return;
  }
  uint64_t v56 = v20;
  if (!a1) {
    return;
  }
  id v55 = v30;
  uint64_t v33 = (unsigned __int8 *)(a1 & 0xFFFFFFFFFFFFFF8);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v35 = v10;
    if (v52)
    {
LABEL_7:
      uint64_t v36 = v11;
      uint64_t v37 = v35;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        id v38 = *(id *)(a1 + 32);
      }
      id v39 = v38;
      uint64_t v33 = v58;
      swift_bridgeObjectRelease();
      int v40 = v33[*(int *)(v19 + 36)];
      uint64_t v41 = v39;
      sub_100113488(v41, v40, (uint64_t)v18);
      uint64_t v58 = (unsigned __int8 *)v41;
      (*((void (**)(char *, void, uint64_t, uint64_t))v56 + 7))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v43 = type metadata accessor for Logger();
        sub_100007288(v43, (uint64_t)qword_10033E718);
        sub_10007392C((uint64_t)v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v54 = swift_slowAlloc();
          v62[0] = v54;
          *(_DWORD *)uint64_t v46 = 136315394;
          uint64_t v61 = (void *)sub_100135190(0xD000000000000017, 0x800000010029AAB0, v62);
          uint64_t v56 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v46 + 12) = 2080;
          v53[1] = v46 + 14;
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v14, v24, v37);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v36;
          unint64_t v50 = v49;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v37);
          uint64_t v61 = (void *)sub_100135190(v47, v50, v62);
          uint64_t v27 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s %s saved successfully", (uint8_t *)v46, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        }

        unint64_t v51 = v57;
        sub_10007392C((uint64_t)v27, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        swift_storeEnumTagMultiPayload();
        v60((uint64_t)v51);

        sub_100006574((uint64_t)v51, (uint64_t *)&unk_100324590);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v35 = v10;
    if (v34) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

void sub_10006A6CC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v61 = a8;
  unint64_t v62 = a7;
  unint64_t v57 = a6;
  uint64_t v58 = a4;
  uint64_t v60 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04(&qword_1003235E8);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v54 - v26;
  uint64_t v28 = sub_100009F04((uint64_t *)&unk_100325860);
  uint64_t v30 = (void *)__chkstk_darwin(v28, v29);
  uint64_t v59 = (uint64_t *)((char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v64[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      unint64_t v32 = v63;
      sub_10006D954(v63, v60, v57, v62, v61);
    }
    else
    {
      int v40 = v59;
      uint64_t *v59 = a3;
      swift_storeEnumTagMultiPayload();
      swift_errorRetain();
      v62((uint64_t)v40);
      sub_100006574((uint64_t)v40, (uint64_t *)&unk_100325860);
    }
    return;
  }
  uint64_t v58 = v20;
  if (!a1) {
    return;
  }
  unint64_t v57 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v34 = v10;
    if (v53)
    {
LABEL_7:
      uint64_t v35 = v11;
      uint64_t v56 = v34;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v14;
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        uint64_t v11 = v14;
        id v36 = *(id *)(a1 + 32);
      }
      uint64_t v37 = v60;
      swift_bridgeObjectRelease();
      int v38 = *(unsigned __int8 *)(v37 + *(int *)(v19 + 36));
      id v39 = v36;
      sub_1001BE70C(v39, v38, (uint64_t)v18);
      id v55 = v39;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v18, 0, 1, v19);
      sub_100073BB4((uint64_t)v18, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
      if (qword_100320B78 == -1)
      {
LABEL_14:
        uint64_t v41 = type metadata accessor for Logger();
        sub_100007288(v41, (uint64_t)qword_10033E718);
        sub_10007392C(v60, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v64[0] = v60;
          *(_DWORD *)uint64_t v44 = 136315394;
          uint64_t v63 = (void *)sub_100135190(0xD000000000000014, 0x800000010029B150, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v44 + 12) = 2080;
          uint64_t v58 = v44 + 14;
          os_log_type_t v45 = &v24[*(int *)(v19 + 28)];
          uint64_t v46 = v56;
          (*((void (**)(char *, char *, uint64_t))v35 + 2))(v11, v45, v56);
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
          sub_10000A5D8((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v48 = v35;
          uint64_t v49 = v47;
          unint64_t v51 = v50;
          (*((void (**)(char *, uint64_t))v48 + 1))(v11, v46);
          uint64_t v63 = (void *)sub_100135190(v49, v51, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s %s saved successfully", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000751DC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        }

        uint64_t v52 = v59;
        sub_10007392C((uint64_t)v27, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        swift_storeEnumTagMultiPayload();
        v62((uint64_t)v52);

        sub_100006574((uint64_t)v52, (uint64_t *)&unk_100325860);
        sub_1000751DC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
        return;
      }
LABEL_24:
      swift_once();
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v33 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v34 = v10;
    if (v33) {
      goto LABEL_7;
    }
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_10006ADE8(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_retain();
    swift_retain();
    sub_100070714((uint64_t)v17, (uint64_t)sub_1000751B0, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_100321CF0);
  }
}

uint64_t sub_10006B41C(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_100323580);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CustodianHealthRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
    swift_retain();
    swift_retain();
    sub_100070A74((uint64_t)v17, (uint64_t)sub_100071EE4, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_100323580);
  }
}

uint64_t sub_10006BA50(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    swift_retain();
    swift_retain();
    sub_100070DD8((uint64_t)v17, (uint64_t)sub_100072CF0, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_1003235A0);
  }
}

uint64_t sub_10006C084(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CustodianRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_retain();
    swift_retain();
    sub_10007113C((uint64_t)v17, (uint64_t)sub_1000725E4, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_10032E140);
  }
}

uint64_t sub_10006C6B8(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_10032B730);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    swift_retain();
    swift_retain();
    sub_10007149C((uint64_t)v17, (uint64_t)sub_1000706DC, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_10032B730);
  }
}

uint64_t sub_10006CCEC(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    swift_retain();
    swift_retain();
    sub_100073FDC((uint64_t)v17, (uint64_t)sub_100075540, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, &qword_100325890);
  }
}

uint64_t sub_10006D320(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    swift_retain();
    swift_retain();
    sub_10007433C((uint64_t)v17, (uint64_t)sub_100073F0C, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, (uint64_t *)&unk_100324590);
  }
}

uint64_t sub_10006D954(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v52 = a4;
  uint64_t v46 = a3;
  uint64_t v47 = sub_100009F04((uint64_t *)&unk_100325860);
  __chkstk_darwin(v47, v8);
  uint64_t v48 = (void **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for BenefactorInfoRecord();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v13 = __chkstk_darwin(v10 - 8, v12);
  uint64_t v14 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v46 - v16;
  type metadata accessor for CKError(0);
  uint64_t v54 = 26;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  sub_10000A5D8((unint64_t *)&qword_1003210D0, type metadata accessor for CKError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v18 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v49 = a1;
  uint64_t v19 = (void *)sub_1001A8B9C(v54, a1);

  if (v19) {
    goto LABEL_3;
  }
  uint64_t v54 = 28;
  sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v20 = v55;
  uint64_t v53 = (uint64_t)v55;
  _BridgedStoredNSError.code.getter();

  uint64_t v21 = (void *)sub_1001A8B9C(v54, v49);
  if (v21)
  {
LABEL_3:
    sub_10007392C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    sub_10007392C(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    unint64_t v22 = (*(unsigned __int8 *)(v50 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v51;
    v23[2] = v52;
    uint64_t v23[3] = a5;
    v23[4] = v24;
    sub_100073BB4((uint64_t)v14, (uint64_t)v23 + v22, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
    swift_retain();
    swift_retain();
    sub_100074A34((uint64_t)v17, (uint64_t)sub_100074964, (uint64_t)v23);
    swift_release();
    return sub_1000751DC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  }
  else
  {
    uint64_t v50 = a5;
    uint64_t v54 = 14;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = v55;
    uint64_t v53 = (uint64_t)v55;
    _BridgedStoredNSError.code.getter();

    uint64_t v27 = v49;
    uint64_t v28 = (void *)sub_1001A8B9C(v54, v49);

    if (v28)
    {
      uint64_t v29 = v52;
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100007288(v30, (uint64_t)qword_10033E718);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Conflicted record. Need to resolve the conflict before saving.", v33, 2u);
        swift_slowDealloc();
      }

      sub_100215CD0(v27, v46);
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v27;
      swift_storeEnumTagMultiPayload();
      id v35 = v27;
      v29(v34);
    }
    else
    {
      if (qword_100320B78 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100007288(v36, (uint64_t)qword_10033E718);
      id v37 = v27;
      int v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        int v40 = (uint8_t *)swift_slowAlloc();
        id v55 = (void *)swift_slowAlloc();
        *(_DWORD *)int v40 = 136315138;
        id v41 = v37;
        uint64_t v42 = related decl 'e' for CKErrorCode.description.getter();
        unint64_t v44 = v43;

        uint64_t v54 = sub_100135190(v42, v44, (uint64_t *)&v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown error while saving the record %s.", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v34 = (uint64_t)v48;
      *uint64_t v48 = v37;
      swift_storeEnumTagMultiPayload();
      id v45 = v37;
      v52(v34);
    }
    return sub_100006574(v34, (uint64_t *)&unk_100325860);
  }
}

void sub_10006DF88(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v11);
    sub_100006574((uint64_t)v11, &qword_100321CF0);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 40)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA18;
    }
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    swift_bridgeObjectRetain();
    id v15 = sub_10028CC20(v14, v13);
    id v18 = [v15 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_100065FD0(a5, v18, a2, a3);
    uint64_t v16 = v18;
  }
}

void sub_10006E1B0(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_1003235A0);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v11);
    sub_100006574((uint64_t)v11, &qword_1003235A0);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 40)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033E9F8;
    }
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    swift_bridgeObjectRetain();
    id v15 = sub_10028CC20(v14, v13);
    id v18 = [v15 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_100066538(a5, v18, a2, a3);
    uint64_t v16 = v18;
  }
}

void sub_10006E3D8(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v11);
    sub_100006574((uint64_t)v11, &qword_10032E140);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(type metadata accessor for CustodianRecord() + 48)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033E9F8;
    }
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    swift_bridgeObjectRetain();
    id v15 = sub_10028CC20(v14, v13);
    id v18 = [v15 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_1000667EC(a5, v18, a2, a3);
    uint64_t v16 = v18;
  }
}

void sub_10006E600(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v9, v9);
  uint64_t v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v11);
    sub_100006574((uint64_t)v11, &qword_100325890);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(type metadata accessor for InheritanceInvitationRecord() + 44)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v12 = &qword_10033EA18;
    }
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    swift_bridgeObjectRetain();
    id v15 = sub_10028CC20(v14, v13);
    id v18 = [v15 privateCloudDatabase];
    swift_bridgeObjectRelease();

    sub_100066D54(a5, v18, a2, a3);
    uint64_t v16 = v18;
  }
}

void sub_10006E828(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), void (*a8)(uint64_t, id, void (*)(void), uint64_t))
{
  uint64_t v15 = sub_100009F04(a6);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (uint64_t *)((char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v17 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v17);
    sub_100006574((uint64_t)v17, a6);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(a7(0) + 36)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      id v18 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      id v18 = &qword_10033E9F8;
    }
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    id v21 = sub_10028CC20(v20, v19);
    id v24 = [v21 privateCloudDatabase];
    swift_bridgeObjectRelease();

    a8(a5, v24, (void (*)(void))a2, a3);
    unint64_t v22 = v24;
  }
}

void sub_10006EA68(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(void), void (*a8)(uint64_t, id, void (*)(void), uint64_t))
{
  uint64_t v15 = sub_100009F04(a6);
  __chkstk_darwin(v15, v15);
  uint64_t v17 = (uint64_t *)((char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *uint64_t v17 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a2(v17);
    sub_100006574((uint64_t)v17, a6);
  }
  else
  {
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(a7(0) + 36)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      id v18 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      id v18 = &qword_10033EA18;
    }
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    id v21 = sub_10028CC20(v20, v19);
    id v24 = [v21 privateCloudDatabase];
    swift_bridgeObjectRelease();

    a8(a5, v24, (void (*)(void))a2, a3);
    unint64_t v22 = v24;
  }
}

uint64_t sub_10006ECA8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10006ECCC(a1, a2, a3, a4, &qword_100323568, (uint64_t)CKRecordZone_ptr, &qword_100323560);
}

uint64_t sub_10006ECCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v10 = a2;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10000850C(0, a5);
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_10000850C(0, a7);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v12 = a4;
  v11(v10, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

Class sub_10006EDAC()
{
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v2 = sub_10028CFBC(v0, v1);
  swift_bridgeObjectRelease();
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v3 = UUID.uuidString.getter();
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  v7._countAndFlagsBits = v3;
  v7._object = v5;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)v6).super.isa;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E718);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to unarchive record -- creating new one", v12, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_100323548);
  v13._object = (void *)0x8000000100299F70;
  v13._countAndFlagsBits = 0xD000000000000020;
  Class isa = CKRecord.init(recordType:recordID:)(v13, v8).super.isa;

  return isa;
}

Class sub_10006EF88()
{
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10028CFBC(0xD000000000000011, (void *)0x800000010029B080);
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v1 = UUID.uuidString.getter();
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  v5._countAndFlagsBits = v1;
  v5._object = v3;
  v6.super.Class isa = CKRecordID.init(recordName:zoneID:)(v5, (CKRecordZoneID)v4).super.isa;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E718);
  CKRecordID v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to unarchive record -- creating new one", v10, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_100323548);
  v11._countAndFlagsBits = 0x6169646F74737543;
  v11._object = (void *)0xEF64726F6365526ELL;
  Class isa = CKRecord.init(recordType:recordID:)(v11, v6).super.isa;

  return isa;
}

Class sub_10006F160(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  a2(0);
  uint64_t v7 = UUID.uuidString.getter();
  os_log_type_t v9 = sub_10028CFBC(v7, v8);
  swift_bridgeObjectRelease();
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  uint64_t v10 = UUID.uuidString.getter();
  id v12 = v11;
  Swift::String v13 = v9;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  v15.super.Class isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E718);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to unarchive record -- creating new one", v19, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_100323548);
  v20._countAndFlagsBits = a3;
  v20._object = a4;
  Class isa = CKRecord.init(recordType:recordID:)(v20, v15).super.isa;

  return isa;
}

Class sub_10006F344(uint64_t a1, void (*a2)(void), uint64_t a3, void *a4)
{
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v7 = UUID.uuidString.getter();
  os_log_type_t v9 = sub_10028CFBC(v7, v8);
  swift_bridgeObjectRelease();
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  a2(0);
  uint64_t v10 = UUID.uuidString.getter();
  id v12 = v11;
  Swift::String v13 = v9;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  v15.super.Class isa = CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13).super.isa;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100007288(v16, (uint64_t)qword_10033E718);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to unarchive record -- creating new one", v19, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_100323548);
  v20._countAndFlagsBits = a3;
  v20._object = a4;
  Class isa = CKRecord.init(recordType:recordID:)(v20, v15).super.isa;

  return isa;
}

Class sub_10006F528()
{
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10028CFBC(0xD000000000000011, (void *)0x800000010029B080);
  sub_10000850C(0, (unint64_t *)&qword_10032B4B0);
  type metadata accessor for InheritanceInvitationRecord();
  uint64_t v1 = UUID.uuidString.getter();
  uint64_t v3 = v2;
  uint64_t v4 = v0;
  v5._countAndFlagsBits = v1;
  v5._object = v3;
  v6.super.Class isa = CKRecordID.init(recordName:zoneID:)(v5, (CKRecordZoneID)v4).super.isa;
  if (qword_100320B78 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E718);
  CKRecordID v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to unarchive record -- creating new one", v10, 2u);
    swift_slowDealloc();
  }

  sub_10000850C(0, (unint64_t *)&qword_100323548);
  v11._countAndFlagsBits = 0xD00000000000001BLL;
  v11._object = (void *)0x800000010029B0C0;
  Class isa = CKRecord.init(recordType:recordID:)(v11, v6).super.isa;

  return isa;
}

uint64_t sub_10006F708(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

uint64_t sub_10006F744(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_10032B720);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  Swift::String v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E778);
  Swift::String v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v6;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    CKRecordID v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v25[0] = v20;
    *(_DWORD *)CKRecordID v15 = 136315138;
    if (qword_100320BD8 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_100323468;
    unint64_t v16 = unk_100323470;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100135190(v17, v16, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - started.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a1 = v22;
    a2 = v23;
    uint64_t v6 = v21;
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v7);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_100008EF8(v25, v25[3]);
  os_log_type_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = v3;
  void v18[5] = v6;
  swift_retain();
  swift_retain();
  sub_1000EAAFC((uint64_t)sub_10006FA90, (uint64_t)v18);
  swift_release();
  return sub_100008EA8((uint64_t)v25);
}

uint64_t sub_10006FA88()
{
  return sub_10006FAE0(48);
}

uint64_t sub_10006FA90(uint64_t a1, char a2)
{
  return sub_100059750(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10006FAA0()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006FAD8()
{
  return sub_10006FAE0(40);
}

uint64_t sub_10006FAE0(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006FB2C()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

void sub_10006FC88(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5);
  uint64_t v7 = *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_10005A5E8(a1, v1 + v4, v6, v7);
}

uint64_t sub_10006FD3C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006FD74()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10006FED4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(void (**)(uint64_t))(v1 + v5 + 8);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10005BBC4(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_10006FF8C()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  unint64_t v15 = ((*(void *)(*(void *)v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v16 = v2 | v6 | 7;
  uint64_t v8 = v0 + v3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  v10(v8 + v1[9], v9);
  sub_100013198(*(void *)(v8 + v1[10]), *(void *)(v8 + v1[10] + 8));
  swift_release();
  swift_release();
  uint64_t v11 = v0 + v7;
  v10(v0 + v7, v9);
  uint64_t v12 = v0 + v7 + v5[7];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_100013198(*(void *)(v11 + v5[8]), *(void *)(v11 + v5[8] + 8));
  v10(v0 + v7 + v5[9], v9);
  sub_100013198(*(void *)(v11 + v5[10]), *(void *)(v11 + v5[10] + 8));

  return _swift_deallocObject(v0, v15, v16);
}

uint64_t sub_1000701E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BenefactorInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v8 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v9 = *(void *)(v1 + v5 + 8);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = (v1 + ((v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));

  return sub_10005C43C(a1, v1 + v4, v8, v9, v10, v11);
}

uint64_t sub_100070310()
{
  return sub_10007032C(48);
}

uint64_t sub_100070318(uint64_t a1)
{
  return sub_10005D878(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100070324()
{
  return sub_10007032C(40);
}

uint64_t sub_10007032C(uint64_t a1)
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100070378(uint64_t a1)
{
  return sub_10005E1B4(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100070384()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v11 = v2 | 7;
  unint64_t v4 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = v5 + v1[7];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_100013198(*(void *)(v5 + v1[8]), *(void *)(v5 + v1[8] + 8));
  v7(v5 + v1[9], v6);
  sub_100013198(*(void *)(v5 + v1[10]), *(void *)(v5 + v1[10] + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v11);
}

uint64_t sub_100070530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100069194);
}

uint64_t sub_10007055C()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1000706DC(uint64_t a1)
{
}

uint64_t sub_100070714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  unint64_t v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7720;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 40)] == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA18;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_100070A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianHealthRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  unint64_t v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7040;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 36)] == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033E9F8;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_100070DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecoveryInfoRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  unint64_t v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7270;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 40)] == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033E9F8;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_10007113C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10028CFBC(0xD000000000000011, (void *)0x800000010029B080);
  id v11 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v10];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002AB070;
  *(void *)(v12 + 32) = v11;
  aBlock[0] = v12;
  specialized Array._endMutation()();
  id v13 = (void *)aBlock[0];
  id v14 = v11;
  v25.value._rawValue = v13;
  v25.is_nil = 0;
  v15.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v25, v26).super.super.super.super.isa;
  sub_100211634();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7158;
  CKModifyRecordZonesOperation v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v15.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v17];
  _Block_release(v17);
  if (v9[*(int *)(v6 + 48)] == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v18 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v18 = &qword_10033E9F8;
  }
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  id v21 = sub_10028CC20(v20, v19);
  id v22 = [v21 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v22 addOperation:v15.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10007149C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceHealthRecord();
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  CKModifyRecordZonesOperation v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000717FC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F6F28;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 36)] == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA18;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_1000717FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100215A30(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 16));
}

uint64_t sub_100071804()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100071994()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100062CF0);
}

uint64_t sub_1000719C0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100208648(v1, a1);
}

unint64_t sub_1000719DC()
{
  unint64_t result = qword_100323578;
  if (!qword_100323578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323578);
  }
  return result;
}

uint64_t *sub_100071A30(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100013198(*a1, a1[1]);
  sub_100013198(v2, v3);
  sub_100013198(v4, v5);
  return a1;
}

uint64_t sub_100071A90()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + v3, v6);
  v7(v0 + v3 + v1[5], v6);
  uint64_t v8 = v0 + v3 + v1[6];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100013198(*v10, v11);
  }
  unint64_t v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100013198(*(void *)(v5 + v1[8]), *(void *)(v5 + v1[8] + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100071C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100067C8C);
}

uint64_t sub_100071C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a4(0) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v14 = *(void *)(v5 + v11);
  uint64_t v15 = *(void *)(v5 + v12);
  uint64_t v16 = *(void *)(v5 + v12 + 8);

  return a5(a1, a2, a3, v13, v5 + v10, v14, v15, v16);
}

uint64_t sub_100071D50()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100071EE4(uint64_t a1)
{
}

uint64_t sub_100071F1C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianHealthRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v0 + v3, v5);
  v6(v0 + v3 + v1[5], v5);
  uint64_t v7 = v0 + v3 + v1[6];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v0 + v3 + v1[8]), *(void *)(v0 + v3 + v1[8] + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000720C0()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000612A8);
}

uint64_t sub_1000720EC(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + v4;
  uint64_t v8 = (uint64_t *)(v2 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  unint64_t v10 = (uint64_t *)(v2 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *((unsigned __int8 *)v8 + 8);

  return a2(v6, v7, v9, v13, v11, v12);
}

uint64_t sub_1000721B0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  unint64_t v12 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();

  return _swift_deallocObject(v0, v13 + 16, v2 | 7);
}

uint64_t sub_1000723C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100068A8C);
}

uint64_t sub_1000723F4()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000725E4(uint64_t a1)
{
  return sub_100072610(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10006E3D8);
}

uint64_t sub_100072610(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = (char *)v3 + ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6, v7, v8, v9);
}

uint64_t sub_1000726A0()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1000728A8()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100062458);
}

uint64_t sub_1000728D4()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  unint64_t v11 = (v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100072ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_10006838C);
}

uint64_t sub_100072B08()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

uint64_t sub_100072CF0(uint64_t a1)
{
  return sub_100072610(a1, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10006E1B0);
}

uint64_t sub_100072D1C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100072D54()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v12 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100072F4C()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100061B80);
}

uint64_t sub_100072F78()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000730C8()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063E58);
}

uint64_t sub_1000730F4()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100073264()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000635A4);
}

uint64_t sub_100073290()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v10 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100073488()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000609F4);
}

uint64_t sub_1000734B4()
{
  uint64_t v1 = (int *)(type metadata accessor for BeneficiaryManifestRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[8], v7);
  sub_100013198(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100073600()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for BeneficiaryManifestRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100064FE4);
}

uint64_t sub_10007362C()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10007377C()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100064730);
}

uint64_t sub_1000737A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100073888(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10005B474(a1, v4, v5, v6, v7);
}

uint64_t sub_10007392C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100073994()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  v7(v0 + v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[9]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[10]), *(void *)(v4 + v1[10] + 8));
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v12 + v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100073BB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100073C1C()
{
  return sub_1000720EC((uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100065898);
}

uint64_t sub_100073C48()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_100073DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100069FCC);
}

uint64_t sub_100073DD4()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100073F0C(uint64_t a1)
{
}

void sub_100073F44(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), void (*a5)(uint64_t, id, void (*)(void), uint64_t))
{
  uint64_t v10 = *(void *)(a2(0) - 8);
  sub_10006E828(a1, *(void (**)(void *))(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), v5 + ((*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), a3, a4, a5);
}

uint64_t sub_100073FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for InheritanceInvitationRecord();
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10028CFBC(0xD000000000000011, (void *)0x800000010029B080);
  id v11 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v10];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002AB070;
  *(void *)(v12 + 32) = v11;
  aBlock[0] = v12;
  specialized Array._endMutation()();
  uint64_t v13 = (void *)aBlock[0];
  id v14 = v11;
  v25.value._rawValue = v13;
  v25.is_nil = 0;
  v15.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v25, v26).super.super.super.super.isa;
  sub_100211634();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F77E8;
  CKModifyRecordZonesOperation v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v15.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v17];
  _Block_release(v17);
  if (v9[*(int *)(v6 + 44)] == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v18 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v18 = &qword_10033EA18;
  }
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  id v21 = sub_10028CC20(v20, v19);
  id v22 = [v21 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v22 addOperation:v15.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_10007433C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  CKModifyRecordZonesOperation v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7590;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 36)] == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033E9F8;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1000746A0()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_100074800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_10006A6CC);
}

uint64_t sub_10007482C()
{
  uint64_t v1 = (int *)(type metadata accessor for BenefactorInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

void sub_100074964(uint64_t a1)
{
}

void sub_10007499C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void), void (*a5)(uint64_t, id, void (*)(void), uint64_t))
{
  uint64_t v10 = *(void *)(a2(0) - 8);
  sub_10006EA68(a1, *(void (**)(void *))(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), v5 + ((*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), a3, a4, a5);
}

uint64_t sub_100074A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BenefactorInfoRecord();
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007392C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = sub_10028CFBC(v10, v11);
  swift_bridgeObjectRelease();
  id v13 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v12];
  sub_10000850C(0, &qword_100323558);
  sub_100009F04((uint64_t *)&unk_100328470);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002AB070;
  *(void *)(v14 + 32) = v13;
  aBlock[0] = v14;
  specialized Array._endMutation()();
  CKModifyRecordZonesOperation v15 = (void *)aBlock[0];
  id v16 = v13;
  v27.value._rawValue = v15;
  v27.is_nil = 0;
  v17.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v27, v28).super.super.super.super.isa;
  sub_100211634();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  aBlock[4] = sub_1000755EC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10006ECA8;
  aBlock[3] = &unk_1002F7658;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v17.super.super.super.super.isa setModifyRecordZonesCompletionBlock:v19];
  _Block_release(v19);
  if (v9[*(int *)(v6 + 36)] == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v20 = &qword_10033EA18;
  }
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  swift_bridgeObjectRetain();
  id v23 = sub_10028CC20(v22, v21);
  id v24 = [v23 privateCloudDatabase];
  swift_bridgeObjectRelease();

  [v24 addOperation:v17.super.super.super.super.isa];
  return sub_1000751DC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100074D94()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v11 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  unint64_t v9 = (v11 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100074F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100067570);
}

uint64_t sub_100074FC8()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_1000751B0(uint64_t a1)
{
  return sub_100072610(a1, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10006DF88);
}

uint64_t sub_1000751DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007523C()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v4);
}

uint64_t sub_1000753BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100071C70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_1000698B0);
}

uint64_t sub_1000753E8()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceInvitationRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v6 + v1[11], v7);
  sub_100013198(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100075540(uint64_t a1)
{
  return sub_100072610(a1, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_10006E600);
}

BOOL sub_100075654(char *a1, char *a2)
{
  return qword_1002AB210[*a1] == qword_1002AB210[*a2];
}

Swift::Int sub_100075678()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002AB210[v1]);
  return Hasher._finalize()();
}

void sub_1000756C8()
{
  Hasher._combine(_:)(qword_1002AB210[*v0]);
}

Swift::Int sub_100075700()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1002AB210[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10007574C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000759F0(*a1);
  *a2 = result;
  return result;
}

void sub_100075778(void *a1@<X8>)
{
  *a1 = qword_1002AB210[*v1];
}

unsigned char *storeEnumTagSinglePayload for InheritanceMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007585CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageType()
{
  return &type metadata for InheritanceMessageType;
}

unint64_t sub_100075898()
{
  unint64_t result = qword_100323600;
  if (!qword_100323600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323600);
  }
  return result;
}

uint64_t sub_1000758EC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007594C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_10007599C()
{
  unint64_t result = qword_100323608;
  if (!qword_100323608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323608);
  }
  return result;
}

uint64_t sub_1000759F0(uint64_t a1)
{
  uint64_t v1 = a1 - 101;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

uint64_t sub_100075A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  uint64_t v6 = type metadata accessor for CloudShareInfo();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v60 + 64);
  uint64_t v9 = __chkstk_darwin(v6 - 8, v8);
  uint64_t v65 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v13 = type metadata accessor for InheritanceAccessKeyMessage();
  uint64_t v61 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v61 + 64);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v62 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v54 - v19;
  __chkstk_darwin(v18, v21);
  id v23 = (char *)&v54 - v22;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100007288(v24, (uint64_t)qword_10033E760);
  sub_10007CA08(a1, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  sub_10007CA08(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  Swift::OpaquePointer_optional v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v58 = v4;
    uint64_t v29 = v28;
    uint64_t v57 = swift_slowAlloc();
    uint64_t v67 = v57;
    *(_DWORD *)uint64_t v29 = 136315394;
    uint64_t v59 = v12;
    os_log_t v56 = v25;
    type metadata accessor for URL();
    int v55 = v27;
    sub_10007BFC4((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = sub_100135190(v30, v31, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10007BB1C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v54 = v29 + 14;
    type metadata accessor for UUID();
    sub_10007BFC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v66 = sub_100135190(v32, v33, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = v59;
    sub_10007BB1C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    os_log_t v34 = v56;
    _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v55, "Attempting to accept share with URL %s from %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v58;
    swift_slowDealloc();
  }
  else
  {
    sub_10007BB1C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
    sub_10007BB1C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  }
  id v35 = sub_100008EF8((void *)(v4 + 16), *(void *)(v4 + 40));
  sub_10007CA08(a1 + *(int *)(v13 + 24), (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  uint64_t v36 = swift_allocObject();
  swift_weakInit();
  uint64_t v37 = v62;
  sub_10007CA08(a1, v62, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  unint64_t v38 = (*(unsigned __int8 *)(v61 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v36;
  sub_10007CC00(v37, v39 + v38, (uint64_t (*)(void))type metadata accessor for InheritanceAccessKeyMessage);
  int v40 = (void *)(v39 + ((v14 + v38 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v41 = v64;
  *int v40 = v63;
  v40[1] = v41;
  uint64_t v63 = *v35;
  uint64_t v42 = qword_100320CE8;
  swift_retain();
  swift_retain();
  if (v42 != -1) {
    swift_once();
  }
  uint64_t v44 = qword_10033EA28;
  unint64_t v43 = unk_10033EA30;
  uint64_t v45 = qword_100320CC8;
  swift_bridgeObjectRetain();
  if (v45 != -1) {
    swift_once();
  }
  id v46 = sub_10028CC20(v44, v43);
  swift_bridgeObjectRelease();
  uint64_t v47 = v65;
  sub_10007CA08((uint64_t)v12, v65, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  uint64_t v48 = (uint64_t)v12;
  unint64_t v49 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  unint64_t v50 = (v7 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_10007BD30;
  *(void *)(v51 + 24) = v39;
  sub_10007CC00(v47, v51 + v49, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  *(void *)(v51 + v50) = v63;
  *(void *)(v51 + ((v50 + 15) & 0xFFFFFFFFFFFFFFF8)) = v46;
  swift_retain();
  swift_retain();
  id v52 = v46;
  sub_1001960A4(v52, v48, (uint64_t)sub_10007BF08, v51);
  swift_release();
  swift_release();

  sub_10007BB1C(v48, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  return swift_release();
}

uint64_t sub_10007615C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E760);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v19[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v10 = String.init<A>(describing:)();
      sub_100135190(v10, v11, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to accept BeneficiaryInfoRecord share. Error - %s.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E760);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully accepted BeneficiaryInfoRecord share.", v16, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v17 = type metadata accessor for InheritanceAccessKeyMessage();
      sub_10007C00C(a3 + *(int *)(v17 + 20));
      swift_release();
    }
  }
  return a4(a1);
}

uint64_t sub_100076464(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), uint64_t a5, const char *a6)
{
  uint64_t v40 = a5;
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v15 = (const char *)sub_100009F04(&qword_100322948);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (uint64_t *)((char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (uint64_t *)((char *)v38 - v21);
  sub_10007B67C(a1, (uint64_t)v38 - v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v23 = *v22;
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    Swift::OpaquePointer_optional v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = a2;
      uint64_t v28 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v39 = a4;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100135190(v27, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v41 = v23;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v41 = sub_100135190(v29, v30, &v42);
      a4 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to share record with %s. Error - %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    *uint64_t v19 = v23;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a4(v19);
    swift_errorRelease();
    return sub_100006574((uint64_t)v19, &qword_100322948);
  }
  else
  {
    sub_10007CC00((uint64_t)v22, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E760);
    swift_bridgeObjectRetain_n();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v38[1] = v15;
      uint64_t v34 = swift_slowAlloc();
      v38[0] = a6;
      id v35 = (uint8_t *)v34;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v39 = a4;
      uint64_t v42 = v36;
      *(_DWORD *)id v35 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = sub_100135190(a2, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v38[0], v35, 0xCu);
      swift_arrayDestroy();
      a4 = v39;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_10007CA08((uint64_t)v14, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
    swift_storeEnumTagMultiPayload();
    a4(v19);
    sub_100006574((uint64_t)v19, &qword_100322948);
    return sub_10007BB1C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CloudShareInfo);
  }
}

uint64_t type metadata accessor for InheritanceCloudSharingController()
{
  return self;
}

void sub_100076A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v26 - v11;
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E760);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      os_log_type_t v26 = (void *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_10007BFC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v28 = sub_100135190(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v19 = _convertErrorToNSError(_:)();
      uint64_t v28 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed performing initial health check for %s. Error: %@", (uint8_t *)v16, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E760);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      sub_10007BFC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v28 = sub_100135190(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Completed initial health check for %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }
  }
}

void sub_100076F54(void *a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v52 + 64);
  __chkstk_darwin(v14, v16);
  uint64_t v17 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (id *)((char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v19);
    sub_100006574((uint64_t)v19, &qword_100322948);
  }
  else
  {
    unint64_t v49 = (void (*)(void))a3;
    uint64_t v20 = qword_100320B78;
    id v21 = a1;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v50 = v14;
    uint64_t v51 = a1;
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E718);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Fetched CK Participant success", v25, 2u);
      swift_slowDealloc();
    }

    sub_10000850C(0, &qword_100323560);
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v28 = v27;
    v29._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29._object = v30;
    v31._countAndFlagsBits = v26;
    v31._object = v28;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v31, v29).super.isa;
    id v33 = objc_allocWithZone((Class)CKShare);
    Class v48 = isa;
    id v34 = [v33 initWithRecordZoneID:isa];
    [v21 setPermission:a8];
    [v34 addParticipant:v21];
    sub_10000850C(0, &qword_1003236B0);
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1002AB070;
    *(void *)(v35 + 32) = v34;
    aBlock[0] = v35;
    specialized Array._endMutation()();
    uint64_t v36 = (void *)aBlock[0];
    id v47 = v34;
    v54.value._rawValue = v36;
    v54.is_nil = 0;
    v37.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v54, v55).super.super.super.super.isa;
    sub_10007CA08(a5, (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    unint64_t v38 = (*(unsigned __int8 *)(v52 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = v49;
    v39[3] = a4;
    v39[4] = v21;
    sub_10007CC00((uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v39 + v38, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    aBlock[4] = sub_10007B638;
    aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100065FAC;
    aBlock[3] = &unk_1002F7940;
    uint64_t v40 = _Block_copy(aBlock);
    uint64_t v41 = v51;
    sub_10007B664(v51, 0);
    swift_retain();
    swift_release();
    [(objc_class *)v37.super.super.super.super.isa setModifyRecordsCompletionBlock:v40];
    _Block_release(v40);
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(v50 + 40)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v42 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v42 = &qword_10033EA18;
    }
    uint64_t v44 = *v42;
    unint64_t v43 = v42[1];
    swift_bridgeObjectRetain();
    id v45 = sub_10028CC20(v44, v43);
    id v46 = [v45 privateCloudDatabase];
    swift_bridgeObjectRelease();

    [v46 addOperation:v37.super.super.super.super.isa];
    sub_10007B670(v41, 0);
  }
}

void sub_1000774D4(void *a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v52 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v52 + 64);
  __chkstk_darwin(v14, v16);
  uint64_t v17 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v17, v17);
  uint64_t v19 = (id *)((char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *uint64_t v19 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v19);
    sub_100006574((uint64_t)v19, &qword_100322948);
  }
  else
  {
    unint64_t v49 = (void (*)(void))a3;
    uint64_t v20 = qword_100320B78;
    id v21 = a1;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v50 = v14;
    uint64_t v51 = a1;
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E718);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Fetched CK Participant success", v25, 2u);
      swift_slowDealloc();
    }

    sub_10000850C(0, &qword_100323560);
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v28 = v27;
    v29._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29._object = v30;
    v31._countAndFlagsBits = v26;
    v31._object = v28;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v31, v29).super.isa;
    id v33 = objc_allocWithZone((Class)CKShare);
    Class v48 = isa;
    id v34 = [v33 initWithRecordZoneID:isa];
    [v21 setPermission:a8];
    [v34 addParticipant:v21];
    sub_10000850C(0, &qword_1003236B0);
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1002AB070;
    *(void *)(v35 + 32) = v34;
    aBlock[0] = v35;
    specialized Array._endMutation()();
    uint64_t v36 = (void *)aBlock[0];
    id v47 = v34;
    v54.value._rawValue = v36;
    v54.is_nil = 0;
    v37.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v54, v55).super.super.super.super.isa;
    sub_10007CA08(a5, (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    unint64_t v38 = (*(unsigned __int8 *)(v52 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    uint64_t v39 = (void *)swift_allocObject();
    v39[2] = v49;
    v39[3] = a4;
    v39[4] = v21;
    sub_10007CC00((uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v39 + v38, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
    aBlock[4] = sub_10007CEE4;
    aBlock[5] = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100065FAC;
    aBlock[3] = &unk_1002F7AF8;
    uint64_t v40 = _Block_copy(aBlock);
    uint64_t v41 = v51;
    sub_10007B664(v51, 0);
    swift_retain();
    swift_release();
    [(objc_class *)v37.super.super.super.super.isa setModifyRecordsCompletionBlock:v40];
    _Block_release(v40);
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(a5 + *(int *)(v50 + 36)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v42 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v42 = &qword_10033EA18;
    }
    uint64_t v44 = *v42;
    unint64_t v43 = v42[1];
    swift_bridgeObjectRetain();
    id v45 = sub_10028CC20(v44, v43);
    id v46 = [v45 privateCloudDatabase];
    swift_bridgeObjectRelease();

    [v46 addOperation:v37.super.super.super.super.isa];
    sub_10007B670(v41, 0);
  }
}

void sub_100077A54(void *a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v55 + 64);
  __chkstk_darwin(v14, v16);
  uint64_t v17 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100322948);
  __chkstk_darwin(v18, v18);
  uint64_t v20 = (id *)((char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *uint64_t v20 = a1;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    a3(v20);
    sub_100006574((uint64_t)v20, &qword_100322948);
  }
  else
  {
    uint64_t v52 = (void (*)(void))a3;
    uint64_t v53 = a4;
    uint64_t v21 = a5;
    uint64_t v22 = qword_100320B78;
    Swift::OpaquePointer_optional v54 = a1;
    id v23 = a1;
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E718);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetched CK Participant success", v27, 2u);
      swift_slowDealloc();
    }

    sub_10000850C(0, &qword_100323560);
    uint64_t v28 = UUID.uuidString.getter();
    unint64_t v30 = v29;
    v31._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31._object = v32;
    v33._countAndFlagsBits = v28;
    v33._object = v30;
    Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v33, v31).super.isa;
    id v35 = objc_allocWithZone((Class)CKShare);
    Class v51 = isa;
    id v36 = [v35 initWithRecordZoneID:isa];
    [v23 setPermission:a8];
    [v36 addParticipant:v23];
    sub_10000850C(0, &qword_1003236B0);
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_1002AB070;
    *(void *)(v37 + 32) = v36;
    aBlock[0] = v37;
    specialized Array._endMutation()();
    unint64_t v38 = (void *)aBlock[0];
    id v50 = v36;
    v57.value._rawValue = v38;
    v57.is_nil = 0;
    v39.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v57, v58).super.super.super.super.isa;
    sub_10007CA08(v21, (uint64_t)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    unint64_t v40 = (*(unsigned __int8 *)(v55 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
    uint64_t v41 = (void *)swift_allocObject();
    uint64_t v42 = v53;
    v41[2] = v52;
    v41[3] = v42;
    uint64_t v41[4] = v23;
    sub_10007CC00((uint64_t)v17, (uint64_t)v41 + v40, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
    aBlock[4] = sub_10007BAF0;
    aBlock[5] = v41;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100065FAC;
    aBlock[3] = &unk_1002F79B8;
    unint64_t v43 = _Block_copy(aBlock);
    uint64_t v44 = v54;
    sub_10007B664(v54, 0);
    swift_retain();
    swift_release();
    [(objc_class *)v39.super.super.super.super.isa setModifyRecordsCompletionBlock:v43];
    _Block_release(v43);
    if (qword_100320CC8 != -1) {
      swift_once();
    }
    if (*(unsigned char *)(v21 + *(int *)(v14 + 40)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      id v45 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      id v45 = &qword_10033E9F8;
    }
    uint64_t v47 = *v45;
    unint64_t v46 = v45[1];
    swift_bridgeObjectRetain();
    id v48 = sub_10028CC20(v47, v46);
    id v49 = [v48 privateCloudDatabase];
    swift_bridgeObjectRelease();

    [v49 addOperation:v39.super.super.super.super.isa];
    sub_10007B670(v44, 0);
  }
}

uint64_t sub_100077FD8(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v110 = a5;
  uint64_t v111 = a4;
  uint64_t v11 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)&v101 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v101 - v26;
  uint64_t v109 = sub_100009F04(&qword_100322948);
  uint64_t v29 = __chkstk_darwin(v109, v28);
  __chkstk_darwin(v29, v30);
  uint64_t v108 = (uint64_t *)((char *)&v101 - v32);
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = v111;
    if (v36)
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v113 = swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 136315138;
      swift_getErrorValue();
      uint64_t v39 = Error.localizedDescription.getter();
      uint64_t v112 = sub_100135190(v39, v40, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error saving shared cloudKit Record: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v71 = (uint64_t)v108;
    void *v108 = a3;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v37(v71);
    swift_errorRelease();
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v104 = v20;
  uint64_t v105 = a7;
  uint64_t v106 = v27;
  uint64_t v107 = v16;
  if (!a1)
  {
LABEL_44:
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    sub_100007288(v95, (uint64_t)qword_10033E718);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    BOOL v98 = os_log_type_enabled(v96, v97);
    uint64_t v99 = v111;
    if (v98)
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Saved share record not found.", v100, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v71 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v99(v71);
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v41 = v31;
  if (!(a1 >> 62))
  {
    uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_9;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_43;
  }
LABEL_9:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    id v43 = *(id *)(a1 + 32);
  }
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();
  self;
  id v45 = (void *)swift_dynamicCastObjCClass();
  unint64_t v46 = v44;
  if (!v45)
  {

    goto LABEL_44;
  }
  uint64_t v47 = v45;
  id v103 = v46;
  id v48 = [v45 URL];
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v14, 1, 1, v15);
LABEL_24:
    sub_100006574((uint64_t)v14, &qword_10032D4E0);
    if (qword_100320B78 == -1)
    {
LABEL_25:
      uint64_t v72 = type metadata accessor for Logger();
      sub_100007288(v72, (uint64_t)qword_10033E718);
      long long v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      BOOL v75 = os_log_type_enabled(v73, v74);
      long long v76 = v111;
      if (v75)
      {
        long long v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Saved share missing URL.", v77, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v112 = -7005;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v71 = (uint64_t)v108;
      void *v108 = v113;
      swift_storeEnumTagMultiPayload();
      v76(v71);

      return sub_100006574(v71, &qword_100322948);
    }
LABEL_52:
    swift_once();
    goto LABEL_25;
  }
  id v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v50 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  Class v51 = v24;
  uint64_t v52 = v107;
  v50(v14, v51, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v14, 1, v15) == 1) {
    goto LABEL_24;
  }
  v50(v106, v14, v15);
  id v53 = [v47 participants];
  sub_10000850C(0, &qword_1003236B8);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v55 = a6;
  os_log_t v56 = sub_10007A954(v54);
  swift_bridgeObjectRelease();

  if (v56)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100007288(v57, (uint64_t)qword_10033E718);
    Swift::OpaquePointer_optional v58 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v59 = v104;
    uint64_t v60 = v106;
    v58(v104, v106, v15);
    id v61 = v56;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    LODWORD(v108) = v63;
    uint64_t v64 = &off_10031D000;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v113 = v101;
      *(_DWORD *)uint64_t v65 = 136315394;
      uint64_t v102 = v58;
      sub_10007BFC4((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = sub_100135190(v66, v67, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v112 = (uint64_t)[v61 invitationToken];
      sub_100009F04(&qword_1003236C0);
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v112 = sub_100135190(v69, v70, &v113);
      Swift::OpaquePointer_optional v58 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v64 = &off_10031D000;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v108, "Successfully created share with url: %s and token: %s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v60 = v106;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
    }
    uint64_t v88 = v105;
    v58((char *)v41, v60, v15);
    if (*(unsigned char *)(v88 + *(int *)(type metadata accessor for BeneficiaryInfoRecord() + 40)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033EA18;
    }
    uint64_t v91 = *v89;
    uint64_t v90 = v89[1];
    swift_bridgeObjectRetain();
    id v92 = [v61 v64[270]];
    uint64_t v93 = type metadata accessor for CloudShareInfo();
    uint64_t v94 = (uint64_t *)(v41 + *(int *)(v93 + 20));
    *uint64_t v94 = v91;
    v94[1] = v90;
    *(void *)(v41 + *(int *)(v93 + 24)) = v92;
    swift_storeEnumTagMultiPayload();
    v111(v41);

    sub_100006574(v41, &qword_100322948);
    return ((uint64_t (*)(char *, uint64_t))v68)(v60, v15);
  }
  else
  {
    id v78 = v103;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_100007288(v79, (uint64_t)qword_10033E718);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    BOOL v82 = os_log_type_enabled(v80, v81);
    NSString v83 = v111;
    uint64_t v84 = v106;
    if (v82)
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Saved share missing matching participant.", v85, 2u);
      id v78 = v103;
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v86 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v83(v86);

    sub_100006574(v86, &qword_100322948);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v84, v15);
  }
}

uint64_t sub_100078DAC(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v110 = a5;
  uint64_t v111 = a4;
  uint64_t v11 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)&v101 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v101 - v26;
  uint64_t v109 = sub_100009F04(&qword_100322948);
  uint64_t v29 = __chkstk_darwin(v109, v28);
  __chkstk_darwin(v29, v30);
  uint64_t v108 = (uint64_t *)((char *)&v101 - v32);
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = v111;
    if (v36)
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v113 = swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 136315138;
      swift_getErrorValue();
      uint64_t v39 = Error.localizedDescription.getter();
      uint64_t v112 = sub_100135190(v39, v40, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error saving shared cloudKit Record: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v71 = (uint64_t)v108;
    void *v108 = a3;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v37(v71);
    swift_errorRelease();
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v104 = v20;
  uint64_t v105 = a7;
  uint64_t v106 = v27;
  uint64_t v107 = v16;
  if (!a1)
  {
LABEL_44:
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    sub_100007288(v95, (uint64_t)qword_10033E718);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    BOOL v98 = os_log_type_enabled(v96, v97);
    uint64_t v99 = v111;
    if (v98)
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Saved share record not found.", v100, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v71 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v99(v71);
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v41 = v31;
  if (!(a1 >> 62))
  {
    uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_9;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_43;
  }
LABEL_9:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    id v43 = *(id *)(a1 + 32);
  }
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();
  self;
  id v45 = (void *)swift_dynamicCastObjCClass();
  unint64_t v46 = v44;
  if (!v45)
  {

    goto LABEL_44;
  }
  uint64_t v47 = v45;
  id v103 = v46;
  id v48 = [v45 URL];
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v14, 1, 1, v15);
LABEL_24:
    sub_100006574((uint64_t)v14, &qword_10032D4E0);
    if (qword_100320B78 == -1)
    {
LABEL_25:
      uint64_t v72 = type metadata accessor for Logger();
      sub_100007288(v72, (uint64_t)qword_10033E718);
      long long v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      BOOL v75 = os_log_type_enabled(v73, v74);
      long long v76 = v111;
      if (v75)
      {
        long long v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Saved share missing URL.", v77, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v112 = -7005;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v71 = (uint64_t)v108;
      void *v108 = v113;
      swift_storeEnumTagMultiPayload();
      v76(v71);

      return sub_100006574(v71, &qword_100322948);
    }
LABEL_52:
    swift_once();
    goto LABEL_25;
  }
  id v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v50 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  Class v51 = v24;
  uint64_t v52 = v107;
  v50(v14, v51, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v14, 1, v15) == 1) {
    goto LABEL_24;
  }
  v50(v106, v14, v15);
  id v53 = [v47 participants];
  sub_10000850C(0, &qword_1003236B8);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v55 = a6;
  os_log_t v56 = sub_10007A954(v54);
  swift_bridgeObjectRelease();

  if (v56)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100007288(v57, (uint64_t)qword_10033E718);
    Swift::OpaquePointer_optional v58 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v59 = v104;
    uint64_t v60 = v106;
    v58(v104, v106, v15);
    id v61 = v56;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    LODWORD(v108) = v63;
    uint64_t v64 = &off_10031D000;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v113 = v101;
      *(_DWORD *)uint64_t v65 = 136315394;
      uint64_t v102 = v58;
      sub_10007BFC4((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = sub_100135190(v66, v67, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v112 = (uint64_t)[v61 invitationToken];
      sub_100009F04(&qword_1003236C0);
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v112 = sub_100135190(v69, v70, &v113);
      Swift::OpaquePointer_optional v58 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v64 = &off_10031D000;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v108, "Successfully created share with url: %s and token: %s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v60 = v106;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
    }
    uint64_t v88 = v105;
    v58((char *)v41, v60, v15);
    if (*(unsigned char *)(v88 + *(int *)(type metadata accessor for InheritanceHealthRecord() + 36)) == 1)
    {
      if (qword_100320CE8 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033EA28;
    }
    else
    {
      if (qword_100320CE0 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033EA18;
    }
    uint64_t v91 = *v89;
    uint64_t v90 = v89[1];
    swift_bridgeObjectRetain();
    id v92 = [v61 v64[270]];
    uint64_t v93 = type metadata accessor for CloudShareInfo();
    uint64_t v94 = (uint64_t *)(v41 + *(int *)(v93 + 20));
    *uint64_t v94 = v91;
    v94[1] = v90;
    *(void *)(v41 + *(int *)(v93 + 24)) = v92;
    swift_storeEnumTagMultiPayload();
    v111(v41);

    sub_100006574(v41, &qword_100322948);
    return ((uint64_t (*)(char *, uint64_t))v68)(v60, v15);
  }
  else
  {
    id v78 = v103;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_100007288(v79, (uint64_t)qword_10033E718);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    BOOL v82 = os_log_type_enabled(v80, v81);
    NSString v83 = v111;
    uint64_t v84 = v106;
    if (v82)
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Saved share missing matching participant.", v85, 2u);
      id v78 = v103;
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v86 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v83(v86);

    sub_100006574(v86, &qword_100322948);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v84, v15);
  }
}

uint64_t sub_100079B80(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v110 = a5;
  uint64_t v111 = a4;
  uint64_t v11 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)&v101 - v23;
  __chkstk_darwin(v22, v25);
  uint64_t v27 = (char *)&v101 - v26;
  uint64_t v109 = sub_100009F04(&qword_100322948);
  uint64_t v29 = __chkstk_darwin(v109, v28);
  __chkstk_darwin(v29, v30);
  uint64_t v108 = (uint64_t *)((char *)&v101 - v32);
  if (a3)
  {
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = v111;
    if (v36)
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v113 = swift_slowAlloc();
      *(_DWORD *)unint64_t v38 = 136315138;
      swift_getErrorValue();
      uint64_t v39 = Error.localizedDescription.getter();
      uint64_t v112 = sub_100135190(v39, v40, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error saving shared cloudKit Record: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v71 = (uint64_t)v108;
    void *v108 = a3;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v37(v71);
    swift_errorRelease();
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v104 = v20;
  uint64_t v105 = a7;
  uint64_t v106 = v27;
  uint64_t v107 = v16;
  if (!a1)
  {
LABEL_44:
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v95 = type metadata accessor for Logger();
    sub_100007288(v95, (uint64_t)qword_10033E718);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    BOOL v98 = os_log_type_enabled(v96, v97);
    uint64_t v99 = v111;
    if (v98)
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Saved share record not found.", v100, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v71 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v99(v71);
    return sub_100006574(v71, &qword_100322948);
  }
  uint64_t v41 = v31;
  if (!(a1 >> 62))
  {
    uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_9;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_43;
  }
LABEL_9:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    id v43 = *(id *)(a1 + 32);
  }
  uint64_t v44 = v43;
  swift_bridgeObjectRelease();
  self;
  id v45 = (void *)swift_dynamicCastObjCClass();
  unint64_t v46 = v44;
  if (!v45)
  {

    goto LABEL_44;
  }
  uint64_t v47 = v45;
  id v103 = v46;
  id v48 = [v45 URL];
  if (!v48)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v14, 1, 1, v15);
LABEL_24:
    sub_100006574((uint64_t)v14, &qword_10032D4E0);
    if (qword_100320B78 == -1)
    {
LABEL_25:
      uint64_t v72 = type metadata accessor for Logger();
      sub_100007288(v72, (uint64_t)qword_10033E718);
      long long v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.error.getter();
      BOOL v75 = os_log_type_enabled(v73, v74);
      long long v76 = v111;
      if (v75)
      {
        long long v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Saved share missing URL.", v77, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v112 = -7005;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v71 = (uint64_t)v108;
      void *v108 = v113;
      swift_storeEnumTagMultiPayload();
      v76(v71);

      return sub_100006574(v71, &qword_100322948);
    }
LABEL_52:
    swift_once();
    goto LABEL_25;
  }
  id v49 = v48;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  id v50 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
  Class v51 = v24;
  uint64_t v52 = v107;
  v50(v14, v51, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v14, 0, 1, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v14, 1, v15) == 1) {
    goto LABEL_24;
  }
  v50(v106, v14, v15);
  id v53 = [v47 participants];
  sub_10000850C(0, &qword_1003236B8);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v55 = a6;
  os_log_t v56 = sub_10007A954(v54);
  swift_bridgeObjectRelease();

  if (v56)
  {
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_100007288(v57, (uint64_t)qword_10033E718);
    Swift::OpaquePointer_optional v58 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
    uint64_t v59 = v104;
    uint64_t v60 = v106;
    v58(v104, v106, v15);
    id v61 = v56;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    LODWORD(v108) = v63;
    uint64_t v64 = &off_10031D000;
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v113 = v101;
      *(_DWORD *)uint64_t v65 = 136315394;
      uint64_t v102 = v58;
      sub_10007BFC4((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v112 = sub_100135190(v66, v67, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v112 = (uint64_t)[v61 invitationToken];
      sub_100009F04(&qword_1003236C0);
      uint64_t v69 = String.init<A>(describing:)();
      uint64_t v112 = sub_100135190(v69, v70, &v113);
      Swift::OpaquePointer_optional v58 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v64 = &off_10031D000;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v108, "Successfully created share with url: %s and token: %s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v60 = v106;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v68 = *(void (**)(char *, uint64_t))(v52 + 8);
      v68(v59, v15);
    }
    uint64_t v88 = v105;
    v58((char *)v41, v60, v15);
    if (*(unsigned char *)(v88 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord() + 40)) == 1)
    {
      if (qword_100320CD8 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033EA08;
    }
    else
    {
      if (qword_100320CD0 != -1) {
        swift_once();
      }
      uint64_t v89 = &qword_10033E9F8;
    }
    uint64_t v91 = *v89;
    uint64_t v90 = v89[1];
    swift_bridgeObjectRetain();
    id v92 = [v61 v64[270]];
    uint64_t v93 = type metadata accessor for CloudShareInfo();
    uint64_t v94 = (uint64_t *)(v41 + *(int *)(v93 + 20));
    *uint64_t v94 = v91;
    v94[1] = v90;
    *(void *)(v41 + *(int *)(v93 + 24)) = v92;
    swift_storeEnumTagMultiPayload();
    v111(v41);

    sub_100006574(v41, &qword_100322948);
    return ((uint64_t (*)(char *, uint64_t))v68)(v60, v15);
  }
  else
  {
    id v78 = v103;
    if (qword_100320B78 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    sub_100007288(v79, (uint64_t)qword_10033E718);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    BOOL v82 = os_log_type_enabled(v80, v81);
    NSString v83 = v111;
    uint64_t v84 = v106;
    if (v82)
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Saved share missing matching participant.", v85, 2u);
      id v78 = v103;
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v112 = -7005;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10007BFC4((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v86 = (uint64_t)v108;
    void *v108 = v113;
    swift_storeEnumTagMultiPayload();
    v83(v86);

    sub_100006574(v86, &qword_100322948);
    return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v84, v15);
  }
}

void *sub_10007A954(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v7 = CKShareParticipant.participantID.getter();
      uint64_t v9 = v8;
      if (v7 == CKShareParticipant.participantID.getter() && v9 == v10)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        return v5;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_14;
      }

      ++v3;
      if (v6 == v2) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10007AAD8(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a4;
  uint64_t v10 = type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v10 + 40)) == 1)
  {
    if (qword_100320CD8 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033EA08;
  }
  else
  {
    if (qword_100320CD0 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033E9F8;
  }
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  swift_bridgeObjectRetain();
  id v17 = sub_10028CC20(v16, v15);
  swift_bridgeObjectRelease();
  sub_10007CA08(a1, (uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v21;
  *(void *)(v19 + 24) = a6;
  sub_10007CC00((uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
  uint64_t v20 = (void ***)(v19 + ((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = a2;
  v20[1] = (void **)a3;
  v20[2] = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100196964(a2, a3, v17, (uint64_t)sub_10007B8DC, v19);
  swift_release();
}

void sub_10007AD48(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a4;
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v10 + 40)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033EA18;
  }
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  swift_bridgeObjectRetain();
  id v17 = sub_10028CC20(v16, v15);
  swift_bridgeObjectRelease();
  sub_10007CA08(a1, (uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v21;
  *(void *)(v19 + 24) = a6;
  sub_10007CC00((uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  uint64_t v20 = (void ***)(v19 + ((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = a2;
  v20[1] = (void **)a3;
  v20[2] = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100196964(a2, a3, v17, (uint64_t)sub_10007B424, v19);
  swift_release();
}

uint64_t sub_10007AFB8(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = qword_100320B90;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E760);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190((uint64_t)a2, a3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Sharing record with beneficiary - %s...", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10007AD48(a1, a2, a3, (void **)2, (uint64_t)sub_10007B204, (uint64_t)v15);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10007B204(uint64_t a1)
{
  return sub_100076464(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), "Successfully shared the record with %s");
}

uint64_t sub_10007B22C()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v10 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | 7);
}

uint64_t sub_10007B424(uint64_t a1, char a2)
{
  return sub_10007CC94(a1, a2, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100076F54);
}

uint64_t sub_10007B450()
{
  uint64_t v1 = (int *)type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v10 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  v7(v0 + v3 + v1[8], v5);
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v8 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v10, v2 | 7);
}

uint64_t sub_10007B638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007CF10(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_100077FD8);
}

id sub_10007B664(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_10007B670(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_10007B67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100322948);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007B6E4()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v2 | 7);
}

uint64_t sub_10007B8DC(uint64_t a1, char a2)
{
  return sub_10007CC94(a1, a2, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_100077A54);
}

uint64_t sub_10007B908()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + v1[7]), *(void *)(v4 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v10 = v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v12, v2 | 7);
}

uint64_t sub_10007BAF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007CF10(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_100079B80);
}

uint64_t sub_10007BB1C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10007BB7C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007BBB4()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceAccessKeyMessage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[8];
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = type metadata accessor for CloudShareInfo();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10007BD30(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for InheritanceAccessKeyMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10007615C(a1, v5, v1 + v4, v6);
}

uint64_t sub_10007BDD4()
{
  uint64_t v1 = (int *)(type metadata accessor for CloudShareInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_10007BF08(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for CloudShareInfo() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(void *))(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(void *)(v2 + v7);
  uint64_t v11 = *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_100193DC4(a1, v4, v8, v9, v2 + v6, v10, v11);
}

uint64_t sub_10007BFC4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007C00C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  unint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v6;
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v21 - v9;
  if (qword_100320B90 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E760);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v24(v10, a1, v2);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v7;
    uint64_t v27 = v15;
    uint64_t v23 = a1;
    *(_DWORD *)uint64_t v14 = 136315138;
    v21[1] = v14 + 4;
    sub_10007BFC4((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = sub_100135190(v16, v17, &v27);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting initial health check for %s", v14, 0xCu);
    swift_arrayDestroy();
    unint64_t v7 = v22;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }

  type metadata accessor for BenefactorHealthCheck();
  swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100321850);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  v24(v7, a1, v2);
  unint64_t v18 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v19 + v18, v7, v2);
  sub_10005AF48(a1, (uint64_t)sub_10007C474, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_10007C3E4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10007C474(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_100076A08(a1, v4);
}

void sub_10007C4E4(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a5;
  uint64_t v22 = a4;
  uint64_t v10 = type metadata accessor for InheritanceHealthRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  if (qword_100320CC8 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(a1 + *(int *)(v10 + 36)) == 1)
  {
    if (qword_100320CE8 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033EA28;
  }
  else
  {
    if (qword_100320CE0 != -1) {
      swift_once();
    }
    uint64_t v14 = &qword_10033EA18;
  }
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  swift_bridgeObjectRetain();
  id v17 = sub_10028CC20(v16, v15);
  swift_bridgeObjectRelease();
  sub_10007CA08(a1, (uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v21;
  *(void *)(v19 + 24) = a6;
  sub_10007CC00((uint64_t)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
  uint64_t v20 = (void ***)(v19 + ((v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = a2;
  v20[1] = (void **)a3;
  v20[2] = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100196964(a2, a3, v17, (uint64_t)sub_10007CC68, v19);
  swift_release();
}

uint64_t sub_10007C754(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = qword_100320B90;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E760);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190((uint64_t)a2, a3, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Sharing health record with beneficiary - %s...", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v15 = (void *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = a5;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10007C4E4(a1, a2, a3, (void **)3, (uint64_t)sub_10007C9E0, (uint64_t)v15);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10007C9A0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007C9E0(uint64_t a1)
{
  return sub_100076464(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40), "Successfully shared the health record with %s");
}

uint64_t sub_10007CA08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007CA70()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10007CC00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10007CC68(uint64_t a1, char a2)
{
  return sub_10007CC94(a1, a2, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))sub_1000774D4);
}

uint64_t sub_10007CC94(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = *(void *)(a3(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + v9);
  uint64_t v13 = *(void *)(v4 + v9 + 8);
  uint64_t v14 = *(void *)(v4 + v9 + 16);

  return a4(a1, v6, v10, v11, v4 + v8, v12, v13, v14);
}

uint64_t sub_10007CD64()
{
  uint64_t v1 = (int *)(type metadata accessor for InheritanceHealthRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();

  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  sub_100013198(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8));
  v8(v6 + v1[9], v7);
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10007CEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007CF10(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))sub_100078DAC);
}

uint64_t sub_10007CF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v9 = *(void *)(a4(0) - 8);
  uint64_t v10 = v5[2];
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  uint64_t v13 = (char *)v5 + ((*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a5(a1, a2, a3, v10, v11, v12, v13);
}

void sub_10007CFC8(void *a1)
{
  id v2 = [*(id *)(*sub_100008EF8(a1 + 2, a1[5]) + 16) aa_primaryAppleAccount];
  if (v2)
  {

    id v3 = objc_allocWithZone((Class)type metadata accessor for InheritanceMigrationAnalyticsEvent());
    sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v4 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    uint64_t v5 = (void *)swift_allocObject();
    _OWORD v5[2] = a1;
    v5[3] = v4;
    v5[4] = OSTransaction.complete();
    v5[5] = 0;
    uint64_t v6 = qword_100320BB8;
    swift_retain();
    id v7 = v4;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E7D8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting beneficiary manatee migration.", v11, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8(a1 + 7, a1[10]);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = sub_100080B34;
    v12[3] = v5;
    v12[4] = a1;
    swift_retain();
    swift_retain();
    sub_100008810((uint64_t)sub_100080B38, (uint64_t)v12);

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E7D8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not logged in to AppleAccount, Aborting migration!", v16, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100080758((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
  }
}

void sub_10007D338(void (*a1)(), uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = [*(id *)(*sub_100008EF8((void *)(v2 + 16), *(void *)(v2 + 40)) + 16) aa_primaryAppleAccount];
  if (v6)
  {

    id v7 = objc_allocWithZone((Class)type metadata accessor for InheritanceMigrationAnalyticsEvent());
    sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v8 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    uint64_t v9 = (void *)swift_allocObject();
    v9[2] = v3;
    v9[3] = v8;
    v9[4] = a1;
    v9[5] = a2;
    uint64_t v10 = qword_100320BB8;
    swift_retain();
    id v11 = v8;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E7D8);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting beneficiary manatee migration.", v15, 2u);
      swift_slowDealloc();
    }

    sub_100008EF8((void *)(v3 + 56), *(void *)(v3 + 80));
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = sub_1000801F0;
    v16[3] = v9;
    void v16[4] = v3;
    swift_retain();
    swift_retain();
    sub_100008810((uint64_t)sub_100080200, (uint64_t)v16);

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E7D8);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not logged in to AppleAccount, Aborting migration!", v20, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for InheritanceError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100080758((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a1();
  }
}

uint64_t sub_10007D6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (*(uint64_t *)(a2 + 112) > 0)
  {
    if (!a1)
    {
      id v6 = 0;
LABEL_6:
      swift_beginAccess();
      sub_10024D6E4();

      return a4(a1);
    }
LABEL_5:
    id v6 = (void *)_convertErrorToNSError(_:)();
    goto LABEL_6;
  }
  if (a1) {
    goto LABEL_5;
  }
  return a4(a1);
}

uint64_t sub_10007D77C(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8, v12);
  os_log_type_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v68 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for DispatchQoS();
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v19);
  uint64_t v66 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100007288(v40, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v65 = a3;
      os_log_type_t v74 = (void *)a1;
      aBlock[0] = v44;
      *(_DWORD *)id v43 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v45 = String.init<A>(describing:)();
      os_log_type_t v74 = (void *)sub_100135190(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to fetch Beneficiaries. Aborting migration : %s", v43, 0xCu);
      swift_arrayDestroy();
      a3 = v65;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(a1);
    sub_100007844(a1, 1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v60 = v26;
    uint64_t v61 = v24;
    uint64_t v62 = v23;
    uint64_t v63 = v16;
    uint64_t v64 = v15;
    uint64_t v27 = a1;
    uint64_t v28 = *(void *)(a1 + 16);
    if (v28)
    {
      uint64_t v65 = a3;
      uint64_t v59 = a4;
      uint64_t v29 = v27 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      uint64_t v30 = qword_100320BB8;
      uint64_t v58 = v27;
      swift_bridgeObjectRetain();
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v31 = *(NSObject **)(a5 + 96);
      uint64_t v32 = *(void *)(v11 + 72);
      uint64_t v73 = type metadata accessor for Logger();
      *(void *)&long long v33 = 136315138;
      long long v71 = v33;
      unint64_t v70 = (char *)&type metadata for Any + 8;
      uint64_t v72 = v32;
      do
      {
        sub_100007288(v73, (uint64_t)qword_10033E7D8);
        sub_100080984(v29, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        os_log_type_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = v71;
          type metadata accessor for UUID();
          sub_100080758((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v37 + 4) = sub_100135190(v38, v39, aBlock);
          swift_bridgeObjectRelease();
          sub_1000809EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Migrating Records for beneficiaryID - %s.", (uint8_t *)v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v32 = v72;
          swift_slowDealloc();
        }
        else
        {
          sub_1000809EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
        }

        dispatch_group_enter(v31);
        id v34 = (void (*)(uint64_t))swift_allocObject();
        swift_weakInit();
        sub_100080210(v29, a5, v34);
        swift_release();
        v29 += v32;
        --v28;
      }
      while (v28);
      sub_100007844(v58, 0);
      a4 = v59;
      a3 = v65;
    }
    sub_1000093D0();
    uint64_t v48 = v61;
    uint64_t v47 = v62;
    id v49 = v60;
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v60, enum case for DispatchQoS.QoSClass.default(_:), v62);
    id v50 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    Class v51 = (void *)swift_allocObject();
    void v51[2] = a3;
    id v51[3] = a4;
    v51[4] = a5;
    aBlock[4] = (uint64_t)sub_10008074C;
    aBlock[5] = (uint64_t)v51;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100007244;
    aBlock[3] = (uint64_t)&unk_1002F7BD0;
    uint64_t v52 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v53 = v66;
    static DispatchQoS.unspecified.getter();
    os_log_type_t v74 = _swiftEmptyArrayStorage;
    sub_100080758((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_10000A534();
    unint64_t v54 = v68;
    uint64_t v55 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v52);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v54, v55);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v53, v69);
    return swift_release();
  }
}

uint64_t sub_10007E034(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E7D8);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Beneficiary Manatee migration complete.", v8, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v9 = *(void *)(a3 + 120);
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = *(void *)(v9 + 32);
    swift_errorRetain();
  }
  else
  {
    uint64_t v10 = 0;
  }
  a1(v10);
  return swift_errorRelease();
}

uint64_t sub_10007E174()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);

  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd26BeneficiaryManateeMigrator__accessKeyRepairHandler;
  uint64_t v2 = sub_100009F04(&qword_1003237C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10007E238()
{
  return type metadata accessor for BeneficiaryManateeMigrator();
}

uint64_t type metadata accessor for BeneficiaryManateeMigrator()
{
  uint64_t result = qword_1003236F8;
  if (!qword_1003236F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10007E28C()
{
  sub_10007E360();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10007E360()
{
  if (!qword_100323708)
  {
    sub_1000112CC((uint64_t *)&unk_100323710);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100323708);
    }
  }
}

void sub_10007E3BC(void (*a1)(), uint64_t a2)
{
}

uint64_t sub_10007E3E0()
{
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100007288(v0, (uint64_t)qword_10033E7D8);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Manatee status changed, fetching new manatee status.", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_1000F02FC((uint64_t)sub_100080A8C, v4);
  return swift_release_n();
}

void sub_10007E510(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      v17[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v18 = a1;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v18 = sub_100135190(v9, v10, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to fetch manatee status: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
      return;
    }
    sub_100080A98(a1, 1);
    sub_100080A98(a1, 1);
    swift_errorRelease();
    goto LABEL_19;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E748);
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Account is not manatee, skipping manatee migration.", v5, 2u);
      swift_slowDealloc();
    }
LABEL_19:

    return;
  }
  if (qword_100320BB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100007288(v11, (uint64_t)qword_10033E7D8);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Account is now manatee, kicking off migration.", v14, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    sub_10007CFC8(Strong);
    swift_release();
  }
}

void sub_10007E91C(void *a1, void (*a2)(uint64_t a1))
{
  uint64_t v59 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v59 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v7 = __chkstk_darwin(v59, v6);
  uint64_t v8 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v57 - v10;
  uint64_t v12 = type metadata accessor for BeneficiaryInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (os_unfair_lock_s *)sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = a2;
  sub_100019730((uint64_t)a1, (uint64_t)v19, &qword_100321CF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *v19;
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v61 = v4;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v61 = sub_100135190(v24, v25, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error migrating BeneficiaryInfoRecord : %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v47 = *(os_unfair_lock_s **)(Strong + 104);
      swift_release();
      os_unfair_lock_lock(v47);
    }
    swift_beginAccess();
    uint64_t v48 = swift_weakLoadStrong();
    if (!v48) {
      goto LABEL_23;
    }
    uint64_t v49 = v48;
    uint64_t v16 = (os_unfair_lock_s *)(v48 + 120);
    swift_beginAccess();
    a1 = *(void **)(v49 + 120);
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v49 + 120) = a1;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_20:
      unint64_t v52 = a1[2];
      unint64_t v51 = a1[3];
      if (v52 >= v51 >> 1)
      {
        a1 = sub_100168930((void *)(v51 > 1), v52 + 1, 1, a1);
        *(void *)&v16->_os_unfair_lock_opaque = a1;
      }
      a1[2] = v52 + 1;
      a1[v52 + 4] = v4;
      swift_endAccess();
      swift_release();
LABEL_23:
      swift_beginAccess();
      uint64_t v53 = swift_weakLoadStrong();
      if (v53)
      {
        unint64_t v54 = *(os_unfair_lock_s **)(v53 + 104);
        swift_release();
        os_unfair_lock_unlock(v54);
      }
      swift_beginAccess();
      uint64_t v55 = swift_weakLoadStrong();
      if (v55)
      {
        os_log_t v56 = *(id *)(v55 + 96);
        swift_release();
        dispatch_group_leave(v56);
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
      }
      return;
    }
LABEL_31:
    a1 = sub_100168930(0, a1[2] + 1, 1, a1);
    *(void *)&v16->_os_unfair_lock_opaque = a1;
    goto LABEL_20;
  }
  sub_10008091C((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
  swift_beginAccess();
  uint64_t v26 = swift_weakLoadStrong();
  if (v26)
  {
    uint64_t v16 = *(os_unfair_lock_s **)(v26 + 104);
    swift_release();
    os_unfair_lock_lock(v16);
  }
  swift_beginAccess();
  uint64_t v27 = swift_weakLoadStrong();
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 112);
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
      __break(1u);
      goto LABEL_31;
    }
    *(void *)(v27 + 112) = v30;
    swift_release();
  }
  swift_beginAccess();
  uint64_t v31 = swift_weakLoadStrong();
  if (v31)
  {
    uint64_t v32 = *(os_unfair_lock_s **)(v31 + 104);
    swift_release();
    os_unfair_lock_unlock(v32);
  }
  swift_beginAccess();
  uint64_t v33 = swift_weakLoadStrong();
  if (v33)
  {
    uint64_t v34 = v33;
    os_log_type_t v35 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    uint64_t v36 = v59;
    v35(v11, v15, v59);
    uint64_t v57 = sub_100008EF8((void *)(v34 + 56), *(void *)(v34 + 80));
    uint64_t v37 = swift_allocObject();
    uint64_t v58 = v15;
    uint64_t v38 = v37;
    swift_weakInit();
    v35(v8, v11, v36);
    unint64_t v39 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    unint64_t v40 = (v5 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v42 + v39, v8, v36);
    id v43 = (void (**)(uint64_t))(v42 + v40);
    uint64_t v44 = v60;
    uint8_t *v43 = sub_1000807A8;
    v43[1] = v44;
    *(void *)(v42 + v41) = v38;
    swift_retain_n();
    swift_retain();
    sub_1000E53EC((uint64_t)v11, (uint64_t)sub_100080870, v42);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v36);
    uint64_t v45 = (uint64_t)v58;
  }
  else
  {
    uint64_t v45 = (uint64_t)v15;
  }
  sub_1000809EC(v45, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
}

void sub_10007F054(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100007288(v2, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v6 = String.init<A>(describing:)();
      sub_100135190(v6, v7, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error migrating other records : %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v9 = *(os_unfair_lock_s **)(Strong + 104);
      swift_release();
      os_unfair_lock_lock(v9);
    }
    swift_beginAccess();
    uint64_t v10 = swift_weakLoadStrong();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (void *)(v10 + 120);
      swift_beginAccess();
      uint64_t v13 = *(void **)(v11 + 120);
      swift_errorRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v11 + 120) = v13;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v13 = sub_100168930(0, v13[2] + 1, 1, v13);
        *uint64_t v12 = v13;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t v13 = sub_100168930((void *)(v15 > 1), v16 + 1, 1, v13);
        *uint64_t v12 = v13;
      }
      v13[2] = v16 + 1;
      v13[v16 + 4] = a1;
      swift_endAccess();
      swift_release();
    }
    swift_beginAccess();
    uint64_t v17 = swift_weakLoadStrong();
    if (v17)
    {
      uint64_t v18 = *(os_unfair_lock_s **)(v17 + 104);
      swift_release();
      os_unfair_lock_unlock(v18);
    }
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v19 = swift_weakLoadStrong();
  if (v19)
  {
    uint64_t v20 = *(id *)(v19 + 96);
    swift_release();
    dispatch_group_leave(v20);
  }
}

void sub_10007F3AC(uint64_t a1, uint8_t *a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v61 = a2;
  uint64_t v5 = type metadata accessor for InheritanceInvitationRecord();
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v7, v10);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v64 = (uint64_t)&v60 - v16;
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v62 = *(void *)(v20 - 8);
  uint64_t v63 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (uint64_t *)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v27, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v68[0] = *v27;
    uint64_t v28 = v68[0];
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for InheritanceError(0);
    if (swift_dynamicCast())
    {
      BOOL v29 = (void *)v69;
      uint64_t v67 = 3;
      v68[0] = v69;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100080758((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v30 = (void *)v69;
      uint64_t v67 = v69;
      char v31 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v31)
      {
        if (qword_100320BB8 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        sub_100007288(v32, (uint64_t)qword_10033E7D8);
        uint64_t v33 = v62;
        uint64_t v34 = v63;
        (*(void (**)(char *, uint8_t *, uint64_t))(v62 + 16))(v23, v61, v63);
        os_log_type_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc();
          uint64_t v64 = swift_slowAlloc();
          v68[0] = v64;
          *(_DWORD *)uint64_t v37 = 136315138;
          uint64_t v61 = v37 + 4;
          sub_100080758((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v69 = sub_100135190(v38, v39, v68);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v34);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "There is no InheritanceInvitationRecord for beneficiaryID - %s.", v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v34);
        }

        v65(0);
        swift_errorRelease();

        return;
      }
    }
    if (qword_100320BB8 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100007288(v52, (uint64_t)qword_10033E7D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      v68[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136315138;
      uint64_t v69 = v28;
      swift_errorRetain();
      uint64_t v56 = String.init<A>(describing:)();
      uint64_t v69 = sub_100135190(v56, v57, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Error fetching InheritanceInvitationRecord. Aborting migration - %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v65(v28);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    sub_10008091C((uint64_t)v27, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
    if (v19[*(int *)(v5 + 44)])
    {
      if (qword_100320BB8 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100007288(v40, (uint64_t)qword_10033E7D8);
      unint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        id v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "InheritanceInvitationRecord is already in Manatee.", v43, 2u);
        swift_slowDealloc();
      }

      v65(0);
      uint64_t v44 = (uint64_t)v19;
    }
    else
    {
      sub_100080984((uint64_t)v19, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v45 = v64;
      sub_10028E1F4((uint64_t)v13, 0, 0, 0, 1, 1, v64);
      if (qword_100320BB8 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_100007288(v46, (uint64_t)qword_10033E7D8);
      sub_100080984(v45, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        v68[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 136315138;
        uint64_t v50 = sub_100290048();
        uint64_t v69 = sub_100135190(v50, v51, v68);
        uint64_t v45 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000809EC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Created new InheritanceHealthRecord - %s", v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1000809EC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      }

      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        sub_100008A94(Strong + 56, (uint64_t)v68);
        swift_release();
        sub_100008EF8(v68, v68[3]);
        uint64_t v59 = swift_allocObject();
        *(void *)(v59 + 16) = v65;
        *(void *)(v59 + 24) = v66;
        swift_retain();
        sub_1000E5FA8(v45, (uint64_t)sub_100080A84, v59);
        swift_release();
        sub_1000809EC(v45, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        sub_1000809EC((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
        sub_100008EA8((uint64_t)v68);
        return;
      }
      sub_1000809EC(v45, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
      uint64_t v44 = (uint64_t)v19;
    }
    sub_1000809EC(v44, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_10007FE14(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100009F04(&qword_100325890);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v7, &qword_100325890);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = *v7;
    swift_errorRetain();
    a2(v8);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    a2(0);
    return sub_100006574((uint64_t)v7, &qword_100325890);
  }
}

unint64_t sub_10007FF10(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10007FF88(a1, a2, v4);
}

unint64_t sub_10007FF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000800D0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100009F04(&qword_10032DB40);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_10007FF10(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000801F0(uint64_t a1)
{
  return sub_10007D6B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100080200(uint64_t a1, char a2)
{
  return sub_10007D77C(a1, a2 & 1, *(void (**)(void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100080210(uint64_t a1, uint64_t a2, void (*a3)(uint64_t a1))
{
  uint64_t v37 = a2;
  uint64_t v5 = sub_100009F04(&qword_1003237C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100321CF0);
  __chkstk_darwin(v10, v11);
  BOOL v13 = (void *)((char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for BeneficiaryInfoRecord();
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v19 = *(unsigned __int8 *)(a1 + *(int *)(v16 + 48));
  uint64_t v20 = qword_100320BB8;
  swift_retain();
  if (v19 == 1)
  {
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E7D8);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "BeneficiaryInfoRecord is already in Manatee.", v24, 2u);
      swift_slowDealloc();
    }

    sub_100080984(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload();
    sub_10007E91C(v13, a3);
    sub_100006574((uint64_t)v13, &qword_100321CF0);
  }
  else
  {
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E7D8);
    uint64_t v36 = a1;
    sub_100080984(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      os_log_type_t v35 = a3;
      BOOL v29 = (uint8_t *)v28;
      uint64_t v34 = swift_slowAlloc();
      v39[0] = v34;
      *(_DWORD *)BOOL v29 = 136315138;
      v33[1] = v29 + 4;
      type metadata accessor for UUID();
      sub_100080758((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_100135190(v30, v31, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000809EC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Migrating BeneficiaryInfoRecord with beneficiaryID %s...", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v35;
      swift_slowDealloc();
    }
    else
    {
      sub_1000809EC((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for BeneficiaryInfoRecord);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v37 + OBJC_IVAR____TtC13appleaccountd26BeneficiaryManateeMigrator__accessKeyRepairHandler, v5);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_100008EF8(v39, v39[3]);
    sub_1001CA2B4(v36, 1, (uint64_t)sub_1000807A0, (uint64_t)a3);
    sub_100008EA8((uint64_t)v39);
  }
  return swift_release();
}

uint64_t sub_100080710()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008074C()
{
  return sub_10007E034(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100080758(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000807A0(void *a1)
{
  sub_10007E91C(a1, v1);
}

void sub_1000807A8(uint64_t a1)
{
}

uint64_t sub_1000807B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100080870(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void (**)(uint64_t))(v1 + v5);
  uint64_t v7 = *(void *)(v1 + v5 + 8);

  sub_10007F3AC(a1, (uint8_t *)(v1 + v4), v6, v7);
}

uint64_t sub_10008091C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100080984(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000809EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100080A4C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080A84(uint64_t a1)
{
  return sub_10007FE14(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_100080A8C(uint64_t a1, char a2)
{
}

uint64_t sub_100080A98(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100080AA8()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100080AF4()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100080B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = a1;
  v14[1] = a2;
  static CharacterSet.whitespacesAndNewlines.getter();
  sub_100080C64();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v12)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

unint64_t sub_100080C64()
{
  unint64_t result = qword_10032AA70;
  if (!qword_10032AA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AA70);
  }
  return result;
}

uint64_t *sub_100080CB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    unint64_t v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    id v12 = v10;
    id v13 = v11;
  }
  return a1;
}

void sub_100080D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  int v5 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t sub_100080E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  unint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  id v11 = v9;
  id v12 = v10;
  return a1;
}

uint64_t sub_100080EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = *(int *)(a3 + 24);
  id v12 = *(void **)(a2 + v11);
  id v13 = *(void **)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  id v14 = v12;

  return a1;
}

uint64_t sub_100080F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100080FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = *(int *)(a3 + 24);
  id v10 = *(void **)(a1 + v9);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);

  return a1;
}

uint64_t sub_10008105C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100081070);
}

uint64_t sub_100081070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100081130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100081144);
}

uint64_t sub_100081144(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for URLConfigurationCache()
{
  uint64_t result = qword_100323820;
  if (!qword_100323820) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008124C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1000812E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v58 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for CustodianshipInfoRecord();
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  int v19 = (char *)&v54 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v23 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v28 = Strong;
    sub_10002C854(a1, (uint64_t)v26);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      sub_100007288(v29, (uint64_t)qword_10033E748);
      uint64_t v30 = v59;
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      unint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v56 = (void *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        uint64_t v62 = v57;
        *(_DWORD *)uint64_t v33 = 136315394;
        uint64_t v54 = v33 + 4;
        os_log_t v55 = v31;
        uint64_t v34 = v60;
        os_log_type_t v35 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v58, v30 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v4);
        sub_10002F8A4();
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v38 = v37;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v4);
        uint64_t v61 = sub_100135190(v36, v38, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2112;
        uint64_t v39 = _convertErrorToNSError(_:)();
        uint64_t v61 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v56 = v39;
        swift_errorRelease();
        swift_errorRelease();
        os_log_t v40 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, v32, "Error fetching custodianship %s: %@", (uint8_t *)v33, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        swift_errorRelease();
      }
      else
      {
        swift_release();
        swift_errorRelease();
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      sub_10002C8BC((uint64_t)v26, (uint64_t)v22);
      sub_10004CEC4((uint64_t)v22, (uint64_t)v15);
      uint64_t v45 = &v22[v7[6]];
      uint64_t v47 = *(void *)v45;
      uint64_t v46 = *((void *)v45 + 1);
      uint64_t v59 = v28;
      os_log_type_t v48 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v48(v11, v15, v4);
      v48(&v11[v7[5]], &v15[v7[5]], v4);
      uint64_t v49 = v7[8];
      uint64_t v50 = *(void *)&v15[v49];
      unint64_t v51 = *(void *)&v15[v49 + 8];
      uint64_t v52 = (uint64_t *)&v11[v49];
      uint64_t *v52 = v50;
      v52[1] = v51;
      uint64_t v53 = &v11[v7[6]];
      *(void *)uint64_t v53 = v47;
      *((void *)v53 + 1) = v46;
      *(void *)&v11[v7[7]] = 4;
      LOBYTE(v47) = v15[v7[9]];
      swift_bridgeObjectRetain();
      sub_100013140(v50, v51);
      sub_100081CB8((uint64_t)v15);
      v11[v7[9]] = v47;
      sub_10002C8BC((uint64_t)v11, (uint64_t)v19);
      sub_100008EF8((void *)(v59 + 16), *(void *)(v59 + 40));
      sub_100269654((uint64_t)v19, (uint64_t)sub_100081968, 0);
      swift_release();
      sub_100081CB8((uint64_t)v19);
      sub_100081CB8((uint64_t)v22);
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100007288(v41, (uint64_t)qword_10033E748);
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error updating custodianship - couldn't get strong ref", v44, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100081968(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002C854(a1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v16[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error updating custodianship %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    [self postRecoveryContactChangedNotification];
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Custodianship status updated", v15, 2u);
      swift_slowDealloc();
    }

    sub_100081D14((uint64_t)v5);
  }
}

uint64_t sub_100081C54()
{
  sub_100008EA8(v0 + 16);
  sub_100008EA8(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonCustodianRemovedHandler()
{
  return self;
}

uint64_t sub_100081CB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustodianshipInfoRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100081D14(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324590);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100081D74(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x69636966656E6562;
      break;
    case 2:
      unint64_t result = 0x444964726F636572;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100081E40()
{
  return sub_100081D74(*v0);
}

uint64_t sub_100081E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100083DB0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100081E70(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100081E7C(uint64_t a1)
{
  unint64_t v2 = sub_1000831FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100081EB8(uint64_t a1)
{
  unint64_t v2 = sub_1000831FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100081EF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v38 = sub_100009F04(&qword_100323958);
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeneficiaryManifestRecord();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v39 = a1;
  sub_100008EF8(a1, v18);
  sub_1000831FC();
  unint64_t v37 = v13;
  int v19 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    return sub_100008EA8((uint64_t)v39);
  }
  os_log_type_t v32 = v7;
  uint64_t v33 = v3;
  uint64_t v20 = v36;
  os_log_t v40 = (int *)v14;
  sub_100009F04((uint64_t *)&unk_100328450);
  char v42 = 0;
  sub_100083310((unint64_t *)&unk_100323970);
  uint64_t v21 = v38;
  uint64_t v22 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = v40[5];
  *(void *)&v17[v23] = v41;
  LOBYTE(v41) = 1;
  sub_100083374((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v24 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  uint64_t v31 = v23;
  v30(v17, v10, v24);
  LOBYTE(v41) = 2;
  uint64_t v25 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v30(&v17[v40[6]], v25, v24);
  char v42 = 3;
  sub_1000130EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v40;
  *(_OWORD *)&v17[v40[7]] = v41;
  LOBYTE(v41) = 4;
  char v27 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v21);
  v17[v26[8]] = v27 & 1;
  sub_100083250((uint64_t)v17, v34);
  sub_100008EA8((uint64_t)v39);
  return sub_1000832B4((uint64_t)v17);
}

uint64_t sub_100082460(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04(&qword_100323988);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000831FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v10 = type metadata accessor for BeneficiaryManifestRecord();
  *(void *)&long long v12 = *(void *)(v3 + *(int *)(v10 + 20));
  char v13 = 0;
  sub_100009F04((uint64_t *)&unk_100328450);
  sub_100083310((unint64_t *)&unk_100323990);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    sub_100083374(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v10 + 28));
    char v13 = 3;
    sub_1000131F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100082710(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v67 = a2;
  uint64_t v66 = a3;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v62 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v68 = (char *)&v62 - v19;
  if (CKRecord.recordType.getter() == 0xD000000000000024 && v20 == 0x800000010029B0E0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      uint64_t v71 = 2;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_100083374((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      return;
    }
  }
  uint64_t v65 = v17;
  id v22 = [a1 recordID];
  id v23 = [v22 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v69 = v12;

  UUID.init(uuidString:)();
  uint64_t v24 = v69;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v25(v11, 1, v24) == 1)
  {
    sub_1000833BC((uint64_t)v11);
    goto LABEL_7;
  }
  uint64_t v63 = v13;
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v62(v68, v11, v24);
  id v26 = [a1 encryptedValuesByKey];
  NSString v27 = String._bridgeToObjectiveC()();
  id v64 = v26;
  id v28 = [v26 objectForKeyedSubscript:v27];

  if (!v28) {
    goto LABEL_12;
  }
  uint64_t v71 = (uint64_t)v28;
  sub_100009F04(&qword_1003239A0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v69;
  if (v25(v8, 1, v69) == 1)
  {
    sub_1000833BC((uint64_t)v8);
LABEL_12:
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E760);
    uint64_t v31 = a1;
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 138412290;
      unint64_t v70 = v31;
      uint64_t v36 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v35 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing Inheritance beneficiaryID - %@", v34, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v32 = v31;
    }
    uint64_t v37 = v69;
    uint64_t v38 = v63;

    type metadata accessor for InheritanceError(0);
    uint64_t v71 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100083374((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v68, v37);
    return;
  }
  v62(v65, v8, v29);
  NSString v39 = String._bridgeToObjectiveC()();
  os_log_t v40 = [v64 objectForKeyedSubscript:v39];

  uint64_t v41 = v63;
  if (v40 && (unint64_t v70 = v40, sub_100009F04((uint64_t *)&unk_100328450), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v42 = v71;
    id v43 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [a1 encodeSystemFieldsWithCoder:v43];
    [v43 finishEncoding];
    id v44 = [v43 encodedData];
    uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;
    swift_unknownObjectRelease();

    os_log_type_t v48 = (int *)type metadata accessor for BeneficiaryManifestRecord();
    uint64_t v49 = v66;
    uint64_t v50 = (uint64_t *)(v66 + v48[7]);
    *uint64_t v50 = v45;
    v50[1] = v47;
    uint64_t v51 = v69;
    uint64_t v52 = (void (*)(uint64_t, char *, uint64_t))v62;
    v62((char *)(v49 + v48[6]), v68, v69);
    v52(v49, v65, v51);
    *(void *)(v49 + v48[5]) = v42;
    *(unsigned char *)(v49 + v48[8]) = v67 & 1;
  }
  else
  {
    if (qword_100320B90 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100007288(v53, (uint64_t)qword_10033E760);
    uint64_t v54 = a1;
    os_log_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 138412290;
      unint64_t v70 = v54;
      uint64_t v59 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v58 = v54;

      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Missing Inheritance altDSID - %@", v57, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      uint64_t v41 = v63;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_t v55 = v54;
    }

    type metadata accessor for InheritanceError(0);
    uint64_t v71 = 2;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_100083374((unint64_t *)&unk_100321CC0, type metadata accessor for InheritanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v60 = *(void (**)(char *, uint64_t))(v41 + 8);
    uint64_t v61 = v69;
    v60(v65, v69);
    v60(v68, v61);
  }
}

uint64_t sub_1000830A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100081EF4(a1, a2);
}

uint64_t sub_1000830BC(void *a1)
{
  return sub_100082460(a1);
}

uint64_t sub_1000830D4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100083374((unint64_t *)&unk_100323940, (void (*)(uint64_t))type metadata accessor for BeneficiaryManifestRecord);
  uint64_t result = sub_100083374(&qword_1003235C8, (void (*)(uint64_t))type metadata accessor for BeneficiaryManifestRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for BeneficiaryManifestRecord()
{
  uint64_t result = qword_100323A00;
  if (!qword_100323A00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000831A4(uint64_t a1)
{
  uint64_t result = sub_100083374(&qword_100323950, (void (*)(uint64_t))type metadata accessor for BeneficiaryManifestRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000831FC()
{
  unint64_t result = qword_100323960;
  if (!qword_100323960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323960);
  }
  return result;
}

uint64_t sub_100083250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeneficiaryManifestRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000832B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeneficiaryManifestRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100083310(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000112CC((uint64_t *)&unk_100328450);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100083374(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000833BC(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100321CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for BeneficiaryManifestRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000834E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryManifestRecord.CodingKeys()
{
  return &type metadata for BeneficiaryManifestRecord.CodingKeys;
}

char *sub_100083520(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[6];
    *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    swift_bridgeObjectRetain();
    v8(v10, v11, v7);
    uint64_t v12 = a3[7];
    uint64_t v13 = (uint64_t *)&a1[v12];
    uint64_t v14 = (uint64_t *)&a2[v12];
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    sub_100013140(*v14, v16);
    *uint64_t v13 = v15;
    v13[1] = v16;
    a1[a3[8]] = a2[a3[8]];
  }
  return a1;
}

uint64_t sub_100083650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  v5(a1 + *(int *)(a2 + 24), v4);
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_100013198(v7, v8);
}

uint64_t sub_100083700(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  swift_bridgeObjectRetain();
  v7(v9, v10, v6);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_100013140(*v13, v15);
  *uint64_t v12 = v14;
  v12[1] = v15;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000837E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  sub_100013140(*v10, v12);
  uint64_t v13 = *v9;
  unint64_t v14 = v9[1];
  *uint64_t v9 = v11;
  v9[1] = v12;
  sub_100013198(v13, v14);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000838D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t sub_100083984(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v8 = a3[7];
  uint64_t v9 = *(void *)(a1 + v8);
  unint64_t v10 = *(void *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  sub_100013198(v9, v10);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100083A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083A68);
}

uint64_t sub_100083A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100083B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083B3C);
}

uint64_t sub_100083B3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100083BF8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100083CAC()
{
  unint64_t result = qword_100323A48;
  if (!qword_100323A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323A48);
  }
  return result;
}

unint64_t sub_100083D04()
{
  unint64_t result = qword_100323A50;
  if (!qword_100323A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323A50);
  }
  return result;
}

unint64_t sub_100083D5C()
{
  unint64_t result = qword_100323A58;
  if (!qword_100323A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323A58);
  }
  return result;
}

uint64_t sub_100083DB0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000015 && a2 == 0x800000010029B340
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

void sub_100083FE0(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(qword_100323C78);
  uint64_t v81 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v80 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100009F04(&qword_100325870);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v10 = *(void *)(v88 - 8);
  __chkstk_darwin(v88, v11);
  uint64_t v87 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v79 = sub_100007288(v13, (uint64_t)qword_10033E778);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Generating common fields for analytics...", v16, 2u);
    swift_slowDealloc();
  }

  unint64_t v17 = sub_100221768((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v19 = v87;
  uint64_t v20 = v88;
  uint64_t v84 = a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController;
  uint64_t v85 = v10 + 16;
  NSString v83 = v18;
  ((void (*)(char *))v18)(v87);
  Dependency.wrappedValue.getter();
  char v21 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v86 = v10 + 8;
  BOOL v82 = v21;
  v21(v19, v20);
  id v22 = *(void **)(*sub_100008EF8(v90, v91) + 16);
  id v89 = 0;
  [v22 walrusStatus:&v89];
  if (v89)
  {
    id v23 = v89;
    swift_willThrow();
  }
  sub_100008EA8((uint64_t)v90);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v17;
  sub_10022C4F8((uint64_t)isa, 0xD000000000000014, 0x800000010029B3E0, isUniquelyReferenced_nonNull_native);
  uint64_t v26 = v90[0];
  swift_bridgeObjectRelease();
  NSString v27 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v77 = a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__accountStore;
  uint64_t v78 = v6 + 16;
  long long v76 = v27;
  ((void (*)(char *))v27)(v9);
  Dependency.wrappedValue.getter();
  BOOL v75 = *(void (**)(char *, uint64_t))(v6 + 8);
  v75(v9, v5);
  id v28 = [[*(id *)(*sub_100008EF8(v90, v91) + 16) aa_primaryAppleAccount];
  if (v28)
  {
    uint64_t v29 = v28;
    [v28 aa_isSuspended];
  }
  sub_100008EA8((uint64_t)v90);
  Class v30 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v31 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v26;
  sub_10022C4F8((uint64_t)v30, 0xD000000000000013, 0x800000010029B400, v31);
  uint64_t v32 = v90[0];
  swift_bridgeObjectRelease();
  uint64_t v34 = v87;
  uint64_t v33 = v88;
  v83(v87, v84, v88);
  Dependency.wrappedValue.getter();
  v82(v34, v33);
  uint64_t v35 = *(void **)(*sub_100008EF8(v90, v91) + 24);
  id v89 = 0;
  if ([v35 isManateeAvailable:&v89])
  {
    id v36 = v89;
  }
  else
  {
    uint64_t v37 = v5;
    uint64_t v38 = a1;
    id v39 = v89;
    _convertNSErrorToError(_:)();

    a1 = v38;
    uint64_t v5 = v37;
    swift_willThrow();
    swift_errorRelease();
  }
  sub_100008EA8((uint64_t)v90);
  Class v40 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v32;
  sub_10022C4F8((uint64_t)v40, 0xD000000000000012, 0x800000010029B420, v41);
  uint64_t v42 = v90[0];
  swift_bridgeObjectRelease();
  id v43 = v87;
  uint64_t v44 = v88;
  v83(v87, v84, v88);
  Dependency.wrappedValue.getter();
  v82(v43, v44);
  sub_100056834();
  sub_100008EA8((uint64_t)v90);
  Class v45 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v46 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v42;
  sub_10022C4F8((uint64_t)v45, 0x616E455044437369, 0xEC00000064656C62, v46);
  uint64_t v47 = v90[0];
  swift_bridgeObjectRelease();
  os_log_type_t v48 = v80;
  uint64_t v49 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__deviceState, v2);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v2);
  id v50 = [objc_allocWithZone((Class)AKDevice) init];
  [v50 isProtectedWithPasscode];

  sub_100008EA8((uint64_t)v90);
  Class v51 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v47;
  sub_10022C4F8((uint64_t)v51, 0xD000000000000011, 0x800000010029B440, v52);
  uint64_t v53 = v90[0];
  swift_bridgeObjectRelease();
  v76(v9, v77, v5);
  Dependency.wrappedValue.getter();
  v75(v9, v5);
  sub_100008EF8(v90, v91);
  sub_100051594();
  sub_100008EA8((uint64_t)v90);
  Class v54 = Int._bridgeToObjectiveC()().super.super.isa;
  char v55 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v53;
  sub_10022C4F8((uint64_t)v54, 0x7974697275636573, 0xED00006C6576656CLL, v55);
  uint64_t v56 = v90[0];
  swift_bridgeObjectRelease();
  uint64_t v57 = (void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController);
  uint64_t v58 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController + 24);
  uint64_t v59 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController + 32);
  sub_100008EF8((void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController), v58);
  (*(void (**)(uint64_t, uint64_t))(v59 + 32))(v58, v59);
  Class v60 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v56;
  sub_10022C4F8((uint64_t)v60, 0xD000000000000019, 0x800000010029B460, v61);
  uint64_t v62 = v90[0];
  swift_bridgeObjectRelease();
  uint64_t v63 = v57[3];
  uint64_t v64 = v57[4];
  sub_100008EF8(v57, v63);
  (*(void (**)(uint64_t, uint64_t))(v64 + 40))(v63, v64);
  Class v65 = Bool._bridgeToObjectiveC()().super.super.isa;
  char v66 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v62;
  sub_10022C4F8((uint64_t)v65, 0xD000000000000014, 0x800000010029B480, v66);
  uint64_t v67 = v90[0];
  swift_bridgeObjectRelease();
  Class v68 = Double._bridgeToObjectiveC()().super.super.isa;
  char v69 = swift_isUniquelyReferenced_nonNull_native();
  v90[0] = v67;
  sub_10022C4F8((uint64_t)v68, 0xD000000000000013, 0x800000010029B4A0, v69);
  uint64_t v70 = v90[0];
  swift_bridgeObjectRelease();
  *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields) = v70;
  swift_bridgeObjectRelease();
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Generated common fields for analytics!", v73, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000849EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100084A14()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__deviceState;
  uint64_t v4 = sub_100009F04(qword_100323C78);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__accountStore;
  uint64_t v6 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_100008EA8(v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100084B78()
{
  return type metadata accessor for DaemonAnalyticsAccountModel();
}

uint64_t type metadata accessor for DaemonAnalyticsAccountModel()
{
  uint64_t result = qword_100323AB8;
  if (!qword_100323AB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100084BCC()
{
  sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, &qword_100323AC8, (uint64_t *)&unk_100323AD0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_100084D28()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100084D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 40) + **(int **)(a4 + 40));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100054724;
  return v11(a1, a2, a3, a4);
}

uint64_t sub_100084E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v4;
  v6[6] = a3;
  v6[7] = v3;
  v6[5] = a2;
  uint64_t v8 = *v3;
  v6[8] = *v3;
  v6[9] = *(void *)(v8 + 88);
  sub_1000112CC(&qword_100323D68);
  v6[10] = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  v6[11] = swift_task_alloc();
  uint64_t v9 = *(void *)(v8 + 80);
  v6[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[13] = v10;
  v6[14] = *(void *)(v10 + 64);
  v6[15] = swift_task_alloc();
  sub_100009F04(&qword_100321C90);
  v6[16] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v6[17] = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_100085090;
  return sub_100086D74(a1, a3);
}

uint64_t sub_100085090()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  return _swift_task_switch(sub_1000851A0, v1, 0);
}

uint64_t sub_1000851A0()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v18 = v2;
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[12];
  uint64_t v23 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[6];
  uint64_t v20 = v8;
  uint64_t v21 = v0[10];
  uint64_t v22 = v0[5];
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v1, 1, 1, v9);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v19(v2, v8, v4);
  uint64_t v10 = *(void *)(v6 + 96);
  type metadata accessor for ExpiringValueCache();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = v7;
  *((void *)v13 + 3) = WitnessTable;
  *((void *)v13 + 4) = v4;
  *((void *)v13 + 5) = v5;
  *((void *)v13 + 6) = v10;
  *((void *)v13 + 7) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v13[v12], v18, v4);
  swift_retain_n();
  uint64_t v14 = sub_100086BF4(v1, (uint64_t)&unk_100323D78, (uint64_t)v13);
  v19(v18, v20, v4);
  uint64_t v15 = *(int *)(v21 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v23, v22, v5);
  *(void *)(v23 + v15) = v14;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v23, 0, 1, v21);
  swift_beginAccess();
  type metadata accessor for Dictionary();
  swift_retain();
  Dictionary.subscript.setter();
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100085474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  uint64_t v7 = *a4;
  v5[10] = *a4;
  uint64_t v8 = *(void *)(v7 + 80);
  v5[11] = v8;
  v5[12] = *(void *)(v8 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CancellationError();
  v5[16] = v9;
  v5[17] = *(void *)(v9 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = *(void *)(v7 + 88);
  uint64_t v10 = type metadata accessor for Optional();
  v5[21] = v10;
  v5[22] = *(void *)(v10 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContinuousClock();
  v5[24] = v11;
  v5[25] = *(void *)(v11 - 8);
  v5[26] = swift_task_alloc();
  return _swift_task_switch(sub_1000856D0, a4, 0);
}

uint64_t sub_1000856D0()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100323D80 + dword_100323D80);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100085798;
  return v3(0x86AC351052600000, 32, 0, 0, 1);
}

uint64_t sub_100085798()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[26];
  uint64_t v4 = v2[25];
  uint64_t v5 = v2[24];
  uint64_t v6 = v2[8];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_1000860A8;
  }
  else {
    uint64_t v7 = sub_100085914;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100085914()
{
  char v55 = v0;
  uint64_t v1 = v0[28];
  static Task<>.checkCancellation()();
  if (v1)
  {
    v0[30] = v1;
    v0[2] = v1;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    if (swift_dynamicCast())
    {
      uint64_t v2 = v0[18];
      uint64_t v3 = v0[19];
      uint64_t v4 = v0[16];
      uint64_t v5 = v0[17];
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v6 = v0[15];
      uint64_t v7 = v0[11];
      uint64_t v8 = v0[12];
      uint64_t v9 = v0[9];
      uint64_t v10 = type metadata accessor for Logger();
      sub_100007288(v10, (uint64_t)qword_10033E700);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      v11(v6, v9, v7);
      unint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      BOOL v14 = os_log_type_enabled(v12, v13);
      uint64_t v15 = v0[15];
      if (v14)
      {
        uint64_t v16 = v0[14];
        log = v12;
        uint64_t v18 = v0[11];
        uint64_t v17 = v0[12];
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        v54[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        v11(v16, v15, v18);
        uint64_t v20 = String.init<A>(describing:)();
        v0[6] = sub_100135190(v20, v21, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
        unint64_t v12 = log;
        _os_log_impl((void *)&_mh_execute_header, log, v13, "Expiration cancelled, skipping value removal for key: %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v0[12] + 8))(v0[15], v0[11]);
      }

      uint64_t v43 = v0[17];
      uint64_t v42 = v0[18];
      uint64_t v44 = v0[16];
      sub_100087CB0(&qword_100323D90, (void (*)(uint64_t))&type metadata accessor for CancellationError);
      swift_allocError();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v45, v42, v44);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      swift_errorRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v46 = (uint64_t (*)(void))v0[1];
      return v46();
    }
    swift_errorRelease();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v27 = v0[12];
    uint64_t v26 = v0[13];
    uint64_t v28 = v0[11];
    uint64_t v29 = v0[9];
    uint64_t v30 = type metadata accessor for Logger();
    sub_100007288(v30, (uint64_t)qword_10033E700);
    char v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
    v31(v26, v29, v28);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = v0[13];
      uint64_t v35 = v0[14];
      char v52 = v32;
      os_log_type_t type = v33;
      uint64_t v36 = v0[11];
      uint64_t v37 = v0[12];
      uint64_t v38 = swift_slowAlloc();
      Class v51 = (void *)swift_slowAlloc();
      v54[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315394;
      v31(v35, v34, v36);
      uint64_t v39 = String.init<A>(describing:)();
      v0[4] = sub_100135190(v39, v40, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v36);
      *(_WORD *)(v38 + 12) = 2112;
      swift_errorRetain();
      uint64_t v41 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v51 = v41;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v32 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, type, "Expiration task failed for key (%s with error: %@)", (uint8_t *)v38, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
      swift_errorRelease();
      swift_errorRelease();
    }

    v0[3] = v0[8];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[31] = v22;
    uint64_t v23 = type metadata accessor for ExpiringValueCache();
    uint64_t WitnessTable = swift_getWitnessTable();
    *uint64_t v22 = v0;
    uint64_t v25 = sub_1000869C4;
  }
  else
  {
    v0[7] = v0[8];
    uint64_t v22 = (void *)swift_task_alloc();
    v0[29] = v22;
    uint64_t v23 = type metadata accessor for ExpiringValueCache();
    uint64_t WitnessTable = swift_getWitnessTable();
    *uint64_t v22 = v0;
    uint64_t v25 = sub_1000867A4;
  }
  v22[1] = v25;
  uint64_t v48 = v0[23];
  uint64_t v49 = v0[9];
  return sub_100084D84(v48, v49, v23, WitnessTable);
}

uint64_t sub_1000860A8()
{
  Class v54 = v0;
  uint64_t v1 = v0[28];
  v0[2] = v1;
  v0[30] = v1;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  if (swift_dynamicCast())
  {
    uint64_t v2 = v0[18];
    uint64_t v3 = v0[19];
    uint64_t v4 = v0[16];
    uint64_t v5 = v0[17];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v10 = type metadata accessor for Logger();
    sub_100007288(v10, (uint64_t)qword_10033E700);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v11(v6, v9, v7);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[15];
    if (v14)
    {
      uint64_t v16 = v0[14];
      log = v12;
      uint64_t v18 = v0[11];
      uint64_t v17 = v0[12];
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      v11(v16, v15, v18);
      uint64_t v20 = String.init<A>(describing:)();
      v0[6] = sub_100135190(v20, v21, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
      unint64_t v12 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v13, "Expiration cancelled, skipping value removal for key: %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0[12] + 8))(v0[15], v0[11]);
    }

    uint64_t v39 = v0[17];
    uint64_t v38 = v0[18];
    uint64_t v40 = v0[16];
    sub_100087CB0(&qword_100323D90, (void (*)(uint64_t))&type metadata accessor for CancellationError);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v41, v38, v40);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = (uint64_t (*)(void))v0[1];
    return v42();
  }
  else
  {
    swift_errorRelease();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v23 = v0[12];
    uint64_t v22 = v0[13];
    uint64_t v24 = v0[11];
    uint64_t v25 = v0[9];
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E700);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    v27(v22, v25, v24);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = v0[13];
      uint64_t v31 = v0[14];
      Class v51 = v28;
      os_log_type_t type = v29;
      uint64_t v32 = v0[11];
      uint64_t v33 = v0[12];
      uint64_t v34 = swift_slowAlloc();
      id v50 = (void *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      v27(v31, v30, v32);
      uint64_t v35 = String.init<A>(describing:)();
      v0[4] = sub_100135190(v35, v36, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v30, v32);
      *(_WORD *)(v34 + 12) = 2112;
      swift_errorRetain();
      uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
      v0[5] = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v50 = v37;
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v28 = v51;
      _os_log_impl((void *)&_mh_execute_header, v51, type, "Expiration task failed for key (%s with error: %@)", (uint8_t *)v34, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
      swift_errorRelease();
      swift_errorRelease();
    }

    v0[3] = v0[8];
    uint64_t v44 = (void *)swift_task_alloc();
    v0[31] = v44;
    uint64_t v45 = type metadata accessor for ExpiringValueCache();
    uint64_t WitnessTable = swift_getWitnessTable();
    *uint64_t v44 = v0;
    v44[1] = sub_1000869C4;
    uint64_t v47 = v0[23];
    uint64_t v48 = v0[9];
    return sub_100084D84(v47, v48, v45, WitnessTable);
  }
}

uint64_t sub_1000867A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 176);
  uint64_t v3 = *(void *)(*(void *)v0 + 168);
  uint64_t v4 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100086910, v4, 0);
}

uint64_t sub_100086910()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000869C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 176);
  uint64_t v3 = *(void *)(*(void *)v0 + 168);
  uint64_t v4 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100086B30, v4, 0);
}

uint64_t sub_100086B30()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100086BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100054BDC(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_100086D74(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = *v2;
  v3[11] = *v2;
  uint64_t v5 = *(void *)(v4 + 80);
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = *(void *)(v4 + 88);
  sub_1000112CC(&qword_100323D68);
  v3[16] = swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for Optional();
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  return _swift_task_switch(sub_100086F3C, v2, 0);
}

uint64_t sub_100086F3C()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[16];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  int v7 = v24(v2, 1, v5);
  uint64_t v8 = v0[21];
  if (v7 == 1)
  {
    (*(void (**)(void, void))(v0[18] + 8))(v0[21], v0[17]);
  }
  else
  {
    uint64_t v9 = v0[15];
    sub_100009F04((uint64_t *)&unk_100325850);
    Task.cancel()();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v11 = v0[19];
  uint64_t v10 = v0[20];
  uint64_t v12 = v0[18];
  uint64_t v22 = v0[17];
  uint64_t v23 = v0[22];
  uint64_t v13 = v0[16];
  (*(void (**)(void, void, void))(v0[13] + 16))(v0[14], v0[9], v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v10, 1, 1, v13);
  swift_beginAccess();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v23, v22);
  int v14 = v24(v11, 1, v13);
  uint64_t v15 = v0[19];
  uint64_t v16 = v0[15];
  if (v14 == 1)
  {
    (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v19 = v0[8];
    swift_release();
    uint64_t v17 = *(void *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v19, v15, v16);
    uint64_t v18 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, void))(v17 + 56))(v0[8], v18, 1, v0[15]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1000872F8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100087320()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ExpiringValueCache()
{
  return sub_100087CF8();
}

unint64_t sub_100087370(uint64_t a1)
{
  unint64_t result = sub_100087398();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100087398()
{
  unint64_t result = qword_100323D10;
  if (!qword_100323D10)
  {
    sub_1000112CC(&qword_100323D18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323D10);
  }
  return result;
}

uint64_t sub_1000873F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t sub_1000873FC()
{
  return v0;
}

uint64_t sub_100087408()
{
  return sub_1000873FC();
}

uint64_t sub_100087424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *int v7 = v3;
  v7[1] = sub_100054724;
  return sub_100084E94(a1, a2, a3);
}

uint64_t sub_1000874D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100025248;
  return sub_100086D74(a1, a2);
}

uint64_t sub_100087584(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

double sub_1000875C0()
{
  sub_100009F04(&qword_100323D18);
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 128) = sub_10022188C((uint64_t)_swiftEmptyArrayStorage);
  double result = -1.59123824e-276;
  *(_OWORD *)(v0 + 112) = xmmword_1002AB6A0;
  qword_10033E838 = v0;
  return result;
}

uint64_t sub_100087620()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000876EC(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[2];
  uint64_t v6 = (uint64_t *)v1[7];
  uint64_t v7 = (uint64_t)v1
     + ((*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100025248;
  return sub_100085474(a1, v5, v4, v6, v7);
}

uint64_t sub_1000877E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_1000878E8, 0, 0);
}

uint64_t sub_1000878E8()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100087CB0(&qword_100323D98, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100087CB0((unint64_t *)&unk_100323DA0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100087A88;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_100087A88()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100087C44, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100087C44()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100087CB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100087CF8()
{
  return swift_getGenericMetadata();
}

void *sub_100087D28(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_100135BB0((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  sub_10000850C(0, (unint64_t *)&qword_100324670);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

void sub_100087E00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(id), uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  if (a2 && (id v13 = a4, v14 = sub_100087D28(v13, a2), v13, v14))
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E700);
    swift_bridgeObjectRetain_n();
    id v16 = a9;
    id v17 = v14;
    id v18 = v16;
    id v19 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    uint64_t v22 = &off_10031D000;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315650;
      swift_bridgeObjectRetain();
      sub_100135190(a7, a8, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 2112;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v18;

      *(_WORD *)(v23 + 22) = 1024;
      [v19 BOOLValue];

      uint64_t v22 = &off_10031D000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Recipient %s has device capable of %@: %{BOOL}d", (uint8_t *)v23, 0x1Cu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a5([v19 v22[276]]);
  }
  else
  {
    a5(0);
  }
}

uint64_t sub_100088110(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  char v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_10000850C(0, (unint64_t *)&qword_100323EE0);
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    sub_10008867C();
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v8 = a4;
  v7(a2, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000881F0()
{
  swift_unknownObjectRelease();
  sub_100008EA8(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DaemonIDSMessenger()
{
  return self;
}

void sub_100088254(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  id v11 = objc_allocWithZone((Class)AAMessagingDestination);
  _Block_copy(a5);
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithHandle:v12];

  if (v13)
  {
    uint64_t v14 = *(void **)(a4 + 16);
    sub_100009F04((uint64_t *)&unk_100328470);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1002AB070;
    *(void *)(v15 + 32) = v13;
    specialized Array._endMutation()();
    sub_10000850C(0, (unint64_t *)&qword_100323EE0);
    id v16 = v13;
    v17.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = (void *)swift_allocObject();
    v18[2] = v16;
    v18[3] = sub_1000885E4;
    v18[4] = v10;
    void v18[5] = a1;
    v18[6] = a2;
    v18[7] = a3;
    aBlock[4] = sub_10008864C;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100088110;
    aBlock[3] = &unk_1002F7FC8;
    id v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    id v20 = v16;
    swift_retain();
    id v21 = a3;
    swift_release();
    [v14 fetchCapability:v21 destinations:v17.super.isa completion:v19];

    _Block_release(v19);
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to generate destination from handle.", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void aBlock[6] = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_10004A318();
    _BridgedStoredNSError.init(_:userInfo:)();
    v17.super.Class isa = (Class)aBlock[0];
    a5[2](a5, 0);
    swift_release();
  }
}

uint64_t sub_1000885AC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000885E4(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1000885FC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10008864C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100087E00(a1, a2, a3, *(void **)(v3 + 16), *(void (**)(id))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void **)(v3 + 56));
}

unint64_t sub_10008867C()
{
  unint64_t result = qword_100323EF0;
  if (!qword_100323EF0)
  {
    sub_10000850C(255, (unint64_t *)&qword_100323EE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100323EF0);
  }
  return result;
}

uint64_t sub_1000886E4()
{
  if (*(void *)(v0 + 472))
  {
    uint64_t v1 = *(void *)(v0 + 472);
  }
  else
  {
    type metadata accessor for TrustedContactsDataSync();
    uint64_t v1 = swift_allocObject();
    sub_100009F04((uint64_t *)&unk_100321920);
    Dependency.init(dependencyId:config:)();
    sub_100009F04(&qword_100322470);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100321850);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100322480);
    Dependency.init(dependencyId:config:)();
    sub_10000850C(0, (unint64_t *)&qword_1003245C0);
    Dependency.init(dependencyId:config:)();
    sub_100009F04(&qword_10032D780);
    Dependency.init(dependencyId:config:)();
    sub_100009F04((uint64_t *)&unk_100321910);
    Dependency.init(dependencyId:config:)();
    *(void *)(v0 + 472) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1000888AC()
{
  uint64_t v1 = *(void **)(v0 + 56);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_1000086C4((uint64_t)v12, (uint64_t)v13);
  if (v13[3])
  {
    if (swift_dynamicCast() & 1) != 0 && (v11) {
      return 1;
    }
  }
  else
  {
    sub_100006574((uint64_t)v13, &qword_100328490);
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  swift_retain_n();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)id v8 = 138412290;
    v13[0] = v1;
    id v10 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v1;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client is missing management entitlement: %@", v8, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return 0;
}

uint64_t sub_100088B18(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  NSString v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v38[0] = a2;
    swift_errorRetain();
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for AACustodianError(0);
    if (swift_dynamicCast())
    {
      id v13 = (void *)v37;
      v38[0] = v37;
      uint64_t v36 = -7014;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v14 = (void *)v37;
      uint64_t v36 = v37;
      char v15 = static _BridgedStoredNSError.== infix(_:_:)();

      if (v15)
      {
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_100007288(v16, (uint64_t)qword_10033E748);
        id v17 = a3;
        id v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        int v20 = v19;
        if (os_log_type_enabled(v18, v19))
        {
          int v35 = v20;
          id v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          v38[0] = v33;
          *(_DWORD *)id v21 = 136315138;
          uint64_t v32 = v21;
          id v22 = [v17 handle:v21 + 4];
          id v34 = v13;
          id v23 = v22;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;

          uint64_t v37 = sub_100135190(v24, v26, v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v35, "Custodianship already exists with handle %s. Abandoning custodian setup.", v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
      }
    }
    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 1, 1, v30);
    swift_errorRetain();
    a4(v12, (void *)a2);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100089524(a3, a4, a5);
      return swift_release();
    }
    uint64_t v28 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v12, 1, 1, v28);
    type metadata accessor for AACustodianError(0);
    uint64_t v36 = -7022;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v29 = (void *)v37;
    a4(v12, (void *)v37);
  }
  return sub_100006574((uint64_t)v12, (uint64_t *)&unk_100321CE0);
}

void sub_100088FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v9, (uint64_t *)&unk_100321CE0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  if (a2) {
    id v13 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    id v13 = 0;
  }
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v13);
}

uint64_t sub_100089148(uint64_t a1, char a2, void *a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  id v17 = (char *)v33 - v16;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      v33[0] = a5;
      uint64_t v28 = a4;
      os_log_type_t v29 = (void *)v27;
      *(_DWORD *)unint64_t v26 = 138412290;
      uint64_t v30 = _convertErrorToNSError(_:)();
      uint64_t v34 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v29 = v30;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to fetch custodians with error %@.", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a4 = v28;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    uint64_t v31 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v14, 1, 1, v31);
    swift_errorRetain();
    a4(v14, a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
    id v17 = v14;
  }
  else
  {
    id v18 = a3;
    sub_100007850(a1, 0);
    os_log_type_t v19 = sub_100099888(a1, v18);

    sub_100007844(a1, 0);
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v17, 1, 1, v20);
    uint64_t v21 = v19[2];
    swift_bridgeObjectRelease();
    if (v21)
    {
      type metadata accessor for AACustodianError(0);
      v33[1] = -7014;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v22 = v34;
    }
    else
    {
      uint64_t v22 = 0;
    }
    a4(v17, v22);
    swift_errorRelease();
  }
  return sub_100006574((uint64_t)v17, (uint64_t *)&unk_100321CE0);
}

uint64_t sub_100089524(void *a1, void (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v28 = a2;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[CustodianDaemonService buildRecords] was called.", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *sub_100008EF8((void *)(v3 + 16), *(void *)(v3 + 40));
  uint64_t v30 = type metadata accessor for CustodianDaemonContainer();
  uint64_t v31 = &off_100301A78;
  v29[0] = v10;
  uint64_t v11 = type metadata accessor for CustodianshipRecordBuilder();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = sub_1000084BC((uint64_t)v29, v30);
  __chkstk_darwin(v13, v13);
  uint64_t v15 = (void *)((char *)&v29[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  uint64_t v17 = *v15;
  id v18 = a1;
  swift_retain();
  uint64_t v19 = sub_10009AAD8(v18, v17, v12);

  sub_100008EA8((uint64_t)v29);
  uint64_t v30 = v11;
  uint64_t v31 = &off_1002FC250;
  v29[0] = v19;
  uint64_t v20 = sub_100008EF8(v29, v11);
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = *v20;
  swift_retain_n();
  swift_retain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Begin building custodianship records.", v25, 2u);
    swift_slowDealloc();
  }

  swift_retain();
  swift_retain();
  uint64_t v26 = swift_retain();
  sub_10011ED10(v26, v22, v21, v28, a3);
  swift_release_n();
  swift_release_n();
  return sub_100008EA8((uint64_t)v29);
}

uint64_t sub_100089858(uint64_t a1, uint64_t a2, void (*a3)(char *, void *), uint64_t a4)
{
  uint64_t v7 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v15, v16);
  id v18 = (void **)((char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100007288(v25, (uint64_t)qword_10033E748);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Self is nil. Failed to build custodianship record. Abandoning custodian setup.", v28, 2u);
      swift_slowDealloc();
    }

    uint64_t v29 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v10, 1, 1, v29);
    type metadata accessor for AACustodianError(0);
    v32[1] = -7022;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v30 = v33;
    a3(v10, v33);

    return sub_100006574((uint64_t)v10, (uint64_t *)&unk_100321CE0);
  }
  sub_100019730(a1, (uint64_t)v18, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E748);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to build custodianship record. Abandoning custodian setup.", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v10, 1, 1, v24);
    swift_errorRetain();
    a3(v10, v19);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    return sub_100006574((uint64_t)v10, (uint64_t *)&unk_100321CE0);
  }
  sub_10009F45C((uint64_t)v18, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
  sub_100089CEC((uint64_t)v14, (uint64_t)a3, a4);
  swift_release();
  return sub_10009F5B4((uint64_t)v14, type metadata accessor for CustodianshipRecords);
}

uint64_t sub_100089CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  uint64_t v12 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E748);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving freshly built records.", v16, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + 184), *(void *)(v4 + 208));
  sub_10009F2EC(a1, (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v4;
  sub_10009F45C((uint64_t)v12, v19 + v17, type metadata accessor for CustodianshipRecords);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = a2;
  v20[1] = a3;
  swift_retain();
  swift_retain();
  sub_10023F408(a1, (uint64_t)sub_1000994D8, v19);
  return swift_release();
}

uint64_t sub_100089F28(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04((uint64_t *)&unk_100322960);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v16, (uint64_t *)&unk_100322960);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = *v16;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to save custodianship records. Abandoning custodian setup.", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
    swift_errorRetain();
    a4((uint64_t)v12, v17);
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v23 = (uint64_t *)&unk_100321CE0;
    uint64_t v24 = (uint64_t)v12;
  }
  else
  {
    sub_10008A190(a3, a4, a5);
    uint64_t v23 = (uint64_t *)&unk_100322960;
    uint64_t v24 = (uint64_t)v16;
  }
  return sub_100006574(v24, v23);
}

uint64_t sub_10008A190(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v65 = a3;
  uint64_t v62 = a2;
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v56 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  Class v60 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianRecord();
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v55 - v18;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v58 = type metadata accessor for Logger();
  uint64_t v20 = sub_100007288(v58, (uint64_t)qword_10033E748);
  uint64_t v61 = a1;
  sub_10009F2EC(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v57 = v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v63 = v12;
  uint64_t v59 = v9;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v55 = v4;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v67 = (void *)v26;
    os_log_type_t v27 = (uint64_t *)&v19[*(int *)(v63 + 24)];
    uint64_t v29 = *v27;
    unint64_t v28 = v27[1];
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_100135190(v29, v28, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v9 = v59;
    swift_bridgeObjectRelease();
    sub_10009F5B4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sending custodian invitation to %s.", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v63;
    swift_slowDealloc();
    uint64_t v4 = v55;
    swift_slowDealloc();
  }
  else
  {
    sub_10009F5B4((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }

  sub_100008EF8((void *)(v4 + 144), *(void *)(v4 + 168));
  uint64_t v30 = v61;
  uint64_t v31 = (uint64_t)v16;
  sub_10009F2EC(v61, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  uint64_t v32 = v64;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
  uint64_t v34 = v60;
  v33(v60, v30 + *(int *)(v12 + 20), v9);
  type metadata accessor for CustodianInvitationMessage();
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v35 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v34, v9);
  id v36 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v36 initWithHandle:v37];

  if (v38)
  {
    uint64_t v39 = qword_100320B70;
    id v40 = v38;
    if (v39 != -1) {
      swift_once();
    }
    sub_100007288(v58, (uint64_t)qword_10033E700);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Destination is valid!", v43, 2u);
      swift_slowDealloc();
    }

    sub_100216D10(v35, v40);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      Class v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Class v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Custodian invitation sent!", v51, 2u);
      swift_slowDealloc();
    }

    uint64_t v52 = (uint64_t)v56;
    uint64_t v53 = v59;
    v33(v56, v31 + *(int *)(v63 + 20), v59);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v52, 0, 1, v53);
    v62(v52, 0);
    sub_100006574(v52, (uint64_t *)&unk_100321CE0);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v44 = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, (os_log_type_t)v45))
    {
      char v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Unable to generate destination from handle.", v46, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v66 = -7004;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v47 = v67;
    sub_10008A944((uint64_t)v67, v62, v65, v31);
    swift_release();
    swift_release();
  }
  return sub_10009F5B4(v31, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_10008A944(uint64_t a1, void (*a2)(void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      v29[0] = a3;
      uint64_t v17 = a2;
      uint64_t v18 = (void *)v16;
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v19 = _convertErrorToNSError(_:)();
      v29[1] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v19;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error sending custodian invitation over IDS: %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a2 = v17;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v11, 1, 1, v27);
    swift_errorRetain();
    a2(v11, a1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100007288(v20, (uint64_t)qword_10033E748);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      BOOL v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Custodian invitation sent!", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = a4 + *(int *)(type metadata accessor for CustodianRecord() + 20);
    uint64_t v25 = type metadata accessor for UUID();
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v11, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v11, 0, 1, v25);
    a2(v11, 0);
  }
  return sub_100006574((uint64_t)v11, (uint64_t *)&unk_100321CE0);
}

void sub_10008AD18(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v63 = a2;
  uint64_t v64 = a3;
  os_log_t v65 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v52 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v62 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v52 - v19;
  if (sub_1000888AC())
  {
    uint64_t v58 = v9;
    uint64_t v59 = v12;
    uint64_t v60 = v5;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v61 = v4;
    uint64_t v21 = type metadata accessor for Logger();
    sub_100007288(v21, (uint64_t)qword_10033E748);
    uint64_t v22 = v13;
    uint64_t v56 = *(void (**)(char *, os_log_t, uint64_t))(v14 + 16);
    v56(v20, v65, v13);
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v57 = v3;
    if (v25)
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v67 = v55;
      *(_DWORD *)uint64_t v26 = 136315138;
      Class v54 = v26 + 4;
      sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v66 = sub_100135190(v27, v28, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Resending custodian invitation to %s.", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    }

    uint64_t v33 = v14;
    uint64_t v53 = v22;
    uint64_t v34 = swift_allocObject();
    uint64_t v55 = v34;
    uint64_t v36 = v63;
    uint64_t v35 = v64;
    *(void *)(v34 + 16) = v63;
    *(void *)(v34 + 24) = v35;
    uint64_t v37 = v57;
    Class v54 = sub_100008EF8((void *)(v57 + 184), *(void *)(v57 + 208));
    id v38 = v62;
    v56(v62, v65, v22);
    unint64_t v39 = (*(unsigned __int8 *)(v33 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v40 = (v15 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v42 + v39, v38, v53);
    uint64_t v43 = (void *)(v42 + v40);
    void *v43 = v36;
    v43[1] = v35;
    *(void *)(v42 + v41) = v37;
    uint64_t v44 = (uint64_t (**)(uint64_t, uint64_t))(v42 + ((v41 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v45 = v55;
    *uint64_t v44 = sub_100051F14;
    v44[1] = (uint64_t (*)(uint64_t, uint64_t))v45;
    char v46 = sub_100008EF8((void *)(*v54 + 16), *(void *)(*v54 + 40));
    type metadata accessor for LocalCache();
    swift_retain_n();
    swift_retain();
    swift_retain();
    uint64_t v47 = v58;
    sub_10000A280();
    uint64_t v48 = (uint64_t)v59;
    URL.appendingPathComponent(_:isDirectory:)();
    os_log_type_t v49 = *(void (**)(char *, uint64_t))(v60 + 8);
    id v50 = v47;
    uint64_t v51 = v61;
    v49(v50, v61);
    sub_100008EF8((void *)(*v46 + 16), *(void *)(*v46 + 40));
    sub_1000B3744(v48, (uint64_t)sub_10009904C, v42);
    v49((char *)v48, v51);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    os_log_t v65 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v30, "Client is missing management entitlement, rejecting request to reSendCustodianInvitation", v31, 2u);
      swift_slowDealloc();
    }
    os_log_t v32 = v65;
  }
}

void sub_10008B354(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, void (*a7)(uint64_t, void), uint64_t a8)
{
  uint64_t v53 = a6;
  uint64_t v54 = a8;
  uint64_t v52 = a7;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v13 - 8);
  uint64_t v56 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianRecord();
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  BOOL v25 = (char *)v50 - v24;
  __chkstk_darwin(v23, v26);
  uint64_t v29 = (char *)v50 - v28;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100007288(v43, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      char v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (void *)swift_slowAlloc();
      *(_DWORD *)char v46 = 138412290;
      uint64_t v48 = _convertErrorToNSError(_:)();
      uint64_t v58 = (void *)v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v48;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Error fetching custodian record for resending invitation: %@", v46, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a4(a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    v50[1] = a5;
    uint64_t v51 = a4;
    uint64_t v30 = *(void *)(a1 + 16);
    if (v30)
    {
      uint64_t v31 = a1 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
      uint64_t v32 = *(void *)(v27 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_10009F2EC(v31, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        if (static UUID.== infix(_:_:)()) {
          break;
        }
        sub_10009F5B4((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        v31 += v32;
        if (!--v30)
        {
          sub_100007844(a1, 0);
          goto LABEL_7;
        }
      }
      sub_100007844(a1, 0);
      sub_10009F45C((uint64_t)v21, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_10009F45C((uint64_t)v25, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      sub_10008A190((uint64_t)v29, v52, v54);
      sub_10009F5B4((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    }
    else
    {
LABEL_7:
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_100007288(v33, (uint64_t)qword_10033E748);
      uint64_t v34 = v55;
      uint64_t v35 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v16, a3, v56);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      unint64_t v39 = (void (*)(void *))v51;
      if (v38)
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v58 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v40 = 136315138;
        sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v57 = sub_100135190(v41, v42, (uint64_t *)&v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v35);
        unint64_t v39 = (void (*)(void *))v51;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to find custodian with id: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v35);
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v57 = -7003;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_type_t v49 = v58;
      v39(v58);
    }
  }
}

uint64_t sub_10008BA18(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(void *))
{
  uint64_t v13 = (void *)(a6 + 16);
  uint64_t v14 = sub_100008EF8(a3, a3[3]);
  sub_10009957C(*v14, (uint64_t)a1, a2);
  sub_100097CBC(a4, a1 == 0, a1);
  [a5 unlock];
  swift_beginAccess();
  if (*(void *)(a6 + 16))
  {
    swift_beginAccess();
    *uint64_t v13 = 0;
    swift_unknownObjectRelease();
  }
  return a7(a1);
}

uint64_t sub_10008BB04(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v86 = a4;
  uint64_t v87 = a5;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v88 = *(void (**)(char *, uint64_t))(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  uint64_t v84 = (char *)&v78 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v78 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v78 - v20;
  uint64_t v83 = type metadata accessor for CustodianRecord();
  uint64_t v23 = __chkstk_darwin(v83, v22);
  uint64_t v85 = (uint64_t)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  uint64_t v27 = (char *)&v78 - v26;
  uint64_t v28 = sub_100009F04(&qword_10032E140);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (uint64_t *)((char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v31, &qword_10032E140);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v32 = *v31;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E748);
    uint64_t v35 = v88;
    uint64_t v34 = v89;
    (*((void (**)(char *, uint64_t, uint64_t))v88 + 2))(v11, a2, v89);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      unint64_t v39 = (void *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      v91[0] = v85;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v40 = UUID.uuidString.getter();
      id v92 = (void *)sub_100135190(v40, v41, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v35 + 1))(v11, v89);
      *(_WORD *)(v38 + 12) = 2112;
      uint64_t v42 = _convertErrorToNSError(_:)();
      id v92 = (void *)v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v39 = v42;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error removing custodian %s: %@", (uint8_t *)v38, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*((void (**)(char *, uint64_t))v35 + 1))(v11, v34);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    v86(v32);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v81 = v18;
    BOOL v82 = v27;
    sub_10009F45C((uint64_t)v31, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    uint64_t v43 = sub_100007288(v79, (uint64_t)qword_10033E748);
    os_log_type_t v45 = v88;
    uint64_t v44 = v89;
    uint64_t v80 = (void (*)(char *, uint64_t, uint64_t))*((void *)v88 + 2);
    v80(v21, a2, v89);
    char v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    BOOL v48 = os_log_type_enabled(v46, v47);
    uint64_t v78 = v43;
    if (v48)
    {
      os_log_type_t v49 = (uint8_t *)swift_slowAlloc();
      v91[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v49 = 136315138;
      uint64_t v50 = UUID.uuidString.getter();
      id v92 = (void *)sub_100135190(v50, v51, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = (void (*)(char *, uint64_t))*((void *)v88 + 1);
      v52(v21, v89);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Custodian %s successfully removed.", v49, 0xCu);
      swift_arrayDestroy();
      os_log_type_t v45 = v88;
      swift_slowDealloc();
      uint64_t v44 = v89;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v52 = (void (*)(char *, uint64_t))*((void *)v45 + 1);
      v52(v21, v44);
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v55 = (uint64_t)v82;
    if (Strong)
    {
      uint64_t v88 = v52;
      uint64_t v56 = sub_100008EF8((void *)(Strong + 144), *(void *)(Strong + 168));
      uint64_t v57 = (void (*)(char *, char *, uint64_t))v80;
      uint64_t v58 = v81;
      v80(v81, v55 + *(int *)(v83 + 20), v44);
      sub_10009F2EC(v55, v85, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v83 = *v56;
      uint64_t v59 = v84;
      v57(v84, v58, v44);
      type metadata accessor for CustodianRemovedMessage();
      uint64_t v60 = swift_allocObject();
      *(unsigned char *)(v60 + 16) = 4;
      (*((void (**)(uint64_t, char *, uint64_t))v45 + 4))(v60 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v59, v44);
      id v61 = objc_allocWithZone((Class)AAMessagingDestination);
      uint64_t v62 = v87;
      swift_retain();
      swift_bridgeObjectRetain();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v64 = [v61 initWithHandle:v63, v78];

      if (v64)
      {
        uint64_t v65 = qword_100320B70;
        id v66 = v64;
        if (v65 != -1) {
          swift_once();
        }
        sub_100007288(v79, (uint64_t)qword_10033E700);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v67, v68))
        {
          char v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "Destination is valid!", v69, 2u);
          swift_slowDealloc();
        }

        sub_100216D70(v60, v66);
        BOOL v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "informCustodianOfRemoval success", v77, 2u);
          swift_slowDealloc();
        }

        v86(0);
        swift_release();
        swift_release();

        uint64_t v55 = (uint64_t)v82;
        uint64_t v74 = v85;
      }
      else
      {
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          os_log_type_t v72 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unable to generate destination from handle.", v72, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v90 = -7004;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v73 = v92;
        uint64_t v74 = v85;
        sub_10008C7A8((uint64_t)v92, v86, v62, v85);
        swift_release();
        swift_release();
      }
      sub_10009F5B4(v74, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      v88(v81, v44);
      swift_release();
    }
    return sub_10009F5B4(v55, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
  }
}

void sub_10008C600(uint64_t a1, char a2, void *a3, uint64_t a4)
{
  if (a2)
  {
    sub_100008EF8(a3, a3[3]);
    if (a4)
    {
      swift_getErrorValue();
      uint64_t v5 = (void *)sub_1001A8478(v11, v12);
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    strcpy((char *)(inited + 32), "numOfRelation");
    *(_WORD *)(inited + 46) = -4864;
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(-1);
    uint64_t v7 = inited;
  }
  else
  {
    sub_100008EF8(a3, a3[3]);
    if (a4)
    {
      swift_getErrorValue();
      uint64_t v5 = (void *)sub_1001A8478(v9, v10);
    }
    else
    {
      uint64_t v5 = 0;
    }
    sub_100009F04(&qword_100324668);
    uint64_t v6 = swift_initStackObject();
    *(_OWORD *)(v6 + 16) = xmmword_1002A9C00;
    strcpy((char *)(v6 + 32), "numOfRelation");
    *(_WORD *)(v6 + 46) = -4864;
    *(NSNumber *)(v6 + 48) = Int._bridgeToObjectiveC()();
    uint64_t v7 = v6;
  }
  sub_10022175C(v7);
  if ((AAUnderTest.getter() & 1) == 0) {
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)();
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_10008C7A8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    sub_10009F2EC(a4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = a2;
      uint64_t v16 = v15;
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v27 = a3;
      uint64_t v30 = v18;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v19 = UUID.uuidString.getter();
      uint64_t v29 = sub_100135190(v19, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10009F5B4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v21 = _convertErrorToNSError(_:)();
      uint64_t v29 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error sending removal message to custodian %s: %@", (uint8_t *)v16, 0x16u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v28;
      swift_slowDealloc();
    }
    else
    {
      sub_10009F5B4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "informCustodianOfRemoval success", v25, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_10008CB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  *(unsigned char *)(a2 + qword_10032E718) = 4;
  if (a1) {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  sub_100253FD0(a1 == 0, v6);

  return a4(a1);
}

uint64_t sub_10008CC30(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, uint64_t, void *))
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v13);
  swift_retain();
  a5(v12, a1, v13);
  _Block_release(v13);
  _Block_release(v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_10008CD5C()
{
  v1[7] = v0;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_1003245B0);
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_10008CE20, 0, 0);
}

uint64_t sub_10008CE20()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[7] + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianFetcher, v3);
  Dependency.wrappedValue.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100008EF8(v0 + 2, v0[5]);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10008CF1C;
  return sub_1001EB258();
}

uint64_t sub_10008CF1C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008D0B8;
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v5 = sub_10008D044;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008D044()
{
  sub_100008EA8(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 104);
  return v1(v2);
}

uint64_t sub_10008D0B8()
{
  sub_100008EA8(v0 + 16);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008D294(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  void *v3 = v2;
  v3[1] = sub_10008D33C;
  return sub_10008CD5C();
}

uint64_t sub_10008D33C()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v2)
  {
    uint64_t v5 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v7 = (void *)v5;
  }
  else
  {
    sub_10000850C(0, (unint64_t *)&qword_100324640);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    uint64_t v7 = isa;
  }
  uint64_t v8 = *(void (***)(void, void, void))(v3 + 24);
  ((void (**)(void, Class, uint64_t))v8)[2](v8, isa, v5);

  _Block_release(v8);
  uint64_t v9 = *(uint64_t (**)(void))(v4 + 8);
  return v9();
}

uint64_t sub_10008D4E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a3(0, a2);
  }
  unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    v22[1] = a4;
    uint64_t v23 = a3;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v16 = *(void *)(v10 + 72);
    v22[0] = a1;
    swift_bridgeObjectRetain();
    do
    {
      sub_10009F2EC(v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      id v17 = objc_allocWithZone((Class)AACustodianshipInfo);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      uint64_t v19 = *(void *)&v12[*(int *)(v8 + 28)];
      NSString v20 = String._bridgeToObjectiveC()();
      [v17 initWithID:isa status:v19 ownerHandle:v20];

      sub_10009F5B4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v15 += v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    a3 = v23;
  }
  uint64_t v21 = swift_bridgeObjectRetain();
  a3(v21, 0);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10008D730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E748);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v22 = v3;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v24 = a1;
    uint64_t v27 = v17;
    uint64_t v23 = a3;
    *(_DWORD *)uint64_t v16 = 136315138;
    sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v26 = sub_100135190(v18, v19, &v27);
    a3 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Fetching custodianship information with the following: %s", v16, 0xCu);
    swift_arrayDestroy();
    a1 = v24;
    swift_slowDealloc();
    uint64_t v4 = v22;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  sub_100008EF8((void *)(v4 + 184), *(void *)(v4 + 208));
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v25;
  *(void *)(v20 + 24) = a3;
  swift_retain();
  sub_10023C384(a1, (uint64_t)sub_100098F70, v20);
  return swift_release();
}

uint64_t sub_10008DA44(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v44 - v15;
  uint64_t v17 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (void *)((char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v20, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v27 = _convertErrorToNSError(_:)();
      uint64_t v50 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v26 = v27;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to fetch custodianship info: %@", v25, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(0, v21);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    char v46 = a2;
    sub_10009F45C((uint64_t)v20, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10009F2EC((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    id v28 = objc_allocWithZone((Class)AACustodianshipInfo);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v30 = *(void *)&v13[*(int *)(v9 + 28)];
    NSString v31 = String._bridgeToObjectiveC()();
    id v32 = [v28 initWithID:isa status:v30 ownerHandle:v31];

    sub_10009F5B4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E748);
    id v34 = v32;
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v50 = v45;
      *(_DWORD *)os_log_type_t v37 = 136315138;
      v44[1] = v37 + 4;
      id v38 = [v34 custodianID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v41 = v40;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v5);
      uint64_t v49 = sub_100135190(v39, v41, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Found custodianship info: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v43 = v34;
    v46(v34, 0);

    return sub_10009F5B4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_10008E090(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(a1, 0);
  }
  swift_errorRetain();
  a3((uint64_t)_swiftEmptyArrayStorage, a1);
  return sub_100007844(a1, 1);
}

uint64_t sub_10008E208(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(a1, 0);
  }
  swift_errorRetain();
  a3(0, a1);
  return sub_100007844(a1, 1);
}

uint64_t sub_10008E344(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v24 - v13;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E748);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching health status for all custodians & custodianships.", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = sub_100008EF8((void *)(v3 + 184), *(void *)(v3 + 208));
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  uint64_t v21 = sub_100008EF8((void *)(*v19 + 16), *(void *)(*v19 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v22 = *(void (**)(char *, uint64_t))(v7 + 8);
  v22(v11, v6);
  sub_100008EF8((void *)(*v21 + 16), *(void *)(*v21 + 40));
  sub_1000B37BC((uint64_t)v14, (uint64_t)sub_100098F64, v20);
  v22(v14, v6);
  return swift_release();
}

uint64_t sub_10008E5C8(uint64_t a1, char a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianHealthRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    a3(_swiftEmptyArrayStorage, a1);
    return sub_100007844(a1, 1);
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = _swiftEmptyArrayStorage;
    if (v17)
    {
      v27[1] = a4;
      id v28 = a3;
      uint64_t v29 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v19 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v20 = *(void *)(v13 + 72);
      do
      {
        sub_10009F2EC(v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        uint64_t v21 = &v16[*(int *)(v12 + 24)];
        uint64_t v22 = type metadata accessor for Date();
        uint64_t v23 = *(void *)(v22 - 8);
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v11, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v11, 0, 1, v22);
        v24.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v22) != 1)
        {
          Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v22);
        }
        [objc_allocWithZone((Class)AATrustedContactHealthInfo) initWithID:v24.super.isa lastValidCheckTimeStamp:isa];

        sub_10009F5B4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += v20;
        --v17;
      }
      while (v17);
      a3 = v28;
      uint64_t v18 = v29;
    }
    a3(v18, 0);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10008E924(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting recovery with IdMS with context: %@", v12, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    a3 = v23;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v15 = [objc_allocWithZone((Class)AKCustodianContext) init];
  id v16 = [v9 ownerAppleID];
  [v15 setOwnerAppleID:v16];

  id v17 = [v9 recoverySessionID];
  [v15 setRecoverySessionID:v17];

  [v15 set_cliMode:[v9 CLIMode]];
  sub_100008EF8((void *)(v4 + 104), *(void *)(v4 + 128));
  uint64_t v18 = swift_allocObject();
  swift_weakInit();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v18;
  uint64_t v19[3] = a2;
  v19[4] = a3;
  v19[5] = v15;
  v19[6] = v9;
  id v20 = v9;
  swift_retain();
  swift_retain();
  id v21 = v15;
  sub_1001E85F0((void (*)(void, void, void))sub_100098E94, (uint64_t)v19);

  swift_release();
  return swift_release();
}

void sub_10008EC34(uint64_t a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(void, void), uint64_t a6, void *a7, void *a8)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (a3)
    {
      uint64_t v30 = a8;
      swift_errorRetain();
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100007288(v20, (uint64_t)qword_10033E748);
      swift_errorRetain();
      id v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v28 = a5;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = a6;
        NSUUID v24 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        uint64_t v32 = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *NSUUID v24 = v32;
        sub_100098F04(a1, a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to obtain Push Token with error: %@, continuing without AA Push Token", v23, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        a6 = v29;
        swift_slowDealloc();
        a5 = v28;
        swift_slowDealloc();

        sub_100098F04(a1, a2, 1);
      }
      else
      {
        sub_100098F04(a1, a2, 1);
        sub_100098F04(a1, a2, 1);
      }
      a8 = v30;
    }
    else
    {
      sub_100013140(a1, a2);
      sub_100254A64(a1, a2);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [a7 setPushToken:v15];

      sub_100098F04(a1, a2, 0);
    }
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = a5;
    v26[3] = a6;
    v26[4] = v25;
    v26[5] = a8;
    swift_retain();
    swift_retain();
    id v27 = a8;
    sub_10008F438((uint64_t)a7, (uint64_t)sub_100098F58, (uint64_t)v26);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E748);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "startCustodianRecovery: Custodian Daemon Service is no longer retained, nothing to do here", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    a5(0, 0);
  }
}

uint64_t sub_10008F0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, void *a7)
{
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v14 = Strong;
      uint64_t v32 = a1;
      uint64_t v33 = a2;
      id v15 = [a7 altDSID];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0;
      }
      swift_beginAccess();
      uint64_t v20 = *(void *)(v14 + 328);
      uint64_t v21 = *(void *)(v14 + 336);
      sub_1000084BC(v14 + 304, v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 40))(v17, v19, v20, v21);
      swift_endAccess();
      swift_release();
      a1 = v32;
      a2 = v33;
    }
    swift_beginAccess();
    uint64_t v22 = swift_weakLoadStrong();
    if (v22)
    {
      uint64_t v23 = v22;
      id v24 = [a7 telemetryFlowID];
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v28 = 0;
      }
      swift_beginAccess();
      uint64_t v29 = *(void *)(v23 + 328);
      uint64_t v30 = *(void *)(v23 + 336);
      sub_1000084BC(v23 + 304, v29);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 64))(v26, v28, v29, v30);
      swift_endAccess();
      swift_release();
    }
    uint64_t v8 = a1;
    uint64_t v9 = a2;
    a3 = 0;
  }
  return a4(v8, v9, a3);
}

void sub_10008F3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v6 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

uint64_t sub_10008F438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E748);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Calling out to IdMS to initiate a custodian recovery", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = (void **)sub_100008EF8(v4 + 8, v4[11]);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a2;
  v14[3] = a3;
  v14[4] = v8;
  id v15 = *v13;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_100098E2C;
  *(void *)(v16 + 24) = v14;
  v19[4] = sub_100098E3C;
  v19[5] = v16;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_10004E0C0;
  uint64_t v19[3] = &unk_1002F82C0;
  uint64_t v17 = _Block_copy(v19);
  swift_retain();
  swift_retain();
  swift_release();
  [v15 startCustodianRecoveryRequestWithContext:a1 completion:v17];
  _Block_release(v17);
  return swift_release();
}

void sub_10008F664(uint64_t a1, char a2, void (*a3)(unint64_t, unint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      v24[0] = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v24[0];
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to initiate recovery with IdMS with error: %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, 0, a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v4 = sub_100135A98((uint64_t)v24), (v5 & 1) != 0))
    {
      sub_100047DD4(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v25);
    }
    else
    {
      long long v25 = 0u;
      long long v26 = 0u;
    }
    sub_100098CF0((uint64_t)v24);
    if (*((void *)&v26 + 1))
    {
      if (swift_dynamicCast())
      {
        sub_100007844(a1, 0);
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_100007288(v11, (uint64_t)qword_10033E748);
        swift_bridgeObjectRetain_n();
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = (uint8_t *)swift_slowAlloc();
          v24[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)&long long v25 = sub_100135190(0xD000000000000011, 0x800000010029B810, v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "IdMS came back with a recovery session ID: %s", v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a3(0xD000000000000011, 0x800000010029B810, 0);
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      sub_100006574((uint64_t)&v25, &qword_100328490);
    }
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v19 = Dictionary.description.getter();
      unint64_t v21 = v20;
      sub_100007844(a1, 0);
      *(void *)&long long v25 = sub_100135190(v19, v21, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 0);
      sub_100007844(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "IdMS came back with a result, but transaction ID was not found there: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 0);
      sub_100007844(a1, 0);
    }

    type metadata accessor for AACustodianError(0);
    *(void *)&long long v25 = -7009;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v22 = (void *)v24[0];
    a3(0, 0, v24[0]);
  }
}

uint64_t sub_10008FCFC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    v11[4] = sub_100135190(a1, a2, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Canceling recovery session with id: %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  sub_100008EF8((void *)(v3 + 304), *(void *)(v3 + 328));
  return sub_10018C4A0(a1, a2);
}

uint64_t sub_10008FF98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Calling out to IdMS to fetch Custodian recovery configuration", v9, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v3 + 64), *(void *)(v3 + 88));
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  sub_10004E16C(0, 0, 0, 0, (uint64_t)sub_100098DE8, v10);

  return swift_release();
}

void sub_1000900F8(uint64_t a1, char a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E748);
    swift_errorRetain();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      unint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412290;
      id v31 = (id)_convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v20 = v31;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch Custodian recovery configuration with error: %@", v19, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a3(0, a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    id v5 = objc_allocWithZone((Class)AACustodianRecoveryConfiguration);
    swift_bridgeObjectRetain();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    id v7 = [v5 initWithConfigurationDictionary:isa];

    if ((uint64_t)[v7 codeLength] <= 0)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007288(v21, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = (uint8_t *)swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)id v24 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v25 = Dictionary.description.getter();
        unint64_t v27 = v26;
        sub_100007844(a1, 0);
        sub_100135190(v25, v27, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100007844(a1, 0);
        sub_100007844(a1, 0);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "IdMS came back with a result, but codeLength was missing or 0: %s", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100007844(a1, 0);
        sub_100007844(a1, 0);
      }

      type metadata accessor for AACustodianError(0);
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v29 = v31;
      a3(0, (uint64_t)v31);
    }
    else
    {
      sub_100007844(a1, 0);
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100007288(v8, (uint64_t)qword_10033E748);
      id v9 = v7;
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      uint64_t v12 = a3;
      if (os_log_type_enabled(v10, v11))
      {
        os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v14 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v13 = 138412290;
        id v31 = v9;
        id v15 = v9;
        uint64_t v12 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v14 = v9;

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "IdMS came back with configuration: %@", v13, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v28 = v9;
      v12(v9, 0);
    }
  }
}

uint64_t sub_10009076C(int a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  swift_retain();
  a6(a5, v9);
  swift_release();

  return swift_release();
}

uint64_t sub_100090804(uint64_t a1)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = v1;
  return _swift_task_switch(sub_100090824, 0, 0);
}

uint64_t sub_100090824()
{
  if (sub_1000888AC())
  {
    uint64_t v1 = v0[15];
    swift_beginAccess();
    sub_100008EF8((void *)(v1 + 304), *(void *)(v1 + 328));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[16] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100090A74;
    uint64_t v3 = v0[14];
    return sub_100189098(v3);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client is missing management entitlement, rejecting request to generateCustodianRecoveryCode", v8, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianRecoveryError(0);
    v0[10] = -9030;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&unk_1003245A0, type metadata accessor for AACustodianRecoveryError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100090A74(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v4[17] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100090D74;
  }
  else {
    uint64_t v5 = sub_100090B90;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100090B90()
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E748);
  id v3 = v1;
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[14];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v0[13] = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully generated code for context: %@", v8, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v4 = v0[14];
  }
  uint64_t v10 = v0[3];
  uint64_t v11 = v0[4];

  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v12(v10, v11);
}

uint64_t sub_100090D74()
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100007288(v2, (uint64_t)qword_10033E748);
  id v3 = v1;
  swift_errorRetain();
  id v4 = v3;
  swift_errorRetain();
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[14];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412546;
    v0[11] = v8;
    id v11 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v10 = v8;

    *(_WORD *)(v9 + 12) = 2112;
    uint64_t v12 = _convertErrorToNSError(_:)();
    v0[12] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v10[1] = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to generate code for context: %@ with error: %@", (uint8_t *)v9, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  os_log_type_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100091144(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain();
  BOOL v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *BOOL v7 = v3;
  v7[1] = sub_100091220;
  v7[14] = v6;
  v7[15] = a3;
  return _swift_task_switch(sub_100090824, 0, 0);
}

uint64_t sub_100091220()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  id v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_release();
  if (v2)
  {
    uint64_t v6 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    NSString v7 = 0;
    uint64_t v8 = (void *)v6;
  }
  else
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    uint64_t v8 = v7;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 32);
  ((void (**)(void, NSString, uint64_t))v9)[2](v9, v7, v6);

  _Block_release(v9);
  uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

void sub_1000913D0(void *a1, char a2, void (*a3)(void *, void *))
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      uint64_t v23 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v23;
      sub_10007B670(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Code validation completed with error: %@", v8, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007B670(a1, 1);
    }

    swift_errorRetain();
    os_log_type_t v18 = 0;
    uint64_t v19 = a1;
  }
  else
  {
    uint64_t v10 = qword_100320B88;
    id v11 = a1;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    id v13 = v11;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      id v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = a1;
      sub_10007B670(a1, 0);
      sub_10007B670(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Code validation completed with context: %@", v16, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007B670(a1, 0);
      sub_10007B670(a1, 0);
    }

    id v20 = v13;
    os_log_type_t v18 = a1;
    uint64_t v19 = 0;
  }
  a3(v18, v19);
  sub_10007B670(a1, a2 & 1);
  sub_10007B670(a1, a2 & 1);
}

uint64_t sub_10009177C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v16 = a3;
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetching existing custodian recovery token for sessionID: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v16;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100008EF8((void *)(v5 + 184), *(void *)(v5 + 208));
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10023EAA8(a1, a2, (uint64_t)sub_100098DDC, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1000919B0(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CustodianRecoverySessionRecord();
  __chkstk_darwin(v10, v11);
  id v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v17, &qword_100322C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      unint64_t v41 = a4;
      id v43 = (void *)v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_100135190(a2, a3, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No record found for the requested SessionID: %s", v22, 0xCu);
      swift_arrayDestroy();
      a4 = v41;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_errorRetain();
    a4(0, v18);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10009F45C((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v40 = a5;
    unint64_t v41 = a4;
    if (v27)
    {
      uint64_t v39 = a2;
      id v28 = (uint8_t *)swift_slowAlloc();
      id v43 = (void *)swift_slowAlloc();
      *(_DWORD *)id v28 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_100135190(v39, a3, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Found record matching sessionID: %s, getting token", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (*(void *)&v13[*(int *)(v10 + 44) + 8])
    {
      id v30 = objc_allocWithZone((Class)AACustodianPasswordResetInformation);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v33 = [v30 initWithRecoveryToken:v31 ownerAppleID:v32];

      id v34 = v33;
      v41(v33, 0);
    }
    else
    {
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Record did not contain CRT, failing...", v37, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v42 = -7003;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v34 = v43;
      v41(0, v43);
    }

    return sub_10009F5B4((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_100092004(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v17 = a3;
    id v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)id v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_100135190(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Fetching existing custodian recovery keys for sessionID: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v17;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_100008EF8((void *)(v5 + 184), *(void *)(v5 + 208));
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  void v15[6] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10023EAA8(a1, a2, (uint64_t)sub_100098D8C, (uint64_t)v15);
  swift_release();
  return swift_release();
}

uint64_t sub_100092270(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a6;
  uint64_t v49 = a2;
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v10 - 8, v11);
  id v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecoverySessionRecord();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100009F04(&qword_100322C00);
  __chkstk_darwin(v18, v19);
  os_log_type_t v21 = (uint64_t *)((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, &qword_100322C00);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v26 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_100135190(v49, a3, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No record found for the requested SessionID: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_errorRetain();
    a4(0, v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10009F45C((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = sub_100007288(v27, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain_n();
    uint64_t v47 = v28;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      char v46 = a4;
      NSString v32 = (uint8_t *)v31;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v45 = a5;
      v50[0] = v33;
      *(_DWORD *)NSString v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v51 = sub_100135190(v49, a3, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found record matching sessionID: %s, getting keys", v32, 0xCu);
      swift_arrayDestroy();
      a5 = v45;
      swift_slowDealloc();
      a4 = v46;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (*(void *)&v17[*(int *)(v14 + 36) + 8] >> 60 == 15)
    {
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Record did not contain RKC, seems to be a non CDP account ?...", v37, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v51 = -7003;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v38 = (void *)v50[0];
      a4(0, v50[0]);
    }
    else
    {
      sub_100019730((uint64_t)&v17[*(int *)(v14 + 48)], (uint64_t)v13, (uint64_t *)&unk_100321CE0);
      uint64_t v39 = type metadata accessor for UUID();
      int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v13, 1, v39);
      sub_100006574((uint64_t)v13, (uint64_t *)&unk_100321CE0);
      if (v40 == 1)
      {
        unint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          id v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "decoupleCRK: CustodianRecoverySessionRecord does not contain otCustodianID, either using first created CRK or custodian device running pre DawnburstE", v43, 2u);
          swift_slowDealloc();
        }
      }
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        sub_100092AE8(v49, a3, (uint64_t)v17, (uint64_t)a4, a5);
        swift_release();
      }
    }
    return sub_10009F5B4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_1000929B4(int a1, int a2, int a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  swift_retain();
  a7(v10, v12, a6, v13);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void sub_100092A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_100092AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = v5;
  uint64_t v27 = a5;
  uint64_t v28 = a4;
  uint64_t v29 = *v5;
  uint64_t v8 = type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  id v12 = [objc_allocWithZone((Class)AKCustodianContext) init];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v12 setCustodianUUID:isa];

  NSString v14 = String._bridgeToObjectiveC()();
  [v12 setRecoverySessionID:v14];

  if (*(void *)(a3 + *(int *)(v8 + 44) + 8)) {
    NSString v15 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v15 = 0;
  }
  uint64_t v16 = v27;
  [v12 setCustodianRecoveryToken:v15];

  if ([v12 respondsToSelector:Selector.init(_:)()])
  {
    if (*(void *)(a3 + *(int *)(v8 + 52) + 8)) {
      NSString v17 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v17 = 0;
    }
    [v12 setRecordBuildVersion:v17];
  }
  uint64_t v18 = (void **)sub_100008EF8(v6 + 8, v6[11]);
  sub_10009F2EC(a3, (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  unint64_t v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  sub_10009F45C((uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v19, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
  uint64_t v22 = (void *)(v21 + v20);
  *uint64_t v22 = v28;
  v22[1] = v16;
  *(void *)(v21 + ((v20 + 23) & 0xFFFFFFFFFFFFFFF8)) = v29;
  uint64_t v23 = *v18;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = sub_100098C2C;
  *(void *)(v24 + 24) = v21;
  aBlock[4] = sub_100098CE8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004E0C0;
  aBlock[3] = &unk_1002F81D0;
  os_log_type_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v23 fetchCustodianDataRecoveryKeyWithContext:v12 completion:v25];
  _Block_release(v25);
  swift_release();
}

void sub_100092E70(uint64_t a1, char a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  NSString v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)();
      v56[0] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v22;
      sub_100007844(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to fetch custodian recovery wrapping key with error: %@", v20, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 1);
    }

    swift_errorRetain();
    a4(0, a1);
    sub_100007844(a1, 1);
    sub_100007844(a1, 1);
  }
  else
  {
    strcpy(v55, "wrappingKeyRKC");
    v55[15] = -18;
    sub_100007850(a1, 0);
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v15 = sub_100135A98((uint64_t)v56), (v16 & 1) != 0))
    {
      sub_100047DD4(*(void *)(a1 + 56) + 32 * v15, (uint64_t)&v57);
    }
    else
    {
      long long v57 = 0u;
      long long v58 = 0u;
    }
    sub_100098CF0((uint64_t)v56);
    if (*((void *)&v58 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v52 = Data.init(base64Encoded:options:)();
        unint64_t v24 = v23;
        swift_bridgeObjectRelease();
        if (v24 >> 60 != 15)
        {
          unint64_t v25 = v24;
          uint64_t v53 = a5;
          uint64_t v54 = a4;
          uint64_t v26 = type metadata accessor for CustodianRecoverySessionRecord();
          uint64_t v27 = a3 + *(int *)(v26 + 36);
          unint64_t v28 = *(void *)(v27 + 8);
          if (v28 >> 60 != 15)
          {
            uint64_t v37 = v26;
            uint64_t v38 = *(void *)v27;
            sub_1000196B4(*(void *)v27, *(void *)(v27 + 8));
            sub_100007844(a1, 0);
            sub_1000196B4(v38, v28);
            sub_1000196B4(v52, v24);
            sub_1002689B8((uint64_t)v14);
            uint64_t v39 = (void *)(a3 + *(int *)(v37 + 52));
            uint64_t v40 = v39[1];
            v49[1] = *v39;
            swift_bridgeObjectRetain();
            uint64_t v51 = v38;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            v41.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            v42.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
            if (v40)
            {
              NSString v43 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
            }
            else
            {
              NSString v43 = 0;
            }
            id v44 = objc_allocWithZone((Class)AACustodianDataRecoveryKeys);
            Class v45 = isa;
            id v46 = [v44 initWithWrappedRKC:isa wrappingKey:v41.super.isa custodianUUID:v42.super.isa recordBuildVersion:v43];

            (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
            uint64_t v47 = v52;
            sub_1000196A0(v52, v25);
            uint64_t v48 = v51;
            sub_1000196A0(v51, v28);
            v54(v46, 0);

            sub_1000196A0(v48, v28);
            sub_1000196A0(v47, v25);
            return;
          }
          sub_1000196A0(v52, v24);
          a5 = v53;
          a4 = v54;
        }
      }
    }
    else
    {
      sub_100006574((uint64_t)&v57, &qword_100328490);
    }
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E748);
    swift_bridgeObjectRetain();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      NSString v32 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)NSString v32 = 136315138;
      uint64_t v54 = a4;
      swift_bridgeObjectRetain();
      uint64_t v53 = a5;
      uint64_t v33 = Dictionary.description.getter();
      unint64_t v35 = v34;
      sub_100007844(a1, 0);
      *(void *)&long long v57 = sub_100135190(v33, v35, v56);
      a4 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100007844(a1, 0);
      sub_100007844(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Could not parse wrapping key from result dictionary: %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100007844(a1, 0);
      sub_100007844(a1, 0);
    }

    type metadata accessor for AACustodianError(0);
    *(void *)&long long v57 = -7009;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v36 = (void *)v56[0];
    a4(0, v56[0]);
  }
}

uint64_t sub_1000935D0(uint64_t a1, int a2, void *a3, void *aBlock, void (*a5)(id, uint64_t, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  swift_retain();
  a5(v9, a1, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_release();
}

uint64_t sub_10009365C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8((void *)(v3 + 184), *(void *)(v3 + 208));
  id v12 = [a1 custodianID];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  NSString v14 = (void *)swift_allocObject();
  void v14[2] = a1;
  v14[3] = v13;
  v14[4] = a2;
  v14[5] = a3;
  id v15 = a1;
  swift_retain();
  swift_retain();
  sub_10023C384((uint64_t)v11, (uint64_t)sub_10009864C, (uint64_t)v14);
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release();
}

uint64_t sub_1000937FC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v183 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v181 = *(void *)(v9 - 8);
  uint64_t v182 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v179 = (char *)&v160 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v177 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v177 + 64);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v171 = (uint64_t)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v176 = (uint64_t *)((char *)&v160 - v18);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v180 = (char *)&v160 - v21;
  uint64_t v23 = __chkstk_darwin(v20, v22);
  v173 = (char *)&v160 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v170 = (uint64_t)&v160 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  v175 = (char *)&v160 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  uint64_t v174 = (uint64_t)&v160 - v33;
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v172 = (uint64_t *)((char *)&v160 - v36);
  __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v160 - v38;
  uint64_t v40 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v40, v41);
  NSString v43 = (uint64_t *)((char *)&v160 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v43, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v44 = *v43;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E748);
    swift_errorRetain();
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = a4;
      uint64_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 138412290;
      uint64_t v51 = _convertErrorToNSError(_:)();
      v186[0] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v50 = v51;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to fetch custodianship info: %@", v48, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a4 = v49;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a4(v44);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10009F45C((uint64_t)v43, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v178 = a3 + 16;
    uint64_t v52 = type metadata accessor for Logger();
    uint64_t v53 = sub_100007288(v52, (uint64_t)qword_10033E748);
    uint64_t v54 = a2;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v169 = (int *)v12;
    uint64_t v167 = a4;
    uint64_t v168 = v53;
    uint64_t v165 = v52;
    if (v57)
    {
      long long v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v166 = v39;
      uint64_t v164 = v59;
      v186[0] = v59;
      *(_DWORD *)long long v58 = 136315138;
      uint64_t v163 = v58 + 4;
      id v60 = [v54 custodianID];
      id v61 = v179;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v62 = v54;
      uint64_t v63 = v182;
      uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v66 = v65;
      uint64_t v67 = v63;
      uint64_t v54 = v62;
      (*(void (**)(char *, uint64_t))(v181 + 8))(v61, v67);
      v186[5] = sub_100135190(v64, v66, v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Found custodianship info: %s", v58, 0xCu);
      swift_arrayDestroy();
      uint64_t v39 = v166;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v69 = (uint64_t)v180;
    unsigned int v70 = [v54 isAccepted];
    os_log_type_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.info.getter();
    BOOL v73 = os_log_type_enabled(v71, v72);
    if (v70)
    {
      if (v73)
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Accepting invitation.", v74, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v173 = v54;
        uint64_t v180 = (char *)Strong;
        os_log_type_t v76 = sub_100008EF8((void *)(Strong + 224), *(void *)(Strong + 248));
        uint64_t v77 = *v76;
        uint64_t v176 = sub_100008EF8((void *)(*v76 + 56), *(void *)(*v76 + 80));
        uint64_t v78 = v174;
        sub_10009F2EC((uint64_t)v39, v174, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v79 = v182;
        uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 16);
        uint64_t v81 = (uint64_t)v175;
        v80(v175, v78, v182);
        BOOL v82 = v39;
        uint64_t v83 = v169;
        v80((char *)(v81 + v169[5]), v78 + v169[5], v79);
        uint64_t v84 = v83[8];
        uint64_t v85 = *(void *)(v78 + v84);
        unint64_t v86 = *(void *)(v78 + v84 + 8);
        uint64_t v87 = (uint64_t *)(v81 + v84);
        *uint64_t v87 = v85;
        v87[1] = v86;
        uint64_t v88 = v83[6];
        uint64_t v89 = *(void *)(v78 + v88);
        uint64_t v90 = *(void *)(v78 + v88 + 8);
        uint64_t v91 = (void *)(v81 + v88);
        *uint64_t v91 = v89;
        v91[1] = v90;
        *(void *)(v81 + v83[7]) = 2;
        LOBYTE(v80) = *(unsigned char *)(v78 + v83[9]);
        sub_100013140(v85, v86);
        swift_bridgeObjectRetain();
        sub_10009F5B4(v78, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        *(unsigned char *)(v81 + v83[9]) = (_BYTE)v80;
        id v92 = v172;
        sub_10009F45C(v81, (uint64_t)v172, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v93 = v82;
        uint64_t v94 = (uint64_t)v82;
        uint64_t v95 = v170;
        sub_10009F2EC(v94, v170, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        unint64_t v96 = (*(unsigned __int8 *)(v177 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80);
        os_log_type_t v97 = (void *)swift_allocObject();
        v97[4] = 0;
        v97[5] = 0;
        v97[2] = v77;
        v97[3] = sub_100095240;
        sub_10009F45C(v95, (uint64_t)v97 + v96, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        BOOL v98 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v97
                                                                       + ((v13 + v96 + 7) & 0xFFFFFFFFFFFFFFF8));
        *BOOL v98 = sub_1000950DC;
        v98[1] = 0;
        uint64_t v99 = qword_100320CC8;
        swift_retain();
        if (v99 != -1) {
          swift_once();
        }
        if (*((unsigned char *)v92 + v83[9]) == 1)
        {
          uint64_t v39 = v93;
          if (qword_100320CD8 != -1) {
            swift_once();
          }
          uint64_t v100 = &qword_10033EA08;
        }
        else
        {
          uint64_t v39 = v93;
          if (qword_100320CD0 != -1) {
            swift_once();
          }
          uint64_t v100 = &qword_10033E9F8;
        }
        uint64_t v54 = v173;
        uint64_t v131 = *v100;
        unint64_t v130 = v100[1];
        swift_bridgeObjectRetain();
        id v132 = sub_10028CC20(v131, v130);
        id v133 = [v132 privateCloudDatabase];
        swift_bridgeObjectRelease();

        sub_100067008((uint64_t)v92, v133, (uint64_t)sub_100098804, (uint64_t)v97);
        swift_release();

        sub_10009F5B4((uint64_t)v92, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        swift_release();
      }
    }
    else
    {
      if (v73)
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v101 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Declining invitation.", v101, 2u);
        swift_slowDealloc();
      }

      uint64_t v102 = (uint64_t)v173;
      sub_10009F2EC((uint64_t)v39, (uint64_t)v173, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      sub_10009F2EC(v102, v69, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      uint64_t v103 = *(unsigned __int8 *)(v177 + 80);
      uint64_t v177 = v103 | 7;
      uint64_t v104 = swift_allocObject();
      sub_10009F45C(v102, v104 + ((v103 + 16) & ~v103), (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      swift_beginAccess();
      uint64_t v105 = swift_weakLoadStrong();
      if (v105)
      {
        v173 = v54;
        uint64_t v170 = ~v103;
        sub_100008A94(v105 + 224, (uint64_t)v186);
        swift_release();
        uint64_t v164 = *sub_100008EF8(v186, v186[3]);
        uint64_t v172 = sub_100008EF8((void *)(v164 + 56), *(void *)(v164 + 80));
        uint64_t v162 = type metadata accessor for CustodianshipInfoRecord;
        uint64_t v106 = v174;
        sub_10009F2EC((uint64_t)v39, v174, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v107 = v169;
        uint64_t v108 = (uint64_t *)(v69 + v169[6]);
        uint64_t v109 = v108[1];
        uint64_t v161 = *v108;
        uint64_t v166 = v39;
        uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v181 + 16);
        uint64_t v111 = (uint64_t)v175;
        uint64_t v163 = (uint8_t *)v104;
        uint64_t v112 = v182;
        v110(v175, v106, v182);
        v110((char *)(v111 + v107[5]), v106 + v107[5], v112);
        uint64_t v113 = v107[8];
        uint64_t v114 = *(void *)(v106 + v113);
        unint64_t v115 = *(void *)(v106 + v113 + 8);
        uint64_t v116 = (uint64_t *)(v111 + v113);
        *uint64_t v116 = v114;
        v116[1] = v115;
        uint64_t v117 = (void *)(v111 + v107[6]);
        void *v117 = v161;
        v117[1] = v109;
        *(void *)(v111 + v107[7]) = 4;
        LOBYTE(v112) = *(unsigned char *)(v106 + v107[9]);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v118 = v114;
        uint64_t v39 = v166;
        sub_100013140(v118, v115);
        id v119 = v162;
        sub_10009F5B4(v106, (uint64_t (*)(void))v162);
        *(unsigned char *)(v111 + v107[9]) = v112;
        uint64_t v120 = v176;
        sub_10009F45C(v111, (uint64_t)v176, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v121 = v171;
        sub_10009F2EC((uint64_t)v39, v171, (uint64_t (*)(void))v119);
        uint64_t v122 = (v103 + 48) & v170;
        uint64_t v123 = (void *)swift_allocObject();
        uint64_t v124 = v164;
        v123[4] = 0;
        v123[5] = 0;
        v123[2] = v124;
        v123[3] = sub_100094DE0;
        sub_10009F45C(v121, (uint64_t)v123 + v122, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        uint64_t v125 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v123
                                                                        + ((v13 + v122 + 7) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v126 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v163;
        *uint64_t v125 = sub_100098780;
        v125[1] = v126;
        uint64_t v127 = qword_100320CC8;
        swift_retain();
        swift_retain();
        if (v127 != -1) {
          swift_once();
        }
        if (*((unsigned char *)v120 + v107[9]) == 1)
        {
          uint64_t v54 = v173;
          uint64_t v128 = (uint64_t)v180;
          if (qword_100320CD8 != -1) {
            swift_once();
          }
          uint64_t v129 = &qword_10033EA08;
        }
        else
        {
          uint64_t v54 = v173;
          uint64_t v128 = (uint64_t)v180;
          if (qword_100320CD0 != -1) {
            swift_once();
          }
          uint64_t v129 = &qword_10033E9F8;
        }
        uint64_t v135 = *v129;
        unint64_t v134 = v129[1];
        swift_bridgeObjectRetain();
        id v136 = sub_10028CC20(v135, v134);
        id v137 = [v136 privateCloudDatabase];
        swift_bridgeObjectRelease();

        uint64_t v138 = v176;
        sub_100067008((uint64_t)v176, v137, (uint64_t)sub_100098804, (uint64_t)v123);
        swift_release();

        sub_10009F5B4((uint64_t)v138, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        swift_release();
        sub_10009F5B4(v128, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
        swift_release();
        sub_100008EA8((uint64_t)v186);
      }
      else
      {
        swift_release();
        sub_10009F5B4(v69, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
      }
    }
    swift_beginAccess();
    uint64_t v139 = swift_weakLoadStrong();
    if (v139)
    {
      sub_100008EF8((void *)(v139 + 144), *(void *)(v139 + 168));
      swift_bridgeObjectRetain();
      unint64_t v140 = v54;
      uint64_t v141 = v183;
      swift_retain();
      id v142 = [v140 custodianID];
      unint64_t v143 = v179;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v140) = [v140 isAccepted];
      type metadata accessor for CustodianInvitationResponseMessage();
      uint64_t v144 = swift_allocObject();
      *(unsigned char *)(v144 + 16) = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v181 + 32))(v144 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v143, v182);
      *(unsigned char *)(v144 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = (_BYTE)v140;
      id v145 = objc_allocWithZone((Class)AAMessagingDestination);
      swift_bridgeObjectRetain();
      NSString v146 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v147 = [v145 initWithHandle:v146];

      if (v147)
      {
        uint64_t v148 = qword_100320B70;
        id v149 = v147;
        if (v148 != -1) {
          swift_once();
        }
        sub_100007288(v165, (uint64_t)qword_10033E700);
        unint64_t v150 = Logger.logObject.getter();
        os_log_type_t v151 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v150, v151))
        {
          uint64_t v152 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v152 = 0;
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "Destination is valid!", v152, 2u);
          swift_slowDealloc();
        }

        sub_100216DD0(v144, v149);
        v157 = Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v157, v158))
        {
          v159 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v159 = 0;
          _os_log_impl((void *)&_mh_execute_header, v157, v158, "Invitation response sent.", v159, 2u);
          swift_slowDealloc();
        }

        v167(0);
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v153 = Logger.logObject.getter();
        os_log_type_t v154 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v153, v154))
        {
          uint64_t v155 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v155 = 0;
          _os_log_impl((void *)&_mh_execute_header, v153, v154, "Unable to generate destination from handle.", v155, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for AACustodianError(0);
        uint64_t v184 = -7004;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v156 = v185;
        sub_100096154((uint64_t)v185, v167, v141, "Failed to send invitation result message: %@", "Invitation response sent.");
        swift_release();
        swift_release();
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    return sub_10009F5B4((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_100094C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v7 = (int *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009F2EC(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v11 = (uint64_t *)(a2 + v7[8]);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(a3, v10, v14);
  v15(a3 + v7[7], &v10[v7[7]], v14);
  uint64_t v16 = v7[10];
  uint64_t v17 = *(void *)&v10[v16];
  unint64_t v18 = *(void *)&v10[v16 + 8];
  uint64_t v19 = (uint64_t *)(a3 + v16);
  *uint64_t v19 = v17;
  v19[1] = v18;
  uint64_t v20 = (void *)(a3 + v7[8]);
  *uint64_t v20 = v13;
  v20[1] = v12;
  *(void *)(a3 + v7[9]) = 4;
  LOBYTE(v13) = v10[v7[11]];
  swift_bridgeObjectRetain();
  sub_100013140(v17, v18);
  uint64_t result = sub_10009F5B4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  *(unsigned char *)(a3 + v7[11]) = v13;
  return result;
}

id sub_100094DE0(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v5, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v17[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error updating custodianship %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Custodianship status updated!", v15, 2u);
      swift_slowDealloc();
    }

    sub_100006574((uint64_t)v5, (uint64_t *)&unk_100324590);
  }
  return [self postRecoveryContactChangedNotification];
}

uint64_t sub_1000950DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v5 = (int *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  os_log_type_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009F2EC(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(a2, v8, v9);
  v10(a2 + v5[7], &v8[v5[7]], v9);
  uint64_t v11 = v5[10];
  uint64_t v12 = *(void *)&v8[v11];
  unint64_t v13 = *(void *)&v8[v11 + 8];
  os_log_type_t v14 = (uint64_t *)(a2 + v11);
  *os_log_type_t v14 = v12;
  v14[1] = v13;
  uint64_t v15 = v5[8];
  uint64_t v16 = *(void *)&v8[v15];
  uint64_t v17 = *(void *)&v8[v15 + 8];
  unint64_t v18 = (void *)(a2 + v15);
  *unint64_t v18 = v16;
  v18[1] = v17;
  *(void *)(a2 + v5[9]) = 2;
  LOBYTE(v10) = v8[v5[11]];
  sub_100013140(v12, v13);
  swift_bridgeObjectRetain();
  uint64_t result = sub_10009F5B4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  *(unsigned char *)(a2 + v5[11]) = (_BYTE)v10;
  return result;
}

void sub_100095240(uint64_t a1)
{
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100019730(a1, (uint64_t)v5, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v16[1] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error updating custodianship %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    [self postRecoveryContactChangedNotification];
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CustodianRequest record updated!", v15, 2u);
      swift_slowDealloc();
    }

    sub_100006574((uint64_t)v5, (uint64_t *)&unk_100324590);
  }
}

uint64_t sub_100095584(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E748);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Completed triggered sync of trusted contacts with CloudKit. Success: %{BOOL}d.", v6, 8u);
    swift_slowDealloc();
  }

  return a2(0);
}

void sub_1000956D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Displaying trusted contact flow using Springboard.", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void **)(v4 + 384);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  v15[4] = sub_1000985A0;
  v15[5] = v13;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10025ED44;
  v15[3] = &unk_1002F8090;
  os_log_type_t v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  [v12 presentModel:a1 completion:v14];
  _Block_release(v14);
}

uint64_t sub_100095930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E748);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Launching custodian invite UI.", v11, 2u);
    swift_slowDealloc();
  }

  sub_100008EF8((void *)(v4 + 184), *(void *)(v4 + 208));
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v4;
  v12[3] = a2;
  v12[4] = a3;
  swift_retain();
  swift_retain();
  sub_10023C384(a1, (uint64_t)sub_100098530, (uint64_t)v12);

  return swift_release();
}

uint64_t sub_100095AA0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v12 = __chkstk_darwin(v10, v11);
  os_log_type_t v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)v47 - v16;
  uint64_t v18 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (void *)((char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v21, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100007288(v23, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v28 = _convertErrorToNSError(_:)();
      aBlock[0] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v28;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to fetch custodianship info: %@", v26, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    v52(v22);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_10009F45C((uint64_t)v21, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_10009F2EC((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    id v29 = objc_allocWithZone((Class)AACustodianshipInfo);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v31 = *(void *)&v14[*(int *)(v10 + 28)];
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v29 initWithID:isa status:v31 ownerHandle:v32];

    sub_10009F5B4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100007288(v34, (uint64_t)qword_10033E748);
    id v35 = v33;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      aBlock[0] = v48;
      uint64_t v49 = a4;
      *(_DWORD *)uint64_t v38 = 136315138;
      v47[1] = v38 + 4;
      id v39 = [v35 custodianID];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100006FBC((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v42 = v41;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v6);
      uint64_t v53 = sub_100135190(v40, v42, aBlock);
      a4 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Custodianship info found: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v44 = *(void **)(v51 + 384);
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v52;
    *(void *)(v45 + 24) = a4;
    aBlock[4] = (uint64_t)sub_100098574;
    aBlock[5] = v45;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10025ED44;
    aBlock[3] = (uint64_t)&unk_1002F8040;
    id v46 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v44 presentInvitationUIWithCustodianshipInfo:v35 completion:v46];
    _Block_release(v46);

    return sub_10009F5B4((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_100096154(uint64_t a1, void (*a2)(void), uint64_t a3, const char *a4, const char *a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = a2;
      uint64_t v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v20 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v13 = v20;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a2 = v12;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
    }

    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100007288(v15, (uint64_t)qword_10033E748);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, a5, v18, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(void))a2)(0);
  }
}

uint64_t sub_10009642C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  swift_retain();
  a7(v14, a6, v16);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_100096574(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(a1, 0);
  }
  swift_errorRetain();
  a3(8, a1);

  return sub_100080A98(a1, 1);
}

uint64_t sub_10009687C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v48 = a5;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_1003245E0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100007288(v17, (uint64_t)qword_10033E778);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v51 = a1;
  if (v20)
  {
    uint64_t v44 = v17;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v46 = v13;
    uint64_t v22 = (uint8_t *)v21;
    uint64_t v43 = swift_slowAlloc();
    v55[0] = v43;
    os_log_type_t v47 = (void *)v12;
    *(_DWORD *)uint64_t v22 = 136315138;
    unint64_t v42 = v22 + 4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v23 = Dictionary.description.getter();
    uint64_t v45 = a2;
    uint64_t v24 = v16;
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = v23;
    uint64_t v17 = v44;
    uint64_t v54 = sub_100135190(v27, v26, v55);
    uint64_t v12 = (uint64_t)v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v16 = v24;
    a2 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Errors from Repair custodians: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v13 = v46;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  sub_100007288(v17, (uint64_t)qword_10033E748);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "RepairCustodians: 2/2 Starting preflight", v30, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianPreflight, v12);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v31 = v56;
  uint64_t v32 = v57;
  os_log_type_t v47 = sub_100008EF8(v55, v56);
  id v33 = (void *)swift_allocObject();
  uint64_t v34 = v50;
  void v33[2] = v51;
  void v33[3] = a2;
  id v35 = v48;
  uint64_t v36 = v49;
  v33[4] = v48;
  void v33[5] = v36;
  v33[6] = v34;
  v33[7] = a8;
  v33[8] = a9;
  uint64_t v37 = *(void *)(v32 + 8);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(v37 + 16);
  id v39 = v35;
  id v40 = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v38(v52, v53, sub_10009EB64, v33, v31, v37);
  swift_release();
  return sub_100008EA8((uint64_t)v55);
}

uint64_t sub_100096D14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(void))
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E748);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RepairCustodians: 2/2 Finished preflight", v13, 2u);
    swift_slowDealloc();
  }
  uint64_t v14 = (void *)(a6 + 16);

  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RepairCustodians: Posting Recovery Contact Changed Notification", v17, 2u);
    swift_slowDealloc();
  }

  [self postRecoveryContactChangedNotification];
  swift_beginAccess();
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_100200F8C(v18);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10009E230(a4);
  [a5 unlock];
  swift_beginAccess();
  if (*v14)
  {
    swift_beginAccess();
    *uint64_t v14 = 0;
    swift_unknownObjectRelease();
  }
  return a7(0);
}

uint64_t sub_100096F50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100007288(v7, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v18 = a3;
    uint64_t v19 = a4;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v12 = Array.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    sub_100135190(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v15 = 0;
    }
    *uint64_t v11 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RepairCustodians: 1/2 Finished repairing custodians: %s with error: %@", (uint8_t *)v10, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v19;
    a3 = v18;
    if (!a1) {
      return a3();
    }
LABEL_7:
    uint64_t v20 = 0x3A726961706552;
    uint64_t v21 = 0xE700000000000000;
    swift_errorRetain();
    type metadata accessor for UUID();
    v16._countAndFlagsBits = Array.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    sub_10019F5F4(v20, v21, a1, (uint64_t)a3, a4);
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  swift_bridgeObjectRelease_n();
  swift_errorRelease();
  swift_errorRelease();

  if (a1) {
    goto LABEL_7;
  }
  return a3();
}

uint64_t sub_100097380(int a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  os_log_type_t v5 = _Block_copy(aBlock);
  _Block_copy(v5);
  uint64_t v6 = swift_retain();
  a4(v6, v5);
  _Block_release(v5);
  _Block_release(v5);

  return swift_release();
}

void sub_1000973F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100009F04(&qword_100322CF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  os_log_t v36 = (os_log_t)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = sub_100009F04(&qword_100323190);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [*(id *)(*sub_100008EF8((void *)(v1 + 264), *(void *)(v1 + 288)) + 16) aa_primaryAppleAccount];
  if (v11
    && (uint64_t v12 = v11, v13 = objc_msgSend(v11, "aa_altDSID"), v12, v13))
  {
    uint64_t v35 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [self analyticsEventWithName:v14 altDSID:v15 flowID:v16];
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v37);
    if (v17)
    {
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      [v17 setObject:isa forKeyedSubscript:kAAFDidSucceed];

      if (qword_100320BA0 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100007288(v19, (uint64_t)qword_10033E790);
      uint64_t v20 = v17;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        id v33 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 138412290;
        v37[0] = v20;
        uint64_t v24 = v20;
        uint64_t v34 = v2;
        unint64_t v25 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v33 = v17;

        uint64_t v2 = v34;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Reporting Repair CFU Action End Event %@", v23, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v21 = v20;
      }
      uint64_t v30 = v35;

      os_log_t v31 = v36;
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v30 + 16))(v36, v1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter, v2);
      Dependency.wrappedValue.getter();
      (*(void (**)(os_log_t, uint64_t))(v30 + 8))(v31, v2);
      [v37[0] sendEvent:v20];

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E790);
    os_log_t v36 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v27, "Account is nil. Not reporting Repair action begin Event.", v28, 2u);
      swift_slowDealloc();
    }
    os_log_t v29 = v36;
  }
}

id sub_1000979A0(uint64_t a1, uint64_t a2)
{
  return sub_1000979C8(a1, a2, (uint64_t)&kAACustodianRepairCFUActionEndEvent, "Account is nil. Not reporting Repair action end Event.");
}

id sub_1000979B4(uint64_t a1, uint64_t a2)
{
  return sub_1000979C8(a1, a2, (uint64_t)&kAACustodianRemoveEvent, "Account is nil. Not reporting Repair action begin Event.");
}

id sub_1000979C8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v6 = sub_100009F04(&qword_100323190);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v11 = [[*(id *)(*sub_100008EF8((void *)(v4 + 264), *(void *)(v4 + 288)) + 16) aa_primaryAppleAccount];
  if (v11
    && (uint64_t v12 = v11, v13 = objc_msgSend(v11, "aa_altDSID"), v12, v13))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [self analyticsEventWithName:v14 altDSID:v15 flowID:v16];
    swift_bridgeObjectRelease();

    sub_100008EA8((uint64_t)v24);
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E790);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, a4, v21, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v17;
}

void sub_100097CBC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_100009F04(&qword_100322CF0);
  os_log_t v8 = *(os_log_t *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [*(id *)(*sub_100008EF8((void *)(v4 + 264), *(void *)(v4 + 288)) + 16) aa_primaryAppleAccount];
  if (v12
    && (id v13 = v12, v14 = objc_msgSend(v12, "aa_altDSID"), v13, v14))
  {

    if (a1)
    {
      id v15 = a1;
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      [v15 setObject:isa forKeyedSubscript:kAAFDidSucceed];

      if (a3) {
        a3 = (void *)_convertErrorToNSError(_:)();
      }
      [v15 populateUnderlyingErrorsStartingWithRootError:a3];

      if (qword_100320BA0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E790);
      id v18 = v15;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        os_log_t v29 = (void *)swift_slowAlloc();
        uint64_t v30 = v21;
        *(_DWORD *)uint64_t v21 = 138412290;
        v28[1] = v21 + 4;
        id v32 = v18;
        id v22 = v18;
        os_log_t v31 = v8;
        id v23 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_t v29 = a1;

        os_log_t v8 = v31;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Reporting Repair CFU Action End Event %@", v30, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      ((void (*)(char *, uint64_t, uint64_t))v8[2].isa)(v11, v4 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter, v7);
      Dependency.wrappedValue.getter();
      ((void (*)(char *, uint64_t))v8[1].isa)(v11, v7);
      [v32 sendEvent:v18];

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E790);
    os_log_t v31 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v25, "Account is nil. Not reporting Repair action begin Event.", v26, 2u);
      swift_slowDealloc();
    }
    os_log_t v27 = v31;
  }
}

uint64_t sub_100098104()
{
  return type metadata accessor for CustodianDaemonService();
}

void sub_10009810C()
{
  sub_10001BF34(319, (unint64_t *)&unk_100324000, (uint64_t *)&unk_10032D750);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100324010, (uint64_t *)&unk_10032ACB0);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&unk_100324020, (uint64_t *)&unk_10032F8E0);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&unk_100324030, (uint64_t *)&unk_1003224B0);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&unk_100324040, &qword_10032D770);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&qword_100324050, (uint64_t *)&unk_10032A640);
            if (v5 <= 0x3F)
            {
              sub_10001BF34(319, (unint64_t *)&unk_100324060, (uint64_t *)&unk_10032ACC0);
              if (v6 <= 0x3F)
              {
                sub_10001BF34(319, (unint64_t *)&unk_100324070, &qword_10032D780);
                if (v7 <= 0x3F)
                {
                  sub_10001BF34(319, qword_100324080, (uint64_t *)&unk_10032ACD0);
                  if (v8 <= 0x3F)
                  {
                    sub_10001BF34(319, qword_100323030, (uint64_t *)&unk_1003224C0);
                    if (v9 <= 0x3F)
                    {
                      sub_10001BF34(319, qword_100322D60, (uint64_t *)&unk_100322530);
                      if (v10 <= 0x3F) {
                        swift_updateClassMetadata2();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000984F0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100098530(uint64_t a1)
{
  return sub_100095AA0(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10009853C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100098574(uint64_t a1)
{
  return sub_100096154(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), "Error occured displaying invite UI: %@", "Successfully displayed invite UI");
}

uint64_t sub_1000985A0(uint64_t a1)
{
  return sub_100096154(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), "Error occurred displaying Springboard UI: %@", "Successfully displayed Springboard UI.");
}

uint64_t sub_1000985CC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100098604()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009864C(uint64_t a1)
{
  return sub_1000937FC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100098658()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100098780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100094C64(a1, v6, a2);
}

uint64_t sub_10009880C()
{
  uint64_t v1 = (int *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v6 + v1[10]), *(void *)(v6 + v1[10] + 8));
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100098964(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = (void (*)(void))v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = (uint64_t)v1 + v4;
  unint64_t v10 = (char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  id v11 = *(void (**)(void))v10;
  uint64_t v12 = *((void *)v10 + 1);

  return sub_10026D078(a1, v5, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100098A0C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecoverySessionRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v12 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  v7(v0 + v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[9]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_100013198(*v8, v9);
  }
  sub_100013198(*(void *)(v4 + v1[10]), *(void *)(v4 + v1[10] + 8));
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5)) {
    v7(v10, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v12 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100098C2C(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for CustodianRecoverySessionRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void (**)(id, uint64_t))(v2 + v7);
  uint64_t v9 = *(void *)(v2 + v7 + 8);

  sub_100092E70(a1, v4, v2 + v6, v8, v9);
}

void sub_100098CE8(uint64_t a1, uint64_t a2)
{
  sub_10004F0B0(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100098CF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100098D44()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100098D8C(uint64_t a1)
{
  return sub_100092270(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100098D9C()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100098DDC(uint64_t a1)
{
  return sub_1000919B0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void, void))(v1 + 32), *(void *)(v1 + 40));
}

void sub_100098DE8(uint64_t a1, char a2)
{
  sub_1000900F8(a1, a2 & 1, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t sub_100098DF4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100098E2C(uint64_t a1, char a2)
{
  sub_10008F664(a1, a2 & 1, *(void (**)(unint64_t, unint64_t, uint64_t))(v2 + 16));
}

void sub_100098E3C(uint64_t a1, uint64_t a2)
{
  sub_10004E090(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100098E44()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100098E94(uint64_t a1, unint64_t a2, char a3)
{
  sub_10008EC34(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void (**)(void, void))(v3 + 24), *(void *)(v3 + 32), *(void **)(v3 + 40), *(void **)(v3 + 48));
}

unint64_t sub_100098EA8()
{
  unint64_t result = qword_100322390;
  if (!qword_100322390)
  {
    sub_1000112CC((uint64_t *)&unk_100328450);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322390);
  }
  return result;
}

uint64_t sub_100098F04(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_100013198(a1, a2);
  }
}

uint64_t sub_100098F10()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100098F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008F0F4(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void **)(v3 + 40));
}

uint64_t sub_100098F64(uint64_t a1, char a2)
{
  return sub_10008E5C8(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100098F70(uint64_t a1)
{
  return sub_10008DA44(a1, *(void (**)(id, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100098F78()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

void sub_10009904C(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v2 + v6;
  uint64_t v10 = *(void *)(v2 + v8);
  id v11 = *(void (**)(uint64_t))(v2 + v7);
  uint64_t v12 = *(void *)(v2 + v7 + 8);
  uint64_t v13 = v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v14 = *(void (**)(uint64_t, void))v13;
  uint64_t v15 = *(void *)(v13 + 8);

  sub_10008B354(a1, v4, v9, v11, v12, v10, v14, v15);
}

uint64_t sub_100099118()
{
  uint64_t v1 = type metadata accessor for CustodianshipRecords(0);
  uint64_t v25 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v23 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v26 = v0;
  uint64_t v24 = (v25 + 24) & ~v25;
  uint64_t v2 = v0 + v24;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v5(v0 + v24, v3);
  unint64_t v6 = (int *)type metadata accessor for CustodianRecord();
  v5(v0 + v24 + v6[5], v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)(v0 + v24 + v6[10]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100013198(*v7, v8);
  }
  sub_100013198(*(void *)(v2 + v6[11]), *(void *)(v2 + v6[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + v6[16];
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v10(v9, 1, v3)) {
    v5(v9, v3);
  }
  uint64_t v11 = v2 + *(int *)(v1 + 20);
  v5(v11, v3);
  uint64_t v12 = (int *)type metadata accessor for CustodianRecoveryInfoRecord();
  v5(v11 + v12[5], v3);
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v11 + v12[7]), *(void *)(v11 + v12[7] + 8));
  uint64_t v13 = (uint64_t *)(v11 + v12[8]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100013198(*v13, v14);
  }
  sub_100013198(*(void *)(v11 + v12[9]), *(void *)(v11 + v12[9] + 8));
  uint64_t v15 = v11 + v12[11];
  if (!v10(v15, 1, v3)) {
    v5(v15, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v2 + *(int *)(v1 + 24);
  v5(v16, v3);
  uint64_t v17 = (int *)type metadata accessor for CustodianHealthRecord();
  v5(v16 + v17[5], v3);
  uint64_t v18 = v16 + v17[6];
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  os_log_type_t v20 = (uint64_t *)(v16 + v17[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100013198(*v20, v21);
  }
  sub_100013198(*(void *)(v16 + v17[8]), *(void *)(v16 + v17[8] + 8));
  swift_release();

  return _swift_deallocObject(v26, ((v23 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v25 | 7);
}

uint64_t sub_1000994D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustodianshipRecords(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))v7;
  uint64_t v9 = *(void *)(v7 + 8);

  return sub_100089F28(a1, v5, v6, v8, v9);
}

uint64_t sub_10009957C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  unint64_t v14 = (char *)&v21 - v13;
  uint64_t v24[3] = type metadata accessor for CAEvent();
  v24[4] = &off_1002F8C90;
  v24[0] = a1;
  uint64_t v15 = sub_100008EF8((void *)(a3 + 16), *(void *)(a3 + 40));
  sub_100008A94(*v15 + 64, (uint64_t)v23);
  uint64_t v16 = sub_100008EF8(v23, v23[3]);
  sub_100008A94((uint64_t)v24, (uint64_t)v22);
  uint64_t v17 = swift_allocObject();
  sub_100041E8C(v22, v17 + 16);
  *(void *)(v17 + 56) = a2;
  uint64_t v18 = sub_100008EF8((void *)(*v16 + 16), *(void *)(*v16 + 40));
  type metadata accessor for LocalCache();
  swift_retain();
  swift_errorRetain();
  sub_10000A280();
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v11, v6);
  sub_100008EF8((void *)(*v18 + 16), *(void *)(*v18 + 40));
  sub_1000B3744((uint64_t)v14, (uint64_t)sub_10009F654, v17);
  v19(v14, v6);
  swift_release();
  sub_100008EA8((uint64_t)v23);
  return sub_100008EA8((uint64_t)v24);
}

uint64_t sub_1000997C0(uint64_t a1, id a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned int v8 = [a2 isAccepted];
  unsigned int v9 = [a2 isAutoAction];
  char v10 = v9 ^ 1;
  if (v9) {
    char v11 = 2;
  }
  else {
    char v11 = 3;
  }
  if (!v8) {
    char v10 = v11;
  }
  *(unsigned char *)(a3 + qword_10032E718) = v10;
  if (a1) {
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  }
  else {
    uint64_t v12 = 0;
  }
  sub_100253FD0(a1 == 0, v12);

  return a4(a1);
}

void *sub_100099888(uint64_t a1, void *a2)
{
  id v31 = a2;
  uint64_t v30 = type metadata accessor for CustodianRecord();
  uint64_t v5 = __chkstk_darwin(v30, v4);
  uint64_t v32 = (uint64_t)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  char v10 = (char *)v28 - v9;
  unint64_t result = _swiftEmptyArrayStorage;
  id v33 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v14 = *(void *)(v8 + 72);
    v28[1] = v2;
    uint64_t v29 = (v13 + 32) & ~v13;
    uint64_t v15 = a1 + v29;
    while (1)
    {
      sub_10009F2EC(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v16 = &v10[*(int *)(v30 + 24)];
      uint64_t v18 = *(void *)v16;
      uint64_t v17 = *((void *)v16 + 1);
      id v19 = [v31 handle];
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v22 = v21;

      if (v18 == v20 && v17 == v22) {
        break;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_12;
      }
      sub_10009F5B4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
LABEL_4:
      v15 += v14;
      if (!--v12) {
        return v33;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    sub_10009F45C((uint64_t)v10, v32, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    uint64_t v25 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100228A18(0, v25[2] + 1, 1);
      uint64_t v25 = v33;
    }
    unint64_t v27 = v25[2];
    unint64_t v26 = v25[3];
    if (v27 >= v26 >> 1)
    {
      sub_100228A18(v26 > 1, v27 + 1, 1);
      uint64_t v25 = v33;
    }
    v25[2] = v27 + 1;
    sub_10009F45C(v32, (uint64_t)v25 + v29 + v27 * v14, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_100099B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a4;
  v18[3] = a5;
  uint64_t v42 = a6;
  v18[4] = a6;
  void v18[5] = a7;
  uint64_t v19 = (uint64_t)v18;
  v18[6] = a8;
  v18[7] = a9;
  v18[8] = a10;
  v18[9] = a11;
  uint64_t v40 = a4;
  v18[10] = a12;
  uint64_t v20 = qword_100320B88;
  swift_retain();
  uint64_t v41 = a5;
  swift_retain();
  uint64_t v43 = a7;
  swift_bridgeObjectRetain();
  uint64_t v44 = a8;
  id v21 = a8;
  id v22 = a9;
  swift_retain();
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E748);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  char v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  uint64_t v26 = a1;
  if (os_log_type_enabled(v24, v25))
  {
    id v39 = v22;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = (void *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v29 = Array.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    sub_100135190(v29, v31, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v32 = 0;
    }
    void *v28 = v32;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "RepairCustodians: 1/2 Finished repairing custodians: %s with error: %@", (uint8_t *)v27, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v33 = v44;
    uint64_t v34 = v42;
    uint64_t v35 = v43;
    uint64_t v36 = v41;
    id v22 = v39;
    if (!v26) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();

    id v33 = a8;
    uint64_t v34 = v42;
    uint64_t v35 = a7;
    uint64_t v36 = a5;
    if (!a1)
    {
LABEL_10:
      sub_10009687C(v40, v36, v34, v35, v33, v22, a10, a11, a12);
      return swift_release();
    }
  }
  uint64_t v45 = 0x3A726961706552;
  uint64_t v46 = 0xE700000000000000;
  swift_errorRetain();
  type metadata accessor for UUID();
  v37._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  sub_10019F5F4(v45, v46, v26, (uint64_t)sub_100041A98, v19);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return swift_release();
}

void sub_100099F60(NSObject *a1, void *a2, void (**a3)(void, void, void))
{
  uint64_t v89 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v87 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v81 - v11;
  uint64_t v86 = sub_100009F04(&qword_100323190);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86, v13);
  uint64_t v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v20 = (char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)v81 - v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a3;
  _Block_copy(a3);
  if (sub_1000888AC())
  {
    uint64_t v83 = v6;
    uint64_t v84 = v5;
    id v25 = [[*(id *)(*sub_100008EF8(a2 + 33, a2[36]) + 16) aa_primaryAppleAccount];
    uint64_t v88 = v24;
    BOOL v82 = v12;
    if (v25
      && (uint64_t v26 = v25,
          id v27 = objc_msgSend(v25, "aa_primaryEmail"),
          v26,
          v27))
    {
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v30 = 0;
    }
    id v35 = [v89 handle];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;

    if (v30)
    {
      if (v28 == v36 && v30 == v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        if (qword_100320B88 != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        sub_100007288(v40, (uint64_t)qword_10033E748);
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Cannot invite self as Custodian.", v43, 2u);
          swift_slowDealloc();
        }

        uint64_t v44 = type metadata accessor for UUID();
        uint64_t v45 = *(void *)(v44 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v23, 1, 1, v44);
        type metadata accessor for AACustodianError(0);
        *(void *)&v90[0] = -7020;
        sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
        sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v46 = (void *)v91[0];
        sub_100019730((uint64_t)v23, (uint64_t)v20, (uint64_t *)&unk_100321CE0);
        Class isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v20, 1, v44) != 1)
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v44);
        }
        uint64_t v48 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, Class, void *))a3)[2](a3, isa, v48);

        sub_100006574((uint64_t)v23, (uint64_t *)&unk_100321CE0);
LABEL_32:
        swift_release();
        return;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v39) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    sub_100007288(v49, (uint64_t)qword_10033E748);
    uint64_t v50 = v89;
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      v91[0] = (uint64_t)v89;
      *(_DWORD *)uint64_t v53 = 136315138;
      v81[1] = v53 + 4;
      id v54 = [v50 handle];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      *(void *)&v90[0] = sub_100135190(v55, v57, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Begin custodianship setup for %s.", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v58 = v85;
    uint64_t v59 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v15, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v86);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v59);
    uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v61;
    sub_100009F04(&qword_100324668);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = 0x766F6D6552736177;
    *(void *)(inited + 40) = 0xEF6E6F6974634165;
    sub_10000850C(0, (unint64_t *)&qword_100324670);
    *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(0);
    unint64_t v64 = sub_10022175C(inited);
    uint64_t v65 = type metadata accessor for CAEvent();
    unint64_t v66 = (void *)swift_allocObject();
    v66[2] = v60;
    v66[3] = v62;
    v66[4] = v64;
    id v67 = objc_allocWithZone((Class)type metadata accessor for AAFTimedAnalyticsEvent());
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v66[5] = AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    uint64_t v91[3] = v65;
    v91[4] = (uint64_t)&off_1002F8C90;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v91[0] = (uint64_t)v66;
    sub_100008EA8((uint64_t)v90);
    sub_100008A94((uint64_t)v91, (uint64_t)v90);
    os_log_type_t v68 = (void *)swift_allocObject();
    void v68[2] = a2;
    sub_100041E8C(v90, (uint64_t)(v68 + 3));
    uint64_t v69 = v88;
    v68[8] = sub_10009F664;
    v68[9] = v69;
    uint64_t v70 = swift_allocObject();
    swift_weakInit();
    os_log_type_t v71 = (void *)swift_allocObject();
    v71[2] = v50;
    v71[3] = sub_10009F6B4;
    v71[4] = v68;
    uint64_t v71[5] = v70;
    os_log_type_t v72 = sub_100008EF8(a2 + 23, a2[26]);
    BOOL v73 = (void *)swift_allocObject();
    v73[2] = v50;
    _OWORD v73[3] = sub_10009F768;
    v73[4] = v71;
    uint64_t v74 = sub_100008EF8((void *)(*v72 + 16), *(void *)(*v72 + 40));
    type metadata accessor for LocalCache();
    BOOL v75 = v50;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    os_log_type_t v76 = v87;
    sub_10000A280();
    uint64_t v77 = (uint64_t)v82;
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v78 = *(void (**)(char *, uint64_t))(v83 + 8);
    uint64_t v79 = v76;
    uint64_t v80 = v84;
    v78(v79, v84);
    sub_100008EF8((void *)(*v74 + 16), *(void *)(*v74 + 40));
    sub_1000B3744(v77, (uint64_t)sub_10009F7B4, (uint64_t)v73);
    v78((char *)v77, v80);
    swift_release();
    swift_release();
    swift_release();
    sub_100008EA8((uint64_t)v91);
    swift_release();
    goto LABEL_32;
  }
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100007288(v31, (uint64_t)qword_10033E748);
  uint64_t v89 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v89, v32))
  {
    id v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, v32, "Client is missing management entitlement, rejecting request to setupCustodianship", v33, 2u);
    swift_slowDealloc();
  }
  swift_release();
  uint64_t v34 = v89;
}

uint64_t sub_10009AAD8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CustodianDaemonContainer();
  uint64_t v14 = v6;
  uint64_t v15 = &off_100301A78;
  v13[0] = a2;
  *(void *)(a3 + 176) = a1;
  uint64_t v7 = sub_100008EF8(v13, v6);
  sub_100008A94(*v7 + 104, a3 + 16);
  uint64_t v8 = sub_100008EF8(v13, v14);
  sub_100008A94(*v8 + 144, a3 + 56);
  sub_100008EF8(v13, v14);
  id v9 = a1;
  sub_10021E27C(v12);
  sub_100041E8C(v12, a3 + 96);
  uint64_t v10 = sub_100008EF8(v13, v14);
  sub_100008A94(*v10 + 24, a3 + 136);
  sub_100008EA8((uint64_t)v13);
  return a3;
}

void sub_10009ABB4(NSObject *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v111 = a1;
  uint64_t updated = type metadata accessor for CustodianStatusUpdateRequest();
  uint64_t v105 = *(void *)(updated - 8);
  uint64_t v6 = __chkstk_darwin(updated, v5);
  uint64_t v107 = (uint64_t)v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = ((char *)v89 - v9);
  uint64_t v11 = sub_100009F04(&qword_100323190);
  uint64_t v103 = *(void (***)(void, void, void))(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v110 = *(void **)(v15 - 8);
  uint64_t v16 = v110[8];
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v108 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)v89 - v21;
  __chkstk_darwin(v20, v23);
  uint64_t v109 = (char *)v89 - v24;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a3;
  _Block_copy(a3);
  uint64_t v26 = a2;
  if (sub_1000888AC())
  {
    id v27 = [*(id *)(*sub_100008EF8((void *)(a2 + 264), *(void *)(a2 + 288)) + 16) aa_primaryAppleAccount];

    if (v27)
    {
      uint64_t v28 = v109;
      UUID.init()();
      uint64_t v92 = UUID.uuidString.getter();
      uint64_t v93 = v29;
      uint64_t v30 = v110;
      uint64_t v31 = (void (*)(char *, uint64_t))v110[1];
      uint64_t v99 = (char *)(v110 + 1);
      BOOL v98 = v31;
      v31(v28, v15);
      uint64_t v32 = swift_allocObject();
      uint64_t v33 = os_transaction_create();
      uint64_t v100 = v32;
      *(void *)(v32 + 16) = v33;
      id v97 = [self lock];
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v102 = v10;
      uint64_t v101 = v25;
      uint64_t v34 = type metadata accessor for Logger();
      sub_100007288(v34, (uint64_t)qword_10033E748);
      id v35 = (void (*)(char *, NSObject *, uint64_t))v30[2];
      unint64_t v96 = v30 + 2;
      uint64_t v94 = v35;
      v35(v22, v111, v15);
      uint64_t v36 = Logger.logObject.getter();
      uint64_t v37 = v15;
      os_log_type_t v38 = static os_log_type_t.info.getter();
      BOOL v39 = os_log_type_enabled(v36, v38);
      uint64_t v95 = v26;
      uint64_t v91 = v16;
      if (v39)
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        v114[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136315138;
        v89[1] = v40 + 4;
        uint64_t v41 = UUID.uuidString.getter();
        *(void *)&long long v112 = sub_100135190(v41, v42, v114);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v98(v22, v37);
        _os_log_impl((void *)&_mh_execute_header, v36, v38, "Removing custodian %s.", v40, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v95;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v98(v22, v37);
      }

      uint64_t v43 = v37;
      id v54 = v103;
      ((void (**)(char *, uint64_t, uint64_t))v103)[2](v14, v26 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v11);
      Dependency.wrappedValue.getter();
      ((void (*)(char *, uint64_t))v54[1])(v14, v11);
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v56;
      sub_100009F04(&qword_100324668);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
      *(void *)(inited + 32) = 0x766F6D6552736177;
      *(void *)(inited + 40) = 0xEF6E6F6974634165;
      sub_10000850C(0, (unint64_t *)&qword_100324670);
      *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
      unint64_t v59 = sub_10022175C(inited);
      uint64_t v60 = type metadata accessor for CAEvent();
      uint64_t v61 = (void *)swift_allocObject();
      v61[2] = v55;
      v61[3] = v57;
      v61[4] = v59;
      id v62 = objc_allocWithZone((Class)type metadata accessor for AAFTimedAnalyticsEvent());
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      void v61[5] = AAFTimedAnalyticsEvent.init(eventName:initialData:)();
      v114[3] = v60;
      v114[4] = (uint64_t)&off_1002F8C90;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v114[0] = (uint64_t)v61;
      sub_100008EA8((uint64_t)&v112);
      id v63 = sub_1000979B4(v92, (uint64_t)v93);
      uint64_t v103 = (void (**)(void, void, void))v63;
      swift_bridgeObjectRelease();
      sub_100008A94((uint64_t)v114, (uint64_t)&v112);
      unint64_t v64 = (uint64_t (*)(void *))swift_allocObject();
      *((void *)v64 + 2) = v26;
      sub_100041E8C(&v112, (uint64_t)v64 + 24);
      id v65 = v97;
      *((void *)v64 + 8) = v63;
      *((void *)v64 + 9) = v65;
      *((void *)v64 + 10) = v100;
      *((void *)v64 + 11) = sub_10009F7CC;
      *((void *)v64 + 12) = v101;
      uint64_t v66 = (uint64_t)v102;
      id v67 = v111;
      os_log_type_t v68 = v94;
      v94((char *)v102, v111, v43);
      uint64_t v69 = updated;
      *(void *)(v66 + *(int *)(updated + 20)) = 4;
      *(unsigned char *)(v66 + *(int *)(v69 + 24)) = 0;
      uint64_t v93 = sub_100008EF8((void *)(v26 + 432), *(void *)(v26 + 456));
      uint64_t v70 = swift_allocObject();
      uint64_t updated = v70;
      swift_weakInit();
      os_log_type_t v71 = v109;
      v68(v109, v67, v43);
      os_log_type_t v72 = v110;
      unint64_t v73 = (*((unsigned __int8 *)v110 + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)v110 + 80);
      unint64_t v74 = (v91 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v75 = swift_allocObject();
      os_log_type_t v76 = (void (*)(unint64_t, char *, uint64_t))v72[4];
      uint64_t v77 = v71;
      uint64_t v78 = v43;
      uint64_t v90 = v43;
      v76(v75 + v73, v77, v43);
      *(void *)(v75 + v74) = v70;
      uint64_t v79 = (uint64_t (**)(void *))(v75 + ((v74 + 15) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v79 = sub_10009F1E8;
      v79[1] = v64;
      uint64_t v80 = *v93;
      sub_100008A94(*v93 + 16, (uint64_t)&v112);
      uint64_t v110 = sub_100008EF8(&v112, v113);
      uint64_t v81 = (uint64_t)v108;
      uint64_t v82 = (uint64_t)v102;
      v68(v108, v102, v78);
      uint64_t v111 = type metadata accessor for CustodianStatusUpdateRequest;
      uint64_t v83 = v107;
      sub_10009F2EC(v82, v107, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
      unint64_t v84 = (*(unsigned __int8 *)(v105 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
      unint64_t v85 = (v106 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v86 = swift_allocObject();
      sub_10009F45C(v83, v86 + v84, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest);
      *(void *)(v86 + v85) = v80;
      uint64_t v87 = (uint64_t (**)(uint64_t))(v86 + ((v85 + 15) & 0xFFFFFFFFFFFFFFF8));
      *uint64_t v87 = sub_10009F2C0;
      v87[1] = (uint64_t (*)(uint64_t))v75;
      uint64_t v110 = v103;
      id v88 = v97;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      sub_10023B75C(v81, (uint64_t)sub_10009F4C4, v86);
      swift_release();
      v98((char *)v81, v90);
      sub_100008EA8((uint64_t)&v112);

      swift_release();
      swift_release();
      sub_10009F5B4((uint64_t)v102, v111);
      sub_100008EA8((uint64_t)v114);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      sub_100007288(v48, (uint64_t)qword_10033E748);
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Not logged in to AppleAccount, unable to remove custodian", v51, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      *(void *)&long long v112 = -7002;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_type_t v52 = (void *)v114[0];
      uint64_t v53 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a3)[2](a3, v53);
      swift_release();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100007288(v44, (uint64_t)qword_10033E748);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v45, "Client is missing management entitlement, rejecting request to removeCustodian", v46, 2u);
      swift_slowDealloc();
    }
    swift_release();
    os_log_type_t v47 = v111;
  }
}

void sub_10009B8AC(NSObject *a1, uint64_t a2, void (**a3)(void, void))
{
  os_log_t v46 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100009F04(&qword_100323190);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  _Block_copy(a3);
  if (sub_1000888AC())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v10);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    id v16 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent());
    uint64_t v17 = (void *)sub_100253EEC();
    sub_100008EA8((uint64_t)v48);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = v17;
    v18[3] = &off_100302B70;
    v18[4] = sub_10009F7CC;
    void v18[5] = v15;
    uint64_t v19 = *(void **)(*sub_100008EF8((void *)(a2 + 264), *(void *)(a2 + 288)) + 16);
    swift_retain();
    id v45 = v17;
    id v20 = [v19 aa_primaryAppleAccount];

    if (v20)
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100007288(v21, (uint64_t)qword_10033E748);
      (*(void (**)(char *, os_log_t, uint64_t))(v6 + 16))(v9, v46, v5);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        v48[0] = v43;
        uint64_t v44 = v15;
        *(_DWORD *)uint64_t v24 = 136315138;
        v42[1] = v24 + 4;
        uint64_t v25 = UUID.uuidString.getter();
        uint64_t v47 = sub_100135190(v25, v26, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ending custodianship %s.", v24, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }

      id v39 = objc_allocWithZone((Class)AACustodianInvitationResponseContext);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v41 = [v39 initWithCustodianID:isa didAccept:0];

      sub_10009365C(v41, (uint64_t)sub_10009F17C, (uint64_t)v18);
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100007288(v31, (uint64_t)qword_10033E748);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Not logged in to AppleAccount, unable to end custodianship", v34, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v47 = -7002;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v35 = (void *)v48[0];
      id v36 = v45;
      *((unsigned char *)v45 + qword_10032E718) = 4;
      uint64_t v37 = (void *)_convertErrorToNSError(_:)();
      sub_100253FD0(0, v37);

      os_log_type_t v38 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a3)[2](a3, v38);
      swift_release();

      swift_release();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E748);
    os_log_t v46 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v28, "Client is missing management entitlement, rejecting request to stopBeingCustodian", v29, 2u);
      swift_slowDealloc();
    }
    swift_release();
    os_log_t v30 = v46;
  }
}

void sub_10009BFAC(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v28 - v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  uint64_t v14 = *(void **)(*sub_100008EF8(a1 + 33, a1[36]) + 16);
  _Block_copy(a2);
  id v15 = [v14 aa_primaryAppleAccount];

  if (v15)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10009EEF4;
    *(void *)(v16 + 24) = v13;
    uint64_t v17 = sub_100008EF8(a1 + 2, a1[5]);
    sub_100008A94(*v17 + 64, (uint64_t)v28);
    uint64_t v18 = sub_100008EF8(v28, v28[3]);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_10009EF20;
    *(void *)(v19 + 24) = v16;
    id v20 = sub_100008EF8((void *)(*v18 + 16), *(void *)(*v18 + 40));
    type metadata accessor for LocalCache();
    swift_retain();
    swift_retain();
    sub_10000A280();
    URL.appendingPathComponent(_:isDirectory:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v9, v4);
    sub_100008EF8((void *)(*v20 + 16), *(void *)(*v20 + 40));
    sub_1000B3370((uint64_t)v12, (uint64_t)sub_10009EF28, v19);
    v21(v12, v4);
    swift_release();
    sub_100008EA8((uint64_t)v28);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E748);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not logged in to AppleAccount, unable to fetch", v25, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void v28[5] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v26 = (void *)v28[0];
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v27);
    swift_release();
  }
}

void sub_10009C3B0(void *a1, char a2, uint64_t a3)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100007288(v6, (uint64_t)qword_10033E748);
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v21 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v21;
      sub_10007B670(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Code validation completed with error: %@", v9, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007B670(a1, 1);
    }

    swift_errorRetain();
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v19);

    sub_10007B670(a1, 1);
  }
  else
  {
    uint64_t v11 = qword_100320B88;
    id v12 = a1;
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    id v14 = v12;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      id v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      id v18 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v20 = a1;
      sub_10007B670(a1, 0);
      sub_10007B670(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Code validation completed with context: %@", v17, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10007B670(a1, 0);
      sub_10007B670(a1, 0);
    }

    (*(void (**)(uint64_t, id, void))(a3 + 16))(a3, v14, 0);
  }
  sub_10007B670(a1, a2 & 1);
}

void sub_10009C74C(void *a1, uint64_t a2, void *aBlock)
{
  _Block_copy(aBlock);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100007288(v6, (uint64_t)qword_10033E748);
  id v7 = a1;
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v14 = a2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;

    a2 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting Custodian recovery verification with context: %@", v10, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  uint64_t v13 = (void *)*sub_100008EF8((void *)(a2 + 304), *(void *)(a2 + 328));
  _Block_copy(aBlock);
  sub_100191E2C(v7, v13, aBlock);
  _Block_release(aBlock);
  _Block_release(aBlock);
}

void sub_10009C954(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_100009F04(&qword_100323190);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a3;
  _Block_copy(a3);
  if (sub_1000888AC())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v6);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    id v12 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent());
    uint64_t v13 = (void *)sub_100253EEC();
    sub_100008EA8((uint64_t)&v37);
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = a1;
    v14[3] = v13;
    v14[4] = &off_100302B70;
    v14[5] = sub_10009F7CC;
    v14[6] = v11;
    id v15 = *(void **)(*sub_100008EF8((void *)(a2 + 264), *(void *)(a2 + 288)) + 16);
    swift_retain();
    id v16 = a1;
    id v17 = v13;
    id v18 = [v15 aa_primaryAppleAccount];

    if (v18)
    {
      sub_10009365C(v16, (uint64_t)sub_10009EC04, (uint64_t)v14);
      swift_release();

      swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100007288(v23, (uint64_t)qword_10033E748);
      os_log_type_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Not logged in to AppleAccount, unable to fetch", v26, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v36 = -7002;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v27 = v37;
      unsigned int v28 = [v16 isAccepted];
      unsigned int v29 = [v16 isAutoAction];
      char v30 = v29 ^ 1;
      if (v29) {
        char v31 = 2;
      }
      else {
        char v31 = 3;
      }
      if (!v28) {
        char v30 = v31;
      }
      *((unsigned char *)v17 + qword_10032E718) = v30;
      uint64_t v32 = (void *)_convertErrorToNSError(_:)();
      sub_100253FD0(0, v32);

      os_log_type_t v33 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a3)[2](a3, v33);
      swift_release();

      swift_release();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E748);
    os_log_t v35 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v20, "Client is missing management entitlement, rejecting request to respondToInvite", v21, 2u);
      swift_slowDealloc();
    }
    swift_release();
    os_log_t v22 = v35;
  }
}

void sub_10009CE3C(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100324600);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  uint64_t v10 = *(void **)(*sub_100008EF8((void *)(a1 + 264), *(void *)(a1 + 288)) + 16);
  _Block_copy(a2);
  id v11 = [v10 aa_primaryAppleAccount];

  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__healthCheckScheduler, v4);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    sub_100008EF8(v20, v21);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v13 + 16))(sub_10009F7CC, v9, v12, v13);
    sub_100008EA8((uint64_t)v20);
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100007288(v14, (uint64_t)qword_10033E748);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Not logged in to AppleAccount, unable to fetch", v17, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    uint64_t v23 = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v18 = (void *)v20[0];
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v19);
    swift_release();
  }
}

void sub_10009D15C(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = *(void **)(*sub_100008EF8((void *)(a1 + 264), *(void *)(a1 + 288)) + 16);
  _Block_copy(a2);
  id v6 = [v5 aa_primaryAppleAccount];

  if (v6)
  {
    sub_1000886E4();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_10009F7CC;
    *(void *)(v7 + 24) = v4;
    swift_retain();
    sub_1001278C8((uint64_t (*)(void))sub_10009EB94, v7);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100007288(v8, (uint64_t)qword_10033E748);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not logged in to AppleAccount, unable to perform data sync", v11, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v12);
    swift_release();
  }
}

void sub_10009D3E0(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  if (qword_100320B88 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E748);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Kicking off manatee migration.", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = [*(id *)(*sub_100008EF8(a1 + 33, a1[36]) + 16) aa_primaryAppleAccount];
  if (v9)
  {
    os_log_type_t v10 = a1 + 43;
    uint64_t v11 = a1[46];
    uint64_t v12 = a1[47];
    sub_100008EF8(v10, v11);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v12 + 8))(sub_10009F7CC, v4, v11, v12);
    swift_release();
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not logged in to AppleAccount, unable to fetch", v15, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v16 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v16);
    swift_release();
  }
}

void sub_10009D6B8(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  os_log_type_t v10 = *(void **)(*sub_100008EF8((void *)(a1 + 264), *(void *)(a1 + 288)) + 16);
  _Block_copy(a2);
  id v11 = [v10 aa_primaryAppleAccount];

  if (v11)
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E748);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Triggering a sync of trusted contacts with CloudKit.", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__syncManager, v4);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100008EF8(v23, v23[3]);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_10009F7CC;
    *(void *)(v16 + 24) = v9;
    swift_retain();
    sub_10014CD74(3, 1, (uint64_t)sub_10009EB8C, v16);
    swift_release();
    sub_100008EA8((uint64_t)v23);
    swift_release();
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E748);
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not logged in to AppleAccount, cannot trigger sync with CloudKit", v20, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for AACustodianError(0);
    void v23[5] = -7002;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v21 = (void *)v23[0];
    uint64_t v22 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a2)[2](a2, v22);
    swift_release();
  }
}

void sub_10009DAAC(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100328400);
  uint64_t v55 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = swift_allocObject();
  *(void *)(v57 + 16) = a3;
  _Block_copy(a3);
  if (sub_1000888AC())
  {
    uint64_t v54 = v6;
    UUID.init()();
    uint64_t v15 = UUID.uuidString.getter();
    uint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_1000973F4();
    uint64_t v53 = v15;
    id v56 = sub_1000979A0(v15, v17);
    if (a1)
    {
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = os_transaction_create();
      id v19 = [self lock];
      type metadata accessor for PartialErrorHandler();
      swift_allocObject();
      uint64_t v20 = sub_10019FEE0();
      uint64_t v21 = qword_100320B88;
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      id v22 = v56;
      id v23 = v19;
      uint64_t v52 = v18;
      swift_retain_n();
      swift_retain_n();
      id v50 = v23;
      id v51 = v22;
      if (v21 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100007288(v24, (uint64_t)qword_10033E748);
      swift_bridgeObjectRetain_n();
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        v59[0] = v48;
        uint64_t v49 = v20;
        *(_DWORD *)uint64_t v27 = 136315138;
        v47[1] = v27 + 4;
        swift_bridgeObjectRetain();
        uint64_t v28 = Array.description.getter();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        uint64_t v58 = sub_100135190(v28, v30, v59);
        uint64_t v20 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "RepairCustodians: 1/2 Repairing custodians %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v39 = v54;
      uint64_t v40 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v9, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__keyRepair, v54);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v39);
      uint64_t v41 = *sub_100008EF8(v59, v59[3]);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v42 = v57;
      swift_retain();
      uint64_t v43 = v52;
      swift_retain();
      id v44 = v50;
      swift_retain();
      id v45 = v51;
      uint64_t v46 = swift_bridgeObjectRetain();
      sub_100040BFC(v46, v53, v17, v41, a1, v20, v20, a2, v53, v17, v56, v44, v43, (uint64_t)sub_10009F7CC, v42);
      swift_release_n();
      swift_release_n();
      swift_bridgeObjectRelease_n();

      swift_release_n();
      swift_release_n();
      sub_100008EA8((uint64_t)v59);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      sub_100007288(v35, (uint64_t)qword_10033E748);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "RepairCustodians: Nothing to repair", v38, 2u);
        swift_slowDealloc();
      }

      a3[2](a3, 0);
      swift_release();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100007288(v31, (uint64_t)qword_10033E748);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RepairCustodians: Client is missing management entitlement, rejecting request to repairCustodians", v34, 2u);
      swift_slowDealloc();
    }

    a3[2](a3, 0);
    swift_release();
  }
}

void sub_10009E230(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04(&qword_100322CF0);
  Class isa = v4[-1].isa;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v9 = a1;
    Class v10 = Bool._bridgeToObjectiveC()().super.super.isa;
    [v9 setObject:v10 forKeyedSubscript:kAAFDidSucceed];

    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E790);
    id v12 = v9;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_t v26 = v4;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412290;
      uint64_t v25 = v2;
      id v27 = v12;
      id v16 = v12;
      uint64_t v24 = v8;
      id v17 = v16;
      uint64_t v2 = v25;
      uint64_t v4 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v23 = a1;

      uint64_t v8 = v24;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Reporting Repair CFU Action End Event %@", v15, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v8, v2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter, v4);
    Dependency.wrappedValue.getter();
    (*((void (**)(char *, NSObject *))isa + 1))(v8, v4);
    [v27 sendEvent:v12];

    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100320BA0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E790);
    os_log_t v26 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v19, "Event creation failed. Not reporting Repair Event.", v20, 2u);
      swift_slowDealloc();
    }
    os_log_t v21 = v26;
  }
}

void sub_10009E608(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003245D0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  _Block_copy(a2);
  if (sub_1000888AC())
  {
    id v10 = [*(id *)(*sub_100008EF8((void *)(a1 + 264), *(void *)(a1 + 288)) + 16) aa_primaryAppleAccount];

    if (v10)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__preflightScheduler, v4);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v11 = v24;
      uint64_t v12 = v25;
      sub_100008EF8(v23, v24);
      (*(void (**)(void (*)(uint64_t), uint64_t, uint64_t))(*(void *)(v12 + 8) + 16))(sub_10009EA5C, v9, v11);
      sub_100008EA8((uint64_t)v23);
      swift_release();
    }
    else
    {
      if (qword_100320B88 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100007288(v17, (uint64_t)qword_10033E748);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not logged in to AppleAccount, unable to fetch", v20, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for AACustodianError(0);
      uint64_t v26 = -7002;
      sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
      sub_100006FBC((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_t v21 = (void *)v23[0];
      uint64_t v22 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void *))a2)[2](a2, v22);
      swift_release();
    }
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100007288(v13, (uint64_t)qword_10033E748);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "PreflightCustodianRecovery: Client is missing management entitlement, rejecting request to preflight", v16, 2u);
      swift_slowDealloc();
    }

    a2[2](a2, 0);
    swift_release();
  }
}

uint64_t sub_10009EA24()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10009EA5C(uint64_t a1)
{
  sub_10025EDB0(a1, *(void *)(v1 + 16));
}

uint64_t sub_10009EA64()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009EA9C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10009EB04()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10009EB64(uint64_t a1)
{
  return sub_100096D14(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(uint64_t (**)(void))(v1 + 56));
}

void sub_10009EB78(uint64_t a1, uint64_t a2)
{
  sub_100092A78(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10009EB80(uint64_t a1, char a2)
{
  return sub_100096574(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10009EB8C(uint64_t a1)
{
  return sub_100095584(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10009EB94()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10009EBBC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009EC04(uint64_t a1)
{
  return sub_1000997C0(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_10009EC10()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009EC58()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100025248;
  uint64_t v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100324610 + dword_100324610);
  return v6(v2, v3, v4);
}

uint64_t sub_10009ED10()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100054724;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10032A208 + dword_10032A208);
  return v6(v2, v3, v4);
}

uint64_t sub_10009EDD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100054724;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10032A210 + dword_10032A210);
  return v8(a1, v4, v5, v6);
}

void sub_10009EEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10008F3A8(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_10009EEA8(objc_class *a1, uint64_t a2)
{
  sub_1000C5300(a1, a2, *(void *)(v2 + 16));
}

void sub_10009EEB0(objc_class *a1, uint64_t a2)
{
  sub_1000C52EC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10009EEB8(uint64_t a1, char a2)
{
  return sub_10008E208(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_10009EED8(uint64_t a1, uint64_t a2)
{
  sub_100092A78(a1, a2, *(void *)(v2 + 16));
}

void sub_10009EEF4(objc_class *a1, uint64_t a2)
{
  sub_100005864(a1, a2, *(void *)(v2 + 16), &qword_100324630);
}

uint64_t sub_10009EF20(uint64_t a1, uint64_t a2)
{
  return sub_10008D4E0(a1, a2, *(uint64_t (**)(void, uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10009EF28(uint64_t a1, char a2)
{
  return sub_10008E090(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10009EF34()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10009EF7C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100054724;
  return sub_1001EBC14(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10009F044()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009F084()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100054724;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100324648 + dword_100324648);
  return v5(v2, v3);
}

uint64_t sub_10009F13C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009F17C(uint64_t a1)
{
  return sub_10008CB8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10009F188()
{
  swift_release();
  sub_100008EA8(v0 + 24);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10009F1E8(void *a1)
{
  return sub_10008BA18(a1, *(void *)(v1 + 16), (void *)(v1 + 24), *(void **)(v1 + 64), *(void **)(v1 + 72), *(void *)(v1 + 80), *(uint64_t (**)(void *))(v1 + 88));
}

uint64_t sub_10009F200()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10009F2C0(uint64_t a1)
{
  return sub_10009F4F0(a1, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10008BB04);
}

uint64_t sub_10009F2EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009F354()
{
  uint64_t v1 = *(void *)(type metadata accessor for CustodianStatusUpdateRequest() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10009F45C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009F4C4(uint64_t a1)
{
  return sub_10009F4F0(a1, (uint64_t (*)(void))type metadata accessor for CustodianStatusUpdateRequest, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10025BF88);
}

uint64_t sub_10009F4F0(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *(void *)(v3 + v7);
  uint64_t v10 = (uint64_t *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return a3(a1, v8, v9, v11, v12);
}

uint64_t sub_10009F5B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009F614()
{
  sub_100008EA8(v0 + 16);
  swift_errorRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10009F654(uint64_t a1, char a2)
{
  sub_10008C600(a1, a2 & 1, (void *)(v2 + 16), *(void *)(v2 + 56));
}

void sub_10009F664(uint64_t a1, uint64_t a2)
{
  sub_100088FF4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10009F66C()
{
  swift_release();
  sub_100008EA8(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10009F6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v2[8];
  unint64_t v7 = sub_100008EF8(v2 + 3, v2[6]);
  sub_10009957C(*v7, a2, v5);
  return v6(a1, a2);
}

uint64_t sub_10009F720()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009F768(uint64_t a1, uint64_t a2)
{
  return sub_100088B18(a1, a2, *(void **)(v2 + 16), *(void (**)(char *, void *))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10009F774()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009F7B4(uint64_t a1, char a2)
{
  return sub_100089148(a1, a2 & 1, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24), *(void *)(v2 + 32));
}

NSString sub_10009F880()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100324690 = (uint64_t)result;
  return result;
}

NSString sub_10009F8B8()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100324698 = (uint64_t)result;
  return result;
}

NSString sub_10009F8F0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1003246A0 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for WalrusPCSSignatureValidator()
{
  return self;
}

SecKeyRef sub_10009F94C()
{
  if (qword_100320BF8 != -1) {
    swift_once();
  }
  if (qword_100320BF0 != -1) {
    swift_once();
  }
  if (qword_100320BE8 != -1) {
    swift_once();
  }
  ApplePinned = SecPolicyCreateApplePinned();
  SecTrustRef trust = 0;
  type metadata accessor for SecCertificate(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  OSStatus v2 = SecTrustCreateWithCertificates(isa, ApplePinned, &trust);

  if (v2 || !trust)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100007288(v7, (uint64_t)qword_10033E700);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 67109120;
      LODWORD(error) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error creating SecTrust from certificates, unable to generate public signing key: %d", v10, 8u);
      swift_slowDealloc();
      uint64_t v11 = ApplePinned;
    }
    else
    {
      uint64_t v11 = v8;
      uint64_t v8 = ApplePinned;
    }

    goto LABEL_31;
  }
  CFErrorRef error = 0;
  uint64_t v3 = trust;
  BOOL v4 = SecTrustEvaluateWithError(v3, &error);
  CFErrorRef v5 = error;
  if (!v4)
  {
    if (error)
    {
      type metadata accessor for CFError(0);
      sub_1000A0428();
      swift_allocError();
      *uint64_t v12 = v5;
      uint64_t v13 = qword_100320B70;
      os_log_type_t v14 = v5;
      if (v13 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100007288(v15, (uint64_t)qword_10033E700);
      swift_errorRetain();
      swift_errorRetain();
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v19 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 138412290;
        uint64_t v26 = _convertErrorToNSError(_:)();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *os_log_type_t v19 = v26;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error evaluating certificate trust, unable to generate public signing key: %@", v18, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        os_log_type_t v14 = (__CFError *)v16;
      }
    }
    else
    {
      if (qword_100320B70 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100007288(v20, (uint64_t)qword_10033E700);
      os_log_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        id v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Certificates are not trusted, unable to generate public signing key.", v23, 2u);
        swift_slowDealloc();
        uint64_t v24 = ApplePinned;
      }
      else
      {
        uint64_t v24 = v21;
        os_log_t v21 = v3;
        uint64_t v3 = (__SecTrust *)ApplePinned;
      }
    }
LABEL_31:

    return 0;
  }
  SecKeyRef v6 = SecTrustCopyKey(v3);

  return v6;
}

BOOL sub_10009FEA4(__SecKey *a1)
{
  CFErrorRef error = 0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CFDataRef v3 = Data._bridgeToObjectiveC()().super.isa;
  int v4 = SecKeyVerifySignature(a1, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, isa, v3, &error);

  CFErrorRef v5 = error;
  if (!error) {
    return v4 != 0;
  }
  type metadata accessor for CFError(0);
  sub_1000A0428();
  swift_allocError();
  *SecKeyRef v6 = v5;
  uint64_t v7 = qword_100320B70;
  uint64_t v8 = v5;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E700);
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138412290;
    uint64_t v15 = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v15;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error validating signature: %@", v12, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

BOOL sub_1000A0128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    CFErrorRef v5 = (unint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v7 = *(v5 - 1);
      unint64_t v6 = *v5;
      sub_100013140(v7, *v5);
      CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
      SecCertificateRef v9 = SecCertificateCreateWithData(0, isa);

      if (!v9) {
        break;
      }
      uint64_t v10 = v9;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v5 += 2;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100013198(v7, v6);

      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100007288(v11, (uint64_t)qword_10033E700);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to create certificate from data.", v14, 2u);
      swift_slowDealloc();
    }
    sub_100013198(v7, v6);
    goto LABEL_19;
  }
LABEL_13:
  uint64_t v12 = sub_10009F94C();
  swift_bridgeObjectRelease();
  if (!v12)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E700);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v17, "Unable to extract public signing key from certificate chain.", v18, 2u);
      swift_slowDealloc();
    }
LABEL_19:
    BOOL v15 = 0;
    goto LABEL_20;
  }
  BOOL v15 = sub_10009FEA4((__SecKey *)v12);
LABEL_20:

  return v15;
}

unint64_t sub_1000A0428()
{
  unint64_t result = qword_100324748;
  if (!qword_100324748)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324748);
  }
  return result;
}

uint64_t sub_1000A0480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    goto LABEL_22;
  }
  unint64_t v4 = sub_1001358B8(0x656C746974, 0xE500000000000000);
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if (*(void *)(a1 + 16)) {
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v13 = 0;
    uint64_t v12 = 0;
LABEL_23:
    long long v20 = 0u;
    long long v21 = 0u;
    goto LABEL_24;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v20);
  int v6 = swift_dynamicCast();
  if (v6) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_22;
  }
LABEL_13:
  unint64_t v9 = sub_1001358B8(2036625250, 0xE400000000000000);
  if (v10)
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v9, (uint64_t)&v20);
    int v11 = swift_dynamicCast();
    if (v11) {
      uint64_t v12 = v18;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11) {
      uint64_t v13 = v19;
    }
    else {
      uint64_t v13 = 0;
    }
    if (!*(void *)(a1 + 16)) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (!*(void *)(a1 + 16)) {
      goto LABEL_23;
    }
  }
  unint64_t v16 = sub_1001358B8(0x746E656C6973, 0xE600000000000000);
  if ((v17 & 1) == 0) {
    goto LABEL_23;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v20);
LABEL_24:
  swift_bridgeObjectRelease();
  if (!*((void *)&v21 + 1))
  {
    uint64_t result = sub_100058764((uint64_t)&v20);
    goto LABEL_28;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_28:
    BOOL v15 = 1;
    goto LABEL_29;
  }
  BOOL v15 = v18 != 0;
LABEL_29:
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v15;
  return result;
}

uint64_t destroy for PushMessageAlert()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushMessageAlert(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PushMessageAlert(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushMessageAlert()
{
  return &type metadata for PushMessageAlert;
}

uint64_t sub_1000A087C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_1000086C4((uint64_t)v12, (uint64_t)v13);
  if (v13[3])
  {
    if (swift_dynamicCast() & 1) != 0 && (v11) {
      return 1;
    }
  }
  else
  {
    sub_100058764((uint64_t)v13);
  }
  if (qword_100320BB0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E7C0);
  swift_retain_n();
  int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v13[0] = v1;
    id v10 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v1;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client is missing user notifications entitlement: %@", v8, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return 0;
}

void sub_1000A0AE0(void *a1, void (*a2)(void), NSObject *a3)
{
  uint64_t v7 = sub_100009F04(&qword_100322CE0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000A087C())
  {
    id v12 = [a1 title];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v13;

    id v14 = [a1 message];
    os_log_t v31 = a3;
    id v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    id v19 = [a1 action];
    if (v19) {
      unint64_t v20 = 0xD000000000000018;
    }
    else {
      unint64_t v20 = 0xD00000000000002BLL;
    }
    uint64_t v28 = a2;
    if (v19) {
      unint64_t v21 = 0x800000010029B9A0;
    }
    else {
      unint64_t v21 = 0x800000010029BA00;
    }
    sub_100009F04((uint64_t *)&unk_10032B140);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9F00;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x800000010029B9C0;
    *(void *)(inited + 48) = 0xD00000000000002BLL;
    *(void *)(inited + 56) = 0x800000010029B970;
    *(void *)(inited + 64) = 0xD000000000000010;
    *(void *)(inited + 72) = 0x800000010029B9E0;
    *(void *)(inited + 80) = v20;
    *(void *)(inited + 88) = v21;
    unint64_t v23 = sub_100220A6C(inited);
    *(void *)&long long v33 = v30;
    *((void *)&v33 + 1) = v29;
    uint64_t v34 = v16;
    uint64_t v35 = v18;
    unint64_t v36 = v23;
    char v37 = 3;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + OBJC_IVAR____TtC13appleaccountd36AccountUserNotificationDaemonService__notificationManager, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_100008EF8(v32, v32[3]);
    sub_10024F5C4(&v33, v28, (uint64_t)v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)v32);
  }
  else
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E748);
    os_log_t v31 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v25, "Client is missing user notifications entitlement, rejecting request to trigger user notification.", v26, 2u);
      swift_slowDealloc();
    }
    os_log_t v27 = v31;
  }
}

uint64_t sub_1000A0F2C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd36AccountUserNotificationDaemonService__notificationManager;
  uint64_t v2 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A0FD8()
{
  return type metadata accessor for AccountUserNotificationDaemonService();
}

uint64_t type metadata accessor for AccountUserNotificationDaemonService()
{
  uint64_t result = qword_1003247E0;
  if (!qword_1003247E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A102C()
{
  sub_1000A10CC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A10CC()
{
  if (!qword_100322C50)
  {
    sub_1000112CC((uint64_t *)&unk_10032ACA0);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100322C50);
    }
  }
}

uint64_t sub_1000A1128()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A1160()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CAEvent()
{
  return self;
}

uint64_t sub_1000A11CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v3 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v94 = *(void *)(v3 - 8);
  uint64_t v95 = v3;
  __chkstk_darwin(v3, v4);
  unint64_t v96 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v7 = *((void *)v6 - 1);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = 1684632420;
  *((void *)v10 + 1) = 0xE400000000000000;
  *((void *)v10 + 2) = 0xD000000000000011;
  *((void *)v10 + 3) = 0x800000010029BAD0;
  *((void *)v10 + 4) = 0x6D617473656D6974;
  *((void *)v10 + 5) = 0xE900000000000070;
  *((void *)v10 + 6) = 0x727574616E676973;
  *((void *)v10 + 7) = 0xE900000000000065;
  *((void *)v10 + 8) = 0xD000000000000010;
  *((void *)v10 + 9) = 0x800000010029BAF0;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_17;
  }
  unint64_t v11 = sub_1001358B8(1684632420, 0xE400000000000000);
  if ((v12 & 1) == 0) {
    goto LABEL_17;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v101);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_16;
  }
  uint64_t v93 = v99;
  uint64_t v13 = v100;
  unint64_t v14 = sub_1001358B8(0xD000000000000011, 0x800000010029BAD0);
  if ((v15 & 1) == 0) {
    goto LABEL_16;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v101);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v16 = v100;
  if (!*(void *)(a1 + 16)
    || (v92 = v99, unint64_t v17 = sub_1001358B8(0x6D617473656D6974, 0xE900000000000070), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v101);
  uint64_t v19 = swift_dynamicCast();
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E700);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to create encryption material.", v30, 2u);
      swift_slowDealloc();
    }

    int v31 = 0;
    int v32 = 0;
    goto LABEL_22;
  }
  uint64_t v91 = (uint64_t *)&v86;
  uint64_t v21 = v100;
  uint64_t v99 = 0;
  uint64_t v22 = __chkstk_darwin(v19, v20);
  *(&v86 - 2) = (unint64_t)&v99;
  unint64_t v90 = v24;
  if ((v21 & 0x1000000000000000) != 0 || !(v21 & 0x2000000000000000 | v24 & 0x1000000000000000))
  {
    uint64_t v89 = (uint64_t *)(&v86 - 4);
    swift_bridgeObjectRetain();
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    __chkstk_darwin(v22, v23);
    *(&v86 - 2) = (unint64_t)sub_1000A3B20;
    *(&v86 - 1) = v26;
    if ((v21 & 0x2000000000000000) != 0)
    {
      uint64_t v89 = (uint64_t *)&v86;
      *(void *)&long long v101 = v25;
      *((void *)&v101 + 1) = v21 & 0xFFFFFFFFFFFFFFLL;
      switch((char)v25)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
          swift_bridgeObjectRetain();
          BOOL v35 = 0;
          break;
        default:
          swift_bridgeObjectRetain();
          id v50 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (v50) {
            BOOL v35 = *v50 == 0;
          }
          else {
            BOOL v35 = 0;
          }
          break;
      }
      char v98 = v35;
      swift_bridgeObjectRelease();
    }
    else
    {
      id v88 = (uint64_t *)(&v86 - 4);
      uint64_t v89 = (uint64_t *)v16;
      if ((v25 & 0x1000000000000000) != 0)
      {
        uint64_t v87 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
        unint64_t v86 = v25 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v87 = _StringObject.sharedUTF8.getter();
        unint64_t v86 = v84;
      }
      swift_bridgeObjectRetain();
      char v98 = sub_1000A36AC(v87, v86, (void (*)(uint64_t *__return_ptr))sub_1000A3C4C) & 1;
      swift_bridgeObjectRelease();
      uint64_t v16 = (uint64_t)v89;
    }
  }
  unint64_t v36 = v92;
  if ((v98 & 1) == 0 || (uint64_t v37 = v99, v38 = Data.init(base64Encoded:options:)(), v39 >> 60 == 15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  *((void *)v10 + 10) = v93;
  *((void *)v10 + 11) = v13;
  *((void *)v10 + 12) = v38;
  *((void *)v10 + 13) = v39;
  uint64_t v40 = (unint64_t *)&v10[v6[16]];
  *uint64_t v40 = v36;
  v40[1] = v16;
  *((void *)v10 + 14) = v90;
  *((void *)v10 + 15) = v21;
  *((void *)v10 + 16) = v37;
  uint64_t v41 = *(void *)(a1 + 16);
  unint64_t v92 = v39;
  uint64_t v93 = v38;
  sub_100013140(v38, v39);
  if (!v41) {
    goto LABEL_44;
  }
  unint64_t v42 = sub_1001358B8(0x727574616E676973, 0xE900000000000065);
  if ((v43 & 1) == 0) {
    goto LABEL_44;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v42, (uint64_t)&v101);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_44;
  }
  if (*(void *)(a1 + 16) && (unint64_t v44 = sub_1001358B8(0xD000000000000010, 0x800000010029BAF0), (v45 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v44, (uint64_t)&v101);
  }
  else
  {
    long long v101 = 0u;
    long long v102 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v102 + 1))
  {
    swift_bridgeObjectRelease();
    sub_100006574((uint64_t)&v101, &qword_100328490);
    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) == 0
    || (uint64_t v51 = v99,
        uint64_t v52 = v100,
        uint64_t v89 = (uint64_t *)Data.init(base64Encoded:options:)(),
        unint64_t v54 = v53,
        swift_bridgeObjectRelease(),
        unint64_t v90 = v54,
        v54 >> 60 == 15))
  {
LABEL_44:
    swift_bridgeObjectRelease();
LABEL_45:
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100007288(v46, (uint64_t)qword_10033E700);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unable to create signing material.", v49, 2u);
      swift_slowDealloc();

      sub_1000196A0(v93, v92);
    }
    else
    {
      sub_1000196A0(v93, v92);
    }
    int v31 = 0;
    int v32 = 1;
    goto LABEL_22;
  }
  uint64_t v55 = (uint64_t **)&v10[v6[14]];
  uint64_t v56 = (uint64_t)v89;
  unint64_t v57 = v90;
  *uint64_t v55 = v89;
  v55[1] = (uint64_t *)v57;
  *(void *)&long long v101 = v51;
  *((void *)&v101 + 1) = v52;
  sub_100013140(v56, v57);
  sub_100080C64();
  uint64_t v58 = (uint64_t *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
  swift_bridgeObjectRelease();
  id v88 = v58;
  if (v58[2])
  {
    int64_t v59 = v58[2];
    *(void *)&long long v101 = _swiftEmptyArrayStorage;
    sub_100228924(0, v59, 0);
    uint64_t v60 = (void *)v101;
    uint64_t v61 = v88 + 7;
    do
    {
      uint64_t v91 = (uint64_t *)*(v61 - 2);
      swift_bridgeObjectRetain();
      uint64_t v62 = static String._fromSubstring(_:)();
      uint64_t v91 = (uint64_t *)v63;
      swift_bridgeObjectRelease();
      *(void *)&long long v101 = v60;
      unint64_t v65 = v60[2];
      unint64_t v64 = v60[3];
      if (v65 >= v64 >> 1)
      {
        uint64_t v87 = v62;
        sub_100228924(v64 > 1, v65 + 1, 1);
        uint64_t v62 = v87;
        uint64_t v60 = (void *)v101;
      }
      v60[2] = v65 + 1;
      uint64_t v66 = &v60[2 * v65];
      unint64_t v67 = (unint64_t)v91;
      v66[4] = v62;
      v66[5] = v67;
      v61 += 4;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v60 = _swiftEmptyArrayStorage;
  }
  if (v60[2] == 3)
  {
    swift_bridgeObjectRetain();
    uint64_t v68 = Data.init(base64Encoded:options:)();
    unint64_t v70 = v69;
    swift_bridgeObjectRelease();
    if (v70 >> 60 != 15)
    {
      if (v60[2] < 2uLL)
      {
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRetain();
        id v88 = (uint64_t *)Data.init(base64Encoded:options:)();
        unint64_t v76 = v75;
        swift_bridgeObjectRelease();
        uint64_t v91 = (uint64_t *)v76;
        if (v76 >> 60 == 15)
        {
          swift_bridgeObjectRelease();
LABEL_83:
          sub_1000196A0(v68, v70);
          goto LABEL_71;
        }
        if (v60[2] >= 3uLL)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v87 = Data.init(base64Encoded:options:)();
          unint64_t v78 = v77;
          swift_bridgeObjectRelease();
          unint64_t v86 = v78;
          if (v78 >> 60 != 15)
          {
            sub_100009F04(&qword_100324988);
            uint64_t v79 = swift_allocObject();
            *(_OWORD *)(v79 + 16) = xmmword_1002ABAF0;
            *(void *)(v79 + 32) = v68;
            *(void *)(v79 + 40) = v70;
            uint64_t v80 = v88;
            unint64_t v81 = (unint64_t)v91;
            *(void *)(v79 + 48) = v88;
            *(void *)(v79 + 56) = v81;
            uint64_t v82 = v87;
            unint64_t v83 = v86;
            *(void *)(v79 + 64) = v87;
            *(void *)(v79 + 72) = v83;
            *(void *)&v10[v6[15]] = v79;
            *(void *)&long long v101 = v93;
            *((void *)&v101 + 1) = v92;
            sub_1000196B4(v68, v70);
            sub_1000196B4((uint64_t)v80, v81);
            sub_1000196B4(v82, v83);
            sub_1000A3B90();
            P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)();
            sub_1000196A0((uint64_t)v89, v90);
            sub_1000196A0(v68, v70);
            sub_1000196A0((uint64_t)v88, (unint64_t)v91);
            sub_1000196A0(v87, v86);
            (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v10[v6[13]], v96, v95);
            uint64_t v85 = v97;
            sub_1000A3BE4((uint64_t)v10, v97, type metadata accessor for WalrusPCSEncryptionMaterial);
            (*(void (**)(uint64_t, void, uint64_t, int *))(v7 + 56))(v85, 0, 1, v6);
            return sub_1000A3AC0((uint64_t)v10, type metadata accessor for WalrusPCSEncryptionMaterial);
          }
          sub_1000196A0((uint64_t)v88, (unint64_t)v91);
          goto LABEL_83;
        }
      }
      __break(1u);
      JUMPOUT(0x1000A1FC8);
    }
  }
  swift_bridgeObjectRelease();
LABEL_71:
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  sub_100007288(v71, (uint64_t)qword_10033E700);
  os_log_type_t v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v72, v73))
  {
    unint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to create certificate chain data.", v74, 2u);
    swift_slowDealloc();

    sub_1000196A0((uint64_t)v89, v90);
    sub_1000196A0(v93, v92);
  }
  else
  {
    sub_1000196A0(v93, v92);
    sub_1000196A0((uint64_t)v89, v90);
  }
  int v31 = 1;
  int v32 = 1;
LABEL_22:
  uint64_t v33 = v97;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v32)
  {
    swift_bridgeObjectRelease();
    sub_100013198(*((void *)v10 + 12), *((void *)v10 + 13));
    swift_bridgeObjectRelease();
    if (!v31) {
      goto LABEL_24;
    }
LABEL_28:
    sub_100013198(*(void *)&v10[v6[14]], *(void *)&v10[v6[14] + 8]);
    goto LABEL_24;
  }
  if (v31) {
    goto LABEL_28;
  }
LABEL_24:
  if (v32) {
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v7 + 56))(v33, 1, 1, v6);
}

uint64_t sub_1000A204C()
{
  uint64_t v49 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v2);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = 8827;
  unint64_t v51 = 0xE200000000000000;
  uint64_t v5 = *v0;
  int v6 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 2243106;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v0[10];
  uint64_t v10 = (void *)v0[11];
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 34;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  uint64_t v13 = v50;
  unint64_t v14 = v51;
  uint64_t v50 = 8748;
  unint64_t v51 = 0xE200000000000000;
  uint64_t v15 = v0[2];
  uint64_t v16 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 2243106;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  uint64_t v19 = (uint64_t *)((char *)v0 + *(int *)(type metadata accessor for WalrusPCSEncryptionMaterial(0) + 64));
  uint64_t v20 = *v19;
  uint64_t v21 = (void *)v19[1];
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 34;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  uint64_t v24 = v50;
  uint64_t v25 = (void *)v51;
  uint64_t v50 = v13;
  unint64_t v51 = v14;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v50;
  unint64_t v28 = v51;
  uint64_t v50 = 8748;
  unint64_t v51 = 0xE200000000000000;
  uint64_t v29 = v0[4];
  uint64_t v30 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 2243106;
  v32._object = (void *)0xE300000000000000;
  String.append(_:)(v32);
  uint64_t v34 = v0[14];
  uint64_t v33 = (void *)v0[15];
  swift_bridgeObjectRetain();
  v35._countAndFlagsBits = v34;
  v35._object = v33;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 32034;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  uint64_t v37 = v50;
  uint64_t v38 = (void *)v51;
  uint64_t v50 = v27;
  unint64_t v51 = v28;
  swift_bridgeObjectRetain();
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v40 = String.data(using:allowLossyConversion:)();
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v49);
  if (v42 >> 60 == 15)
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100007288(v43, (uint64_t)qword_10033E700);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to create signed JSON data.", v46, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v40;
}

Swift::Int sub_1000A23C4()
{
  Swift::Int result = sub_10019A140((uint64_t)&off_1002F4070);
  qword_100324970 = result;
  return result;
}

uint64_t sub_1000A23EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v3 = sub_100009F04(&qword_100324978);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v62 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v60 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v61 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for WalrusWebAccessInfo(0);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v9);
  Swift::String v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy(v11, "webSessionID");
  v11[13] = 0;
  *((_WORD *)v11 + 7) = -5120;
  *((void *)v11 + 2) = 0xD000000000000015;
  *((void *)v11 + 3) = 0x800000010029BA90;
  *((void *)v11 + 4) = 0x656D614E707061;
  *((void *)v11 + 5) = 0xE700000000000000;
  *((void *)v11 + 6) = 0x65746E6F43707061;
  *((void *)v11 + 7) = 0xEA00000000007478;
  *((void *)v11 + 8) = 0x6E49726576726573;
  *((void *)v11 + 9) = 0xEA00000000006F66;
  *((void *)v11 + 10) = 0xD000000000000012;
  *((void *)v11 + 11) = 0x800000010029BAB0;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_26;
  }
  unint64_t v12 = sub_1001358B8(0x6973736553626577, 0xEC00000044496E6FLL);
  if ((v13 & 1) == 0) {
    goto LABEL_26;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v69);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v14 = *((void *)&v67[0] + 1);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)&v67[0];
  unint64_t v16 = sub_1001358B8(0xD000000000000015, 0x800000010029BA90);
  if ((v17 & 1) == 0) {
    goto LABEL_25;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v69);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v18 = *((void *)&v67[0] + 1);
  if (!*(void *)(a1 + 16)
    || (uint64_t v19 = *(void *)&v67[0], v20 = sub_1001358B8(0x656D614E707061, 0xE700000000000000), (v21 & 1) == 0)
    || (sub_100047DD4(*(void *)(a1 + 56) + 32 * v20, (uint64_t)&v69), (swift_dynamicCast() & 1) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100007288(v29, (uint64_t)qword_10033E700);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      Swift::String v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to create web access info.", v32, 2u);
      swift_slowDealloc();
    }

LABEL_32:
    uint64_t v33 = v65;
    uint64_t v34 = v64;
    uint64_t v35 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v33, 1, 1, v34);
  }
  uint64_t v59 = *((void *)&v67[0] + 1);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_23;
  }
  uint64_t v58 = *(void *)&v67[0];
  unint64_t v22 = sub_1001358B8(0x65746E6F43707061, 0xEA00000000007478);
  if ((v23 & 1) == 0) {
    goto LABEL_23;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v69);
  sub_100009F04(&qword_100322B20);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v24 = *(void *)&v67[0];
  if (!*(void *)(a1 + 16) || (unint64_t v25 = sub_1001358B8(0x6E49726576726573, 0xEA00000000006F66), (v26 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  sub_100047DD4(*(void *)(a1 + 56) + 32 * v25, (uint64_t)&v69);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v57 = v24;
  uint64_t v54 = v19;
  uint64_t v55 = v15;
  uint64_t v56 = *((void *)&v67[0] + 1);
  uint64_t v53 = *(void *)&v67[0];
  if (*(void *)(a1 + 16) && (unint64_t v27 = sub_1001358B8(0xD000000000000012, 0x800000010029BAB0), (v28 & 1) != 0))
  {
    sub_100047DD4(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v69);
  }
  else
  {
    long long v69 = 0u;
    long long v70 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v70 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006574((uint64_t)&v69, &qword_100328490);
    goto LABEL_27;
  }
  sub_100009F04((uint64_t *)&unk_10032DBD0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v37 = v62;
  sub_1000A11CC(*(uint64_t *)&v67[0], v62);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v37, 1, v6) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100006574(v62, &qword_100324978);
    goto LABEL_27;
  }
  sub_1000A39F4(v62, v61);
  uint64_t v38 = *(void *)(v57 + 16);
  if (v38)
  {
    uint64_t v39 = 0;
    uint64_t v40 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v41 = swift_bridgeObjectRetain();
      sub_1000A370C(v41, (uint64_t)v66);
      sub_1000A3A58((uint64_t)v66, (uint64_t)v67);
      if (!*((void *)&v67[0] + 1)) {
        break;
      }
      long long v71 = v67[2];
      long long v72 = v67[3];
      uint64_t v73 = v68;
      long long v69 = v67[0];
      long long v70 = v67[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v40 = sub_100168A40(0, v40[2] + 1, 1, v40);
      }
      unint64_t v43 = v40[2];
      unint64_t v42 = v40[3];
      if (v43 >= v42 >> 1) {
        uint64_t v40 = sub_100168A40((void *)(v42 > 1), v43 + 1, 1, v40);
      }
      ++v39;
      v40[2] = v43 + 1;
      unint64_t v44 = &v40[9 * v43];
      *((_OWORD *)v44 + 2) = v69;
      long long v45 = v70;
      long long v46 = v71;
      long long v47 = v72;
      v44[12] = v73;
      *((_OWORD *)v44 + 4) = v46;
      *((_OWORD *)v44 + 5) = v47;
      *((_OWORD *)v44 + 3) = v45;
      if (v38 == v39) {
        goto LABEL_50;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A3AC0(v61, type metadata accessor for WalrusPCSEncryptionMaterial);
    goto LABEL_32;
  }
  uint64_t v40 = _swiftEmptyArrayStorage;
LABEL_50:
  swift_bridgeObjectRelease();
  *((void *)v11 + 12) = v55;
  *((void *)v11 + 13) = v14;
  *((void *)v11 + 14) = v54;
  *((void *)v11 + 15) = v18;
  uint64_t v48 = v59;
  *((void *)v11 + 16) = v58;
  *((void *)v11 + 17) = v48;
  uint64_t v49 = v53;
  *((void *)v11 + 18) = v40;
  *((void *)v11 + 19) = v49;
  *((void *)v11 + 20) = v56;
  uint64_t v50 = v64;
  sub_1000A39F4(v61, (uint64_t)&v11[*(int *)(v64 + 60)]);
  uint64_t v51 = v65;
  sub_1000A3BE4((uint64_t)v11, v65, type metadata accessor for WalrusWebAccessInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v51, 0, 1, v50);
  return sub_1000A3AC0((uint64_t)v11, type metadata accessor for WalrusWebAccessInfo);
}

uint64_t sub_1000A2DA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WalrusWebAccessInfo(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v14 = *(void *)(v0 + 144);
  int64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v53 = v5;
    uint64_t v54 = v12;
    uint64_t v55 = v13;
    uint64_t v56 = (char *)&v51 - v11;
    uint64_t v52 = v10;
    uint64_t v58 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_100228A54(0, v15, 0);
    uint64_t v16 = 80;
    char v17 = v58;
    do
    {
      uint64_t v18 = qword_1002ABBD0[*(char *)(v14 + v16)];
      uint64_t v58 = v17;
      unint64_t v20 = v17[2];
      unint64_t v19 = v17[3];
      if (v20 >= v19 >> 1)
      {
        sub_100228A54(v19 > 1, v20 + 1, 1);
        char v17 = v58;
      }
      void v17[2] = v20 + 1;
      v17[v20 + 4] = v18;
      v16 += 72;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    uint64_t v21 = v17[2];
    if (v21)
    {
      Swift::UInt v22 = 0;
      char v23 = v17 + 4;
      do
      {
        uint64_t v25 = *v23++;
        uint64_t v24 = v25;
        if ((v25 & ~v22) == 0) {
          uint64_t v24 = 0;
        }
        v22 |= v24;
        --v21;
      }
      while (v21);
    }
    else
    {
      Swift::UInt v22 = 0;
    }
    swift_release();
    uint64_t v31 = v55;
    uint64_t v30 = v56;
    if (qword_100320C00 != -1) {
      swift_once();
    }
    if (sub_1000A3464(v22, qword_100324970))
    {
      Date.init()();
      Date.init(timeIntervalSince1970:)();
      Date.timeIntervalSince(_:)();
      if (v32 <= 300.0)
      {
        if (v32 > 0.0)
        {
          long long v45 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
          uint64_t v46 = v52;
          v45(v31, v52);
          v45((uint64_t)v30, v46);
          return 1;
        }
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_100007288(v48, (uint64_t)qword_10033E700);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v34, v35)) {
          goto LABEL_39;
        }
        Swift::String v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v36 = 0;
        uint64_t v37 = "WebAccessInfo is invalid, encryption material is invalid.";
      }
      else
      {
        if (qword_100320B70 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_100007288(v33, (uint64_t)qword_10033E700);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v34, v35)) {
          goto LABEL_39;
        }
        Swift::String v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v36 = 0;
        uint64_t v37 = "WebAccessInfo is invalid, encryption material has expired.";
      }
      _os_log_impl((void *)&_mh_execute_header, v34, v35, v37, v36, 2u);
      swift_slowDealloc();
LABEL_39:

      uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      uint64_t v50 = v52;
      v49(v31, v52);
      v49((uint64_t)v30, v50);
      return 0;
    }
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100007288(v38, (uint64_t)qword_10033E700);
    uint64_t v39 = (uint64_t)v53;
    sub_1000A3BE4(v1, (uint64_t)v53, type metadata accessor for WalrusWebAccessInfo);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v40))
    {
      sub_1000A3AC0(v39, type metadata accessor for WalrusWebAccessInfo);
      goto LABEL_33;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v42 = Array.description.getter();
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_100135190(v42, v44, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A3AC0(v39, type metadata accessor for WalrusWebAccessInfo);
    _os_log_impl((void *)&_mh_execute_header, v27, v40, "WebAccessInfo is invalid, unexpected combination of PCS keys: %s.", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
  }
  else
  {
    if (qword_100320B70 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100007288(v26, (uint64_t)qword_10033E700);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v28)) {
      goto LABEL_33;
    }
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "WebAccessInfo is invalid, no app identities provided.", v29, 2u);
  }
  swift_slowDealloc();
LABEL_33:

  return 0;
}

BOOL sub_1000A3464(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000A3554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for WalrusWebAccessInfo(uint64_t a1)
{
  return sub_10000698C(a1, qword_1003249F0);
}

uint64_t sub_1000A36AC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t sub_1000A370C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = sub_1001358B8(25705, 0xE200000000000000), (v5 & 1) != 0)
    && (sub_100047DD4(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v26), (swift_dynamicCast() & 1) != 0)
    && *(void *)(a1 + 16)
    && (unint64_t v6 = sub_1001358B8(1701667182, 0xE400000000000000), (v7 & 1) != 0)
    && (sub_100047DD4(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v26), (swift_dynamicCast() & 1) != 0)
    && (char v8 = sub_10024CF58(v24, v24, v25), swift_bridgeObjectRelease(), (v8 & 1) != 0)
    && (unsigned __int8 v9 = sub_10024CE74(v24), v9 != 10))
  {
    unsigned __int8 v21 = v9;
    if (*(void *)(a1 + 16) && (unint64_t v22 = sub_1001358B8(0x4E79616C70736964, 0xEB00000000656D61), (v23 & 1) != 0))
    {
      sub_100047DD4(*(void *)(a1 + 56) + 32 * v22, (uint64_t)&v26);
    }
    else
    {
      long long v26 = 0u;
      long long v27 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v27 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v16 = v24;
        unint64_t v17 = v25;
        uint64_t v15 = v21;
        long long v20 = xmmword_1002ABB00;
        long long v19 = xmmword_1002ABB10;
        long long v18 = xmmword_1002ABB20;
        goto LABEL_15;
      }
    }
    else
    {
      sub_100006574((uint64_t)&v26, &qword_100328490);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100007288(v10, (uint64_t)qword_10033E700);
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to create app identity.", v13, 2u);
    swift_slowDealloc();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  long long v18 = 0uLL;
  long long v19 = 0uLL;
  long long v20 = 0uLL;
LABEL_15:
  *(_OWORD *)a2 = v18;
  *(_OWORD *)(a2 + 16) = v19;
  *(_OWORD *)(a2 + 32) = v20;
  *(void *)(a2 + 48) = v15;
  *(void *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v17;
  return result;
}

uint64_t type metadata accessor for WalrusPCSEncryptionMaterial(uint64_t a1)
{
  return sub_10000698C(a1, qword_100324AA8);
}

uint64_t sub_1000A39F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3A58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100009F04(&qword_100324980);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A3AC0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *sub_1000A3B20@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_1000A3B90()
{
  unint64_t result = qword_100324990;
  if (!qword_100324990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324990);
  }
  return result;
}

uint64_t sub_1000A3BE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_1000A3C4C@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t destroy for WalrusAppIdentity()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WalrusAppIdentity(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WalrusAppIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WalrusAppIdentity()
{
  return &type metadata for WalrusAppIdentity;
}

uint64_t *sub_1000A3F40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v40 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v40 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    uint64_t v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    uint64_t v9 = a2[9];
    a1[8] = a2[8];
    a1[9] = v9;
    uint64_t v10 = a2[11];
    a1[10] = a2[10];
    a1[11] = v10;
    uint64_t v11 = a2[13];
    a1[12] = a2[12];
    a1[13] = v11;
    uint64_t v12 = a2[15];
    a1[14] = a2[14];
    a1[15] = v12;
    uint64_t v13 = a2[17];
    a1[16] = a2[16];
    a1[17] = v13;
    uint64_t v14 = a2[19];
    a1[18] = a2[18];
    a1[19] = v14;
    a1[20] = a2[20];
    uint64_t v15 = *(int *)(a3 + 60);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = *(uint64_t *)((char *)a2 + v15 + 8);
    *uint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    v16[1] = v18;
    uint64_t v19 = *(uint64_t *)((char *)a2 + v15 + 24);
    void v16[2] = *(uint64_t *)((char *)a2 + v15 + 16);
    v16[3] = v19;
    uint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 40);
    void v16[4] = *(uint64_t *)((char *)a2 + v15 + 32);
    v16[5] = v20;
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15 + 56);
    v16[6] = *(uint64_t *)((char *)a2 + v15 + 48);
    v16[7] = v21;
    uint64_t v22 = *(uint64_t *)((char *)a2 + v15 + 72);
    v16[8] = *(uint64_t *)((char *)a2 + v15 + 64);
    v16[9] = v22;
    uint64_t v23 = *(uint64_t *)((char *)a2 + v15 + 88);
    v16[10] = *(uint64_t *)((char *)a2 + v15 + 80);
    v16[11] = v23;
    unint64_t v42 = *(uint64_t *)((char *)a2 + v15 + 104);
    uint64_t v43 = *(uint64_t *)((char *)a2 + v15 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013140(v43, v42);
    v16[12] = v43;
    v16[13] = v42;
    uint64_t v24 = v17[15];
    v16[14] = v17[14];
    v16[15] = v24;
    v16[16] = v17[16];
    unint64_t v25 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v26 = v25[13];
    long long v27 = (char *)v16 + v26;
    os_log_type_t v28 = (char *)v17 + v26;
    uint64_t v29 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    swift_bridgeObjectRetain();
    v30(v27, v28, v29);
    uint64_t v31 = v25[14];
    double v32 = (void *)((char *)v16 + v31);
    uint64_t v33 = (void *)((char *)v17 + v31);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    sub_100013140(*v33, v35);
    *double v32 = v34;
    v32[1] = v35;
    *(void *)((char *)v16 + v25[15]) = *(void *)((char *)v17 + v25[15]);
    uint64_t v36 = v25[16];
    uint64_t v37 = (void *)((char *)v16 + v36);
    uint64_t v38 = (void *)((char *)v17 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000A41F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(v4 + 96), *(void *)(v4 + 104));
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v6 = v4 + *(int *)(v5 + 52);
  uint64_t v7 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_100013198(*(void *)(v4 + *(int *)(v5 + 56)), *(void *)(v4 + *(int *)(v5 + 56) + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000A4340(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  uint64_t v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  uint64_t v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  uint64_t v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  uint64_t v13 = a2[19];
  a1[18] = a2[18];
  a1[19] = v13;
  a1[20] = a2[20];
  uint64_t v14 = *(int *)(a3 + 60);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14 + 8);
  *uint64_t v15 = *(void *)((char *)a2 + v14);
  v15[1] = v17;
  uint64_t v18 = *(void *)((char *)a2 + v14 + 24);
  v15[2] = *(void *)((char *)a2 + v14 + 16);
  v15[3] = v18;
  uint64_t v19 = *(void *)((char *)a2 + v14 + 40);
  v15[4] = *(void *)((char *)a2 + v14 + 32);
  v15[5] = v19;
  uint64_t v20 = *(void *)((char *)a2 + v14 + 56);
  void v15[6] = *(void *)((char *)a2 + v14 + 48);
  v15[7] = v20;
  uint64_t v21 = *(void *)((char *)a2 + v14 + 72);
  v15[8] = *(void *)((char *)a2 + v14 + 64);
  v15[9] = v21;
  uint64_t v22 = *(void *)((char *)a2 + v14 + 88);
  v15[10] = *(void *)((char *)a2 + v14 + 80);
  v15[11] = v22;
  unint64_t v40 = *(void *)((char *)a2 + v14 + 104);
  uint64_t v41 = *(void *)((char *)a2 + v14 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013140(v41, v40);
  v15[12] = v41;
  v15[13] = v40;
  uint64_t v23 = v16[15];
  v15[14] = v16[14];
  v15[15] = v23;
  v15[16] = v16[16];
  uint64_t v24 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v25 = v24[13];
  uint64_t v26 = (char *)v15 + v25;
  long long v27 = (char *)v16 + v25;
  uint64_t v28 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
  swift_bridgeObjectRetain();
  v29(v26, v27, v28);
  uint64_t v30 = v24[14];
  uint64_t v31 = (void *)((char *)v15 + v30);
  double v32 = (void *)((char *)v16 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_100013140(*v32, v34);
  *uint64_t v31 = v33;
  v31[1] = v34;
  *(void *)((char *)v15 + v24[15]) = *(void *)((char *)v16 + v24[15]);
  uint64_t v35 = v24[16];
  uint64_t v36 = (void *)((char *)v15 + v35);
  uint64_t v37 = (void *)((char *)v16 + v35);
  uint64_t v38 = v37[1];
  void *v36 = *v37;
  v36[1] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000A45A0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  a1[17] = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 60);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  *uint64_t v7 = *(void *)((char *)a2 + v6);
  v7[1] = *(void *)((char *)a2 + v6 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v7[2] = v8[2];
  v7[3] = v8[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[4] = v8[4];
  void v7[5] = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v7[6] = v8[6];
  v7[7] = v8[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[8] = v8[8];
  v7[9] = v8[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[10] = v8[10];
  v7[11] = v8[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = v8[12];
  unint64_t v10 = v8[13];
  sub_100013140(v9, v10);
  uint64_t v11 = v7[12];
  unint64_t v12 = v7[13];
  v7[12] = v9;
  v7[13] = v10;
  sub_100013198(v11, v12);
  v7[14] = v8[14];
  v7[15] = v8[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[16] = v8[16];
  uint64_t v13 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v14 = v13[13];
  uint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = (char *)v8 + v14;
  uint64_t v17 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = v13[14];
  uint64_t v19 = (void *)((char *)v7 + v18);
  uint64_t v20 = (void *)((char *)v8 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_100013140(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_100013198(v23, v24);
  *(void *)((char *)v7 + v13[15]) = *(void *)((char *)v8 + v13[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v13[16];
  uint64_t v26 = (void *)((char *)v7 + v25);
  long long v27 = (void *)((char *)v8 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A4910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v8 = *(int *)(a3 + 60);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  long long v11 = *(_OWORD *)(a2 + v8 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(v9 + 16) = v11;
  long long v12 = *(_OWORD *)(a2 + v8 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + v8 + 32);
  *(_OWORD *)(v9 + 48) = v12;
  long long v13 = *(_OWORD *)(a2 + v8 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + v8 + 64);
  *(_OWORD *)(v9 + 80) = v13;
  long long v14 = *(_OWORD *)(a2 + v8 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(a2 + v8 + 96);
  *(_OWORD *)(v9 + 112) = v14;
  *(void *)(v9 + 128) = *(void *)(a2 + v8 + 128);
  uint64_t v15 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v16 = v15[13];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  uint64_t v19 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(_OWORD *)(v9 + v15[14]) = *(_OWORD *)(v10 + v15[14]);
  *(void *)(v9 + v15[15]) = *(void *)(v10 + v15[15]);
  *(_OWORD *)(v9 + v15[16]) = *(_OWORD *)(v10 + v15[16]);
  return a1;
}

void *sub_1000A4A28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[15];
  a1[14] = a2[14];
  a1[15] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[17];
  a1[16] = a2[16];
  a1[17] = v14;
  swift_bridgeObjectRelease();
  a1[18] = a2[18];
  swift_bridgeObjectRelease();
  uint64_t v15 = a2[20];
  a1[19] = a2[19];
  a1[20] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(int *)(a3 + 60);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)((char *)a2 + v16 + 8);
  *uint64_t v17 = *(void *)((char *)a2 + v16);
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *((void *)v18 + 3);
  void v17[2] = *((void *)v18 + 2);
  uint64_t v17[3] = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)v18 + 5);
  v17[4] = *((void *)v18 + 4);
  void v17[5] = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *((void *)v18 + 7);
  v17[6] = *((void *)v18 + 6);
  v17[7] = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = *((void *)v18 + 9);
  v17[8] = *((void *)v18 + 8);
  v17[9] = v23;
  swift_bridgeObjectRelease();
  uint64_t v24 = *((void *)v18 + 11);
  v17[10] = *((void *)v18 + 10);
  v17[11] = v24;
  swift_bridgeObjectRelease();
  uint64_t v25 = v17[12];
  unint64_t v26 = v17[13];
  *((_OWORD *)v17 + 6) = *((_OWORD *)v18 + 6);
  sub_100013198(v25, v26);
  uint64_t v27 = *((void *)v18 + 15);
  uint64_t v17[14] = *((void *)v18 + 14);
  v17[15] = v27;
  swift_bridgeObjectRelease();
  v17[16] = *((void *)v18 + 16);
  uint64_t v28 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  uint64_t v29 = v28[13];
  uint64_t v30 = (char *)v17 + v29;
  uint64_t v31 = &v18[v29];
  uint64_t v32 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  uint64_t v33 = v28[14];
  uint64_t v34 = *(void *)((char *)v17 + v33);
  unint64_t v35 = *(void *)((char *)v17 + v33 + 8);
  *(_OWORD *)((char *)v17 + v33) = *(_OWORD *)&v18[v33];
  sub_100013198(v34, v35);
  *(void *)((char *)v17 + v28[15]) = *(void *)&v18[v28[15]];
  swift_bridgeObjectRelease();
  uint64_t v36 = v28[16];
  uint64_t v37 = (void *)((char *)v17 + v36);
  uint64_t v38 = &v18[v36];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A4C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4C58);
}

uint64_t sub_1000A4C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 60);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A4D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4D1C);
}

uint64_t sub_1000A4D1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 60);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A4DC4()
{
  uint64_t result = type metadata accessor for WalrusPCSEncryptionMaterial(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1000A4E7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    uint64_t v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    uint64_t v12 = a2[11];
    a1[10] = a2[10];
    a1[11] = v12;
    uint64_t v13 = a2[12];
    unint64_t v14 = a2[13];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100013140(v13, v14);
    a1[12] = v13;
    a1[13] = v14;
    uint64_t v15 = a2[15];
    a1[14] = a2[14];
    a1[15] = v15;
    a1[16] = a2[16];
    uint64_t v16 = a3[13];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    uint64_t v21 = a3[14];
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    sub_100013140(*v23, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
    uint64_t v26 = a3[16];
    *(uint64_t *)((char *)a1 + a3[15]) = *(uint64_t *)((char *)a2 + a3[15]);
    uint64_t v27 = (uint64_t *)((char *)a1 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000A5034(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100013198(*(void *)(a1 + 96), *(void *)(a1 + 104));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  sub_100013198(*(void *)(a1 + *(int *)(a2 + 56)), *(void *)(a1 + *(int *)(a2 + 56) + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000A5118(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  uint64_t v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  uint64_t v12 = a2[12];
  unint64_t v13 = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100013140(v12, v13);
  a1[12] = v12;
  a1[13] = v13;
  uint64_t v14 = a2[15];
  a1[14] = a2[14];
  a1[15] = v14;
  a1[16] = a2[16];
  uint64_t v15 = a3[13];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for P384.KeyAgreement.PublicKey();
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  uint64_t v20 = a3[14];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_100013140(*v22, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v28 = v27[1];
  void *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000A5280(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[12];
  unint64_t v7 = a2[13];
  sub_100013140(v6, v7);
  uint64_t v8 = a1[12];
  unint64_t v9 = a1[13];
  a1[12] = v6;
  a1[13] = v7;
  sub_100013198(v8, v9);
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16] = a2[16];
  uint64_t v10 = a3[13];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[14];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_100013140(*v16, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_100013198(v19, v20);
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[16];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A5478(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v11 = a3[13];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  uint64_t v14 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

void *sub_1000A5544(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a1[12];
  unint64_t v13 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_100013198(v12, v13);
  uint64_t v14 = *(void *)(a2 + 120);
  a1[14] = *(void *)(a2 + 112);
  a1[15] = v14;
  swift_bridgeObjectRelease();
  a1[16] = *(void *)(a2 + 128);
  uint64_t v15 = a3[13];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for P384.KeyAgreement.PublicKey();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  uint64_t v19 = a3[14];
  uint64_t v20 = *(void *)((char *)a1 + v19);
  unint64_t v21 = *(void *)((char *)a1 + v19 + 8);
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_100013198(v20, v21);
  *(void *)((char *)a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[16];
  uint64_t v23 = (void *)((char *)a1 + v22);
  unint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000A5698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A56AC);
}

uint64_t sub_1000A56AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A5770);
}

uint64_t sub_1000A5770(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for P384.KeyAgreement.PublicKey();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A5818()
{
  uint64_t result = type metadata accessor for P384.KeyAgreement.PublicKey();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_1000A58EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v32 = v3;
    uint64_t v33 = Strong;
    uint64_t v34 = a1;
    uint64_t v13 = Strong + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v14(v11, Strong + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore, v7);
    Dependency.wrappedValue.getter();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
    v15(v11, v7);
    id v16 = [[*(id *)(*sub_100008EF8(v36, v37) + 16) aa_primaryAppleAccount];

    sub_100008EA8((uint64_t)v36);
    if (v16)
    {
      UUID.init()();
      uint64_t v30 = UUID.uuidString.getter();
      uint64_t v31 = v17;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v2);
      v14(v11, v13, v7);
      Dependency.wrappedValue.getter();
      v15(v11, v7);
      id v18 = [[*(id *)(*sub_100008EF8(v36, v37) + 16) aa_primaryAppleAccount];

      sub_100008EA8((uint64_t)v36);
      if (v18)
      {
        sub_1000A6064(1, v30, v31, (uint64_t)sub_1000A5E4C, 0);
        swift_release();
      }
      else
      {
        sub_100009F04(&qword_1003215F8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
        *(void *)(inited + 32) = 0x72456E496E676953;
        *(void *)(inited + 40) = 0xEB00000000726F72;
        type metadata accessor for AASignInError(0);
        uint64_t v35 = -8014;
        sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
        sub_1000094A0((unint64_t *)&qword_100321098, type metadata accessor for AASignInError);
        _BridgedStoredNSError.init(_:userInfo:)();
        *(void *)(inited + 48) = v36[0];
        unint64_t v28 = sub_100220B90(inited);
        sub_1000A5E4C(0, v28);
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_100007288(v23, (uint64_t)qword_10033E778);
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "No account signed in. Skipping AppleID Availability activity.", v26, 2u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
    }
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100007288(v19, (uint64_t)qword_10033E778);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Lost reference to self. Aborting AppleID Availability XPC activity", v22, 2u);
      swift_slowDealloc();
    }
  }
  return sub_100030AB0();
}

void sub_1000A5E4C(char a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100007288(v3, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_bridgeObjectRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v7 = Dictionary.description.getter();
      unint64_t v9 = v8;
      swift_bridgeObjectRelease();
      sub_100135190(v7, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Overall AppleID Availability activity failed: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if ((a1 & 1) == 0) {
        return;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if ((a1 & 1) == 0) {
        return;
      }
    }
    [self isHealthCheckTTREnabled];
  }
}

uint64_t sub_1000A6064(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v70 = a5;
  uint64_t v68 = a4;
  uint64_t v81 = a2;
  uint64_t v82 = a3;
  uint64_t v75 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v75 - 8);
  __chkstk_darwin(v75, v6);
  uint64_t v73 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin(v67, v8);
  uint64_t v65 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10, v11);
  uint64_t v72 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v12);
  uint64_t v14 = (char *)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v19 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = dispatch_group_create();
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = &_swiftEmptyDictionarySingleton;
  unint64_t v21 = sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_1000094A0((unint64_t *)&qword_1003222D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100009F04((uint64_t *)&unk_10032A870);
  sub_1000095C0((unint64_t *)&qword_1003222E0, (uint64_t *)&unk_10032A870);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v69 = v14;
  v64[1] = v21;
  uint64_t v83 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v86 = swift_allocObject();
  *(unsigned char *)(v86 + 16) = 0;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  int v22 = a1 & 1;
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v80 = sub_100007288(v23, (uint64_t)qword_10033E778);
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  int v85 = v22;
  if (v26)
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315138;
    int v22 = v85;
    if (v85) {
      uint64_t v28 = 0x656C756465686353;
    }
    else {
      uint64_t v28 = 0x6E616D6544206E4FLL;
    }
    uint64_t v79 = (v27 + 4);
    *(void *)&long long v93 = sub_100135190(v28, 0xE900000000000064, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting %s Apple ID Availability activities.", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v29 = *(void *)(v87 + 16);
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    uint64_t v31 = v29 + 32;
    if (v22) {
      uint64_t v32 = 0x656C756465686353;
    }
    else {
      uint64_t v32 = 0x6E616D6544206E4FLL;
    }
    uint64_t v78 = v32;
    v64[0] = v29;
    swift_bridgeObjectRetain();
    *(void *)&long long v33 = 136315394;
    long long v77 = v33;
    unint64_t v76 = (char *)&type metadata for Any + 8;
    uint64_t v79 = v20;
    uint64_t v34 = v86;
    do
    {
      uint64_t v87 = v30;
      sub_100008A94(v31, (uint64_t)aBlock);
      dispatch_group_enter(v20);
      sub_100008A94((uint64_t)aBlock, (uint64_t)&v93);
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v88 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = v77;
        *(void *)(v46 + 4) = sub_100135190(v78, 0xE900000000000064, &v88);
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2080;
        sub_100008EF8(&v93, v94);
        swift_getDynamicType();
        uint64_t v47 = _typeName(_:qualified:)();
        *(void *)(v46 + 14) = sub_100135190(v47, v48, &v88);
        swift_bridgeObjectRelease();
        sub_100008EA8((uint64_t)&v93);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Starting %s Apple ID Availability activity - %s", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100008EA8((uint64_t)&v93);
      }

      char v35 = v85;
      uint64_t v36 = v90;
      uint64_t v37 = v91;
      sub_100008EF8(aBlock, (uint64_t)v90);
      sub_100008A94((uint64_t)aBlock, (uint64_t)&v93);
      uint64_t v38 = swift_allocObject();
      *(unsigned char *)(v38 + 16) = v35;
      sub_100041E8C(&v93, v38 + 24);
      uint64_t v39 = (void *)v83;
      uint64_t v40 = v84;
      *(void *)(v38 + 64) = v83;
      *(void *)(v38 + 72) = v40;
      uint64_t v20 = v79;
      *(void *)(v38 + 80) = v34;
      *(void *)(v38 + 88) = v20;
      uint64_t v41 = (void (*)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void *, uint64_t (*)()))*((void *)v37 + 2);
      id v42 = v39;
      swift_retain();
      swift_retain();
      uint64_t v43 = v20;
      v41(v81, v82, sub_1000A7D4C, v38, v36, v37);
      swift_release();
      sub_100008EA8((uint64_t)aBlock);
      v31 += 40;
      uint64_t v30 = v87 - 1;
    }
    while (v87 != 1);
    swift_bridgeObjectRelease();
    LOBYTE(v22) = v85;
  }
  uint64_t v49 = v66;
  uint64_t v50 = v65;
  uint64_t v51 = v67;
  (*(void (**)(char *, void, uint64_t))(v66 + 104))(v65, enum case for DispatchQoS.QoSClass.default(_:), v67);
  uint64_t v87 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  uint64_t v52 = swift_allocObject();
  uint64_t v53 = (void *)v83;
  uint64_t v54 = v84;
  *(void *)(v52 + 16) = v83;
  *(unsigned char *)(v52 + 24) = v22;
  uint64_t v55 = v68;
  *(void *)(v52 + 32) = v54;
  *(void *)(v52 + 40) = v55;
  uint64_t v56 = v86;
  *(void *)(v52 + 48) = v70;
  *(void *)(v52 + 56) = v56;
  uint64_t v91 = sub_1000A7DB0;
  uint64_t v92 = v52;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100007244;
  unint64_t v90 = &unk_1002F8E08;
  uint64_t v57 = _Block_copy(aBlock);
  id v58 = v53;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v59 = v69;
  static DispatchQoS.unspecified.getter();
  *(void *)&long long v93 = &_swiftEmptyArrayStorage;
  sub_1000094A0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  uint64_t v60 = v73;
  uint64_t v61 = v75;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v62 = (void *)v87;
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v57);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v60, v61);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v59, v72);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1000A6B10(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  LODWORD(v58) = a2;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v52 = a5;
    uint64_t v54 = v21;
    uint64_t v55 = v20;
    uint64_t v57 = v14;
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v53 = a6;
    uint64_t v56 = a4;
    uint64_t v24 = type metadata accessor for Logger();
    sub_100007288(v24, (uint64_t)qword_10033E778);
    sub_100008A94((uint64_t)a3, (uint64_t)&aBlock);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v51 = a7;
      uint64_t v28 = v27;
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(void *)&v65[0] = v50;
      *(_DWORD *)uint64_t v28 = 136315650;
      if (v58) {
        uint64_t v29 = 0x656C756465686353;
      }
      else {
        uint64_t v29 = 0x6E616D6544206E4FLL;
      }
      uint64_t v66 = (void *)sub_100135190(v29, 0xE900000000000064, (uint64_t *)v65);
      uint64_t v58 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      sub_100008EF8(&aBlock, (uint64_t)v62);
      swift_getDynamicType();
      uint64_t v30 = _typeName(_:qualified:)();
      uint64_t v66 = (void *)sub_100135190(v30, v31, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)&aBlock);
      *(_WORD *)(v28 + 22) = 2112;
      uint64_t v32 = _convertErrorToNSError(_:)();
      uint64_t v66 = (void *)v32;
      uint64_t v13 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s %s Apple ID Availability activity failed with error %@", (uint8_t *)v28, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v51;
      swift_slowDealloc();
    }
    else
    {
      sub_100008EA8((uint64_t)&aBlock);
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100008EF8(a3, a3[3]);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v41 = a3[4];
    long long aBlock = (void **)DynamicType;
    uint64_t v60 = v41;
    sub_100009F04(&qword_10032A880);
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v44 = v43;
    sub_100008A94((uint64_t)a3, (uint64_t)v65);
    os_log_type_t v45 = (void *)swift_allocObject();
    uint64_t v46 = v52;
    v45[2] = a1;
    uint64_t v45[3] = v46;
    v45[4] = v42;
    v45[5] = v44;
    v45[6] = v53;
    sub_100041E8C(v65, (uint64_t)(v45 + 7));
    uint64_t v63 = sub_1000A7E74;
    uint64_t v64 = v45;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v60 = 1107296256;
    uint64_t v61 = sub_100007244;
    uint64_t v62 = &unk_1002F8EA8;
    uint64_t v47 = _Block_copy(&aBlock);
    swift_errorRetain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v66 = &_swiftEmptyArrayStorage;
    sub_1000094A0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100009F04(&qword_10032BB00);
    sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v47);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v23, v55);
    swift_release();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100007288(v33, (uint64_t)qword_10033E778);
    sub_100008A94((uint64_t)a3, (uint64_t)&aBlock);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      *(void *)&v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      if (v58) {
        uint64_t v37 = 0x656C756465686353;
      }
      else {
        uint64_t v37 = 0x6E616D6544206E4FLL;
      }
      uint64_t v66 = (void *)sub_100135190(v37, 0xE900000000000064, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      sub_100008EF8(&aBlock, (uint64_t)v62);
      swift_getDynamicType();
      uint64_t v38 = _typeName(_:qualified:)();
      uint64_t v66 = (void *)sub_100135190(v38, v39, (uint64_t *)v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s %s Apple ID Availability activity completed.", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100008EA8((uint64_t)&aBlock);
    }
  }
  dispatch_group_leave(a7);
}

uint64_t sub_1000A7300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (uint64_t *)(a2 + 16);
  uint64_t v11 = (char *)(a5 + 16);
  uint64_t v12 = (void *)_convertErrorToNSError(_:)();
  id v13 = [v12 aa_partialErrorsByName];

  if (v13)
  {
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v14 + 16))
    {
      swift_bridgeObjectRetain();
      sub_1000A7E88(v14, v10, a3, a4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  sub_10022C0AC(a1, a3, a4, isUniquelyReferenced_nonNull_native);
  *uint64_t v10 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_6:
  swift_beginAccess();
  char v16 = *v11;
  sub_100008A94(a6, (uint64_t)v21);
  if (v16)
  {
    char v17 = 1;
  }
  else
  {
    uint64_t v18 = v22;
    uint64_t v19 = v23;
    sub_100008EF8(v21, v22);
    char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
  }
  sub_100008EA8((uint64_t)v21);
  uint64_t result = swift_beginAccess();
  *uint64_t v11 = v17 & 1;
  return result;
}

uint64_t sub_1000A74F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a1;
  char v10 = a2 & 1;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v10;
  *(void *)(v20 + 24) = a3;
  *(void *)(v20 + 32) = a4;
  *(void *)(v20 + 40) = a5;
  *(void *)(v20 + 48) = a6;
  aBlock[4] = sub_1000A7E0C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  uint64_t aBlock[3] = &unk_1002F8E58;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v26 = &_swiftEmptyArrayStorage;
  sub_1000094A0((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_1000095C0((unint64_t *)&qword_1003229C0, &qword_10032BB00);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v24);
  return swift_release();
}

uint64_t sub_1000A77C0(char a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E778);
  swift_retain_n();
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    if (a1) {
      uint64_t v13 = 0x656C756465686353;
    }
    else {
      uint64_t v13 = 0x6E616D6544206E4FLL;
    }
    uint64_t v20 = a5;
    sub_100135190(v13, 0xE900000000000064, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v14 = Dictionary.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    sub_100135190(v14, v16, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a5 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Overall %s Apple ID Availability activities finished with errors: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t v17 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess();
  uint64_t v18 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  a3(v17, v18);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A7AA8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore;
  uint64_t v2 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A7B54()
{
  return type metadata accessor for AppleIDAvailabilityActivityProvider();
}

uint64_t type metadata accessor for AppleIDAvailabilityActivityProvider()
{
  uint64_t result = qword_100324B40;
  if (!qword_100324B40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A7BA8()
{
  sub_1000A7C50();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A7C50()
{
  if (!qword_100325720)
  {
    sub_1000112CC((uint64_t *)&unk_100321920);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100325720);
    }
  }
}

uint64_t sub_1000A7CAC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A7CE4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000A7CF4()
{
  sub_100008EA8(v0 + 24);

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

void sub_1000A7D4C(uint64_t a1)
{
  sub_1000A6B10(a1, *(unsigned __int8 *)(v1 + 16), (void *)(v1 + 24), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(NSObject **)(v1 + 88));
}

uint64_t sub_1000A7D60()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000A7DB0()
{
  return sub_1000A74F0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000A7DC4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A7E0C()
{
  return sub_1000A77C0(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1000A7E1C()
{
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100008EA8(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000A7E74()
{
  return sub_1000A7300(v0[2], v0[3], v0[4], v0[5], v0[6], (uint64_t)(v0 + 7));
}

uint64_t sub_1000A7E88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v38 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v43)
  {
    if (v7)
    {
      uint64_t v42 = (v7 - 1) & v7;
      int64_t v43 = i;
      unint64_t v10 = __clz(__rbit64(v7)) | (i << 6);
    }
    else
    {
      int64_t v11 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_38;
      }
      if (v11 >= v38) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v37 + 8 * v11);
      int64_t v13 = i + 1;
      if (!v12)
      {
        int64_t v13 = i + 2;
        if (i + 2 >= v38) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v37 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = i + 3;
          if (i + 3 >= v38) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v37 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = i + 4;
            if (i + 4 >= v38) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v37 + 8 * v13);
            if (!v12)
            {
              uint64_t v14 = i + 5;
              if (i + 5 >= v38) {
                return swift_release();
              }
              unint64_t v12 = *(void *)(v37 + 8 * v14);
              if (!v12)
              {
                while (1)
                {
                  int64_t v13 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_39;
                  }
                  if (v13 >= v38) {
                    return swift_release();
                  }
                  unint64_t v12 = *(void *)(v37 + 8 * v13);
                  ++v14;
                  if (v12) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v13 = i + 5;
            }
          }
        }
      }
LABEL_23:
      uint64_t v42 = (v12 - 1) & v12;
      int64_t v43 = v13;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = (void *)v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 58;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v16;
    v20._object = v17;
    String.append(_:)(v20);
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = (void *)*a2;
    uint64_t v44 = (void *)*a2;
    *a2 = 0x8000000000000000;
    unint64_t v24 = sub_1001358B8(a3, a4);
    uint64_t v25 = v22[2];
    BOOL v26 = (v23 & 1) == 0;
    uint64_t v27 = v25 + v26;
    if (__OFADD__(v25, v26)) {
      break;
    }
    char v28 = v23;
    if (v22[3] >= v27)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        unint64_t v31 = v44;
        if (v23) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_10022CE80();
        unint64_t v31 = v44;
        if (v28) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100229B98(v27, isUniquelyReferenced_nonNull_native);
      unint64_t v29 = sub_1001358B8(a3, a4);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_40;
      }
      unint64_t v24 = v29;
      unint64_t v31 = v44;
      if (v28)
      {
LABEL_4:
        uint64_t v9 = v31[7];
        swift_errorRelease();
        *(void *)(v9 + 8 * v24) = v18;
        goto LABEL_5;
      }
    }
    v31[(v24 >> 6) + 8] |= 1 << v24;
    uint64_t v32 = (uint64_t *)(v31[6] + 16 * v24);
    *uint64_t v32 = a3;
    v32[1] = a4;
    *(void *)(v31[7] + 8 * v24) = v18;
    uint64_t v33 = v31[2];
    BOOL v34 = __OFADD__(v33, 1);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_37;
    }
    v31[2] = v35;
    swift_bridgeObjectRetain();
LABEL_5:
    *a2 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    unint64_t v7 = v42;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A8204()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager;
  uint64_t v2 = sub_100009F04((uint64_t *)&unk_100324D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000A82A8()
{
  return type metadata accessor for ContactsHelper();
}

uint64_t type metadata accessor for ContactsHelper()
{
  uint64_t result = qword_100324C60;
  if (!qword_100324C60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A82FC()
{
  sub_1000A838C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000A838C()
{
  if (!qword_100324C70[0])
  {
    sub_1000112CC((uint64_t *)&unk_100325960);
    unint64_t v0 = type metadata accessor for Dependency();
    if (!v1) {
      atomic_store(v0, qword_100324C70);
    }
  }
}

uint64_t sub_1000A83E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unsigned __int8 a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  unint64_t v157 = a7;
  uint64_t v159 = a6;
  LODWORD(v158) = a5;
  int v19 = a8;
  uint64_t v20 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v142 = *(void *)(v20 - 8);
  uint64_t v143 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v141 = (uint64_t)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100009F04(&qword_100324D80);
  __chkstk_darwin(v23 - 8, v24);
  uint64_t v150 = (uint64_t)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v152 = v26;
  uint64_t v153 = v27;
  __chkstk_darwin(v26, v28);
  unint64_t v140 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v30 - 8, v31);
  uint64_t v148 = (uint64_t)&v136 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v139 = (char *)&v136 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = (int *)type metadata accessor for CustodianRecord();
  int64_t v38 = (uint64_t *)(a9 + v37[7]);
  *int64_t v38 = 0;
  v38[1] = 0;
  id v145 = v38;
  unint64_t v39 = (uint64_t *)(a9 + v37[8]);
  *unint64_t v39 = 0;
  v39[1] = 0;
  NSString v146 = v39;
  uint64_t v40 = (void *)(a9 + v37[13]);
  *uint64_t v40 = 0;
  v40[1] = 0;
  id v149 = v40;
  uint64_t v41 = (uint64_t *)(a9 + v37[14]);
  *uint64_t v41 = 0;
  v41[1] = 0;
  os_log_type_t v151 = v41;
  uint64_t v42 = a9 + v37[15];
  *(void *)uint64_t v42 = 0;
  uint64_t v144 = (uint64_t *)v42;
  *(unsigned char *)(v42 + 8) = 1;
  int64_t v43 = *(void (**)(void))(v34 + 56);
  uint64_t v147 = a9 + v37[16];
  uint64_t v138 = v34 + 56;
  id v137 = v43;
  v43();
  uint64_t v154 = v34;
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
  v44(a9, a1, v33);
  uint64_t v45 = v37[5];
  uint64_t v155 = v33;
  v44(a9 + v45, a1 + v45, v33);
  if (v19 == 2 || ((((v19 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v37[12])) & 1) != 0)
  {
    uint64_t v46 = v37[11];
    uint64_t v47 = *(void *)(a1 + v46);
    unint64_t v48 = *(void *)(a1 + v46 + 8);
    uint64_t v49 = (uint64_t *)(a9 + v46);
    *uint64_t v49 = v47;
    v49[1] = v48;
    sub_100013140(v47, v48);
    unint64_t v50 = v157;
    if (a3)
    {
LABEL_4:
      uint64_t v51 = (void *)(a9 + v37[6]);
      void *v51 = a2;
      v51[1] = a3;
      goto LABEL_7;
    }
  }
  else
  {
    *(_OWORD *)(a9 + v37[11]) = xmmword_1002A9C60;
    unint64_t v50 = v157;
    if (a3) {
      goto LABEL_4;
    }
  }
  uint64_t v52 = v37[6];
  uint64_t v53 = *(void *)(a1 + v52);
  uint64_t v54 = *(void *)(a1 + v52 + 8);
  uint64_t v55 = (void *)(a9 + v52);
  *uint64_t v55 = v53;
  v55[1] = v54;
  swift_bridgeObjectRetain();
LABEL_7:
  uint64_t v56 = v37[9];
  if (v158) {
    a4 = *(void *)(a1 + v56);
  }
  *(void *)(a9 + v56) = a4;
  uint64_t v57 = v37[10];
  if (v50 >> 60 == 15)
  {
    uint64_t v58 = *(void *)(a1 + v57);
    unint64_t v59 = *(void *)(a1 + v57 + 8);
    uint64_t v60 = (uint64_t *)(a9 + v57);
    *uint64_t v60 = v58;
    v60[1] = v59;
    sub_1000196B4(v58, v59);
    if (v19 != 2)
    {
LABEL_11:
      *(unsigned char *)(a9 + v37[12]) = v19 & 1;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v61 = (void *)(a9 + v57);
    *uint64_t v61 = v159;
    v61[1] = v50;
    if (v19 != 2) {
      goto LABEL_11;
    }
  }
  *(unsigned char *)(a9 + v37[12]) = *(unsigned char *)(a1 + v37[12]);
LABEL_14:
  uint64_t v156 = a10;
  type metadata accessor for ContactsHelper();
  uint64_t v62 = swift_allocObject();
  sub_1000196B4(v159, v50);
  sub_100009F04((uint64_t *)&unk_100325960);
  Dependency.init(dependencyId:config:)();
  swift_bridgeObjectRetain();
  uint64_t v63 = sub_100009F04((uint64_t *)&unk_100324D30);
  Dependency.wrappedValue.getter();
  uint64_t v64 = v160;
  NSString v65 = String._bridgeToObjectiveC()();
  id v66 = [v64 contactForHandle:v65];

  swift_unknownObjectRelease();
  if (v66)
  {
    id v67 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain();
    id v68 = v66;
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v158 = [v67 initWithHandle:v69 contact:v68];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v158 = 0;
  }
  uint64_t v70 = v154;
  swift_setDeallocating();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(v62 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v63);
  swift_deallocClassInstance();
  char v71 = sub_1000A8EAC();
  uint64_t v73 = v152;
  uint64_t v72 = v153;
  if ((v71 & 1) == 0 || !v158) {
    goto LABEL_36;
  }
  id v74 = v158;
  id v75 = [v74 firstName];
  if (!v75)
  {

    goto LABEL_36;
  }
  unint64_t v76 = v75;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v78;

  uint64_t v80 = sub_100080B3C(v77, v79);
  uint64_t v82 = v81;

  uint64_t v70 = v154;
  swift_bridgeObjectRelease();
  if (!v82)
  {
LABEL_36:
    uint64_t v97 = (uint64_t *)(a1 + v37[7]);
    uint64_t v98 = *v97;
    uint64_t v99 = v97[1];
    uint64_t v100 = v145;
    *id v145 = v98;
    v100[1] = v99;
    long long v101 = (uint64_t *)(a1 + v37[8]);
    uint64_t v103 = *v101;
    uint64_t v102 = v101[1];
    uint64_t v104 = v146;
    uint64_t *v146 = v103;
    v104[1] = v102;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_37;
  }
  uint64_t v83 = v73;
  id v84 = v74;
  id v85 = [v84 lastName];
  if (!v85)
  {
    swift_bridgeObjectRelease();

    uint64_t v73 = v83;
    uint64_t v72 = v153;
    goto LABEL_36;
  }
  uint64_t v86 = v85;
  uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v89 = v88;

  uint64_t v90 = sub_100080B3C(v87, v89);
  uint64_t v92 = v91;

  swift_bridgeObjectRelease();
  if (!v92)
  {
    swift_bridgeObjectRelease();
    uint64_t v73 = v152;
    uint64_t v72 = v153;
    goto LABEL_35;
  }
  long long v93 = (void *)(a1 + v37[7]);
  uint64_t v94 = v93[1];
  uint64_t v73 = v152;
  uint64_t v72 = v153;
  if (v94 && (*v93 == v80 && v94 == v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    || (uint64_t v95 = (void *)(a1 + v37[8]), (v96 = v95[1]) != 0)
    && (*v95 == v90 && v96 == v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    uint64_t v70 = v154;
    goto LABEL_36;
  }
  unint64_t v134 = v145;
  *id v145 = v80;
  v134[1] = v82;
  uint64_t v135 = v146;
  uint64_t *v146 = v90;
  v135[1] = v92;
  uint64_t v70 = v154;
LABEL_37:
  uint64_t v105 = a12;
  uint64_t v154 = a13;
  uint64_t v106 = v148;
  sub_100019730(v156, v148, (uint64_t *)&unk_100321CE0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v106, 1, v155) == 1)
  {
    sub_100006574(v106, (uint64_t *)&unk_100321CE0);
    sub_1000196C8(a1 + v37[16], v147);
    uint64_t v107 = v149;
    if (a12) {
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v116 = (uint64_t *)(a1 + v37[13]);
    a11 = *v116;
    uint64_t v105 = v116[1];
    swift_bridgeObjectRetain();
    goto LABEL_42;
  }
  uint64_t v109 = v155;
  uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
  uint64_t v111 = a1;
  uint64_t v112 = v73;
  uint64_t v113 = v139;
  v110(v139, v106, v155);
  uint64_t v114 = v147;
  sub_100006574(v147, (uint64_t *)&unk_100321CE0);
  unint64_t v115 = v113;
  uint64_t v73 = v112;
  a1 = v111;
  v110((char *)v114, (uint64_t)v115, v109);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v137)(v114, 0, 1, v109);
  uint64_t v107 = v149;
  if (!a12) {
    goto LABEL_41;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  void *v107 = a11;
  v107[1] = v105;
  uint64_t v117 = v154;
  uint64_t v118 = v150;
  sub_100019730(v154, v150, &qword_100324D80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v118, 1, v73) == 1)
  {
    sub_1000196A0(v159, v157);

    sub_100006574(v117, &qword_100324D80);
    sub_100006574(v156, (uint64_t *)&unk_100321CE0);
    sub_100006574(v118, &qword_100324D80);
    id v119 = (uint64_t *)(a1 + v37[14]);
    uint64_t v121 = *v119;
    uint64_t v120 = v119[1];
    uint64_t v122 = v151;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v123 = v140;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v140, v118, v73);
    uint64_t v124 = v141;
    sub_100015654(v141);
    uint64_t v125 = v72;
    uint64_t v121 = Date.ISO8601Format(_:)();
    uint64_t v120 = v126;
    sub_1000196A0(v159, v157);

    sub_100006574(v117, &qword_100324D80);
    sub_100006574(v156, (uint64_t *)&unk_100321CE0);
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v124, v143);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v123, v73);
    uint64_t v122 = v151;
  }
  swift_bridgeObjectRelease();
  *uint64_t v122 = v121;
  v122[1] = v120;
  uint64_t v127 = a1 + v37[15];
  uint64_t v128 = *(void *)v127;
  char v129 = *(unsigned char *)(v127 + 8);
  uint64_t result = sub_10002F538(a1);
  if (a14) {
    uint64_t v131 = 1;
  }
  else {
    uint64_t v131 = v128;
  }
  char v132 = (a14 ^ 1) & v129;
  if ((a14 ^ 1) & 1) != 0 || (v129) {
    goto LABEL_52;
  }
  uint64_t v131 = v128 + 1;
  if (v128 != -1)
  {
    char v132 = 0;
LABEL_52:
    id v133 = v144;
    uint64_t *v144 = v131;
    *((unsigned char *)v133 + 8) = v132;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A8EAC()
{
  uint64_t v1 = type metadata accessor for CustodianRecord();
  uint64_t v3 = __chkstk_darwin(v1, v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v3, v6);
  uint64_t v9 = (char *)&v33 - v8;
  unint64_t v10 = (uint64_t *)(v0 + *(int *)(v7 + 28));
  uint64_t v11 = v10[1];
  if (!v11 || (uint64_t v12 = sub_100080B3C(*v10, v11), !v13))
  {
    unsigned __int8 v26 = 1;
    return v26 & 1;
  }
  uint64_t v14 = v12;
  uint64_t v15 = v13;
  NSString v16 = String._bridgeToObjectiveC()();
  unsigned int v17 = [v16 aa_appearsToBePhoneNumber];

  sub_10002F4D4(v0, (uint64_t)v9);
  if (v17)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    unsigned __int8 v19 = [v18 aa_appearsToBePhoneNumber];

    sub_10002F538((uint64_t)v9);
    if (v19)
    {
      id v20 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v22 = [v20 initWithStringValue:v21];

      id v23 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v23 initWithStringValue:v24];
      swift_bridgeObjectRelease();

      unsigned __int8 v26 = [v22 isLikePhoneNumber:v25];
      return v26 & 1;
    }
  }
  else
  {
    sub_10002F538((uint64_t)v9);
  }
  NSString v27 = String._bridgeToObjectiveC()();
  unsigned int v28 = [v27 aa_appearsToBeEmail];

  sub_10002F4D4(v0, (uint64_t)v5);
  if (!v28)
  {
    sub_10002F538((uint64_t)v5);
    goto LABEL_14;
  }
  NSString v29 = String._bridgeToObjectiveC()();
  unsigned __int8 v30 = [v29 aa_appearsToBeEmail];

  sub_10002F538((uint64_t)v5);
  if ((v30 & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    unsigned __int8 v26 = 0;
    return v26 & 1;
  }
  uint64_t v31 = (void *)(v0 + *(int *)(v1 + 24));
  if (v14 == *v31 && v15 == v31[1])
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v26 = 1;
  }
  else
  {
    unsigned __int8 v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  return v26 & 1;
}

uint64_t sub_1000A9178@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v8 = __chkstk_darwin(v6 - 8, v7);
  uint64_t v131 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v121 - v12;
  __chkstk_darwin(v11, v14);
  NSString v16 = (char *)&v121 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  unint64_t v130 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  id v133 = (char *)&v121 - v24;
  __chkstk_darwin(v23, v25);
  unint64_t v134 = (char *)&v121 - v26;
  NSString v27 = (int *)type metadata accessor for CustodianRecord();
  unsigned int v28 = (a3 + v27[7]);
  v28->CFDataRef isa = 0;
  v28[1].CFDataRef isa = 0;
  uint64_t v136 = v28;
  NSString v29 = (NSObject **)(a3 + v27[8]);
  *NSString v29 = 0;
  v29[1] = 0;
  id v137 = v29;
  unsigned __int8 v30 = (NSObject **)(a3 + v27[13]);
  *unsigned __int8 v30 = 0;
  v30[1] = 0;
  uint64_t v138 = v30;
  uint64_t v31 = (NSObject **)(a3 + v27[14]);
  *uint64_t v31 = 0;
  v31[1] = 0;
  uint64_t v139 = v31;
  uint64_t v140 = v18;
  uint64_t v32 = a3 + v27[15];
  *(void *)uint64_t v32 = 0;
  char v132 = (uint64_t *)v32;
  *(unsigned char *)(v32 + 8) = 1;
  uint64_t v33 = *(void (**)(void))(v18 + 56);
  uint64_t v135 = a3 + v27[16];
  uint64_t v141 = v17;
  char v129 = v33;
  v33();
  id v142 = a1;
  if (CKRecord.recordType.getter() == 0x6169646F74737543 && v34 == 0xEF64726F6365526ELL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      type metadata accessor for AACustodianError(0);
      uint64_t v145 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000AC720((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();

      goto LABEL_16;
    }
  }
  int v126 = a2;
  id v36 = v142;
  id v37 = [v142 recordID];
  id v38 = [v37 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v39 = v140;
  uint64_t v40 = v141;
  uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48);
  if (v128(v16, 1, v141) == 1)
  {
    sub_100006574((uint64_t)v16, (uint64_t *)&unk_100321CE0);
    type metadata accessor for AACustodianError(0);
    uint64_t v145 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000AC720((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

LABEL_16:
    uint64_t v52 = v135;
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100006574(v52, (uint64_t *)&unk_100321CE0);
  }
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v125 = v39 + 32;
  uint64_t v124 = v41;
  v41(v134, v16, v40);
  id v42 = [v36 encryptedValuesByKey];
  NSString v43 = String._bridgeToObjectiveC()();
  id v127 = v42;
  id v44 = [v42 objectForKeyedSubscript:v43];

  if (!v44 || (uint64_t v145 = (uint64_t)v44, sub_100009F04(&qword_1003239A0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100007288(v45, (uint64_t)qword_10033E748);
    uint64_t v46 = v142;
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      unint64_t v50 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 138412290;
      uint64_t v143 = v46;
      uint64_t v51 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v50 = v46;

      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Missing CustodianID - %@", v49, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v47 = v46;
    }
    uint64_t v52 = v135;

    type metadata accessor for AACustodianError(0);
    uint64_t v145 = -7005;
    sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
    sub_1000AC720((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v140 + 8))(v134, v141);
    goto LABEL_19;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (v128(v13, 1, v40) == 1)
  {
    sub_100006574((uint64_t)v13, (uint64_t *)&unk_100321CE0);
    goto LABEL_11;
  }
  uint64_t v54 = v133;
  v124(v133, v13, v40);
  NSString v55 = String._bridgeToObjectiveC()();
  id v56 = [v127 objectForKeyedSubscript:v55];

  if (!v56 || (uint64_t v145 = (uint64_t)v56, (swift_dynamicCast() & 1) == 0))
  {
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    sub_100007288(v74, (uint64_t)qword_10033E748);
    id v75 = v142;
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 138412290;
      uint64_t v143 = v75;
      uint64_t v80 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v79 = v75;

      uint64_t v81 = "Missing Handle - %@";
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v76, v77, v81, v78, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_44:
      uint64_t v52 = v135;

      type metadata accessor for AACustodianError(0);
      uint64_t v145 = -7005;
      sub_100006DF0((uint64_t)&_swiftEmptyArrayStorage);
      sub_1000AC720((unint64_t *)&qword_100322910, type metadata accessor for AACustodianError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      swift_unknownObjectRelease();

      uint64_t v86 = v141;
      uint64_t v87 = *(void (**)(char *, uint64_t))(v140 + 8);
      v87(v133, v141);
      v87(v134, v86);
      goto LABEL_19;
    }
LABEL_43:

    unint64_t v76 = v75;
    goto LABEL_44;
  }
  unint64_t v57 = v144;
  uint64_t v123 = v143;
  NSString v58 = String._bridgeToObjectiveC()();
  unint64_t v59 = [v127 objectForKeyedSubscript:v58];

  if (!v59 || (uint64_t v143 = v59, type metadata accessor for Status(0), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    id v82 = v142;
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    sub_100007288(v83, (uint64_t)qword_10033E748);
    id v75 = v82;
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc();
      id v84 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v78 = 138412290;
      uint64_t v143 = v75;
      id v85 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v84 = v75;

      uint64_t v81 = "Missing Status - %@";
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  uint64_t v122 = v145;
  NSString v60 = String._bridgeToObjectiveC()();
  id v61 = [v127 objectForKeyedSubscript:v60];

  if (v61)
  {
    uint64_t v145 = (uint64_t)v61;
    if (swift_dynamicCast())
    {
      unint64_t v62 = v144;
      uint64_t v121 = v143;
      unint64_t v63 = v57;
      p_CFDataRef isa = &v136->isa;
      swift_bridgeObjectRelease();
      *p_CFDataRef isa = v121;
      p_isa[1] = v62;
      unint64_t v57 = v63;
    }
  }
  NSString v65 = String._bridgeToObjectiveC()();
  id v66 = [v127 objectForKeyedSubscript:v65];

  if (v66)
  {
    uint64_t v145 = (uint64_t)v66;
    if (swift_dynamicCast())
    {
      unint64_t v67 = v144;
      uint64_t v136 = v143;
      unint64_t v68 = v57;
      NSString v69 = v137;
      swift_bridgeObjectRelease();
      char *v69 = v136;
      v69[1] = v67;
      unint64_t v57 = v68;
    }
  }
  NSString v70 = String._bridgeToObjectiveC()();
  id v71 = [v127 objectForKeyedSubscript:v70];

  if (v71)
  {
    uint64_t v145 = (uint64_t)v71;
    if (swift_dynamicCast())
    {
      uint64_t v72 = (uint64_t)v131;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v73 = v141;
      if (v128((char *)v72, 1, v141) == 1)
      {
        sub_100006574(v72, (uint64_t *)&unk_100321CE0);
      }
      else
      {
        uint64_t v88 = (void (*)(uint64_t, char *, uint64_t))v124;
        v124(v130, (char *)v72, v73);
        uint64_t v89 = v135;
        sub_100006574(v135, (uint64_t *)&unk_100321CE0);
        v88(v89, v130, v73);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v129)(v89, 0, 1, v73);
      }
    }
  }
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v127 objectForKeyedSubscript:v90];

  if (v91)
  {
    uint64_t v145 = (uint64_t)v91;
    if (swift_dynamicCast())
    {
      uint64_t v92 = v143;
      unint64_t v93 = v144;
      uint64_t v94 = v138;
      swift_bridgeObjectRelease();
      *uint64_t v94 = v92;
      v94[1] = v93;
    }
  }
  NSString v95 = String._bridgeToObjectiveC()();
  id v96 = [v127 objectForKeyedSubscript:v95];

  if (v96)
  {
    uint64_t v145 = (uint64_t)v96;
    if (swift_dynamicCast())
    {
      uint64_t v97 = v143;
      unint64_t v98 = v144;
      uint64_t v99 = v139;
      swift_bridgeObjectRelease();
      *uint64_t v99 = v97;
      v99[1] = v98;
    }
  }
  NSString v100 = String._bridgeToObjectiveC()();
  long long v101 = [v127 objectForKeyedSubscript:v100];

  if (v101)
  {
    uint64_t v143 = v101;
    if (swift_dynamicCast())
    {
      uint64_t v102 = v132;
      *char v132 = v145;
      *((unsigned char *)v102 + 8) = 0;
    }
  }
  uint64_t v103 = v141;
  uint64_t v104 = *(void (**)(uint64_t, char *, uint64_t))(v140 + 16);
  v104(a3, v134, v141);
  v104(a3 + v27[5], v54, v103);
  uint64_t v105 = (NSObject **)(a3 + v27[6]);
  *uint64_t v105 = v123;
  v105[1] = v57;
  *(void *)(a3 + v27[9]) = v122;
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v127 objectForKeyedSubscript:v106];

  unint64_t v108 = 0xF000000000000000;
  if (v107)
  {
    uint64_t v145 = (uint64_t)v107;
    int v109 = swift_dynamicCast();
    uint64_t v110 = v143;
    if (v109) {
      unint64_t v108 = v144;
    }
    else {
      uint64_t v110 = 0;
    }
  }
  else
  {
    uint64_t v110 = 0;
  }
  uint64_t v111 = (NSObject **)(a3 + v27[10]);
  NSObject *v111 = v110;
  v111[1] = v108;
  id v112 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  id v113 = v142;
  [v142 encodeSystemFieldsWithCoder:v112];
  [v112 finishEncoding];
  id v114 = [v112 encodedData];
  uint64_t v115 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v117 = v116;
  swift_unknownObjectRelease();

  uint64_t v118 = v141;
  id v119 = *(void (**)(char *, uint64_t))(v140 + 8);
  v119(v54, v141);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v119)(v134, v118);
  uint64_t v120 = (uint64_t *)(a3 + v27[11]);
  *uint64_t v120 = v115;
  v120[1] = v117;
  *(unsigned char *)(a3 + v27[12]) = v126 & 1;
  return result;
}

uint64_t sub_1000AA344(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_100321CE0);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v63 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v64 = (char *)&v63 - v9;
  [*a1 encryptedValuesByKey];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v10 = v67;
  id v66 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v11 = UUID.uuidString.getter();
  if (!*((void *)&v10 + 1))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (v10 != __PAIR128__(v12, v11))
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v14 = UUID.uuidString.getter();
    *((void *)&v68 + 1) = &type metadata for String;
    NSString v69 = &protocol witness table for String;
    *(void *)&long long v67 = v14;
    *((void *)&v67 + 1) = v15;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  NSString v16 = (unint64_t *)(v1 + v66[6]);
  unint64_t v18 = *v16;
  unint64_t v17 = v16[1];
  uint64_t v65 = v2;
  if (!*((void *)&v67 + 1)) {
    goto LABEL_11;
  }
  if (v67 == __PAIR128__(v17, v18))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
LABEL_11:
    *((void *)&v68 + 1) = &type metadata for String;
    NSString v69 = &protocol witness table for String;
    *(void *)&long long v67 = v18;
    *((void *)&v67 + 1) = v17;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_12:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v20 = (unint64_t *)(v65 + v66[7]);
  unint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  if (*((void *)&v67 + 1))
  {
    if (!v21)
    {
      swift_bridgeObjectRelease();
      NSString v69 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
LABEL_21:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_22;
    }
    if (v67 == __PAIR128__(v21, v22))
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
LABEL_20:
      *((void *)&v68 + 1) = &type metadata for String;
      NSString v69 = &protocol witness table for String;
      *(void *)&long long v67 = v22;
      *((void *)&v67 + 1) = v21;
      goto LABEL_21;
    }
  }
  else if (v21)
  {
    goto LABEL_20;
  }
LABEL_22:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v24 = v65;
  uint64_t v25 = (unint64_t *)(v65 + v66[8]);
  unint64_t v27 = *v25;
  unint64_t v26 = v25[1];
  if (!*((void *)&v67 + 1))
  {
    if (!v26) {
      goto LABEL_32;
    }
LABEL_30:
    *((void *)&v68 + 1) = &type metadata for String;
    NSString v69 = &protocol witness table for String;
    *(void *)&long long v67 = v27;
    *((void *)&v67 + 1) = v26;
    goto LABEL_31;
  }
  if (!v26)
  {
    swift_bridgeObjectRelease();
    NSString v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
LABEL_31:
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_32;
  }
  if (v67 != __PAIR128__(v26, v27))
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
LABEL_32:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v29 = *(void *)(v24 + v66[9]);
  if ((BYTE8(v67) & 1) != 0 || (void)v67 != v29)
  {
    *((void *)&v68 + 1) = &type metadata for Int;
    NSString v69 = &protocol witness table for Int;
    *(void *)&long long v67 = v29;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  long long v30 = v67;
  uint64_t v31 = (uint64_t *)(v24 + v66[10]);
  uint64_t v33 = *v31;
  unint64_t v32 = v31[1];
  if (*((void *)&v67 + 1) >> 60 == 15)
  {
    if (v32 >> 60 == 15)
    {
      uint64_t v34 = (uint64_t)v64;
      goto LABEL_44;
    }
    sub_1000196B4(v33, v32);
    sub_1000196A0(v30, *((unint64_t *)&v30 + 1));
    sub_1000196A0(v33, v32);
    uint64_t v34 = (uint64_t)v64;
LABEL_42:
    *((void *)&v68 + 1) = &type metadata for Data;
    NSString v69 = &protocol witness table for Data;
    *(void *)&long long v67 = v33;
    *((void *)&v67 + 1) = v32;
    goto LABEL_43;
  }
  sub_1000196B4(v33, v32);
  if (v32 >> 60 != 15)
  {
    sub_1000196B4(v30, *((unint64_t *)&v30 + 1));
    char v35 = sub_100012680(v30, *((unint64_t *)&v30 + 1), v33, v32);
    sub_1000196A0(v33, v32);
    sub_1000196A0(v30, *((unint64_t *)&v30 + 1));
    sub_1000196A0(v30, *((unint64_t *)&v30 + 1));
    uint64_t v34 = (uint64_t)v64;
    if (v35) {
      goto LABEL_44;
    }
    goto LABEL_42;
  }
  sub_1000196A0(v30, *((unint64_t *)&v30 + 1));
  sub_1000196A0(v33, v32);
  NSString v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v34 = (uint64_t)v64;
LABEL_43:
  sub_1000196B4(v33, v32);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_44:
  CKRecordKeyValueSetting.subscript.getter();
  long long v36 = v67;
  uint64_t v37 = v24 + v66[16];
  sub_100019730(v37, v34, (uint64_t *)&unk_100321CE0);
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  if (v40(v34, 1, v38) == 1)
  {
    sub_100006574(v34, (uint64_t *)&unk_100321CE0);
    if (!*((void *)&v36 + 1)) {
      goto LABEL_59;
    }
    goto LABEL_54;
  }
  uint64_t v64 = (char *)v36;
  uint64_t v41 = UUID.uuidString.getter();
  uint64_t v42 = v34;
  NSString v43 = (char *)v41;
  uint64_t v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v38);
  if (!*((void *)&v36 + 1))
  {
    if (!v45) {
      goto LABEL_59;
    }
    goto LABEL_54;
  }
  if (!v45)
  {
LABEL_54:
    swift_bridgeObjectRelease();
LABEL_55:
    uint64_t v46 = v63;
    sub_100019730(v37, v63, (uint64_t *)&unk_100321CE0);
    if (v40(v46, 1, v38) == 1)
    {
      sub_100006574(v46, (uint64_t *)&unk_100321CE0);
      long long v67 = 0u;
      long long v68 = 0u;
      NSString v69 = 0;
    }
    else
    {
      uint64_t v47 = UUID.uuidString.getter();
      *((void *)&v68 + 1) = &type metadata for String;
      NSString v69 = &protocol witness table for String;
      *(void *)&long long v67 = v47;
      *((void *)&v67 + 1) = v48;
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v46, v38);
    }
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_59;
  }
  if (v64 == v43 && *((void *)&v36 + 1) == (void)v36)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_59:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v49 = (unint64_t *)(v65 + v66[13]);
  unint64_t v51 = *v49;
  unint64_t v50 = v49[1];
  if (*((void *)&v67 + 1))
  {
    if (!v50)
    {
      swift_bridgeObjectRelease();
      NSString v69 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
LABEL_68:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_69;
    }
    if (v67 == __PAIR128__(v50, v51))
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
    {
LABEL_67:
      *((void *)&v68 + 1) = &type metadata for String;
      NSString v69 = &protocol witness table for String;
      *(void *)&long long v67 = v51;
      *((void *)&v67 + 1) = v50;
      goto LABEL_68;
    }
  }
  else if (v50)
  {
    goto LABEL_67;
  }
LABEL_69:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v53 = v65;
  uint64_t v54 = (unint64_t *)(v65 + v66[14]);
  unint64_t v56 = *v54;
  unint64_t v55 = v54[1];
  if (*((void *)&v67 + 1))
  {
    if (!v55)
    {
      swift_bridgeObjectRelease();
      NSString v69 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
LABEL_78:
      swift_bridgeObjectRetain();
      CKRecordKeyValueSetting.subscript.setter();
      goto LABEL_79;
    }
    if (v67 == __PAIR128__(v55, v56))
    {
      swift_bridgeObjectRelease();
      goto LABEL_79;
    }
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
    {
LABEL_77:
      *((void *)&v68 + 1) = &type metadata for String;
      NSString v69 = &protocol witness table for String;
      *(void *)&long long v67 = v56;
      *((void *)&v67 + 1) = v55;
      goto LABEL_78;
    }
  }
  else if (v55)
  {
    goto LABEL_77;
  }
LABEL_79:
  CKRecordKeyValueSetting.subscript.getter();
  NSString v58 = (uint64_t *)(v53 + v66[15]);
  uint64_t v59 = *v58;
  char v60 = *((unsigned char *)v58 + 8);
  if (BYTE8(v67))
  {
    if (v60) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_85;
  }
  if (v60)
  {
    NSString v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
LABEL_86:
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if ((void)v67 != v59)
  {
LABEL_85:
    *((void *)&v68 + 1) = &type metadata for UInt;
    NSString v69 = &protocol witness table for UInt;
    *(void *)&long long v67 = v59;
    goto LABEL_86;
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_1000AAE7C(char a1)
{
  unint64_t result = 0x444964726F636572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6169646F74737563;
      break;
    case 2:
      unint64_t result = 0x646F74737543746FLL;
      break;
    case 3:
      unint64_t result = 0x656C646E6168;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x737574617473;
      break;
    case 7:
      unint64_t result = 0x676E697070617277;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 11:
      unint64_t result = 0x6144726961706572;
      break;
    case 12:
      unint64_t result = 0x6F43726961706572;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000AB030()
{
  return sub_1000AAE7C(*v0);
}

uint64_t sub_1000AB038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000ADD3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000AB060(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1000AB06C(uint64_t a1)
{
  unint64_t v2 = sub_1000AC264();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AB0A8(uint64_t a1)
{
  unint64_t v2 = sub_1000AC264();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AB0E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v3 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v63 = (uint64_t)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v64 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  id v66 = (char *)v61 - v12;
  uint64_t v13 = sub_100009F04(&qword_100324D60);
  uint64_t v65 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  NSString v16 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CustodianRecord();
  char v19 = (int *)__chkstk_darwin(v17, v18);
  unint64_t v21 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = &v21[v19[7]];
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = 0;
  uint64_t v74 = (uint64_t *)v22;
  char v23 = &v21[v19[8]];
  *(void *)char v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v73 = (uint64_t *)v23;
  uint64_t v24 = &v21[v19[13]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  NSString v70 = (uint64_t *)v24;
  uint64_t v25 = &v21[v19[14]];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  id v71 = (uint64_t *)v25;
  unint64_t v26 = &v21[v19[15]];
  *(void *)unint64_t v26 = 0;
  v26[8] = 1;
  unint64_t v76 = v19;
  os_log_type_t v77 = v21;
  uint64_t v27 = v19[16];
  uint64_t v75 = v7;
  long long v30 = *(void (**)(void))(v7 + 56);
  uint64_t v29 = v7 + 56;
  char v28 = v30;
  long long v68 = &v21[v27];
  v30();
  uint64_t v31 = a1[3];
  long long v67 = a1;
  sub_100008EF8(a1, v31);
  sub_1000AC264();
  unint64_t v32 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v72 = v6;
  if (v32)
  {
    sub_100008EA8((uint64_t)v67);
    uint64_t v34 = (uint64_t)v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100006574(v34, (uint64_t *)&unk_100321CE0);
  }
  else
  {
    uint64_t v33 = v64;
    NSString v69 = (uint64_t *)v26;
    v61[0] = v28;
    v61[1] = v29;
    LOBYTE(v78) = 0;
    sub_1000AC720((unint64_t *)&unk_100321640, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v35 = (uint64_t)v77;
    long long v36 = v66;
    id v66 = *(char **)(v75 + 32);
    ((void (*)(char *, char *, uint64_t))v66)(v77, v36, v6);
    LOBYTE(v78) = 1;
    uint64_t v37 = v13;
    uint64_t v38 = v33;
    uint64_t v39 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v40 = v76;
    ((void (*)(uint64_t, char *, uint64_t))v66)(v35 + v76[5], v38, v6);
    LOBYTE(v78) = 3;
    uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = (uint64_t *)(v35 + v40[6]);
    uint64_t *v42 = v41;
    v42[1] = v43;
    LOBYTE(v78) = 4;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v45 = v74;
    *uint64_t v74 = v44;
    v45[1] = v46;
    LOBYTE(v78) = 5;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v48 = v73;
    *uint64_t v73 = v47;
    v48[1] = v49;
    LOBYTE(v78) = 6;
    *(void *)(v35 + v40[9]) = KeyedDecodingContainer.decode(_:forKey:)();
    char v79 = 7;
    sub_1000130EC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)(v35 + v40[10]) = v78;
    char v79 = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v35 + v40[11]) = v78;
    LOBYTE(v78) = 9;
    v77[v40[12]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v78) = 10;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    unint64_t v51 = v70;
    *NSString v70 = v50;
    v51[1] = v52;
    LOBYTE(v78) = 11;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v54 = v71;
    uint64_t *v71 = v53;
    v54[1] = v55;
    LOBYTE(v78) = 12;
    uint64_t v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    NSString v58 = v69;
    uint64_t *v69 = v56;
    *((unsigned char *)v58 + 8) = v57 & 1;
    LOBYTE(v78) = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v16, v39);
    sub_100018A54(v63, (uint64_t)v68);
    uint64_t v59 = (uint64_t)v77;
    sub_10002F4D4((uint64_t)v77, v62);
    sub_100008EA8((uint64_t)v67);
    return sub_10002F538(v59);
  }
}

uint64_t sub_1000ABA10(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100324D70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EF8(a1, a1[3]);
  sub_1000AC264();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  type metadata accessor for UUID();
  sub_1000AC720(&qword_1003263A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for CustodianRecord();
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v10 + 40));
    char v14 = 7;
    v12[1] = sub_1000131F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + *(int *)(v10 + 44));
    char v14 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

BOOL sub_1000ABE14()
{
  uint64_t v1 = v0;
  type metadata accessor for ContactsHelper();
  swift_allocObject();
  sub_100009F04((uint64_t *)&unk_100325960);
  Dependency.init(dependencyId:config:)();
  uint64_t v2 = type metadata accessor for CustodianRecord();
  sub_100009F04((uint64_t *)&unk_100324D30);
  Dependency.wrappedValue.getter();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v34 contactForHandle:v3];

  swift_unknownObjectRelease();
  if (v4)
  {
    id v5 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain();
    id v6 = v4;
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v5 initWithHandle:v7 contact:v6];
    swift_release();
  }
  else
  {
    swift_release();
    id v8 = 0;
  }
  if ((sub_1000A8EAC() & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(v2 + 32));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v11)
  {
    sub_100080B3C(*v9, v9[1]);
    if (v12) {
      goto LABEL_7;
    }
  }
  if (!v8) {
    return 0;
  }
  id v8 = v8;
  id v13 = [v8 firstName];
  if (!v13)
  {
LABEL_19:

    goto LABEL_20;
  }
  char v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v18 = sub_100080B3C(v15, v17);
  uint64_t v20 = v19;

  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_20;
  }
  id v8 = v8;
  id v21 = [v8 lastName];
  if (!v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  unint64_t v22 = v21;
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  uint64_t v26 = sub_100080B3C(v23, v25);
  uint64_t v28 = v27;

  swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_17:

    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v29 = (void *)(v1 + *(int *)(v2 + 28));
  uint64_t v30 = v29[1];
  if (v30)
  {
    if (*v29 == v18 && v30 == v20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v32)
    {
LABEL_7:
      swift_bridgeObjectRelease();
LABEL_20:

      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();

    return 1;
  }
  if (v10 == v26 && v11 == v28) {
    goto LABEL_7;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();

  return (v33 & 1) == 0;
}

uint64_t sub_1000AC158@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000AB0E4(a1, a2);
}

uint64_t sub_1000AC170(void *a1)
{
  return sub_1000ABA10(a1);
}

uint64_t sub_1000AC188(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000AC720((unint64_t *)&unk_100324D40, (void (*)(uint64_t))type metadata accessor for CustodianRecord);
  uint64_t result = sub_1000AC720(&qword_100323590, (void (*)(uint64_t))type metadata accessor for CustodianRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1000AC20C(uint64_t a1)
{
  uint64_t result = sub_1000AC720((unint64_t *)&unk_100324D50, (void (*)(uint64_t))type metadata accessor for CustodianRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000AC264()
{
  unint64_t result = qword_100324D68;
  if (!qword_100324D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324D68);
  }
  return result;
}

id sub_1000AC2B8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v47 = a4;
  int v45 = a3;
  int v46 = a2;
  uint64_t v5 = sub_100009F04((uint64_t *)&unk_100321CE0);
  __chkstk_darwin(v5 - 8, v6);
  id v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PersonNameComponents();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  id v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = (int *)type metadata accessor for CustodianRecord();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v42 = *(void *)(a1 + v14[9]);
  NSString v43 = String._bridgeToObjectiveC()();
  uint64_t v15 = (uint64_t *)(a1 + v14[7]);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v17)
  {
    swift_bridgeObjectRetain();
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v41 = 0;
  }
  uint64_t v18 = (uint64_t *)(a1 + v14[8]);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (v20)
  {
    swift_bridgeObjectRetain();
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v40 = 0;
  }
  PersonNameComponents.init()();
  if (v17) {
    sub_100080B3C(v16, v17);
  }
  PersonNameComponents.givenName.setter();
  if (v20) {
    sub_100080B3C(v19, v20);
  }
  PersonNameComponents.familyName.setter();
  id v21 = self;
  Class v22 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  id v23 = [v21 localizedStringFromPersonNameComponents:v22 style:0 options:0];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100019730(a1 + v14[16], (uint64_t)v8, (uint64_t *)&unk_100321CE0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  Class v27 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v8, 1, v25) != 1)
  {
    Class v27 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
  }
  if (*(void *)(a1 + v14[13] + 8))
  {
    swift_bridgeObjectRetain();
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v28 = 0;
  }
  if (*(void *)(a1 + v14[14] + 8))
  {
    swift_bridgeObjectRetain();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v29 = 0;
  }
  uint64_t v30 = a1 + v14[15];
  if (*(unsigned char *)(v30 + 8)) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *(void *)v30;
  }
  id v32 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  BYTE1(v39) = v45 & 1;
  LOBYTE(v39) = v46 & 1;
  uint64_t v34 = v43;
  Class v33 = isa;
  uint64_t v35 = v41;
  long long v36 = v40;
  id v37 = [v32 initWithID:isa status:v42 handle:v43 firstName:v41 lastName:v40 displayName:v24 isAcceptedAndShared:v39 isIdMSConfirmed:v47 preflightStatus:v27 otCustodianID:v28 keyCreatedOnBuild:v29 repairDate:v31];

  sub_10002F538(a1);
  return v37;
}

uint64_t sub_1000AC720(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustodianRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CustodianRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *uint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AC8C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecord.CodingKeys()
{
  return &type metadata for CustodianRecord.CodingKeys;
}

char *sub_1000AC8FC(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v51 = *(void *)(v7 - 8);
    int v8 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v8(a1, a2, v7);
    uint64_t v50 = v8;
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    char v14 = &a1[v10];
    uint64_t v15 = &a2[v10];
    uint64_t v16 = *((void *)v15 + 1);
    *(void *)char v14 = *(void *)v15;
    *((void *)v14 + 1) = v16;
    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    uint64_t v19 = &a1[v17];
    uint64_t v20 = &a2[v17];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v21;
    *(void *)&a1[v18] = *(void *)&a2[v18];
    uint64_t v22 = a3[10];
    id v23 = &a1[v22];
    NSString v24 = (uint64_t *)&a2[v22];
    unint64_t v25 = *(void *)&a2[v22 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)id v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v27 = *v24;
      sub_100013140(*v24, v25);
      *(void *)id v23 = v27;
      *((void *)v23 + 1) = v25;
    }
    uint64_t v28 = a3[11];
    NSString v29 = (uint64_t *)&a1[v28];
    uint64_t v30 = (uint64_t *)&a2[v28];
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    sub_100013140(*v30, v32);
    *NSString v29 = v31;
    v29[1] = v32;
    uint64_t v33 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    uint64_t v36 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v36;
    uint64_t v37 = a3[14];
    uint64_t v38 = a3[15];
    uint64_t v39 = &a1[v37];
    NSString v40 = &a2[v37];
    uint64_t v41 = *((void *)v40 + 1);
    *(void *)uint64_t v39 = *(void *)v40;
    *((void *)v39 + 1) = v41;
    uint64_t v42 = &a1[v38];
    NSString v43 = &a2[v38];
    v42[8] = v43[8];
    *(void *)uint64_t v42 = *(void *)v43;
    uint64_t v44 = a3[16];
    int v45 = &a1[v44];
    int v46 = &a2[v44];
    uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v47(v46, 1, v7))
    {
      uint64_t v48 = sub_100009F04((uint64_t *)&unk_100321CE0);
      memcpy(v45, v46, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      v50(v45, v46, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v45, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1000ACBD0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  v10(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned int v6 = (uint64_t *)(a1 + a2[10]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_100013198(*v6, v7);
  }
  sub_100013198(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[16];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  }
  return result;
}

char *sub_1000ACD70(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v6 - 8);
  unint64_t v7 = *(void (**)(void *, const void *, uint64_t))(v49 + 16);
  v7(a1, a2, v6);
  uint64_t v48 = v7;
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  char v14 = &a2[v9];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + 1) = v20;
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v21 = a3[10];
  uint64_t v22 = &a1[v21];
  id v23 = (uint64_t *)&a2[v21];
  unint64_t v24 = *(void *)&a2[v21 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v25 = *v23;
    sub_100013140(*v23, v24);
    *(void *)uint64_t v22 = v25;
    *((void *)v22 + 1) = v24;
  }
  uint64_t v26 = a3[11];
  uint64_t v27 = (uint64_t *)&a1[v26];
  uint64_t v28 = (uint64_t *)&a2[v26];
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_100013140(*v28, v30);
  *uint64_t v27 = v29;
  v27[1] = v30;
  uint64_t v31 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  unint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)unint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = a3[14];
  uint64_t v36 = a3[15];
  uint64_t v37 = &a1[v35];
  uint64_t v38 = &a2[v35];
  uint64_t v39 = *((void *)v38 + 1);
  *(void *)uint64_t v37 = *(void *)v38;
  *((void *)v37 + 1) = v39;
  NSString v40 = &a1[v36];
  uint64_t v41 = &a2[v36];
  v40[8] = v41[8];
  *(void *)NSString v40 = *(void *)v41;
  uint64_t v42 = a3[16];
  NSString v43 = &a1[v42];
  uint64_t v44 = &a2[v42];
  int v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v45(v44, 1, v6))
  {
    uint64_t v46 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v43, v44, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    v48(v43, v44, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v43, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1000ACFF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  char v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v18 = a3[10];
  uint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  unint64_t v21 = *(void *)(a2 + v18 + 8);
  if (*(void *)(a1 + v18 + 8) >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v20;
      sub_100013140(v22, v21);
      *uint64_t v19 = v22;
      v19[1] = v21;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
    sub_1000AD378((uint64_t)v19);
LABEL_6:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_8;
  }
  uint64_t v23 = *v20;
  sub_100013140(v23, v21);
  uint64_t v24 = *v19;
  unint64_t v25 = v19[1];
  *uint64_t v19 = v23;
  v19[1] = v21;
  sub_100013198(v24, v25);
LABEL_8:
  uint64_t v26 = a3[11];
  uint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_100013140(*v28, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *uint64_t v27 = v29;
  v27[1] = v30;
  sub_100013198(v31, v32);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v33 = a3[13];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[14];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (void *)(a2 + v36);
  *uint64_t v37 = *v38;
  v37[1] = v38[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v39 = a3[15];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t *)(a2 + v39);
  uint64_t v42 = *v41;
  *(unsigned char *)(v40 + 8) = *((unsigned char *)v41 + 8);
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = a3[16];
  uint64_t v44 = (void *)(a1 + v43);
  int v45 = (const void *)(a2 + v43);
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v29) = v46(a1 + v43, 1, v6);
  int v47 = v46((uint64_t)v45, 1, v6);
  if (!v29)
  {
    if (!v47)
    {
      v8((uint64_t)v44, (uint64_t)v45, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v44, v6);
    goto LABEL_13;
  }
  if (v47)
  {
LABEL_13:
    uint64_t v48 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v44, v45, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v44, 0, 1, v6);
  return a1;
}

uint64_t sub_1000AD378(uint64_t a1)
{
  return a1;
}

char *sub_1000AD3CC(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  uint64_t v10 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  uint64_t v12 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  uint64_t v13 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  char v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)char v14 = *(void *)v15;
  uint64_t v16 = a3[16];
  uint64_t v17 = &a1[v16];
  v14[8] = v15[8];
  uint64_t v18 = &a2[v16];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    uint64_t v19 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *sub_1000AD5A4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  *(void *)uint64_t v15 = v18;
  *((void *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v19];
  unint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *(void *)uint64_t v20 = v23;
  *((void *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v25 = (uint64_t)&a1[v24];
  uint64_t v26 = &a2[v24];
  unint64_t v27 = *(void *)&a1[v24 + 8];
  if (v27 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v28 = *((void *)v26 + 1);
  if (v28 >> 60 == 15)
  {
    sub_1000AD378(v25);
LABEL_4:
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    goto LABEL_6;
  }
  uint64_t v29 = *(void *)v25;
  *(void *)uint64_t v25 = *(void *)v26;
  *(void *)(v25 + 8) = v28;
  sub_100013198(v29, v27);
LABEL_6:
  uint64_t v30 = a3[11];
  uint64_t v31 = *(void *)&a1[v30];
  unint64_t v32 = *(void *)&a1[v30 + 8];
  *(_OWORD *)&a1[v30] = *(_OWORD *)&a2[v30];
  sub_100013198(v31, v32);
  uint64_t v33 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = (uint64_t *)&a2[v33];
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[14];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = (uint64_t *)&a2[v38];
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  uint64_t v44 = a3[16];
  int v45 = &a1[v43];
  uint64_t v46 = &a2[v43];
  *(void *)int v45 = *(void *)v46;
  v45[8] = v46[8];
  int v47 = &a1[v44];
  uint64_t v48 = &a2[v44];
  uint64_t v49 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  int v50 = v49(&a1[v44], 1, v6);
  int v51 = v49(v48, 1, v6);
  if (!v50)
  {
    if (!v51)
    {
      v8(v47, v48, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v47, v6);
    goto LABEL_11;
  }
  if (v51)
  {
LABEL_11:
    uint64_t v52 = sub_100009F04((uint64_t *)&unk_100321CE0);
    memcpy(v47, v48, *(void *)(*(void *)(v52 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v47, v48, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v47, 0, 1, v6);
  return a1;
}

uint64_t sub_1000AD88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AD8A0);
}

uint64_t sub_1000AD8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 64);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1000AD9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AD9E8);
}

uint64_t sub_1000AD9E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_100009F04((uint64_t *)&unk_100321CE0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 64);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000ADB1C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_10001AAF8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_1000ADC38()
{
  unint64_t result = qword_100324E50;
  if (!qword_100324E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324E50);
  }
  return result;
}

unint64_t sub_1000ADC90()
{
  unint64_t result = qword_100324E58;
  if (!qword_100324E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324E58);
  }
  return result;
}

unint64_t sub_1000ADCE8()
{
  unint64_t result = qword_100324E60;
  if (!qword_100324E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324E60);
  }
  return result;
}

uint64_t sub_1000ADD3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010029BC00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029BC20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x676E697070617277 && a2 == 0xEE00434B5279654BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000010029A0E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000010029A100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010029BC40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6144726961706572 && a2 == 0xEA00000000006574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6F43726961706572 && a2 == 0xEB00000000746E75)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 12;
    }
    else {
      return 13;
    }
  }
}

void sub_1000AE2BC(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a6;
  uint64_t v73 = a5;
  id v78 = a1;
  uint64_t v79 = a3;
  int v8 = a4 & 0x100;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  LODWORD(v71) = a4;
  if (a4)
  {
    sub_100108D78(a2, v79);
    uint64_t v14 = (void *)sub_100109A18();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  uint64_t v15 = &unk_100320000;
  int v72 = v8;
  if (v8)
  {
    if (qword_100320B80 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100007288(v16, (uint64_t)qword_10033E730);
    uint64_t v17 = v78;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v77 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t aBlock = (uint64_t)v17;
      unint64_t v21 = v17;
      uint64_t v15 = (void *)&unk_100320000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v77 = v17;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "shouldStartCloudSubscription is true. Creating subscriptions. Database: %@", v20, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v18 = v17;
    }

    *(void *)(swift_allocObject() + 16) = v17;
    sub_100009F04(&qword_100324E88);
    swift_allocObject();
    uint64_t v22 = v17;
    Future.init(_:)();
    swift_release();
  }
  os_log_type_t v77 = (void *)swift_allocObject();
  v77[2] = &_swiftEmptyArrayStorage;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = &_swiftEmptyArrayStorage;
  id v24 = [objc_allocWithZone((Class)CKFetchDatabaseChangesOperation) initWithPreviousServerChangeToken:v14];
  if (v15[368] != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_100007288(v25, (uint64_t)qword_10033E730);
  swift_bridgeObjectRetain_n();
  id v27 = v14;
  uint64_t v70 = v26;
  unint64_t v28 = v14;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v76 = a2;
  if (v31)
  {
    id v69 = v24;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t aBlock = v33;
    *(_DWORD *)uint64_t v32 = 136315394;
    unint64_t v34 = v79;
    swift_bridgeObjectRetain();
    uint64_t v80 = sub_100135190(a2, v34, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    if (v28)
    {
      id v35 = [v27 data];
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      void v68[2] = v33;
      uint64_t v37 = v36;
      unint64_t v39 = v38;

      uint64_t v40 = sub_100254A64(v37, v39);
      v68[1] = &aBlock;
      uint64_t v80 = (uint64_t)v40;
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_100013198(v37, v39);
    }
    else
    {
      unint64_t v43 = 0xE300000000000000;
      uint64_t v41 = 7104878;
    }
    uint64_t v80 = sub_100135190(v41, v43, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Old database (%s) change token: %s", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v76;
    id v24 = v69;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  [v24 setFetchAllChanges:1];
  id v44 = [v24 configuration];
  if (!v44)
  {
    __break(1u);
    goto LABEL_25;
  }
  int v45 = v44;
  id v69 = v27;
  uint64_t v46 = a2;
  [v44 setAutomaticallyRetryNetworkFailures:0];

  id v47 = [v24 configuration];
  if (!v47)
  {
LABEL_25:
    __break(1u);
    return;
  }
  uint64_t v48 = v47;
  char v49 = v71 & 1;
  [v47 setDiscretionaryNetworkBehavior:0];

  int v50 = v77;
  id v85 = sub_1000B246C;
  uint64_t v86 = v77;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  uint64_t v83 = (void (*)(uint64_t, void *, uint64_t, void *))sub_1000AED40;
  id v84 = &unk_1002F9188;
  int v51 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v24 setRecordZoneWithIDChangedBlock:v51];
  _Block_release(v51);
  id v85 = sub_1000B246C;
  uint64_t v86 = (void *)v23;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  uint64_t v83 = (void (*)(uint64_t, void *, uint64_t, void *))sub_1000AED40;
  id v84 = &unk_1002F91B0;
  uint64_t v52 = _Block_copy(&aBlock);
  uint64_t v71 = v23;
  swift_retain();
  swift_release();
  [v24 setRecordZoneWithIDWasDeletedBlock:v52];
  _Block_release(v52);
  uint64_t v53 = swift_allocObject();
  id v54 = v78;
  *(void *)(v53 + 16) = v78;
  *(void *)(v53 + 24) = v46;
  uint64_t v55 = v74;
  *(void *)(v53 + 32) = v79;
  *(void *)(v53 + 40) = v55;
  *(unsigned char *)(v53 + 48) = v49;
  *(unsigned char *)(v53 + 49) = BYTE1(v72);
  uint64_t v56 = v75;
  *(void *)(v53 + 56) = v73;
  *(void *)(v53 + 64) = v56;
  *(void *)(v53 + 72) = v50;
  id v85 = sub_1000B24E0;
  uint64_t v86 = (void *)v53;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v82 = 1107296256;
  uint64_t v83 = sub_1000B08E8;
  id v84 = &unk_1002F9200;
  char v57 = _Block_copy(&aBlock);
  id v58 = v54;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v24 setFetchDatabaseChangesCompletionBlock:v57];
  _Block_release(v57);
  swift_bridgeObjectRetain_n();
  id v59 = v24;
  char v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = swift_slowAlloc();
    id v78 = v58;
    uint64_t v63 = v62;
    uint64_t v64 = (void *)swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136315394;
    unint64_t v65 = v79;
    swift_bridgeObjectRetain();
    uint64_t v80 = sub_100135190(v76, v65, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v63 + 12) = 2112;
    uint64_t v80 = (uint64_t)v59;
    id v66 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v64 = v59;

    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Fetching database (%s) changes with operation: %@", (uint8_t *)v63, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    id v58 = v78;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  long long v67 = v69;
  [v58 addOperation:v59];

  swift_release();
  swift_release();
}

uint64_t sub_1000AED44(void *a1, uint64_t a2)
{
  swift_beginAccess();
  id v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t sub_1000AEDE0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, void (*a9)(uint64_t), uint64_t a10, uint64_t a11)
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v13 = a9;
  uint64_t v14 = type metadata accessor for Logger();
  sub_100007288(v14, (uint64_t)qword_10033E730);
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v38 = v14;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    unint64_t v39 = a1;
    if (a1)
    {
      id v19 = [v15 data];
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      sub_100254A64(v20, v22);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v25 = v24;
      swift_bridgeObjectRelease();
      sub_100013198(v20, v22);
    }
    else
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    id v44 = (void *)sub_100135190(v23, v25, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "CK fetch database changes complete. token: %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v13 = a9;
    uint64_t v14 = v38;
    a1 = v39;
    uint64_t v26 = a10;
    if (!a3) {
      goto LABEL_17;
    }
LABEL_7:
    swift_errorRetain();
    if (qword_100320B78 != -1) {
      swift_once();
    }
    sub_100007288(v14, (uint64_t)qword_10033E718);
    swift_errorRetain();
    swift_errorRetain();
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_errorRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v30 = String.init<A>(describing:)();
      id v44 = (void *)sub_100135190(v30, v31, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error during fetch database changes operation: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    v45[0] = a3;
    swift_errorRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast())
    {
      sub_1000B23D4();
      _BridgedStoredNSError.code.getter();
      if (v45[0] == 21)
      {
        sub_100108F18(a5, a6, 0);
        sub_1000AE2BC(a4, a5, a6, a8 & 0x101, v13, v26);

        return swift_errorRelease();
      }
    }
    swift_errorRetain();
    v13(a3);
    swift_errorRelease();
    return swift_errorRelease();
  }

  uint64_t v26 = a10;
  if (a3) {
    goto LABEL_7;
  }
LABEL_17:
  swift_beginAccess();
  if (*(void *)(a11 + 16) >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_19;
    }
  }
  else if (*(void *)((*(void *)(a11 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    swift_beginAccess();
    uint64_t v32 = *(void *)(a11 + 16);
    uint64_t v33 = (void *)swift_allocObject();
    void v33[2] = a4;
    void v33[3] = a5;
    v33[4] = a6;
    void v33[5] = a1;
    v33[6] = v13;
    v33[7] = v26;
    id v34 = v15;
    swift_bridgeObjectRetain();
    id v35 = a4;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000AF434(v35, v32, a8 & 0x101, (uint64_t)sub_1000B2588, (uint64_t)v33);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  sub_100108F18(a5, a6, a1);
  return ((uint64_t (*)(void))v13)(0);
}

void sub_1000AF434(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v129 = a5;
  uint64_t v128 = a4;
  LODWORD(v5) = a3;
  uint64_t v139 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v152 = &v125[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v138 = type metadata accessor for URL();
  uint64_t v11 = *(NSObject **)(v138 - 8);
  uint64_t v13 = __chkstk_darwin(v138, v12);
  id v137 = &v125[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v15);
  uint64_t v136 = &v125[-v16];
  if (qword_100320B80 != -1) {
LABEL_98:
  }
    swift_once();
  uint64_t v17 = sub_100007288(v7, (uint64_t)qword_10033E730);
  swift_bridgeObjectRetain_n();
  uint64_t v148 = v17;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v132 = a2;
  uint64_t v149 = v7;
  if (v20)
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    LODWORD(v163) = v5;
    aBlock._countAndFlagsBits = v21;
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10000850C(0, &qword_100323560);
    swift_bridgeObjectRetain();
    uint64_t v22 = Array.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v171 = sub_100135190(v22, v24, &aBlock._countAndFlagsBits);
    a2 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "CK ZoneIDs changed: %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy();
    LODWORD(v5) = v163;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v25) {
      return;
    }
  }
  else
  {
    uint64_t v25 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v25) {
      return;
    }
  }
  int v147 = v5 & 1;
  int v126 = (unsigned __int16)v5;
  unint64_t v146 = a2 & 0xC000000000000001;
  uint64_t v164 = (uint64_t)&_swiftEmptyDictionarySingleton;
  uint64_t v131 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v130 = a2 + 32;
  uint64_t v135 = (uint64_t *)&v11[1];
  uint64_t v145 = (void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v143 = (void (**)(unsigned char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  *(void *)&long long v26 = 136315394;
  long long v134 = v26;
  id v133 = (char *)&type metadata for Any + 8;
  long long v161 = xmmword_1002A9C00;
  uint64_t v144 = v25;
  do
  {
    if (v146)
    {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((unint64_t)v8 >= *(void *)(v131 + 16)) {
        goto LABEL_94;
      }
      id v27 = *(id *)(v130 + 8 * v8);
    }
    os_log_type_t v28 = v27;
    BOOL v29 = __OFADD__(v8++, 1);
    if (v29) {
      goto LABEL_90;
    }
    id v30 = [objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration) init];
    id v160 = v30;
    uint64_t v157 = v8;
    if (v147)
    {
      type metadata accessor for LocalCache();
      unint64_t v31 = v137;
      sub_10000A280();
      uint64_t v11 = v136;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v7 = *v135;
      uint64_t v32 = v138;
      ((void (*)(unsigned char *, uint64_t))*v135)(v31, v138);
      sub_1001098C0();
      id v33 = [v28 ownerName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      v37._countAndFlagsBits = v34;
      v37._object = v36;
      URL.appendPathComponent(_:)(v37);
      swift_bridgeObjectRelease();
      id v38 = [v28 zoneName];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      aBlock._countAndFlagsBits = v39;
      aBlock._object = v41;
      uint64_t v5 = (uint64_t)v160;
      v42._countAndFlagsBits = 0x6E656B6F742ELL;
      v42._object = (void *)0xE600000000000000;
      String.append(_:)(v42);
      URL.appendPathComponent(_:)(aBlock);
      swift_bridgeObjectRelease();
      uint64_t v8 = sub_100109A18();
      ((void (*)(NSObject *, uint64_t))v7)(v11, v32);
    }
    else
    {
      uint64_t v5 = (uint64_t)v30;
      uint64_t v8 = 0;
    }
    [(id)v5 setPreviousServerChangeToken:v8];
    uint64_t v43 = v164;
    if ((v164 & 0xC000000000000001) != 0)
    {
      if (v164 >= 0) {
        uint64_t v43 = v164 & 0xFFFFFFFFFFFFFF8;
      }
      id v44 = v28;
      id v45 = (id)v5;
      uint64_t v46 = __CocoaDictionary.count.getter();
      if (__OFADD__(v46, 1)) {
        goto LABEL_92;
      }
      uint64_t v43 = sub_1000B1FEC(v43, v46 + 1);
    }
    else
    {
      id v47 = v28;
      id v48 = (id)v5;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock._countAndFlagsBits = v43;
    uint64_t v164 = 0x8000000000000000;
    uint64_t v7 = sub_100135C00((uint64_t)v28);
    uint64_t v51 = *(void *)(v43 + 16);
    BOOL v52 = (v50 & 1) == 0;
    uint64_t v53 = v51 + v52;
    if (__OFADD__(v51, v52)) {
      goto LABEL_91;
    }
    LODWORD(v5) = v50;
    if (*(void *)(v43 + 24) >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10022D3F4();
      }
    }
    else
    {
      sub_10022A4C0(v53, isUniquelyReferenced_nonNull_native);
      unint64_t v54 = sub_100135C00((uint64_t)v28);
      if ((v5 & 1) != (v55 & 1)) {
        goto LABEL_106;
      }
      uint64_t v7 = v54;
    }
    countAndFlagsBits = (void *)aBlock._countAndFlagsBits;
    if (v5)
    {
      uint64_t v57 = *(void *)(aBlock._countAndFlagsBits + 56);

      *(void *)(v57 + 8 * v7) = v160;
    }
    else
    {
      *(void *)(aBlock._countAndFlagsBits + 8 * ((unint64_t)v7 >> 6) + 64) |= 1 << v7;
      *(void *)(countAndFlagsBits[6] + 8 * v7) = v28;
      *(void *)(countAndFlagsBits[7] + 8 * v7) = v160;
      uint64_t v58 = countAndFlagsBits[2];
      BOOL v29 = __OFADD__(v58, 1);
      uint64_t v59 = v58 + 1;
      if (v29) {
        goto LABEL_93;
      }
      countAndFlagsBits[2] = v59;
      id v60 = v28;
    }
    uint64_t v164 = (uint64_t)countAndFlagsBits;

    swift_bridgeObjectRelease();
    os_log_type_t v61 = v152;
    uint64_t v7 = v149;
    (*v145)(v152, v148, v149);
    id v62 = v28;
    id v63 = (id)v8;
    id v64 = v62;
    uint64_t v5 = (uint64_t)v63;
    uint64_t v11 = Logger.logObject.getter();
    int v151 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, (os_log_type_t)v151))
    {

      (*v143)(v61, v7);
      uint64_t v8 = v157;
      continue;
    }
    id v150 = (id)v5;
    uint64_t v65 = swift_slowAlloc();
    uint64_t v140 = swift_slowAlloc();
    uint64_t v171 = v140;
    *(_DWORD *)uint64_t v65 = v134;
    id v66 = [v64 zoneName];
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v68 = v64;
    unint64_t v70 = v69;

    *(void *)(v65 + 4) = sub_100135190(v67, v70, &v171);
    id v142 = v68;

    swift_bridgeObjectRelease();
    uint64_t v141 = v65;
    *(_WORD *)(v65 + 12) = 2080;
    if (!v8)
    {
      unint64_t v75 = 0xE300000000000000;
      uint64_t v76 = 7104878;
      goto LABEL_73;
    }
    id v71 = [v150 data];
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v73 = v72;

    unint64_t v158 = v73;
    uint64_t v74 = (void *)(v73 >> 62);
    uint64_t v5 = (uint64_t)&_swiftEmptyArrayStorage;
    switch((unint64_t)v74)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v8), v8)) {
          goto LABEL_96;
        }
        a2 = HIDWORD(v8) - (int)v8;
LABEL_42:
        if (!a2)
        {
          a2 = v132;
          goto LABEL_72;
        }
        unint64_t v153 = HIDWORD(v8);
        uint64_t v165 = &_swiftEmptyArrayStorage;
        int64_t v79 = a2 & ~(a2 >> 63);
        sub_100228924(0, v79, 0);
        uint64_t v5 = (uint64_t)v165;
        uint64_t v156 = (int)v8;
        if (v74)
        {
          if (v74 == 1) {
            uint64_t v7 = v156;
          }
          else {
            uint64_t v7 = *(void *)(v8 + 16);
          }
          if (a2 < 0) {
            goto LABEL_95;
          }
        }
        else
        {
          if (a2 < 0)
          {
            __break(1u);
LABEL_102:

            __break(1u);
LABEL_103:

            __break(1u);
          }
          uint64_t v7 = 0;
        }
        unint64_t v159 = v158 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v154 = v8 >> 32;
        uint64_t v155 = BYTE6(v158);
        uint64_t v162 = v74;
        uint64_t v163 = v11;
        break;
      case 2uLL:
        uint64_t v78 = *(void *)(v8 + 16);
        uint64_t v77 = *(void *)(v8 + 24);
        a2 = v77 - v78;
        if (!__OFSUB__(v77, v78)) {
          goto LABEL_42;
        }
        goto LABEL_97;
      case 3uLL:
        goto LABEL_72;
      default:
        a2 = BYTE6(v158);
        goto LABEL_42;
    }
    do
    {
      if (!v79)
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if (v74)
      {
        if (v74 == 1)
        {
          if (v7 < v156 || v7 >= v154) {
            goto LABEL_86;
          }
          uint64_t v80 = __DataStorage._bytes.getter();
          if (!v80) {
            goto LABEL_102;
          }
          uint64_t v81 = v80;
          uint64_t v82 = __DataStorage._offset.getter();
          uint64_t v83 = v7 - v82;
          if (__OFSUB__(v7, v82)) {
            goto LABEL_88;
          }
        }
        else
        {
          if (v7 < *(void *)(v8 + 16)) {
            goto LABEL_85;
          }
          if (v7 >= *(void *)(v8 + 24)) {
            goto LABEL_87;
          }
          uint64_t v85 = __DataStorage._bytes.getter();
          if (!v85) {
            goto LABEL_103;
          }
          uint64_t v81 = v85;
          uint64_t v86 = __DataStorage._offset.getter();
          uint64_t v83 = v7 - v86;
          if (__OFSUB__(v7, v86)) {
            goto LABEL_89;
          }
        }
        char v84 = *(unsigned char *)(v81 + v83);
      }
      else
      {
        if (v7 >= v155) {
          goto LABEL_84;
        }
        LOWORD(aBlock._countAndFlagsBits) = v8;
        BYTE2(aBlock._countAndFlagsBits) = BYTE2(v8);
        BYTE3(aBlock._countAndFlagsBits) = BYTE3(v8);
        BYTE4(aBlock._countAndFlagsBits) = v153;
        BYTE5(aBlock._countAndFlagsBits) = BYTE5(v8);
        BYTE6(aBlock._countAndFlagsBits) = BYTE6(v8);
        HIBYTE(aBlock._countAndFlagsBits) = HIBYTE(v8);
        LODWORD(aBlock._object) = v158;
        WORD2(aBlock._object) = WORD2(v158);
        char v84 = *((unsigned char *)&aBlock._countAndFlagsBits + v7);
      }
      sub_100009F04(&qword_100326D20);
      uint64_t v87 = swift_allocObject();
      *(_OWORD *)(v87 + 16) = v161;
      *(void *)(v87 + 56) = &type metadata for UInt8;
      *(void *)(v87 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v87 + 32) = v84;
      uint64_t v74 = (void *)String.init(format:_:)();
      uint64_t v89 = v88;
      uint64_t v165 = (void *)v5;
      unint64_t v91 = *(void *)(v5 + 16);
      unint64_t v90 = *(void *)(v5 + 24);
      if (v91 >= v90 >> 1)
      {
        sub_100228924(v90 > 1, v91 + 1, 1);
        uint64_t v5 = (uint64_t)v165;
      }
      *(void *)(v5 + 16) = v91 + 1;
      uint64_t v92 = v5 + 16 * v91;
      *(void *)(v92 + 32) = v74;
      *(void *)(v92 + 40) = v89;
      ++v7;
      --v79;
      --a2;
      LODWORD(v74) = v162;
      uint64_t v11 = v163;
    }
    while (a2);
    a2 = v132;
    uint64_t v7 = v149;
LABEL_72:
    aBlock._countAndFlagsBits = v5;
    sub_100009F04((uint64_t *)&unk_100328450);
    sub_100098EA8();
    uint64_t v76 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v75 = v93;
    swift_bridgeObjectRelease();
    sub_100013198(v8, v158);
LABEL_73:
    uint64_t v8 = v157;
    uint64_t v5 = (uint64_t)v150;
    uint64_t v94 = sub_100135190(v76, v75, &v171);
    NSString v95 = (uint8_t *)v141;
    *(void *)(v141 + 14) = v94;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v151, "Old change token for %s: %s", v95, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v143)(v152, v7);
  }
  while (v8 != v144);
  swift_bridgeObjectRelease();
  id v96 = Logger.logObject.getter();
  os_log_type_t v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    unint64_t v98 = (uint8_t *)swift_slowAlloc();
    aBlock._countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)unint64_t v98 = 136315138;
    swift_beginAccess();
    sub_10000850C(0, &qword_100323560);
    sub_10000850C(0, &qword_100324E78);
    sub_1000B236C();
    swift_bridgeObjectRetain();
    uint64_t v99 = Dictionary.description.getter();
    unint64_t v101 = v100;
    swift_bridgeObjectRelease();
    uint64_t v102 = v99;
    a2 = v132;
    uint64_t v171 = sub_100135190(v102, v101, &aBlock._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v96, v97, "Fetching zones with optionsByRecordZoneID: %s", v98, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v104 = swift_allocObject();
  *(void *)(v104 + 16) = &_swiftEmptyArrayStorage;
  sub_10000850C(0, &qword_100324E70);
  swift_beginAccess();
  Swift::Bool v105 = v164;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v172.value._rawValue = (void *)a2;
  v172.is_nil = v105;
  v106.super.super.super.super.Class isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v172, v173).super.super.super.super.isa;
  id v107 = [(objc_class *)v106.super.super.super.super.isa configuration];
  if (!v107)
  {
    __break(1u);
    goto LABEL_105;
  }
  unint64_t v108 = v107;
  [v107 setAutomaticallyRetryNetworkFailures:0];

  id v109 = [(objc_class *)v106.super.super.super.super.isa configuration];
  if (!v109)
  {
LABEL_105:
    __break(1u);
LABEL_106:
    sub_10000850C(0, &qword_100323560);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x1000B08D8);
  }
  uint64_t v110 = v109;
  [v109 setDiscretionaryNetworkBehavior:0];

  [(objc_class *)v106.super.super.super.super.isa setFetchAllChanges:1];
  uint64_t v169 = sub_1000B2278;
  uint64_t v170 = (void *)v104;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v167 = sub_1000AED40;
  uint64_t v168 = &unk_1002F9070;
  uint64_t v111 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [(objc_class *)v106.super.super.super.super.isa setRecordChangedBlock:v111];
  _Block_release(v111);
  swift_retain();
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v104;
  *(void *)(v112 + 24) = v103;
  id v113 = v139;
  uint64_t v114 = v127;
  *(void *)(v112 + 32) = v139;
  *(void *)(v112 + 40) = v114;
  *(unsigned char *)(v112 + 48) = v147;
  *(unsigned char *)(v112 + 49) = BYTE1(v126) & 1;
  uint64_t v169 = sub_1000B22D8;
  uint64_t v170 = (void *)v112;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v167 = (uint64_t (*)())sub_1000B1B78;
  uint64_t v168 = &unk_1002F90C0;
  uint64_t v115 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  uint64_t v116 = v113;
  swift_retain();
  swift_release();
  [(objc_class *)v106.super.super.super.super.isa setRecordZoneFetchCompletionBlock:v115];
  _Block_release(v115);
  uint64_t v117 = (void *)swift_allocObject();
  uint64_t v118 = v128;
  v117[2] = a2;
  v117[3] = v118;
  v117[4] = v129;
  uint64_t v169 = sub_1000B2360;
  uint64_t v170 = v117;
  aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
  aBlock._object = (void *)1107296256;
  uint64_t v167 = (uint64_t (*)())sub_10025ED44;
  uint64_t v168 = &unk_1002F9110;
  id v119 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [(objc_class *)v106.super.super.super.super.isa setFetchRecordZoneChangesCompletionBlock:v119];
  _Block_release(v119);
  uint64_t v120 = v106.super.super.super.super.isa;
  uint64_t v121 = Logger.logObject.getter();
  os_log_type_t v122 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v121, v122))
  {
    uint64_t v123 = (uint8_t *)swift_slowAlloc();
    uint64_t v162 = (void *)swift_slowAlloc();
    uint64_t v163 = v116;
    *(_DWORD *)uint64_t v123 = 138412290;
    aBlock._countAndFlagsBits = (uint64_t)v120;
    uint64_t v124 = v120;
    uint64_t v116 = v163;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v162 = v120;

    _os_log_impl((void *)&_mh_execute_header, v121, v122, "Fetching record zone changes with operation: %@", v123, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v121 = v120;
  }

  [v116 addOperation:v120];
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
}

void sub_1000B08E8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();
}

uint64_t sub_1000B097C(void *a1, uint64_t a2)
{
  if (qword_100320B78 != -1) {
    swift_once();
  }
  id v4 = (void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E718);
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = CKRecord.recordType.getter();
    sub_100135190(v10, v11, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    id v12 = [v6 debugDescription];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_100135190(v13, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Record changed: %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_beginAccess();
  id v16 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

void sub_1000B0C20(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000B0C88(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (qword_100320B78 != -1) {
    swift_once();
  }
  os_log_type_t v8 = (char **)(a4 + 16);
  uint64_t v9 = type metadata accessor for Logger();
  sub_100007288(v9, (uint64_t)qword_10033E718);
  swift_bridgeObjectRetain_n();
  id v10 = a1;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_100135190(a2, a3, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2112;
    id v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v22 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Record deleted: %s %@", (uint8_t *)v13, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  unint64_t v15 = *v8;
  swift_bridgeObjectRetain();
  id v16 = v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *os_log_type_t v8 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v15 = sub_100168B6C(0, *((void *)v15 + 2) + 1, 1, v15);
    *os_log_type_t v8 = v15;
  }
  unint64_t v19 = *((void *)v15 + 2);
  unint64_t v18 = *((void *)v15 + 3);
  if (v19 >= v18 >> 1)
  {
    unint64_t v15 = sub_100168B6C((char *)(v18 > 1), v19 + 1, 1, v15);
    *os_log_type_t v8 = v15;
  }
  *((void *)v15 + 2) = v19 + 1;
  BOOL v20 = &v15[24 * v19];
  *((void *)v20 + 4) = v16;
  *((void *)v20 + 5) = a2;
  *((void *)v20 + 6) = a3;
  return swift_endAccess();
}

void sub_1000B0F9C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, __int16 a11)
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  id v16 = a9;
  id v71 = (unint64_t *)(a7 + 16);
  uint64_t v17 = (uint64_t *)(a8 + 16);
  uint64_t v69 = type metadata accessor for Logger();
  sub_100007288(v69, (uint64_t)qword_10033E730);
  id v18 = a2;
  swift_retain_n();
  swift_retain_n();
  id v19 = a1;
  id v20 = v18;
  uint64_t v21 = a8;
  id v22 = v20;
  id v23 = v19;
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    os_log_type_t v65 = v25;
    log = v24;
    uint64_t v67 = v21;
    uint64_t v68 = a6;
    uint64_t v26 = swift_slowAlloc();
    v73[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315906;
    id v27 = [v23 zoneName];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    sub_100135190(v28, v30, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    if (a2)
    {
      id v31 = [v22 data];
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v34 = v33;

      sub_100254A64(v32, v34);
      sub_100009F04((uint64_t *)&unk_100328450);
      sub_100098EA8();
      uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      sub_100013198(v32, v34);
    }
    else
    {
      unint64_t v37 = 0xE300000000000000;
      uint64_t v35 = 7104878;
    }
    sub_100135190(v35, v37, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2048;
    id v38 = v71;
    swift_beginAccess();
    if (*v71 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    id v16 = a9;
    uint64_t v39 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v26 + 32) = 2048;
    swift_beginAccess();
    BOOL v52 = *(void **)(*(void *)(v67 + 16) + 16);
    swift_release();
    unint64_t v72 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, log, v65, "record zone fetch complete. Zone: %s, Token: %s, Changed: %ld, Deleted: %ld", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a6 = v68;
    if (!v68) {
      goto LABEL_21;
    }
  }
  else
  {

    swift_release_n();
    swift_release_n();
    id v38 = (unint64_t *)(a7 + 16);
    uint64_t v39 = v17;
    if (!a6)
    {
LABEL_21:
      if (([self shouldSkipRecoveryInfoRecordStorage] & 1) == 0)
      {
        uint64_t v53 = sub_100215548();
        unint64_t v54 = Logger.logObject.getter();
        if (v53)
        {
          os_log_type_t v55 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v56 = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Sync delegate is not nil. Saving/deleting records on disk.", v56, 2u);
            swift_slowDealloc();
          }

          swift_beginAccess();
          unint64_t v57 = *v38;
          swift_bridgeObjectRetain();
          sub_10015AEB8(v16, v57);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          uint64_t v58 = *v39;
          swift_bridgeObjectRetain();
          sub_10015D484(v16, v58);
          swift_bridgeObjectRelease();
          sub_100109488(v23, a2);
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v63 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v54, (os_log_type_t)v63))
          {
            id v64 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v64 = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v63, "Sync delegate is nil", v64, 2u);
            swift_slowDealloc();
          }
        }
      }
      swift_beginAccess();
      *id v38 = (unint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *uint64_t v39 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      return;
    }
  }
  swift_errorRetain();
  if (qword_100320B78 != -1) {
    swift_once();
  }
  sub_100007288(v69, (uint64_t)qword_10033E718);
  swift_errorRetain();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    Swift::String v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v42 = 138412290;
    id v44 = v23;
    uint64_t v45 = _convertErrorToNSError(_:)();
    v73[0] = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v43 = v45;
    id v23 = v44;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Error fetching record zone: %@", v42, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  v73[0] = a6;
  swift_errorRetain();
  sub_100009F04((uint64_t *)&unk_100325850);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast())
  {
    sub_1000B23D4();
    _BridgedStoredNSError.code.getter();
    if (v73[0] == 21)
    {
      uint64_t v46 = v23;
      id v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        char v49 = (uint8_t *)swift_slowAlloc();
        unint64_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)char v49 = 138412290;
        v73[0] = (uint64_t)v46;
        int v50 = v16;
        uint64_t v51 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v70 = v46;

        id v16 = v50;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Clearing change token for zone %@ due to error, and pulling again", v49, 0xCu);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        id v47 = v46;
      }

      sub_100109488(v46, 0);
      sub_100009F04((uint64_t *)&unk_100328470);
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1002AB070;
      *(void *)(v59 + 32) = v46;
      v73[0] = v59;
      specialized Array._endMutation()();
      uint64_t v60 = v73[0];
      uint64_t v61 = swift_allocObject();
      *(void *)(v61 + 16) = v46;
      id v62 = v46;
      sub_1000AF434(v16, v60, a11 & 0x101, sub_1000B2464, v61);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_errorRelease();
    }
  }
  else
  {
    swift_errorRelease();
  }
}

void sub_1000B19AC(uint64_t a1, void *a2)
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100007288(v3, (uint64_t)qword_10033E730);
  id v9 = a2;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    id v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)id v6 = 138412290;
    id v8 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v9;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Completed zone pull of %@ with nil change token", v6, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1000B1B78(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v8 = a4;
  unint64_t v11 = *(void (**)(void *, void *, void *, unint64_t, uint64_t, void *))(a1 + 32);
  if (a4)
  {
    swift_retain();
    id v12 = a2;
    id v13 = a3;
    id v14 = v8;
    id v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;
  }
  else
  {
    swift_retain();
    id v17 = a2;
    id v18 = a3;
    unint64_t v16 = 0xF000000000000000;
  }
  id v19 = a6;
  v11(a2, a3, v8, v16, a5, a6);

  sub_1000196A0((uint64_t)v8, v16);

  return swift_release();
}

uint64_t sub_1000B1C64(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (qword_100320B80 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100007288(v5, (uint64_t)qword_10033E730);
  swift_bridgeObjectRetain_n();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136315138;
    sub_10000850C(0, &qword_100323560);
    swift_bridgeObjectRetain();
    uint64_t v9 = Array.description.getter();
    unint64_t v11 = v10;
    swift_bridgeObjectRelease();
    sub_100135190(v9, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetch record zone changes complete. ZoneIDs: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a1) {
      return a3(a1);
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (!a1) {
      return a3(a1);
    }
  }
  swift_errorRetain();
  if (qword_100320B78 != -1) {
    swift_once();
  }
  sub_100007288(v5, (uint64_t)qword_10033E718);
  swift_errorRetain();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    unint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)id v14 = 138412290;
    uint64_t v16 = _convertErrorToNSError(_:)();
    uint64_t v18 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v15 = v16;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error fetching record zone changes: %@", v14, 0xCu);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  return a3(a1);
}

Swift::Int sub_1000B1FEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100009F04((uint64_t *)&unk_10032DBA0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10000850C(0, &qword_100323560);
      do
      {
        swift_dynamicCast();
        sub_10000850C(0, &qword_100324E78);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10022A4C0(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1000B2240()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B2278(void *a1)
{
  return sub_1000B097C(a1, v1);
}

uint64_t sub_1000B2280(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000B0C88(a1, a2, a3, v3);
}

uint64_t sub_1000B2288()
{
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 50, 7);
}

void sub_1000B22D8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned char *)(v6 + 49)) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  sub_1000B0F9C(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16), *(void *)(v6 + 24), *(void **)(v6 + 32), *(void *)(v6 + 40), v7 | *(unsigned __int8 *)(v6 + 48));
}

uint64_t sub_1000B2320()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B2360(uint64_t a1)
{
  return sub_1000B1C64(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

unint64_t sub_1000B236C()
{
  unint64_t result = qword_100324E80;
  if (!qword_100324E80)
  {
    sub_10000850C(255, &qword_100323560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100324E80);
  }
  return result;
}

unint64_t sub_1000B23D4()
{
  unint64_t result = qword_1003210D0;
  if (!qword_1003210D0)
  {
    type metadata accessor for CKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003210D0);
  }
  return result;
}

uint64_t sub_1000B242C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B2464(uint64_t a1)
{
  sub_1000B19AC(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000B246C(void *a1)
{
  return sub_1000AED44(a1, v1);
}

uint64_t sub_1000B2488()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000B24E0(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(v3 + 49)) {
    __int16 v4 = 256;
  }
  else {
    __int16 v4 = 0;
  }
  return sub_1000AEDE0(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), v4 | *(unsigned __int8 *)(v3 + 48), *(void (**)(uint64_t))(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72));
}

void sub_1000B2530(uint64_t a1, uint64_t a2)
{
  sub_1002165B0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1000B2538()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000B2588(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 48);
  if (!a1) {
    sub_100108F18(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
  }
  return v2(0);
}

uint64_t sub_1000B2604()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__notificationManager;
  uint64_t v2 = sub_100009F04(&qword_100322CE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__cdpRequestController;
  uint64_t v4 = sub_100009F04((uint64_t *)&unk_1003228A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__custodianStorageController;
  uint64_t v6 = sub_100009F04(&qword_100321FF8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocClassInstance();
}

uint64_t sub_1000B2738()
{
  return type metadata accessor for NotReachableStatusHandler();
}

uint64_t type metadata accessor for NotReachableStatusHandler()
{
  uint64_t result = qword_100324ED0;
  if (!qword_100324ED0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B278C()
{
  sub_10001BF34(319, (unint64_t *)&qword_100322C50, (uint64_t *)&unk_10032ACA0);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, qword_100327FA0, (uint64_t *)&unk_100321910);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100327F30, &qword_100322470);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t sub_1000B28C0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0 && a2 == 2) {
    return sub_1000B28FC(result);
  }
  return result;
}

uint64_t sub_1000B28FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = sub_100009F04(&qword_100321FF8);
  uint64_t v44 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CustodianRecord();
  uint64_t v48 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v48 + 64);
  __chkstk_darwin(v14 - 8, v16);
  uint64_t v17 = sub_100009F04((uint64_t *)&unk_1003228A0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v2 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__cdpRequestController, v17);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  id v23 = *(void **)(*sub_100008EF8(v51, v52) + 16);
  id v50 = 0;
  id v24 = [v23 walrusStatus:&v50];
  if (v50)
  {
    id v25 = v50;
    swift_willThrow();

    return sub_100008EA8((uint64_t)v51);
  }
  else
  {
    id v27 = v24;
    uint64_t v29 = v48;
    uint64_t v28 = v49;
    Swift::String v42 = v13;
    uint64_t v43 = v9;
    uint64_t result = sub_100008EA8((uint64_t)v51);
    if (v27 == (id)1)
    {
      sub_1000B50E8(v28, (uint64_t)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v22;
      sub_1000B5080((uint64_t)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v31 + v30, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
      uint64_t v32 = v44;
      unint64_t v33 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, v22 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__custodianStorageController, v10);
      swift_retain();
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v10);
      unint64_t v34 = sub_100008EF8(v51, v52);
      uint64_t v35 = swift_allocObject();
      *(void *)(v35 + 16) = sub_1000B4664;
      *(void *)(v35 + 24) = v31;
      unint64_t v36 = sub_100008EF8((void *)(*v34 + 16), *(void *)(*v34 + 40));
      type metadata accessor for LocalCache();
      swift_retain();
      unint64_t v37 = v45;
      sub_10000A280();
      uint64_t v38 = (uint64_t)v43;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v46 + 8);
      uint64_t v40 = v37;
      uint64_t v41 = v47;
      v39(v40, v47);
      sub_100008EF8((void *)(*v36 + 16), *(void *)(*v36 + 40));
      sub_1000B33C0(v38, (uint64_t)sub_1000B4720, v35, (uint64_t)&unk_1002F92E8, (uint64_t)sub_1000B4730, (uint64_t)&unk_1002F9300);
      v39((char *)v38, v41);
      swift_release();
      sub_100008EA8((uint64_t)v51);
      return swift_release();
    }
  }
  return result;
}

void sub_1000B2E2C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100009F04(&qword_100322CE0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TrustedContactUserNotification();
  __chkstk_darwin(v13, v14);
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = (char *)&v25[-1] - v16;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100320B88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E748);
    swift_errorRetain();
    id v24 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)();
      *(void *)&v26[0] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v22;
      sub_100080A98(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v19, "Error finding if a healthy custodian exists: %@", v20, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080A98(a1, 1);
    }
    else
    {
      sub_100080A98(a1, 1);
      sub_100080A98(a1, 1);
      id v23 = v24;
    }
  }
  else if ((a1 & 1) == 0)
  {
    sub_1000B50E8(a4, (uint64_t)&v25[-1] - v16, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__notificationManager, v8);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_100008EF8(v25, v25[3]);
    sub_1001C1B88((uint64_t)v26);
    sub_10024F5C4(v26, 0, 0);
    sub_10004CF70((uint64_t)v26);
    sub_1000B5150((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TrustedContactUserNotification);
    sub_100008EA8((uint64_t)v25);
  }
}

uint64_t sub_1000B31D8(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a2 & 1;
  uint64_t v7 = type metadata accessor for CustodianRecord();
  __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v14 = *(void *)(v9 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000B50E8(v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        uint64_t v15 = *(void *)&v11[*(int *)(v7 + 36)];
        sub_1000B5150((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
        if (v15 == 2) {
          break;
        }
        v13 += v14;
        if (!--v12)
        {
          sub_100007844(a1, 0);
          goto LABEL_8;
        }
      }
      sub_100007844(a1, 0);
      a1 = 1;
    }
    else
    {
LABEL_8:
      a1 = 0;
    }
  }
  a3(a1, v6);
  return sub_100080A98(a1, v6);
}

uint64_t sub_1000B3370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9338, (uint64_t)sub_1000B48BC, (uint64_t)&unk_1002F9350);
}

uint64_t sub_1000B3398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F94C8, (uint64_t)sub_1000B4E48, (uint64_t)&unk_1002F94E0);
}

uint64_t sub_1000B33C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a5;
  v28[1] = a4;
  uint64_t v29 = a2;
  uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  os_log_type_t v19 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v6 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v22 + v20, v19, v15);
  id v23 = (void *)(v22 + v21);
  uint64_t v24 = v30;
  *id v23 = v29;
  v23[1] = v24;
  *(void *)(v22 + ((v21 + 23) & 0xFFFFFFFFFFFFFFF8)) = v6;
  aBlock[4] = v31;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  uint64_t aBlock[3] = v33;
  id v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = &_swiftEmptyArrayStorage;
  sub_10000A620((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
  return swift_release();
}

uint64_t sub_1000B3744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F92E8, (uint64_t)sub_1000B4730, (uint64_t)&unk_1002F9300);
}

uint64_t sub_1000B376C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9568, (uint64_t)sub_1000B4F68, (uint64_t)&unk_1002F9580);
}

uint64_t sub_1000B3794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9428, (uint64_t)sub_1000B4C10, (uint64_t)&unk_1002F9440);
}

uint64_t sub_1000B37BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F93D8, (uint64_t)sub_1000B4AF4, (uint64_t)&unk_1002F93F0);
}

uint64_t sub_1000B37E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9388, (uint64_t)sub_1000B49D8, (uint64_t)&unk_1002F93A0);
}

uint64_t sub_1000B380C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B33C0(a1, a2, a3, (uint64_t)&unk_1002F9478, (uint64_t)sub_1000B4D2C, (uint64_t)&unk_1002F9490);
}

uint64_t sub_1000B3834(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t (*a5)(void), unint64_t *a6, void (*a7)(uint64_t), uint64_t a8, uint64_t (*a9)(void), uint64_t (*a10)(BOOL, uint64_t, uint64_t, void *), uint64_t (*a11)(void))
{
  unint64_t v100 = a7;
  uint64_t v101 = a8;
  uint64_t v99 = a6;
  uint64_t v102 = a4;
  NSString v95 = a2;
  uint64_t v98 = a5(0);
  uint64_t v96 = *(void *)(v98 - 8);
  uint64_t v14 = __chkstk_darwin(v98, v13);
  uint64_t v110 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  os_log_type_t v97 = (char *)&v83 - v18;
  __chkstk_darwin(v17, v19);
  id v109 = (uint64_t *)((char *)&v83 - v20);
  uint64_t v21 = sub_100009F04(&qword_10032D4E0);
  __chkstk_darwin(v21 - 8, v22);
  uint64_t v103 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v88 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v104 = (char *)&v83 - v31;
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v83 - v33;
  uint64_t v35 = self;
  id v36 = [v35 defaultManager];
  URL.path.getter();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v38 = [v36 fileExistsAtPath:v37];

  uint64_t v105 = a1;
  if (v38)
  {
    id v39 = [v35 defaultManager];
    URL.path.getter();
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v112[0] = 0;
    id v41 = [v39 contentsOfDirectoryAtPath:v40 error:v112];

    id v42 = v112[0];
    if (v41)
    {
      uint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v44 = v42;

      uint64_t v45 = *(void *)(v43 + 16);
      if (v45)
      {
        uint64_t v87 = a3;
        unint64_t v90 = a11;
        char v84 = (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))a10;
        uint64_t v85 = v25;
        uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
        uint64_t v46 = v25 + 16;
        uint64_t v92 = v47;
        unint64_t v91 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 40);
        uint64_t v93 = v46;
        uint64_t v94 = (void (**)(char *, uint64_t))(v46 - 8);
        swift_bridgeObjectRetain();
        uint64_t v86 = v43;
        uint64_t v48 = (uint64_t *)(v43 + 40);
        uint64_t v49 = &_swiftEmptyArrayStorage;
        uint64_t v89 = a9;
        do
        {
          uint64_t v106 = v45;
          uint64_t v50 = *v48;
          uint64_t v51 = (uint64_t)v103;
          v92(v103, a1, v24);
          (*v91)(v51, 0, 1, v24);
          swift_bridgeObjectRetain();
          uint64_t v108 = v50;
          URL.init(fileURLWithPath:relativeTo:)();
          sub_1000B4848(v51);
          uint64_t v52 = Data.init(contentsOf:options:)();
          unint64_t v54 = v53;
          id v107 = v49;
          swift_retain();
          sub_1002092E8((uint64_t *)v112);
          uint64_t v56 = v24;
          swift_release();
          id v58 = v112[0];
          id v57 = v112[1];
          sub_10000A620(v99, v100);
          swift_retain();
          uint64_t v59 = (uint64_t)v97;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)();
          sub_100013198((uint64_t)v58, (unint64_t)v57);
          sub_100013198(v52, v54);
          swift_release();
          uint64_t v60 = v109;
          uint64_t v61 = v89;
          sub_1000B5080(v59, (uint64_t)v109, v89);
          sub_1000B50E8((uint64_t)v60, (uint64_t)v110, v61);
          uint64_t v49 = v107;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = (void *)v84(0, v49[2] + 1, 1, v49);
          }
          uint64_t v24 = v56;
          a1 = v105;
          uint64_t v62 = v106;
          unint64_t v64 = v49[2];
          unint64_t v63 = v49[3];
          if (v64 >= v63 >> 1) {
            uint64_t v49 = (void *)v84(v63 > 1, v64 + 1, 1, v49);
          }
          v48 += 2;
          void v49[2] = v64 + 1;
          sub_1000B5080((uint64_t)v110, (uint64_t)v49+ ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80))+ *(void *)(v96 + 72) * v64, v61);
          sub_1000B5150((uint64_t)v109, v90);
          (*v94)(v104, v24);
          swift_bridgeObjectRelease();
          uint64_t v45 = v62 - 1;
        }
        while (v45);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v82 = swift_bridgeObjectRetain();
      v95(v82, 0);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v87 = a3;
      id v72 = v112[0];
      uint64_t v73 = _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v74 = v88;
      if (qword_100320BA8 != -1) {
        swift_once();
      }
      uint64_t v75 = type metadata accessor for Logger();
      sub_100007288(v75, (uint64_t)qword_10033E7A8);
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v74, a1, v24);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc();
        id v109 = (void *)swift_slowAlloc();
        uint64_t v110 = (char *)swift_slowAlloc();
        v112[0] = v110;
        *(_DWORD *)uint64_t v78 = 136315394;
        sub_10000A620((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v111 = sub_100135190(v79, v80, (uint64_t *)v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v74, v24);
        *(_WORD *)(v78 + 12) = 2112;
        uint64_t v81 = _convertErrorToNSError(_:)();
        uint64_t v111 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v109 = v81;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Error fetching records from %s: %@", (uint8_t *)v78, 0x16u);
        sub_100009F04((uint64_t *)&unk_1003216C0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v74, v24);
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10016C6BC(v73);
      swift_errorRetain();
      v95(v73, 1);
      swift_errorRelease();
      return swift_errorRelease();
    }
  }
  else
  {
    if (qword_100320BA8 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100007288(v65, (uint64_t)qword_10033E7A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v34, v105, v24);
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      v112[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315138;
      uint64_t v87 = a3;
      sub_10000A620((unint64_t *)&qword_1003250D0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v111 = sub_100135190(v69, v70, (uint64_t *)v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "No records found at path %s.", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
    }

    return ((uint64_t (*)(void *, void))v95)(&_swiftEmptyArrayStorage, 0);
  }
}

uint64_t sub_1000B447C()
{
  uint64_t v1 = (int *)type metadata accessor for CustodianRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v3, v6);
  v8(v0 + v3 + v1[5], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(v0 + v3 + v1[10]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100013198(*v9, v10);
  }
  sub_100013198(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v5 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_1000B4664(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for CustodianRecord() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_1000B2E2C(a1, v4, v6, v7);
}

uint64_t sub_1000B46E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B4720(uint64_t a1, char a2)
{
  return sub_1000B31D8(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000B4730()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for CustodianRecord, (unint64_t *)&unk_100324D40, (void (*)(uint64_t))type metadata accessor for CustodianRecord, (uint64_t)&unk_1002ABCD8, (uint64_t (*)(void))type metadata accessor for CustodianRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001687C4, (uint64_t (*)(void))type metadata accessor for CustodianRecord);
}

uint64_t sub_1000B4848(uint64_t a1)
{
  uint64_t v2 = sub_100009F04(&qword_10032D4E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B48BC()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (unint64_t *)&unk_1003274F0, (void (*)(uint64_t))type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_1002AD7D8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001684A8, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1000B49D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (unint64_t *)&unk_100325000, (void (*)(uint64_t))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t)&unk_1002AE0F8, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001688C8, (uint64_t (*)(void))type metadata accessor for CustodianRecoverySessionRecord);
}

uint64_t sub_1000B4AF4()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (unint64_t *)&unk_10032AD30, (void (*)(uint64_t))type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_1002AF6D8, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_100168860, (uint64_t (*)(void))type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000B4C10()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (unint64_t *)&unk_10032FED0, (void (*)(uint64_t))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_1002B3328, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_10016882C, (uint64_t (*)(void))type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_1000B4D2C()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (unint64_t *)&unk_100326330, (void (*)(uint64_t))type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_1002ACA70, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001688FC, (uint64_t (*)(void))type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_1000B4E48()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (unint64_t *)&unk_10032AFA0, (void (*)(uint64_t))type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_1002AFBA0, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001684DC, (uint64_t (*)(void))type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1000B4F68()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B3834(v0 + v2, *(void (**)(uint64_t, uint64_t))(v0 + v3), *(void *)(v0 + v3 + 8), *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (unint64_t *)&unk_1003301D0, (void (*)(uint64_t))type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_1002B375C, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(BOOL, uint64_t, uint64_t, void *))sub_1001687F8, (uint64_t (*)(void))type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_1000B5080(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B50E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B5150(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000B51E8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E778);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      char v4 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412290;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v4 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "After processing message, setup finalization finished with error: %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E778);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "After processing message, Setup finalization finished Successfully", v7, 2u);
      swift_slowDealloc();
    }
  }
}

id sub_1000B5594()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianMessageProcessor();
  return [super dealloc];
}

uint64_t type metadata accessor for CustodianMessageProcessor()
{
  return self;
}

void sub_1000B5678(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v98 = a3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v97 = (unint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v95 = *(void *)(v12 - 8);
  uint64_t v96 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v94 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B70 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  os_log_t v100 = (os_log_t)sub_100007288(v15, (uint64_t)qword_10033E700);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Processing message...", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = [*(id *)(*sub_100008EF8((void *)(v4+ OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore), *(void *)(v4+ OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore+ 24))+ 16) aa_primaryAppleAccount];
  if (v19)
  {
    uint64_t v93 = v4;
    uint64_t v99 = v19;
    uint64_t v20 = sub_10020E708(a1, a2);
    if (v20)
    {
      uint64_t v21 = v20;
      switch(*(unsigned char *)(v20 + 16))
      {
        case 1:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          sub_100007288(v15, (uint64_t)qword_10033E748);
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v33, v34))
          {
            uint64_t v35 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Trying to process invitationResponse message", v35, 2u);
            swift_slowDealloc();
          }

          uint64_t v36 = sub_10020E9C8(a1, a2);
          if (v36)
          {
            uint64_t v37 = v36;
            sub_100008EF8((void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationResponseHandler), *(void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationResponseHandler + 24));
            sub_1002072F0(v37, v98, a4);
            goto LABEL_26;
          }
          id v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v71, v72)) {
            goto LABEL_59;
          }
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          uint64_t v74 = "Unable to decode invitation results!";
          goto LABEL_57;
        case 2:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          os_log_t v100 = v21;
          sub_100007288(v15, (uint64_t)qword_10033E748);
          unsigned int v38 = Logger.logObject.getter();
          os_log_type_t v39 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v38, v39))
          {
            NSString v40 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)NSString v40 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "Trying to process share message", v40, 2u);
            swift_slowDealloc();
          }

          uint64_t v41 = sub_10020EA10(a1, a2);
          if (!v41)
          {
            id v71 = Logger.logObject.getter();
            os_log_type_t v75 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v71, v75)) {
              goto LABEL_59;
            }
            goto LABEL_52;
          }
          uint64_t v42 = v41;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = swift_slowAlloc();
            unint64_t v97 = a4;
            uint64_t v46 = v45;
            uint64_t v92 = swift_slowAlloc();
            v102[0] = v92;
            *(_DWORD *)uint64_t v46 = 136315394;
            uint64_t v91 = v46 + 4;
            uint64_t v47 = v94;
            uint64_t v48 = v95;
            uint64_t v49 = v96;
            (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, v42 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, v96);
            sub_1000B67E8();
            uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v52 = v51;
            (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
            uint64_t v101 = sub_100135190(v50, v52, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v46 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v101 = sub_100135190(v98, v97, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Received shareUrl %s from %s", (uint8_t *)v46, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            a4 = v97;
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          if (qword_100320D00 != -1) {
            swift_once();
          }
          uint64_t v77 = qword_10033EA48;
          uint64_t v78 = *(void *)(qword_10033EA48 + 16);
          if (v78)
          {
            uint64_t v79 = v42 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo;
            uint64_t v80 = type metadata accessor for CloudShareInfo();
            uint64_t v81 = (void *)(v77 + 40);
            do
            {
              uint64_t v82 = (void *)(v79 + *(int *)(v80 + 20));
              BOOL v83 = *(v81 - 1) == *v82 && *v81 == v82[1];
              if (v83 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                sub_100008EF8((void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_shareHandler), *(void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_shareHandler + 24));
                sub_10002A3A4(v42, v98, a4);
                swift_release();
                goto LABEL_84;
              }
              v81 += 2;
              --v78;
            }
            while (v78);
          }
          swift_retain_n();
          char v84 = Logger.logObject.getter();
          os_log_type_t v85 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v84, v85))
          {
            uint64_t v86 = (uint8_t *)swift_slowAlloc();
            v102[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v86 = 136315138;
            uint64_t v87 = OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo;
            uint64_t v88 = (uint64_t *)(v42 + *(int *)(type metadata accessor for CloudShareInfo() + 20) + v87);
            uint64_t v89 = *v88;
            unint64_t v90 = v88[1];
            swift_bridgeObjectRetain();
            uint64_t v101 = sub_100135190(v89, v90, v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Invalid container ID received %s", v86, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
            swift_release();

            goto LABEL_85;
          }

          swift_release_n();
          goto LABEL_84;
        case 3:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          sub_100007288(v15, (uint64_t)qword_10033E748);
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v53, v54))
          {
            os_log_type_t v55 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v55 = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Trying to process finalize message", v55, 2u);
            swift_slowDealloc();
          }

          uint64_t v56 = sub_10020EA58(a1, a2);
          if (v56)
          {
            uint64_t v57 = v56;
            swift_bridgeObjectRetain_n();
            id v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v60 = (uint8_t *)swift_slowAlloc();
              v102[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v60 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v101 = sub_100135190(v98, a4, v102);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received encrypted PRKC from %s", v60, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_100008EF8((void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_setupFinalizationHandler), *(void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_setupFinalizationHandler + 24));
            sub_100110688(v57, v99, (uint64_t)sub_1000B51E8, 0);
            swift_release();
            goto LABEL_84;
          }
          id v71 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v71, v75))
          {
LABEL_52:
            uint64_t v76 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v76 = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, v75, "Invalid message received!", v76, 2u);
            swift_slowDealloc();
            goto LABEL_58;
          }
          goto LABEL_59;
        case 4:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          sub_100007288(v15, (uint64_t)qword_10033E748);
          uint64_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v61, v62))
          {
            unint64_t v63 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v63 = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, v62, "Trying to process removed message", v63, 2u);
            swift_slowDealloc();
          }

          uint64_t v64 = sub_10020EAA0(a1, a2);
          if (v64)
          {
            uint64_t v65 = v64;
            id v66 = sub_100008EF8((void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_custodianRemovedHandler), *(void *)(v93+ OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_custodianRemovedHandler+ 24));
            sub_100008A94(*v66 + 56, (uint64_t)v102);
            sub_100008EF8(v102, v102[3]);
            uint64_t v67 = v97;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16))(v97, v65 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v8);
            uint64_t v68 = swift_allocObject();
            swift_weakInit();
            uint64_t v69 = v9;
            uint64_t v70 = swift_allocObject();
            *(void *)(v70 + 16) = v68;
            *(void *)(v70 + 24) = v65;
            swift_retain();
            swift_retain();
            sub_10023C384(v67, (uint64_t)sub_1000B67E0, v70);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v8);
            swift_release();
            sub_100008EA8((uint64_t)v102);
            swift_release();
LABEL_84:
            swift_release();
LABEL_85:

            return;
          }
          id v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v71, v72)) {
            goto LABEL_59;
          }
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          uint64_t v74 = "Unable to decode custodian removed message!";
          goto LABEL_57;
        default:
          if (qword_100320B88 != -1) {
            swift_once();
          }
          sub_100007288(v15, (uint64_t)qword_10033E748);
          uint64_t v22 = Logger.logObject.getter();
          os_log_type_t v23 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v22, v23))
          {
            uint64_t v24 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v24 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, v23, "Trying to process invitation message", v24, 2u);
            swift_slowDealloc();
          }

          uint64_t v25 = sub_10020E750(a1, a2);
          if (v25)
          {
            uint64_t v26 = v25;
            sub_100008EF8((void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationHandler), *(void *)(v93 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationHandler + 24));
            sub_1001668B4(v26, v98, a4);
LABEL_26:
            swift_release();
            goto LABEL_60;
          }
          id v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v71, v72))
          {
LABEL_59:

LABEL_60:
            swift_release();
            break;
          }
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          uint64_t v74 = "Unable to decode custodian invitation!";
LABEL_57:
          _os_log_impl((void *)&_mh_execute_header, v71, v72, v74, v73, 2u);
          swift_slowDealloc();
LABEL_58:
          swift_release();

          break;
      }
    }
    else
    {
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to decode data, unable to process message", v32, 2u);
        swift_slowDealloc();
      }
    }
    os_log_t v29 = v99;
  }
  else
  {
    os_log_t v100 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v27, "Not logged in to AppleAccount, unable to process message", v28, 2u);
      swift_slowDealloc();
    }
    os_log_t v29 = v100;
  }
}

uint64_t sub_1000B6768()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B67A0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B67E0(uint64_t a1)
{
  sub_1000812E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000B67E8()
{
  unint64_t result = qword_1003250D0;
  if (!qword_1003250D0)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003250D0);
  }
  return result;
}

uint64_t sub_1000B6840(uint64_t a1)
{
  sub_100009F04(&qword_100325150);
  Dependency.init(dependencyId:config:)();
  sub_100009F04(&qword_100322490);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_100321920);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032A640);
  Dependency.init(dependencyId:config:)();
  sub_100009F04((uint64_t *)&unk_10032ACB0);
  Dependency.init(dependencyId:config:)();
  uint64_t v3 = OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue;
  id v4 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(v1 + v3) = v4;
  *(void *)(v1 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_healthChecks) = a1;
  [v4 setMaxConcurrentOperationCount:1];
  return v1;
}

void sub_1000B69CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  os_log_type_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100009F04(&qword_100325870);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, Strong + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v7);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    id v14 = [*(id *)(*sub_100008EF8(v26, v26[3]) + 16) aa_primaryAppleAccount];

    sub_100008EA8((uint64_t)v26);
    if (v14)
    {
      UUID.init()();
      uint64_t v15 = UUID.uuidString.getter();
      uint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      swift_retain();
      swift_retain();
      sub_1000B9718(1, v15, v17, v13, v13, a1);
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      sub_100030AB0();
      if (qword_100320B98 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100007288(v22, (uint64_t)qword_10033E778);
      os_log_type_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "No account signed in. Skipping Health Checks.", v25, 2u);
        swift_slowDealloc();
        swift_release();

        return;
      }
    }
    swift_release();
  }
  else
  {
    sub_100030AB0();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100007288(v18, (uint64_t)qword_10033E778);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Lost reference to self. Aborting XPC activity Health Checks", v21, 2u);
      swift_slowDealloc();
    }
  }
}

BOOL sub_1000B6DC0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100009F04((uint64_t *)&unk_100328460);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100009F04(&qword_100325358);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v42 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16))
  {
    LODWORD(v43) = a1;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100007288(v17, (uint64_t)qword_10033E778);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v41 = a4;
      uint64_t v20 = swift_slowAlloc();
      NSString v40 = v12;
      uint64_t v21 = (uint8_t *)v20;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v39 = a3;
      v46[0] = v22;
      uint64_t v37 = v14;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v36 = v21 + 4;
      swift_bridgeObjectRetain();
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v23 = Dictionary.description.getter();
      uint64_t v38 = v13;
      uint64_t v24 = v9;
      uint64_t v25 = v8;
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      aBlock[0] = sub_100135190(v23, v27, v46);
      uint64_t v14 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v8 = v25;
      uint64_t v9 = v24;
      uint64_t v13 = v38;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Overall Health Check failed: %s", v21, 0xCu);
      swift_arrayDestroy();
      a3 = v39;
      swift_slowDealloc();
      uint64_t v12 = v40;
      swift_slowDealloc();

      if ((v43 & 1) == 0) {
        return sub_100030AB0();
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if ((v43 & 1) == 0) {
        return sub_100030AB0();
      }
    }
    if ([self isHealthCheckTTREnabled])
    {
      sub_100009F04((uint64_t *)&unk_100328470);
      uint64_t v28 = a3;
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1002AB070;
      sub_1000B9D00();
      *(NSNumber *)(v29 + 32) = NSNumber.init(integerLiteral:)(1518603);
      v46[0] = v29;
      specialized Array._endMutation()();
      uint64_t v41 = v46[0];
      unint64_t v43 = 0x800000010029BF40;
      v46[0] = 0xD0000000000000AFLL;
      v46[1] = 0x800000010029BF40;
      v46[2] = 0xD000000000000025;
      v46[3] = 0x800000010029C080;
      v46[4] = 0xD000000000000086;
      v46[5] = 0x800000010029BFF0;
      v46[6] = v41;
      char v47 = 0;
      uint64_t v30 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v42, v28 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__ttrRequester, v13);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v13);
      uint64_t v31 = *sub_100008EF8(v45, v45[3]);
      id v32 = sub_10013443C((uint64_t)v46);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v31 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper, v8);
      Dependency.wrappedValue.getter();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      uint64_t v33 = (void *)aBlock[0];
      aBlock[4] = sub_1000B73A4;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10025ED44;
      uint64_t aBlock[3] = &unk_1002F96B8;
      os_log_type_t v34 = _Block_copy(aBlock);
      swift_release();
      [v33 silentTapToRadarWithRequest:v32 completion:v34];
      _Block_release(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_100008EA8((uint64_t)v45);
    }
  }
  return sub_100030AB0();
}

void sub_1000B73A4(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100007288(v1, (uint64_t)qword_10033E778);
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 138412290;
      uint64_t v9 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v4 = v9;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Unable to launch TTR: %@", v3, 0xCu);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100007288(v5, (uint64_t)qword_10033E778);
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Health Check TTR launched successfully.", v7, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000B762C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11 = a2 & 1;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100007288(v12, (uint64_t)qword_10033E778);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    if (v11) {
      uint64_t v16 = 0x656C756465686353;
    }
    else {
      uint64_t v16 = 0x6E616D6544206E4FLL;
    }
    sub_100135190(v16, 0xE900000000000064, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Completed pulling all cloud data before %s Health Checks: %{BOOL}d", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return sub_1000B784C(v11, a4, a5, a6, a7);
}

uint64_t sub_1000B784C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v55 = a5;
  uint64_t v51 = a4;
  int v53 = a1;
  uint64_t v9 = sub_100009F04(&qword_100325360);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v54 = dispatch_group_create();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__analyticsAccountModel, v9);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  uint64_t v16 = sub_100008EF8(v62, v62[3]);
  uint64_t v17 = *v16;
  uint64_t v18 = *(NSObject **)(*v16 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_1000B9D88;
  *(void *)(v19 + 24) = v17;
  uint64_t v60 = sub_1000B9DA0;
  uint64_t v61 = v19;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  id v58 = sub_100030494;
  os_log_type_t v59 = &unk_1002F9758;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18, v20);
  _Block_release(v20);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t isEscapingClosureAtFileLocation = a2;
    sub_100008EA8((uint64_t)v62);
    if (qword_100320B98 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  int v22 = v53 & 1;
  uint64_t v23 = type metadata accessor for Logger();
  sub_100007288(v23, (uint64_t)qword_10033E778);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  int v53 = v22;
  uint64_t v50 = isEscapingClosureAtFileLocation;
  if (v26)
  {
    uint64_t v52 = a3;
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)unint64_t v27 = 136315138;
    *(void *)&long long aBlock = v28;
    if (v22) {
      uint64_t v29 = 0x656C756465686353;
    }
    else {
      uint64_t v29 = 0x6E616D6544206E4FLL;
    }
    v62[0] = sub_100135190(v29, 0xE900000000000064, (uint64_t *)&aBlock);
    a3 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting %s Health Checks.", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  dispatch_group_t v31 = v54;
  uint64_t v30 = v55;
  uint64_t v52 = *(void *)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_healthChecks);
  uint64_t v32 = *(void *)(v52 + 16);
  if (v32)
  {
    uint64_t v49 = v6;
    uint64_t v33 = *(void **)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue);
    uint64_t v34 = v52 + 32;
    swift_bridgeObjectRetain();
    uint64_t v35 = v50;
    char v36 = v53;
    do
    {
      sub_100008A94(v34, (uint64_t)&aBlock);
      uint64_t v37 = swift_allocObject();
      *(unsigned char *)(v37 + 16) = v36;
      sub_100041E8C(&aBlock, v37 + 24);
      *(void *)(v37 + 64) = v35;
      *(void *)(v37 + 72) = a3;
      *(void *)(v37 + 80) = v14;
      *(void *)(v37 + 88) = v15;
      uint64_t v38 = a3;
      uint64_t v39 = v14;
      NSString v40 = (objc_class *)type metadata accessor for AsyncOperation();
      uint64_t v41 = objc_allocWithZone(v40);
      v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      uint64_t v42 = (uint64_t (**)(uint64_t, uint64_t))&v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      char *v42 = sub_1000B9DF8;
      v42[1] = (uint64_t (*)(uint64_t, uint64_t))v37;
      v56.receiver = v41;
      v56.super_class = v40;
      uint64_t v14 = v39;
      a3 = v38;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      id v43 = [super init];
      [v33 addOperation:v43];

      v34 += 40;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    dispatch_group_t v31 = v54;
    uint64_t v30 = v55;
    uint64_t v6 = v49;
  }
  os_log_type_t v44 = *(void **)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue);
  uint64_t v45 = swift_allocObject();
  *(unsigned char *)(v45 + 16) = v53;
  *(void *)(v45 + 24) = v14;
  *(void *)(v45 + 32) = v6;
  *(void *)(v45 + 40) = v51;
  *(void *)(v45 + 48) = v30;
  *(void *)(v45 + 56) = v15;
  uint64_t v60 = sub_1000B9E5C;
  uint64_t v61 = v45;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  id v58 = sub_100007244;
  os_log_type_t v59 = &unk_1002F97D0;
  uint64_t v46 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v44 addBarrierBlock:v46];
  _Block_release(v46);

  swift_release();
  return swift_release();
}

uint64_t sub_1000B7E94(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = a3 & 1;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100007288(v13, (uint64_t)qword_10033E778);
  sub_100008A94((uint64_t)a4, (uint64_t)&v29);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    if (v12) {
      uint64_t v17 = 0x656C756465686353;
    }
    else {
      uint64_t v17 = 0x6E616D6544206E4FLL;
    }
    sub_100135190(v17, 0xE900000000000064, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    sub_100008EF8(&v29, v30);
    swift_getDynamicType();
    uint64_t v18 = _typeName(_:qualified:)();
    sub_100135190(v18, v19, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)&v29);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting %s Health Check - %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100008EA8((uint64_t)&v29);
  }

  uint64_t v20 = a4[3];
  uint64_t v21 = a4[4];
  sub_100008EF8(a4, v20);
  sub_100008A94((uint64_t)a4, (uint64_t)&v29);
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = v12;
  sub_100041E8C(&v29, v22 + 24);
  *(void *)(v22 + 64) = a7;
  *(void *)(v22 + 72) = a8;
  *(void *)(v22 + 80) = a1;
  *(void *)(v22 + 88) = a2;
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v21 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v23(a5, a6, sub_1000B9EC0, v22, v20, v21);
  return swift_release();
}

uint64_t sub_1000B819C(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100007288(v12, (uint64_t)qword_10033E778);
    sub_100008A94((uint64_t)a3, (uint64_t)v48);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v45 = a6;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v44 = a4;
      uint64_t v16 = (void *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315650;
      if (a2) {
        uint64_t v17 = 0x656C756465686353;
      }
      else {
        uint64_t v17 = 0x6E616D6544206E4FLL;
      }
      uint64_t v47 = sub_100135190(v17, 0xE900000000000064, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      sub_100008EF8(v48, v49);
      swift_getDynamicType();
      uint64_t v18 = _typeName(_:qualified:)();
      uint64_t v47 = sub_100135190(v18, v19, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100008EA8((uint64_t)v48);
      *(_WORD *)(v15 + 22) = 2112;
      uint64_t v20 = _convertErrorToNSError(_:)();
      uint64_t v47 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s %s Health Check failed with error %@", (uint8_t *)v15, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      a4 = v44;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v45;
      swift_slowDealloc();
    }
    else
    {
      sub_100008EA8((uint64_t)v48);
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = (uint64_t *)(a4 + 16);
    long long v29 = (char *)(a5 + 16);
    sub_100008EF8(a3, a3[3]);
    uint64_t DynamicType = swift_getDynamicType();
    uint64_t v31 = a3[4];
    v48[0] = DynamicType;
    v48[1] = v31;
    sub_100009F04(&qword_10032A880);
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v34 = v33;
    uint64_t v35 = (void *)_convertErrorToNSError(_:)();
    id v36 = [v35 aa_partialErrorsByName];

    if (v36)
    {
      sub_100009F04((uint64_t *)&unk_100325850);
      uint64_t v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v37 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1000A7E88(v37, v28, v32, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_24:
        swift_beginAccess();
        char v39 = *v29;
        sub_100008A94((uint64_t)a3, (uint64_t)v48);
        if (v39)
        {
          char v40 = 1;
        }
        else
        {
          uint64_t v41 = v49;
          uint64_t v42 = v50;
          sub_100008EF8(v48, v49);
          char v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 24))(v41, v42);
        }
        swift_errorRelease();
        sub_100008EA8((uint64_t)v48);
        swift_beginAccess();
        *long long v29 = v40 & 1;
        return a6();
      }
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    swift_errorRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46[0] = *v28;
    uint64_t *v28 = 0x8000000000000000;
    sub_10022C0AC(a1, v32, v34, isUniquelyReferenced_nonNull_native);
    uint64_t *v28 = v46[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_24;
  }
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100007288(v21, (uint64_t)qword_10033E778);
  sub_100008A94((uint64_t)a3, (uint64_t)v48);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    if (a2) {
      uint64_t v25 = 0x656C756465686353;
    }
    else {
      uint64_t v25 = 0x6E616D6544206E4FLL;
    }
    uint64_t v47 = sub_100135190(v25, 0xE900000000000064, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    sub_100008EF8(v48, v49);
    swift_getDynamicType();
    uint64_t v26 = _typeName(_:qualified:)();
    uint64_t v47 = sub_100135190(v26, v27, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100008EA8((uint64_t)v48);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s %s Health Check completed.", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100008EA8((uint64_t)v48);
  }

  return a6();
}

uint64_t sub_1000B887C(char a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a3;
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_1003245D0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  os_log_type_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100007288(v15, (uint64_t)qword_10033E778);
  swift_retain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  int v37 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v35 = a6;
    uint64_t v19 = v18;
    uint64_t v33 = swift_slowAlloc();
    v41[0] = v33;
    *(_DWORD *)uint64_t v19 = 136315394;
    if (a1) {
      uint64_t v20 = 0x656C756465686353;
    }
    else {
      uint64_t v20 = 0x6E616D6544206E4FLL;
    }
    id v36 = a4;
    uint64_t v39 = sub_100135190(v20, 0xE900000000000064, v41);
    v32[1] = &v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    v32[0] = v19 + 14;
    swift_beginAccess();
    uint64_t v34 = v11;
    swift_bridgeObjectRetain();
    sub_100009F04((uint64_t *)&unk_100325850);
    uint64_t v21 = v10;
    uint64_t v22 = Dictionary.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = v22;
    uint64_t v10 = v21;
    uint64_t v26 = (uint64_t *)(a2 + 16);
    uint64_t v11 = v34;
    uint64_t v39 = sub_100135190(v25, v24, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a4 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v37, "Overall %s Health Checks finished with errors: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a6 = v35;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    uint64_t v26 = (uint64_t *)(a2 + 16);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v38 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__trustedContactsPreflightScheduler, v10);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v28 = v42;
  uint64_t v27 = v43;
  sub_100008EF8(v41, v42);
  (*(void (**)(uint64_t))(*(void *)(v27 + 8) + 8))(v28);
  sub_100008EA8((uint64_t)v41);
  swift_beginAccess();
  uint64_t v29 = *(unsigned __int8 *)(a6 + 16);
  swift_beginAccess();
  uint64_t v30 = *v26;
  swift_bridgeObjectRetain();
  a4(v29, v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B8C94()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__ttrRequester;
  uint64_t v2 = sub_100009F04(&qword_100325358);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__storageController;
  uint64_t v4 = sub_100009F04(&qword_100322950);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__analyticsAccountModel;
  uint64_t v6 = sub_100009F04(&qword_100325360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore;
  uint64_t v8 = sub_100009F04(&qword_100325870);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager;
  uint64_t v10 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__trustedContactsPreflightScheduler;
  uint64_t v12 = sub_100009F04((uint64_t *)&unk_1003245D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000B8EC0()
{
  return type metadata accessor for HealthCheckActivityProvider();
}

uint64_t type metadata accessor for HealthCheckActivityProvider()
{
  uint64_t result = qword_100325140;
  if (!qword_100325140) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B8F14()
{
  sub_10001BF34(319, (unint64_t *)&unk_100327F50, &qword_100325150);
  if (v0 <= 0x3F)
  {
    sub_10001BF34(319, (unint64_t *)&unk_100327F70, &qword_100322490);
    if (v1 <= 0x3F)
    {
      sub_10001BF34(319, (unint64_t *)&qword_100325158, (uint64_t *)&unk_10032A630);
      if (v2 <= 0x3F)
      {
        sub_10001BF34(319, (unint64_t *)&qword_100325720, (uint64_t *)&unk_100321920);
        if (v3 <= 0x3F)
        {
          sub_10001BF34(319, (unint64_t *)&qword_100324050, (uint64_t *)&unk_10032A640);
          if (v4 <= 0x3F)
          {
            sub_10001BF34(319, (unint64_t *)&unk_100324010, (uint64_t *)&unk_10032ACB0);
            if (v5 <= 0x3F) {
              swift_updateClassMetadata2();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000B9148(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(NSObject *), uint64_t a6)
{
  uint64_t v38 = a3;
  uint64_t v36 = a2;
  int v35 = a1;
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  uint64_t v37 = a4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v18, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v14);
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v18, v14);
  id v20 = [*(id *)(*sub_100008EF8(v40, v41) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)v40);
  if (v20)
  {
    LODWORD(v21) = v35 & 1;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      int v35 = (int)v21;
      uint64_t v21 = (uint8_t *)v25;
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      v40[0] = v26;
      if (v35) {
        uint64_t v27 = 0x656C756465686353;
      }
      else {
        uint64_t v27 = 0x6E616D6544206E4FLL;
      }
      uint64_t v39 = sub_100135190(v27, 0xE900000000000064, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting to pull all cloud data before %s Health Checks", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      LOBYTE(v21) = v35;
      swift_slowDealloc();
    }

    uint64_t v28 = v37;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, v37 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager, v9);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
    sub_100008EF8(v40, v41);
    uint64_t v29 = swift_allocObject();
    *(unsigned char *)(v29 + 16) = (_BYTE)v21;
    uint64_t v30 = v36;
    *(void *)(v29 + 24) = v28;
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v38;
    *(void *)(v29 + 48) = sub_1000B96B0;
    *(void *)(v29 + 56) = v19;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10014CD74(3, 0, (uint64_t)sub_1000B9714, v29);
    swift_release();
    sub_100008EA8((uint64_t)v40);
    return swift_release();
  }
  else
  {
    sub_100009F04(&qword_1003215F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = 0x72456E496E676953;
    *(void *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    uint64_t v39 = -8014;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000B96B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    *(void *)(inited + 48) = v40[0];
    unint64_t v33 = sub_100220B90(inited);
    sub_1001A7428(v33, a5);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000B9678()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B96B0(uint64_t a1, uint64_t a2)
{
  sub_1001A66FC(a1, a2, *(void (**))(v2 + 16));
}

unint64_t sub_1000B96B8()
{
  unint64_t result = qword_100321098;
  if (!qword_100321098)
  {
    type metadata accessor for AASignInError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321098);
  }
  return result;
}

uint64_t sub_1000B9718(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a3;
  uint64_t v36 = a2;
  int v35 = a1;
  uint64_t v9 = sub_100009F04((uint64_t *)&unk_10032ACE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = sub_100009F04(&qword_100325870);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  uint64_t v37 = a4;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v18, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v14);
  swift_retain();
  swift_retain();
  Dependency.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v18, v14);
  id v20 = [[*(id *)(*sub_100008EF8(v40, v41) + 16) aa_primaryAppleAccount];

  sub_100008EA8((uint64_t)v40);
  if (v20)
  {
    LODWORD(v21) = v35 & 1;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100007288(v22, (uint64_t)qword_10033E778);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      int v35 = (int)v21;
      uint64_t v21 = (uint8_t *)v25;
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      v40[0] = v26;
      if (v35) {
        uint64_t v27 = 0x656C756465686353;
      }
      else {
        uint64_t v27 = 0x6E616D6544206E4FLL;
      }
      uint64_t v39 = sub_100135190(v27, 0xE900000000000064, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Starting to pull all cloud data before %s Health Checks", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      LOBYTE(v21) = v35;
      swift_slowDealloc();
    }

    uint64_t v28 = v37;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v13, v37 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager, v9);
    Dependency.wrappedValue.getter();
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
    sub_100008EF8(v40, v41);
    uint64_t v29 = swift_allocObject();
    *(unsigned char *)(v29 + 16) = (_BYTE)v21;
    uint64_t v30 = v36;
    *(void *)(v29 + 24) = v28;
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v38;
    *(void *)(v29 + 48) = sub_1000B9C98;
    *(void *)(v29 + 56) = v19;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10014CD74(3, 0, (uint64_t)sub_1000B9714, v29);
    swift_release();
    sub_100008EA8((uint64_t)v40);
    return swift_release();
  }
  else
  {
    sub_100009F04(&qword_1003215F8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002A9C00;
    *(void *)(inited + 32) = 0x72456E496E676953;
    *(void *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    uint64_t v39 = -8014;
    sub_100006DF0((uint64_t)_swiftEmptyArrayStorage);
    sub_1000B96B8();
    _BridgedStoredNSError.init(_:userInfo:)();
    *(void *)(inited + 48) = v40[0];
    unint64_t v33 = sub_100220B90(inited);
    sub_1000B6DC0(0, v33, a5, a6);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000B9C58()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000B9C98(int a1, uint64_t a2)
{
  return sub_1000B6DC0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000B9CA4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000B9CEC(uint64_t a1)
{
  return sub_1000B762C(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

unint64_t sub_1000B9D00()
{
  unint64_t result = qword_100324670;
  if (!qword_100324670)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100324670);
  }
  return result;
}

uint64_t sub_1000B9D40()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B9D78()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_1000B9D88()
{
  sub_100083FE0(v0);
}

uint64_t sub_1000B9D90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9DA0()
{
  return sub_10003046C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000B9DA8()
{
  sub_100008EA8(v0 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000B9DF8(uint64_t a1, uint64_t a2)
{
  return sub_1000B7E94(a1, a2, *(unsigned char *)(v2 + 16), (void *)(v2 + 24), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88));
}

uint64_t sub_1000B9E0C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000B9E5C()
{
  return sub_1000B887C(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1000B9E70()
{
  sub_100008EA8(v0 + 24);
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000B9EC0(uint64_t a1)
{
  return sub_1000B819C(a1, *(unsigned char *)(v1 + 16), (void *)(v1 + 24), *(void *)(v1 + 64), *(void *)(v1 + 72), *(uint64_t (**)(void))(v1 + 80));
}

uint64_t sub_1000B9EE4()
{
  type metadata accessor for CustodianHealthCheck();
  sub_100009F04(&qword_100325500);
  uint64_t result = String.init<A>(describing:)();
  qword_100325368 = result;
  unk_100325370 = v1;
  return result;
}

uint64_t sub_1000B9F30(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  if ((a2 & 1) == 0) {
    return sub_1000BA1E4(a1, (uint64_t)a4, a5);
  }
  swift_errorRetain();
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100007288(v8, (uint64_t)qword_10033E778);
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v14 = qword_100325368;
    unint64_t v13 = unk_100325370;
    swift_bridgeObjectRetain();
    sub_100135190(v14, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2112;
    uint64_t v15 = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v15;
    sub_100007844(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - error fetching my custodianship records: %@", (uint8_t *)v11, 0x16u);
    sub_100009F04((uint64_t *)&unk_1003216C0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100007844(a1, 1);
  }

  swift_errorRetain();
  a4(a1);
  sub_100007844(a1, 1);
  return sub_100007844(a1, 1);
}

uint64_t sub_1000BA1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v38 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v37 = v10;
  __chkstk_darwin(v10, v11);
  int v35 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = dispatch_group_create();
  type metadata accessor for PartialErrorHandler();
  swift_allocObject();
  uint64_t v19 = sub_10019FEE0();
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v33 = a3;
    uint64_t v21 = *(void *)(type metadata accessor for CustodianshipInfoRecord() - 8);
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v23 = *(void *)(v21 + 72);
    v32[1] = a1;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000C1BE4(v22, v18, v4, v19);
      v22 += v23;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    a3 = v33;
  }
  sub_1000093D0();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchQoS.QoSClass.background(_:), v13);
  os_log_type_t v24 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v34;
  v25[2] = v19;
  uint64_t v25[3] = v26;
  v25[4] = a3;
  aBlock[4] = sub_1000C201C;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100007244;
  uint64_t aBlock[3] = &unk_1002F9890;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v28 = v35;
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_10000A668((unint64_t *)&qword_1003229B0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100009F04(&qword_10032BB00);
  sub_10000A534();
  uint64_t v29 = v38;
  uint64_t v30 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();

  _Block_release(v27);
  swift_release();

  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v37);
  return swift_release();
}

uint64_t sub_1000BA64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v5 = *v3;
  uint64_t v42 = a2;
  uint64_t v43 = v5;
  uint64_t v6 = sub_100009F04(&qword_100321FF8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v40 = v14;
  uint64_t v41 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v34 - v16;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100007288(v18, (uint64_t)qword_10033E778);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v38(v17, a1, v10);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v35 = v7;
    uint64_t v36 = v6;
    uint64_t v37 = a1;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v47[0] = v34;
    *(_DWORD *)uint64_t v21 = 136315394;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_100325368;
    unint64_t v22 = unk_100325370;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_100135190(v23, v22, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_100135190(v24, v25, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - starting individual custodian health check for %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v36;
    a1 = v37;
    uint64_t v7 = v35;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  uint64_t v26 = v44;
  uint64_t v27 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v39, v44 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v6);
  Dependency.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  sub_100008EF8(v47, v47[3]);
  uint64_t v28 = v41;
  v38(v41, a1, v10);
  unint64_t v29 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v30 = (v40 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v42;
  *((void *)v31 + 2) = v26;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v45;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v31[v29], v28, v10);
  *(void *)&v31[v30] = v43;
  swift_retain();
  swift_retain();
  sub_10023C384(a1, (uint64_t)sub_1000C3204, (uint64_t)v31);
  swift_release();
  return sub_100008EA8((uint64_t)v47);
}

uint64_t sub_1000BAB78(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CustodianshipInfoRecord();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100009F04((uint64_t *)&unk_100324590);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100019730(a1, (uint64_t)v19, (uint64_t *)&unk_100324590);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v40 = a3;
    uint64_t v41 = a4;
    uint64_t v20 = *v19;
    uint64_t v21 = objc_allocWithZone((Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent());
    *(void *)&v21[qword_10032F900] = _swiftEmptyArrayStorage;
    v21[qword_10032F908] = 0;
    unint64_t v22 = &v21[qword_10032F910];
    *unint64_t v22 = 0;
    v22[1] = 0;
    sub_100009F04((uint64_t *)&unk_10032A630);
    Dependency.init(dependencyId:config:)();
    sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v23 = (char *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
    _convertErrorToNSError(_:)();
    uint64_t v24 = &v23[qword_10032F900];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v24 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    id v39 = v23;
    sub_100267790();
    unint64_t v25 = v40;
    uint64_t v26 = v43;
    if (qword_100320B98 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100007288(v27, (uint64_t)qword_10033E778);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v11, v42, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v45[0] = v42;
      *(_DWORD *)uint64_t v30 = 136315650;
      if (qword_100320C08 != -1) {
        swift_once();
      }
      uint64_t v32 = qword_100325368;
      unint64_t v33 = unk_100325370;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_100135190(v32, v33, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2080;
      sub_10000A668((unint64_t *)&qword_100321670, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = sub_100135190(v34, v35, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v8);
      *(_WORD *)(v30 + 22) = 2112;
      uint64_t v36 = _convertErrorToNSError(_:)();
      uint64_t v44 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v36;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - error fetching custodianship record for %s: %@", (uint8_t *)v30, 0x20u);
      sub_100009F04((uint64_t *)&unk_1003216C0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v25 = v40;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRetain();
    v25(v20);
    swift_errorRelease();

    return swift_errorRelease();
  }
  else
  {
    sub_1000C2AD4((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_1000BB1AC((uint64_t)v15, a3, a4);
    return sub_1000C274C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
}

void sub_1000BB1AC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v88 = a3;
  uint64_t v86 = a2;
  uint64_t v83 = *v3;
  uint64_t v5 = sub_100009F04(&qword_100321C90);
  __chkstk_darwin(v5 - 8, v6);
  os_log_type_t v85 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100009F04(&qword_100321FF8);
  uint64_t v79 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecoveryRecordsRequest = (int *)type metadata accessor for FetchRecoveryRecordsRequest(0);
  uint64_t v80 = *((void *)RecoveryRecordsRequest - 1);
  uint64_t v14 = __chkstk_darwin(RecoveryRecordsRequest, v13);
  uint64_t v81 = v15;
  uint64_t v82 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  char v84 = (char *)&v74 - v17;
  uint64_t v18 = type metadata accessor for CustodianshipInfoRecord();
  uint64_t v78 = *(void *)(v18 - 8);
  uint64_t v19 = *(void *)(v78 + 64);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v76 = (uint64_t)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v75 = (uint64_t)&v74 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v77 = (uint64_t)&v74 - v27;
  __chkstk_darwin(v26, v28);
  uint64_t v30 = (char *)&v74 - v29;
  uint64_t v31 = objc_allocWithZone((Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent());
  *(void *)&v31[qword_10032F900] = _swiftEmptyArrayStorage;
  v31[qword_10032F908] = 0;
  uint64_t v32 = &v31[qword_10032F910];
  *uint64_t v32 = 0;
  v32[1] = 0;
  sub_100009F04((uint64_t *)&unk_10032A630);
  Dependency.init(dependencyId:config:)();
  sub_1000800D0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v18;
  uint64_t v34 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)();
  uint64_t v35 = *(void *)(a1 + *(int *)(v18 + 28));
  uint64_t v36 = a1;
  sub_1000C26A4(a1, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (v35 == 2)
  {
    sub_1000C274C((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
LABEL_4:
    uint64_t v38 = a1 + *(int *)(v33 + 20);
    uint64_t v39 = type metadata accessor for UUID();
    uint64_t v40 = (uint64_t)v84;
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v84, v38, v39);
    *(unsigned char *)(v40 + RecoveryRecordsRequest[5]) = 0;
    *(unsigned char *)(v40 + RecoveryRecordsRequest[6]) = 0;
    uint64_t v41 = (void *)(v40 + RecoveryRecordsRequest[7]);
    *uint64_t v41 = 0;
    v41[1] = 0;
    uint64_t v42 = (void *)(v40 + RecoveryRecordsRequest[8]);
    void *v42 = 0;
    v42[1] = 0;
    uint64_t v43 = v8;
    uint64_t v44 = v34;
    uint64_t v45 = v87;
    uint64_t v46 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v11, (uint64_t)v87 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v43);
    Dependency.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v43);
    uint64_t v47 = sub_100008EF8(v89, v89[3]);
    uint64_t v48 = v77;
    sub_1000C26A4(v36, v77, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    unint64_t v49 = (*(unsigned __int8 *)(v78 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    uint64_t v50 = (uint64_t (*)(uint64_t))swift_allocObject();
    *((void *)v50 + 2) = v45;
    *((void *)v50 + 3) = v44;
    uint64_t v51 = v88;
    *((void *)v50 + 4) = v86;
    *((void *)v50 + 5) = v51;
    sub_1000C2AD4(v48, (uint64_t)v50 + v49, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    *(void *)((char *)v50 + ((v19 + v49 + 7) & 0xFFFFFFFFFFFFFFF8)) = v83;
    uint64_t v86 = (void (*)(void))*v47;
    uint64_t v52 = type metadata accessor for TaskPriority();
    uint64_t v53 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v85, 1, 1, v52);
    uint64_t v54 = v82;
    sub_1000C26A4(v40, v82, type metadata accessor for FetchRecoveryRecordsRequest);
    unint64_t v55 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
    unint64_t v56 = (v81 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = 0;
    *(void *)(v57 + 24) = 0;
    sub_1000C2AD4(v54, v57 + v55, type metadata accessor for FetchRecoveryRecordsRequest);
    *(void *)(v57 + v56) = v86;
    id v58 = (uint64_t (**)(uint64_t))(v57 + ((v56 + 15) & 0xFFFFFFFFFFFFFFF8));
    *id v58 = sub_1000C2380;
    v58[1] = v50;
    swift_retain();
    id v59 = v44;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100225A54(v53, (uint64_t)&unk_100325508, v57);

    swift_release();
    swift_release();
    sub_1000C274C(v40, type metadata accessor for FetchRecoveryRecordsRequest);
    sub_100008EA8((uint64_t)v89);
    return;
  }
  uint64_t v37 = *(void *)&v30[*(int *)(v33 + 28)];
  sub_1000C274C((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  if (v37 == 3) {
    goto LABEL_4;
  }
  uint64_t v60 = v33;
  if (qword_100320B98 != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  sub_100007288(v61, (uint64_t)qword_10033E778);
  uint64_t v62 = v75;
  sub_1000C26A4(a1, v75, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v63 = v76;
  sub_1000C26A4(a1, v76, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v87 = v34;
    uint64_t v66 = swift_slowAlloc();
    v89[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 136315650;
    if (qword_100320C08 != -1) {
      swift_once();
    }
    uint64_t v67 = qword_100325368;
    unint64_t v68 = unk_100325370;
    swift_bridgeObjectRetain();
    uint64_t v90 = sub_100135190(v67, v68, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v66 + 12) = 2080;
    uint64_t v69 = v75;
    uint64_t v70 = (uint64_t *)(v75 + *(int *)(v60 + 24));
    uint64_t v71 = *v70;
    unint64_t v72 = v70[1];
    swift_bridgeObjectRetain();
    uint64_t v90 = sub_100135190(v71, v72, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000C274C(v69, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    *(_WORD *)(v66 + 22) = 2048;
    uint64_t v73 = *(void *)(v76 + *(int *)(v60 + 28));
    sub_1000C274C(v76, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    uint64_t v90 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "%s - Custodian Owner %s\nwith status %ld did not require a health check.", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v34 = v87;
  }
  else
  {
    sub_1000C274C(v63, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
    sub_1000C274C(v62, (uint64_t (*)(void))type metadata accessor for CustodianshipInfoRecord);
  }
  sub_100267790();
  v86(0);
}